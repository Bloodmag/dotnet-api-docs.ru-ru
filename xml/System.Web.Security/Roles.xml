<Type Name="Roles" FullName="System.Web.Security.Roles">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8e4341b0577af2b91bb4cce3b802b7e04466f310" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30550798" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class Roles" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Roles extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Security.Roles" />
  <TypeSignature Language="VB.NET" Value="Public Class Roles" />
  <TypeSignature Language="C++ CLI" Value="public ref class Roles abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Управляет членством пользователя в ролях для проверки авторизации в приложении ASP.NET. Этот класс не наследуется.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Управление ролями ASP.NET позволяет управлять авторизацией на основе групп пользователей, называются ролями приложения. Назначение пользователям ролей, можно управлять доступ к различным частям или возможностям веб-приложения на основе роли вместо или в дополнение к указанию авторизации на основе имени пользователя. Например приложение сотрудников может иметь ролей, таких как диспетчеры, сотрудников, директоров и т. д., где указаны различные права для каждой роли.  
  
 Пользователи могут принадлежать к нескольким ролям. Например если узел является форумом, некоторые пользователи возможно роль членов и модераторов. Можно определить каждой роли, чтобы иметь разные привилегии на сайте, и пользователь, являющийся обе роли будет иметь оба набора привилегий.  
  
 Чтобы включить управление ролями для приложения ASP.NET, используйте элемент `system.web` раздел в файле Web.config для приложения, как показано в следующем примере.  
  
```  
<configuration>  
  <connectionStrings>  
    <add name="SqlServices" connectionString="Data Source=localhost;Initial Catalog=aspnetdb;Integrated Security=SSPI;" />  
  </connectionStrings>  
  
  <system.web>  
    <authentication mode="Forms" >  
      <forms loginUrl="login.aspx"  
      name=".ASPXFORMSAUTH" />  
    </authentication>  
  
  <roleManager defaultProvider="SqlProvider"   
    enabled="true"  
    cacheRolesInCookie="true"  
    cookieName=".ASPROLES"  
    cookieTimeout="30"  
    cookiePath="/"  
    cookieRequireSSL="false"  
    cookieSlidingExpiration="true"  
    cookieProtection="All" >  
    <providers>  
      <add  
        name="SqlProvider"  
        type="System.Web.Security.SqlRoleProvider"  
        connectionStringName="SqlServices"  
        applicationName="SampleApplication" />  
      </providers>  
    </roleManager>  
  </system.web>  
</configuration>  
```  
  
 Можно указать правила авторизации в файле конфигурации для веб-приложения или программно в коде. Например следующий раздел из файла Web.config требует, чтобы пользователи могли входить (Запрет анонимных пользователей) и затем позволяет только пользователям в роли "Администраторы" должна иметь доступ.  
  
```  
<authorization>  
  <deny users="?" />  
  <allow roles="Administrators" />  
  <deny users="*" />  
</authorization>  
```  
  
 Если вы используете `authorization` раздела в файле Web.config для указания авторизации на основе ролей, пользователи приложения должны предоставить удостоверение пользователя, прошедшего проверку подлинности. Можно проверять подлинность пользователей с использованием проверки подлинности Windows или форм. Анонимные пользователи не может назначить роли. Независимо от базы данных или в сочетании с ASP.NET, можно использовать роли <xref:System.Web.Security.Membership> классы.  
  
 Чтобы проверить членство в роли программными средствами, можно использовать <xref:System.Web.Security.Roles> класса или <xref:System.Web.UI.Page.User%2A?displayProperty=nameWithType> свойство с <xref:System.Web.Security.Roles.IsUserInRole%2A> метод, или же можно использовать <xref:System.Web.UI.Page.User%2A?displayProperty=nameWithType> свойство с <xref:System.Security.Principal.IPrincipal.IsInRole%2A?displayProperty=nameWithType> метод. Пример кода, программно проверяет членство в роли см.  
  
 <xref:System.Web.Security.Roles> Класса также позволяет создавать и удалять роли, а также добавлять и удалять пользователей из ролей.  
  
> [!NOTE]
>  Если вы настроили приложение для использования <xref:System.Web.Security.WindowsTokenRoleProvider> класса, невозможно изменить роли или членства в роли. <xref:System.Web.Security.WindowsTokenRoleProvider> Только группами classverifies членства в системе безопасности Windows. В этом случае необходимо использовать управление учетными записями пользователей Windows, а не роли ASP.NET для создания и удаления групп и управлять членством в группах.  
  
 Можно хранить сведения о ролях в нескольких источниках данных.  
  
-   Можно использовать <xref:System.Web.Security.WindowsTokenRoleProvider> класса для извлечения сведений о роли на основе членства в группах Windows.  
  
-   Сведения о роли можно хранить в базе данных SQL Server с помощью <xref:System.Web.Security.SqlRoleProvider> класса.  
  
-   При наличии существующих сведений о роли или сохранить сведения о роли и извлекаться сведения о роли из источника данных, отличных от Windows, хранилища данных авторизации или SQL Server, можно реализовать путем создания класса, который наследует настраиваемогопоставщикаролей<xref:System.Web.Security.RoleProvider> абстрактного класса. Дополнительные сведения см. в разделе [реализация поставщика ролей](http://msdn.microsoft.com/library/851671ce-bf9b-43f2-aba4-bc9d28b11c7d).  
  
 Если браузер пользователя поддерживает файлы cookie, можно сохранить сведения о роли для этого пользователя в файле cookie на компьютере пользователя. При каждом запросе страницы ASP.NET считывает сведения о роли для этого пользователя из файла cookie. Это может повысить производительность приложения путем сокращения связи с источником данных, необходимый для получения сведений о ролях. Если сведения о роли для пользователя слишком велик для хранения в файле cookie, ASP.NET сохраняет только последний использовавшийся сведения о роли в файле cookie и затем ищет сведения о ролях в источнике данных при необходимости. Если браузер пользователя не поддерживает файлы cookie или их использование отключено, сведения о роли в файле cookie не кэшируется.  
  
 Можно повысить надежность имена ролей, кэшированные в файле cookie, указав <xref:System.Web.Security.Roles.CookieProtectionValue%2A> свойства при настройке ролей ASP.NET. Значение по умолчанию <xref:System.Web.Security.Roles.CookieProtectionValue%2A> — `All`, который шифрует имена ролей в файле cookie и проверяет, что содержимое файла cookie не будут изменены.  
  
   
  
## Examples  
 В следующем примере показано файл Web.config для приложения, настроенного на использование членства ASP.NET и ролей ASP.NET и использовать <xref:System.Web.Security.SqlRoleProvider> для хранения данных членства и ролей в базе данных SQL Server. Пользователи проходят проверку подлинности с помощью форм и разрешен доступ к приложению только пользователям в роли "Администраторы".  
  
```  
<configuration>  
  <connectionStrings>  
    <add name="SqlServices" connectionString="Data Source=localhost;Initial Catalog=aspnetdb;Integrated Security=SSPI;" />  
  </connectionStrings>  
  
  <system.web>  
    <authentication mode="Forms" >  
      <forms loginUrl="login.aspx"  
      name=".ASPXFORMSAUTH" />  
    </authentication>  
  
    <authorization>  
      <deny users="?" />  
      <allow roles="Administrators" />  
      <deny users="*" />  
    </authorization>  
  
    <membership defaultProvider="AspNetSqlProvider" userIsOnlineTimeWindow="15">  
    </membership>  
  
    <roleManager defaultProvider="SqlProvider"   
      enabled="true"  
      cacheRolesInCookie="true"  
      cookieName=".ASPROLES"  
      cookieTimeout="30"  
      cookiePath="/"  
      cookieRequireSSL="true"  
      cookieSlidingExpiration="true"  
      cookieProtection="All" >  
  
      <providers>  
        <clear />  
        <add  
          name="SqlProvider"  
          type="System.Web.Security.SqlRoleProvider"  
          connectionStringName="SqlServices"  
          applicationName="SampleApplication" />  
        </providers>  
  
    </roleManager>  
  </system.web>  
</configuration>  
```  
  
 В следующем примере кода программным образом проверяет, является ли пользователь вошел в роли "Администраторы" перед предоставлением пользователю просмотр ролей других пользователей.  
  
  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddUsersToRole">
      <MemberSignature Language="C#" Value="public static void AddUsersToRole (string[] usernames, string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddUsersToRole(string[] usernames, string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.AddUsersToRole(System.String[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddUsersToRole (usernames As String(), roleName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddUsersToRole(cli::array &lt;System::String ^&gt; ^ usernames, System::String ^ roleName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usernames" Type="System.String[]" />
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="usernames">Массив строк имен пользователей для добавления в указанную роль.</param>
        <param name="roleName">Роль, в которую добавляются указанные имена пользователей.</param>
        <summary>Добавляет указанных пользователей в указанную роль.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.AddUsersToRole%2A> Метод вызывает поставщика роли по умолчанию, чтобы связать указанные пользователи с указанной роли в источнике данных.  
  
 Если приложение использует <xref:System.Web.Security.SqlRoleProvider> класса обновления базы данных, которые выполняются при вызове <xref:System.Web.Security.SqlRoleProvider.AddUsersToRoles%2A> метод выполняются в рамках транзакции. Если возникает ошибка, например имя пользователя, который уже находится в указанной роли, транзакция откатывается и обновления не выполняются.  
  
> [!NOTE]
>  Имена пользователей и роли не может содержать запятые.  
  
   
  
## Examples  
 Следующий пример кода добавляет одного или нескольких пользователей в роль или удаляет пользователя из роли на основе ввода пользователя. Пример файла Web.config, который включает управление ролями см. в разделе <xref:System.Web.Security.Roles>.  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/adduserstorolecs.aspx#3)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/adduserstorolevb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="roleName" /> имеет значение <see langword="null" />.  
  
 - или -  
  
 Один из элементов в <paramref name="usernames" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          Параметр <paramref name="roleName" /> равен пустой строке или содержит запятую (,).  
  
 - или -  
  
 Один из элементов массива <paramref name="usernames" /> — пустая строка или содержит запятую (,).  
  
 - или -  
  
 Параметр <paramref name="usernames" /> содержит повторяющийся элемент.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">Управление ролями не включено.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddUsersToRoles">
      <MemberSignature Language="C#" Value="public static void AddUsersToRoles (string[] usernames, string[] roleNames);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddUsersToRoles(string[] usernames, string[] roleNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.AddUsersToRoles(System.String[],System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddUsersToRoles (usernames As String(), roleNames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddUsersToRoles(cli::array &lt;System::String ^&gt; ^ usernames, cli::array &lt;System::String ^&gt; ^ roleNames);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usernames" Type="System.String[]" />
        <Parameter Name="roleNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="usernames">Массив строк имен пользователей для добавления в указанные роли.</param>
        <param name="roleNames">Массив строк имен ролей, в который добавляются указанные имена пользователей.</param>
        <summary>Добавляет указанных пользователей в указанные роли.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.AddUsersToRoles%2A> Метод вызывает поставщика роли по умолчанию, чтобы поставить указанных пользователей в указанные роли в источнике данных.  
  
 Если приложение использует <xref:System.Web.Security.SqlRoleProvider> класса обновления базы данных, которые выполняются при вызове <xref:System.Web.Security.SqlRoleProvider.AddUsersToRoles%2A> метод выполняются в рамках транзакции. Если возникает ошибка, например имя пользователя, который уже находится в указанной роли, транзакция откатывается и обновления не выполняются.  
  
> [!NOTE]
>  Имена пользователей и роли не может содержать запятые.  
  
   
  
## Examples  
 Следующий пример кода добавляет одного или нескольких пользователей одной или нескольких ролей. Пример файла Web.config, который включает управление ролями см. в разделе <xref:System.Web.Security.Roles>.  
  
 [!code-aspx-csharp[System.Web.Security.Roles#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/adduserstorolescs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.Roles#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/adduserstorolesvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Одна из ролей в массиве <paramref name="roleNames" /> имеет значение <see langword="null" />.  
  
 - или -  
  
 Один из пользователей в массиве <paramref name="usernames" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Одна из ролей в массиве <paramref name="roleNames" /> — пустая строка или содержит запятую (,).  
  
 - или -  
  
 Один из пользователей в массиве <paramref name="usernames" /> — пустая строка или содержит запятую (,).  
  
 - или -  
  
 Параметр <paramref name="roleNames" /> содержит повторяющийся элемент.  
  
 - или -  
  
 Параметр <paramref name="usernames" /> содержит повторяющийся элемент.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">Управление ролями не включено.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddUserToRole">
      <MemberSignature Language="C#" Value="public static void AddUserToRole (string username, string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddUserToRole(string username, string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.AddUserToRole(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddUserToRole (username As String, roleName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddUserToRole(System::String ^ username, System::String ^ roleName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">Имя пользователя для добавления в указанную роль.</param>
        <param name="roleName">Роль, в которую добавляется указанное имя пользователя.</param>
        <summary>Добавляет указанного пользователя в указанную роль.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.AddUserToRole%2A> Метод вызывает поставщика роли по умолчанию, чтобы связать указанный пользователь с указанной ролью в источнике данных.  
  
> [!NOTE]
>  Имена пользователей и роли не может содержать запятые.  
  
   
  
## Examples  
 Следующий пример кода добавляет пользователя к роли. Пример файла Web.config, который включает управление ролями см. в разделе <xref:System.Web.Security.Roles>.  
  
 [!code-aspx-csharp[System.Web.Security.Roles#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/addusertorolecs.aspx#2)]
 [!code-aspx-vb[System.Web.Security.Roles#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/addusertorolevb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="roleName" /> имеет значение <see langword="null" />.  
  
 - или -  
  
 Свойство <paramref name="username" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          Параметр <paramref name="roleName" /> равен пустой строке или содержит запятую (,).  
  
 - или -  
  
 Параметр <paramref name="username" /> равен пустой строке или содержит запятую (,).</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">Управление ролями не включено.  
  
 - или -  
  
 Пользователь уже присвоен указанной роли.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddUserToRoles">
      <MemberSignature Language="C#" Value="public static void AddUserToRoles (string username, string[] roleNames);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddUserToRoles(string username, string[] roleNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.AddUserToRoles(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddUserToRoles (username As String, roleNames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddUserToRoles(System::String ^ username, cli::array &lt;System::String ^&gt; ^ roleNames);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="roleNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="username">Имя пользователя для добавления в указанные роли.</param>
        <param name="roleNames">Массив строк ролей для добавления в них указанных имен пользователей.</param>
        <summary>Добавляет указанного пользователя в указанные роли.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.AddUserToRoles%2A> Метод вызывает поставщика роли по умолчанию для присоединения к ним указанного пользователя в указанные роли в источнике данных.  
  
 Если приложение использует <xref:System.Web.Security.SqlRoleProvider> класса обновления базы данных, которые выполняются при вызове <xref:System.Web.Security.Roles.AddUserToRoles%2A> метод выполняются в рамках транзакции. Если возникает ошибка, например имя пользователя, который уже находится в указанной роли, транзакция откатывается и обновления не выполняются.  
  
> [!NOTE]
>  Имена пользователей и роли не может содержать запятые.  
  
   
  
## Examples  
 В следующем примере кода добавляет одну или несколько ролей пользователя. Пример файла Web.config, который включает управление ролями см. в разделе <xref:System.Web.Security.Roles>.  
  
 [!code-aspx-csharp[System.Web.Security.Roles#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/addusertorolescs.aspx#3)]
 [!code-aspx-vb[System.Web.Security.Roles#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/addusertorolesvb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Одна из ролей в массиве <paramref name="roleNames" /> имеет значение <see langword="null" />.  
  
 - или -  
  
 Свойство <paramref name="username" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Одна из ролей в массиве <paramref name="roleNames" /> — пустая строка или содержит запятую (,).  
  
 - или -  
  
 Параметр <paramref name="username" /> равен пустой строке или содержит запятую (,).  
  
 - или -  
  
 Параметр <paramref name="roleNames" /> содержит повторяющийся элемент.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">Управление ролями не включено.</exception>
      </Docs>
    </Member>
    <Member MemberName="ApplicationName">
      <MemberSignature Language="C#" Value="public static string ApplicationName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string ApplicationName" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.ApplicationName" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property ApplicationName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ ApplicationName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает имя приложения, для которого будут сохраняться и извлекаться сведения о роли.</summary>
        <value>Имя приложения, для которого будут сохраняться и извлекаться сведения о роли.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.ApplicationName%2A> Используется свойство <xref:System.Web.Security.Roles> класс, связанный с различными приложениями пользователей и ролей. Это позволяет нескольким приложениям использовать тот же источник данных для хранения без конфликтов между повторяющихся имен пользователей и повторяющимися именами ролей пользователя и сведения о роли. Несколько приложений ASP.NET могут использовать тот же источник данных, указав то же значение в <xref:System.Web.Security.Roles.ApplicationName%2A> свойство. Можно задать <xref:System.Web.Security.Roles.ApplicationName%2A> свойство программным образом, можно установить либо декларативно в файле конфигурации для веб-приложения с помощью `applicationName` атрибута.  
  
 При использовании веб-приложения <xref:System.Web.Security.SqlRoleProvider> класса и значение не указано для `applicationName` атрибут в файле конфигурации <xref:System.Web.HttpRequest.ApplicationPath%2A?displayProperty=nameWithType> значение свойства для текущего <xref:System.Web.HttpContext.Request%2A?displayProperty=nameWithType> используется свойство.  
  
> [!CAUTION]
>  Поскольку по умолчанию один экземпляр поставщика ролей используется для всех запросов, обслуживаемых <xref:System.Web.HttpApplication> объекта может быть несколько запросов, параллельном выполнении и выполняется настройка <xref:System.Web.Security.Roles.ApplicationName%2A> значение свойства. <xref:System.Web.Security.Roles.ApplicationName%2A> Свойство не является потокобезопасным для нескольких операций записи и изменение <xref:System.Web.Security.Roles.ApplicationName%2A> значение свойства может привести к непредвиденному поведению для нескольких пользователей приложения. Следует создавать код, чтобы разрешить пользователям настраивать <xref:System.Web.Security.Roles.ApplicationName%2A> свойство, когда не требуется. Пример приложения там, где параметр <xref:System.Web.Security.Roles.ApplicationName%2A> свойства, может потребоваться является административное приложение, управляющее данными ролей для нескольких приложений. Такое приложение должно быть Однопользовательское приложение и не веб-приложения.  
  
   
  
## Examples  
 В следующем примере показано элемент в `system.web` раздел файла Web.config для приложения ASP.NET. Указывает, что приложение использует <xref:System.Web.Security.SqlRoleProvider> экземпляра и наборы `applicationName` атрибут `MyApplication`.  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/"  
  cookieRequireSSL="false"  
  cookieSlidingExpiration="true"  
  cookieProtection="All" >  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlRoleProvider"  
      connectionStringName="SqlServices"  
      applicationName="MyApplication" />  
  </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CacheRolesInCookie">
      <MemberSignature Language="C#" Value="public static bool CacheRolesInCookie { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CacheRolesInCookie" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CacheRolesInCookie" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CacheRolesInCookie As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool CacheRolesInCookie { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, указывающее кэшированы ли текущие роли пользователей в файл cookie.</summary>
        <value>
          <see langword="true" />, если роли текущего пользователя кэшируются с использованием файла cookie, иначе <see langword="false" />. Значение по умолчанию: <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Когда <xref:System.Web.Security.Roles.CacheRolesInCookie%2A> свойству `true` в файле Web.config, сведения о роли для каждого пользователя хранится в файле cookie. Когда управление ролями проверяет, является ли пользователь в определенной роли, файла cookie ролей проверяются перед вызовом поставщика ролей для проверки списка ролей в источнике данных. Файл cookie обновляется динамически для кэширования последних проверенных имен ролей.  
  
 Можно повысить надежность имена ролей, кэшированные в файле cookie, указав <xref:System.Web.Security.Roles.CookieProtectionValue%2A> свойства при настройке ролей ASP.NET. Значение по умолчанию <xref:System.Web.Security.Roles.CookieProtectionValue%2A> — `All`, который шифрует имена ролей в файле cookie и проверяет, что содержимое файла cookie не будут изменены.  
  
> [!NOTE]
>  Поскольку имена ролей могут кэшироваться отдельно от источника данных, возможно, что изменения в управлении ролью в источнике данных не отражались в кэшированных значений. В этом случае пользователю необходимо закрыть и снова открыть браузер, чтобы очистить значение срок действия файла cookie.  
  
   
  
## Examples  
 В следующем примере показано элемент в `system.web` раздел файла Web.config для приложения ASP.NET. Указывает, что приложение использует <xref:System.Web.Security.SqlRoleProvider> экземпляра и наборы `cacheRolesInCookie` атрибут `true`.  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/"  
  cookieRequireSSL="false"  
  cookieSlidingExpiration="true"  
  cookieProtection="All" >  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlRoleProvider"  
      connectionStringName="SqlServices"  
      applicationName="MyApplication" />  
   </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CookieName">
      <MemberSignature Language="C#" Value="public static string CookieName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string CookieName" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CookieName" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookieName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ CookieName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает имя файла cookie, в котором кэшированы имена ролей.</summary>
        <value>Имя файла cookie, в котором кэшированы имена ролей. По умолчанию — .ASPXROLES.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Можно указать имя файла cookie, в котором будут кэшировать роли для приложения, задав `cookieName` атрибут в файле Web.config для приложения ASP.NET. Это полезно, чтобы однозначно идентифицировать файл cookie для приложения или когда файл cookie является общим для нескольких приложений, таких как домена файла cookie.  
  
   
  
## Examples  
 В следующем примере показано элемент в `system.web` раздел файла Web.config для приложения ASP.NET. Указывает, что приложение использует <xref:System.Web.Security.SqlRoleProvider> экземпляра и наборы `cookieName` для атрибута. ASPROLES.  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/"  
  cookieRequireSSL="false"  
  cookieSlidingExpiration="true"  
  cookieProtection="All" >  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlRoleProvider"  
      connectionStringName="SqlServices"  
      applicationName="MyApplication" />  
  </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CookiePath">
      <MemberSignature Language="C#" Value="public static string CookiePath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string CookiePath" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CookiePath" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookiePath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ CookiePath { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает путь к файлу cookie с именами ролей.</summary>
        <value>Путь к файлу cookie, в котором кэшированы имена ролей. По умолчанию используется /.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Можно указать путь файла cookie, в котором будут кэшировать роли для приложения, задав `cookiePath` атрибут в файле Web.config для приложения ASP.NET. Дополнительные сведения о путях к файлам cookie см. в разделе <xref:System.Web.HttpCookie.Path%2A>.  
  
   
  
## Examples  
 В следующем примере показано элемент в `system.web` раздел файла Web.config для приложения ASP.NET. Указывает, что приложение использует <xref:System.Web.Security.SqlRoleProvider> экземпляра и наборы `cookiePath` атрибут /MyApplication.  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/MyApplication"  
  cookieRequireSSL="false"  
  cookieSlidingExpiration="true"  
  cookieProtection="All" >  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlRoleProvider"  
      connectionStringName="SqlServices"  
      applicationName="MyApplication" />  
  </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CookieProtectionValue">
      <MemberSignature Language="C#" Value="public static System.Web.Security.CookieProtection CookieProtectionValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Web.Security.CookieProtection CookieProtectionValue" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CookieProtectionValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookieProtectionValue As CookieProtection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Security::CookieProtection CookieProtectionValue { System::Web::Security::CookieProtection get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.CookieProtection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, указывающее, каким образом защищены имена ролей, кэшированные в файле cookie.</summary>
        <value>Одно из значений перечисления <see cref="T:System.Web.Security.CookieProtection" /> указывает, каким образом защищены имена ролей, кэшированные в файле Cookie. Значение по умолчанию: <see langword="All" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Можно указать защиты файла cookie, в котором будут кэшировать роли для приложения, задав `cookieProtection` атрибут в файле Web.config для приложения ASP.NET. `cookieProtection` Атрибут принимает <xref:System.Web.Security.CookieProtection> проверяется значение перечисления, указывающее, шифруются ли имена ролей, оба или ни одного.  
  
   
  
## Examples  
 В следующем примере показано элемент в `system.web` раздел файла Web.config для приложения ASP.NET. Указывает, что приложение использует <xref:System.Web.Security.SqlRoleProvider> экземпляра и наборы `cookieProtection` атрибут `Encrypted`.  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/MyApplication"  
  cookieRequireSSL="false"  
  cookieSlidingExpiration="true"  
  cookieProtection="Encrypted" >  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlRoleProvider"  
      connectionStringName="SqlServices"  
      applicationName="MyApplication" />  
  </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CookieRequireSSL">
      <MemberSignature Language="C#" Value="public static bool CookieRequireSSL { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CookieRequireSSL" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CookieRequireSSL" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookieRequireSSL As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool CookieRequireSSL { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, показывающее требуется ли файлам cookie с именами ролей протокол SSL для возвращения на сервер.</summary>
        <value>
          <see langword="true" />, если протокол SSL необходим для возвращения на сервер файлов Cookie с именами ролей; в противном случае — <see langword="false" />. Значение по умолчанию: <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Можно указать, требуется ли SSL (Secure Sockets Layer) для возврата cookie с именами ролей сервера в приложении установив `cookieRequireSSL` атрибут в файле Web.config для приложения ASP.NET. Дополнительные сведения см. в разделе <xref:System.Web.HttpCookie.Secure%2A>.  
  
   
  
## Examples  
 В следующем примере показано элемент в `system.web` раздел файла Web.config для приложения ASP.NET. Указывает, что приложение использует <xref:System.Web.Security.SqlRoleProvider> экземпляра и наборы `cookieRequireSSL` для `true`.  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/MyApplication"  
  cookieRequireSSL="true"  
  cookieSlidingExpiration="true"  
  cookieProtection="Encrypted" >  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlRoleProvider"  
      connectionStringName="SqlServices"  
      applicationName="MyApplication" />  
  </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CookieSlidingExpiration">
      <MemberSignature Language="C#" Value="public static bool CookieSlidingExpiration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CookieSlidingExpiration" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CookieSlidingExpiration" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookieSlidingExpiration As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool CookieSlidingExpiration { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Указывает, будет ли выполняться периодический сброс даты и времени истечения срока действия файла cookie c именами ролей.</summary>
        <value>
          <see langword="true" />, если выполняется периодический сброс срока действия такого файла cookie, иначе <see langword="false" />. Значение по умолчанию: <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Можно задать срок действия файла cookie с именами ролей и времени будут сброшены с каждого ответа, полученного с помощью `cookieSlidingExpiration` атрибут в файле Web.config для приложения ASP.NET. Если `true`, срок действия файла cookie изначально устанавливается в текущую дату и время, а также <xref:System.Web.Security.Roles.CookieTimeout%2A> в минутах. Хотя пользователь продолжает активно использовать приложения ASP.NET, срок действия и время куки-файл будет автоматически обновляться при наличии менее половины <xref:System.Web.Security.Roles.CookieTimeout%2A> оставшиеся. Дополнительные сведения см. в описании свойства <xref:System.Web.HttpCookie.Expires%2A>.  
  
   
  
## Examples  
 В следующем примере показано элемент в `system.web` раздел файла Web.config для приложения ASP.NET. Указывает, что приложение использует <xref:System.Web.Security.SqlRoleProvider> экземпляра и наборы <xref:System.Web.Security.Roles.CookieSlidingExpiration%2A> свойства `false`.  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/MyApplication"  
  cookieRequireSSL="true"  
  cookieSlidingExpiration="false"  
  cookieProtection="Encrypted" >  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlRoleProvider"  
      connectionStringName="SqlServices"  
      applicationName="MyApplication" />  
  </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CookieTimeout">
      <MemberSignature Language="C#" Value="public static int CookieTimeout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 CookieTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CookieTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookieTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int CookieTimeout { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает количество минут до истечения срока действия файла cookie с именами ролей.</summary>
        <value>Целое число, указывающее количество минут до истечения срока действия файла сookie с именами ролей. Значение по умолчанию - 30 минут.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.CookieTimeout%2A> Свойство используется при <xref:System.Web.Security.Roles.CookieSlidingExpiration%2A> свойство `true` и определяет время жизни в минутах для файла cookie ролей. Чтобы задать <xref:System.Web.Security.Roles.CookieTimeout%2A> значение, добавьте `cookieTimeout` атрибут к элементу в файле Web.config для приложения ASP.NET и укажите целочисленное значение.  
  
 Если <xref:System.Web.Security.Roles.CookieSlidingExpiration%2A> — `false`, это свойство учитывается.  
  
   
  
## Examples  
 В следующем примере показано элемент в `system.web` раздел файла Web.config для приложения ASP.NET. Указывает, что приложение использует <xref:System.Web.Security.SqlRoleProvider> экземпляра и задает <xref:System.Web.Security.Roles.CookieTimeout%2A> свойства до 30 минут.  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/MyApplication"  
  cookieRequireSSL="true"  
  cookieSlidingExpiration="true"  
  cookieProtection="Encrypted" >  
  <providers>  
  <add  
    name="SqlProvider"  
    type="System.Web.Security.SqlRoleProvider"  
    connectionStringName="SqlServices"  
    applicationName="MyApplication" />  
  </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePersistentCookie">
      <MemberSignature Language="C#" Value="public static bool CreatePersistentCookie { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CreatePersistentCookie" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CreatePersistentCookie" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CreatePersistentCookie As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool CreatePersistentCookie { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, указывающее, создаются ли файлы cookie с именами ролей для определенного сеанса или являются постоянными.</summary>
        <value>
          <see langword="true" />, если файлы Cookie с именами ролей являются постоянными; в противном случае — <see langword="false" />. Значение по умолчанию: <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.CreatePersistentCookie%2A> Значение свойства задается в конфигурации для приложения ASP.NET с помощью `createPersistentCookie` атрибута элемента конфигурации.  
  
 Когда `false`, имена ролей куки-файл является файлом cookie сеанса, файл cookie является потеряны при закрытии. Когда `true`, файлы cookie с именами ролей является постоянным, доступный в нескольких сеансах обозревателя. Дата окончания срока действия постоянный файл cookie и время задаются текущую дату и время, а также <xref:System.Web.Security.Roles.CookieTimeout%2A> значение в минутах.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRole">
      <MemberSignature Language="C#" Value="public static void CreateRole (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CreateRole(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.CreateRole(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CreateRole (roleName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CreateRole(System::String ^ roleName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">Имя создаваемой роли.</param>
        <summary>Добавляет новую роль в источник данных.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.CreateRole%2A> Метод добавляет имя роли в источнике данных. <xref:System.Web.Security.Roles.CreateRole%2A> вызовы <xref:System.Web.Security.RoleProvider.CreateRole%2A> метод поставщика ролей по умолчанию для добавления в указанную роль к источнику данных.  
  
> [!NOTE]
>  Имена ролей, не может содержать запятые.  
  
   
  
## Examples  
 В следующем примере кода создается новая роль в источнике данных. Пример файла Web.config, который включает управление ролями см. в разделе <xref:System.Web.Security.Roles>.  
  
> [!IMPORTANT]
>  Этот пример содержит текстовое поле, принимающее вводимые пользователем данные, что является потенциальной угрозой безопасности. По умолчанию данные, вводимые пользователем на веб-страницах ASP.NET, проверяются на наличие скриптов и HTML-элементов. Дополнительные сведения см. в разделе [Общие сведения об использовании сценариев](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/createrolecs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/createrolevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="roleName" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          Параметр <paramref name="roleName" /> равен пустой строке.  
  
 - или -  
  
 Параметр <paramref name="roleName" /> содержит запятую.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">Управление ролями не включено.</exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteCookie">
      <MemberSignature Language="C#" Value="public static void DeleteCookie ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DeleteCookie() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.DeleteCookie" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub DeleteCookie ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DeleteCookie();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Удаляет файл cookie, в котором кэшированы имена ролей.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.DeleteCookie%2A> Метод очищает содержимое файла cookie, который используется для кэширования имен ролей. Дополнительные сведения о кэшировании имен ролей см. в разделе <xref:System.Web.Security.Roles.CacheRolesInCookie%2A>.  
  
   
  
## Examples  
 В следующем примере кода вызывается <xref:System.Web.Security.Roles.DeleteCookie%2A> метод, чтобы удалить любые кэшированы имена ролей при пользователь вошел в систему. Пример файла Web.config, который включает управление ролями см. в разделе <xref:System.Web.Security.Roles>.  
  
> [!IMPORTANT]
>  Этот пример содержит текстовое поле, принимающее вводимые пользователем данные, что является потенциальной угрозой безопасности. По умолчанию данные, вводимые пользователем на веб-страницах ASP.NET, проверяются на наличие скриптов и HTML-элементов. Дополнительные сведения см. в разделе [Общие сведения об использовании сценариев](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.Security.Roles#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/logincs.aspx#5)]
 [!code-aspx-vb[System.Web.Security.Roles#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/loginvb.aspx#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.Provider.ProviderException">Управление ролями не включено.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DeleteRole">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Удаляет роль из источника данных.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeleteRole">
      <MemberSignature Language="C#" Value="public static bool DeleteRole (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool DeleteRole(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.DeleteRole(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DeleteRole (roleName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool DeleteRole(System::String ^ roleName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">Имя удаляемой роли.</param>
        <summary>Удаляет роль из источника данных.</summary>
        <returns>
          <see langword="true" />, если параметр <paramref name="roleName" /> был удален из источника данных; в противном случае — <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.DeleteRole%2A> Метод удаляет имя роли в источнике данных. <xref:System.Web.Security.Roles.DeleteRole%2A> вызовы <xref:System.Web.Security.RoleProvider.DeleteRole%2A> метод поставщика ролей по умолчанию, чтобы удалить указанную роль из источника данных.  
  
 Если роль идентифицировано `roleName` параметр имеет один или несколько элементов, то будет вызвано исключение и роль не будет удалена.  
  
   
  
## Examples  
 В следующем примере удаляется роль из источника данных. Пример файла Web.config, который включает управление ролями см. в разделе <xref:System.Web.Security.Roles>.  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/deleterolecs.aspx#2)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/deleterolevb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="roleName" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          Параметр <paramref name="roleName" /> равен пустой строке или содержит запятую (,).</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">
          Параметр <paramref name="roleName" /> имеет один или несколько элементов.  
  
 - или -  
  
 Управление ролями не включено.</exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteRole">
      <MemberSignature Language="C#" Value="public static bool DeleteRole (string roleName, bool throwOnPopulatedRole);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool DeleteRole(string roleName, bool throwOnPopulatedRole) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.DeleteRole(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DeleteRole (roleName As String, throwOnPopulatedRole As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool DeleteRole(System::String ^ roleName, bool throwOnPopulatedRole);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
        <Parameter Name="throwOnPopulatedRole" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="roleName">Имя удаляемой роли.</param>
        <param name="throwOnPopulatedRole">При значении <see langword="true" /> вызывается исключение, если <c>roleName</c> имеет один или несколько членов.</param>
        <summary>Удаляет роль из источника данных.</summary>
        <returns>
          <see langword="true" />, если параметр <paramref name="roleName" /> был удален из источника данных; в противном случае — <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.DeleteRole%2A> Метод удаляет имя роли в источнике данных. <xref:System.Web.Security.Roles.DeleteRole%2A> вызовы <xref:System.Web.Security.RoleProvider.DeleteRole%2A> метод поставщика ролей по умолчанию, чтобы удалить указанную роль из источника данных.  
  
 Если `throwOnPopulatedRole` — `true`, затем будет создано исключение, и роль не будет удалена, если роль идентифицировано `roleName` параметр имеет один или несколько членов. Если `throwOnPopulatedRole` — `false`, то роль будет удален, является ли она пустой или нет.  
  
   
  
## Examples  
 В следующем примере удаляется роль из источника данных. Пример файла Web.config, который включает управление ролями см. в разделе <xref:System.Web.Security.Roles>.  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/deleterolecs.aspx#2)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/deleterolevb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="roleName" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          Параметр <paramref name="roleName" /> равен пустой строке.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">
          Параметр <paramref name="roleName" /> имеет один или несколько членов, и параметр <paramref name="throwOnPopulatedRole" /> имеет значение <see langword="true" />.  
  
 - или -  
  
 Управление ролями не включено.</exception>
      </Docs>
    </Member>
    <Member MemberName="Domain">
      <MemberSignature Language="C#" Value="public static string Domain { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string Domain" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.Domain" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Domain As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ Domain { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение домена файла cookie с именами ролей.</summary>
        <value>Свойство <see cref="P:System.Web.HttpCookie.Domain" /> файла Cookie с именами ролей.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.Domain%2A> Значение свойства задается в конфигурации для приложения ASP.NET с помощью `domain` атрибута элемента конфигурации.  
  
 Если значение не указано в конфигурации атрибут домена <xref:System.Web.Security.Roles.Domain%2A> возвращает `null` и домен cookie имен ролей по умолчанию поведения <xref:System.Web.HttpCookie> <xref:System.Web.HttpCookie.Domain%2A> свойство.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public static bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool Enabled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, показывающее, включено ли управление ролями для текущего веб-приложения.</summary>
        <value>
          <see langword="true" />, если управление ролями включено; в противном случае — <see langword="false" />. Значение по умолчанию: <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере показано элемент в `system.web` раздел файла Web.config для приложения ASP.NET. Указывает, что приложение использует <xref:System.Web.Security.SqlRoleProvider> экземпляра и наборы `enabled` атрибут `true`.  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/"  
  cookieRequireSSL="false"  
  cookieSlidingExpiration="true"  
  cookieProtection="All" >  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlRoleProvider"  
      connectionStringName="SqlServices"  
      applicationName="MyApplication" />  
  </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindUsersInRole">
      <MemberSignature Language="C#" Value="public static string[] FindUsersInRole (string roleName, string usernameToMatch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] FindUsersInRole(string roleName, string usernameToMatch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.FindUsersInRole(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindUsersInRole (roleName As String, usernameToMatch As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ FindUsersInRole(System::String ^ roleName, System::String ^ usernameToMatch);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
        <Parameter Name="usernameToMatch" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">Роль, в которой следует выполнить поиск.</param>
        <param name="usernameToMatch">Имя пользователя для поиска.</param>
        <summary>Возвращает список пользователей в указанной роли, у которых имена совпадают с указанными именами пользователей.</summary>
        <returns>Массив строк, содержащий имена всех пользователей, имена которых совпадают с <paramref name="usernameToMatch" />, и которые являются членами указанной роли.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.FindUsersInRole%2A> Возвращает список пользователей в роли, где имя пользователя содержит совпадения с предоставленным `usernameToMatch` для настроенного `applicationName`. Например если `usernameToMatch` параметр имеет значение «user», то пользователи «user1», «user2», «user3» и т. д возвращаются. Пользователи возвращаются в алфавитном порядке по имени пользователя.  
  
 <xref:System.Web.Security.SqlRoleProvider> Выполняет поиск с помощью предложения LIKE к `usernameToMatch` параметра. Все шаблоны, которые поддерживаются сервером SQL Server в, как можно использовать в предложениях `usernameToMatch` значение параметра.  
  
   
  
## Examples  
 Следующий пример кода использует <xref:System.Web.Security.Roles.FindUsersInRole%2A> метод, чтобы отобразить членство в роли на основе ввода пользователя. Пример файла Web.config, который включает управление ролями см. в разделе <xref:System.Web.Security.Roles>.  
  
> [!IMPORTANT]
>  Этот пример содержит текстовое поле, принимающее вводимые пользователем данные, что является потенциальной угрозой безопасности. По умолчанию данные, вводимые пользователем на веб-страницах ASP.NET, проверяются на наличие скриптов и HTML-элементов. Дополнительные сведения см. в разделе [Общие сведения об использовании сценариев](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.Security.Roles#11](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/FindUsersInRolecs.aspx#11)]
 [!code-aspx-vb[System.Web.Security.Roles#11](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/FindUsersInRolevb.aspx#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Значение параметра <paramref name="roleName" /> — <see langword="null" /> (<see langword="Nothing" /> в Visual Basic).  
  
 - или -  
  
 Свойство <paramref name="usernameToMatch" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          Параметр <paramref name="roleName" /> равен пустой строке или содержит запятую (,).  
  
 - или -  
  
 Параметр <paramref name="usernameToMatch" /> равен пустой строке.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">Управление ролями не включено.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetAllRoles">
      <MemberSignature Language="C#" Value="public static string[] GetAllRoles ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetAllRoles() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.GetAllRoles" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetAllRoles () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetAllRoles();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает список всех ролей для приложения.</summary>
        <returns>Массив строк, содержащий имена всех ролей, сохраненных в источнике данных для приложения.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.GetAllRoles%2A> Вызовы метода <xref:System.Web.Security.RoleProvider.GetAllRoles%2A?displayProperty=nameWithType> метод поставщика ролей по умолчанию, чтобы получить список всех ролей из источника данных для приложения. Только для ролей для приложения, которое указано в <xref:System.Web.Security.Roles.ApplicationName%2A> извлекаются свойства.  
  
   
  
## Examples  
 Следующий пример кода использует <xref:System.Web.Security.Roles.GetAllRoles%2A> метод, чтобы получить список ролей для приложения и привязку результатов к <xref:System.Web.UI.WebControls.GridView?displayProperty=nameWithType> элемента управления. Пример файла Web.config, который включает управление ролями см. в разделе <xref:System.Web.Security.Roles>.  
  
> [!IMPORTANT]
>  Этот пример содержит текстовое поле, принимающее вводимые пользователем данные, что является потенциальной угрозой безопасности. По умолчанию данные, вводимые пользователем на веб-страницах ASP.NET, проверяются на наличие скриптов и HTML-элементов. Дополнительные сведения см. в разделе [Общие сведения об использовании сценариев](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/createrolecs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/createrolevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.Provider.ProviderException">Управление ролями не включено.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetRolesForUser">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает список ролей, в которых состоит пользователь.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetRolesForUser">
      <MemberSignature Language="C#" Value="public static string[] GetRolesForUser ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetRolesForUser() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.GetRolesForUser" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRolesForUser () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetRolesForUser();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает список ролей, с которыми вошел в систему текущий пользователь.</summary>
        <returns>Массив строк, содержащий имена всех ролей, с которыми вошел в систему текущий пользователь.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.GetRolesForUser%2A> Вызовы метода <xref:System.Web.Security.RoleProvider.GetRolesForUser%2A?displayProperty=nameWithType> метод поставщика ролей по умолчанию для извлечения из данных источника ролей, которые пользователь вошел в систему текущий. Пользователь вошел в систему текущий определяется <xref:System.Web.HttpContext.User%2A?displayProperty=nameWithType> текущего элемента <xref:System.Web.HttpContext?displayProperty=nameWithType>, или <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> средах размещения отличные от HTTP. Если пользователь не вошел в систему, будет вызвано исключение. Только для ролей для приложения, которое указано в <xref:System.Web.Security.Roles.ApplicationName%2A> извлекаются свойства.  
  
 Если <xref:System.Web.Security.Roles.CacheRolesInCookie%2A> — `true`, затем результаты <xref:System.Web.Security.Roles.GetRolesForUser%2A> метод может быть возвращено из кэша роли, а не указанного поставщика ролей.  
  
   
  
## Examples  
 Следующий пример кода использует <xref:System.Web.Security.Roles.GetRolesForUser%2A> метод, чтобы получить список ролей для указанного пользователя и привязать роли, возвращаемый <xref:System.Web.UI.WebControls.GridView?displayProperty=nameWithType> элемента управления. Пример файла Web.config, который включает управление ролями см. в разделе <xref:System.Web.Security.Roles>.  
  
 [!code-aspx-csharp[System.Web.Security.Roles#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/ViewRolescs.aspx#4)]
 [!code-aspx-vb[System.Web.Security.Roles#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/ViewRolesvb.aspx#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">В данный момент нет вошедших в систему пользователей.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">Управление ролями не включено.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetRolesForUser">
      <MemberSignature Language="C#" Value="public static string[] GetRolesForUser (string username);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetRolesForUser(string username) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.GetRolesForUser(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRolesForUser (username As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetRolesForUser(System::String ^ username);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">Имя пользователя, для которого нужно вернуть список ролей.</param>
        <summary>Возвращает список ролей, в которых состоит пользователь.</summary>
        <returns>Массив строк, содержащий имена всех ролей, с которыми входит указанный пользователь.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.GetRolesForUser%2A> Вызовы метода <xref:System.Web.Security.RoleProvider.GetRolesForUser%2A?displayProperty=nameWithType> метод поставщика ролей по умолчанию для извлечения из данных источника роли, в которой является пользователь. Только для ролей для приложения, которое указано в <xref:System.Web.Security.Roles.ApplicationName%2A> извлекаются свойства.  
  
 Если `username` равен текущего вошедшего пользователя и <xref:System.Web.Security.Roles.CacheRolesInCookie%2A> — `true`, результаты <xref:System.Web.Security.Roles.GetRolesForUser%2A> метод может быть возвращено из кэша роли, а не указанный <xref:System.Web.Security.Roles.Provider%2A>.  
  
   
  
## Examples  
 Следующий пример кода использует <xref:System.Web.Security.Roles.GetRolesForUser%2A> метод, чтобы получить список ролей для указанного пользователя и привязать роли, возвращаемый <xref:System.Web.UI.WebControls.GridView?displayProperty=nameWithType> элемента управления. Пример файла Web.config, который включает управление ролями см. в разделе <xref:System.Web.Security.Roles>.  
  
 [!code-aspx-csharp[System.Web.Security.Roles#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/ViewRolescs.aspx#4)]
 [!code-aspx-vb[System.Web.Security.Roles#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/ViewRolesvb.aspx#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="username" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="username" /> содержит запятую (,).</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">Управление ролями не включено.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetUsersInRole">
      <MemberSignature Language="C#" Value="public static string[] GetUsersInRole (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetUsersInRole(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.GetUsersInRole(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUsersInRole (roleName As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetUsersInRole(System::String ^ roleName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">Роль, для которой возвращается список пользователей.</param>
        <summary>Возвращает список пользователей в указанной роли.</summary>
        <returns>Массив строк, содержащий имена всех пользователей, которые являются членами указанной роли.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.GetUsersInRole%2A> Вызовы метода <xref:System.Web.Security.RoleProvider.GetUsersInRole%2A> метод поставщика ролей по умолчанию для извлечения имен пользователей, связанных с ролью из источника данных. Только для ролей для приложения, которое указано в <xref:System.Web.Security.Roles.ApplicationName%2A> извлекаются свойства.  
  
   
  
## Examples  
 Следующий пример кода использует <xref:System.Web.Security.Roles.GetUsersInRole%2A> метод, чтобы получить список пользователей в определенной роли и привязывает результаты к <xref:System.Web.UI.WebControls.GridView> элемента управления. Пример файла Web.config, который включает управление ролями см. в разделе <xref:System.Web.Security.Roles>.  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/adduserstorolecs.aspx#3)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/adduserstorolevb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="roleName" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          Параметр <paramref name="roleName" /> равен пустой строке или содержит запятую (,).</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">Управление ролями не включено.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsUserInRole">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает значение, позволяющее определить, находится ли пользователь в указанной роли.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsUserInRole">
      <MemberSignature Language="C#" Value="public static bool IsUserInRole (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsUserInRole(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.IsUserInRole(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsUserInRole (roleName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsUserInRole(System::String ^ roleName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">Имя роли, в которой следует выполнить поиск.</param>
        <summary>Возвращает значение, позволяющее определить, находится ли текущий пользователь, вошедший в систему, в указанной роли. Интерфейс API предназначен для вызова только в контексте потока запросов ASP.NET. При таком санкционированном использовании он является потокобезопасным.</summary>
        <returns>
          <see langword="true" />, если текущему пользователю, вошедшему в систему, присвоена указанная роль, в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.IsUserInRole%2A> Вызовы метода <xref:System.Web.Security.RoleProvider.IsUserInRole%2A?displayProperty=nameWithType> метод поставщика ролей по умолчанию, чтобы определить, является ли пользователь вошел в систему текущий связанный с ролью из источника данных для приложения, указанного в <xref:System.Web.Security.Roles.ApplicationName%2A> свойство. Пользователь вошел в систему текущий определяется <xref:System.Web.HttpContext.User%2A?displayProperty=nameWithType> текущего элемента <xref:System.Web.HttpContext?displayProperty=nameWithType>, или <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> средах размещения отличные от HTTP. Если пользователь не вошел в систему, будет вызвано исключение. Только для ролей для приложения, которое указано в <xref:System.Web.Security.Roles.ApplicationName%2A> извлекаются свойства.  
  
 Если <xref:System.Web.Security.Roles.CacheRolesInCookie%2A> — `true`, затем `roleName` проверяться кэша роли, а не указанного поставщика ролей.  
  
   
  
## Examples  
 В следующем примере кода программным образом проверяет, является ли текущего пользователя в роли "Администраторы" перед предоставлением пользователю просмотр параметров ролей для приложения. Пример файла Web.config, который включает управление ролями см. в разделе <xref:System.Web.Security.Roles>.  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/ViewRolescs.aspx#4)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/ViewRolesvb.aspx#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="roleName" /> имеет значение <see langword="null" />.  
  
 - или -  
  
 В данный момент нет вошедших в систему пользователей.</exception>
        <exception cref="T:System.ArgumentException">
          Параметр <paramref name="roleName" /> равен пустой строке или содержит запятую (,).</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">Управление ролями не включено.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsUserInRole">
      <MemberSignature Language="C#" Value="public static bool IsUserInRole (string username, string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsUserInRole(string username, string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.IsUserInRole(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsUserInRole (username As String, roleName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsUserInRole(System::String ^ username, System::String ^ roleName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">Имя пользователя для поиска.</param>
        <param name="roleName">Имя роли, в которой следует выполнить поиск.</param>
        <summary>Возвращает значение, позволяющее определить, может ли заданный пользователь выполнять указанную роль. Интерфейс API предназначен для вызова только в контексте потока запросов ASP.NET. При таком санкционированном использовании он является потокобезопасным.</summary>
        <returns>
          <see langword="true" />, если указанный пользователь находится в указанной роли, в противном случае — <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.IsUserInRole%2A> Вызовы метода <xref:System.Web.Security.RoleProvider.IsUserInRole%2A> метод поставщика ролей по умолчанию для определения того, связан ли имя пользователя с ролью из источника данных для приложения, указанного в <xref:System.Web.Security.Roles.ApplicationName%2A> свойство.  
  
 Если `username` равен текущего вошедшего пользователя и <xref:System.Web.Security.Roles.CacheRolesInCookie%2A> значение свойства `true`, `roleName` может проверяться на кэш роли, а не указанный <xref:System.Web.Security.Roles.Provider%2A>.  
  
   
  
## Examples  
 В следующем примере кода программным образом проверяет, является ли пользователь в роли "Администраторы" перед предоставлением пользователю просмотр параметров ролей для приложения. Пример файла Web.config, который включает управление ролями см. в разделе <xref:System.Web.Security.Roles>.  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/ViewRolescs.aspx#4)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/ViewRolesvb.aspx#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="roleName" /> имеет значение <see langword="null" />.  
  
 - или -  
  
 Свойство <paramref name="username" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          Параметр <paramref name="roleName" /> равен пустой строке или содержит запятую (,).  
  
 - или -  
  
 <paramref name="username" /> содержит запятую (,).</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">Управление ролями не включено.</exception>
      </Docs>
    </Member>
    <Member MemberName="MaxCachedResults">
      <MemberSignature Language="C#" Value="public static int MaxCachedResults { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 MaxCachedResults" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.MaxCachedResults" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MaxCachedResults As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int MaxCachedResults { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает максимальное число имен ролей для пользователя, которые необходимо кэшировать.</summary>
        <value>Максимальное число имен ролей для пользователя, которые необходимо кэшировать. Значение по умолчанию — 25.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.MaxCachedResults%2A> Свойство задается с помощью `maxCachedResults` атрибута конфигурации. Значение `maxCachedResults` атрибут конфигурации должно быть присвоено целое значение больше нуля.  
  
   
  
## Examples  
 В следующем примере показано элемент в `system.web` раздел файла Web.config для приложения ASP.NET. Указывает, что приложение использует <xref:System.Web.Security.SqlRoleProvider> экземпляра и наборы `maxCachedResults` равным 10.  
  
```  
<roleManager  
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/"  
  cookieRequireSSL="false"  
  cookieSlidingExpiration="true"  
  cookieProtection="All"   
  maxCachedResults="10" />  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Provider">
      <MemberSignature Language="C#" Value="public static System.Web.Security.RoleProvider Provider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Security.RoleProvider Provider" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.Provider" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Provider As RoleProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Security::RoleProvider ^ Provider { System::Web::Security::RoleProvider ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.RoleProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает поставщика роли по умолчанию для приложения.</summary>
        <value>Поставщик роли по умолчанию для приложения, который предоставляется в качестве класса, который наследует абстрактный класс <see cref="T:System.Web.Security.RoleProvider" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.Provider%2A> Позволяет напрямую ссылаться поставщика роли по умолчанию для приложения. Обычно это используется для доступа к пользовательским элементам поставщика ролей, которые не являются частью <xref:System.Web.Security.RoleProvider> абстрактного класса.  
  
 Например <xref:System.Web.Security.WindowsTokenRoleProvider> класс включает перегрузку <xref:System.Web.Security.WindowsTokenRoleProvider.IsUserInRole%2A> метод, который позволяет определить, является ли пользователь в стандартную роль Windows, с помощью <xref:System.Security.Principal.WindowsBuiltInRole> значение перечисления. Ссылку на <xref:System.Web.Security.WindowsTokenRoleProvider> класса для приложения можно получить с помощью <xref:System.Web.Security.Roles.Provider%2A> свойства и может быть приведен как <xref:System.Web.Security.WindowsTokenRoleProvider> для указания <xref:System.Web.Security.WindowsTokenRoleProvider.IsUserInRole%2A> перегрузки.  
  
 Если настроено несколько поставщиков ролей для приложения, можно получить доступ к различным поставщикам ролей с помощью <xref:System.Web.Security.Roles.Providers%2A> коллекции.  
  
   
  
## Examples  
 Следующий пример кода приводит поставщика роли по умолчанию как <xref:System.Web.Security.WindowsTokenRoleProvider> и проверяет, является ли текущего пользователя в роли "Администраторы", прежде чем разрешить пользователю просмотр параметров ролей для приложения. Пример файла Web.config, который включает управление ролями см. в разделе <xref:System.Web.Security.WindowsTokenRoleProvider>.  
  
 [!code-aspx-csharp[System.Web.Security.WindowsTokenRoleProvider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.WindowsTokenRoleProvider/CS/ViewRoles2cs.aspx#2)]
 [!code-aspx-vb[System.Web.Security.WindowsTokenRoleProvider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.WindowsTokenRoleProvider/VB/ViewRoles2vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.Provider.ProviderException">Управление ролями не включено.</exception>
      </Docs>
    </Member>
    <Member MemberName="Providers">
      <MemberSignature Language="C#" Value="public static System.Web.Security.RoleProviderCollection Providers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Security.RoleProviderCollection Providers" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.Providers" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Providers As RoleProviderCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Security::RoleProviderCollection ^ Providers { System::Web::Security::RoleProviderCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.RoleProviderCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает коллекцию поставщиков ролей для приложения ASP.NET.</summary>
        <value>Коллекция <see cref="T:System.Web.Security.RoleProviderCollection" />, которая содержит поставщиков ролей, настроенных для приложений ASP.NET.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.Providers%2A> Свойство ссылается на все поставщики роли, доступные для приложения, включая любые поставщики, добавленные в файл Web.config. Можно управлять поставщиками ролей, доступных для приложения с помощью `providers` элемент раздела в файле Web.config для приложения.  
  
 В следующем примере показан раздел, который удаляет все существующие службы (например, указанный в файле Machine.config) и добавляет <xref:System.Web.Security.SqlRoleProvider> экземпляр в качестве поставщика ролей для приложения.  
  
```  
<configuration>  
  <connectionStrings>  
    <add name="SqlServices" connectionString="Data Source=MySqlServer;Integrated Security=SSPI;Initial Catalog=aspnetdb;" />  
  </connectionStrings>  
  
  <system.web>  
    <roleManager defaultProvider="SqlProvider"   
      enabled="true"  
      cacheRolesInCookie="true"  
      cookieName=".ASPROLES"  
      cookieTimeout="30"  
      cookiePath="/"  
      cookieRequireSSL="false"  
      cookieSlidingExpiration="true"  
      cookieProtection="Encrypted">  
  
      <providers>  
        <clear/>  
        <add  
          name="SqlProvider"  
          type="System.Web.Security.SqlRoleProvider"  
          connectionStringName="SqlServices"  
          applicationName="MyApplication" />  
         </providers>  
  
    </roleManager>  
  </system.web>  
</configuration>  
```  
  
 Можно получить строго типизированную ссылку на поставщик из <xref:System.Web.Security.Roles.Providers%2A> коллекции с помощью индексирования поставщика ролей по имени и его привязки в качестве требуемого типа.  
  
 Можно получить ссылку на поставщик по умолчанию для приложения с помощью <xref:System.Web.Security.Roles.Provider%2A> свойство.  
  
   
  
## Examples  
 В следующем примере кода перечислены поставщики, доступные для приложения и их соответствующие типы.  
  
 [!code-aspx-csharp[System.Web.Security.Roles#7](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/Providerscs.aspx#7)]
 [!code-aspx-vb[System.Web.Security.Roles#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/Providersvb.aspx#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.Provider.ProviderException">Управление ролями не включено.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveUserFromRole">
      <MemberSignature Language="C#" Value="public static void RemoveUserFromRole (string username, string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveUserFromRole(string username, string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.RemoveUserFromRole(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveUserFromRole (username As String, roleName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveUserFromRole(System::String ^ username, System::String ^ roleName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">Пользователь, которого необходимо удалить из указанной роли.</param>
        <param name="roleName">Роль, из которой необходимо удалить указанного пользователя.</param>
        <summary>Удаляет указанного пользователя из указанной роли.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.RemoveUserFromRole%2A> Метод вызывает поставщика роли по умолчанию, чтобы удалить указанного пользователя из указанной роли в источнике данных.  
  
   
  
## Examples  
 В следующем примере кода удаляет пользователя из роли. Пример файла Web.config, который включает управление ролями см. в разделе <xref:System.Web.Security.Roles>.  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/adduserstorolecs.aspx#3)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/adduserstorolevb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="roleName" /> имеет значение <see langword="null" />.  
  
 - или -  
  
 Свойство <paramref name="username" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          Параметр <paramref name="roleName" /> равен пустой строке или содержит запятую (,).  
  
 Параметр <paramref name="username" /> равен пустой строке или содержит запятую (,).</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">Управление ролями не включено.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveUserFromRoles">
      <MemberSignature Language="C#" Value="public static void RemoveUserFromRoles (string username, string[] roleNames);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveUserFromRoles(string username, string[] roleNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.RemoveUserFromRoles(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveUserFromRoles (username As String, roleNames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveUserFromRoles(System::String ^ username, cli::array &lt;System::String ^&gt; ^ roleNames);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="roleNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="username">Пользователь, которого необходимо удалить из указанных ролей.</param>
        <param name="roleNames">Массив строк имен ролей, из которых необходимо удалить указанного пользователя.</param>
        <summary>Удаляет указанного пользователя из указанных ролей.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.RemoveUserFromRoles%2A> Метод вызывает поставщика роли по умолчанию, чтобы удалить указанного пользователя из указанных ролей в источнике данных.  
  
 Если приложение настроено для использования <xref:System.Web.Security.SqlRoleProvider> класса обновления базы данных, которые выполняются при вызове <xref:System.Web.Security.Roles.RemoveUserFromRoles%2A> метод выполняются в рамках транзакции. Если возникает ошибка, например имя пользователя, которого нет в указанной роли, транзакция откатывается и обновления не выполняются.  
  
   
  
## Examples  
 Следующий пример кода использует <xref:System.Web.Security.Roles.RemoveUserFromRoles%2A> метод, чтобы удалить пользователя из одной или нескольких ролей. Пример файла Web.config, который включает управление ролями см. в разделе <xref:System.Web.Security.Roles>.  
  
 [!code-aspx-csharp[System.Web.Security.Roles#10](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/RemoveUserFromRolescs.aspx#10)]
 [!code-aspx-vb[System.Web.Security.Roles#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/RemoveUserFromRolesvb.aspx#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Одна из ролей в массиве <paramref name="roleNames" /> имеет значение <see langword="null" />.  
  
 - или -  
  
 Свойство <paramref name="username" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Одна из ролей в массиве <paramref name="roleNames" /> — пустая строка или содержит запятую (,).  
  
 - или -  
  
 Параметр <paramref name="username" /> равен пустой строке или содержит запятую (,).  
  
 - или -  
  
 Параметр <paramref name="roleNames" /> содержит повторяющийся элемент.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">Управление ролями не включено.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveUsersFromRole">
      <MemberSignature Language="C#" Value="public static void RemoveUsersFromRole (string[] usernames, string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveUsersFromRole(string[] usernames, string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.RemoveUsersFromRole(System.String[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveUsersFromRole (usernames As String(), roleName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveUsersFromRole(cli::array &lt;System::String ^&gt; ^ usernames, System::String ^ roleName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usernames" Type="System.String[]" />
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="usernames">Массив строк имен пользователей, которых необходимо удалить из указанных пользователей.</param>
        <param name="roleName">Имя роли, из которой необходимо удалить указанных пользователей.</param>
        <summary>Удаляет указанных пользователей из указанной роли.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.RemoveUsersFromRole%2A> Метод вызывает поставщика роли по умолчанию для удаления указанных пользователей из указанной роли в источнике данных.  
  
 Если приложение использует <xref:System.Web.Security.SqlRoleProvider> класса обновления базы данных, которые выполняются при вызове <xref:System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles%2A> метод выполняются в рамках транзакции. Если возникает ошибка, например имя пользователя, которого нет в указанной роли, транзакция откатывается и обновления не выполняются.  
  
   
  
## Examples  
 Следующий пример кода использует <xref:System.Web.Security.Roles.RemoveUsersFromRole%2A> метод для удаления одного или нескольких пользователей из роли. Пример файла Web.config, который включает управление ролями см. в разделе <xref:System.Web.Security.Roles>.  
  
 [!code-aspx-csharp[System.Web.Security.Roles#9](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/RemoveUsersFromRolecs.aspx#9)]
 [!code-aspx-vb[System.Web.Security.Roles#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/RemoveUsersFromRolevb.aspx#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="roleName" /> имеет значение <see langword="null" />.  
  
 - или -  
  
 Одно из имен пользователей в массиве <paramref name="usernames" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          Параметр <paramref name="roleName" /> равен пустой строке или содержит запятую (,).  
  
 - или -  
  
 Одно из имен пользователей в массиве <paramref name="usernames" /> равно пустой строке или содержит запятую (,).  
  
 - или -  
  
 Параметр <paramref name="usernames" /> содержит повторяющийся элемент.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">Управление ролями не включено.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveUsersFromRoles">
      <MemberSignature Language="C#" Value="public static void RemoveUsersFromRoles (string[] usernames, string[] roleNames);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveUsersFromRoles(string[] usernames, string[] roleNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.RemoveUsersFromRoles(System.String[],System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveUsersFromRoles (usernames As String(), roleNames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveUsersFromRoles(cli::array &lt;System::String ^&gt; ^ usernames, cli::array &lt;System::String ^&gt; ^ roleNames);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usernames" Type="System.String[]" />
        <Parameter Name="roleNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="usernames">Массив строк имен пользователей, которых необходимо удалить из указанных пользователей.</param>
        <param name="roleNames">Массив строк имен ролей, из которых необходимо удалить указанных пользователей.</param>
        <summary>Удаляет указанные имена пользователей из указанных ролей.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.RemoveUsersFromRoles%2A> Метод вызывает поставщика роли по умолчанию для удаления указанных пользователей из указанных ролей в источнике данных.  
  
 Если приложение использует <xref:System.Web.Security.SqlRoleProvider> класса обновления базы данных, которые выполняются при вызове <xref:System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles%2A> метод выполняются в рамках транзакции. Если возникает ошибка, например имя пользователя, которого нет в указанной роли, транзакция откатывается и обновления не выполняются.  
  
   
  
## Examples  
 Следующий пример кода использует <xref:System.Web.Security.Roles.RemoveUsersFromRoles%2A> метод для удаления одного или нескольких пользователей из одной или нескольких ролей на основе ввода пользователя. Пример файла Web.config, который включает управление ролями см. в разделе <xref:System.Web.Security.Roles>.  
  
 [!code-aspx-csharp[System.Web.Security.Roles#8](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/RemoveUsersFromRolescs.aspx#8)]
 [!code-aspx-vb[System.Web.Security.Roles#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/RemoveUsersFromRolesvb.aspx#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Одна из ролей, указанных в массиве <paramref name="roleNames" />, имеет значение <see langword="null" />.  
  
 - или -  
  
 Один из пользователей, указанных в массиве <paramref name="usernames" />, имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Одна из ролей, указанных в массиве <paramref name="roleNames" />, равна пустой строке или содержит запятую (,).  
  
 - или -  
  
 Один из пользователей, указанных в массиве <paramref name="usernames" />, равен пустой строке или содержит запятую (,).  
  
 - или -  
  
 Параметр <paramref name="roleNames" /> содержит повторяющийся элемент.  
  
 - или -  
  
 Параметр <paramref name="usernames" /> содержит повторяющийся элемент.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">Управление ролями не включено.</exception>
      </Docs>
    </Member>
    <Member MemberName="RoleExists">
      <MemberSignature Language="C#" Value="public static bool RoleExists (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool RoleExists(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.RoleExists(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RoleExists (roleName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool RoleExists(System::String ^ roleName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">Имя роли, которое необходимо найти в источнике данных.</param>
        <summary>Возвращает значение, позволяющее определить, существует ли указанная роль в источнике данных роли.</summary>
        <returns>
          <see langword="true" />, если имя роли уже существует в источнике данных; в противном случае — <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.RoleExists%2A> Вызовы метода `RoleExists` метод поставщика ролей по умолчанию, чтобы определить, существует ли имя роли в источнике данных для приложения, указанного в <xref:System.Web.Security.Roles.ApplicationName%2A> свойство.  
  
   
  
## Examples  
 Следующий пример кода использует <xref:System.Web.Security.Roles.RoleExists%2A> метод, чтобы определить, существует ли уже имя роли, прежде чем создавать роли. Пример файла Web.config, который включает управление ролями см. в разделе <xref:System.Web.Security.Roles>.  
  
> [!IMPORTANT]
>  Этот пример содержит текстовое поле, принимающее вводимые пользователем данные, что является потенциальной угрозой безопасности. По умолчанию данные, вводимые пользователем на веб-страницах ASP.NET, проверяются на наличие скриптов и HTML-элементов. Дополнительные сведения см. в разделе [Общие сведения об использовании сценариев](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/createrolecs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/createrolevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Значение параметра <paramref name="roleName" /> — <see langword="null" /> (<see langword="Nothing" /> в Visual Basic).</exception>
        <exception cref="T:System.ArgumentException">
          Параметр <paramref name="roleName" /> равен пустой строке или содержит запятую (,).</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">Управление ролями не включено.</exception>
      </Docs>
    </Member>
  </Members>
</Type>