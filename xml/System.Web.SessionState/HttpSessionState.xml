<Type Name="HttpSessionState" FullName="System.Web.SessionState.HttpSessionState">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ae4ca9a4670ae745ae7f68a9bf24402e4ec78440" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30550548" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class HttpSessionState : System.Collections.ICollection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit HttpSessionState extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Web.SessionState.HttpSessionState" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class HttpSessionState&#xA;Implements ICollection" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpSessionState sealed : System::Collections::ICollection" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Предоставляет доступ к значениям состояния сеанса, а также к параметрам уровня сеанса и методам управления длительностью сеанса.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET предоставляет управление состоянием сеанса, чтобы можно было хранить сведения, связанные с уникальным сеансом браузера в нескольких запросах. Можно хранить коллекции значений, обращение по имени ключа или по числовому индексу. Доступ к значениям сеанса и функциональные возможности используется <xref:System.Web.SessionState.HttpSessionState> класс, который доступен через <xref:System.Web.HttpContext.Session%2A> текущего элемента <xref:System.Web.HttpContext>, или <xref:System.Web.UI.Page.Session%2A> свойство <xref:System.Web.UI.Page>.  
  
 Данные сеанса не связан с конкретного браузера сеанс, используя уникальный идентификатор. По умолчанию этот идентификатор хранится в файле cookie сеанса не истекает в браузере, но можно также настроить приложения для хранения идентификатора сеанса в URL-АДРЕСЕ, задав `cookieless` атрибут `true` или <xref:System.Web.HttpCookieMode.UseUri> в элементе из конфигурации приложения. Вы можете определить, поддерживаются ли файлы cookie с помощью браузера, указав значение ASP.NET <xref:System.Web.HttpCookieMode.UseDeviceProfile> для `cookieless` атрибута. Вы также можете определить, включены ли файлы cookie для браузера, указав значение ASP.NET <xref:System.Web.HttpCookieMode.AutoDetect> для `cookieless` атрибута. Если файлы cookie поддерживаются при <xref:System.Web.HttpCookieMode.UseDeviceProfile> указан или если включена <xref:System.Web.HttpCookieMode.AutoDetect> указан, то идентификаторы будут сохраняться в файле cookie; в противном случае сеанс будет храниться идентификатор сеанса в URL-адрес.  
  
 Сеансы запускаются во время первого запроса и значения сеанса будет сохраняться до тех пор, пока новый запрос на браузером перед время в минутах, указанный в <xref:System.Web.SessionState.HttpSessionState.Timeout%2A> передайте свойство. При начале нового сеанса, сеанс <xref:System.Web.SessionState.SessionStateModule.Start> события. Это событие можно использовать для выполнения дополнительных задач в начале сеанса, например установку по умолчанию значения сеанса. При истечении времени ожидания, сеанс <xref:System.Web.SessionState.HttpSessionState.Abandon%2A> вызывается метод, или приложение ASP.NET отключена, сеанс <xref:System.Web.SessionState.SessionStateModule.End> события. Это событие позволяет выполнить необходимую очистку. <xref:System.Web.SessionState.SessionStateModule.End> События только если состояние сеанса `mode` равно <xref:System.Web.SessionState.SessionStateMode.InProc>.  
  
 Чтобы повысить производительность, сеансы, которые используют файлы cookie не выделяют хранилища сеанса до фактического хранения данных в <xref:System.Web.UI.Page.Session%2A> объекта. Дополнительные сведения см. в описании свойства <xref:System.Web.SessionState.HttpSessionState.SessionID%2A>.  
  
 Состояние сеанса различно для разных приложений ASP.NET. Если браузер переходит к другому приложению, сведения о сеансе в новом приложении недоступен.  
  
 Значения сеанса хранятся в памяти на веб-сервере по умолчанию. Можно также хранить значения сеанса в базе данных SQL Server, на сервере состояний ASP.NET или пользовательского сервера. Это позволяет сохранить значения сеанса в случаях, где перезапуска процесса ASP.NET или IIS или приложения ASP.NET и для предоставления значения сеанса на всех серверах веб-фермы. Это поведение, настроить, задав `mode` атрибут является допустимым <xref:System.Web.SessionState.SessionStateMode> значение в элементе конфигурации приложения. Дополнительные сведения см. в разделе [режимы состояния сеанса](http://msdn.microsoft.com/library/0bb0a3a3-650f-4c47-a0c5-b08b9b591bb4).  
  
 Альтернативы состоянию сеанса включают в себя состояния приложения (см. <xref:System.Web.HttpApplication.Application%2A> свойства) и кэша ASP.NET (см. <xref:System.Web.Caching> пространство имен), переменные, которые хранилища, доступных всем пользователям приложения ASP.NET; профиля ASP.NET (см. <xref:System.Web.Profile> пространство имен), хранящего значения пользователя в хранилище данных не применяя время ожидания; ASP.NET <xref:System.Web.UI.WebControls?displayProperty=nameWithType>, который сохранения значений элементов управления в <xref:System.Web.UI.Control.ViewState%2A>; <xref:System.Web.HttpResponse.Cookies%2A>; <xref:System.Web.HttpRequest.QueryString%2A> свойство; и поля на форме HTML, доступные из HTTP `POST` с помощью <xref:System.Web.HttpRequest.Form%2A> коллекции. Дополнительные сведения о различиях между состоянием сеанса и другие альтернативные элементы управления состоянием см. в разделе [управления состоянием](http://msdn.microsoft.com/library/af79fa0d-4bc8-47a6-9915-d8e355bfb732).  
  
   
  
## Examples  
 В следующем примере кода задает и получает значения из состояния сеанса.  
  
> [!IMPORTANT]
>  В этом примере имеется текстовое поле, принимающее вводимые пользователем данные, что является потенциальной угрозой безопасности. По умолчанию данные, вводимые пользователем на веб-страницах ASP.NET, проверяются на наличие скриптов и HTML-элементов. Дополнительные сведения см. в разделе [Общие сведения об использовании сценариев](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[HttpSessionState#30](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpSessionState/CS/session2cs.aspx#30)]
 [!code-aspx-vb[HttpSessionState#30](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpSessionState/VB/session2vb.aspx#30)]  
  
 ]]></format>
    </remarks>
    <altmember cref="N:System.Web.Profile" />
    <altmember cref="N:System.Web.Caching" />
  </Docs>
  <Members>
    <Member MemberName="Abandon">
      <MemberSignature Language="C#" Value="public void Abandon ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Abandon() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.SessionState.HttpSessionState.Abandon" />
      <MemberSignature Language="VB.NET" Value="Public Sub Abandon ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Abandon();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Отменяет текущий сеанс.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Один раз <xref:System.Web.SessionState.HttpSessionState.Abandon%2A> вызывается метод, текущий сеанс более не является допустимым, и запускается новый сеанс. <xref:System.Web.SessionState.HttpSessionState.Abandon%2A> вызывает <xref:System.Web.SessionState.SessionStateModule.End> вызова события. Новый <xref:System.Web.SessionState.SessionStateModule.Start> событие будет вызываться при следующем запросе.  
  
 Идентификаторы сеанса для прерывания или просроченных сеансов, повторно запущены по умолчанию. То есть если запрос включает в себя идентификатор сеанса для сеанса с истекшим сроком действия или отмены, новый сеанс запускается с помощью тем же идентификатором сеанса. Это можно отключить, установив `regenerateExpiredSessionId` атрибута элемента конфигурации для `true`. Дополнительные сведения см. в разделе [идентификаторы сеансов](http://msdn.microsoft.com/library/146ca206-d151-4f2e-a548-bcca05ccf0cb).  
  
 <xref:System.Web.SessionState.SessionStateModule.End> Событие поддерживается только если <xref:System.Web.SessionState.HttpSessionState.Mode%2A> свойству <xref:System.Web.SessionState.SessionStateMode.InProc>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (string name, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(string name, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.SessionState.HttpSessionState.Add(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (name As String, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::String ^ name, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">Имя элемента, добавляемого в коллекцию состояний сеанса.</param>
        <param name="value">Значение элемента, добавляемого в коллекцию состояний сеанса.</param>
        <summary>Добавляет новый элемент в коллекцию состояния сеанса.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если `name` параметр ссылается на существующий элемент состояния сеанса, этот элемент будет перезаписан с указанным `value`.  
  
   
  
## Examples  
 В следующем примере показано, как для хранения значений в состоянии сеанса с помощью <xref:System.Web.SessionState.HttpSessionState.Add%2A> метод. Также показано, как для удаления значений в состоянии сеанса с помощью <xref:System.Web.SessionState.HttpSessionState.Remove%2A> метод. Объект <xref:System.Web.UI.WebControls.Repeater> управления используется для отображения состояния сеанса содержимое на веб-странице. <xref:System.Web.SessionState.HttpSessionState.GetEnumerator%2A> Метод используется для прохода по коллекции состояния сеанса и заполнить <xref:System.Web.UI.WebControls.Repeater> элемента управления.  
  
> [!IMPORTANT]
>  В этом примере имеется текстовое поле, принимающее вводимые пользователем данные, что является потенциальной угрозой безопасности. По умолчанию данные, вводимые пользователем на веб-страницах ASP.NET, проверяются на наличие скриптов и HTML-элементов. Дополнительные сведения см. в разделе [Общие сведения об использовании сценариев](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[HttpSessionState#13](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpSessionState/CS/HttpSessionStateAddCS.aspx#13)]
 [!code-aspx-vb[HttpSessionState#13](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpSessionState/VB/HttpSessionStateAddVB.aspx#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.SessionState.HttpSessionState.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Удаляет все ключи и значения из коллекции состояния сеанса.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CodePage">
      <MemberSignature Language="C#" Value="public int CodePage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CodePage" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.CodePage" />
      <MemberSignature Language="VB.NET" Value="Public Property CodePage As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CodePage { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает идентификатор кодировки для текущего сеанса.</summary>
        <value>Идентификатор кодировки для текущего сеанса.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Набор символов (кодовая страница) используется для интерпретации данных многобайтовой кодировки, определения значения символа и поэтому порядок сортировки. Кодовая страница параметров применяются только к многобайтовой кодировки данных символьные данные в Юникоде.  
  
 Это <xref:System.Web.SessionState.IHttpSessionState.CodePage%2A> свойство предоставляется для обеспечения совместимости с предыдущими версиями ASP только. Если не требуется для поддержки обратной совместимости с ASP-страницами, используйте <xref:System.Web.HttpResponse.ContentEncoding%2A> свойство вместо него.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contents">
      <MemberSignature Language="C#" Value="public System.Web.SessionState.HttpSessionState Contents { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.SessionState.HttpSessionState Contents" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.Contents" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Contents As HttpSessionState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::SessionState::HttpSessionState ^ Contents { System::Web::SessionState::HttpSessionState ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.SessionState.HttpSessionState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает ссылку на текущий объект состояния сеанса.</summary>
        <value>Текущий контекст <see cref="T:System.Web.SessionState.HttpSessionState" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.SessionState.HttpSessionState.Contents%2A> Свойство предоставляется для обеспечения совместимости с предыдущими версиями ASP.  
  
   
  
## Examples  
 В следующем коде перечислены имена элемента и значения в <xref:System.Web.SessionState.HttpSessionState.Contents%2A> свойство.  
  
 [!code-csharp[HttpSessionState#9](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpSessionState/CS/snippetscs.aspx#9)]
 [!code-vb[HttpSessionState#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpSessionState/VB/snippetsvb.aspx#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CookieMode">
      <MemberSignature Language="C#" Value="public System.Web.HttpCookieMode CookieMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.HttpCookieMode CookieMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.CookieMode" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CookieMode As HttpCookieMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::HttpCookieMode CookieMode { System::Web::HttpCookieMode get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.HttpCookieMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, настроено ли приложение для сеансов без поддержки файлов cookie.</summary>
        <value>Одно из значений <see cref="T:System.Web.HttpCookieMode" />, позволяющее определить, настроено ли приложение для сеансов без поддержки файлов Cookie. Значение по умолчанию: <see cref="F:System.Web.HttpCookieMode.UseCookies" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Когда <xref:System.Web.SessionState.HttpSessionState.IsCookieless%2A> — `true`, <xref:System.Web.SessionState.HttpSessionState.CookieMode%2A> возвращает <xref:System.Web.HttpCookieMode.UseUri>; в противном случае <xref:System.Web.SessionState.HttpSessionState.CookieMode%2A> возвращает <xref:System.Web.HttpCookieMode.UseCookies>.  
  
   
  
## Examples  
 В следующем примере кода `cookieless` сеанса атрибут `true` в файле Web.config. Этот пример конфигурации приложения <xref:System.Web.SessionState.HttpSessionState.CookieMode%2A> вернет <xref:System.Web.HttpCookieMode.UseUri>.  
  
```  
<configuration>  
  <system.web>  
    <sessionState   
      mode="InProc"  
      cookieless="true"  
      timeout="30" />  
  </system.web>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.SessionState.HttpSessionState.CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(Array ^ array, int index);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">Массив <see cref="T:System.Array" />, в который записываются значения сеанса.</param>
        <param name="index">Отсчитываемый от нуля индекс в массиве <c>array</c>, с которого начинается копирование.</param>
        <summary>Копирует коллекцию значений состояния сеанса в одномерный массив начиная с указанного индекса в массиве.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает число элементов в коллекции состояний сеанса.</summary>
        <value>Количество элементов в коллекции.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.SessionState.HttpSessionState.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает перечислитель, который можно использовать для чтения всех переменных имен состояния сеанса в текущем сеансе.</summary>
        <returns>Объект <see cref="T:System.Collections.IEnumerator" />, который может использоваться для итерации по именам переменных в коллекции состояния сеанса.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере показано, как для хранения значений в состоянии сеанса с помощью <xref:System.Web.SessionState.HttpSessionState.Add%2A> метод. Также показано, как для удаления значений в состоянии сеанса с помощью <xref:System.Web.SessionState.HttpSessionState.Remove%2A> метод. Объект <xref:System.Web.UI.WebControls.Repeater> элемент управления используется для отображения содержимого состояние сеанса на веб-странице. <xref:System.Web.SessionState.HttpSessionState.GetEnumerator%2A> Метод используется для прохода по коллекции состояния сеанса и заполнить <xref:System.Web.UI.WebControls.Repeater> элемента управления.  
  
 [!code-aspx-csharp[HttpSessionState#13](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpSessionState/CS/HttpSessionStateAddCS.aspx#13)]
 [!code-aspx-vb[HttpSessionState#13](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpSessionState/VB/HttpSessionStateAddVB.aspx#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCookieless">
      <MemberSignature Language="C#" Value="public bool IsCookieless { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCookieless" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.IsCookieless" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCookieless As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCookieless { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, позволяющее определить, был ли идентификатор сеанса внедрен в URL-адрес или сохранен в HTTP-файле Cookie.</summary>
        <value>
          Если сеанс был внедрен в URL-адрес, значение <see langword="true" />, если нет, значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET однозначно определяет сеансы со всеми браузерами. По умолчанию уникальный идентификатор сеанса хранится в файле cookie сеанса не истекает в браузере. Можно указать, что идентификаторы сеансов не сохраняются в файле cookie, задав `cookieless` атрибут `true` элемента конфигурации.  
  
> [!NOTE]
>  Чтобы повысить безопасность приложения, приложения пользователи должны иметь возможность выйти из системы, тогда он должен вызывать <xref:System.Web.SessionState.HttpSessionState.Abandon%2A> метод. Это снижает вероятность нежелательных источник, с помощью уникального идентификатора в URL-АДРЕСЕ для получения личных данных, хранящихся в сеансе пользователя.  
  
 ASP.NET поддерживает состояние сеанса без файлов cookie, автоматически вставляя уникальный идентификатор сеанса в URL-адрес страницы. Например следующий URL-адрес был изменен с ASP.NET для сеанса уникальный идентификатор lit3py55t21z5v55vlm25s55:  
  
```  
http://www.example.com/(S(4danlfat035muve4g0mvgfrr))/orderform.aspx  
```  
  
 ASP.NET изменяет ссылки, содержащиеся во всех запрошенных страницах, внедряя значение идентификатора сеанса в ссылки непосредственно перед отправкой каждой страницы в браузере. Состояние сеанса поддерживается до тех пор, пока пользователь переходит по ссылкам, сайт. Тем не менее если агент пользователя перезаписывает URL-адрес, состояние сеанса экземпляр будет потеряно.  
  
 Идентификатор сеанса внедрен в URL-адрес после косой черты, предшествующему имени приложения и перед любой оставшиеся идентификатор файла или виртуального каталога. Это позволяет ASP.NET обрабатывать имя приложения до включения <xref:System.Web.SessionState.SessionStateModule> в запросе.  
  
 По умолчанию идентификаторы сеанса, используемые в сеансах без файлов cookie, перезапускаются. То есть если запрос выполняется с помощью идентификатора сеанса, истек срок действия, запускается новый сеанс с помощью идентификатора сеанса, предоставленным в этом запросе. Такое поведение может привести к нежелательному совместному использованию данных сеанса, когда ссылка, содержащая ИД сеанса без файлов cookie используется совместно несколькими браузерами, возможно через механизм поиска или в другой программе. Можно уменьшить вероятность данные сеанса совместно с несколькими клиентами, отключив повторное использование идентификаторов сеанса. Чтобы сделать это, задайте `regenerateExpiredSessionId` атрибута элемента конфигурации для `true`. Это приведет к новый идентификатор сеанса создается при запросе сеанса без файлов cookie с идентификатор истекшего сеанса Обратите внимание, что если выполнен запрос с истекшим Идентификатором сеанса использует HTTP `POST` метод, то все переданные данные будут потеряны при `regenerateExpiredSessionId` — `true`, как ASP.NET выполняет перенаправление, чтобы гарантировать, что браузер имеет идентификатор сеанса в URL-адрес.  
  
> [!NOTE]
>  Хотя параметр `regenerateExpiredSessionId` атрибут `true` снижает вероятность нежелательных совместного использования данных сеанса, он не защищает от получения доступа к сеансу другого пользователя путем получения <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> значение и включив его в запросы к серверу. При сохранении личных или конфиденциальных сведений в состоянии сеанса рекомендуется использовать SSL для шифрования данных, передаваемых между браузером и сервером, включая <xref:System.Web.SessionState.HttpSessionState.SessionID%2A>.  
  
   
  
## Examples  
 В следующем примере кода `cookieless` сеанса атрибута значение true в файле Web.config.  
  
```  
<configuration>  
  <system.web>  
    <sessionState   
      mode="InProc"  
      cookieless="true"  
      regenerateExpiredSessionId="true"  
      timeout="30" />  
  </system.web>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNewSession">
      <MemberSignature Language="C#" Value="public bool IsNewSession { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNewSession" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.IsNewSession" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNewSession As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNewSession { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, позволяющее определить, был ли создан сеанс с текущим запросом.</summary>
        <value>
          Если сеанс был создан с текущим запросом, значение <see langword="true" />, если нет, значение <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, позволяющее определить, доступен ли сеанс только для чтения.</summary>
        <value>
          Если сеанс доступен только для чтения, значение <see langword="true" />, если нет, значение <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSynchronized">
      <MemberSignature Language="C#" Value="public bool IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.IsSynchronized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSynchronized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSynchronized { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, позволяющее определить, синхронизирован ли доступ к коллекции значений состояния сеанса (потокобезопасный доступ).</summary>
        <value>
          Значение <see langword="true" />, если доступ к коллекции синхронизирован (потокобезопасен); в противном случае — значение <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Item">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает или задает индивидуальные значения сеанса.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(index As Integer) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[int] { System::Object ^ get(int index); void set(int index, System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Числовой индекс значения сеанса.</param>
        <summary>Возвращает или задает значение сеанса по числовому индексу.</summary>
        <value>Значение состояния сеанса, сохраненное по указанному индексу или значение <see langword="null" />, если элемент не существует.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[string name] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(string)" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[System::String ^] { System::Object ^ get(System::String ^ name); void set(System::String ^ name, System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Имя ключа значения сеанса.</param>
        <summary>Возвращает или задает значение сеанса по имени.</summary>
        <value>Значение состояния сеанса с указанным именем или значение <see langword="null" />, если элемент не существует.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Keys">
      <MemberSignature Language="C#" Value="public System.Collections.Specialized.NameObjectCollectionBase.KeysCollection Keys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.NameObjectCollectionBase/KeysCollection Keys" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.Keys" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Keys As NameObjectCollectionBase.KeysCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Specialized::NameObjectCollectionBase::KeysCollection ^ Keys { System::Collections::Specialized::NameObjectCollectionBase::KeysCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.NameObjectCollectionBase+KeysCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает коллекцию ключей для всех значений, хранящихся в коллекции состояния сеанса.</summary>
        <value>Объект <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" />, в котором содержатся все сеансовые ключи.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LCID">
      <MemberSignature Language="C#" Value="public int LCID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LCID" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.LCID" />
      <MemberSignature Language="VB.NET" Value="Public Property LCID As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LCID { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает код языка (LCID) текущего сеанса.</summary>
        <value>Экземпляр <see cref="T:System.Globalization.CultureInfo" />, который задает язык и региональные параметры текущего сеанса.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.SessionState.HttpSessionState.LCID%2A> Свойство предоставляется для обеспечения совместимости с предыдущими версиями ASP только. Если не требуется для поддержки обратной совместимости с ASP-страницами, используйте <xref:System.Globalization.CultureInfo.LCID%2A> свойство вместо него.  
  
 ASP.NET не сохраняет идентификатор языка в состоянии сеанса. <xref:System.Web.SessionState.HttpSessionState.LCID%2A> Обращается к свойству <xref:System.Globalization.CultureInfo.LCID%2A> свойство получает и задает идентификатор.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mode">
      <MemberSignature Language="C#" Value="public System.Web.SessionState.SessionStateMode Mode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.SessionState.SessionStateMode Mode" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.Mode" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Mode As SessionStateMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::SessionState::SessionStateMode Mode { System::Web::SessionState::SessionStateMode get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.SessionState.SessionStateMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает текущий режим состояния сеанса.</summary>
        <value>Одно из значений перечисления <see cref="T:System.Web.SessionState.SessionStateMode" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Сведения о настройке сервера для <xref:System.Web.SessionState.SessionStateMode.StateServer> или <xref:System.Web.SessionState.SessionStateMode.SQLServer> хранения состояния сеанса в разделе [Общие сведения о состоянии сеанса ASP.NET](http://msdn.microsoft.com/library/6d60d381-6521-4e1d-9089-da6464f2a9bc).  
  
   
  
## Examples  
 В следующем примере кода `mode` сеанса атрибут <xref:System.Web.SessionState.SessionStateMode.SQLServer> в файле Web.config. Для режима сеанса SQL Server `sqlConnectionString` атрибут также является обязательным.  
  
```  
<configuration>  
  <system.web>  
    <sessionState   
      mode="SQLServer"  
      sqlConnectionString="Data Source=localhost;Integrated Security=SSPI"  
      cookieless="true"  
      timeout="30" />  
  </system.web>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.SessionState.HttpSessionState.Remove(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Имя элемента, удаляемого из коллекции состояний сеанса.</param>
        <summary>Удаляет элемент из коллекции состояния сеанса.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если в коллекции состояния сеанса не содержит элемент с указанным `name`, коллекция остается неизменной. Исключение не возникает.  
  
   
  
## Examples  
 В следующем примере показано, как для хранения значений в состоянии сеанса с помощью <xref:System.Web.SessionState.HttpSessionState.Add%2A> метод. Также показано, как для удаления значений в состоянии сеанса с помощью <xref:System.Web.SessionState.HttpSessionState.Remove%2A> метод. Объект <xref:System.Web.UI.WebControls.Repeater> элемент управления используется для отображения содержимого состояние сеанса на веб-странице. <xref:System.Web.SessionState.HttpSessionState.GetEnumerator%2A> Метод используется для прохода по коллекции состояния сеанса и заполнить <xref:System.Web.UI.WebControls.Repeater> элемента управления.  
  
 [!code-aspx-csharp[HttpSessionState#13](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpSessionState/CS/HttpSessionStateAddCS.aspx#13)]
 [!code-aspx-vb[HttpSessionState#13](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpSessionState/VB/HttpSessionStateAddVB.aspx#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAll">
      <MemberSignature Language="C#" Value="public void RemoveAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAll() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.SessionState.HttpSessionState.RemoveAll" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAll ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAll();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Удаляет все ключи и значения из коллекции состояния сеанса.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.SessionState.HttpSessionState.RemoveAll%2A> выполняет ту же функцию, что <xref:System.Web.SessionState.HttpSessionState.Clear%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.SessionState.HttpSessionState.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAt(int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Индекс элемента, удаляемого из коллекции состояний сеанса.</param>
        <summary>Удаляет элемент по заданному индексу из коллекции состояния сеанса.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          Значение параметра <paramref name="index" /> меньше нуля.  
  
 \- или -  
  
 Значение параметра <paramref name="index" /> больше или равно значению свойства <see cref="P:System.Web.SessionState.HttpSessionState.Count" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SessionID">
      <MemberSignature Language="C#" Value="public string SessionID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SessionID" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.SessionID" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SessionID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SessionID { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает уникальный идентификатор сеанса.</summary>
        <value>Уникальный идентификатор сеанса.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> Свойство используется для уникальной идентификации браузера с данными сеанса на сервере. <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> Значение случайным образом созданный ASP.NET и сохраняется в без ограничения срока действия файла cookie сеанса в браузере. <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> Значение затем отправляется в файл cookie при каждом запросе к приложению ASP.NET.  
  
 Если вы хотите отключить использование файлов cookie в приложении ASP.NET и все еще используют состояние сеанса, можно настроить приложение для хранения идентификатора сеанса в URL-адрес вместо файла cookie, задав `cookieless` атрибут конфигурации элемент `true`, или <xref:System.Web.HttpCookieMode.UseUri>, в файле Web.config для приложения. Вы можете определить, поддерживаются ли файлы cookie с помощью браузера, указав значение ASP.NET <xref:System.Web.HttpCookieMode.UseDeviceProfile> для `cookieless` атрибута. Вы также можете определить, включены ли файлы cookie для браузера, указав значение ASP.NET <xref:System.Web.HttpCookieMode.AutoDetect> для `cookieless` атрибута. Если файлы cookie поддерживаются при <xref:System.Web.HttpCookieMode.UseDeviceProfile> указан или если включена <xref:System.Web.HttpCookieMode.AutoDetect> указан, то идентификаторы будут сохраняться в файле cookie; в противном случае сеанс будет храниться идентификатор сеанса в URL-адрес. Дополнительные сведения см. в описании свойства <xref:System.Web.SessionState.HttpSessionState.IsCookieless%2A>.  
  
 <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> Отправляется между сервером и браузера в виде открытого текста, либо в файле cookie или в URL-АДРЕСЕ. В результате получения может получить доступ к сеансу другого пользователя путем получения <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> значение и включив его в запросы к серверу. При сохранении личных или конфиденциальных сведений в состоянии сеанса рекомендуется использовать SSL для шифрования данных, передаваемых между браузером и сервером, включая <xref:System.Web.SessionState.HttpSessionState.SessionID%2A>.  
  
 При использовании состояния сеанса на основе файлов cookie, ASP.NET выделяет пространство для хранения данных сеанса до <xref:System.Web.UI.Page.Session%2A> объект используется. В результате новый идентификатор сеанса создается для каждого запроса страницы, пока объект сеанса. Если для приложения требуется статичный ИД для всего сеанса, можно либо реализовать `Session_Start` метод в файле Global.asax приложения и сохранение данных в <xref:System.Web.UI.Page.Session%2A> объекта Устранение идентификатор сеанса, или можно использовать в другой части кода приложение явным образом сохранить данные в <xref:System.Web.UI.Page.Session%2A> объекта.  
  
 Если приложение использует состояние сеанса без файлов cookie, ИД сеанса создается при первом просмотре страницы и сохраняется для всего сеанса.  
  
   
  
## Examples  
 В следующем примере кода показан файл Web.config, который позволяет настроить состояние сеанса, чтобы использовать идентификаторы сеанса без файлов cookie. Дополнительные сведения см. в описании свойства <xref:System.Web.SessionState.HttpSessionState.IsCookieless%2A>.  
  
```  
<configuration>  
  <system.web>  
    <sessionState   
      cookieless="true"  
      regenerateExpiredSessionId="true"  
      timeout="30" />  
  </system.web>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StaticObjects">
      <MemberSignature Language="C#" Value="public System.Web.HttpStaticObjectsCollection StaticObjects { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.HttpStaticObjectsCollection StaticObjects" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.StaticObjects" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StaticObjects As HttpStaticObjectsCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::HttpStaticObjectsCollection ^ StaticObjects { System::Web::HttpStaticObjectsCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.HttpStaticObjectsCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает коллекцию объектов, объявленных в файле Global.asax приложения ASP.NET тегами <see langword="&lt;object Runat=&quot;Server&quot; Scope=&quot;Session&quot;/&gt;" />.</summary>
        <value>Коллекция <see cref="T:System.Web.HttpStaticObjectsCollection" />, содержащая объекты, объявленные в файле Global.asax.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если объект, на странице не поддерживает сериализацию и <xref:System.Web.SessionState.HttpSessionState.Mode%2A> — out of process (<xref:System.Web.SessionState.SessionStateMode.SQLServer> или <xref:System.Web.SessionState.SessionStateMode.StateServer>), объект не будет создан и не будет добавлен к этой коллекции.  
  
 <xref:System.Web.SessionState.HttpSessionState.StaticObjects%2A> Свойство предоставляется для обеспечения совместимости с предыдущими версиями ASP.  
  
   
  
## Examples  
 В следующем примере кода в примере выводится список `id` и тип объекта объектов в <xref:System.Web.SessionState.HttpSessionState.StaticObjects%2A> коллекции.  
  
 [!code-csharp[HttpSessionState#10](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpSessionState/CS/snippetscs.aspx#10)]
 [!code-vb[HttpSessionState#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpSessionState/VB/snippetsvb.aspx#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SyncRoot">
      <MemberSignature Language="C#" Value="public object SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.SyncRoot" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SyncRoot As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ SyncRoot { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает объект, который можно использовать для синхронизации доступа к коллекции значений состояния сеанса.</summary>
        <value>Объект, который можно использовать для синхронизации доступа к коллекции.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Timeout">
      <MemberSignature Language="C#" Value="public int Timeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Timeout" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.Timeout" />
      <MemberSignature Language="VB.NET" Value="Public Property Timeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Timeout { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает и задает количество времени (в минутах), которое проходит между запросами, прежде чем поставщик состояния сеанса завершает сеанс.</summary>
        <value>Время ожидания в минутах.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.SessionState.HttpSessionState.Timeout%2A> Свойство можно задать в файле Web.config для приложения с помощью `timeout` атрибут элемент конфигурации, или можно установить <xref:System.Web.SessionState.HttpSessionState.Timeout%2A> значение свойства, непосредственно с помощью кода приложения.  
  
 <xref:System.Web.SessionState.HttpSessionState.Timeout%2A> Свойство не может быть присвоено значение больше, чем 525,600 минут (1 год). Значение по умолчанию — 20 минут.  
  
   
  
## Examples  
 В следующем примере кода `timeout` атрибута сеанса до 30 минут, в файле Web.config.  
  
```  
<configuration>  
  <system.web>  
    <sessionState   
      mode="InProc"  
      cookieless="true"  
      timeout="30" />  
  </system.web>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>