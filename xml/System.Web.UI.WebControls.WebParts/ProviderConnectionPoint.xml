<Type Name="ProviderConnectionPoint" FullName="System.Web.UI.WebControls.WebParts.ProviderConnectionPoint">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b0446877e077410dd38d404d92e2614023a53094" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30590838" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ProviderConnectionPoint : System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ProviderConnectionPoint extends System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
  <TypeSignature Language="VB.NET" Value="Public Class ProviderConnectionPoint&#xA;Inherits ConnectionPoint" />
  <TypeSignature Language="C++ CLI" Value="public ref class ProviderConnectionPoint : System::Web::UI::WebControls::WebParts::ConnectionPoint" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebParts.ConnectionPoint</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Определяет объект точки подключения, позволяющий серверному элементу управления действовать в качестве поставщика, чтобы сформировать подключение к потребителю.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В каждой связи веб-частей между двумя серверными элементами управления, должен иметь (помимо прочих требований) каждого элемента управления при связанный объект точки подключения, позволяет подключиться к другому элементу управления и предоставлять или же получать данные в зависимости от того, следует ли элемент управления используется в качестве поставщик или потребитель соединения. Объект <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> объект содержит сведения о том, как элемент управления может подключаться к другой элемент управления и типа данных, можно использовать совместно. Для элемента управления, который выступает в роли поставщика в соединении, его точка соединения должна быть <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> объекта. Дополнительные сведения о подключениях веб-частей и точках подключения см. в разделах, перечисленных в подразделе ниже.  
  
 Для создания <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> объекта требуются несколько шагов:  
  
1.  Создайте интерфейс. Когда поставщик совместно использует данные с потребителем, это происходит, получив экземпляр интерфейса и возвращая этот экземпляр с потребителем.  
  
2.  Реализуйте интерфейс в поставщике. Объект <xref:System.Web.UI.WebControls.WebParts.WebPart> или другого серверного элемента управления (любого типа серверного элемента управления в <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> можно использовать зоны), которые будут поставщик должен реализовать интерфейс, созданные на первом шаге.  
  
3.  Определите метод обратного вызова. Метод в поставщике должно быть идентифицировано как метод обратного вызова для установления соединения. Этот метод возвращает экземпляр реализованного интерфейса потребителю. Веб-частей подход для определения метода обратного вызова в поставщике является добавление `ConnectionProvider` атрибута метаданных (определяется <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> класс) метода, который возвращает экземпляр интерфейса. При добавлении атрибута Единственным обязательным параметром является отображаемое имя для точки подключения поставщика. Необязательные параметры можно также добавить, например идентификатор для точки подключения.  
  
 После элемента управления начнет действовать в качестве поставщика, элемент управления может участвовать в соединениях, (при условии, что элемент управления потребителя аналогично оборудован). Чтобы создать статическое, объявленное подключение в разметке веб-страницы, разработчики могут использовать `<asp:webpartconnection>` элемент. Если `ConnectionProvider` в исходном коде поставщика, который идентифицирует метод обратного вызова указывает идентификатор для точки подключения, то это значение должны быть назначены `ProviderConnectionPointID` атрибут `<asp:webpartconnection>` элемента на странице. Одной из причин, разработчик может указать идентификатор для точки подключения поставщика является, если имеется несколько точек подключения в элементе управления поставщика. Если идентификатор не указан для точки подключения поставщика в элементе управления поставщика, значения не должна назначаться `ProviderConnectionPointID` атрибут на странице, так как соединение будет создаваться с помощью по умолчанию значение, полученное от <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> поле.  
  
 Для создания подключения в коде, необходимо создать новый разработчики <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> путем вызова метода <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> метода и передачи в идентификатор элемента управления поставщика, вместе с Идентификатором или определенный индекс <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> объекта в элементе управления поставщика. Возвращенный <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> ссылки на объект, а также ссылку на элемент управления поставщика управления получателя и соответствующим <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> , являются все передаваемые <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> метод для создания нового <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> объекта.  
  
 Несмотря на то, что разработчики могут использовать точки подключения поставщика как часть установления подключения декларативно или программно, пользователи также могут взаимодействовать с точками подключения поставщика для установления подключений через пользовательский интерфейс (UI). Если разработчики объявляют <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> элемента управления веб-страницы, он предоставляет пользовательский Интерфейс во время выполнения для создания подключений. Если пользователь выбрал управления получателя в качестве отправной точки для установления соединения, щелкнув его команду подключения (они могут выбрать поставщик, нет никаких различий результирующего подключения), в пользовательском Интерфейсе пользователь увидит элемент управления раскрывающегося списка с отображаемое имя доступного поставщика подключения точка (или точек, если их несколько). Пользователи должны выбрать точку подключения поставщика, чтобы создать подключение.  
  
 Объект <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> объект связывается непосредственно с элементом управления для конкретного поставщика и хранит сведения о соединении в свойствах, он наследует от базового <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> класса. Например, в наследуемого <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> свойства, точка подключения поставщика сохраняет тип интерфейса, возвращенный поставщиком. Если поставщик и получатель в подключении работают с тем же типом интерфейса, элементы управления являются совместимыми и могут создавать прямое подключение. Если поставщик и получатель не может работать с тем же типом интерфейса, не являются совместимыми и необходимо использовать <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> объекта для преобразования точка подключения поставщика <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> значение в тип, который потребитель может работать с. Другим важным наследуемым свойством является <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> при создании подключения, выберите пункт Свойства, которое предоставляет понятное имя для отображения в пользовательском Интерфейсе, пользователи могут выбрать подключения поставщика. Отображаемое имя является обязательным при добавлении разработчиками `ConnectionProvider` атрибут в метод обратного вызова в элементе управления поставщика. Наследуемый <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> свойства также является полезным, как указано выше, поскольку она предоставляет уникальный идентификатор для точки подключения поставщика в случае, если поставщик имеет несколько точек подключения. Поставщик может иметь несколько <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> объекты, определенные в нем и в этом случае при добавлении разработчиками `ConnectionProvider` атрибут к методу, следует указать значение идентификатора для различения каждой точки подключения. Один других важных является свойством <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> свойство, которое указывает, является ли точка подключения поставщика можно одновременно подключиться к нескольким получателям. Это свойство имеет значение `true` по умолчанию для точки подключения поставщика (в то время как значение по умолчанию `false` для точки подключения потребителя).  
  
 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> Класс добавляет несколько уникальных методов к членам, он наследует от <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> класса. <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> Метод получает экземпляр интерфейса, которое будет возвращать метод обратного вызова для потребителей. <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A> Метод возвращает дополнительные пользовательские интерфейсы, которые являются частью существующего подключения, но не интерфейсы используются для установления соединения.  
  
   
  
## Examples  
 В следующем примере кода показаны простые способы создания подключения декларативно, программно или через пользовательский Интерфейс каждого варианта предоставления доступа используйте точки подключения поставщика.  
  
 Пример состоит из четырех частей.  
  
-   Режим отображения пользовательского элемента управления, позволяющий изменить веб-частей на странице.  
  
-   Исходный код для интерфейса, а два <xref:System.Web.UI.WebControls.WebParts.WebPart> управляет роль поставщика и потребителя, для подключения.  
  
-   Веб-страницы, все элементы управления ведущего приложения и выполнения примера кода.  
  
-   Объяснение, как запустить пример страницы.  
  
 Первая часть данный пример кода является пользовательский элемент управления, позволяющий пользователям изменять режимы отображения на веб-странице. Сохраните следующий исходный код в ASCX-файл, задав для него имя файла, который назначен `Src` атрибут `Register` директив данного пользовательского элемента управления, который находится в верхней размещения веб-страницы. Сведения о режимах отображения и описание исходного кода в этом элементе управления, см. в разделе [Пошаговое руководство: изменение режима отображения страницы](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 Во второй части примера кода приведен исходный код для интерфейса и элементов управления. Исходный файл содержит простой интерфейс с именем `IZipCode`. Имеется также <xref:System.Web.UI.WebControls.WebParts.WebPart> класс с именем `ZipCodeWebPart` , реализующий интерфейс и выступает в роли управления поставщика. Его `ProvideIZipCode` метод является методом обратного вызова, реализующий единственный член этого интерфейса. Метод просто возвращает экземпляр интерфейса. Обратите внимание, что метод помечен атрибутом `ConnectionProvider` в метаданных атрибутом. Это механизм идентификации метода в качестве метода обратного вызова для точки подключения поставщика. Другой <xref:System.Web.UI.WebControls.WebParts.WebPart> класс называется `WeatherWebPart`, и он действует как потребитель соединения. Этот класс содержит метод с именем `GetZipCode` , возвращает экземпляр `IZipCode` интерфейс из элемента управления поставщика. Обратите внимание, что этот метод помечен как метод точки подключения потребителя с `ConnectionConsumer` в метаданных атрибутом. Это механизм идентификации метода точки подключения в элементе управления получателя.  
  
 Для выполнения примера кода необходимо скомпилировать этот исходный код. Можно выполнить явную компиляцию и поместить результирующую сборку в папку Bin веб-сайта или в глобальном кэше сборок. Кроме того можно поместить исходный код в папку App_Code веб-узла, где он будет динамически компилироваться во время выполнения. Данный пример кода использует динамической компиляции. Пошаговое руководство по компиляции см. в разделе [Пошаговое руководство: разработка и с помощью элемента управления пользовательского](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/ZipCodeComponent.vb#2)]  
  
 Третья часть примера кода — веб-страница. В верхней, `Register` директивы для регистрации пользовательских элементов управления, которые образуют связь, а пользовательский элемент управления, позволяющий пользователю изменять режимы отображения на странице. Само соединение создается декларативно в `<staticconnections>` элемента на странице. Это демонстрирует один способ создания подключения — Примечание `ProviderConnectionPointID` атрибут `<asp:webpartconnection>` элемента. Можно также создать соединения программным образом. код, выполняющий, находится в `Button1_Click` метод. В этом случае <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> объект создается и передается в метод, который создает фактическое соединение. Независимо от подключения создается декларативно или программно, точки подключения всегда необходимо указать поставщика и потребителя. `Button2_Click` Метод обращается к <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> объектов для поставщика и потребителя, а также записывает некоторые значения свойств метки на странице.  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 После загрузки страницы в браузере, щелкните **сведений о точке подключения** кнопки. Отображаются сведения о точках подключения поставщика и потребителя, установленных в декларативной связи. Затем используйте **режим отображения** раскрывающийся элемент управления, чтобы переключить страницу в режиме подключения. В меню команд для **потребителя ПОЧТОВЫЙ индекс** <xref:System.Web.UI.WebControls.WebParts.WebPart> управления (представленным стрелкой вниз в строке заголовка), щелкните команду подключения. Автоматически создать подключение появится пользовательский Интерфейс, `<asp:connectionszone>` управления объявлен на странице. Это еще один способ создания подключения (посредством пользовательского интерфейса), вместе с декларативные и программные методы, описанные выше. Нажмите кнопку **Disconnect** кнопку, чтобы завершить существующего статического подключения. Нажмите кнопку **создания подключения к поставщику** ссылку. Теперь пользовательский Интерфейс отображает раскрывающийся элемент управления, в которой перечислены отображается имя точки подключения поставщика. Выберите точку подключения в раскрывающемся списке и нажмите кнопку **Connect** для завершения подключения. Далее щелкните **Disconnect** еще раз. Нажмите кнопку **динамическое подключение** кнопку, чтобы создать подключение программным образом. Используйте **режим отображения** управления для возврата страницы в режим просмотра. Нажмите кнопку **Connection Point Details** кнопку, чтобы еще раз указать сведения об объекте точки подключения поставщика.  
  
 В этом примере демонстрируется создание подключения и с помощью точки подключения поставщика тремя способами: статическим подключением, объявленным в разметке веб-страницы; соединение, созданное в код, который используется <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> объект и подключения, созданного пользователем через пользовательский Интерфейс подключения.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ProviderConnectionPoint (System.Reflection.MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.MethodInfo callbackMethod, class System.Type interfaceType, class System.Type controlType, string displayName, string id, bool allowsMultipleConnections) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callbackMethod As MethodInfo, interfaceType As Type, controlType As Type, displayName As String, id As String, allowsMultipleConnections As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ProviderConnectionPoint(System::Reflection::MethodInfo ^ callbackMethod, Type ^ interfaceType, Type ^ controlType, System::String ^ displayName, System::String ^ id, bool allowsMultipleConnections);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="callbackMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="interfaceType" Type="System.Type" />
        <Parameter Name="controlType" Type="System.Type" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="allowsMultipleConnections" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="callbackMethod">Метод в элементе управления поставщика, возвращающий экземпляр интерфейса потребителям для установления подключения.</param>
        <param name="interfaceType">Объект <see cref="T:System.Type" /> интерфейса, который поставщик обслуживает для потребителей.</param>
        <param name="controlType">Объект <see cref="T:System.Type" /> элемента управления поставщика, с которым сопоставлена точка подключения поставщика.</param>
        <param name="displayName">Понятное отображаемое имя для точки подключения поставщика, которое видят пользователи в пользовательском интерфейсе подключения.</param>
        <param name="id">Уникальный идентификатор для точки подключения поставщика.</param>
        <param name="allowsMultipleConnections">Логическое значение, указывающее может ли точка подключения поставщика иметь несколько одновременных подключений с потребителями.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A> Конструктор для <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> классе просто вызывает базовый конструктор, передавая ей различных параметров и инициализации базового класса.  
  
 Конструктор базового класса, проверяет число параметров для точки подключения и может создать несколько исключений. Список возможных исключений см. раздел "исключения".  
  
 Можно вызвать <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A> конструктор для создания собственного экземпляра <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> класса. Однако в случаях, когда вы просто установления соединения и не расширения класса, должен вызвать <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> метод для возврата существующего объекта точки подключения поставщика.  
  
   
  
## Examples  
 В следующем примере кода показано, как наследовать от <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> класса, чтобы создать точку подключения пользовательского поставщика.  
  
 В примере кода состоит из трех частей:  
  
-   Исходный файл, который содержит поставщик <xref:System.Web.UI.WebControls.WebParts.WebPart> управления потребителя <xref:System.Web.UI.WebControls.WebParts.WebPart> управления, а пользовательский <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> объекта.  
  
-   Веб-страницы, содержащей элемент управления в статическом подключении.  
  
-   Объяснение того, как запустить пример кода.  
  
 Первая часть примера кода — источник для поставщика и потребителя <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов управления, а пользовательский <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> класс с именем `TableProviderConnectionPoint`. Обратите внимание, что конструктор `TableProviderConnectionPoint` класс вызывает базовый конструктор, передавая ему необходимые параметры, как указано в разделе "Параметры". Также Обратите внимание, что в `TableProviderWebPart` класса `GetConnectionInterface` метод указывается в качестве метода обратного вызова для подключений и `ConnectionProvider` атрибут объявляет пользовательское `TableProviderConnectionPoint` как параметр. Это показано, как создать точку подключения пользовательского поставщика и связать ее с элементом управления поставщика. В этом примере предполагается, что исходный код компилируется динамически, так что следует поместить файл исходного кода в подпапку App_Code веб-приложения.  
  
 [!code-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/connectionControls.cs#1)]  
  
 Вторая часть примера кода — веб-страницы, на котором размещены пользовательские элементы управления в статическом подключении веб-частей. В верхней части страницы находится `Register` директивы для объявления префикса и пространства имен для пользовательских элементов управления. Соединение, объявленные с помощью `<asp:webpartconnection>` объявленные элементы управления элемента и поставщика и потребителя в `<asp:webpartzone>` элемент.  
  
 [!code-aspx-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#3](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/defaultcs.aspx#3)]  
  
 Загрузите страницу в браузере. Подключение между элементами управления уже существует, и потребитель отображает данные от поставщика, так как подключение было объявлено как статическое подключение на странице.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="callbackMethod" /> имеет значение <see langword="null" />.  
  
 \- или -  
  
 Свойство <paramref name="interfaceType" /> имеет значение <see langword="null" />.  
  
 \- или -  
  
 Свойство <paramref name="controlType" /> имеет значение <see langword="null" />.  
  
 \- или -  
  
 Параметр <paramref name="displayName" /> имеет значение <see langword="null" /> или равен пустой строке ("").</exception>
        <exception cref="T:System.ArgumentException">
          Параметр <paramref name="controlType" /> имеет тип, отличный от типа элемента управления поставщика (или производного от него допустимого класса).</exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
      </Docs>
    </Member>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public virtual object GetObject (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetObject(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetObject(System::Web::UI::Control ^ control);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">Элемент управления, действующий как поставщик в связи веб-частей.</param>
        <summary>Вызывает метод обратного вызова в элементе управления поставщика, который получает экземпляр интерфейса для возвращения потребителям.</summary>
        <returns>Объект <see cref="T:System.Object" />, являющийся экземпляром интерфейса, который поставщик возвращает потребителям для установления подключения.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод возвращает объект из элемента управления поставщика, который является экземпляром интерфейса, используемый для установления соединения. Тип объекта будет тип реализованного интерфейса. Например, два интерфейса, которые реализуются для соединений веб-частей, являются <xref:System.Web.UI.WebControls.WebParts.IWebPartField> и <xref:System.Web.UI.WebControls.WebParts.IWebPartRow>. Когда <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> метод будет вызван на <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> объекта, если связанный поставщик реализует один из этих интерфейсов, возвращаемый объект будет того же типа.  
  
 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> Метод вызывается методом <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> объектов, когда соединение активируется. Это критически важный этап, который фактически инициирует подключение и начинает процесс, который включает два элемента управления для обмена данными.  
  
 Элемент управления потребителя в подключении должен быть возможность работать с тем же типом интерфейса, как поставщик. Если этого не произошло, элементы управления несовместимы и <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> объект должен использоваться для установления соединения.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="control" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSecondaryInterfaces">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection GetSecondaryInterfaces (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection GetSecondaryInterfaces(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::UI::WebControls::WebParts::ConnectionInterfaceCollection ^ GetSecondaryInterfaces(System::Web::UI::Control ^ control);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">Элемент управления, действующий как поставщик в связи веб-частей.</param>
        <summary>Получает дополнительную коллекцию дополнительных интерфейсов, которые могут поддерживаться точкой подключения поставщика.</summary>
        <returns>Объект <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" /> дополнительных интерфейсов, предоставленных элементом управления, действующим как поставщик.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Объект точки подключения поставщика всегда имеет интерфейс по умолчанию, используемый для установления соединения с потребителями. Экземпляр интерфейса по умолчанию, извлечь, вызвав <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> метод <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> объекта.  
  
 Тем не менее некоторые элементы управления поставщика будет реализовывать несколько интерфейсов, чтобы предоставить пользователям в рамках соединения. Эти интерфейсы, которые не по умолчанию используется для установления соединения, называются дополнительными интерфейсами. <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A> Метод предоставляет способ для возврата коллекции ссылок на дополнительные интерфейсы, так же как и <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> метод возвращает ссылку на интерфейс по умолчанию.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see cref="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)" /> Метод в <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> класс содержит отсутствует реализация, она возвращает пустую коллекцию дополнительных интерфейсов. Для реализации этого метода необходимо наследование от <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> класса и переопределить этот метод, возврат из него ряд дополнительных интерфейсов.</para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>