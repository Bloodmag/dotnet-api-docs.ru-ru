<Type Name="WebPartConnection" FullName="System.Web.UI.WebControls.WebParts.WebPartConnection">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="99b712d129d3cb28502a4cc5a10761afa7fd6f97" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36584863" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class WebPartConnection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WebPartConnection extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class WebPartConnection" />
  <TypeSignature Language="C++ CLI" Value="public ref class WebPartConnection sealed" />
  <TypeSignature Language="F#" Value="type WebPartConnection = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true, "Transformers")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Предоставляет объект, который позволяет двум элементам управления <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> устанавливать подключение. Этот класс не наследуется.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В наборе элементов управления веб-частей соединение является соединением или связью между двумя <xref:System.Web.UI.WebControls.WebParts.WebPart> (или другой сервер или пользователь) элементов управления, которая позволяет им совместно использовать данные. Эта возможность совместного использования данных позволяет подключенных элементов управления для использования в предоставляют более широкие возможности, предоставляемые изолированных элементов управления. Например если один элемент управления предоставляет данные почтовых индексов, а другой элемент управления может считывать данные и предоставлять сведения о погоде на основании почтовый индекс, затем возможность подключения двух элементов управления обеспечивает дополнительные преимущества пользователей. Расширить этот пример, может быть создан других элементов управления, также отображаемое данные на основании почтового индекса, например элемент управления со ссылками на местных новостей и все эти элементы управления, которые могут работать с данными почтовый индекс могут обмениваться данными с одного элемента управления, который предоставляет Почтовый индекс. Конечные пользователи приложений веб-части можно создавать и управлять соединениями все совместимые элементы управления напрямую из браузера с помощью стандартного пользовательского интерфейса подключений (UI), предоставляемые <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> управления или с помощью пользовательского интерфейса, предоставляемые разработчик.  
  
 Это <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Обзор класса содержит общие основные сведения по созданию подключения. Дополнительные сведения о конкретных компонентах и требования, связанные с созданием подключений см [Общие сведения о подключениях веб частей](http://msdn.microsoft.com/library/d98cfd0f-ebd6-4871-89d5-abbd2cdef67b), или разделе ссылочных классов и упомянутые ниже примеры кода. Существует несколько фундаментальных аспектов подключения веб-частей.  
  
-   Два <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов управления. Каждое подключение веб-частей, состоит из двух элементов управления. Возможно, для элемента управления для участия в несколько соединений одновременно, но каждое отдельное подключение состоит ровно из двух элементов управления. Элементы управления могут быть производными напрямую <xref:System.Web.UI.WebControls.WebParts.WebPart> базового класса, или они могут быть другие серверные элементы управления, включая элементы управления ASP.NET, пользовательских серверных элементов управления и пользовательские элементы управления. Элементы управления, которые не являются производными от <xref:System.Web.UI.WebControls.WebParts.WebPart> класса, если поместить в <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> зоны, будут автоматически переноситься с <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> объекта во время выполнения, что позволяет им наследовать от <xref:System.Web.UI.WebControls.WebParts.WebPart> класса и функции, как во время выполнения <xref:System.Web.UI.WebControls.WebParts.WebPart> элементы управления.  
  
-   Элементы управления, размещенные в <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> зоны. Оба <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов управления и других видов серверный элемент управления должен находиться в <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> зоны, чтобы иметь возможность участвовать в подключениях веб-частей (и многие другие возможности веб-частей).  
  
-   Получатели и поставщики. В каждой связи веб-частей имеется два элемента управления: поставщик данных и объекта-получателя данных. Поставщик передает данные получателю через указанный метод обратного вызова, возвращает данные в форме интерфейса. (Пример создания и указания метода обратного вызова см. в разделе примеров в этом разделе.) Этот метод обратного вызова называется точкой подключения поставщика. Сведения из этой точки подключения (его «имя», идентификатор и тип возвращенный интерфейс) находятся в <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> объект, связанный с элементом управления поставщика. Потребитель получает данные через указанный метод, который может принимать экземпляр интерфейса. Этот метод называется клиентская точка подключения, а также содержатся сведения о точке подключения (имя, идентификатор и тип интерфейса) в <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> объект, связанный с элементом управления потребителя.  
  
-   Совместимые элементы управления или допустимый преобразователь. Для работы подключения потребителя и поставщика должны быть совместимыми (то есть, что их методы точки указанное соединение будет работать с тем же типом интерфейса) или же должен быть <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> объект, способный преобразовывать тип, предлагаемый по Поставщик в тип, принимаемый объектом-получателем.  
  
-   Объект <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>. Для подключения к существует, должен быть экземпляром <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> класс, который содержит ссылки на поставщика и потребителя элементы управления, а также сведения об их точках подключения. Поставщика и потребителя, несовместимы и используйте вместо <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> объекта подключения, соединение ссылается на преобразователь.  
  
-   Средство для установки соединения. После совместимые потребителя и поставщика элементов управления были правильно разработанные с помощью методов точек подключения и размещается в зоне и <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> объект доступен, последней основной шаг является инициализация подключения. Это может произойти в том для пользователей, для создания подключения через пользовательский Интерфейс. Если поместить `<asp:connectionszone>` элемента на странице, а другая — необходимых компонентов подключения в месте, во время выполнения пользователь может переключить страницу в режим отображения подключения, щелкните команду подключения в меню команд поставщик или потребитель и пользовательский Интерфейс для подключения (на основе <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> управления) будут отображаться. Посредством этого пользовательского интерфейса то пользователь может инициировать соединение. Другой способ инициировать подключения — сделать это программными средствами. В любом случае через пользовательский Интерфейс или программно, базовому методу, инициирующую соединение, одинаково. Приложение вызывает <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> метод (или <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> метод, если использование класса transformer) на <xref:System.Web.UI.WebControls.WebParts.WebPartManager> управления, передавая ей поставщика, потребитель и их соответствующие объекты точек подключения, а метод возвращает <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> объект.  
  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Класс определяет объект, инкапсулирующий необходимые сведения о соединении между двумя <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов управления. Класс почти полностью состоит из свойства, относящиеся к сведениям о определенного соединения. Некоторые свойства связаны управления получателя в соединении. <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> Свойство ссылается на потребителя самого элемента управления и <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> свойство ссылается на идентификатор получателя. <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Потребителя ссылается объект, который содержит сведения о точке подключения потребителя, <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> свойство. <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> Свойство ссылается на идентификатор <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> объекта. Все эти свойства соединения, связанные с потребитель должен иметь значение, присвоенное их для создания соединения.  
  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Класс также содержит некоторые свойства, связанные с управлением поставщика в соединении, и они соответствуют свойствам для объекта-получателя. <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> Свойство ссылается на поставщика самого элемента управления, пока <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> свойство ссылается на его идентификатор. <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> Ссылок на свойства <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> объекта и <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> свойство ссылается на идентификатор точки подключения поставщика.  
  
 Несколько свойств связаны с состоянием соединения. <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> Свойство указывает, является ли подключение активно (в настоящее время обмена данными) или неактивные (данные все еще подключены, но не активно общего доступа). <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> Свойство указывает, является ли подключение общим (доступно всем пользователям страницы) или подключения для конкретного пользователя и <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> свойство указывает, является ли элемент управления статические (объявленный в разметке страницы и таким образом постоянных) или динамический (созданный программным образом, что означает, что он может удалить).  
  
   
  
## Examples  
 В следующем примере кода показано, как создать простое соединение между двумя <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов управления. В примере показано три способа формирования подключения: декларативное, посредством размещения тегов для подключения в разметке веб-страницы; программно путем создания подключения в коде; и в пользовательском Интерфейсе, поместив <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> элемента управления на страницу, которая предоставляет пользователям возможность установления соединения.  
  
 В примере кода состоит из четырех частей:  
  
-   Режим отображения пользовательского элемента управления, позволяющий изменить веб-частей на странице.  
  
-   Исходный код для интерфейса, а два <xref:System.Web.UI.WebControls.WebParts.WebPart> управляет роль поставщика и потребителя, для подключения.  
  
-   Веб-страницы, все элементы управления ведущего приложения и выполнения примера кода.  
  
-   Объяснение, как запустить пример страницы.  
  
 Первая часть данный пример кода является пользовательский элемент управления, позволяющий пользователям изменять режимы отображения на веб-странице. Сохраните следующий исходный код в ASCX-файл, задав для него имя файла, который назначен `Src` атрибут `Register` директив данного пользовательского элемента управления, который находится в верхней размещения веб-страницы. Сведения о режимах отображения и описание исходного кода в этом элементе управления, см. в разделе [Пошаговое руководство: изменение режима отображения страницы](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 Во второй части примера кода приведен исходный код для интерфейса и элементов управления. Исходный файл содержит простой интерфейс с именем `IZipCode`. Имеется также <xref:System.Web.UI.WebControls.WebParts.WebPart> класс с именем `ZipCodeWebPart` , реализующий интерфейс и выступает в роли управления поставщика. Его `ProvideIZipCode` метод является методом обратного вызова, реализующий единственный член этого интерфейса. Метод просто возвращает экземпляр интерфейса. Обратите внимание, что метод помечен атрибутом `ConnectionProvider` в метаданных атрибутом. Это механизм идентификации метода в качестве метода обратного вызова для точки подключения поставщика. Другой <xref:System.Web.UI.WebControls.WebParts.WebPart> класс называется `WeatherWebPart`, и он действует как потребитель соединения. Этот класс содержит метод с именем `GetZipCode` , возвращает экземпляр `IZipCode` интерфейс из элемента управления поставщика. Обратите внимание, что этот метод помечен как метод точки подключения потребителя с `ConnectionConsumer` в метаданных атрибутом.  
  
 Для выполнения примера кода необходимо скомпилировать этот исходный код. Можно выполнить явную компиляцию и поместить результирующую сборку в папку Bin веб-сайта или в глобальном кэше сборок. Кроме того можно поместить исходный код в папку App_Code веб-узла, где он будет динамически компилироваться во время выполнения. Данный пример кода использует динамической компиляции. Пошаговое руководство по компиляции см. в разделе [Пошаговое руководство: разработка и с помощью элемента управления пользовательского](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/VB/ZipCodeComponent.vb#2)]  
  
 Третья часть примера кода — веб-страница. В верхней, `Register` директивы для пользовательского элемента управления и пользовательские <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов управления. Поскольку в этом примере предполагается динамическая компиляция элементов управления, исходный код для элементов управления должна находиться в подпапке App_Code; `Register` тегу на странице ссылается только на произвольный префикс тега и пространство имен для элементов управления. Пользовательский <xref:System.Web.UI.WebControls.WebParts.WebPart> объявленные элементы управления (поставщика и потребителя) на веб-странице `<asp:webpartzone>` элемент-внутри `<zonetemplate>` элемента.  
  
 Страница предоставляет три способа формирования подключения между пользовательскими элементами управления. Первый метод является декларативным. В разметке страницы <`StaticConnections>` элемент объявляется и в этом домене `<asp:WebPartConnections>` элемент, с клиента и поставщика сведения соединения, заданные в виде атрибутов. Это один из способов создания соединения, объявив его непосредственно в веб-страницы, в частности `<asp:WebPartManager>` элемента. Из-за этого статического соединения соединение двух элементов управления создается немедленно при первом запуске загрузке страницы.  
  
 Второй метод для формирования подключения между элементами управления обеспечивается `<asp:connectionszone>` элементу страницы. Если пользователь переключает страницу в режим соединения во время выполнения и выбирает команду соединения на одном из настраиваемых элементов управления, `<asp:connectionszone>` автоматически отображает пользовательский Интерфейс для создания подключения.  
  
 Этой странице также показан третий способ создания соединения, а это сделать это программными средствами. В `Button1_Click` метод создает код <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> объект для управления поставщика, а затем извлекает сведения о своей точки подключения, вызвав <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> метод. Он выполняет подобной задачи для элемента управления поставщика вызов <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> метод. Наконец, он создает новый <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> путем вызова метода <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> метод <xref:System.Web.UI.WebControls.WebParts.WebPartManager> элемента управления.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 После загрузки веб-страницы в браузере, первое подключение уже существует, так как он объявлен в рамках `<StaticConnections>` элемента. Введите любой текст в **ПОЧТОВЫЙ индекс поставщика** элемента управления, который будет отображаться в элементе управления получателя. Затем отключите два элемента управления. С помощью **режим отображения** раскрывающемся списке элемента управления, измените страницу, чтобы соединить режим отображения. Щелкните меню команд (представленное стрелкой вниз в заголовке окна) для каждого из <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов, а также Обратите внимание, что каждый **Connect** параметр. Это команда подключения, которая отображается в меню команд только когда страница находится в режиме подключения. Щелкните команду подключения в одном из элементов управления и пользовательского интерфейса, предоставляемые подключения <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> элемент управления. Нажмите кнопку **Disconnect** кнопку, чтобы завершить статическое подключение между элементами управления. Используйте **режим отображения** управления для возврата страницы в режим просмотра. Попробуйте еще раз введите новый текст в поставщике и обратите внимание, что поскольку элементы управления будут отключены, текст не удается обновить в элементе управления получателя.  
  
 Чтобы снова перейти на страницу в режим отображения подключения Далее используйте тот же метод как описано выше. Щелкните команду подключения в одном из элементов управления. Нажмите кнопку **создать подключение** доступ и использовать пользовательский Интерфейс, предоставляемый <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> элемента управления, чтобы создать подключение между элементами управления. Это второй метод для создания подключения. Обратите внимание, что как только подключение будет сформировано, последняя строка введен в элементе управления поставщика (который не отображаются, поскольку элементы управления были отключены) внезапно отображается в потребителя, так как подключение создана заново. Нажмите кнопку **Disconnect** кнопку для завершения текущего подключения, которое вы только что создали. Вернитесь в режим просмотра. Введите новый текст в поставщике, чтобы убедиться, что текст не обновляется, и снова отключенных элементов управления.  
  
 Вернитесь в режим отображения подключения. Чтобы не нажимать кнопку команды подключения, нажмите кнопку **подключения элементов управления веб-части** кнопку, которая иллюстрирует третий метод формирования подключения. Этот подход подключается элементов управления программными средствами в простого действия без использования <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> элемента управления. Обратите внимание, что при создании подключения последняя строка, введенный в поставщике внезапно отображается в элементе управления потребителя.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionPoint" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionsZone" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />
    <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebPartConnection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartConnection.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebPartConnection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.%23ctor%2A> Конструктор является открытым, чтобы средство синтаксического анализа ASP.NET можно создать экземпляр при объявлении подключение в разметке веб-страницы; этот конструктор не предназначен для использования в коде разработчика.  
  
 Если вы хотите создать <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> программно, следует использовать <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=nameWithType> или <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=nameWithType> метода <xref:System.Web.UI.WebControls.WebParts.WebPartManager> элемента управления. Эти методы обрабатывают многие сведения о создании соединения и возвращать <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> объекта.  
  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.%23ctor%2A> Конструктор для <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> класс задает значения <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> и <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> свойства `true`. Таким образом, состояние нового подключения по умолчанию должен быть статическим (что означает, что он объявлен в разметке, содержащего веб-страницы) и общих (видны всем пользователям страницы). Это произойдет в случае, при добавлении соединения в типичном сценарии путем объявления подключения в разметке страницы с `<asp:webpartconnection>` элемента. Однако в других случаях соединение будет иметь различные значения для этих свойств. Например при добавлении подключения программным способом, создав объект подключения в коде, и пользователь просматривает страницу в области персонализации пользователя по умолчанию, соединение создается как динамические, user(visible only to the specific user) соединение.  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> И <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> свойства доступны только для чтения, а эти свойства, которые определяют тип подключения задаются внутренним образом <xref:System.Web.UI.WebControls.WebParts.WebPartManager> элемента управления в зависимости от того, как создается подключение (декларативно в разметке страницы, или программным способом с помощью кода или пользовательского интерфейса).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint)" />
      </Docs>
    </Member>
    <Member MemberName="Consumer">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPart Consumer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPart Consumer" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Consumer As WebPart" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPart ^ Consumer { System::Web::UI::WebControls::WebParts::WebPart ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Consumer : System.Web.UI.WebControls.WebParts.WebPart" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPart</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает объект <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" />, который функционирует в подключении как элементу правления получателя.</summary>
        <value>Объект <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" />, который представляет элемент управления веб-частей, функционирующий в подключении как получатель.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Каждое соединение веб-частей состоит из двух элементов управления с общими данными. Один элемент управления функционирует как поставщик данных, а другой элемент управления действует как потребитель, получения и обработки данных от поставщика. <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> Свойство получает ссылку на <xref:System.Web.UI.WebControls.WebParts.WebPart> управления действующего в качестве объекта-получателя в связи соединения.  
  
   
  
## Examples  
 В следующем примере кода показано программное использование <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> свойство.  
  
 В примере кода состоит из четырех частей:  
  
-   Режим отображения пользовательского элемента управления, позволяющий изменить веб-частей на странице.  
  
-   Исходный код для интерфейса, а два <xref:System.Web.UI.WebControls.WebParts.WebPart> управляет роль поставщика и потребителя, для подключения.  
  
-   Веб-страницы, все элементы управления ведущего приложения и выполнения примера кода.  
  
-   Объяснение, как запустить пример страницы.  
  
 Первая часть данный пример кода является пользовательский элемент управления, позволяющий пользователям изменять режимы отображения на веб-странице. Сохраните следующий исходный код в ASCX-файл, задав для него имя файла, который назначен `Src` атрибут `Register` директив данного пользовательского элемента управления, который находится в верхней размещения веб-страницы. Сведения о режимах отображения и описание исходного кода в этом элементе управления, см. в разделе [Пошаговое руководство: изменение режима отображения страницы](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Consumer#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_Consumer#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/VB/DisplayModeMenuVB.ascx#6)]  
  
 Во второй части примера кода приведен исходный код для двух <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов управления, которые служат в качестве потребителя и поставщика для подключения и интерфейс, используемый для точек подключения. Для выполнения примера кода необходимо скомпилировать этот исходный код. Можно выполнить явную компиляцию и поместить результирующую сборку в папку Bin веб-сайта или в глобальном кэше сборок. Кроме того можно поместить исходный код в папку App_Code веб-узла, где он будет динамически компилироваться во время выполнения. Данный пример кода использует динамической компиляции. Пошаговое руководство по компиляции см. в разделе [Пошаговое руководство: разработка и с помощью элемента управления пользовательского](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_Consumer#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_Consumer#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/VB/ZipCodeComponent.vb#2)]  
  
 В третьей части в примере кода приведен код для веб-страницы, который хранит элементы управления и демонстрируется использование <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> свойство. В верхней части страницы, `Register` директивы для пользовательского элемента управления и пользовательские элементы управления. Поскольку в этом примере используется динамическая компиляция `Register` директива исходного файла не нужно ссылаться на имя сборки; она включает только произвольный префикс тега и пространство имен для элементов управления. В `Button2_Click` метода код обращается к объекту подключения через <xref:System.Web.UI.WebControls.WebParts.WebPartManager> управления и возвращает ссылку на элемент управления получателя.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Consumer#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_Consumer#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 После загрузки страницы в браузере с помощью **режим отображения** раскрывающемся списке элемента управления для переключения страницы в режим подключения. Щелкните меню команд (представленное стрелку вниз в заголовке окна) на одном из <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов, а затем щелкните команду подключения. Используйте **подключения элементов управления веб-части** кнопки или пользовательского интерфейса (UI), предоставленный подключения для создания подключения между двумя элементами управления. Нажмите кнопку **сведения о дисплее потребителя** кнопку, чтобы запустить код, который демонстрирует <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> свойство.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Длина свойства <see cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID" /> равна нулю.</exception>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
      </Docs>
    </Member>
    <Member MemberName="ConsumerConnectionPoint">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint ConsumerConnectionPoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint ConsumerConnectionPoint" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ConsumerConnectionPoint As ConsumerConnectionPoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::ConsumerConnectionPoint ^ ConsumerConnectionPoint { System::Web::UI::WebControls::WebParts::ConsumerConnectionPoint ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ConsumerConnectionPoint : System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает объект, который служит в качестве точки подключения для элементов управления, функционирующих в подключении в качестве получателя.</summary>
        <value>Объект <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />, связанный с элементом управления получателя в подключении.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Один из необходимых действий по созданию подключения между двумя <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов управления является создание точек подключения для каждого элемента управления. Точки подключения потребителя является объект, содержащий сведения о подключении к элементу управления, действующего в качестве потребителя. В исходном коде потребителя, один из методов должен быть идентифицирован с `ConnectionConsumer` атрибута. <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Объект, связанный с элементом управления получателя содержит сведения о методе и атрибуте, включая идентификатор метода, отображаемое имя для использования в пользовательском интерфейсе (UI), и какой тип интерфейса метода можно получить. Этот набор сведений о получателе, метод формирования подключений и тип интерфейса, который он поддерживает совместно формируют точки подключения потребителя.  
  
 По умолчанию <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> объекта можно подключиться только к одной <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> объект за раз. Получатель может иметь несколько методов, идентифицированных как возможные точки подключения получателя, но получатель может участвовать только в одном подключении объекта-получателя (поэтому только одной из точек подключения потребителя может быть активна) одновременно. Напротив <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> можно подключиться к любому количеству <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> объектов. Это поведение по умолчанию можно изменить путем переопределения <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute.AllowsMultipleConnections%2A> свойство <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> атрибута.  
  
   
  
## Examples  
 В следующем примере кода показано программное использование <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> свойство.  
  
 Пример состоит из четырех частей.  
  
-   Режим отображения пользовательского элемента управления, позволяющий изменить веб-частей на странице.  
  
-   Исходный код для интерфейса, а два <xref:System.Web.UI.WebControls.WebParts.WebPart> управляет роль поставщика и потребителя, для подключения.  
  
-   Веб-страницы, все элементы управления ведущего приложения и выполнения примера кода.  
  
-   Объяснение, как запустить пример страницы.  
  
 Первая часть данный пример кода является пользовательский элемент управления, позволяющий пользователям изменять режимы отображения на веб-странице. Сохраните следующий исходный код в ASCX-файл, задав для него имя файла, который назначен `Src` атрибут `Register` директив данного пользовательского элемента управления, который находится в верхней размещения веб-страницы. Сведения о режимах отображения и описание исходного кода в этом элементе управления, см. в разделе [Пошаговое руководство: изменение режима отображения страницы](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPoint#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/VB/DisplayModeMenuVB.ascx#6)]  
  
 Во второй части примера кода приведен исходный код для двух <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов управления, которые служат в качестве потребителя и поставщика для подключения и интерфейс, используемый для точек подключения. Для выполнения примера кода необходимо скомпилировать этот исходный код. Можно выполнить явную компиляцию и поместить результирующую сборку в папку Bin веб-сайта или в глобальном кэше сборок. Кроме того можно поместить исходный код в папку App_Code веб-узла, где он будет динамически компилироваться во время выполнения. Данный пример кода использует динамической компиляции. Пошаговое руководство по компиляции см. в разделе [Пошаговое руководство: разработка и с помощью элемента управления пользовательского](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ConsumerConnectionPoint#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/VB/ZipCodeComponent.vb#2)]  
  
 В третьей части в примере кода приведен код для веб-страницы, который хранит элементы управления и демонстрируется использование <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> свойство. В `Button1_Click` метод, все объекты, необходимые для создания подключения создаются, включая <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> объекта. Эти объекты передаются в <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> метод для создания подключения. В `Button2_Click` , код получает доступ к <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> и отображаются некоторые сведения о соединении с точки.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 После загрузки страницы в браузере с помощью **режим отображения** раскрывающемся списке элемента управления для переключения страницы в режим подключения. Щелкните меню команд (представленное стрелку вниз в заголовке окна) на одном из <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов, а затем щелкните команду подключения. Используйте **подключения элементов управления веб-части** кнопки или предоставленный подключение пользовательского интерфейса, чтобы создать подключение между двумя элементами управления. Нажмите кнопку **сведения ConnectionPoint** кнопку, чтобы запустить код, который демонстрирует <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> свойство.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
      </Docs>
    </Member>
    <Member MemberName="ConsumerConnectionPointID">
      <MemberSignature Language="C#" Value="public string ConsumerConnectionPointID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConsumerConnectionPointID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID" />
      <MemberSignature Language="VB.NET" Value="Public Property ConsumerConnectionPointID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ConsumerConnectionPointID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ConsumerConnectionPointID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("default")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает значение свойства для подключения, которое ссылается на идентификатор объекта, служащего в качестве точки подключения получателя для этого подключения.</summary>
        <value>Строка, которая содержит идентификатор для точки подключения получателя.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Для статического подключения, объявленного в разметке веб-страницы, разработчики могут указать, какие точки подключения потребителя, которая будет использоваться для подключения путем присвоения значения для `ConsumerConnectionPointID` атрибут `<asp:webpartconnection>` элемента. Если значение не присваивается атрибут, <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> значение свойства.  
  
 При создании динамических подключений (программный), обычно не устанавливайте значение <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> свойства. Можно просто вызвать <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> метод <xref:System.Web.UI.WebControls.WebParts.WebPartManager> контроля, передав ему потребителя и соединения с потребителем точки объекты (а также другие обязательные параметры), и этот метод определяет правильный идентификатор, используемый для соединения с потребителем точка. Аналогичным образом, при отключении, можно вызвать <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A> метод без необходимости указания <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> значение свойства.  
  
> [!NOTE]
>  Можно определить идентификатор точки подключения, при указании <xref:System.Web.UI.WebControls.WebParts.WebPart> или другого серверного элемента управления в качестве объекта-получателя. Необходимо определить метод в получателе, который получает экземпляр интерфейса, предоставляемого элементом управления поставщика или преобразователем. Чтобы определить метод, его необходимо пометить `ConnectionConsumer` атрибута кода. При добавлении этого атрибута, можно добавить параметр необязательное строковое значение, который используется в качестве идентификатора для объекта-получателя <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> объекта. Если указывается значение необязательного параметра ID, это значение становится значением <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> свойства для соединения. Если не указать значение идентификатора <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> используется значение свойства.  
  
   
  
## Examples  
 В следующем примере кода показано использование декларативного и программного <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> свойство.  
  
 Пример состоит из четырех частей.  
  
-   Режим отображения пользовательского элемента управления, позволяющий изменить веб-частей на странице.  
  
-   Исходный код для интерфейса, а два <xref:System.Web.UI.WebControls.WebParts.WebPart> управляет роль поставщика и потребителя, для подключения.  
  
-   Веб-страницы, все элементы управления ведущего приложения и выполнения примера кода.  
  
-   Объяснение, как запустить пример страницы.  
  
 Первая часть данный пример кода является пользовательский элемент управления, позволяющий пользователям изменять режимы отображения на веб-странице. Сохраните следующий исходный код в ASCX-файл, задав для него имя файла, который назначен `Src` атрибут `Register` директив данного пользовательского элемента управления, который находится в верхней размещения веб-страницы. Сведения о режимах отображения и описание исходного кода в этом элементе управления, см. в разделе [Пошаговое руководство: изменение режима отображения страницы](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPointID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/VB/DisplayModeMenuVB.ascx#6)]  
  
 Во второй части примера кода приведен исходный код для интерфейса и элементов управления потребителя и поставщика. Для выполнения примера кода необходимо скомпилировать этот исходный код. Можно выполнить явную компиляцию и поместить результирующую сборку в папку Bin веб-сайта или в глобальном кэше сборок. Кроме того можно поместить исходный код в папку App_Code веб-узла, где он будет динамически компилироваться во время выполнения. Данный пример кода использует динамической компиляции. Пошаговое руководство по компиляции см. в разделе [Пошаговое руководство: разработка и с помощью элемента управления пользовательского](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ConsumerConnectionPointID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/VB/ZipCodeComponent.vb#2)]  
  
 Третья часть примера кода — веб-страница. Обратите внимание, что соединение объявлен в разметке страницы, с помощью `<StaticConnections>` и `<asp:WebPartsConnection>` элементы. Объявление соединения содержит обязательные `ConsumerConnectionPointID` атрибута. Второй метод для создания подключения появляется в `Button1_Click` метод, где создается новое подключение с использованием точки подключения, определенной в элементе управления получателя. Затем в `Button2_Click` , код получает доступ к <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> свойство.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPointID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 После загрузки страницы в браузере, подключение уже существует из-за статического подключения, объявленного на странице. Введите любой текст в элементе управления поставщика и обратите внимание, он отображается в объекте-получателе из-за соединения. Затем отключите элементы управления. С помощью **режим отображения** раскрывающемся списке элемента управления, переключитесь в режим подключения. Щелкните меню команд (представленное стрелку вниз в заголовке окна) на одном из <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов, а затем щелкните команду подключения. Нажмите кнопку **Disconnect** кнопки. Используйте **подключения элементов управления веб-части** кнопку для повторного создания подключения между двумя элементами управления. Нажмите кнопку **сведения ConnectionPoint** кнопку, чтобы запустить код, который обращается к <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> значение свойства. Значение записывается в метке под элементами управления.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID" />
      </Docs>
    </Member>
    <Member MemberName="ConsumerID">
      <MemberSignature Language="C#" Value="public string ConsumerID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConsumerID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID" />
      <MemberSignature Language="VB.NET" Value="Public Property ConsumerID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ConsumerID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ConsumerID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает значение свойства для подключения, которое ссылается на идентификатор элемента управления <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" />, функционирующего в качестве получателя для этого подключения.</summary>
        <value>Строка, которая содержит идентификатор элемента управления, который функционирует в подключении в качестве получателя.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> Значение свойства является обязательным при создании подключения между <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов управления. Если значение не присваивается свойству, исключение создается, если <xref:System.Web.UI.WebControls.WebParts.WebPartManager> пытается активировать соединение элемента управления.  
  
   
  
## Examples  
 В следующем примере кода показано использование декларативного и программного <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> свойство.  
  
 Пример состоит из четырех частей.  
  
-   Режим отображения пользовательского элемента управления, позволяющий изменить веб-частей на странице.  
  
-   Исходный код для интерфейса, а два <xref:System.Web.UI.WebControls.WebParts.WebPart> управляет роль поставщика и потребителя, для подключения.  
  
-   Веб-страницы, все элементы управления ведущего приложения и выполнения примера кода.  
  
-   Объяснение, как запустить пример страницы.  
  
 Первая часть данный пример кода является пользовательский элемент управления, позволяющий пользователям изменять режимы отображения на веб-странице. Сохраните следующий исходный код в ASCX-файл, задав для него имя файла, который назначен `Src` атрибут `Register` директив данного пользовательского элемента управления, который находится в верхней размещения веб-страницы. Сведения о режимах отображения и описание исходного кода в этом элементе управления, см. в разделе [Пошаговое руководство: изменение режима отображения страницы](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/VB/DisplayModeMenuVB.ascx#6)]  
  
 Во второй части примера кода приведен исходный код для интерфейса и элементов управления потребителя и поставщика. Для выполнения примера кода необходимо скомпилировать этот исходный код. Можно выполнить явную компиляцию и поместить результирующую сборку в папку Bin веб-сайта или в глобальном кэше сборок. Кроме того можно поместить исходный код в папку App_Code веб-узла, где он будет динамически компилироваться во время выполнения. Данный пример кода использует динамической компиляции. Пошаговое руководство по компиляции см. в разделе [Пошаговое руководство: разработка и с помощью элемента управления пользовательского](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ConsumerID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ConsumerID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/VB/ZipCodeComponent.vb#2)]  
  
 Третья часть примера кода — веб-страница. Обратите внимание, что соединение объявлен в разметке страницы, с помощью `<StaticConnections>` и `<asp:WebPartsConnection>` элементы. Объявление соединения содержит обязательные `ConsumerID` атрибута. Второй метод для создания подключения появляется в `Button1_Click` метод, где создается новое подключение с использованием точки подключения, определенной в элементе управления получателя. Затем в `Button2_Click` метод, код получает значение <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> свойства и отображает его в метке.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 После загрузки страницы в браузере, подключение уже существует из-за статического подключения, объявленного на странице. Введите любой текст в элементе управления поставщика и обратите внимание, он отображается в объекте-получателе из-за соединения. Затем отключите элементы управления. С помощью **режим отображения** раскрывающемся списке элемента управления, переключитесь в режим подключения. Щелкните меню команд (представленное стрелку вниз в заголовке окна) на одном из <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов, а затем щелкните команду подключения. Нажмите кнопку **Disconnect** кнопки. Используйте **подключения элементов управления веб-части** кнопку для повторного создания подключения между двумя элементами управления. Нажмите кнопку **сведения потребителя** кнопку, чтобы запустить код, который обращается к <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> значение свойства.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
      </Docs>
    </Member>
    <Member MemberName="ID">
      <MemberSignature Language="C#" Value="public string ID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ID" />
      <MemberSignature Language="VB.NET" Value="Public Property ID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает идентификатор объекта <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />.</summary>
        <value>Строка, содержащая идентификатор объекта <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Каждый <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> объект имеет уникальное значение, присвоенное его <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A> свойство. Это позволяет обеспечить способ различать несколько подключений.  
  
 При создании статического соединения, объявив `<asp:webpartconnection>` элемент на веб-странице и не присвоить значение `ID` атрибут для соединения, исключение создается, если <xref:System.Web.UI.WebControls.WebParts.WebPartManager> пытается активировать соединение элемента управления.  
  
 Когда <xref:System.Web.UI.WebControls.WebParts.WebPartManager> управления создает новое динамическое подключение, он вызывает метод <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicConnectionID%2A> метод, чтобы создать уникальный идентификатор для соединения.  
  
   
  
## Examples  
 В следующем примере кода показано использование декларативного и программного <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A> свойство.  
  
 Пример состоит из четырех частей.  
  
-   Режим отображения пользовательского элемента управления, позволяющий изменить веб-частей на странице.  
  
-   Исходный код для интерфейса, а два <xref:System.Web.UI.WebControls.WebParts.WebPart> управляет роль поставщика и потребителя, для подключения.  
  
-   Веб-страницы, все элементы управления ведущего приложения и выполнения примера кода.  
  
-   Объяснение, как запустить пример страницы.  
  
 Первая часть данный пример кода является пользовательский элемент управления, позволяющий пользователям изменять режимы отображения на веб-странице. Сохраните следующий исходный код в ASCX-файл, задав для него имя файла, который назначен `Src` атрибут `Register` директив данного пользовательского элемента управления, который находится в верхней размещения веб-страницы. Сведения о режимах отображения и описание исходного кода в этом элементе управления, см. в разделе [Пошаговое руководство: изменение режима отображения страницы](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/VB/DisplayModeMenuVB.ascx#6)]  
  
 Во второй части примера кода приведен исходный код для интерфейса и элементов управления потребителя и поставщика. Для выполнения примера кода необходимо скомпилировать этот исходный код. Можно выполнить явную компиляцию и поместить результирующую сборку в папку Bin веб-сайта или в глобальном кэше сборок. Кроме того можно поместить исходный код в папку App_Code веб-узла, где он будет динамически компилироваться во время выполнения. Данный пример кода использует динамической компиляции. Пошаговое руководство по компиляции см. в разделе [Пошаговое руководство: разработка и с помощью элемента управления пользовательского](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/VB/ZipCodeComponent.vb#2)]  
  
 Третья часть примера кода — веб-страница. Обратите внимание, что соединение объявлен в разметке страницы, с помощью `<StaticConnections>` и `<asp:WebPartsConnection>` элементы. Объявление соединения содержит обязательные `ID` атрибута. Второй метод для создания подключения появляется в `Button1_Click` метод, где создается новое подключение с использованием точки подключения, определенной в элементе управления получателя. Здесь свойство ID не является обязательным, так как динамические, подключение и <xref:System.Web.UI.WebControls.WebParts.WebPartManager> управления задает идентификатор для соединения. В `Button2_Click` метод, код получает значение <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A> свойства и отображает его в метке.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 После загрузки страницы в браузере, подключение уже существует из-за статического подключения, объявленного на странице. Введите любой текст в элементе управления поставщика и обратите внимание, он отображается в объекте-получателе из-за соединения. Затем отключите элементы управления. С помощью **режим отображения** раскрывающемся списке элемента управления, переключитесь в режим подключения. Щелкните меню команд (представленное стрелку вниз в заголовке окна) на одном из <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов, а затем щелкните команду подключения. Нажмите кнопку **Disconnect** кнопки. Используйте **подключения элементов управления веб-части** кнопку для повторного создания подключения между двумя элементами управления. Нажмите кнопку **сведения о подключении** кнопку, чтобы запустить код, который обращается к <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A> значение свойства.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsActive">
      <MemberSignature Language="C#" Value="public bool IsActive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsActive" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsActive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsActive { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsActive : bool" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, которое указывает, существует ли в настоящее время объект <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> и способен ли передавать данные между элементами управления поставщика и получателя.</summary>
        <value>Значение <see langword="true" />, если подключение является активным; в противном случае — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> Указывает состояние <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> объекта. Когда соединение находится в этом состоянии, элементы управления поставщика и потребителя в соединении взаимодействующих и иметь возможность обмена данными через общий интерфейс или <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> объекта.  
  
 Когда пользователь просматривает отображенную страницу, которая содержит установленное подключение в обычном режиме, соединение обычно активно (если она не активировалось из-за некоторых конфликт или по другой причине, при загрузке страницы). На ранних стадиях жизненного цикла страниц и элементов управления, свойство имеет значение `false`. Сразу после активации соединения <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated> события <xref:System.Web.UI.WebControls.WebParts.WebPartManager> элемента вызывается событие. В частности, активируется соединение после потребитель извлеченные экземпляр указанного интерфейса от поставщика или <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> объекта.  
  
 Полезно знать, активен ли соединение в ситуациях, где может быть конфликтов или проблем синхронизации из-за нескольких подключений на странице. Например, если отсутствует какой-то конфликт между двумя подключениями <xref:System.Web.UI.WebControls.WebParts.WebPartManager> элемент управления имеет параметр не активации одно из подключений, чтобы избежать конфликта.  
  
   
  
## Examples  
 В следующем примере кода показано использование <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> свойство.  
  
 Пример состоит из трех частей:  
  
-   Исходный код для интерфейса, а два <xref:System.Web.UI.WebControls.WebParts.WebPart> управляет роль поставщика и потребителя, для подключения.  
  
-   Веб-страницы, все элементы управления ведущего приложения и выполнения примера кода.  
  
-   Объяснение, как запустить пример страницы.  
  
 Первая часть примера кода приведен исходный код для интерфейса и элементов управления потребителя и поставщика. Для выполнения примера кода необходимо скомпилировать этот исходный код. Можно выполнить явную компиляцию и поместить результирующую сборку в папку Bin веб-сайта или в глобальном кэше сборок. Кроме того можно поместить исходный код в папку App_Code веб-узла, где он будет динамически компилироваться во время выполнения. Данный пример кода использует динамической компиляции. Пошаговое руководство по компиляции см. в разделе [Пошаговое руководство: разработка и с помощью элемента управления пользовательского](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_IsActive#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_IsActive#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/VB/ZipCodeComponent.vb#2)]  
  
 Вторая часть примера кода — это веб-страницы. В верхней находится `Register` директивы, который ссылается на исходный код для двух динамически скомпилированных <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов управления. Статические подключения объявлена внутри `<StaticConnections>` элемента на странице. В пределах `<script>` элемент расположены четыре обработчика событий. Каждый обработчик событий проверяет значение <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> свойство статического соединения и выводит сообщение для <xref:System.Web.UI.WebControls.Label> , указывающее, является ли подключение активным или неактивным в текущем состоянии жизненного цикла страниц и элементов управления элемента управления. Это показывает, в какой точке соединение активно и что он остается активным после страницы подготавливается к просмотру.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsActive#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/CS/wpConnectIsActiveCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsActive#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/VB/wpConnectIsActiveVB.aspx#1)]  
  
 Загрузите страницу в браузере. Статическое подключение уже создано и сообщения уже были записаны в метки, отображающие, была ли подключение активным на различных этапах жизненного цикла страниц и элементов управления. Нажмите кнопку **сведения о подключении** кнопки и обратите внимание, что соединение не активного на данный момент, но что соединения повторной активации каждый раз после <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated> событий и, по-прежнему активна (и, останется) после <xref:System.Web.UI.Control.PreRender> события страницы.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.IsStatic" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.ActivateConnections" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivating" />
      </Docs>
    </Member>
    <Member MemberName="IsShared">
      <MemberSignature Language="C#" Value="public bool IsShared { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsShared" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsShared As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsShared { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsShared : bool" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, является ли объект <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> видимым для всех пользователей или же только для текущего пользователя.</summary>
        <value>Значение <see langword="true" />, если подключение используется совместно, в противном случае — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Как и в случае с отдельными <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов управления, <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> объект может быть общим или экземпляра пользователя. Общий экземпляр означает, что соединение является видимым для всех пользователей веб-страницы и экземпляр пользователя означает, что соединение является видимым только для определенного пользователя.  
  
 Как правило способ добавить подключение к странице определяет ли общий доступ к подключению. Если соединение объявляется в разметке веб-страницы, то общий доступ к подключению и <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> значение свойства `true`. Кроме того Если веб-страницы в общую область персонализации при добавлении соединения, соединения также совместно. Как правило, когда пользователь вводит `<asp:connectionszone>` пользовательский интерфейс (UI для добавления соединения, страница) находится в области персонализации пользователя, поэтому соединения не используется совместно и <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> значение свойства `false`.  
  
   
  
## Examples  
 В следующем примере кода показано программное использование <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> свойство.  
  
 В примере кода состоит из пяти частей.  
  
-   Режим отображения пользовательского элемента управления, позволяющий изменить веб-частей на странице.  
  
-   Исходный код для интерфейса, а два <xref:System.Web.UI.WebControls.WebParts.WebPart> управляет роль поставщика и потребителя, для подключения.  
  
-   Веб-страницы, все элементы управления ведущего приложения и выполнения примера кода.  
  
-   Запись в файле Web.config, который необходим для выполнения этого примера.  
  
-   Объяснение, как запустить пример страницы.  
  
 Первая часть данный пример кода является пользовательский элемент управления, позволяющий пользователям изменять режимы отображения на веб-странице. Сохраните следующий исходный код в ASCX-файл, задав для него имя файла, который назначен `Src` атрибут `Register` директив данного пользовательского элемента управления, который находится в верхней размещения веб-страницы. Сведения о режимах отображения и описание исходного кода в этом элементе управления, см. в разделе [Пошаговое руководство: изменение режима отображения страницы](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsShared#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsShared#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/VB/DisplayModeMenuVB.ascx#6)]  
  
 Во второй части примера кода приведен исходный код для интерфейса и элементов управления потребителя и поставщика. Для выполнения примера кода необходимо скомпилировать этот исходный код. Можно выполнить явную компиляцию и поместить результирующую сборку в папку Bin веб-сайта или в глобальном кэше сборок. Кроме того можно поместить исходный код в папку App_Code веб-узла, где он будет динамически компилироваться во время выполнения. Данный пример кода использует динамической компиляции. Пошаговое руководство по компиляции см. в разделе [Пошаговое руководство: разработка и с помощью элемента управления пользовательского](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_IsShared#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_IsShared#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/VB/ZipCodeComponent.vb#2)]  
  
 Третья часть примера кода — веб-страница. В `Button2_Click` метод, он проверяет <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> свойства существующего соединения, поэтому отображается на странице.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsShared#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsShared#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Четвертая часть примера кода — это запись в файле Web.config, который необходим для учетной записи пользователя, в котором будут выполняться пример, чтобы иметь возможность редактировать страницу в общую область персонализации. Чтобы включить эту возможность, необходимо иметь запись в файле Web.config в `<system.web>` раздел, который выглядит как в следующем примере.  
  
```  
<webParts>  
  <personalization>  
    <authorization>  
      <allow users="UserAccount"  
             roles="admin"  
             verbs="enterSharedScope"/>  
    </authorization>            
  </personalization>  
</webParts>  
```  
  
 После загрузки страницы в браузере с помощью **режим отображения** раскрывающемся списке элемента управления для переключения страницы в режим отображения подключения. Нажмите кнопку **подключения элементов управления веб-части** кнопку, чтобы создать подключение. Далее щелкните **сведения о подключении** кнопку, чтобы отобразить ли общий доступ к подключению. При создании соединения с этой страницей в области персонализации пользователя по умолчанию <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> свойство должно иметь значение `false` для соединения.  
  
 В меню команд для одного из <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов управления (обозначается стрелкой вниз в строке заголовка), щелкните команду подключения. Когда откроется пользовательский Интерфейс подключения, щелкните **Disconnect** кнопку, чтобы завершить соединение. Используйте **режим отображения** управления для возврата страницы в режим просмотра.  
  
 В **режим отображения** элемент управления, установите **Shared** параметр, чтобы переключить страницу в общей области персонализации. Выполните те же действия, что и выше для создания подключения затем снова нажмите **сведения о подключении** кнопку, чтобы отобразить ли общий доступ к подключению. В этом случае значение <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> свойство должно иметь значение `true`.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.IsShared" />
      </Docs>
    </Member>
    <Member MemberName="IsStatic">
      <MemberSignature Language="C#" Value="public bool IsStatic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStatic" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStatic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStatic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStatic : bool" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, объявлен ли объект <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> в разметке веб-страницы или же создан программным способом.</summary>
        <value>Значение <see langword="true" />, если подключение является статическим, в противном случае — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Подключения между элементами управления веб-частей может быть статической или динамической. Статического подключения, объявленного в разметке веб-страницы с помощью `<asp:WebPartConnection>` элемента. Динамические подключения создаются программно или когда пользователь создает подключения через пользовательский интерфейс (UI), определяемый <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> элемента управления.  
  
 Статические подключения являются общими объектами, это означает, что они доступны для всех пользователей веб-страницы. Кроме того, по существу постоянных так, как, например статический <xref:System.Web.UI.WebControls.WebParts.WebPart> элемента управления, они не могут быть удалены без возможности восстановления.  
  
> [!NOTE]
>  Хотя статический объект подключения не может быть окончательно удален, он может быть окончательно отключен. В этом случае отключенный объект будет существовать на сервере, но конечный пользователь никогда не будет учитывать существование объекта на странице.  
  
   
  
## Examples  
 В следующем примере кода показано программное использование <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> свойство.  
  
 В примере кода состоит из трех частей:  
  
-   Исходный код для интерфейса, а два <xref:System.Web.UI.WebControls.WebParts.WebPart> управляет роль поставщика и потребителя, для подключения.  
  
-   Веб-страницы, элементы управления ведущего приложения и выполнения примера кода.  
  
-   Объяснение, как запустить пример страницы.  
  
 Первая часть примера кода приведен исходный код для интерфейса и элементов управления потребителя и поставщика. Для выполнения примера кода необходимо скомпилировать этот исходный код. Можно выполнить явную компиляцию и поместить результирующую сборку в папку Bin веб-сайта или в глобальном кэше сборок. Кроме того можно поместить исходный код в папку App_Code веб-узла, где он будет динамически компилироваться во время выполнения. Данный пример кода использует динамической компиляции. Пошаговое руководство по компиляции см. в разделе [Пошаговое руководство: разработка и с помощью элемента управления пользовательского](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_IsStatic#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_IsStatic#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/VB/ZipCodeComponent.vb#2)]  
  
 Вторая часть примера кода — это веб-страницы. В верхней находится `Register` директивы, который ссылается на исходный код для двух динамически скомпилированных <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов управления. Статические подключения объявлена внутри `<StaticConnections>` элемента на странице. `Button1_Click` Метод обращается к <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> свойство для проверки, является ли соединение статический.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsStatic#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/CS/wpConnectIsStaticCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsStatic#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/VB/wpConnectIsStaticVB.aspx#1)]  
  
 Загрузите страницу в браузере. Статическое подключение уже создано. Введите любой текст в элементе управления поставщика и обратите внимание, что текст отображается в элементе управления получателя. Нажмите кнопку **сведения о подключении** кнопку, чтобы отобразить значение <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> свойства.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections" />
      </Docs>
    </Member>
    <Member MemberName="Provider">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPart Provider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPart Provider" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Provider As WebPart" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPart ^ Provider { System::Web::UI::WebControls::WebParts::WebPart ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Provider : System.Web.UI.WebControls.WebParts.WebPart" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPart</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает элемент управления <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" />, который функционирует как поставщик в подключении веб-частей.</summary>
        <value>Объект <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" />, который функционирует как поставщик данных.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Каждое подключение веб-частей состоит из двух <xref:System.Web.UI.WebControls.WebParts.WebPart> элементы управления--потребителя и поставщика--и <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> свойство возвращает ссылку на элемент управления поставщика в соединении.  
  
 Как и его партнер по подключению (элемент управления получателя) управления поставщика требуется для установления соединения. При создании соединения программным путем или путем его объявления в постоянном формате страницы, необходимо указать элемент управления в качестве поставщика для подключения.  
  
   
  
## Examples  
 В следующем примере кода показано использование <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> свойство.  
  
 В примере кода состоит из трех частей:  
  
-   Исходный код для интерфейса, а два <xref:System.Web.UI.WebControls.WebParts.WebPart> управляет роль поставщика и потребителя, для подключения.  
  
-   Веб-страницы, элементы управления ведущего приложения и выполнения примера кода.  
  
-   Объяснение, как запустить пример страницы.  
  
 Первая часть примера кода приведен исходный код для интерфейса и элементов управления потребителя и поставщика. Для выполнения примера кода необходимо скомпилировать этот исходный код. Можно выполнить явную компиляцию и поместить результирующую сборку в папку Bin веб-сайта или в глобальном кэше сборок. Кроме того можно поместить исходный код в папку App_Code веб-узла, где он будет динамически компилироваться во время выполнения. Данный пример кода использует динамической компиляции. Пошаговое руководство по компиляции см. в разделе [Пошаговое руководство: разработка и с помощью элемента управления пользовательского](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_Provider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_Provider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/VB/ZipCodeComponent.vb#2)]  
  
 Вторая часть примера кода — это веб-страницы. В верхней находится `Register` директивы, который ссылается на исходный код для двух динамически скомпилированных <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов управления. Статические подключения объявлена внутри `<StaticConnections>` элемента на странице. Обратите внимание, что в `<asp:webpartconnection>` элемент, `ProviderID` атрибут имеет идентификатор элемента управления поставщика, назначенного ей. Это необходимо для идентификации поставщика для статического подключения. `Button1_Click` Метод обращается к <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> свойство и записывает некоторые детали и метки.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Provider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/CS/wpConnectProviderCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_Provider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/VB/wpConnectProviderVB.aspx#1)]  
  
 Загрузите страницу в браузере. Статическое подключение уже создано. Введите любой текст в элементе управления поставщика и обратите внимание, что текст отображается в элементе управления получателя. Нажмите кнопку **подробные сведения о поставщике** кнопки для отображения некоторых значений свойств, доступных через <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> свойство.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Длина значения свойства <see cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" /> равна нулю.</exception>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" />
      </Docs>
    </Member>
    <Member MemberName="ProviderConnectionPoint">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.ProviderConnectionPoint ProviderConnectionPoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.ProviderConnectionPoint ProviderConnectionPoint" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ProviderConnectionPoint As ProviderConnectionPoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::ProviderConnectionPoint ^ ProviderConnectionPoint { System::Web::UI::WebControls::WebParts::ProviderConnectionPoint ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ProviderConnectionPoint : System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ProviderConnectionPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает объект, который служит как точка подключения для элемента управления <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" />, выполняющего функцию поставщика в подключении.</summary>
        <value>Объект <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />, связанный с элементом управления поставщика в подключении.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Один из необходимых действий по созданию подключения между двумя <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов управления является создание точек подключения для каждого элемента управления. Точка подключения поставщика — это объект, содержащий сведения о подключении к элементу управления, выступающий в роли поставщика. В исходном коде поставщика, один из методов должен быть идентифицирован с `ConnectionProvider` атрибута. <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> , Связанный с поставщиком управления содержит сведения о методе и атрибуте, включая идентификатор метода, отображаемое имя для использования в пользовательском интерфейсе (UI), и введите экземпляр интерфейса метод может возвращать объект-получатель элемент управления. Этот набор сведений о поставщике, его метод для создания подключений и тип интерфейса, которые он предоставляет совместно формируют точки подключения поставщика.  
  
 По умолчанию <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> могут подключаться только к одной <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> объект за раз. Получатель может иметь несколько методов, идентифицированных как возможные точки подключения получателя, но получатель может участвовать только в одном подключении объекта-получателя (поэтому только одной из точек подключения потребителя может быть активна) одновременно. Напротив <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> можно подключиться к любому количеству <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> объектов по умолчанию. Например управления поставщика, который предоставляет почтовый индекс может быть подключен к нескольким пользовательским элементам управления, которые используют почтовый индекс для создания различных типов данных, на основании почтового индекса, например данных о погоде, новости и т. д. Это поведение по умолчанию можно изменить путем переопределения <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.AllowsMultipleConnections%2A> свойство <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> атрибута.  
  
   
  
## Examples  
 В следующем примере кода показано программное использование <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> свойство.  
  
 Пример состоит из четырех частей.  
  
-   Режим отображения пользовательского элемента управления, позволяющий изменить веб-частей на странице.  
  
-   Исходный код для интерфейса, а два <xref:System.Web.UI.WebControls.WebParts.WebPart> управляет роль поставщика и потребителя, для подключения.  
  
-   Веб-страницы, все элементы управления ведущего приложения и выполнения примера кода.  
  
-   Объяснение, как запустить пример страницы.  
  
 Первая часть данный пример кода является пользовательский элемент управления, позволяющий пользователям изменять режимы отображения на веб-странице. Сохраните следующий исходный код в ASCX-файл, задав для него имя файла, который назначен `Src` атрибут `Register` директив данного пользовательского элемента управления, который находится в верхней размещения веб-страницы. Сведения о режимах отображения и описание исходного кода в этом элементе управления, см. в разделе [Пошаговое руководство: изменение режима отображения страницы](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPoint#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPoint#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/VB/DisplayModeMenuVB.ascx#6)]  
  
 Во второй части примера кода приведен исходный код для двух <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов управления, которые служат в качестве потребителя и поставщика для подключения и интерфейс, используемый для точек подключения. Для выполнения примера кода необходимо скомпилировать этот исходный код. Можно выполнить явную компиляцию и поместить результирующую сборку в папку Bin веб-сайта или в глобальном кэше сборок. Кроме того можно поместить исходный код в папку App_Code веб-узла, где он будет динамически компилироваться во время выполнения. Данный пример кода использует динамической компиляции. Пошаговое руководство по компиляции см. в разделе [Пошаговое руководство: разработка и с помощью элемента управления пользовательского](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ProviderConnectionPoint#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ProviderConnectionPoint#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/VB/ZipCodeComponent.vb#2)]  
  
 В третьей части в примере кода приведен код для веб-страницы, который хранит элементы управления и демонстрируется использование <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> свойство. В `Button1_Click` метод, все объекты, необходимые для создания подключения создаются, включая <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> объекта. Обратите внимание на вызов к <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> метод <xref:System.Web.UI.WebControls.WebParts.WebPartManager> элемента управления. Различные созданные объекты передаются в <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> метод для создания подключения. В `Button2_Click` , код получает доступ к <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> и отображаются некоторые сведения о соединении с точки.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPoint#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 После загрузки страницы в браузере с помощью **режим отображения** раскрывающемся списке элемента управления для переключения страницы в режим подключения. Щелкните меню команд (представленное стрелку вниз в заголовке окна) на одном из <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов, а затем щелкните команду подключения. Используйте **подключения элементов управления веб-части** кнопки или предоставленный подключение пользовательского интерфейса, чтобы создать подключение между двумя элементами управления. Нажмите кнопку **сведения ConnectionPoint** кнопку, чтобы запустить код, который демонстрирует <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> свойство.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
      </Docs>
    </Member>
    <Member MemberName="ProviderConnectionPointID">
      <MemberSignature Language="C#" Value="public string ProviderConnectionPointID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProviderConnectionPointID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID" />
      <MemberSignature Language="VB.NET" Value="Public Property ProviderConnectionPointID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ProviderConnectionPointID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ProviderConnectionPointID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("default")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает значение свойства для подключения, которое ссылается на идентификатор объекта, выполняющего роль точки подключения поставщика для этого подключения.</summary>
        <value>Строка, содержащая идентификатор для объекта точки подключения поставщика.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Для статического подключения, объявленного в разметке веб-страницы, разработчики могут указать, какая точка подключения поставщика, которая будет использоваться для подключения путем присвоения значения для `ProviderConnectionPointID` атрибут `<asp:webpartconnection>` элемента. Если значение не присваивается атрибут, <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> значение свойства.  
  
 При создании динамических подключений (программный), обычно не устанавливайте значение <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> свойства. Можно просто вызвать <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> метод <xref:System.Web.UI.WebControls.WebParts.WebPartManager> контроля, передав ему поставщика и соединения с поставщиком точек объекты (а также другие обязательные параметры), а этот метод определяет правильный идентификатор, используемый для соединения с поставщиком точка. Аналогичным образом, при отключении, можно вызвать <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A> метод без необходимости указания <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> значение свойства.  
  
> [!NOTE]
>  Можно определить идентификатор точки подключения поставщика, при указании <xref:System.Web.UI.WebControls.WebParts.WebPart> или другого серверного элемента управления, как поставщик. Необходимо определить метод обратного вызова в поставщике, который обслуживает экземпляр интерфейса, содержащего данные с потребителем. Чтобы определить метод, его необходимо пометить `ConnectionProvider` атрибута кода. При добавлении этого атрибута, можно добавить параметр необязательное строковое значение, который используется в качестве идентификатора поставщика <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> объекта. Если указывается значение необязательного параметра ID, это значение становится значением <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> свойства для соединения. Если не указать значение идентификатора <xref:System.Web.UI.WebControls.WebParts.WebPartManager> управления назначается идентификатор по умолчанию при создании объекта.  
  
   
  
## Examples  
 В следующем примере кода показано использование декларативного и программного <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> свойство.  
  
 Пример состоит из четырех частей.  
  
-   Режим отображения пользовательского элемента управления, позволяющий изменить веб-частей на странице.  
  
-   Исходный код для интерфейса, а два <xref:System.Web.UI.WebControls.WebParts.WebPart> управляет роль поставщика и потребителя, для подключения.  
  
-   Веб-страницы, все элементы управления ведущего приложения и выполнения примера кода.  
  
-   Объяснение, как запустить пример страницы.  
  
 Первая часть данный пример кода является пользовательский элемент управления, позволяющий пользователям изменять режимы отображения на веб-странице. Сохраните следующий исходный код в ASCX-файл, задав для него имя файла, который назначен `Src` атрибут `Register` директив данного пользовательского элемента управления, который находится в верхней размещения веб-страницы. Сведения о режимах отображения и описание исходного кода в этом элементе управления, см. в разделе [Пошаговое руководство: изменение режима отображения страницы](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPointID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPointID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/VB/DisplayModeMenuVB.ascx#6)]  
  
 Во второй части примера кода приведен исходный код для интерфейса и элементов управления потребителя и поставщика. Для выполнения примера кода необходимо скомпилировать этот исходный код. Можно выполнить явную компиляцию и поместить результирующую сборку в папку Bin веб-сайта или в глобальном кэше сборок. Кроме того можно поместить исходный код в папку App_Code веб-узла, где он будет динамически компилироваться во время выполнения. Данный пример кода использует динамической компиляции. Пошаговое руководство по компиляции см. в разделе [Пошаговое руководство: разработка и с помощью элемента управления пользовательского](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ProviderConnectionPointID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ProviderConnectionPointID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/VB/ZipCodeComponent.vb#2)]  
  
 Третья часть примера кода — веб-страница. Обратите внимание, что соединение объявлен в разметке страницы, с помощью `<StaticConnections>` и `<asp:WebPartsConnection>` элементы. Объявление соединения содержит обязательные `ProviderConnectionPointID` атрибута. Второй метод для создания подключения появляется в `Button1_Click` метод, там, где в коде создается новое подключение с использованием точки подключения (и идентификатора) определен в элементе управления поставщика. Затем в `Button2_Click` , код получает доступ к <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> свойство.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPointID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPointID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 После загрузки страницы в браузере, подключение уже существует из-за статического подключения, объявленного на странице. Введите любой текст в элементе управления поставщика и обратите внимание, он отображается в объекте-получателе из-за соединения. Затем отключите элементы управления. С помощью **режим отображения** раскрывающемся списке элемента управления, переключитесь в режим подключения. Щелкните меню команд (представленное стрелку вниз в заголовке окна) на одном из <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов, а затем щелкните команду подключения. Нажмите кнопку **Disconnect** кнопки. Используйте **подключения элементов управления веб-части** кнопку для повторного создания подключения между двумя элементами управления. Нажмите кнопку **сведения ConnectionPoint** кнопку, чтобы запустить код, который обращается к <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> значение свойства. Значение записывается в метке под элементами управления.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID" />
      </Docs>
    </Member>
    <Member MemberName="ProviderID">
      <MemberSignature Language="C#" Value="public string ProviderID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProviderID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" />
      <MemberSignature Language="VB.NET" Value="Public Property ProviderID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ProviderID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ProviderID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает значение свойства для подключения, которое ссылается на идентификатор элемента управления <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" />, выполняющего роль поставщика для этого подключения.</summary>
        <value>Строка, содержащая идентификатор элемента управления поставщика.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> Значение свойства является обязательным при создании соединения между двумя <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов управления. Если значение не присваивается свойству, исключение создается, если <xref:System.Web.UI.WebControls.WebParts.WebPartManager> пытается активировать соединение элемента управления.  
  
   
  
## Examples  
 В следующем примере кода показано использование декларативного и программного <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> свойство.  
  
 Пример состоит из четырех частей.  
  
-   Режим отображения пользовательского элемента управления, позволяющий изменить веб-частей на странице.  
  
-   Исходный код для интерфейса, а два <xref:System.Web.UI.WebControls.WebParts.WebPart> управляет роль поставщика и потребителя, для подключения.  
  
-   Веб-страницы, все элементы управления ведущего приложения и выполнения примера кода.  
  
-   Объяснение, как запустить пример страницы.  
  
 Первая часть данный пример кода является пользовательский элемент управления, позволяющий пользователям изменять режимы отображения на веб-странице. Сохраните следующий исходный код в ASCX-файл, задав для него имя файла, который назначен `Src` атрибут `Register` директив данного пользовательского элемента управления, который находится в верхней размещения веб-страницы. Сведения о режимах отображения и описание исходного кода в этом элементе управления, см. в разделе [Пошаговое руководство: изменение режима отображения страницы](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/VB/DisplayModeMenuVB.ascx#6)]  
  
 Во второй части примера кода приведен исходный код для интерфейса и элементов управления потребителя и поставщика. Для выполнения примера кода необходимо скомпилировать этот исходный код. Можно выполнить явную компиляцию и поместить результирующую сборку в папку Bin веб-сайта или в глобальном кэше сборок. Кроме того можно поместить исходный код в папку App_Code веб-узла, где он будет динамически компилироваться во время выполнения. Данный пример кода использует динамической компиляции. Пошаговое руководство по компиляции см. в разделе [Пошаговое руководство: разработка и с помощью элемента управления пользовательского](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ProviderID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ProviderID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/VB/ZipCodeComponent.vb#2)]  
  
 Третья часть примера кода — веб-страница. Обратите внимание, что соединение объявлен в разметке страницы, с помощью `<StaticConnections>` и `<asp:WebPartsConnection>` элементы. Объявление соединения содержит обязательные `ProviderID` атрибута. Второй метод для создания подключения появляется в `Button1_Click` метод, где создается новое подключение с использованием точки подключения, определенной в элементе управления получателя. Затем в `Button2_Click` метод, код получает значение <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> свойства и отображает его в метке.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 После загрузки страницы в браузере, подключение уже существует из-за статического подключения, объявленного на странице. Введите любой текст в элементе управления поставщика и обратите внимание, он отображается в объекте-получателе из-за соединения. Затем отключите элементы управления. Чтобы сделать это, используйте **режим отображения** раскрывающемся списке элемента управления для переключения страницы в режим подключения. Щелкните меню команд (представленное стрелку вниз в заголовке окна) на одном из <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов, а затем щелкните команду подключения. Нажмите кнопку **Disconnect** кнопки и элементы управления будут отключены. Затем используйте **подключения элементов управления веб-части** кнопку для повторного создания подключения между двумя элементами управления. Нажмите кнопку **сведения потребителя** кнопку, чтобы запустить код, который обращается к <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> значение свойства.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="webPartConnection.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Переопределяет унаследованный метод <see cref="M:System.Object.ToString" /> и возвращает краткое имя типа для объекта подключения.</summary>
        <returns>Строка, которая содержит краткое (неполное) имя типа для объекта <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод используется преимущественно разработчиками элементов управления. Это улучшает отображение объектов подключения в режиме конструктора с помощью короткое имя типа, а не полное имя типа. Тем не менее метод может вызываться в любой точке кода которой вы хотите знать имя типа объекта соединения.  
  
   
  
## Examples  
 В следующем примере кода показано, как вызвать <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString%2A> метод для возврата типа короткое имя <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> объекта.  
  
 В примере кода состоит из трех частей:  
  
-   Исходный код для интерфейса, а два <xref:System.Web.UI.WebControls.WebParts.WebPart> управляет роль поставщика и потребителя, для подключения.  
  
-   Веб-страницы, элементы управления ведущего приложения и выполнения примера кода.  
  
-   Объяснение, как запустить пример страницы.  
  
 Первая часть примера кода приведен исходный код для интерфейса и элементов управления потребителя и поставщика. Для выполнения примера кода необходимо скомпилировать этот исходный код. Можно выполнить явную компиляцию и поместить результирующую сборку в папку Bin веб-сайта или в глобальном кэше сборок. Кроме того можно поместить исходный код в папку App_Code веб-узла, где он будет динамически компилироваться во время выполнения. Данный пример кода использует динамической компиляции. Пошаговое руководство по компиляции см. в разделе [Пошаговое руководство: разработка и с помощью элемента управления пользовательского](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ToString#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ToString#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/VB/ZipCodeComponent.vb#2)]  
  
 Вторая часть примера кода — это веб-страницы. В верхней находится `Register` директивы, который ссылается на исходный код для двух динамически скомпилированных <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов управления. Статические подключения объявлена внутри `<StaticConnections>` элемента на странице. `Button1_Click` Вызовы метода <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString%2A> метод для записи имени типа соединения в метку.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ToString#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/CS/wpConnectToStringCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ToString#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/VB/wpConnectToStringVB.aspx#1)]  
  
 Загрузите страницу в браузере. Статическое подключение уже создано. Введите любой текст в элементе управления поставщика и обратите внимание, что текст отображается в элементе управления получателя. Нажмите кнопку **сведения о подключении** кнопку, чтобы выполнить <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString%2A> метод.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.ToString" />
      </Docs>
    </Member>
    <Member MemberName="Transformer">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPartTransformer Transformer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartTransformer Transformer" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Transformer As WebPartTransformer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPartTransformer ^ Transformer { System::Web::UI::WebControls::WebParts::WebPartTransformer ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Transformer : System.Web.UI.WebControls.WebParts.WebPartTransformer" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartTransformer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает объект <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />, который используется для преобразования данных между двумя несовместимыми точками подключения в подключении веб-частей.</summary>
        <value>Объект <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />. Значение по умолчанию — <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Соединение веб-частей можно двумя способами, в которых можно подключиться подключения элементов управления поставщика и потребителя. Они могут подключаться напрямую, через соответствующие <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> объекты и типом интерфейса, понятную для обоих элементов управления. Или, если они не являются совместимыми, они могут подключаться косвенно, с помощью <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> объект, который преобразует экземпляр интерфейса от поставщика в тип, принимаемый объектом-получателем.  
  
 При необходимости преобразователя как часть подключения, <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer%2A> свойство предоставляет ссылку на <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> объекта. Преобразователь для подключения декларативно в разметке веб-страницы, можно добавить путем добавления тега для пользовательского преобразователя (или одного из преобразователей, предоставленных в наборе элементов управления веб-частей) в `<asp:WebPartConnection>` элемент. Можно также добавить преобразователь программным образом, создание его экземпляр в коде и вызов <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%28System.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ProviderConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ConsumerConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPartTransformer%29> метод <xref:System.Web.UI.WebControls.WebParts.WebPartManager> элемента управления для создания подключения, передавая ей объект преобразователя, а также обязательные параметры.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />
      </Docs>
    </Member>
    <Member MemberName="Transformers">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPartTransformerCollection Transformers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartTransformerCollection Transformers" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Transformers As WebPartTransformerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPartTransformerCollection ^ Transformers { System::Web::UI::WebControls::WebParts::WebPartTransformerCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Transformers : System.Web.UI.WebControls.WebParts.WebPartTransformerCollection" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerDefaultProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartTransformerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает коллекцию <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" /> объектов, используемых внутренне набором элементов управления веб-частей.</summary>
        <value>Коллекция <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformerCollection" />, содержащая объекты <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers%2A> Свойство никогда не предназначен для использования разработчиками. Для доступа к преобразователя, ассоциированные с соединением, разработчикам следует всегда использовать <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer%2A> свойства.  
  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers%2A> Свойство внутренне используется элементом управления веб-частей, равным позволяют разработчикам объявлять элементы класса transformer в `<asp:webpartconnection>` элемент в разметке веб-страницы.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformerCollection" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer" />
      </Docs>
    </Member>
  </Members>
</Type>