<Type Name="CustomValidator" FullName="System.Web.UI.WebControls.CustomValidator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3e970c58e13b65afa1cf2b5c81336c55f0172031" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36383614" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CustomValidator : System.Web.UI.WebControls.BaseValidator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CustomValidator extends System.Web.UI.WebControls.BaseValidator" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.CustomValidator" />
  <TypeSignature Language="VB.NET" Value="Public Class CustomValidator&#xA;Inherits BaseValidator" />
  <TypeSignature Language="C++ CLI" Value="public ref class CustomValidator : System::Web::UI::WebControls::BaseValidator" />
  <TypeSignature Language="F#" Value="type CustomValidator = class&#xA;    inherit BaseValidator" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.BaseValidator</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("ServerValidate")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ToolboxData("&lt;{0}:CustomValidator runat="server" ErrorMessage="CustomValidator"&gt;&lt;/{0}:CustomValidator&gt;")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Выполняет определяемую пользователем проверку элемента управления вводом.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте <xref:System.Web.UI.WebControls.CustomValidator> управления предоставить функцию, определяемую пользователем проверку для элемента управления вводом. <xref:System.Web.UI.WebControls.CustomValidator> — Это отдельный элемент управления из элемента управления вводом проходят проверку, который позволяет управлять местом отображения сообщения проверки.  
  
 Проверяющие элементы управления всегда выполняют проверку на сервере. Они также имеют полную реализацию клиентского, которая позволяет выполнять проверку на стороне клиента сценарии браузеры (таких как Microsoft Internet Explorer 4.0 и более поздних версий). Проверка на стороне клиента оптимизирует обработку проверки путем проверки входных данных пользователя перед отправкой на сервер. Это позволяет ошибки может быть обнаружен на клиентском компьютере до передачи формы, что позволяет избежать цикла обработки сведений, необходимых для проверки на стороне сервера.  
  
 Чтобы создать функцию проверки на стороне сервера, добавьте обработчик для <xref:System.Web.UI.WebControls.CustomValidator.ServerValidate> события, выполняющий проверку. Строки из элемента управления вводом для проверки может быть получен с использованием <xref:System.Web.UI.WebControls.ServerValidateEventArgs.Value%2A> свойство <xref:System.Web.UI.WebControls.ServerValidateEventArgs> объекта, передаваемого в обработчик событий как параметр. Результат проверки сохраняется в <xref:System.Web.UI.WebControls.ServerValidateEventArgs.IsValid%2A> свойство <xref:System.Web.UI.WebControls.ServerValidateEventArgs> объекта.  
  
 Чтобы создать функцию клиентской проверки, необходимо сначала добавьте описанную ранее функцию проверки на стороне сервера. Добавьте функцию скрипта проверки на стороне клиента для страницы ASP.NET (.aspx).  
  
 Если вы используете Visual Basic Scripting Edition (VBScript), она должна быть в форме:  
  
```  
Sub ValidationFunctionName(source, arguments)  
```  
  
 Если вы используете JScript, она должна быть в форме:  
  
```  
function ValidationFunctionName(source, arguments)  
```  
  
 `source` Параметр является ссылкой на \<span > для элемента отображен <xref:System.Web.UI.WebControls.CustomValidator> элемента управления. Это позволяет программно управлять \<span > тег, таких как изменение <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> атрибута. `arguments` Является объектом с двумя свойствами: значение и IsValid. Этот параметр позволяет получить значение элемента управления для проверки и указать, допустимо ли значение в зависимости от вашей пользовательской процедуры проверки.  
  
 Используйте <xref:System.Web.UI.WebControls.CustomValidator.ClientValidationFunction%2A> свойство для указания имени функции скрипта проверки на стороне клиента, связанные с <xref:System.Web.UI.WebControls.CustomValidator> элемента управления. Поскольку функция скрипта выполняется на клиенте, она должна быть написана на языке, поддерживаемым конечным обозревателем, например VBScript или JScript.  
  
> [!NOTE]
>  При использовании <xref:System.Web.UI.WebControls.CustomValidator> управления внутри <xref:System.Web.UI.UpdatePanel> управления, убедитесь, что проверяющий элемент управления и элемент управления, связанного с ним находятся в той же панели. Дополнительные сведения об использовании <xref:System.Web.UI.UpdatePanel> управления для частичного обновления см. в разделе [частичной отрисовке](http://msdn.microsoft.com/library/5c12736d-d9e9-464a-9388-3fe0f9f49e49).  
  
 Как и проверки на стороне сервера, строки из элемента управления вводом для проверки осуществляется с помощью <xref:System.Web.UI.WebControls.ServerValidateEventArgs.Value%2A> свойство `arguments` параметр. Возвращает результат проверки, задав <xref:System.Web.UI.WebControls.ServerValidateEventArgs.IsValid%2A> свойство `arguments` параметр.  
  
> [!CAUTION]
>  При использовании проверяющих элементов управления, всегда следует проверять результаты проверки на стороне сервера до выполнения обработки. После обратной передачи, но перед вызовом методов событий вызывает проверяющих элементов управления страницы и объединяет их результаты в <xref:System.Web.UI.Page.IsValid%2A?displayProperty=nameWithType> свойство. (Можно также вызвать явным образом с помощью проверяющие элементы управления `Validate` метод.) В собственном коде, следует проверить, <xref:System.Web.UI.Page.IsValid%2A?displayProperty=nameWithType> возвращает `true` перед обработкой входных данных. Несмотря на то, что браузерах с поддержкой скриптов могут предотвращать обратную передачу на стороне клиента Если проверка завершается неудачно, следует всегда также проверять <xref:System.Web.UI.Page.IsValid%2A?displayProperty=nameWithType> в серверном коде перед обработкой проверку данных.  
  
 Можно использовать несколько проверяющих элементов управления с элементом управления вводом для проверки различных критериев. Например, можно применить несколько проверяющих элементов управления на <xref:System.Web.UI.WebControls.TextBox> элемент управления, который позволяет пользователю ввести количество элементов, чтобы добавить в корзину. Можно использовать <xref:System.Web.UI.WebControls.CustomValidator> управления убедитесь, что значение меньше суммы в инвентаризации и <xref:System.Web.UI.WebControls.RequiredFieldValidator> управления, чтобы убедиться, что пользователь вводит значения в <xref:System.Web.UI.WebControls.TextBox> элемента управления.  
  
> [!NOTE]
>  Если элемент управления вводом пуст, функции проверки не вызываются, и проверка завершается успешно. Используйте <xref:System.Web.UI.WebControls.RequiredFieldValidator> элемента управления, чтобы требовать от пользователя ввода данных в элемент управления вводом.  
  
 Можно использовать <xref:System.Web.UI.WebControls.CustomValidator> управления без параметра <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> свойство. Это обычно производится при проверке нескольких элементов управления вводом или элементов управления вводом, которые нельзя использовать с элементами управления проверки, такие как <xref:System.Web.UI.WebControls.CheckBox> элемента управления. В этом случае <xref:System.Web.UI.WebControls.ServerValidateEventArgs.Value%2A> свойство `arguments` параметра, передаваемого в обработчик событий для <xref:System.Web.UI.WebControls.CustomValidator.ServerValidate> событий и для клиентской проверки функции всегда содержит пустую строку (»»). Тем не менее эти функции проверки по-прежнему вызываются, где это применимо, для проверки корректности на сервер и клиент. Для получения значений, чтобы проверить, можно программным образом ссылку управления ввода, который требуется проверить, а затем извлечь значение из соответствующего свойства. Например, чтобы проверить <xref:System.Web.UI.WebControls.CheckBox> управления на сервере, не устанавливайте <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> свойство проверяющего элемента управления и используйте следующий код для обработчика <xref:System.Web.UI.WebControls.CustomValidator.ServerValidate> событий.  
  
```vb  
Sub ServerValidation (source As object, args As ServerValidateEventArgs)  
    args.IsValid = (CheckBox1.Checked = True)  
 End Sub  
```  
  
```csharp  
void ServerValidation (object source, ServerValidateEventArgs args)  
 {  
    args.IsValid = (CheckBox1.Checked == true);  
 }  
```  
  
 Дополнительные сведения об элементах управления проверки см. в разделе <xref:System.Web.UI.WebControls.BaseValidator>.  
  
## <a name="accessibility"></a>Специальные возможности  
 Сведения о настройке этого элемента управления, чтобы он создает разметку, которая соответствует стандартам специальных возможностей см. в разделе [специальных возможностей в Visual Studio и ASP.NET](http://msdn.microsoft.com/library/7e3ce9c4-6b7d-4fb1-94b5-72cf2a44fe13) и [элементов управления ASP.NET и специальные возможности](http://msdn.microsoft.com/library/847a37e3-ce20-41da-b0d3-7dfb0fdae9a0).  
  
   
  
## Examples  
 В следующем примере кода демонстрируется создание серверного <xref:System.Web.UI.WebControls.CustomValidator> элемента управления.  
  
> [!IMPORTANT]
>  В этом примере имеется текстовое поле, принимающее вводимые пользователем данные, что является потенциальной угрозой безопасности. По умолчанию данные, вводимые пользователем на веб-страницах ASP.NET, проверяются на наличие скриптов и HTML-элементов. Дополнительные сведения см. в разделе [Общие сведения об использовании сценариев](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[CustomValidatorServerValidate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomValidatorServerValidate/CS/customvalidatorservervalidatecs.aspx#1)]
 [!code-aspx-vb[CustomValidatorServerValidate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomValidatorServerValidate/VB/customvalidatorservervalidatevb.aspx#1)]  
  
 В следующем примере кода показано, как создать на стороне клиента <xref:System.Web.UI.WebControls.CustomValidator> элемента управления.  
  
 [!code-aspx-csharp[CustomValidatorClient#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomValidatorClient/CS/customvalidatorclientcs.aspx#1)]
 [!code-aspx-vb[CustomValidatorClient#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomValidatorClient/VB/customvalidatorclientvb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.BaseValidator" />
    <altmember cref="T:System.Web.UI.WebControls.RequiredFieldValidator" />
    <altmember cref="P:System.Web.UI.WebControls.CustomValidator.ClientValidationFunction" />
    <altmember cref="E:System.Web.UI.WebControls.CustomValidator.ServerValidate" />
    <altmember cref="M:System.Web.UI.WebControls.CustomValidator.OnServerValidate(System.String)" />
    <altmember cref="T:System.Web.UI.WebControls.ServerValidateEventArgs" />
    <altmember cref="P:System.Web.UI.WebControls.ServerValidateEventArgs.Value" />
    <altmember cref="P:System.Web.UI.WebControls.ServerValidateEventArgs.IsValid" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CustomValidator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.CustomValidator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CustomValidator();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.UI.WebControls.CustomValidator" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Web.UI.WebControls.BaseValidator" />
        <altmember cref="T:System.Web.UI.WebControls.RequiredFieldValidator" />
        <altmember cref="P:System.Web.UI.WebControls.CustomValidator.ClientValidationFunction" />
        <altmember cref="E:System.Web.UI.WebControls.CustomValidator.ServerValidate" />
        <altmember cref="M:System.Web.UI.WebControls.CustomValidator.OnServerValidate(System.String)" />
        <altmember cref="T:System.Web.UI.WebControls.ServerValidateEventArgs" />
        <altmember cref="P:System.Web.UI.WebControls.ServerValidateEventArgs.Value" />
        <altmember cref="P:System.Web.UI.WebControls.ServerValidateEventArgs.IsValid" />
      </Docs>
    </Member>
    <Member MemberName="AddAttributesToRender">
      <MemberSignature Language="C#" Value="protected override void AddAttributesToRender (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void AddAttributesToRender(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.CustomValidator.AddAttributesToRender(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub AddAttributesToRender (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void AddAttributesToRender(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="override this.AddAttributesToRender : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="customValidator.AddAttributesToRender writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Объект <see cref="T:System.Web.UI.HtmlTextWriter" />, содержащий поток вывода для отрисовки на стороне клиента.</param>
        <summary>Добавляет свойства элемента управления <see cref="T:System.Web.UI.WebControls.CustomValidator" /> в выходной поток для отрисовки на стороне клиента.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере кода показано, как переопределить <xref:System.Web.UI.WebControls.CustomValidator.AddAttributesToRender%2A> метод в серверного элемента управления, чтобы <xref:System.Web.UI.WebControls.CustomValidator> сообщение об ошибке всегда будет выделен полужирным шрифтом.  
  
> [!IMPORTANT]
>  В этом примере имеется текстовое поле, принимающее вводимые пользователем данные, что является потенциальной угрозой безопасности. По умолчанию данные, вводимые пользователем на веб-страницах ASP.NET, проверяются на наличие скриптов и HTML-элементов. Дополнительные сведения см. в разделе [Общие сведения об использовании сценариев](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[CustomCustomValidatorAddAttributesToRender#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomCustomValidatorAddAttributesToRender/CS/custom_customvalidator_addattributestorendercs.aspx#1)]
 [!code-aspx-vb[CustomCustomValidatorAddAttributesToRender#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomCustomValidatorAddAttributesToRender/VB/custom_customvalidator_addattributestorendervb.aspx#1)]  
[!code-csharp[CustomCustomValidatorAddAttributesToRender#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomCustomValidatorAddAttributesToRender/CS/custom_customvalidator_addattributestorender.cs#2)]
[!code-vb[CustomCustomValidatorAddAttributesToRender#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomCustomValidatorAddAttributesToRender/VB/custom_customvalidator_addattributestorender.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClientValidationFunction">
      <MemberSignature Language="C#" Value="public string ClientValidationFunction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ClientValidationFunction" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.CustomValidator.ClientValidationFunction" />
      <MemberSignature Language="VB.NET" Value="Public Property ClientValidationFunction As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ClientValidationFunction { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ClientValidationFunction : string with get, set" Usage="System.Web.UI.WebControls.CustomValidator.ClientValidationFunction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает имя пользовательской функции скрипта на стороне клиента, используемой для проверки.</summary>
        <value>Имя пользовательской функции скрипта на стороне клиента, используемой для проверки. Значение по умолчанию равно <see cref="F:System.String.Empty" /> и показывает, что значение свойства не задано.  
  
 <block subset="none" type="note"><para> Имя функции не должно включать скобки или параметры.  </para></block></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этому свойству присвоено имя функции, выполняющей клиентскую проверку.  
  
 Поскольку функция проверки клиента выполняется в конечном обозревателе, функция должна быть написана с помощью сценариев языка, поддерживаемого браузера, таких как JScript или VBScript.  
  
 Значение для данного свойства нельзя задать с помощью тем или тем таблиц стилей. Дополнительные сведения см. в разделе <xref:System.Web.UI.ThemeableAttribute> и [ASP.NET тем и обложек](http://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
   
  
## Examples  
 В следующем примере кода демонстрируется использование <xref:System.Web.UI.WebControls.CustomValidator.ClientValidationFunction%2A> свойство для указания имени функции, выполняющей проверку на стороне клиента. Функция проверки ищет четные числа. Описание параметров функции см. в разделе «Примечания» <xref:System.Web.UI.WebControls.CustomValidator>.  
  
> [!IMPORTANT]
>  В этом примере имеется текстовое поле, принимающее вводимые пользователем данные, что является потенциальной угрозой безопасности. По умолчанию данные, вводимые пользователем на веб-страницах ASP.NET, проверяются на наличие скриптов и HTML-элементов. Дополнительные сведения см. в разделе [Общие сведения об использовании сценариев](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[CustomValidatorClient#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomValidatorClient/CS/customvalidatorclientcs.aspx#1)]
 [!code-aspx-vb[CustomValidatorClient#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomValidatorClient/VB/customvalidatorclientvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.String.Empty" />
      </Docs>
    </Member>
    <Member MemberName="ControlPropertiesValid">
      <MemberSignature Language="C#" Value="protected override bool ControlPropertiesValid ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool ControlPropertiesValid() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.CustomValidator.ControlPropertiesValid" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ControlPropertiesValid () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool ControlPropertiesValid();" />
      <MemberSignature Language="F#" Value="override this.ControlPropertiesValid : unit -&gt; bool" Usage="customValidator.ControlPropertiesValid " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Проверяет свойства элемента управления на допустимость значений.</summary>
        <returns>Значение <see langword="true" />, если свойства элемента управления являются допустимыми. В противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере кода показано, как переопределить <xref:System.Web.UI.WebControls.CustomValidator.ControlPropertiesValid%2A> метод в пользовательский сервер управления, чтобы он всегда возвращал значение свойства visible, при условии, что <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> свойство <xref:System.Web.UI.WebControls.CustomValidator> элемент управления находится на странице и содержит свойства проверки.  
  
 [!code-aspx-csharp[CustomCustomValidatorControlPropertiesValid#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomCustomValidatorControlPropertiesValid/CS/custom_customvalidator_controlpropertiesvalidcs.aspx#1)]
 [!code-aspx-vb[CustomCustomValidatorControlPropertiesValid#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomCustomValidatorControlPropertiesValid/VB/custom_customvalidator_controlpropertiesvalidvb.aspx#1)]  
[!code-csharp[CustomCustomValidatorControlPropertiesValid#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomCustomValidatorControlPropertiesValid/CS/custom_customvalidator_controlpropertiesvalid.cs#2)]
[!code-vb[CustomCustomValidatorControlPropertiesValid#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomCustomValidatorControlPropertiesValid/VB/custom_customvalidator_controlpropertiesvalid.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EvaluateIsValid">
      <MemberSignature Language="C#" Value="protected override bool EvaluateIsValid ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool EvaluateIsValid() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.CustomValidator.EvaluateIsValid" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function EvaluateIsValid () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool EvaluateIsValid();" />
      <MemberSignature Language="F#" Value="override this.EvaluateIsValid : unit -&gt; bool" Usage="customValidator.EvaluateIsValid " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Переопределяет метод <see cref="M:System.Web.UI.MobileControls.BaseValidator.EvaluateIsValid" />.</summary>
        <returns>
          <see langword="true" />, если значение во входном элементе управления является допустимым; в противном случае — <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере кода показано, как переопределить <xref:System.Web.UI.WebControls.CustomValidator.EvaluateIsValid%2A> метода в элемент управления сервера.  
  
> [!IMPORTANT]
>  В этом примере имеется текстовое поле, принимающее вводимые пользователем данные, что является потенциальной угрозой безопасности. По умолчанию данные, вводимые пользователем на веб-страницах ASP.NET, проверяются на наличие скриптов и HTML-элементов. Дополнительные сведения см. в разделе [Общие сведения об использовании сценариев](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[CustomCustomValidatorEvaluateIsValid#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomCustomValidatorEvaluateIsValid/CS/custom_customvalidator_evaluateisvalidcs.aspx#1)]
 [!code-aspx-vb[CustomCustomValidatorEvaluateIsValid#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomCustomValidatorEvaluateIsValid/VB/custom_customvalidator_evaluateisvalidvb.aspx#1)]  
[!code-csharp[CustomCustomValidatorEvaluateIsValid#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomCustomValidatorEvaluateIsValid/CS/custom_customvalidator_evaluateisvalid.cs#2)]
[!code-vb[CustomCustomValidatorEvaluateIsValid#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomCustomValidatorEvaluateIsValid/VB/custom_customvalidator_evaluateisvalid.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnServerValidate">
      <MemberSignature Language="C#" Value="protected virtual bool OnServerValidate (string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnServerValidate(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.CustomValidator.OnServerValidate(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnServerValidate (value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnServerValidate(System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnServerValidate : string -&gt; bool&#xA;override this.OnServerValidate : string -&gt; bool" Usage="customValidator.OnServerValidate value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">Значение для проверки.</param>
        <summary>Создает событие <see cref="E:System.Web.UI.WebControls.CustomValidator.ServerValidate" /> элемента управления <see cref="T:System.Web.UI.WebControls.CustomValidator" />.</summary>
        <returns>
          <see langword="true" />, если значение, указанное в параметре <paramref name="value" />, проходит проверку; в противном случае — <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.CustomValidator.ServerValidate> Событие возникает при выполнении проверки на сервере.  
  
 При возникновении события через делегат вызывается обработчик события. Дополнительные сведения см. в разделе [обработка и вызов событий](~/docs/standard/events/index.md).  
  
 Метод <xref:System.Web.UI.WebControls.CustomValidator.OnServerValidate%2A> также позволяет производным классам обрабатывать событие, не присоединяя делегат. Это предпочтительная методика обработки событий в производном классе.  
  
   
  
## Examples  
 В следующем примере кода показано, как задать и запрограммировать обработчик для серверного <xref:System.Web.UI.WebControls.CustomValidator> элемента управления.  
  
> [!IMPORTANT]
>  В этом примере имеется текстовое поле, принимающее вводимые пользователем данные, что является потенциальной угрозой безопасности. По умолчанию данные, вводимые пользователем на веб-страницах ASP.NET, проверяются на наличие скриптов и HTML-элементов. Дополнительные сведения см. в разделе [Общие сведения об использовании сценариев](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[CustomValidatorServerValidate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomValidatorServerValidate/CS/customvalidatorservervalidatecs.aspx#1)]
 [!code-aspx-vb[CustomValidatorServerValidate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomValidatorServerValidate/VB/customvalidatorservervalidatevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>При переопределении метода <see cref="M:System.Web.UI.WebControls.CustomValidator.OnServerValidate(System.String)" /> в производном классе нужно убедиться, что вызов базового класса <see cref="M:System.Web.UI.WebControls.CustomValidator.OnServerValidate(System.String)" /> метод, чтобы зарегистрированные делегаты получили событие.</para>
        </block>
        <altmember cref="E:System.Web.UI.WebControls.CustomValidator.ServerValidate" />
      </Docs>
    </Member>
    <Member MemberName="ServerValidate">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ServerValidateEventHandler ServerValidate;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ServerValidateEventHandler ServerValidate" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.CustomValidator.ServerValidate" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ServerValidate As ServerValidateEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ServerValidateEventHandler ^ ServerValidate;" />
      <MemberSignature Language="F#" Value="member this.ServerValidate : System.Web.UI.WebControls.ServerValidateEventHandler " Usage="member this.ServerValidate : System.Web.UI.WebControls.ServerValidateEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ServerValidateEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при выполнении проверки на сервере.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.CustomValidator.ServerValidate> Событие возникает при выполнении проверки на сервере. Это событие используется для предоставления пользовательской процедуры проверки для элемента управления вводом, таких как <xref:System.Web.UI.WebControls.TextBox> элемента управления.  
  
 Дополнительные сведения об обработке событий см. в разделе [обработка и вызов событий](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 В следующем примере кода показано, как задать и запрограммировать обработчик для серверного <xref:System.Web.UI.WebControls.CustomValidator> элемента управления. Она создает пользовательской процедуры проверки, проверяет значение <xref:System.Web.UI.WebControls.TextBox> элемента управления четное и отображает результат проверки.  
  
> [!IMPORTANT]
>  В этом примере имеется текстовое поле, принимающее вводимые пользователем данные, что является потенциальной угрозой безопасности. По умолчанию данные, вводимые пользователем на веб-страницах ASP.NET, проверяются на наличие скриптов и HTML-элементов. Дополнительные сведения см. в разделе [Общие сведения об использовании сценариев](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[CustomValidatorServerValidate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomValidatorServerValidate/CS/customvalidatorservervalidatecs.aspx#1)]
 [!code-aspx-vb[CustomValidatorServerValidate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomValidatorServerValidate/VB/customvalidatorservervalidatevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.CustomValidator.OnServerValidate(System.String)" />
        <altmember cref="T:System.Web.UI.WebControls.ServerValidateEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="ValidateEmptyText">
      <MemberSignature Language="C#" Value="public bool ValidateEmptyText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ValidateEmptyText" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.CustomValidator.ValidateEmptyText" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidateEmptyText As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ValidateEmptyText { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ValidateEmptyText : bool with get, set" Usage="System.Web.UI.WebControls.CustomValidator.ValidateEmptyText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает значение Boolean, указывающее, следует ли проверять пустой текст.</summary>
        <value>
          <see langword="true" />, если пустой текст следует проверять; в противном случае — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Каждый проверяющий элемент управления может быть связан с целевым элементом управления. В предыдущих версиях платформы .NET Framework, если целевой элемент управления имеет значение пустой строки, таких как <xref:System.Web.UI.WebControls.TextBox.Text%2A> со значением свойства <xref:System.String.Empty?displayProperty=nameWithType>, проверяющего элемента управления (за исключением <xref:System.Web.UI.WebControls.RequiredFieldValidator> проверяющего элемента управления) не будет возвращаться целевой элемент управления и просто вернет прохождение проверки.  
  
 <xref:System.Web.UI.WebControls.CustomValidator.ValidateEmptyText%2A> Свойство не использовалось для платформы .NET Framework версии 2.0.  Если <xref:System.Web.UI.WebControls.CustomValidator.ValidateEmptyText%2A> равно `true`, проверяющий элемент управления вычисляется значение элемента управления (с помощью критериев, заданных для <xref:System.Web.UI.WebControls.CustomValidator> управления) и возвращает результаты проверки. Это свойство позволяет разработчикам оценивать результаты <xref:System.Web.UI.WebControls.CustomValidator> управления независимо от значения целевого элемента управления.  
  
 Значение для данного свойства нельзя задать с помощью тем или тем таблиц стилей. Дополнительные сведения см. в разделе <xref:System.Web.UI.ThemeableAttribute> и [ASP.NET тем и обложек](http://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.BaseValidator" />
        <altmember cref="T:System.Web.UI.WebControls.RequiredFieldValidator" />
      </Docs>
    </Member>
  </Members>
</Type>