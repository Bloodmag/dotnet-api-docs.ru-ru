<Type Name="LinqDataSource" FullName="System.Web.UI.WebControls.LinqDataSource">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="eb47995a42e8b5a63458997b016e35704034a00a" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30600618" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class LinqDataSource : System.Web.UI.WebControls.ContextDataSource, System.Web.DynamicData.IDynamicDataSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LinqDataSource extends System.Web.UI.WebControls.ContextDataSource implements class System.Web.DynamicData.IDynamicDataSource, class System.Web.UI.IDataSource" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.LinqDataSource" />
  <TypeSignature Language="VB.NET" Value="Public Class LinqDataSource&#xA;Inherits ContextDataSource&#xA;Implements IDynamicDataSource" />
  <TypeSignature Language="C++ CLI" Value="public ref class LinqDataSource : System::Web::UI::WebControls::ContextDataSource, System::Web::DynamicData::IDynamicDataSource" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.ContextDataSource</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.DynamicData.IDynamicDataSource</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Selecting")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("ContextTypeName")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.LinqDataSourceDesigner, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.LinqDataSource), "LinqDataSource.bmp")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.PersistChildren(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Позволяет использовать LINQ на веб-странице ASP.NET в тексте разметки для извлечения и изменения данных из объекта данных.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В этом разделе.  
  
-   [Введение](#introduction)  
  
-   [Порядок операций](#order_of_operations)  
  
-   [Упорядочение данных](#ordering_data)  
  
-   [Группировка данных](#grouping_data)  
  
-   [Изменения данных](#data_modifications)  
  
-   [Вычисление значений во время выполнения](#evaluating_value_at_run_time)  
  
-   [Работа с хранимыми процедурами](#working_with_stored_procedures)  
  
-   [Декларативный синтаксис](#declarative_syntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>Вступление  
 Встроенные в язык запросы (LINQ) — это синтаксис запросов, который определяет набор операторов запроса, поддерживающие операции обхода, фильтрации и проекции, выражаемые декларативным способом в любой. На основе NET языка программирования. Объект данных может быть сбора данных в памяти или объект, представляющий данные из базы данных. Можно извлекать или изменять данные без необходимости написания команд SQL для каждой операции.  
  
 <xref:System.Web.UI.WebControls.LinqDataSource> Позволяет использовать LINQ в веб-страницу ASP.NET путем задания свойств в тексте разметки. <xref:System.Web.UI.WebControls.LinqDataSource> Использует LINQ to SQL для автоматического создания команд данных. Дополнительные сведения о технологии LINQ to SQL см. в разделе [LINQ to SQL](http://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655).  
  
 При получении данных из коллекции данных в памяти, следует установить <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> свойства класса, содержащего коллекцию данных. Задать <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> свойство или поле, которое возвращает коллекцию данных свойства. Например, возможно, класс с именем `Person` , содержащий свойство с именем `FavoriteCities` , возвращающее массив строковых значений. В этом случае можно задать <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> свойства `Person` и задайте <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> свойства `FavoriteCities`.  
  
 При отправке запроса базы данных, необходимо сначала создать классы сущностей, представляющие базу данных и ее таблицы. Можно использовать [!INCLUDE[vs_ordesigner_long](~/includes/vs-ordesigner-long-md.md)] или программа SqlMetal.exe для создания этих классов. Затем установите <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> свойства в класс, представляющий базу данных и задать <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> свойство, который представляет таблицу базы данных.  
  
<a name="order_of_operations"></a>   
## <a name="order-of-operations"></a>Порядок операций  
 <xref:System.Web.UI.WebControls.LinqDataSource> Управления применяет операций с данными в следующем порядке:  
  
1.  Где (указать, какие записи данных для возврата).  
  
2.  Order By (сортировки).  
  
3.  Group By (Группировать записи данных с общими значениями).  
  
4.  Упорядочить группы (сортировать сгруппированные данные).  
  
5.  SELECT (указать, какие поля или свойства для возврата).  
  
6.  Auto-sort (Сортировка записей данных с помощью свойства выбранный пользователем).  
  
7.  Auto страница (извлекает набор записей данных, выбранных пользователем).  
  
 Можно добавить условия для <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> свойство включения фильтра записи данных, возвращаемых из запроса. Если <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> свойство не задано, <xref:System.Web.UI.WebControls.LinqDataSource> элемент управления получает все записи из объекта данных.  
  
<a name="ordering_data"></a>   
## <a name="ordering-data"></a>Упорядочение данных  
 Вы используете <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> свойство, чтобы указать имена свойств из возвращенных данных, по которому выполняется сортировка.  
  
> [!NOTE]
>  При использовании <xref:System.Web.UI.WebControls.LinqDataSource> управления [!INCLUDE[ss2k](~/includes/ss2k-md.md)] или [!INCLUDE[ssEW](~/includes/ssew-md.md)] и <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> свойству `true`, необходимо ввести значение в <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> свойство. По умолчанию <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> свойство `true`. Если присвоить значение <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> свойства, необходимо также включить все столбцы идентификаторов в списке свойств, который возвращается в запросе.  
  
<a name="grouping_data"></a>   
## <a name="grouping-data"></a>Группировка данных  
 Вы используете <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> свойство, чтобы указать свойства, используемые для консолидации записи данных, которые имеют одинаковые значения. При группировании данных может включать `Key` и `It`, который динамически создаются свойства, в <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> свойство. `Key` Свойство ссылается на значения в свойство или свойства, которые были использованы для группирования данных. Например, если группировать по свойству с именем `Category`, `Key` свойство будет содержать все уникальные значения в `Category` свойство. `It` Свойство ссылается на набор отдельных записей в группировании данных. Можно выполнять итерацию по `It` свойство для извлечения отдельных записей, которые были объединены в операции группировки. Например, если группировать по свойству с именем `Category`, `It` свойство содержит все отдельные записи, которые имеют общее значение в `Category` свойство.  
  
 Вы используете <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> свойство, чтобы указать свойства, которые будут использоваться для сортировки сгруппированных данных. При группировании данных, <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> свойство устанавливает способ сортировки отдельных записей в сгруппированных данных.  
  
 По умолчанию <xref:System.Web.UI.WebControls.LinqDataSource> управления извлекает значения для всех свойств из объекта данных. Вы используете <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> свойство для указания свойств, для возврата, если вы хотите работать с подмножеством доступных свойств. Операции Select применяется после Where, Order By и Group By операций. Таким образом при создании псевдонимов в предложении Select, псевдоним недоступен в других предложениях.  
  
<a name="data_modifications"></a>   
## <a name="data-modifications"></a>Модификации данных  
 Можно указать, разрешено ли изменение данных с помощью <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A>, <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A>, и <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> свойства. Пользовательский интерфейс для изменения данных из <xref:System.Web.UI.WebControls.LinqDataSource> управления обычно предоставляется в элементе управления с привязкой к данным, таких как <xref:System.Web.UI.WebControls.DetailsView> элемента управления. В дополнение к параметру <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A>, <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A>, или <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> для `true`, необходимые для включения автоматического изменения данных следующих условий:  
  
-   <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> Свойство не может быть присвоено значение.  
  
-   <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> Свойство не может быть присвоено значение.  
  
-   Класс, назначаемый <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> свойства должен быть производным от <xref:System.Data.Linq.DataContext>.  
  
-   Свойство, которое назначается <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> свойства должен быть производным от <xref:System.Data.Linq.Table%601>.  
  
 Вы можете ограничить свойства, отображаемые в элементе управления с привязкой к данным, двумя способами. Можно либо установить <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> свойство подмножество свойств, или можно определить поля для элемента управления с привязкой к данным, добавив <xref:System.Web.UI.WebControls.DataControlField> элементов управления. Тем не менее если задать <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> свойства, значит включено автоматическое обновление, вставка и операции удаления. Если вы хотите включить автоматического изменения данных во время работы с подмножеством доступных свойств, не устанавливайте <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> свойство. Вместо этого извлечь все свойства из объекта данных и управление ими, какие из них отображаются с помощью элемента управления с привязкой к данным. При использовании <xref:System.Web.UI.WebControls.DetailsView> управления или <xref:System.Web.UI.WebControls.GridView> управления, необходимо также задать <xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A> или <xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A> свойства `false`. Это предотвращает автоматического включения кнопки для редактирования и удаления данных элемента управления с привязкой к данным. Все значения, которые не отображаются в элементе управления с привязкой к данным, хранятся в состоянии представления. Они передаются без изменений в источник данных при операции обновления данных.  
  
<a name="evaluating_value_at_run_time"></a>   
## <a name="evaluating-values-at-run-time"></a>Вычисление значений во время выполнения  
 При наличии для оценки значений во время выполнения для сортировки, фильтрации или группировки значений, можно добавить параметры для <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>, <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A>, <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A>, или <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> коллекций.  
  
 Если вы хотите указать значения по умолчанию, можно добавить параметры для <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> коллекции.  
  
 Если вы хотите проверить или изменить значения перед выполнением операции с данными, можно обработать <xref:System.Web.UI.WebControls.LinqDataSource.Deleting>, <xref:System.Web.UI.WebControls.LinqDataSource.Inserting>, <xref:System.Web.UI.WebControls.LinqDataSource.Selecting>, или <xref:System.Web.UI.WebControls.LinqDataSource.Updating> события. Также можно обрабатывать эти события для отмены операции над данными или для проверки ошибок, возникших при задании свойств в классе данных, на основе ввода пользователя.  
  
 Чтобы проверить значения после завершения операции с данными, необходимо обработать событие <xref:System.Web.UI.WebControls.LinqDataSource.Deleted>, <xref:System.Web.UI.WebControls.LinqDataSource.Inserted>, <xref:System.Web.UI.WebControls.LinqDataSource.Selected>, или <xref:System.Web.UI.WebControls.LinqDataSource.Updated> события.  
  
<a name="working_with_stored_procedures"></a>   
## <a name="working-with-stored-procedures"></a>Работа с хранимыми процедурами  
 Вы используете <xref:System.Web.UI.WebControls.LinqDataSource> управления для получения данных из хранимой процедуры, создав обработчик событий для <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> события. В случае обработчик, необходимо вызвать метод в класс контекста данных, который представляет хранимую процедуру и присвоить результат <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> свойство <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs> объекта. Если вы хотите включить автоматическое обновление, вставка и операций удаления для данных, тип, возвращенный методом должен соответствовать типу, который указан в <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> свойство. Дополнительные сведения о создании методов контекста данных см. в разделе [как: DataContext создания методов, сопоставленных с хранимыми процедурами и функциями (O/R-конструктор)](http://msdn.microsoft.com/library/e7ca32f1-50b3-48af-ad92-ceafd749296a).  
  
<a name="declarative_syntax"></a>   
## <a name="declarative-syntax"></a>Декларативный синтаксис  
  
```  
<asp:LinqDataSource  
    AutoGenerateOrderByClause="True|False"  
    AutoGenerateWhereClause="True|False"  
    AutoPage="True|False"  
    AutoSort="True|False"  
    ContextTypeName="string"  
    EnableDelete="True|False"  
    EnableInsert="True|False"  
    EnableTheming="True|False"  
    EnableUpdate="True|False"  
    EnableViewState="True|False"  
    GroupBy="string"  
    ID="string"  
    OnContextCreated="ContextCreated event handler"  
    OnContextCreating="ContextCreating event handler"  
    OnContextDisposing="ContextDisposing event handler"  
    OnDataBinding="DataBinding event handler"  
    OnDeleted="Deleted event handler"  
    OnDeleting="Deleting event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnInserted="Inserted event handler"  
    OnInserting="Inserting event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnSelected="Selected event handler"  
    OnSelecting="Selecting event handler"  
    OnUnload="Unload event handler"  
    OnUpdated="Updated event handler"  
    OnUpdating="Updating event handler"  
    OrderBy="string"  
    runat="server"  
    Select="string"  
    SkinID="string"  
    StoreOriginalValuesInViewState="True|False"  
    TableName="string"  
    Visible="True|False"  
    Where="string"  
>  
        <GroupByParameters />  
        <InsertParameters />  
        <OrderByParameters />  
        <SelectParameters />  
        <WhereParameters />  
</asp:LinqDataSource>  
```  
  
   
  
## Examples  
 В следующем примере показан <xref:System.Web.UI.WebControls.LinqDataSource> управления, который извлекает данные из класса сущностей с именем `Products`. Класс сущностей может быть создан с помощью [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)] или программа SqlMetal.exe. <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> Свойство имеет значение только те записи, которые содержат значение в `Price` свойство больше 50. Объект <xref:System.Web.UI.WebControls.GridView> элемент управления привязан к <xref:System.Web.UI.WebControls.LinqDataSource> элемента управления для отображения данных.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default5.aspx#5)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default5.aspx#5)]  
  
 В следующем примере показан <xref:System.Web.UI.WebControls.LinqDataSource> элемент управления, позволяющий пользователям выполнять обновления, удаления и вставки записей в источнике данных. Объект <xref:System.Web.UI.WebControls.DetailsView> элемент управления привязан к <xref:System.Web.UI.WebControls.LinqDataSource> управления и позволяет пользователям для просмотра и изменения данных. Обратите внимание, что команды SQL не являются обязательными для выбора, обновления, удаления или вставки записей.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default2.aspx#2)]  
  
 В примере показан обработчик событий для <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> событие, которое задает объект данных на основе значения в веб-странице.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/cs/Default3.aspx.cs#3)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/vb/Default3.aspx.vb#3)]  
  
 В следующем примере показан <xref:System.Web.UI.WebControls.LinqDataSource> управления, являющийся настроенный для группирования данных по двум столбцам. `Key` Свойство ссылается на объект, который имеет два свойства `ProductCategory` и `Color`. Объект, представленный `It` переименованный (псевдоним) является `Products`. Переименованные `Products` объект содержит коллекцию отдельных записей в группировании. Каждый экземпляр будет содержать все столбцы из `Products` таблицы.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/vb/Default.aspx#1)]  
  
 В следующем примере показаны два <xref:System.Web.UI.WebControls.ListView> элементов управления, которые отображают данные из <xref:System.Web.UI.WebControls.LinqDataSource> элемента управления в предыдущем примере. Один <xref:System.Web.UI.WebControls.ListView> элемент управления отображает сгруппированные данные, а другая — <xref:System.Web.UI.WebControls.ListView> элемент управления отображает отдельные названия продуктов, которые входят в эту группу. Вложенного элемента управления с привязкой к данным <xref:System.Web.UI.WebControls.BaseDataList.DataSource%2A> свойству `Products`, который является псевдонимом для `It` объекта.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/cs/Default.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/vb/Default.aspx#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSource();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.UI.WebControls.LinqDataSource" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoGenerateOrderByClause">
      <MemberSignature Language="C#" Value="public bool AutoGenerateOrderByClause { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoGenerateOrderByClause" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoGenerateOrderByClause As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoGenerateOrderByClause { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, которое указывает, создает ли элемент управления <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> динамически предложение ORDER BY на основе значений в коллекции <see cref="P:System.Web.UI.WebControls.LinqDataSource.OrderByParameters" />.</summary>
        <value>
          <see langword="true" /> Если <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> управления создает предложение Order By; в противном случае <see langword="false" />. Значение по умолчанию: <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При задании <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> свойства `true`, <xref:System.Web.UI.WebControls.LinqDataSource> элемент управления динамически создает предложение Order By, основанный на значениях в <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> коллекции. <xref:System.Web.UI.WebControls.LinqDataSource> Управления сортирует данные по первым параметром и дополнительно сортирует данные для каждого дополнительного параметра. Параметры, содержащие `null` или пустое значение не включаются в предложение Order By.  
  
 Не устанавливайте <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> свойство при <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> равно `true`, так как он динамически создает предложение Order By. <xref:System.Web.UI.WebControls.LinqDataSource> Управления вызывает исключение, если <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> равно `true` и <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> присваивается значения.  
  
   
  
## Examples  
 В следующем примере показан <xref:System.Web.UI.WebControls.LinqDataSource> управления <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> значение `true`. Параметр включается в <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> коллекции, которая упорядочивает данные на основе свойства имя, которое пользователь выбирает из <xref:System.Web.UI.WebControls.DropDownList> элемента управления.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default8.aspx#8)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default8.aspx#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoGenerateWhereClause">
      <MemberSignature Language="C#" Value="public bool AutoGenerateWhereClause { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoGenerateWhereClause" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoGenerateWhereClause As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoGenerateWhereClause { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.AutoGenerateWhereClause</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, определяющее, создает ли динамически элемент управления <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> оператор Where, основываясь на значениях, определенных в коллекции <see cref="P:System.Web.UI.WebControls.LinqDataSource.WhereParameters" />.</summary>
        <value>
          <see langword="true" />, если элемент управления <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> создает оператор Where; в противном случае — <see langword="false" />. Значение по умолчанию: <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При задании <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> свойства `true`, <xref:System.Web.UI.WebControls.LinqDataSource> элемент управления динамически создает предложение Where предложения на основе параметров в <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> коллекции. Каждый параметр, добавляемый <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> коллекции должен быть его <xref:System.Web.UI.WebControls.Parameter.Name%2A> свойству присвоено значение, соответствующее свойство в объекте данных, в которой выполняется запрос. Автоматически созданный где предложение будет проверять, является ли значение, указанное в <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> коллекции равен значению соответствующего свойства в объекте данных. Если указать более одного параметра, параметры, связанных с логического `AND` операции. Параметры, содержащие `null` или пустое значение не включаются в предложении Where предложения.  
  
 Автоматически созданный <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> предложения можно проверить только на равенство и может привязать параметры только с `AND` операции. Не устанавливайте <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> свойства `true` Если необходимо добавить условие, которое не проверки на равенство или если необходимо связать параметры с `OR` операции. Эти задачи можно выполнить, задав <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> свойства `false` и добавление меток-заполнителей в <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> для каждого параметра в <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> коллекции. В <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> свойство, каждому приставку замещающий символ @.  
  
 Не устанавливайте <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> свойство при <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> свойство `true`, так как он динамически создает предложение Where предложения. <xref:System.Web.UI.WebControls.LinqDataSource> Управления вызывает исключение, если <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> свойство `true` и <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> присваивается значения.  
  
   
  
## Examples  
 В следующем примере показан <xref:System.Web.UI.WebControls.LinqDataSource> управления <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> значение `true`. Объект <xref:System.Web.UI.WebControls.GridView> элемент управления привязан к <xref:System.Web.UI.WebControls.LinqDataSource> элемента управления для отображения данных, возвращенных запросом. Объект <xref:System.Web.UI.WebControls.DropDownList> управления включено, заполненный три значения. Параметр включается в <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> коллекции с именем `Category,` которого совпадает с одним из свойств объекта данных. Его <xref:System.Web.UI.WebControls.ControlParameter.ControlID%2A> присваивается идентификатор <xref:System.Web.UI.WebControls.DropDownList> элемента управления. <xref:System.Web.UI.WebControls.LinqDataSource> Управления автоматически создает <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> свойства для фильтрации записей на основе значения, выбранного пользователем из <xref:System.Web.UI.WebControls.DropDownList> элемента управления. Запрос возвращает записи которого `Category` свойства совпадает со значением, выбранное пользователем <xref:System.Web.UI.WebControls.DropDownList> элемента управления.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#7](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default7.aspx#7)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default7.aspx#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoPage">
      <MemberSignature Language="C#" Value="public bool AutoPage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoPage" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.AutoPage" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoPage As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoPage { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает и задает значение, указывающее, поддерживает ли элемент управления <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> переход между разделами данных во время выполнения.</summary>
        <value>
          Возвращает значение <see langword="true" />, если пользователь может просматривать данные. В противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Задать <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> свойства `true` включить разбиение на страницы в <xref:System.Web.UI.WebControls.LinqDataSource> элемента управления. Чтобы включить пользователя на страницу данных, подключение элемента управления с привязкой к данным, предоставляющий интерфейс для разбиения на страницы для <xref:System.Web.UI.WebControls.LinqDataSource> элемента управления. Когда <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> свойству `true`, <xref:System.Web.UI.WebControls.LinqDataSource> управления извлекает только достаточное количество записей для одной страницы в элементе управления с привязкой к данным. Она использует <xref:System.Linq.Enumerable.Skip%2A> и <xref:System.Linq.Enumerable.Take%2A> методы для получения записи для текущей страницы.  
  
   
  
## Examples  
 В следующем примере показан <xref:System.Web.UI.WebControls.LinqDataSource> было управлять с помощью <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> свойство `true` и <xref:System.Web.UI.WebControls.GridView> управления, к которому привязан <xref:System.Web.UI.WebControls.LinqDataSource> управления. <xref:System.Web.UI.WebControls.GridView.AllowPaging%2A> Свойство <xref:System.Web.UI.WebControls.GridView> задано для элемента управления `true` для предоставления интерфейса, который позволяет пользователям пролистывать данные.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoSort">
      <MemberSignature Language="C#" Value="public bool AutoSort { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoSort" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.AutoSort" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoSort As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoSort { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает значение, указывающее на то, поддерживает ли элемент управления <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> сортировку данных во время выполнения.</summary>
        <value>
          Значение <see langword="true" />, если пользователь может сортировать данные. В противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.LinqDataSource> Элемент управления поддерживает два подхода для сортировки данных. Можно использовать <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> можно задать свойства для включения сортировки во время выполнения, или вы <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> свойство, чтобы определить сортировки во время разработки.  
  
 Задать <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> свойства `true` Чтобы включить сортировку в <xref:System.Web.UI.WebControls.LinqDataSource> управления, основанный на выражение сортировки из элемента управления с привязкой к данным. Элемент управления с привязкой к данным предоставляет интерфейс, позволяющий пользователю выбрать во время выполнения, какое свойство использовать для сортировки.  
  
 Можно программно задать порядок, в котором данные возвращаются, задав <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> свойства для свойства или свойств, используемых для сортировки. При <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> задано значение свойства и <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> свойство `true`, выражение сортировки из элемента управления с привязкой к данным применяется после выражений в <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> свойство. Таким образом определяется конечный способ сортировки данных.  
  
   
  
## Examples  
 В следующем примере показан <xref:System.Web.UI.WebControls.LinqDataSource> было управлять с помощью <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> свойство `true` и <xref:System.Web.UI.WebControls.GridView> управления, к которому привязан <xref:System.Web.UI.WebControls.LinqDataSource> управления. <xref:System.Web.UI.WebControls.GridView.AllowSorting%2A> Свойство <xref:System.Web.UI.WebControls.GridView> задано для элемента управления `true` для предоставления интерфейса, который позволяет пользователям сортировать данные.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextCreated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; ContextCreated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; ContextCreated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.ContextCreated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextCreated As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ ContextCreated;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит после создания экземпляра объекта типа контекста.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обрабатывать <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreated> событий для проверки объекта тип контекста или изучите исключения, возникающие во время создания объекта. Получить объект типа из контекста <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> свойство <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> объекта, связанного с этим событием. Получить исключение, возникшее во время операции с данными из <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> свойство.  
  
 Тип объекта контекста создается во время select, update, insert и операции удаления и используется во время запроса.  
  
 Имеется один раз, когда событие не происходит. Это когда программно задать <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> свойства объекта во время <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> событий. Дополнительное условие является то, что исходные значения не должны храниться в состоянии представления, либо этого объекта в <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> реализует свойство <xref:System.Data.Linq.ITable> интерфейса.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextCreating">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt; ContextCreating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt; ContextCreating" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.ContextCreating" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextCreating As EventHandler(Of LinqDataSourceContextEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceContextEventArgs ^&gt; ^ ContextCreating;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит перед созданием экземпляра объекта типа контекста.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 По умолчанию <xref:System.Web.UI.WebControls.LinqDataSource> управления создает экземпляр типа, указанного в <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> свойство. <xref:System.Web.UI.WebControls.LinqDataSource> Элемент управления вызывает конструктор по умолчанию для объекта контекста данных для создания экземпляра объекта. Возможно, необходимо с помощью конструктора не по умолчанию, или необходимо создать объект, который отличается от указанного в <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> свойство. В этом случае необходимо обрабатывать <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreating> событий и вручную создать объект контекста данных.  
  
 Тип объекта контекста создается во время select, update, insert и операции удаления.  
  
 Имеется один раз, когда событие не происходит. Это когда программно задать <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> свойства объекта в обработчик событий для <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> события. Дополнительное условие является то, что исходные значения не должны храниться в состоянии представления, либо этого объекта в <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> реализует свойство <xref:System.Data.Linq.ITable> интерфейса.  
  
   
  
## Examples  
 Приведенный ниже показано, как создать объект контекста данных с помощью конструктора не по умолчанию во время <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreating> событий. Код назначает объект <xref:System.Web.UI.WebControls.LinqDataSourceContextEventArgs.ObjectInstance%2A> свойство.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.ContextCreating#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.ContextCreating/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.ContextCreating#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.ContextCreating/vb/Default.aspx.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextDisposing">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt; ContextDisposing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt; ContextDisposing" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.ContextDisposing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextDisposing As EventHandler(Of LinqDataSourceDisposeEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceDisposeEventArgs ^&gt; ^ ContextDisposing;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит перед удалением объекта типа контекста.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вы обрабатываете <xref:System.Web.UI.WebControls.LinqDataSource.ContextDisposing> событий вручную удалить объект, или для выполнения очистки, характерное для объекта перед уничтожением объекта.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextTypeName">
      <MemberSignature Language="C#" Value="public override string ContextTypeName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ContextTypeName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.ContextTypeName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ContextTypeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ContextTypeName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает имя типа, содержащего свойство, значение которого включает предназначенные для извлечения данные.</summary>
        <value>Имя класса, из которого должны извлекаться данные.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При использовании <xref:System.Web.UI.WebControls.LinqDataSource> управления для получения данных из коллекции данных в памяти или базы данных, необходимо задать два свойства. Первый — это класс контекста данных, представляющий источник данных. Второе — это свойство в классе контекста данных, содержащий данные. Задать <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> задано имя класса контекста данных и вы <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> свойство в коллекцию данных, содержащий данные.  
  
 Например, при извлечении данных из базы данных, задайте <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> на имя класса, представляющего базу данных. Кроме того, задать <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> свойство, который представляет таблицу в базе данных. Чтобы создать классы из базы данных, используйте [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)] или программа SqlMetal.exe для автоматического создания этих классов.  
  
 При извлечении данных из коллекции данных в памяти, например массив задать <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> на имя класса, содержащего свойства массива. Затем установите <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> свойство свойству, которое получает или задает массив.  
  
 Чтобы включить автоматическое обновление, вставка или удаление операции с помощью <xref:System.Web.UI.WebControls.LinqDataSource> класса элемента управления, назначенные <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> свойства должен быть производным от <xref:System.Data.Linq.DataContext>. Кроме того, назначенные свойства <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> свойства должен быть производным от <xref:System.Data.Linq.Table%601>. Если не требуется для включения автоматического обновления, вставки, или операции удаления, можно присвоить имя любого типа класса, чтобы <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> свойство.  
  
 Сведения о том, как выбрать данные из экземпляра класса см. в разделе <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> свойство.  
  
   
  
## Examples  
 Следующий пример показывает, как задать <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> свойства класса, содержащего массив строк. Также показано, как задать свойство класса (созданные [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)]), представляющий базу данных.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/cs/Default.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/vb/Default.aspx#2)]  
  
 Класс с именем `ExampleDataContext` , представляет таблицу базы данных не отображается в этом примере. Для работы этого примера необходимо создать этот класс, добавив именованный Example.dbml и перетащив таблицу с именем фильма на класс LINQ To SQL [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)]. Класс с именем `ExampleDataContext` с свойство с именем `Movies` создается.  
  
 В следующем примере показано класс с именем `MovieLibrary` , указывается в <xref:System.Web.UI.WebControls.LinqDataSource> элемента управления.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/cs/App_Code/MovieLibrary.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/vb/App_Code/MovieLibrary.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateQueryableView">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.WebControls.QueryableDataSourceView CreateQueryableView ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.WebControls.QueryableDataSourceView CreateQueryableView() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.CreateQueryableView" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateQueryableView () As QueryableDataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::WebControls::QueryableDataSourceView ^ CreateQueryableView();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.QueryableDataSourceView</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает представление, доступное для запросов.</summary>
        <returns>Представление, доступное для запросов.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateView">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.WebControls.LinqDataSourceView CreateView ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.WebControls.LinqDataSourceView CreateView() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.CreateView" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateView () As LinqDataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Web::UI::WebControls::LinqDataSourceView ^ CreateView();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.LinqDataSourceView</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Создает новый экземпляр класса <see cref="T:System.Web.UI.WebControls.LinqDataSourceView" />, связанный с данным элементом управления.</summary>
        <returns>Объект, действующий как интерфейс для элементов управления с привязкой к данным.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Чтобы предоставить пользовательское представление, можно переопределить этот метод в производном классе.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public int Delete (System.Collections.IDictionary keys, System.Collections.IDictionary oldValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Delete(class System.Collections.IDictionary keys, class System.Collections.IDictionary oldValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.Delete(System.Collections.IDictionary,System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Function Delete (keys As IDictionary, oldValues As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Delete(System::Collections::IDictionary ^ keys, System::Collections::IDictionary ^ oldValues);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Collections.IDictionary" />
        <Parameter Name="oldValues" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="keys">Ключевые значения строк для удаляемых записей.</param>
        <param name="oldValues">Значения строк, которые проверяются на наличие конфликтов данных.</param>
        <summary>Выполняет операцию удаления.</summary>
        <returns>Количество записей, затронутых операцией удаления.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Как правило, не следует вызывать <xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A> метода из кода. При использовании <xref:System.Web.UI.WebControls.LinqDataSource> элемент управления с привязкой к данным элемента управления с привязкой к данным элемента управления автоматически вызывает <xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A> метод, когда пользователь выполняет действие, чтобы удалить запись. При явном вызове метода <xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A> метод, если вы хотите создать свой собственный процесс для удаления данных. Например, можно вызвать <xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A> метод, если требуется удалить записи на основе события вне элемента управления с привязкой к данным.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Deleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Deleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Deleted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Deleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleted As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ Deleted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при завершении операции удаления.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обрабатывать <xref:System.Web.UI.WebControls.LinqDataSource.Deleted> событие перехват всех исключений из операции удаления, или проверить выходные параметры, после завершения операции. Можно получить выходные параметры <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> объект, передаваемый в обработчики событий.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection DeleteParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection DeleteParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.DeleteParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeleteParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ DeleteParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Это свойство не используется классом <see cref="T:System.Web.UI.WebControls.LinqDataSource" />.</summary>
        <value>Коллекция параметров.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Deleting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt; Deleting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt; Deleting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Deleting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleting As EventHandler(Of LinqDataSourceDeleteEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceDeleteEventArgs ^&gt; ^ Deleting;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит перед операцией удаления.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обрабатывать <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> событий для проверки объекта для удаления, для проверки на наличие ошибок проверки данных в классе данных, чтобы изменить значение перед выполнением операции delete или отменить операцию удаления. <xref:System.Web.UI.WebControls.LinqDataSource> Управление передается <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> с обработчиками событий для <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> события. <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> Объект содержит данные, которые будут удалены и дает возможность отменить операцию удаления. Если данные класса вызывает <xref:System.Web.UI.WebControls.LinqDataSourceValidationException> исключения, <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> объект содержит исключение в <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs.Exception%2A> свойство.  
  
 Если исключение в обработчике событий для <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> событий, необходимо обрабатывать исключение в этом обработчике события. Исключение не будут передаваться в обработчик событий для <xref:System.Web.UI.WebControls.LinqDataSource.Deleted> событий (через <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> свойство <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> объекта). <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> Свойство содержит только исключения, возникающие после <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> событий.  
  
   
  
## Examples  
 В примере показан обработчик событий для <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> события. Код отменяет операции удаления, на основе свойства в <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs.OriginalObject%2A> свойства и значения из веб-страницы. В примере когда `OnSale` свойству `true`, пользователь должен выбрать <xref:System.Web.UI.WebControls.CheckBox> управления подтверждения удаления записи.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Deleting#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Deleting/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Deleting#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Deleting/vb/Default.aspx.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableDelete">
      <MemberSignature Language="C#" Value="public bool EnableDelete { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableDelete" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.EnableDelete" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableDelete As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableDelete { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.EnableDelete</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, указывающее, могут ли быть удалены записи данных при помощи элемента управления <see cref="T:System.Web.UI.WebControls.LinqDataSource" />.</summary>
        <value>
          <see langword="true" />, если автоматическое удаление включено; в противном случае <see langword="false" />. Значение по умолчанию — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Задать <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A> свойства `true` Если вы хотите разрешить пользователям удалять записи данных через <xref:System.Web.UI.WebControls.LinqDataSource> элемента управления. Когда <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A> — `true`, <xref:System.Web.UI.WebControls.LinqDataSource> использует LINQ to SQL для автоматического создания команд для удаления данных. Необходимо включить интерфейс, позволяющий пользователям выбрать записи для удаления, такие как <xref:System.Web.UI.WebControls.DetailsView> элемента управления.  
  
 <xref:System.Web.UI.WebControls.LinqDataSource> Управления не поддерживает операции автоматического удаления при <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> свойство или <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> свойству. В этом случае <xref:System.Web.UI.WebControls.LinqDataSource> элемент управления вызывает исключение при попытке выполнить операцию удаления.  
  
   
  
## Examples  
 В следующем примере показан <xref:System.Web.UI.WebControls.LinqDataSource> управления, имеющий <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A> значение `true`. Объект <xref:System.Web.UI.WebControls.DetailsView> элемент управления отображает данные и создает кнопку, которая позволяет пользователям удалять записи данных.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableInsert">
      <MemberSignature Language="C#" Value="public bool EnableInsert { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableInsert" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.EnableInsert" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableInsert As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableInsert { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.EnableInsert</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, указывающее, могут ли быть вставлены записи данных при помощи элемента управления <see cref="T:System.Web.UI.WebControls.LinqDataSource" />.</summary>
        <value>
          <see langword="true" />, если автоматическая вставки включена; в противном случае <see langword="false" />. Значение по умолчанию — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Задать <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> свойства `true` Если вы хотите разрешить пользователям вставлять записи данных через <xref:System.Web.UI.WebControls.LinqDataSource> элемента управления. Когда <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> — `true`, <xref:System.Web.UI.WebControls.LinqDataSource> использует LINQ to SQL для автоматического создания команд для вставки данных. Необходимо включить интерфейс, который позволяет пользователям вставить новую запись, например <xref:System.Web.UI.WebControls.DetailsView> элемента управления.  
  
 <xref:System.Web.UI.WebControls.LinqDataSource> Управления не поддерживает операции вставки автоматического при <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> свойство или <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> свойству. В этом случае <xref:System.Web.UI.WebControls.LinqDataSource> элемент управления вызывает исключение при попытке выполнить операцию вставки.  
  
   
  
## Examples  
 В следующем примере показан <xref:System.Web.UI.WebControls.LinqDataSource> управления, имеющий <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> значение `true`. Объект <xref:System.Web.UI.WebControls.DetailsView> выводит данные и отображает кнопку, которая переключается в режим, где пользователи могут создавать и сохранять новые записи вставки элемента управления.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableObjectTracking">
      <MemberSignature Language="C#" Value="public bool EnableObjectTracking { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableObjectTracking" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableObjectTracking As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableObjectTracking { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, указывающее, отслеживаются ли изменения в объекте контекста данных.</summary>
        <value>
          <see langword="true" />, если изменения в объекте контекста данных отслеживаются; в противном случае — <see langword="false" />. Значение по умолчанию: <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking%2A> Свойство используется только при выборе данных из объекта контекста данных LINQ To SQL.  
  
 При взаимодействии с данных только для чтения, задание <xref:System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking%2A> свойства `false` повышает производительность, поскольку данные не кэшируются, чтобы определить, изменилась ли. Тем не менее он отключает отложенное выполнение запроса. Это свойство должно быть присвоено `true` Если вы хотите использовать отложенное выполнение запроса.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.Linq.DataContext.ObjectTrackingEnabled" />
      </Docs>
    </Member>
    <Member MemberName="EnableUpdate">
      <MemberSignature Language="C#" Value="public bool EnableUpdate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableUpdate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.EnableUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableUpdate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableUpdate { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.EnableUpdate</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, указывающее, могут ли быть обновлены записи данных при помощи элемента управления <see cref="T:System.Web.UI.WebControls.LinqDataSource" />.</summary>
        <value>
          <see langword="true" />, если автоматическое обновление включено; в противном случае <see langword="false" />. Значение по умолчанию — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Задать <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> свойства `true` Если вы хотите разрешить пользователям обновлять записи данных с помощью <xref:System.Web.UI.WebControls.LinqDataSource> элемента управления. Когда <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> — `true`, <xref:System.Web.UI.WebControls.LinqDataSource> использует LINQ to SQL для автоматического создания команд для обновления данных. Необходимо включить интерфейс, который позволяет пользователям обновлять записи, такие как <xref:System.Web.UI.WebControls.DetailsView> элемента управления.  
  
 <xref:System.Web.UI.WebControls.LinqDataSource> Управления не поддерживает операции автоматического обновления при <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> свойство или <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> свойству. В этом случае <xref:System.Web.UI.WebControls.LinqDataSource> элемент управления вызывает исключение при попытке выполнить операцию обновления.  
  
   
  
## Examples  
 В следующем примере показан <xref:System.Web.UI.WebControls.LinqDataSource> управления, имеющий <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> значение `true`. Объект <xref:System.Web.UI.WebControls.DetailsView> элемент управления отображает данные и создает кнопку, которая позволяет пользователям обновлять записи данных.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GroupBy">
      <MemberSignature Language="C#" Value="public string GroupBy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string GroupBy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.GroupBy" />
      <MemberSignature Language="VB.NET" Value="Public Property GroupBy As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ GroupBy { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, определяющее свойства, используемые для группировки и получения данных.</summary>
        <value>Строка, используемая для создания предложения Group By.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вы используете <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> свойство, чтобы указать, какие свойства используются для объединения записей данных, которые имеют одинаковые значения. Например, если задать <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> свойства `Name`, все записи в запросе с одинаковым `Name` значение свойства возвращаются единственную консолидированные запись.  
  
 Можно назначить несколько свойств для <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> свойство путем заключения всех свойств в `new` функции и разделения каждого свойства с помощью запятой. Например, в группу с помощью свойств `Name` и затем `Category`, задайте <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> свойства `new(Name, Category)`.  
  
 Возвращенные значения в свойстве, которые используются для группирования с помощью созданное свойство с именем `Key`. Включить `Key` свойства <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> извлекаемого сгруппированных значениях свойства. Можно задать `Key` псевдоним с помощью свойства `As` ключевое слово, но не требуется для использования псевдонимов. Например, можно задать <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> свойство с именем `Category`. Вы можете получать объединенные значения из `Category` свойство, задав <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> свойства `new(Key As ProductCategory)`.  
  
 Доступ к отдельных записей в группировании путем включения `It` свойство в <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> свойство. `It` Свойство содержит коллекцию записей, имеющих значение в свойстве сгруппированных. Можно выполнять итерацию по `It` свойство для извлечения отдельных записей.  
  
 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> Свойство часто используется с методов статистической обработки. Можно использовать следующие статистические методы:  
  
-   `Count()`  
  
-   `Average(` *Столбец* `)`  
  
-   `Sum(` *Столбец* `)`  
  
-   `Max(` *Столбец* `)`  
  
-   `Min(` *Столбец* `)`  
  
-   `Where(` *условия* `)`  
  
-   `Any()`  
  
-   `All(` *условия* `)`  
  
 Дополнительные сведения см. в разделе [NIB: Обзор элемента управления веб-сервера LinqDataSource](http://msdn.microsoft.com/library/104cfc3f-7385-47d3-8a51-830dfa791136) и [как: группы и статистические данные, с помощью элемента управления LinqDataSource](http://msdn.microsoft.com/library/b922cf69-251f-4158-b405-ea960993a1af).  
  
   
  
## Examples  
 В следующем примере показан <xref:System.Web.UI.WebControls.LinqDataSource> управления, который группирует возвращаемые данные, свойство с именем `Category`. Возвращает общие значения и вычисляет среднюю цену для группированных записей.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default3.aspx#3)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default3.aspx#3)]  
  
 В следующем примере показан <xref:System.Web.UI.WebControls.LinqDataSource> управления, являющийся настроенный для группирования данных по двум столбцам. `Key` Свойство ссылается на объект, который имеет два свойства `ProductCategory` и `Color`. Объект, представленный `It` переименовывается `Products`. Переименованные `Products` объект содержит коллекцию отдельных записей в группе, и каждый экземпляр содержит все столбцы из таблицы Products.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/vb/Default.aspx#1)]  
  
 В следующем примере показаны два <xref:System.Web.UI.WebControls.ListView> элементы управления для отображения данных из <xref:System.Web.UI.WebControls.LinqDataSource> элемента управления в предыдущем примере. Один <xref:System.Web.UI.WebControls.ListView> элемент управления отображает сгруппированные данные, а другой <xref:System.Web.UI.WebControls.ListView> элемент управления отображает отдельные названия продуктов, которые входят в эту группу. Вложенного элемента управления с привязкой к данным <xref:System.Web.UI.WebControls.BaseDataList.DataSource%2A> свойству `Products`, который является псевдонимом для `It` объекта.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/cs/Default.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/vb/Default.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GroupByParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection GroupByParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection GroupByParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.GroupByParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GroupByParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ GroupByParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает коллекцию параметров, которые используются для создания предложения Group By.</summary>
        <value>Параметры, которые используются для создания предложения Group By.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.LinqDataSource> Управления использует параметры в <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> коллекции для создания предложения Group By во время выполнения. Обычно вы не будете использовать <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> коллекции для группировки данных. Вместо этого можно использовать <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> свойства. Вы используете <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> коллекции, только если значение в предложении Group By должно иметь значение во время выполнения, и это значение не является именем свойства. Например, использовать <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> коллекции для группировки данных в зависимости от `LastName` свойство в записи данных равно значению, предоставленного пользователем.  
  
 Если требуется сгруппировать данные по свойству, и это свойство не требуется задать во время выполнения, можно определить свойство группировки в <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> свойство. Например, для возвращения значений из таблицы базы данных, сгруппированные `LastName`, задайте <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> «Фамилия» без параметров. Если требуется динамическое группирование данных с помощью свойства, создайте обработчик событий для <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> событий и настраивать <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> свойства при необходимости.  
  
 Не удается назначить имя свойства как значение параметра в <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> коллекции. Добавить параметры, чтобы <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> коллекции, если вы хотите добавить условие <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> свойства, которые должны быть установлены во время выполнения.  
  
 Чтобы задать значения в <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> коллекции, назначить имя каждого параметра, а затем добавить заполнитель в <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> свойство для данного именованного параметра. В предложении Group By в начале имя каждого параметра с символа @.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public int Insert (System.Collections.IDictionary values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Insert(class System.Collections.IDictionary values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.Insert(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Function Insert (values As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Insert(System::Collections::IDictionary ^ values);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="values">Значения строк, которые вносятся в источник данных.</param>
        <summary>Выполняет операцию вставки.</summary>
        <returns>Количество строк, на которые повлияла операция вставки.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Как правило, не следует вызывать <xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A> метода из кода. Элемент управления с привязкой к данным автоматически вызывает <xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A> метод, когда пользователь выполняет действие, чтобы вставить новую запись. При явном вызове метода <xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A> метод, если вы хотите создать свой собственный процесс для вставки данных.  
  
   
  
## Examples  
 В следующем примере показано, как программным образом вставить новую запись в источнике данных, после нажатия кнопки. Код передает <xref:System.Collections.Specialized.ListDictionary> значений, содержащий по умолчанию <xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A> метод.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Insert#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Insert/cs/Default2.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Insert#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Insert/vb/Default2.aspx.vb#1)]  
  
 В следующем примере показана разметка для предыдущего примера.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.Insert#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Insert/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.Insert#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Insert/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Inserted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Inserted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Inserted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Inserted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Inserted As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ Inserted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при завершении операции вставки.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обрабатывать <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> события для перехвата исключения из операции вставки или проверить значения после завершения операции вставки. Вы можете получать новые значения через <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> объект, передаваемый в обработчики событий. Например, можно использовать <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> объекта для извлечения свойства identity, создаваемые базы данных для записи данных.  
  
   
  
## Examples  
 В следующем примере показано, как создать обработчик событий для <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> событие, которое проверяет наличие исключений и извлекает свойство identity для новой записи.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/cs/Default.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Inserting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt; Inserting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt; Inserting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Inserting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Inserting As EventHandler(Of LinqDataSourceInsertEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceInsertEventArgs ^&gt; ^ Inserting;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит перед операцией вставки.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обрабатывать <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> событий для проверки объекта должен быть вставлен, для проверки на наличие ошибок проверки данных в классе данных, чтобы изменить значение перед выполнением операции вставки или для отмены операции вставки. <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> Объект, переданный в обработчики событий для этого события содержит новый объект для вставки в источнике данных.  
  
 При возникновении ошибки проверки во время операции вставки, <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> содержит объект исключения проверки, которые выдают класс данных. Если вставляемое значение не соответствует типу свойства в классе данных, или оно не проходит настраиваемую проверку, возникает ошибка проверки. В обработчике событий для <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> событий, можно извлечь исключения проверки и предпринять соответствующие действия.  
  
 Если исключение в обработчике событий для <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> событий, необходимо обрабатывать исключение в этом обработчике события. Исключение не будут передаваться в обработчик событий для <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> событий (через <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> свойство <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> объекта). <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> Свойство содержит только исключения, возникающие после <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> событий.  
  
   
  
## Examples  
 В примере показан обработчик событий для <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> событий, который изменяет данные перед выполнением операции вставки. Объект из <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject%2A> свойство приведен к типу с именем `Product`. `DateModified` Свойство `Product` объекта имеет значение текущей даты и времени.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Inserting#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Inserting/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Inserting#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Inserting/vb/Default.aspx.vb#1)]  
  
 В примере показан обработчик событий для <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> событие, которое получает исключения проверки.  
  
```vb  
Protected Sub LinqDataSource_Inserting(ByVal sender As Object, _  
        ByVal e As LinqDataSourceInsertEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message & "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Inserting(object sender,   
        LinqDataSourceInsertEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 Предыдущий пример получает исключения проверки. Может быть создано исключение, если значение не соответствует типу свойства. Он также может быть создано настраиваемой проверке, такие как в следующем примере. `OnAgeChanging` Метод проверяет, что количество `Age` свойство не может быть отрицательным.  
  
```csharp  
partial void  OnAgeChanging(int? value)  
{  
    if (value < 0)  
    {  
        throw new Exception("Age cannot be a negative number.");  
    }  
}  
```  
  
```vb  
Private Sub OnAgeChanging(ByVal value As System.Nullable(Of Integer))  
    If (value < 0) Then  
        Throw New Exception("Age cannot be a negative number.")  
    End If  
End Sub  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection InsertParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection InsertParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.InsertParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InsertParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ InsertParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает коллекцию параметров, которые используются во время операции вставки.</summary>
        <value>Параметры, которые используются во время операции вставки.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Как правило, передаются значения, которые необходимы для выполнения операции вставки для <xref:System.Web.UI.WebControls.LinqDataSource> элемента управления с помощью элемента управления с привязкой к данным. Вставка параметров, если вы хотите предоставить значение по умолчанию значение или определить, следует ли преобразовывать пустые значения `null`. Вам не требуется задать параметр для каждого значения, который будет вставлен только для значений, которые нужно обработать, если пользователь вводит значение.  
  
 Значения, которые вы указываете в <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> коллекции используются только для полей, которые определены в источнике данных, но не привязанных в элементе данных. Например предположим, что таблицы базы данных имеются столбцы, которые называются имя, адрес и PostalCode, но <xref:System.Web.UI.WebControls.ListView> привязан элемент управления, к которому привязана к таблице только поля имени и адреса. Значения в <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> коллекции будет использоваться только для поля PostalCode. Они не будут использоваться для поля имени и адреса. Это верно, даже если не задано значение для этих полей. Если автоматически заполняет поля элемента управления с привязкой к данным для всех полей в данных источника, без значения из <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> коллекции будет использоваться.  
  
   
  
## Examples  
 В следующем примере показан <xref:System.Web.UI.WebControls.LinqDataSource> управления с параметром, который предоставляет значение по умолчанию в <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> коллекции. Если пользователь вводит значение `Category` свойства, значение по умолчанию, заданный параметром сохраняется в базе данных.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#9](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default9.aspx#9)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default9.aspx#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected internal override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.OnInit(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnInit (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnInit(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Данные события.</param>
        <summary>Выполняет инициализацию объекта <see cref="T:System.Web.UI.WebControls.LinqDataSource" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnUnload">
      <MemberSignature Language="C#" Value="protected internal override void OnUnload (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnUnload(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.OnUnload(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnUnload (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnUnload(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект <see cref="T:System.EventArgs" />, содержащий данные о событии.</param>
        <summary>Вызывает событие <see cref="E:System.Web.UI.Control.Unload" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.Control.OnUnload(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OrderBy">
      <MemberSignature Language="C#" Value="public string OrderBy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OrderBy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.OrderBy" />
      <MemberSignature Language="VB.NET" Value="Public Property OrderBy As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OrderBy { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, определяющее поля, используемые для сортировки полученных данных.</summary>
        <value>Строка, используемая для создания предложения Order By.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вы используете <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> свойство для указания свойств, из возвращаемых данных для сортировки. Свойство сортировки данных должно существовать в исходном источнике данных, но необязательно должны быть включены в <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> свойство. Можно добавить пробел и `Ascending`, `ASC`, `Descending`, или `DESC` свойству в <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> строку, чтобы указать, каким образом возвращается упорядоченные данные.  
  
 Можно указать несколько свойств в <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> свойство, разделив каждое свойство с помощью запятой. Например, для предложения order by с именем свойства `LastName` и `FirstName`, задайте <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> свойство «Фамилия, имя».  
  
> [!NOTE]
>  При использовании <xref:System.Web.UI.WebControls.LinqDataSource> управления [!INCLUDE[ss2k](~/includes/ss2k-md.md)] или [!INCLUDE[ssEW](~/includes/ssew-md.md)] и <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> свойству `true`, необходимо ввести значение в <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> свойство. По умолчанию <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> свойство `true`. Если присвоить значение <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> свойства, необходимо также включить все столбцы идентификаторов в списке свойств, который возвращается в запросе.  
  
 Если <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> свойству `true`, элемент управления с привязкой к данным можно передать выражение сортировки для <xref:System.Web.UI.WebControls.LinqDataSource> элемента управления во время выполнения. <xref:System.Web.UI.WebControls.LinqDataSource> Элемент управления будет применять выражение сортировки из элемента управления с привязкой к данным, после применения <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> свойство. Таким образом данные возвращаются в соответствии с выражением сортировки из элемента управления с привязкой к данным.  
  
   
  
## Examples  
 Следующий пример возвращает данные в обратном алфавитном порядке по значениям в `Category` свойство.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default4.aspx#4)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default4.aspx#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderByParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection OrderByParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection OrderByParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.OrderByParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OrderByParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ OrderByParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает коллекцию параметров, которые используются для создания предложения Order By.</summary>
        <value>Параметры, которые используются для создания предложения Order By.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.LinqDataSource> Управления использует параметры в <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> коллекции для создания предложения Order By во время выполнения. Обычно устанавливается <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> свойства `true` при добавлении параметров <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> коллекции. При <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> свойству `true`, каждый параметр в <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> коллекции добавляется в предложение Order By в последовательности, они указаны в <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> коллекции. Когда <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> свойство `true`, параметры не должны иметь имя, так как они применяются в последовательности, а не сопоставляются с заполнителя.  
  
 Если необходимо задать значение во время выполнения в предложении Order By, не нужно использовать <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> коллекции. Можно определить поля нужно использовать для сортировки данных в <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> свойство. Например, для возвращения значений из таблицы базы данных, упорядоченных `LastName`, задайте <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> «Фамилия» без параметров.  
  
 Можно задать параметры <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> коллекции и соответствуют параметрам меток-заполнителей в <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> свойство, но такой подход имеет ограниченные приложения. При использовании этого подхода параметров в <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> коллекции не может представлять имя столбца. Можно задать значение параметра, а затем сравнить со значениями в свойстве. Например можно сортировать данные, в зависимости от того, являются ли значения в свойстве меньше, чем значение времени, представленного параметром.  
  
   
  
## Examples  
 В следующем примере показан элемент управления <xref:System.Web.UI.WebControls.LinqDataSource> со свойством <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A>, имеющим значение `true`. Параметр включается в <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> коллекции, которая упорядочивает данные на основе свойства имя, которое пользователь выбирает из <xref:System.Web.UI.WebControls.DropDownList> элемента управления.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default8.aspx#8)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default8.aspx#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderGroupsBy">
      <MemberSignature Language="C#" Value="public string OrderGroupsBy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OrderGroupsBy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy" />
      <MemberSignature Language="VB.NET" Value="Public Property OrderGroupsBy As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OrderGroupsBy { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает поля, используемые для сортировки группированных данных.</summary>
        <value>Строка, используемая для создания предложения группы Order By.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вы используете <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> свойство, чтобы указать порядок сортировки групп данных. Например, можно группировать по `CategoryID` свойство и затем сортировки группы идентификатор каждой категории на среднее арифметическое `Price` свойство.  
  
 Можно задать <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> свойства только в том случае, если имеются сгруппированные данные. Если задать <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> свойства без параметра <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> свойства <xref:System.Web.UI.WebControls.LinqDataSource> элемент управления вызывает исключение.  
  
 Свойство, которое используется для сортировки данных должно быть свойство, используемое для группировки данных или результат статистической функции для сгруппированных данных. Чтобы указать порядок сортировки данных, можно добавить пробел и строка «Ascending», «ASC», «По убыванию» или «DESC» имени свойства в <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> строку.  
  
 Можно указать несколько свойств в <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> свойство. Через запятую для разделения свойств.  
  
   
  
## Examples  
 Следующий пример показывает способы группирования данных с использованием двух свойств и сортировать сгруппированные данные с помощью одного из этих свойств. Данные из таблицы с именем `Products` группируются с помощью свойства с именем `CategoryID` и `Discontinued`. Сгруппированные данные сортируются с `CategoryID` свойство.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy/vb/Default.aspx#1)]  
  
 Следующий пример показывает способы группирования данных, используя свойство и сортировка в зависимости от результатов статистической функции. Данные из `Products` таблицы группируются с помощью `CategoryID` свойство. Он сортируется по среднее `UnitPrice` свойство в каждой группе.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderGroupsByParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection OrderGroupsByParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection OrderGroupsByParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OrderGroupsByParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ OrderGroupsByParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает коллекцию параметров, которые используются для создания предложения Order Groups By.</summary>
        <value>Параметры, которые используются для создания предложения группы Order By.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.LinqDataSource> Управления использует параметры в <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> коллекции для создания предложения группы Order By во время выполнения.  
  
 Добавьте значения <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> сбор только в том случае, когда необходимо задать значения в предложении групп Order By во время выполнения. Можно определить поля, которые используются для сортировки данных с помощью <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> свойство.  
  
 Можно задать параметры <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> коллекции и соответствуют параметрам меток-заполнителей в <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> свойство. Тем не менее, при использовании этого подхода параметров в <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> коллекции не может представлять имя столбца; они должны представлять значения. Можно установить для параметра значение, а затем сравнить это значение к свойству. Например можно сортировать данные, в зависимости от того, являются ли значения в свойстве меньше, чем значение времени, представленного параметром.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public string Select { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Select" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.Select" />
      <MemberSignature Language="VB.NET" Value="Public Property Select As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Select { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает свойства и рассчитанные значение, которые включаются в извлеченные данные.</summary>
        <value>Строка, которая используется для создания предложения "Select".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если вы не установите <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> свойства <xref:System.Web.UI.WebControls.LinqDataSource> элемент управления получает все свойства (столбцы данных) из объекта данных. Вы используете <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> для извлечения подмножества свойств из объекта или для вычисления новых значений, когда данные извлекаются свойства.  
  
 Указать свойства для получения, задав <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> свойства имена свойств, которые требуется включить в возвращаемых данных.  
  
 При извлечении подмножество свойств из объекта данных <xref:System.Web.UI.WebControls.LinqDataSource> элемент управления динамически создает класс, который содержит только свойства, указанные в <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> свойство. Класс также создается динамически, если вычисление свойств, которые не являются свойствами в объекте данных. В этих случаях объект, возвращаемый из запроса не является экземпляром класса, который указан в <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> свойство. Вместо этого необходимо использовать `new` метод в <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> свойство, указывающее, что новый класс возвращается из запроса. Например, для возвращения только `FirstName` и `LastName` свойства из объекта, содержащего более этих свойств набора <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> свойства `new(FirstName, LastName)`. <xref:System.Web.UI.WebControls.LinqDataSource> Управления динамически создаст новый класс, который указан в `new` метод.  
  
 Можно использовать `As` ключевое слово для указания псевдонима для выбранного значения. Если назначить псевдоним, необходимо включить свойства псевдонима в `new` метод. Любой элемент управления с привязкой к данным, который привязывает результаты <xref:System.Web.UI.WebControls.LinqDataSource> элемент управления должен ссылаться на свойство псевдонимом. Например, если задать <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> свойства `new(Region As SalesRegion, Revenue / 1000 As RevenueThousands)`, элемент управления с привязкой к данным можно получить доступ к два свойства `SalesRegion` и `RevenueThousands`.  
  
 Вы используете `new` функционировать в <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> свойству в соответствии с условиями, перечисленные в следующей таблице.  
  
|Выбрать|Использование нового|Пример|  
|------------|----------------|-------------|  
|Одно свойство.|`new` не требуется.|`Select="Category"`|  
|Несколько свойств.|`new` требуется.|`Select="new(Cateogry, Name)"`|  
|Один или несколько свойств с псевдонимами.|`new` требуется.|`Select="new(Category As CategoryGroup)"`|  
  
 Если вы хотите включить автоматического изменения данных, но вы не хотите отобразить все свойства из объекта данных, не устанавливайте <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> свойство. Вместо этого предлагается Управляйте отображением при помощи элемента управления с привязкой к данным. При использовании <xref:System.Web.UI.WebControls.DetailsView> управления или <xref:System.Web.UI.WebControls.GridView> управления, необходимо также задать <xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A> или <xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A> свойства `false`. Все значения, которые не отображаются в элементе управления с привязкой к данным, хранятся в состоянии представления. Они передаются без изменений в источник данных при операции обновления данных.  
  
 При группировании данных в запросе, можно включить статистические методы в <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> свойство. Можно использовать следующие статистические методы:  
  
-   `Count()`  
  
-   `Average(` *Столбец* `)`  
  
-   `Sum(` *Столбец* `)`  
  
-   `Max(` *Столбец* `)`  
  
-   `Min(` *Столбец* `)`  
  
-   `Where(` *условия* `)`  
  
-   `Any()`  
  
-   `All(` *условия* `)`  
  
 Дополнительные сведения см. в разделе [NIB: Обзор элемента управления веб-сервера LinqDataSource](http://msdn.microsoft.com/library/104cfc3f-7385-47d3-8a51-830dfa791136) и [как: группы и статистические данные, с помощью элемента управления LinqDataSource](http://msdn.microsoft.com/library/b922cf69-251f-4158-b405-ea960993a1af).  
  
 При группировании данных может включать `Key` и `It`, который динамически создаются свойства, в <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> свойство. `Key` Свойство ссылается на значения в свойство или свойства, которые были использованы для группирования данных. Например, если группировать по свойству с именем `Category`, `Key` свойство будет содержать каждое уникальное значение в `Category` свойство. `It` Свойство ссылается на набор отдельных записей в группировании данных. Можно выполнять итерацию по `It` свойство для извлечения отдельных записей, которые были объединены в операции группировки. Например, если группировать по свойству с именем `Category`, `It` свойство содержит все отдельные записи, которые имеют общее значение в `Category` свойство.  
  
 При включении `It` ключевое слово в <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> свойство при группировании данных, необходимо назначить псевдоним для `It` ключевое слово. <xref:System.Web.UI.WebControls.LinqDataSource> Управления возникает исключение, если `It` имеет псевдоним. Можно присвоить псевдоним для `Key` ключевое слово, но это не является обязательным.  
  
   
  
## Examples  
 Следующий пример показывает, как задать <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> свойства подмножество свойств в объекте данных.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#10](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default10.aspx#10)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default10.aspx#10)]  
  
 В следующем примере показано, как для извлечения значений из свойства, который использовался для группирования данных и получения среднего значения для сгруппированных записей. `Key` Ключевое слово содержит свойство, которое используется для группирования данных. В этом примере `Key` будет содержать общие значения из `ProductCategory` свойство.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default3.aspx#3)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default3.aspx#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Selected">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Selected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Selected" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Selected" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Selected As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ Selected;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при завершении операции извлечения данных.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обрабатывать <xref:System.Web.UI.WebControls.LinqDataSource.Selected> события для перехвата исключения из операции извлечения данных или проверить объект данных после завершения операции получения. Объект становится доступным из <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> объект, передаваемый в обработчики событий.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Selecting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt; Selecting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt; Selecting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Selecting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Selecting As EventHandler(Of LinqDataSourceSelectEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceSelectEventArgs ^&gt; ^ Selecting;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит перед операцией извлечения данных.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обрабатывать <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> событий для выполнения следующих задач:  
  
-   Изменение параметров для извлечения данных.  
  
-   Программное создание запроса.  
  
-   Изменение значений для сортировки и разбиения на страницы.  
  
-   Для выполнения пользовательской сортировки или разбиения на страницы.  
  
-   Отмените операцию извлечения данных.  
  
 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs> Объект, передаваемый в обработчики событий для этого события содержит параметры для операции извлечения данных. Можно изменить параметры в <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> обработчик событий до выполнения запроса, или можно создать результирующий набор и назначить <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> свойство.  
  
 Возможность реализации пользовательской сортировки или разбиение по страницам в обработчиках для этого события может быть ограничен элементом управления, к которому привязан <xref:System.Web.UI.WebControls.LinqDataSource>. Например, если заголовок <xref:System.Web.UI.WebControls.GridView> нажатии элемента управления, элемент управления выполняет автоматическую сортировку, которая может переопределить в любом порядке установления событий обработчика.  
  
 Если исключение в обработчике событий для <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> событий, необходимо обрабатывать исключение в этом обработчике события. Исключение не будут передаваться в обработчик событий для <xref:System.Web.UI.WebControls.LinqDataSource.Selected> событий (через <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> свойство <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> объекта). <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> Свойство содержит только исключения, возникающие после <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> событий.  
  
   
  
## Examples  
 В примере показан обработчик событий для <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> события. Обработчик создает запрос, который извлекает значения из массива строковых значений в веб-странице.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/cs/Default3.aspx.cs#3)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/vb/Default3.aspx.vb#3)]  
  
 В следующем примере показано, как назначить <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> объект, который возвращается методом, который представляет хранимую процедуру.  
  
```vb  
Protected Sub LinqDataSource_Selecting(ByVal sender As Object, _  
        ByVal e As LinqDataSourceSelectEventArgs)  
    Dim exampleContext As ExampleDataContext = New ExampleDataContext()  
    e.Result = exampleContext.GetRegisteredCustomers()  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Selecting(object sender,   
        LinqDataSourceSelectEventArgs e)  
{  
    ExampleDataContext exampleContext = new ExampleDataContext();  
    e.Result = exampleContext.GetRegisteredCustomers();  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection SelectParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection SelectParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.SelectParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ SelectParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает коллекцию параметров, которые используются во время операции извлечения данных.</summary>
        <value>Параметры, которые используются для создания предложения Select.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.LinqDataSource> Управления использует параметры в <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> коллекции для создания предложения Select во время выполнения. Добавить параметры, чтобы <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> коллекции, если вы хотите использовать во время выполнения значения в предложении Select. Например, можно добавить параметр <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> коллекции для представления свойства профиля пользователя. Затем можно использовать свойства и значения из источника данных для вычисления нового значения.  
  
 Если необходимо задать значение во время выполнения в предложении Select, не нужно использовать <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> коллекции. Можно определить свойства для извлечения в <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> свойство. Например, чтобы вернуть `FirstName` и `LastName` значения из таблицы базы данных, <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> для «FirstName, LastName» без параметров.  
  
 Чтобы задать значения в <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> коллекции, можно добавить заполнитель в <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> свойство именованного параметра. В предложении Select, перед именем параметра с символа @.  
  
 Нельзя использовать параметр в <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> коллекции для представления имени свойства. Для динамического <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> на имя свойства, создайте обработчик событий для <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> событий и настраивать <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> свойства при необходимости.  
  
   
  
## Examples  
 Приведенный ниже показано, как использовать заданные пользователем значения для вычисления значения в возвращаемых данных. Пользователь может ввести значение в текстовом поле, представляющее количество рабочих дней. Это значение делится на значение из базы данных, который представляет количество дней для производства продукта. Возвращаемое значение указывает, сколько товаров можно произвести за указанное число дней. Введенный пользователем включается в команде Select через <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> коллекции.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.SelectParameters#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.SelectParameters/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.SelectParameters#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.SelectParameters/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StoreOriginalValuesInViewState">
      <MemberSignature Language="C#" Value="public bool StoreOriginalValuesInViewState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool StoreOriginalValuesInViewState" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState" />
      <MemberSignature Language="VB.NET" Value="Public Property StoreOriginalValuesInViewState As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool StoreOriginalValuesInViewState { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, определяющее необходимость хранения данных из источника данных в состоянии просмотра для гарантии неизменности данных другим процессом перед их обновлением или удалением.</summary>
        <value>
          Значение <see langword="true" />, если значения сохраняются в состоянии представления; в противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 По умолчанию обновление и удаление, когда была включена, <xref:System.Web.UI.WebControls.LinqDataSource> элемент управления сохраняет исходные значения для всех записей в состоянии представления. <xref:System.Web.UI.WebControls.LinqDataSource> Управления хранит значения для всех первичных ключей, и все свойства, не помеченный `UpdateCheck.Never` в `Column` атрибута. Задать `UpdateCheck` свойство `Column` атрибута в [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)].  
  
 Прежде чем LINQ to SQL обновляет или удаляет данные, он проверяет значения в состоянии представления со значениями в источнике данных. Если значения не совпадают, запись в источнике данных изменилась. В этом случае LINQ to SQL возникло исключение и не обновления или удаления. Дополнительные сведения о технологии LINQ to SQL см. в разделе [LINQ to SQL](http://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655).  
  
 Сохранение исходных значений в представлении состояния может привести к чрезмерно возрасти размера страницы и может предоставлять конфиденциальных данных для злоумышленника. Можно запретить хранение значений в состоянии представления, задав <xref:System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState%2A> свойства `false`. После этого необходимо предоставить свой собственный стиль, чтобы убедиться в том, что данные не изменились. Если задать <xref:System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState%2A> свойства `false`, исходные значения не сохраняются в состоянии представления элемента управления с привязкой к данным. В этом случае LINQ to SQL не удалось проверить целостность данных. LINQ to SQL, вызовет исключение, указывающее конфликт данных, даже если данные в источнике данных не были изменены.  
  
 Если в источнике данных содержит поле метки времени, которое автоматически обновляется во время обновления, можно сохранить только это значение в состоянии представления. В этом случае свойство метки времени в классе сущностей присвоено `IsVersion=true` и всем свойствам присваиваются `UpdateCheck.Never`. Так как поле метки времени автоматически обновляется в базе данных каждый раз при изменении данных в этой записи, LINQ to SQL определяет от этого значения, если данные были изменены. Это позволяет сократить размер состояния просмотра и конфиденциальные данные не предоставляется. LINQ to SQL проверяет согласованность данных, сравнивая значение отметки времени в представлении состояния с аналогичным значением в базе данных. Дополнительные сведения см. в разделе [Пошаговое руководство: использование временной метки с помощью элемента управления LinqDataSource для проверки целостности данных](http://msdn.microsoft.com/library/e7700162-4f05-4130-81f7-3be1361027fa).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.DynamicData.IDynamicDataSource.ContextType">
      <MemberSignature Language="C#" Value="Type System.Web.DynamicData.IDynamicDataSource.ContextType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type System.Web.DynamicData.IDynamicDataSource.ContextType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#ContextType" />
      <MemberSignature Language="VB.NET" Value=" Property ContextType As Type Implements IDynamicDataSource.ContextType" />
      <MemberSignature Language="C++ CLI" Value="property Type ^ System.Web.DynamicData.IDynamicDataSource.ContextType { Type ^ get(); void set(Type ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.ContextType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Описание этого члена см. в разделе <see cref="T:System.Web.DynamicData.IDynamicDataSource" />.</summary>
        <value>Тип, связанный с данным классом.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот член представляет собой явную реализацию члена интерфейса. Он может использоваться, только если экземпляр <xref:System.Web.UI.WebControls.LinqDataSource> приведен к типу интерфейса <xref:System.Web.DynamicData.IDynamicDataSource>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.DynamicData.IDynamicDataSource.EntitySetName">
      <MemberSignature Language="C#" Value="string System.Web.DynamicData.IDynamicDataSource.EntitySetName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string System.Web.DynamicData.IDynamicDataSource.EntitySetName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#EntitySetName" />
      <MemberSignature Language="VB.NET" Value=" Property EntitySetName As String Implements IDynamicDataSource.EntitySetName" />
      <MemberSignature Language="C++ CLI" Value="property System::String ^ System.Web.DynamicData.IDynamicDataSource.EntitySetName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.EntitySetName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Описание этого члена см. в разделе <see cref="T:System.Web.DynamicData.IDynamicDataSource" />.</summary>
        <value>Имя сущности.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот член представляет собой явную реализацию члена интерфейса. Он может использоваться, только если экземпляр <xref:System.Web.UI.WebControls.LinqDataSource> приведен к типу интерфейса <xref:System.Web.DynamicData.IDynamicDataSource>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.DynamicData.IDynamicDataSource.Exception">
      <MemberSignature Language="C#" Value="event EventHandler&lt;System.Web.DynamicData.DynamicValidatorEventArgs&gt; System.Web.DynamicData.IDynamicDataSource.Exception;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.DynamicData.DynamicValidatorEventArgs&gt; System.Web.DynamicData.IDynamicDataSource.Exception" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#Exception" />
      <MemberSignature Language="VB.NET" Value="Custom Event Exception As EventHandler(Of DynamicValidatorEventArgs) Implements System.Web.DynamicData.IDynamicDataSource" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Web.DynamicData.IDynamicDataSource.Exception</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.DynamicData.DynamicValidatorEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TableName">
      <MemberSignature Language="C#" Value="public string TableName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TableName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.TableName" />
      <MemberSignature Language="VB.NET" Value="Public Property TableName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TableName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает имя свойства или поля в классе контекста данных, представляющем коллекцию данных.</summary>
        <value>Строка, содержащую имя свойства, содержащего коллекцию данных.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Задать <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> на имя свойства или поля, которое представляет данные, которые необходимо получить. При установке соединения с таблицей базы данных, имя свойства обычно является совпадает с именем таблицы. При подключении к коллекции данных в памяти, установите <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> на имя свойства или поля, которое возвращает коллекцию данных.  
  
 Можно назначить свойство, которое возвращает любой тип <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> свойство для операций получения. Если объект, представленный свойством не реализует <xref:System.Collections.IEnumerable>, <xref:System.Web.UI.WebControls.LinqDataSource> управления будет автоматически включать объект в экземпляре <xref:System.Collections.IEnumerable> объекта.  
  
 Чтобы включить автоматическое обновление, вставка или удаление операций, класса, который назначается <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> свойства должен быть производным от <xref:System.Data.Linq.DataContext> и свойство, которое назначается <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> свойства должен быть производным от <xref:System.Data.Linq.Table%601>.  
  
 Сведения о том, как выбрать данные из экземпляра класса см. в разделе <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> свойство.  
  
   
  
## Examples  
 В следующем примере показаны два <xref:System.Web.UI.WebControls.LinqDataSource> элементов управления. В одном <xref:System.Web.UI.WebControls.LinqDataSource> управления <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> задано значение свойства в классе. Это свойство возвращает массив строк. В других <xref:System.Web.UI.WebControls.LinqDataSource> управления <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> свойству присвоено свойству, которое представляет таблицу базы данных.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/cs/Default.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/vb/Default.aspx#2)]  
  
 Класс с именем `ExampleDataContext` , представляет таблицу базы данных не отображается в этом примере. Для работы этого примера необходимо создать этот класс, добавив LINQ to SQL, класс именованный Example.dbml и перетащив таблицу с именем фильма на [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)]. Класс с именем `ExampleDataContext` с свойство с именем `Movies` создается.  
  
 В следующем примере показано класс с именем `MovieLibrary` , указывается в <xref:System.Web.UI.WebControls.LinqDataSource> элемента управления.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/cs/App_Code/MovieLibrary.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/vb/App_Code/MovieLibrary.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Collections.IDictionary keys, System.Collections.IDictionary values, System.Collections.IDictionary oldValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update(class System.Collections.IDictionary keys, class System.Collections.IDictionary values, class System.Collections.IDictionary oldValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Function Update (keys As IDictionary, values As IDictionary, oldValues As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(System::Collections::IDictionary ^ keys, System::Collections::IDictionary ^ values, System::Collections::IDictionary ^ oldValues);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Collections.IDictionary" />
        <Parameter Name="values" Type="System.Collections.IDictionary" />
        <Parameter Name="oldValues" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="keys">Ключевые значения строк для обновляемых записей.</param>
        <param name="values">Значения строк, для обновления в источнике данных.</param>
        <param name="oldValues">Значения строк, которые проверяются на наличие конфликтов данных.</param>
        <summary>Выполняет операцию обновления.</summary>
        <returns>Количество записей, затронутых операцией обновления.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Как правило, не следует вызывать <xref:System.Web.UI.WebControls.LinqDataSource.Update%2A> метода из кода. Элемент управления с привязкой к данным автоматически вызывает <xref:System.Web.UI.WebControls.LinqDataSource.Update%2A> метод при выполнении пользователем соответствующего действия для обновления записи. При явном вызове метода <xref:System.Web.UI.WebControls.LinqDataSource.Update%2A> метод, если вы хотите создать свой собственный процесс для обновления данных.  
  
   
  
## Examples  
 В следующем примере показано, как программно обновить запись в источнике данных, после нажатия кнопки. Код передает <xref:System.Collections.Specialized.ListDictionary> объект, содержащий значение ключа <xref:System.Collections.Specialized.ListDictionary> , содержащий исходные значения и <xref:System.Collections.Specialized.ListDictionary> объект, который содержит новые значения для <xref:System.Web.UI.WebControls.LinqDataSource.Update%2A> метод.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Update#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Update/cs/Default2.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Update#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Update/vb/Default3.aspx.vb#1)]  
  
 В следующем примере показана разметка для предыдущего примера.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.Update#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Update/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.Update#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Update/vb/Default3.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Updated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Updated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Updated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Updated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Updated As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ Updated;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при завершении операции обновления.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обрабатывать <xref:System.Web.UI.WebControls.LinqDataSource.Updated> события для перехвата исключения в ходе операции обновления или проверить значения выходных параметров, после завершения операции обновления. Выходные параметры доступны из <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> объект, передаваемый в обработчики событий.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection UpdateParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection UpdateParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.UpdateParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UpdateParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ UpdateParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Эта коллекция не используется классом <see cref="T:System.Web.UI.WebControls.LinqDataSource" />.</summary>
        <value>Коллекция параметров.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Updating">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt; Updating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt; Updating" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Updating" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Updating As EventHandler(Of LinqDataSourceUpdateEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceUpdateEventArgs ^&gt; ^ Updating;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит перед операцией обновления.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обрабатывать <xref:System.Web.UI.WebControls.LinqDataSource.Updating> событий для проверки объекта обновления, для проверки на наличие ошибок проверки данных в классе данных, для изменения значения перед операцией обновления, или отменить операцию обновления. <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs> Содержит объект, передаваемый в обработчики событий в исходном объекте и обновленного объекта.  
  
 При возникновении ошибки проверки во время операции обновления, <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> содержит объект исключения проверки, которые выдают класс данных. Ошибка проверки происходит, если значения для обновления не соответствует типу свойства в классе данных, или в том случае, если оно не проходит настраиваемую проверку. В обработчике событий для <xref:System.Web.UI.WebControls.LinqDataSource.Updating> событий, можно извлечь исключения проверки и предпринять соответствующие действия.  
  
 Если исключение в обработчике событий для <xref:System.Web.UI.WebControls.LinqDataSource.Updating> событий, необходимо обрабатывать исключение в этом обработчике события. Исключение не будут передаваться в обработчик событий для <xref:System.Web.UI.WebControls.LinqDataSource.Updated> событий (через <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> свойство <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> объекта). <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> Свойство содержит только исключения, возникающие после <xref:System.Web.UI.WebControls.LinqDataSource.Updating> событий.  
  
   
  
## Examples  
 В примере показан обработчик событий для <xref:System.Web.UI.WebControls.LinqDataSource.Updating> события. Код сравнивает свойства из <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> свойство и <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> изменился ли значение свойства. Если значение изменилось, значение <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> свойству `true`.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/vb/Default.aspx.vb#1)]  
  
 В примере показан обработчик событий для <xref:System.Web.UI.WebControls.LinqDataSource.Updating> событие, которое получает исключения проверки.  
  
```vb  
Protected Sub LinqDataSource_Updating(ByVal sender As Object, _  
        ByVal e As LinqDataSourceUpdateEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message & "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Updating(object sender,   
        LinqDataSourceUpdateEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 Предыдущий пример получает исключения проверки. Может быть создано исключение, если значение не соответствует типу свойства. Он также может быть создано настраиваемой проверке, такие как в следующем примере. `OnAgeChanging` Метод проверяет, что количество `Age` свойство не может быть отрицательным.  
  
```csharp  
partial void  OnAgeChanging(int? value)  
{  
    if (value < 0)  
    {  
        throw new Exception("Age cannot be a negative number.");  
    }  
}  
```  
  
```vb  
Private Sub OnAgeChanging(ByVal value As System.Nullable(Of Integer))  
    If (value < 0) Then  
        Throw New Exception("Age cannot be a negative number.")  
    End If  
End Sub  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Where">
      <MemberSignature Language="C#" Value="public string Where { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Where" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.Where" />
      <MemberSignature Language="VB.NET" Value="Public Property Where As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Where { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.Where</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, которое указывает, что условия должны иметь значение true, чтобы запись могла включаться в извлеченные данные.</summary>
        <value>Строка, которая используется для создания предложения Where.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вы используете <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> свойство для указания условий, для записи должны быть возвращены из запроса. Синтаксис <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> имеет то же, как синтаксис предложения LINQ Where в C#.  
  
 Укажите выражение, результатом является логическое значение, и если выражение, результатом которого является `true` для строки, строка включается в результирующий набор. Выражения состоят из имен столбцов, операторов сравнения и значений для сравнения, как показано в следующем примере:  
  
```  
<asp:LinqDataSource ... Where="Price > 50"...>  
```  
  
 Чтобы указать несколько выражений, которые связаны с помощью логических `AND` или `OR` используйте операторы, `&&` как логический оператор AND и `||` как логический оператор или, как показано в следующем примере:  
  
```  
<asp:LinqDataSource ... Where="Price > 50 && Price < 100"...>  
<asp:LinqDataSource ... Where="Price <= 50 || Price >= 100"...>  
```  
  
 Если вы хотите проверить свойство со значением строки литерала, значение символьной строки должны заключаться в двойные кавычки. Чтобы сделать это в разметке, заключите <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> значение предложения в одинарные кавычки, как показано в следующем примере:  
  
```  
<asp:LinqDataSource ... Where='Category = "Sports"' ... >  
```  
  
 Чтобы протестировать значение символьной строки в коде, используйте escape-символы, которые подходят для языка, который используется для вставки двойных кавычек, как показано в следующем примере:  
  
```vb  
LinqDataSource1.Where = "Category = ""Sports"""  
```  
  
```csharp  
LinqDataSource1.Where = "Category = \"Sports\"";  
```  
  
 Если вы хотите проверить, является ли строка больше или меньше другой строки, необходимо использовать методы класса <xref:System.String> класса вместо `<` или `>` операторы между именем столбца и строковым значением. Примеры показывают, как выбрать строки, значения категории которых меньше, меньше или равно, больше, или больше или равно «Спорт»:  
  
```  
<asp:LinqDataSource ... Where='Category.CompareTo("Sports") < 0' ... >  
<asp:LinqDataSource ... Where='Category.CompareTo("Sports") <= 0' ... >  
<asp:LinqDataSource ... Where='Category.CompareTo("Sports") > 0' ... >  
<asp:LinqDataSource ... Where='Category.CompareTo("Sports") >= 0' ... >  
```  
  
 Можно также использовать другие методы <xref:System.String> класса, такие как <xref:System.String.StartsWith%2A>, <xref:System.String.EndsWith%2A>, и <xref:System.String.Contains%2A>. Дополнительные сведения о сравнении строк см. в разделе [сравнение строк](~/docs/standard/base-types/comparing.md). Дополнительные сведения о том, где синтаксис предложения в разделе [операторы C#](http://msdn.microsoft.com/library/0301e31f-22ad-49af-ac3c-d5eae7f0ac43) и [где предложение](~/docs/csharp/language-reference/keywords/where-clause.md).  
  
 Помимо фильтрации на основе статических значений, которые определяются при создании веб-страницы, можно фильтровать на основе динамических значений, которые вычисляются во время выполнения. В этом случае включать именованный параметр в <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> свойство, которое работает как заполнитель для значения. Затем добавьте параметр с соответствующим именем для <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> коллекции.  
  
 Кроме того, можно задать <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> свойства `true` и задать параметры в <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> коллекции. Когда <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> свойство `true`, нет необходимости включать именованные параметры в <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> свойство. Вместо этого <xref:System.Web.UI.WebControls.LinqDataSource> управления автоматически создает предложение Where предложения на основе параметров в <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> свойство.  
  
 Дополнительные сведения о фильтрации данных см. в разделе [Пошаговое руководство: Выбор и фильтрация подмножества данных с элементами управления GridView и LinqDataSource](http://msdn.microsoft.com/library/c1cca3e8-86e4-4e69-a29f-1c05b91f2205).  
  
   
  
## Examples  
 Приведенный ниже показано, как фильтровать данные, возвращенные запросом на основе статического условия.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default5.aspx#5)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default5.aspx#5)]  
  
 В следующем примере показано, как для фильтрации данных на основе значения, предоставленного пользователем во время выполнения. В этом примере <xref:System.Web.UI.WebControls.DropDownList> управления и <xref:System.Web.UI.WebControls.GridView> управления отображаются на странице. Когда пользователь выбирает одно из значений в <xref:System.Web.UI.WebControls.DropDownList> управления <xref:System.Web.UI.WebControls.LinqDataSource> элемент управления выбирает из `Products` только строки, имеющие таблицы `UserPrice` значения, равные выбранное значение. <xref:System.Web.UI.WebControls.GridView> Элемент управления отображает отфильтрованные данные.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default6.aspx#6)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default6.aspx#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WhereParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection WhereParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection WhereParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.WhereParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WhereParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ WhereParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.WhereParameters</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает коллекцию параметров, которые используются для создания оператора Where.</summary>
        <value>Коллекцию параметров, которые используются для создания предложения Where в свойстве <see cref="P:System.Web.UI.WebControls.LinqDataSource.Where" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.LinqDataSource> Управления использует параметры в <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> коллекции для создания оператора предложение во время выполнения. Добавить параметры, чтобы <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> коллекции, если требуется программно задать одно или несколько условий в предложении Where предложения. Например, может найти таблицу базы данных для записи, в которых Фамилия равно значению <xref:System.Web.UI.WebControls.TextBox> элемента управления. В этом случае добавьте параметр <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> коллекции значение текстового поля.  
  
 Если не требуется задать значение во время выполнения в предложении Where предложения, не нужно использовать <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> коллекции. Можно определить поля для извлечения в <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> свойство. Например, для возвращения значений из таблицы базы данных где `LastName` значение равно «Adams» в разметке <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> свойства `'LastName = "Adams"'` без параметров.  
  
 Чтобы задать значения в <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> коллекции, назначить имя каждого параметра, а затем добавить заполнитель в <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> свойства для этого параметра. В предложении Where предложения, перед именем параметра с символа @.  
  
   
  
## Examples  
 В следующем примере показано, как использовать <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> коллекции для динамического создания Where предложения. <xref:System.Web.UI.WebControls.LinqDataSource> Управления возвращает все записи со значением в `Price` столбец, который больше, чем значение, выбранное пользователем в <xref:System.Web.UI.WebControls.DropDownList> элемента управления.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default6.aspx#6)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default6.aspx#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>