<Type Name="SendMailErrorEventArgs" FullName="System.Web.UI.WebControls.SendMailErrorEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9fe284598deae2244d35755d6c8592618f509fa6" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36379632" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SendMailErrorEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SendMailErrorEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.SendMailErrorEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class SendMailErrorEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class SendMailErrorEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type SendMailErrorEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Предоставляет данные для события <see langword="SendMailError" /> в таких элементах управления, как <see cref="T:System.Web.UI.WebControls.ChangePassword" />, <see cref="T:System.Web.UI.WebControls.CreateUserWizard" /> и <see cref="T:System.Web.UI.WebControls.PasswordRecovery" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SendMailErrorEventArgs> Объект содержит сообщение об ошибке, вызванного почтовым SMTP, если сообщение электронной почты не может быть отправлен <xref:System.Web.UI.WebControls.ChangePassword> управления, или <xref:System.Web.UI.WebControls.CreateUserWizard> элемента управления. В этом случае <xref:System.Web.UI.WebControls.SendMailErrorEventArgs> объект отправляется для <xref:System.Web.UI.WebControls.SendMailErrorEventHandler>.  
  
 Создание <xref:System.Web.UI.WebControls.SendMailErrorEventHandler> делегат, обрабатывающий событие. Обработка события позволяет веб-приложения продолжить работу, несмотря на то, что произошло исключение. Это полезно в том случае, если она не важное значение для отправки сообщения электронной почты. Например если исключение возникает при работе пользователя с пошаговым мастером, он может быть предпочтительнее записать ошибку в журнал, отобразить информационное сообщение для пользователя и позволить пользователю завершить работу мастера.  
  
 Изучите <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Exception%2A> свойства, чтобы определить действительную причину исключения. Наиболее распространенной причиной исключения является ошибка конфигурации в [ &lt;smtp&gt; Element (Network Settings)](~/docs/framework/configure-apps/file-schema/network/smtp-element-network-settings.md) файла конфигурации компьютера. Несмотря на то, что подобные ошибки обычно выявляются во время разработки и отладки приложения, почтовым серверам может привести к неожиданному в рабочей среде и необходимо определить, следует ли все приложение, чтобы привести к сбою в этой ситуации. Если нет, то обработка события позволяет продолжить выполнение приложения.  
  
 Необходимо задать <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> свойства `true` для указывают, что исключение было обработано; в противном случае, исключение создается снова и включит исходный вызов стека и сообщение об ошибке.  
  
 Если не создать обработчик событий для <xref:System.Web.UI.WebControls.ChangePassword.SendMailError> событий, или при создании обработчика событий, но оставить <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> свойство `false`, веб-приложение перестанет работать, если произошла ошибка при отправке сообщения электронной почты и будет ASP.NET сообщение об ошибке.  
  
 <xref:System.Web.UI.WebControls.ChangePassword.OnSendMailError%2A> Метод также позволяет производным классам обрабатывать событие, вместо этого, выполняемая <xref:System.Web.UI.WebControls.SendMailErrorEventHandler>. Это предпочтительная методика обработки событий в класс, производный от <xref:System.Web.UI.WebControls.ChangePassword> или <xref:System.Web.UI.WebControls.CreateUserWizard>.  
  
 Дополнительные сведения об обработке событий см. в разделе [обработка событий сервера на страницах Web Forms ASP.NET](http://msdn.microsoft.com/library/765bfc89-33ee-4d0d-bbe6-3b172c06def9).  
  
   
  
## Examples  
 В следующем примере кода демонстрируется страница ASP.NET, которая использует <xref:System.Web.UI.WebControls.ChangePassword> веб-элемента управления, а также включает обработчик событий для <xref:System.Web.UI.WebControls.ChangePassword.SendMailError> событие с именем SendMailError. В примере кода предполагается, что веб-сайт ASP.NET настроен на использование членства ASP.NET и проверки подлинности форм и что пользователь был создан, имя и пароль которого вам известны. Дополнительные сведения см. в разделе [как: реализация простой проверки подлинности форм](http://msdn.microsoft.com/library/9522bc8d-1a41-480a-aa11-c389a4ac2d2e).  
  
 Если смена пароля прошла успешно, код в `SendingMail` обработчик событий пытается отправить сообщение электронной почты для пользователей, чтобы подтвердить изменение. В порядке для работы этого примера кода на сервере должен быть настроен протокол SMTP. Сведения о настройке SMTP-сервера см. в разделе [NIB: Практическое: Установка и настройка виртуальных SMTP-серверов в IIS 6.0](http://msdn.microsoft.com/library/ed204b58-24af-47d0-9687-60e5df5f17f8). В целях в этом примере нет необходимости настройки SMTP-сервера; Пример предназначен для тестирования не удалось отправить сообщение электронной почты.  
  
 Если почтовый сервер не настроен правильно или другой ошибки и не удается отправить сообщение электронной почты, `SendMailError` функция. Сообщение отображается для пользователя. Кроме того событие заносится в журнал событий приложений Windows, исходя из предположения, что источник события с именем MySamplesSite уже существует. См. в примере кода ниже для создания заданного источника события. Дополнительные сведения о создании источника событий см. в разделе [обработка событий сервера на страницах Web Forms ASP.NET](http://msdn.microsoft.com/library/765bfc89-33ee-4d0d-bbe6-3b172c06def9). <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> Свойство <xref:System.Web.UI.WebControls.SendMailErrorEventArgs> , присваивается значение `true` для указания, что ошибка была обработана.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SendMailErrorEventHandler#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SendMailErrorEventHandler/CS/changepassword_cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SendMailErrorEventHandler#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SendMailErrorEventHandler/VB/changepassword_vb.aspx#1)]  
  
 В следующем примере кода следует используйте, если требуется программно добавить источник события с именем MySamplesSite в журнал приложений. Источник событий должен существовать в первом примере кода для правильной работы. В следующем примере кода требуются права администратора.  
  
 [!code-csharp[System.Diagnostics.EventLog.CreateEventSource#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Diagnostics.EventLog.CreateEventSource/CS/createeventsource.cs#1)]
 [!code-vb[System.Diagnostics.EventLog.CreateEventSource#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Diagnostics.EventLog.CreateEventSource/VB/createeventsource.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>При переопределении метода <see cref="M:System.Web.UI.WebControls.ChangePassword.OnSendMailError(System.Web.UI.WebControls.SendMailErrorEventArgs)" /> в производном классе нужно убедиться, что для вызова <see cref="M:System.Web.UI.WebControls.ChangePassword.OnSendMailError(System.Web.UI.WebControls.SendMailErrorEventArgs)" /> метод базового класса, чтобы зарегистрированные делегаты получили событие.</para>
    </block>
    <altmember cref="E:System.Web.UI.WebControls.CreateUserWizard.SendMailError" />
    <altmember cref="E:System.Web.UI.WebControls.ChangePassword.SendMailError" />
    <altmember cref="E:System.Web.UI.WebControls.PasswordRecovery.SendMailError" />
    <altmember cref="T:System.Net.Mail.MailMessage" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SendMailErrorEventArgs (Exception e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Exception e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SendMailErrorEventArgs.#ctor(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (e As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SendMailErrorEventArgs(Exception ^ e);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.SendMailErrorEventArgs : Exception -&gt; System.Web.UI.WebControls.SendMailErrorEventArgs" Usage="new System.Web.UI.WebControls.SendMailErrorEventArgs e" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="e" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="e">Объект <see cref="T:System.Exception" />, содержащий исключение.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.UI.WebControls.SendMailErrorEventArgs" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Web.UI.WebControls.CreateUserWizard.SendMailError" />
        <altmember cref="E:System.Web.UI.WebControls.ChangePassword.SendMailError" />
        <altmember cref="E:System.Web.UI.WebControls.PasswordRecovery.SendMailError" />
        <altmember cref="T:System.Net.Mail.MailMessage" />
      </Docs>
    </Member>
    <Member MemberName="Exception">
      <MemberSignature Language="C#" Value="public Exception Exception { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Exception Exception" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SendMailErrorEventArgs.Exception" />
      <MemberSignature Language="VB.NET" Value="Public Property Exception As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Exception ^ Exception { Exception ^ get(); void set(Exception ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Exception : Exception with get, set" Usage="System.Web.UI.WebControls.SendMailErrorEventArgs.Exception" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает исключение, выбрасываемое почтовым SMTP-сервером при невозможности отправить сообщение электронной почты.</summary>
        <value>Объект <see cref="T:System.Exception" />, который содержит исключение.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Exception%2A> Свойство содержит исключение, вызванное почтовым SMTP, если сообщение электронной почты не может быть отправлен <xref:System.Web.UI.WebControls.ChangePassword> управления или <xref:System.Web.UI.WebControls.CreateUserWizard>. Наиболее распространенной причиной этого исключения является ошибка конфигурации в [ &lt;smtp&gt; Element (Network Settings)](~/docs/framework/configure-apps/file-schema/network/smtp-element-network-settings.md) файла конфигурации компьютера, при этом получается следующее сообщение об исключении: `The transport failed to connect to the server.`  
  
 Исключения не возникают, если имеется ошибка в сообщении электронной почты при внедрении в файл с помощью <xref:System.Web.UI.WebControls.MailDefinition.EmbeddedObjects%2A>. Вместо этого внедренный файл отображается неработающие при просмотре сообщения электронной почты.  
  
 Необходимо задать <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> объекта, переданного в качестве `e` параметр <xref:System.Web.UI.WebControls.SendMailErrorEventArgs>в `true` для указывают, что исключение было обработано; в противном случае, исключение создается снова и включает исходный вызов стека и сообщение об ошибке.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется страница ASP.NET, которая использует <xref:System.Web.UI.WebControls.ChangePassword> веб-элемента управления, а также включает обработчик событий для <xref:System.Web.UI.WebControls.ChangePassword.SendMailError> событие с именем `SendMailError`. В примере кода предполагается, что веб-сайт ASP.NET настроен на использование членства ASP.NET и проверки подлинности форм и что пользователь был создан, имя и пароль которого вам известны. Дополнительные сведения см. в разделе [как: реализация простой проверки подлинности форм](http://msdn.microsoft.com/library/9522bc8d-1a41-480a-aa11-c389a4ac2d2e).  
  
 Если смена пароля прошла успешно, код в `SendingMail` обработчик событий пытается отправить сообщение электронной почты для пользователей, чтобы подтвердить изменение. В порядке для работы этого примера кода на сервере должен быть настроен протокол SMTP. Сведения о настройке SMTP-сервера см. в разделе [NIB: Практическое: Установка и настройка виртуальных SMTP-серверов в IIS 6.0](http://msdn.microsoft.com/library/ed204b58-24af-47d0-9687-60e5df5f17f8). В целях в этом примере нет необходимости настройки SMTP-сервера; Пример предназначен для тестирования не удалось отправить сообщение электронной почты.  
  
 Если почтовый сервер не настроен правильно или другой ошибки и не удается отправить сообщение электронной почты, `SendMailError` функция. Сообщение отображается для пользователя. Кроме того событие заносится в журнал событий приложений Windows, исходя из предположения, что источник события с именем MySamplesSite уже существует. См. в примере кода ниже для создания заданного источника события. Дополнительные сведения о создании источника событий см. в разделе [обработка событий сервера на страницах Web Forms ASP.NET](http://msdn.microsoft.com/library/765bfc89-33ee-4d0d-bbe6-3b172c06def9). <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> Свойство <xref:System.Web.UI.WebControls.SendMailErrorEventArgs> , присваивается значение `true` для указания, что ошибка была обработана.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SendMailErrorEventHandler#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SendMailErrorEventHandler/CS/changepassword_cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SendMailErrorEventHandler#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SendMailErrorEventHandler/VB/changepassword_vb.aspx#1)]  
  
 В следующем примере кода следует используйте, если требуется программно добавить источник события с именем MySamplesSite в журнал приложений. Источник событий должен существовать в первом примере кода для правильной работы. В следующем примере кода требуются права администратора.  
  
 [!code-csharp[System.Diagnostics.EventLog.CreateEventSource#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Diagnostics.EventLog.CreateEventSource/CS/createeventsource.cs#1)]
 [!code-vb[System.Diagnostics.EventLog.CreateEventSource#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Diagnostics.EventLog.CreateEventSource/VB/createeventsource.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.CreateUserWizard.SendMailError" />
        <altmember cref="E:System.Web.UI.WebControls.ChangePassword.SendMailError" />
        <altmember cref="E:System.Web.UI.WebControls.PasswordRecovery.SendMailError" />
        <altmember cref="T:System.Net.Mail.MailMessage" />
      </Docs>
    </Member>
    <Member MemberName="Handled">
      <MemberSignature Language="C#" Value="public bool Handled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Handled" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled" />
      <MemberSignature Language="VB.NET" Value="Public Property Handled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Handled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Handled : bool with get, set" Usage="System.Web.UI.WebControls.SendMailErrorEventArgs.Handled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Указывает, было ли обработано исключение SMTP, содержащееся в свойстве <see cref="P:System.Web.UI.WebControls.SendMailErrorEventArgs.Exception" />.</summary>
        <value>Если значение равно <see langword="true" />, исключение утилизируется и обрабатывается делегатом <see cref="T:System.Web.UI.WebControls.SendMailErrorEventHandler" />. Если значение равно <see langword="false" />, исключение выбрасывается, включая исходный стек вызова и сообщение об ошибке.  Значение по умолчанию: <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> Указывает свойство, если <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Exception%2A> было обработано. Исключение инициируется почтовым SMTP, когда сообщение электронной почты не может быть отправлен <xref:System.Web.UI.WebControls.ChangePassword> управления или <xref:System.Web.UI.WebControls.CreateUserWizard>. Наиболее распространенной причиной исключения является ошибка конфигурации в [ &lt;smtp&gt; Element (Network Settings)](~/docs/framework/configure-apps/file-schema/network/smtp-element-network-settings.md) файла конфигурации компьютера. Несмотря на то, что подобные ошибки обычно выявляются во время разработки и отладки приложения, почтовым серверам может привести к неожиданному в рабочей среде и необходимо определить, следует ли все приложение, чтобы привести к сбою в этой ситуации. Если нет, то обработка события позволяет продолжить выполнение приложения.  
  
 Если не создать обработчик событий для <xref:System.Web.UI.WebControls.ChangePassword.SendMailError> событий, или при создании обработчика событий, но оставить <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> свойство `false`, веб-приложение перестанет работать, если произошла ошибка при отправке сообщения электронной почты и будет ASP.NET сообщение об ошибке. Обработка события позволяет веб-приложения продолжить работу, несмотря на то, что произошло исключение. Это полезно в том случае, если она не важное значение для отправки сообщения электронной почты. Например если исключение возникает при работе пользователя с пошаговым мастером, он может быть предпочтительнее записать ошибку в журнал, отобразить информационное сообщение для пользователя и позволить пользователю завершить работу мастера.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется страница ASP.NET, которая использует <xref:System.Web.UI.WebControls.ChangePassword> веб-элемента управления, а также включает обработчик событий для <xref:System.Web.UI.WebControls.ChangePassword.SendMailError> событие с именем `SendMailError`. В примере кода предполагается, что веб-сайт ASP.NET настроен на использование членства ASP.NET и проверки подлинности форм и что пользователь был создан, имя и пароль которого вам известны. Дополнительные сведения см. в разделе [как: реализация простой проверки подлинности форм](http://msdn.microsoft.com/library/9522bc8d-1a41-480a-aa11-c389a4ac2d2e).  
  
 Если смена пароля прошла успешно, код в `SendingMail` обработчик событий пытается отправить сообщение электронной почты для пользователей, чтобы подтвердить изменение. В порядке для работы этого примера кода на сервере должен быть настроен протокол SMTP. Сведения о настройке SMTP-сервера см. в разделе [NIB: Практическое: Установка и настройка виртуальных SMTP-серверов в IIS 6.0](http://msdn.microsoft.com/library/ed204b58-24af-47d0-9687-60e5df5f17f8). В целях в этом примере нет необходимости настройки SMTP-сервера; Пример предназначен для тестирования не удалось отправить сообщение электронной почты.  
  
 Если почтовый сервер не настроен правильно или другой ошибки и не удается отправить сообщение электронной почты, `SendMailError` функция. Сообщение отображается для пользователя. Кроме того событие заносится в журнал событий приложений Windows, исходя из предположения, что источник события с именем MySamplesSite уже существует. См. в примере кода ниже для создания заданного источника события. Дополнительные сведения о создании источника событий см. в разделе [обработка событий сервера на страницах Web Forms ASP.NET](http://msdn.microsoft.com/library/765bfc89-33ee-4d0d-bbe6-3b172c06def9). <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> Свойство <xref:System.Web.UI.WebControls.SendMailErrorEventArgs> , присваивается значение `true` для указания, что ошибка была обработана.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SendMailErrorEventHandler#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SendMailErrorEventHandler/CS/changepassword_cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SendMailErrorEventHandler#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SendMailErrorEventHandler/VB/changepassword_vb.aspx#1)]  
  
 В следующем примере кода следует используйте, если требуется программно добавить источник события с именем MySamplesSite в журнал приложений. Источник событий должен существовать в первом примере кода для правильной работы. В следующем примере кода требуются права администратора.  
  
 [!code-csharp[System.Diagnostics.EventLog.CreateEventSource#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Diagnostics.EventLog.CreateEventSource/CS/createeventsource.cs#1)]
 [!code-vb[System.Diagnostics.EventLog.CreateEventSource#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Diagnostics.EventLog.CreateEventSource/VB/createeventsource.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.CreateUserWizard.SendMailError" />
        <altmember cref="E:System.Web.UI.WebControls.ChangePassword.SendMailError" />
        <altmember cref="E:System.Web.UI.WebControls.PasswordRecovery.SendMailError" />
        <altmember cref="T:System.Net.Mail.MailMessage" />
      </Docs>
    </Member>
  </Members>
</Type>