<Type Name="ChtmlTextWriter" FullName="System.Web.UI.ChtmlTextWriter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="28ae5dfacad6cbd152b6f332ea1464246759b69a" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36378176" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ChtmlTextWriter : System.Web.UI.Html32TextWriter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ChtmlTextWriter extends System.Web.UI.Html32TextWriter" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.ChtmlTextWriter" />
  <TypeSignature Language="VB.NET" Value="Public Class ChtmlTextWriter&#xA;Inherits Html32TextWriter" />
  <TypeSignature Language="C++ CLI" Value="public ref class ChtmlTextWriter : System::Web::UI::Html32TextWriter" />
  <TypeSignature Language="F#" Value="type ChtmlTextWriter = class&#xA;    inherit Html32TextWriter" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.Html32TextWriter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Записывает в исходящий поток серверного элемента управления ASP.NET серии специальных символов сHTML и текст. Класс <see cref="T:System.Web.UI.ChtmlTextWriter" /> предоставляет возможности форматирования, использующиеся серверными элементами управления ASP.NET при отрисовке клиентам содержимого cHTML.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Compact HTML или cHTML является подмножеством HTML 2.0, HTML 3.2 и HTML 4.0 и предназначен для визуализации на устройствах с ограниченным объемом памяти и ресурсов процессора, вместе с экранами небольших, ограниченный форматирование возможностей, а также ограниченное число входных параметров (например, сотовый телефон планшетное). Таким образом cHTML не поддерживает следующее:  
  
-   JPEG-изображения.  
  
-   Таблицы.  
  
-   Гиперкарты.  
  
-   Несколько символов шрифтов и стилей.  
  
-   Фоновые цвета и изображения.  
  
-   Кадры.  
  
-   Таблицы стилей.  
  
 <xref:System.Web.UI.ChtmlTextWriter> Класс является производным от <xref:System.Web.UI.Html32TextWriter> класса и большая часть его функциональность предоставляется <xref:System.Web.UI.Html32TextWriter> и базовый класс для всех модулей записи текста разметки, который является <xref:System.Web.UI.HtmlTextWriter> класса.  
  
   
  
## Examples  
 В следующем примере кода показано, как создать класс с именем `CustomChtmlTextWriter` является производным от <xref:System.Web.UI.ChtmlTextWriter> класса. Он создает два конструктора и переопределяет <xref:System.Web.UI.ChtmlTextWriter.OnAttributeRender%2A> метод, чтобы запретить `bgcolor` атрибут стиля из записываются в выходной поток <xref:System.Web.UI.ChtmlTextWriter> объекта. Он также создает класс с именем `ChtmlCustomPageAdapter` , определяющий один метод `CreateCustomChtmlTextWriter`, который создает и возвращает экземпляр класса `CustomChtmlTextWriter` класса. `CustomChtmlTextWriter` Готовит cHTML содержимое для страницы на устройствах с помощью браузеров, использующих cHTML разметки.  
  
 [!code-csharp[System.Web.UI.ChtmlTextWriter_Sample4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/cs/chtmltextwriter.cs#1)]
 [!code-vb[System.Web.UI.ChtmlTextWriter_Sample4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/vb/chtmltextwriter.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.XhtmlTextWriter" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.UI.ChtmlTextWriter" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ChtmlTextWriter (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.#ctor(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ChtmlTextWriter(System::IO::TextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.ChtmlTextWriter : System.IO.TextWriter -&gt; System.Web.UI.ChtmlTextWriter" Usage="new System.Web.UI.ChtmlTextWriter writer" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">
          <see cref="T:System.IO.TextWriter" /> отображает содержимое разметки.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.UI.ChtmlTextWriter" />, использующего константу <see cref="F:System.Web.UI.HtmlTextWriter.DefaultTabString" /> для отступа строк.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ChtmlTextWriter> Класс имеет два конструктора, являющихся стандартными для всех классов, которые прямо или косвенно наследующие от <xref:System.Web.UI.HtmlTextWriter> класса.  
  
 <xref:System.Web.UI.ChtmlTextWriter.%23ctor%2A> Конструктор, который принимает экземпляр <xref:System.IO.TextWriter> класс как параметр, вызывает второй конструктор и передает его значения параметров:  
  
-   <xref:System.IO.TextWriter>.  
  
-   Строковое значение, которое указано в <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> поле, которое определяет табуляции, используемый для записи текста XHTML.  
  
   
  
## Examples  
 В следующем примере кода показано, как создать класс с именем `ChtmlCustomPageAdapter` и определяет один метод `CreateCustomChtmlTextWriter`, который создает и возвращает экземпляр класса `CustomChtmlTextWriter` класса. `CustomChtmlTextWriter` Выводит содержимое cHTML страниц на устройствах с помощью браузеров, использующих cHTML разметки.  
  
 Данный пример кода является частью большего примера, приведенного для <xref:System.Web.UI.ChtmlTextWriter> класса.  
  
 [!code-csharp[System.Web.UI.ChtmlTextWriter_Sample4#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/cs/chtmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.ChtmlTextWriter_Sample4#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/vb/chtmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ChtmlTextWriter (System.IO.TextWriter writer, string tabString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer, string tabString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.#ctor(System.IO.TextWriter,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter, tabString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ChtmlTextWriter(System::IO::TextWriter ^ writer, System::String ^ tabString);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.ChtmlTextWriter : System.IO.TextWriter * string -&gt; System.Web.UI.ChtmlTextWriter" Usage="new System.Web.UI.ChtmlTextWriter (writer, tabString)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="tabString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="writer">
          <see cref="T:System.IO.TextWriter" /> отображает содержимое разметки.</param>
        <param name="tabString">Количество пробелов, определенных в <see cref="P:System.Web.UI.HtmlTextWriter.Indent" />.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.UI.ChtmlTextWriter" /> с указанным отступом строки.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ChtmlTextWriter.%23ctor%2A> Конструктор, который принимает как экземпляр <xref:System.IO.TextWriter> класс и строку в качестве параметров вызовов <xref:System.Web.UI.Html32TextWriter> конструктор, который принимает те же параметры при создании экземпляра <xref:System.Web.UI.ChtmlTextWriter> класса.  
  
   
  
## Examples  
 В следующем примере кода показано, как создать пользовательский класс с именем `CustomChtmlTextWriter` является производным от <xref:System.Web.UI.ChtmlTextWriter> класса. Создает два конструктора, которые можно использовать для создания экземпляра пользовательского класса с таким шаблоном, как все классы, производные, непосредственно или косвенно от <xref:System.Web.UI.HtmlTextWriter> класса.  
  
 [!code-csharp[System.Web.UI.ChtmlTextWriter_Sample4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/cs/chtmltextwriter.cs#1)]
 [!code-vb[System.Web.UI.ChtmlTextWriter_Sample4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/vb/chtmltextwriter.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRecognizedAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddRecognizedAttribute (string elementName, string attributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddRecognizedAttribute(string elementName, string attributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddRecognizedAttribute (elementName As String, attributeName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddRecognizedAttribute(System::String ^ elementName, System::String ^ attributeName);" />
      <MemberSignature Language="F#" Value="abstract member AddRecognizedAttribute : string * string -&gt; unit&#xA;override this.AddRecognizedAttribute : string * string -&gt; unit" Usage="chtmlTextWriter.AddRecognizedAttribute (elementName, attributeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementName">cHTML-элемент для добавления к атрибуту.</param>
        <param name="attributeName">Атрибут, добавляемый к <c>elementName</c>.</param>
        <summary>Добавляет атрибут в cHTML-элемент объекта <see cref="T:System.Web.UI.ChtmlTextWriter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ChtmlTextWriter.AddRecognizedAttribute%2A> Метод добавляет атрибут к элементу cHTML. Распознанный атрибут сохраняется в распознанный атрибуты <xref:System.Collections.Hashtable> коллекцию <xref:System.Web.UI.ChtmlTextWriter> объекта, на который ссылается <xref:System.Web.UI.ChtmlTextWriter.RecognizedAttributes%2A> свойство.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.RecognizedAttributes" />
      </Docs>
    </Member>
    <Member MemberName="GlobalSuppressedAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable GlobalSuppressedAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable GlobalSuppressedAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ChtmlTextWriter.GlobalSuppressedAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property GlobalSuppressedAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ GlobalSuppressedAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GlobalSuppressedAttributes : System.Collections.Hashtable" Usage="System.Web.UI.ChtmlTextWriter.GlobalSuppressedAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает <see cref="T:System.Collections.Hashtable" /> объект глобально запрещенных атрибутов, которые не могут быть визуализированы на cHTML-элементах.</summary>
        <value>
          <see cref="T:System.Collections.Hashtable" /> глобально запрещенных атрибутов cHTML.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ниже перечислены глобально запрещенные атрибуты, заданные при создании нового экземпляра объекта <xref:System.Web.UI.ChtmlTextWriter> создается класс.  
  
|||  
|-|-|  
|`onclick`|`onmousemove`|  
|`ondblclick`|`onmouseout`|  
|`onmousedown`|`onkeypress`|  
|`onmouseup`|`onkeydown`|  
|`onmouseover`|`onkeyup`|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.RecognizedAttributes" />
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.SuppressedAttributes" />
      </Docs>
    </Member>
    <Member MemberName="OnAttributeRender">
      <MemberSignature Language="C#" Value="protected override bool OnAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnAttributeRender (name As String, value As String, key As HtmlTextWriterAttribute) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool OnAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterAttribute key);" />
      <MemberSignature Language="F#" Value="override this.OnAttributeRender : string * string * System.Web.UI.HtmlTextWriterAttribute -&gt; bool" Usage="chtmlTextWriter.OnAttributeRender (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="name">Визуализируемый cHTML-атрибут.</param>
        <param name="value">Значение, присваиваемое <c>name</c>.</param>
        <param name="key">Тег <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />, связанный с <c>name</c>.</param>
        <summary>Определяет, визуализируются ли указанный cHTML-атрибут и его значение на запрашиваемой странице. Можно переопределить метод <see cref="M:System.Web.UI.ChtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" /> в классах, производных от класса <see cref="T:System.Web.UI.ChtmlTextWriter" /> для фильтрации атрибутов, которые не нужно визуализировать на устройствах, поддерживающих cHTML.</summary>
        <returns>
          <see langword="true" /> для записи атрибута и его значения в исходящий поток <see cref="T:System.Web.UI.ChtmlTextWriter" />; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 По умолчанию <xref:System.Web.UI.ChtmlTextWriter.OnAttributeRender%2A> метод предотвращает глобально запрещенные атрибуты, которые перечислены в <xref:System.Web.UI.ChtmlTextWriter.GlobalSuppressedAttributes%2A> свойства и атрибуты конкретного элемента, подавляется, перечисленных в <xref:System.Web.UI.ChtmlTextWriter.SuppressedAttributes%2A> свойство из записываемая в поток вывода. Можно переопределить поведение <xref:System.Web.UI.ChtmlTextWriter.OnAttributeRender%2A> метода в классах, производных от <xref:System.Web.UI.ChtmlTextWriter> класса.  
  
   
  
## Examples  
 В следующем примере кода показано, как использовать пользовательский класс, который переопределяет <xref:System.Web.UI.ChtmlTextWriter.OnAttributeRender%2A> метод, чтобы запретить `bgcolor` атрибут из записываемая в поток вывода cHTML. Затем он вызывает функциональные возможности, предоставляемые базовый <xref:System.Web.UI.ChtmlTextWriter.OnAttributeRender%2A> метод <xref:System.Web.UI.ChtmlTextWriter> класса, чтобы гарантировать, что поведения по умолчанию используется, слишком.  
  
 Данный пример кода является частью большего примера, приведенного для <xref:System.Web.UI.ChtmlTextWriter> класса.  
  
 [!code-csharp[System.Web.UI.ChtmlTextWriter_Sample4#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/cs/chtmltextwriter.cs#2)]
 [!code-vb[System.Web.UI.ChtmlTextWriter_Sample4#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/vb/chtmltextwriter.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      </Docs>
    </Member>
    <Member MemberName="OnStyleAttributeRender">
      <MemberSignature Language="C#" Value="protected override bool OnStyleAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnStyleAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnStyleAttributeRender (name As String, value As String, key As HtmlTextWriterStyle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool OnStyleAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterStyle key);" />
      <MemberSignature Language="F#" Value="override this.OnStyleAttributeRender : string * string * System.Web.UI.HtmlTextWriterStyle -&gt; bool" Usage="chtmlTextWriter.OnStyleAttributeRender (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="name">Строка, содержащая имя стиля атрибута для визуализации.</param>
        <param name="value">Строка, содержащая значение, присваиваемое <c>name</c>.</param>
        <param name="key">Тег <see cref="T:System.Web.UI.HtmlTextWriterStyle" />, связанный с <c>name</c>.</param>
        <summary>Определяет, могут ли быть визуализированы указанные атрибут стиля разметки cHTML и его значение текущему элемент разметки.</summary>
        <returns>
          <see langword="true" /> если стиль может быть визуализирован; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ChtmlTextWriter.OnStyleAttributeRender%2A> Возвращает `false` при `key` равен <xref:System.Web.UI.HtmlTextWriterStyle.TextDecoration> поля, а значение — `"line-through"`.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      </Docs>
    </Member>
    <Member MemberName="OnTagRender">
      <MemberSignature Language="C#" Value="protected override bool OnTagRender (string name, System.Web.UI.HtmlTextWriterTag key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnTagRender(string name, valuetype System.Web.UI.HtmlTextWriterTag key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.OnTagRender(System.String,System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnTagRender (name As String, key As HtmlTextWriterTag) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool OnTagRender(System::String ^ name, System::Web::UI::HtmlTextWriterTag key);" />
      <MemberSignature Language="F#" Value="override this.OnTagRender : string * System.Web.UI.HtmlTextWriterTag -&gt; bool" Usage="chtmlTextWriter.OnTagRender (name, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="name">Строка, содержащая имя cHTML-элемента для визуализации.</param>
        <param name="key">Тег <see cref="T:System.Web.UI.HtmlTextWriterTag" />, связанный с <c>name</c>.</param>
        <summary>Определяет будет ли указанный элемент разметки cHTML визуализирован на запрашивающей странице.</summary>
        <returns>
          <see langword="true" /> если указанный cHTML-элемент разметки может быть визуализирован; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если элемент cHTML `span` элемент, <xref:System.Web.UI.ChtmlTextWriter.OnTagRender%2A> возвращает `false`. Для всех других тегов, она возвращает `true`.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.HtmlTextWriter.OnTagRender(System.String,System.Web.UI.HtmlTextWriterTag)" />
      </Docs>
    </Member>
    <Member MemberName="RecognizedAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable RecognizedAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable RecognizedAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ChtmlTextWriter.RecognizedAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property RecognizedAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ RecognizedAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RecognizedAttributes : System.Collections.Hashtable" Usage="System.Web.UI.ChtmlTextWriter.RecognizedAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает объект <see cref="T:System.Collections.Hashtable" /> распознанных атрибутов, которые могли бы визуализироваться на элементах cHTML.</summary>
        <value>
          <see cref="T:System.Collections.Hashtable" /> распознанных атрибутов cHTML.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте <xref:System.Web.UI.ChtmlTextWriter.AddRecognizedAttribute%2A> метод, чтобы добавить распознаваемым атрибуты распознаваемым атрибуты коллекции.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.GlobalSuppressedAttributes" />
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.SuppressedAttributes" />
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveRecognizedAttribute">
      <MemberSignature Language="C#" Value="public virtual void RemoveRecognizedAttribute (string elementName, string attributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveRecognizedAttribute(string elementName, string attributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveRecognizedAttribute (elementName As String, attributeName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveRecognizedAttribute(System::String ^ elementName, System::String ^ attributeName);" />
      <MemberSignature Language="F#" Value="abstract member RemoveRecognizedAttribute : string * string -&gt; unit&#xA;override this.RemoveRecognizedAttribute : string * string -&gt; unit" Usage="chtmlTextWriter.RemoveRecognizedAttribute (elementName, attributeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementName">cHTML-элемент, из которого должен быть удален атрибут.</param>
        <param name="attributeName">Атрибут, удаляемый из <c>elementName</c>.</param>
        <summary>Удаляет атрибут cHTML-элемента объекта <see cref="T:System.Web.UI.ChtmlTextWriter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ChtmlTextWriter.RemoveRecognizedAttribute%2A> Метод удаляет атрибут из cHTML-элемент. Распознанный атрибут удаляется из распознанных атрибуты <xref:System.Collections.Hashtable> коллекцию <xref:System.Web.UI.ChtmlTextWriter> объекта, на который ссылается <xref:System.Web.UI.ChtmlTextWriter.RecognizedAttributes%2A> свойство.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SuppressedAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable SuppressedAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable SuppressedAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ChtmlTextWriter.SuppressedAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property SuppressedAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ SuppressedAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SuppressedAttributes : System.Collections.Hashtable" Usage="System.Web.UI.ChtmlTextWriter.SuppressedAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает объект <see cref="T:System.Collections.Hashtable" /> указанных пользователем запрещенных атрибутов, которые не визуализируются на элементах cHTML.</summary>
        <value>
          <see cref="T:System.Collections.Hashtable" /> запрещенных атрибутов cHTML.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте <xref:System.Web.UI.ChtmlTextWriter.RemoveRecognizedAttribute%2A> метод, чтобы добавить атрибуты к коллекции запрещенные атрибуты.  
  
 Ниже перечислены запрещенные атрибуты по умолчанию, заданные для `div` элемент при создании нового экземпляра объекта <xref:System.Web.UI.ChtmlTextWriter> создается класс.  
  
|||  
|-|-|  
|`accesskey`|`gridlines`|  
|`cellspacing`|`rules`|  
|`cellpadding`||  
  
 Ниже перечислены запрещенные атрибуты по умолчанию, заданные для `span` элемент при создании нового экземпляра объекта <xref:System.Web.UI.ChtmlTextWriter> создается класс.  
  
|||  
|-|-|  
|`cellspacing`|`gridlines`|  
|`cellpadding`|`rules`|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.GlobalSuppressedAttributes" />
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.RecognizedAttributes" />
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="WriteBreak">
      <MemberSignature Language="C#" Value="public override void WriteBreak ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteBreak() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.WriteBreak" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteBreak ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteBreak();" />
      <MemberSignature Language="F#" Value="override this.WriteBreak : unit -&gt; unit" Usage="chtmlTextWriter.WriteBreak " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Записывает элемент <see langword="br" /> в исходящий cHTML поток.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте <xref:System.Web.UI.ChtmlTextWriter.WriteBreak%2A> разбить метод, чтобы вставить строку в поток cHMTL.  
  
   
  
## Examples  
 Этот раздел содержит два примера кода. В первом примере кода демонстрируется создание cHTML класса и пользовательских свойств. Во втором примере кода демонстрируется использование пользовательского класса на веб-странице.  
  
 Для использования настраиваемого `ChtmlSimplelabelAdapter` адаптер, добавьте приведенный ниже код либо соответствующий файл компьютера в подкаталог для браузера каталога конфигурации платформы .NET Framework или в файл пользовательского обозревателя в каталоге App_Browsers в Интернете корневой каталог приложения.  
  
```  
<controlAdapters>  
   <adapter controlType="AspNet.Samples.SimpleLabel"  
   adapterType="AspNet.Samples.ChtmlSimpleLabelAdapter" />  
</controlAdapters>  
```  
  
 В следующем примере кода показано, как создать класс адаптера cHTML с именем `ChtmlSimpleLabelAdapter` класса с именем `SimpleLabel`. Он создает настраиваемый `Control` свойство, позволяющее `ChtmlSimpleLabelAdapter` класса для доступа к членам `SimpleLabel` класса и переопределения <xref:System.Web.UI.WebControls.Adapters.WebControlAdapter.Render%2A> метод. При переопределении происходит следующее:  
  
-   Создает ссылку на <xref:System.Web.UI.ChtmlTextWriter> объекта, с именем `w`, который является производным от <xref:System.Web.UI.HtmlTextWriter> объекта, переданного в качестве `writer` параметр <xref:System.Web.UI.WebControls.Adapters.WebControlAdapter.Render%2A> метода.  
  
-   Он создает строку и присваивает ей `SimpleLabel.Text` значение.  
  
-   Он вызывает <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> метод для применения стилей, которые определены в <xref:System.Web.UI.WebControls.WebControl.ControlStyle%2A> свойство метки для cHTML поток вывода.  
  
-   Он записывает `Text` значение свойства для потока и закрытия блок стиля путем вызова <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> метод.  
  
-   Он вызывает <xref:System.Web.UI.ChtmlTextWriter.WriteBreak%2A> метод для отображения `br` элемент в выходной поток после отображения текста и стили.  
  
 [!code-csharp[System.Web.UI.ChtmlTextWriter_Sample1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample1/cs/chtmltestlabel.cs#2)]
 [!code-vb[System.Web.UI.ChtmlTextWriter_Sample1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample1/VB/chtmltestlabel.vb#2)]  
  
 В следующем примере демонстрируется использование `SimpleLabel` класса на веб-странице.  
  
 [!code-aspx-csharp[System.Web.UI.ChtmlTextWriter_Sample1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample1/cs/chtmltestlabel.aspx#3)]
 [!code-aspx-vb[System.Web.UI.ChtmlTextWriter_Sample1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample1/VB/chtmltestlabel.aspx#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.WriteEncodedText(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="WriteEncodedText">
      <MemberSignature Language="C#" Value="public override void WriteEncodedText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteEncodedText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.WriteEncodedText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteEncodedText (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteEncodedText(System::String ^ text);" />
      <MemberSignature Language="F#" Value="override this.WriteEncodedText : string -&gt; unit" Usage="chtmlTextWriter.WriteEncodedText text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Текстовая строка для кодирования и записи в поток вывода.</param>
        <summary>Кодирует указанный текст для запрашивающего устройства и записывает его в поток вывода.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если передан параметр text <xref:System.Web.UI.ChtmlTextWriter.WriteEncodedText%2A> метод `null` или имеет длину, равную нулю, то ничего не записывается.  
  
 Используйте <xref:System.Web.UI.ChtmlTextWriter.WriteEncodedText%2A> метод, когда строка содержит угловые скобки (\< или >) или знак амперсанда (&) и вы хотите убедиться, что они отображаются правильно на запрашивающего устройства.  
  
 <xref:System.Web.UI.ChtmlTextWriter.WriteEncodedText%2A> Метод использует базовый класс <xref:System.Web.UI.HtmlTextWriter.WriteEncodedText%2A> метод.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.WriteBreak" />
      </Docs>
    </Member>
  </Members>
</Type>