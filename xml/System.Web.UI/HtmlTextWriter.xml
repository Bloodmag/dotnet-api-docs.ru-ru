<Type Name="HtmlTextWriter" FullName="System.Web.UI.HtmlTextWriter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d3a8fb2f7e2f68d7ac988952a27d646a631b2924" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="06/14/2018" />
    <Meta Name="ms.locfileid" Value="34255047" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class HtmlTextWriter : System.IO.TextWriter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi HtmlTextWriter extends System.IO.TextWriter" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.HtmlTextWriter" />
  <TypeSignature Language="VB.NET" Value="Public Class HtmlTextWriter&#xA;Inherits TextWriter" />
  <TypeSignature Language="C++ CLI" Value="public ref class HtmlTextWriter : System::IO::TextWriter" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.IO.TextWriter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Записывает знаки разметки и текста в исходящий поток серверного элемента управления ASP.NET. Этот класс содержит возможности форматирования, которые используются серверными элементами управления ASP.NET при отрисовке разметки для клиентов.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter> Класс, используемый для визуализации HTML 4.0 для браузеров настольных компьютеров. <xref:System.Web.UI.HtmlTextWriter> Также является базовым классом для всех модулей записи разметки в <xref:System.Web.UI> пространства имен, включая <xref:System.Web.UI.ChtmlTextWriter>, <xref:System.Web.UI.Html32TextWriter>, и <xref:System.Web.UI.XhtmlTextWriter> классы. Эти классы используются для записи элементы, атрибуты и сведения о различных типов разметки стиль и макет. Кроме того эти классы используются классами адаптера страниц и элементов управления, связанных с любым языком разметки.  
  
 В большинстве случаев ASP.NET автоматически используется соответствующий модуль записи для запрашивающего устройства. Тем не менее, при создании пользовательского модуля записи текста, или если вы хотите указать конкретного модуля записи для отображения страницы для конкретного устройства, необходимо сопоставить модуль записи для страницы в `controlAdapters` раздел файла с расширением BROWSER приложения.  
  
   
  
## Examples  
 В следующем примере кода показано, как переопределить <xref:System.Web.UI.Control.Render%2A> метод пользовательского элемента управления, который является производным от <xref:System.Web.UI.Control> класса. В примере кода показано, как использовать различные <xref:System.Web.UI.HtmlTextWriter> методы, свойства и поля.  
  
 [!code-csharp[MarkupTextWriter_Samples1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Samples1/CS/markuptextwriter_samples1.cs#1)]
 [!code-vb[MarkupTextWriter_Samples1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Samples1/VB/markuptextwriter_samples1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IO.TextWriter" />
    <altmember cref="T:System.Web.UI.Control" />
    <altmember cref="T:System.Web.UI.Page" />
    <altmember cref="T:System.Web.UI.Adapters.ControlAdapter" />
    <altmember cref="T:System.Web.UI.Adapters.PageAdapter" />
    <altmember cref="T:System.Web.UI.ChtmlTextWriter" />
    <altmember cref="T:System.Web.UI.Html32TextWriter" />
    <altmember cref="T:System.Web.UI.XhtmlTextWriter" />
    <altmember cref="M:System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.UI.HtmlTextWriter" />.</summary>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.DefaultTabString" />
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HtmlTextWriter (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.#ctor(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HtmlTextWriter(System::IO::TextWriter ^ writer);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Экземпляр <see cref="T:System.IO.TextWriter" />, визуализирующий содержимое разметки.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.UI.HtmlTextWriter" />, использующего строку табуляции по умолчанию.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.%23ctor%2A> Перегруженная версия <xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%29> конструктор использует <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> константы, если требуется отступ строки. Он вызывает <xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%2CSystem.String%29> перегрузка для инициализации нового экземпляра.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется использование <xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%29> конструктор для создания пользовательского <xref:System.Web.UI.HtmlTextWriter> объект с именем `StyledLabelHtmlWriter.` при `MyPage` пользовательского класса, который является производным от <xref:System.Web.UI.Page> класса, запрошенное клиентом браузер, он использует `StyledLabelHtmlWriter` класса для отображения его содержимого в поток вывода.  
  
 [!code-cpp[HtmlTextWriter_Methods3#10](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#10)]
 [!code-csharp[HtmlTextWriter_Methods3#10](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#10)]
 [!code-vb[HtmlTextWriter_Methods3#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.DefaultTabString" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HtmlTextWriter (System.IO.TextWriter writer, string tabString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer, string tabString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.#ctor(System.IO.TextWriter,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter, tabString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HtmlTextWriter(System::IO::TextWriter ^ writer, System::String ^ tabString);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="tabString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="writer">
          <see cref="T:System.IO.TextWriter" /> отображает содержимое разметки.</param>
        <param name="tabString">Строка, используемая для отображения отступа строки.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.UI.HtmlTextWriter" /> заданным символом строки табуляции.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.%23ctor%2A> Перегруженная версия <xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%2CSystem.String%29> конструктор использует `tabString` при необходимости отступа для строки. Он вызывает <xref:System.IO.TextWriter.%23ctor%28System.IFormatProvider%29?displayProperty=nameWithType> базовый конструктор для инициализации нового экземпляра.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется использование <xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%29> конструктор для создания пользовательского <xref:System.Web.UI.HtmlTextWriter> объект с именем `StyledLabelHtmlWriter.` при `MyPage` пользовательского класса, который является производным от <xref:System.Web.UI.Page> класса, запрошенное клиентом браузер, он использует `StyledLabelHtmlWriter` класса для отображения его содержимого в поток вывода.  
  
 [!code-cpp[HtmlTextWriter_Methods3#10](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#10)]
 [!code-csharp[HtmlTextWriter_Methods3#10](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#10)]
 [!code-vb[HtmlTextWriter_Methods3#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AddAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Добавляет указанные атрибут и значение разметки в открывающий тег элемента, создаваемого объектом <see cref="T:System.Web.UI.HtmlTextWriter" /> с последующим вызовом метода <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddAttribute (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAttribute(string name, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddAttribute (name As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddAttribute(System::String ^ name, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Строка, содержащая имя атрибута для добавления.</param>
        <param name="value">Строка, содержащая значение для назначения атрибуту.</param>
        <summary>Добавляет указанные атрибут и значение разметки в открывающий тег элемента, создаваемого объектом <see cref="T:System.Web.UI.HtmlTextWriter" /> с последующим вызовом метода <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> перегруженная версия <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%29> метод, если атрибут не является одним из <xref:System.Web.UI.HtmlTextWriterAttribute> значения, или если атрибут не известен до времени выполнения.  
  
 Для экземпляра любого заданного элемента разметки <xref:System.Web.UI.HtmlTextWriter> класс содержит список атрибутов для этого элемента. Когда <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> вызове метода, атрибуты, добавляемые <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> метод подготавливаются к просмотру в открывающем теге элемента. Список атрибутов, затем удаляется из <xref:System.Web.UI.HtmlTextWriter> объекта.  
  
 Шаблон кодирования для визуализации элементов разметки выглядит следующим образом:  
  
-   Используйте <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> метод, чтобы добавить все атрибуты для элемента.  
  
-   Воспользуйтесь методом <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>.  
  
-   При необходимости, для подготовки к просмотру содержимое между открывающим и закрывающим тегами элемента используются другие методы.  
  
-   Воспользуйтесь методом <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A>.  
  
   
  
## Examples  
 В следующем примере кода показано, как вызвать <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> метод перед вызовом метода <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> метод. Код вызывает две различные перегрузки <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> и две различные перегрузки <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> перед вызовом <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> метод для отображения `<span>` элемент в выходной поток. <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%29> Метод используется для определения настраиваемого атрибута с именем `CustomAttribute` и пользовательские значения, с именем `CustomAttributeValue` для `<span>` , этот код отображает элемент.  
  
 [!code-csharp[MarkupTextWriter_Samples1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Samples1/CS/markuptextwriter_samples1.cs#2)]
 [!code-vb[MarkupTextWriter_Samples1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Samples1/VB/markuptextwriter_samples1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddStyleAttribute" />
      </Docs>
    </Member>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddAttribute (System.Web.UI.HtmlTextWriterAttribute key, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAttribute(valuetype System.Web.UI.HtmlTextWriterAttribute key, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddAttribute(System.Web.UI.HtmlTextWriterAttribute,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddAttribute (key As HtmlTextWriterAttribute, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddAttribute(System::Web::UI::HtmlTextWriterAttribute key, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />, представляющий атрибут разметки для добавления в исходящий поток.</param>
        <param name="value">Строка, содержащая значение для назначения атрибуту.</param>
        <summary>Добавляет атрибут разметки и значение атрибута в открывающий тег элемента, создаваемого объектом <see cref="T:System.Web.UI.HtmlTextWriter" /> с последующим вызовом метода <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> перегрузки <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%29> метод для отображения атрибута стандартной разметки.  
  
 Для экземпляра любого заданного элемента разметки <xref:System.Web.UI.HtmlTextWriter> класс содержит список атрибутов для этого элемента. Когда <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> вызывается метод, все атрибуты, которые были добавлены с <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> метод подготавливаются к просмотру в открывающем теге элемента. Список атрибутов, затем удаляется из <xref:System.Web.UI.HtmlTextWriter>.  
  
 Шаблон кодирования для визуализации элементов разметки выглядит следующим образом:  
  
-   Используйте <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> метод, чтобы добавить все атрибуты для элемента.  
  
-   Воспользуйтесь методом <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>.  
  
-   При необходимости, для подготовки к просмотру содержимое между открывающим и закрывающим тегами элемента используются другие методы.  
  
-   Воспользуйтесь методом <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A>.  
  
   
  
## Examples  
 В следующем примере кода показано, как использовать <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> перегруженная версия <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%29> метод, чтобы добавить `Onclick` атрибута на элемент разметки, а затем присвойте ему значение в следующем примере кода ECMAScript:  
  
```  
alert('Hello');  
```  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#1](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#1)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#1)]
 [!code-vb[System.Web.UI.HtmlTextWriter#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
      </Docs>
    </Member>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddAttribute (string name, string value, bool fEndode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAttribute(string name, string value, bool fEndode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddAttribute(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddAttribute (name As String, value As String, fEndode As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddAttribute(System::String ^ name, System::String ^ value, bool fEndode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fEndode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">Строка, содержащая имя атрибута для добавления.</param>
        <param name="value">Строка, содержащая значение для назначения атрибуту.</param>
        <param name="fEndode">
          <see langword="true" /> для кодирования атрибута и его значения; в противном случае — значение <see langword="false" />.</param>
        <summary>Добавляет указанные атрибут разметки и значение в открывающий тег элемента, создаваемого объектом <see cref="T:System.Web.UI.HtmlTextWriter" /> с последующим вызовом метода <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />, с дополнительным кодированием.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> перегруженная версия <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29> метод, если атрибут не является одним из <xref:System.Web.UI.HtmlTextWriterAttribute> значения или если атрибут не известен до времени выполнения и кодирование требуется.  
  
 Для экземпляра любого заданного элемента разметки <xref:System.Web.UI.HtmlTextWriter> класс содержит список атрибутов для этого элемента. Когда <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> вызове метода, атрибуты, добавляемые <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> метод подготавливаются к просмотру в открывающем теге элемента. Список атрибутов, затем удаляется из <xref:System.Web.UI.HtmlTextWriter> объекта.  
  
 Используйте <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29> метод с `fEncode` значение `true`, если атрибут может содержать знак кавычек ("«), «меньше» (<) или знак амперсанда (&). Вызов метода закодирует атрибут для соответствия требованиям запрашивающего устройства. Можно задать `fEncode` для `false`, если известно, что ни один из этих символов не будет создан, или если вы знаете, что атрибут уже закодирован.  
 
Если тип атрибута — `Style`, значение не будет кодировке даже в том случае, если `fEndode` — `true`. Убедитесь, что значение стиля CSS-совместимым и не содержит вредоносного кода.
  
 Шаблон кодирования для визуализации элементов разметки выглядит следующим образом:  
  
-   Используйте <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> метод, чтобы добавить все атрибуты для элемента.  
  
-   Воспользуйтесь методом <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>.  
  
-   При необходимости, для подготовки к просмотру содержимое между открывающим и закрывающим тегами элемента используются другие методы.  
  
-   Воспользуйтесь методом <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A>.  
  
   
  
## Examples  
 В следующем примере кода показано, как использовать <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> перегруженная версия <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29> метод, чтобы убедиться, что настраиваемый атрибут, с именем `myattribute`, и его значение не кодируются для `<img>` элемента.  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#3)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.HttpRequest" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String,System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="protected virtual void AddAttribute (string name, string value, System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AddAttribute(string name, string value, valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddAttribute(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub AddAttribute (name As String, value As String, key As HtmlTextWriterAttribute)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void AddAttribute(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterAttribute key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="name">Строка, содержащая имя атрибута для добавления.</param>
        <param name="value">Строка, содержащая значение для назначения атрибуту.</param>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />, представляющий атрибут.</param>
        <summary>Добавляет указанные атрибут разметки и значение вместе со значением перечисления <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> в открывающий тег элемента, создаваемого объектом <see cref="T:System.Web.UI.HtmlTextWriter" />, с последующим вызовом метода <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> перегруженная версия <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%2CSystem.Web.UI.HtmlTextWriterAttribute%29> метод только при наследовании от <xref:System.Web.UI.HtmlTextWriter> класса. Это дает возможность создавать новые `name` и `key` пары атрибутов.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
      </Docs>
    </Member>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddAttribute (System.Web.UI.HtmlTextWriterAttribute key, string value, bool fEncode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAttribute(valuetype System.Web.UI.HtmlTextWriterAttribute key, string value, bool fEncode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddAttribute(System.Web.UI.HtmlTextWriterAttribute,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddAttribute (key As HtmlTextWriterAttribute, value As String, fEncode As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddAttribute(System::Web::UI::HtmlTextWriterAttribute key, System::String ^ value, bool fEncode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fEncode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />, представляющий атрибут разметки для добавления в исходящий поток.</param>
        <param name="value">Строка, содержащая значение для назначения атрибуту.</param>
        <param name="fEncode">
          <see langword="true" /> для кодирования атрибута и его значения; в противном случае — значение <see langword="false" />.</param>
        <summary>Добавляет атрибут разметки и значение атрибута в открывающий тег элемента, создаваемого объектом <see cref="T:System.Web.UI.HtmlTextWriter" /> с последующим вызовом метода <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />, с дополнительным кодированием.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> перегрузки <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%2CSystem.Boolean%29> метод для отображения атрибут стандартной разметки с кодировкой необязательно.  
  
 Для экземпляра любого заданного элемента разметки <xref:System.Web.UI.HtmlTextWriter> класс содержит список атрибутов для этого элемента. Когда <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> вызове метода, атрибуты, добавляемые <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> подготавливаются к просмотру в открывающем теге элемента. Список атрибутов, затем удаляется из <xref:System.Web.UI.HtmlTextWriter> объекта.  
  
 Используйте <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%2CSystem.Boolean%29> метод с `fEncode` значение `true`, если атрибут может содержать знак кавычек ("«), «меньше» (<) или знак амперсанда (&). Вызов метода закодирует атрибут для соответствия требованиям запрашивающего устройства. Можно задать `fEncode` для `false`, если известно, что ни один из этих символов не будет создан, или если вы знаете, что атрибут уже закодирован.  
 
 Если тип атрибута — `Style`, значение не будет кодировке даже в том случае, если `fEncode` — `true`. Убедитесь, что значение стиля CSS-совместимым и не содержит вредоносного кода.

  
 Шаблон кодирования для визуализации элементов разметки выглядит следующим образом:  
  
-   Используйте <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> метод, чтобы добавить все атрибуты для элемента.  
  
-   Воспользуйтесь методом <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>.  
  
-   При необходимости, для подготовки к просмотру содержимое между открывающим и закрывающим тегами элемента используются другие методы.  
  
-   Воспользуйтесь методом <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A>.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется использование <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%2CSystem.Boolean%29> метод, чтобы убедиться, что строковое значение, присвоенное `Alt` для атрибута `<img>` элемент кодируется для запрашивающего устройства.  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#3)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.HttpRequest" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String,System.IO.TextWriter)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AddStyleAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Добавляет атрибут стиля разметки в открывающий тег элемента, создаваемого объектом <see cref="T:System.Web.UI.HtmlTextWriter" /> с последующим вызовом метода <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />.</summary>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </MemberGroup>
    <Member MemberName="AddStyleAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddStyleAttribute (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddStyleAttribute(string name, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddStyleAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddStyleAttribute (name As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddStyleAttribute(System::String ^ name, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Строка, содержащая стиль атрибута для добавления.</param>
        <param name="value">Строка, содержащая значение для назначения атрибуту.</param>
        <summary>Добавляет указанный атрибут стиля разметки и значение атрибута в открывающий тег разметки, созданный последующим вызовом метода <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> перегруженная версия <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%28System.String%2CSystem.String%29> метод, если стиль-не является членом <xref:System.Web.UI.HtmlTextWriterStyle> перечисления или неизвестны до времени выполнения.  
  
 <xref:System.Web.UI.HtmlTextWriter> Класс ведет список стили для элементов разметки, он отображает. Когда <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> вызывается метод, все стили, которые были добавлены с <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> метод подготавливаются к просмотру в открывающем теге элемента. Затем список стилей очищается.  
  
 Шаблон кодирования для визуализации элементов разметки выглядит следующим образом:  
  
-   Используйте <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> метод, чтобы добавить все стили, атрибуты элемента.  
  
-   Воспользуйтесь методом <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>.  
  
-   При необходимости, для отображения содержимого между элемент открывающим и закрывающим тегами используются другие методы.  
  
-   Воспользуйтесь методом <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A>.  
  
   
  
## Examples  
 В следующем примере кода показано, как использовать <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> перегруженная версия <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%28System.String%2CSystem.String%29> метод для отображения `font-size` и `color` атрибуты стиля на `<p>` элемент. Этот пример кода использует <xref:System.Web.UI.HtmlTextWriter> класса для отображения содержимого элемента управления.  
  
 [!code-cpp[HtmlTextWriter_AddStyleAttribute#1](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_AddStyleAttribute/CPP/htmltextwriter_addstyleattribute.cpp#1)]
 [!code-csharp[HtmlTextWriter_AddStyleAttribute#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_AddStyleAttribute/CS/htmltextwriter_addstyleattribute.cs#1)]
 [!code-vb[HtmlTextWriter_AddStyleAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_AddStyleAttribute/VB/htmltextwriter_addstyleattribute.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="AddStyleAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddStyleAttribute (System.Web.UI.HtmlTextWriterStyle key, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddStyleAttribute(valuetype System.Web.UI.HtmlTextWriterStyle key, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddStyleAttribute(System.Web.UI.HtmlTextWriterStyle,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddStyleAttribute (key As HtmlTextWriterStyle, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddStyleAttribute(System::Web::UI::HtmlTextWriterStyle key, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterStyle" />, представляющий атрибут стиля для добавления в исходящий поток.</param>
        <param name="value">Строка, содержащая значение для назначения атрибуту.</param>
        <summary>Добавляет атрибут стиля разметки, связанный с указанным значением <see cref="T:System.Web.UI.HtmlTextWriterStyle" />, и значение атрибута в открывающий тег разметки, созданный последующим вызовом метода <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> перегруженная версия <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%28System.Web.UI.HtmlTextWriterStyle%2CSystem.String%29> метод, если стиль является членом <xref:System.Web.UI.HtmlTextWriterStyle> перечисления и известен до времени выполнения.  
  
 <xref:System.Web.UI.HtmlTextWriter> Класс ведет список стили для элементов разметки, он отображает. Когда <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> вызывается метод, любые стили, добавленные <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> метод подготавливаются к просмотру в открывающем теге элемента. Затем список стилей очищается.  
  
 Шаблон кодирования для визуализации элементов разметки выглядит следующим образом:  
  
-   Используйте <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> метод, чтобы добавить все стили, атрибуты элемента.  
  
-   Воспользуйтесь методом <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>.  
  
-   При необходимости, для отображения содержимого между элемент открывающим и закрывающим тегами используются другие методы.  
  
-   Воспользуйтесь методом <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A>.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется использование часть переопределение <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> метод в классе, производным от <xref:System.Web.UI.HtmlTextWriter> класса. Этот код проверяет ли `<Label>` отображается элемент. В этом случае <xref:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined%2A> метод вызывается для проверки ли `Color` был определен атрибут стиля для `<Label>` элемента. Если `Color` атрибут не определен, то код вызывает эту перегрузку <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> метод, чтобы добавить `Color` атрибута для атрибута стиля, а затем присвойте ему значение `red`.  
  
 [!code-cpp[HtmlTextWriter_Methods3#4](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#4)]
 [!code-csharp[HtmlTextWriter_Methods3#4](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#4)]
 [!code-vb[HtmlTextWriter_Methods3#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="AddStyleAttribute">
      <MemberSignature Language="C#" Value="protected virtual void AddStyleAttribute (string name, string value, System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AddStyleAttribute(string name, string value, valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddStyleAttribute(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub AddStyleAttribute (name As String, value As String, key As HtmlTextWriterStyle)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void AddStyleAttribute(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterStyle key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="name">Строка, содержащая атрибут стиля для добавления.</param>
        <param name="value">Строка, содержащая значение для назначения атрибуту.</param>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterStyle" />, представляющий атрибут стиля для добавления.</param>
        <summary>Добавляет указанный атрибут стиля разметки и значение атрибута вместе со значением перечисления <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> в открывающий тег разметки, созданный последующим вызовом метода <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> перегруженная версия <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%28System.String%2CSystem.String%2CSystem.Web.UI.HtmlTextWriterStyle%29> метод только при наследовании от <xref:System.Web.UI.HtmlTextWriter> класса. Это дает возможность создавать новые `name` и `value` пары для <xref:System.Web.UI.HtmlTextWriterStyle> атрибуты.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
      </Docs>
    </Member>
    <Member MemberName="BeginRender">
      <MemberSignature Language="C#" Value="public virtual void BeginRender ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginRender() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.BeginRender" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub BeginRender ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginRender();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Оповещает объект <see cref="T:System.Web.UI.HtmlTextWriter" /> или объект производного класса, что элемент управления скоро будет отображен.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter> Реализации класса <xref:System.Web.UI.HtmlTextWriter.BeginRender%2A> метод не имеет функциональных возможностей. Необходимо переопределить <xref:System.Web.UI.HtmlTextWriter.BeginRender%2A> метод в классе, производным от <xref:System.Web.UI.HtmlTextWriter> для выполнения функций подготовки к просмотру. Например, на языке разметки, может потребоваться `<p>` элементы для визуализации сразу перед элементом управления, но потребность в `<p>` ранее определить элемент, можно использовать <xref:System.Web.UI.HtmlTextWriter.BeginRender%2A> переопределения.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.Control" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Закрывает объект <see cref="T:System.Web.UI.HtmlTextWriter" /> и высвобождает все системные ресурсы с ним связанные.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Эта реализация <xref:System.Web.UI.HtmlTextWriter.Close%2A> вызовы метода <xref:System.IO.TextWriter.Close%2A?displayProperty=nameWithType> базового метода.  
  
 После вызова <xref:System.Web.UI.HtmlTextWriter.Close%2A> метод, все операции в <xref:System.Web.UI.HtmlTextWriter> объект может вызывать исключения, поскольку все ресурсы были освобождены.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.IO.TextWriter.Close" />
        <altmember cref="M:System.IO.TextWriter.Dispose(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="DefaultTabString">
      <MemberSignature Language="C#" Value="public const string DefaultTabString;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string DefaultTabString" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.DefaultTabString" />
      <MemberSignature Language="VB.NET" Value="Public Const DefaultTabString As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ DefaultTabString;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Представляет собой один знак табуляции.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Символ ASCII 9 соответствует одна вкладка.  
  
   
  
## Examples  
 В следующем примере кода показано, как создать конструктор, принимающий <xref:System.IO.TextWriter> объект в качестве параметра и передает <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> поле параметра в качестве аргумента второй версии конструктора. Если этот конструктор вызывается из кода, <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> поле определяет политику отступ для экземпляра записи разметки, который используется на странице или адаптеру.  
  
 [!code-csharp[MarkupTextWriter_Methods3#1](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods3/CS/overriddenmarkup.cs#1)]
 [!code-vb[MarkupTextWriter_Methods3#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods3/VB/overriddenmarkup.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="DoubleQuoteChar">
      <MemberSignature Language="C#" Value="public const char DoubleQuoteChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char DoubleQuoteChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.DoubleQuoteChar" />
      <MemberSignature Language="VB.NET" Value="Public Const DoubleQuoteChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char DoubleQuoteChar;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Представляет знак кавычки (").</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.DoubleQuoteChar> Поле используется <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> метод закрытия атрибута.  
  
   
  
## Examples  
 В следующем примере кода показано, как отобразить `border` для атрибута `<table>` элемента. Этот код вызывает <xref:System.Web.UI.HtmlTextWriter.Write%2A> метод для отображения атрибута и его значение и использует <xref:System.Web.UI.HtmlTextWriter.Write%2A> метод для отображения <xref:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString> и <xref:System.Web.UI.HtmlTextWriter.DoubleQuoteChar> поля.  
  
 Этот пример кода визуализирует следующую разметку:  
  
 `border="1"`  
  
 [!code-csharp[MarkupTextWriter_Constants#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#6)]
 [!code-vb[MarkupTextWriter_Constants#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.Write" />
        <altmember cref="M:System.IO.TextWriter.Dispose(System.Boolean)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="EncodeAttributeValue">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Кодирует значение атрибута указанной разметки на основе требований к объекту <see cref="T:System.Web.HttpRequest" /> в текущем контексте.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EncodeAttributeValue">
      <MemberSignature Language="C#" Value="protected string EncodeAttributeValue (string value, bool fEncode);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string EncodeAttributeValue(string value, bool fEncode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EncodeAttributeValue(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Function EncodeAttributeValue (value As String, fEncode As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::String ^ EncodeAttributeValue(System::String ^ value, bool fEncode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fEncode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">Строка, которая содержит значение атрибута для кодирования.</param>
        <param name="fEncode">
          <see langword="true" /> — кодирует значение атрибута. В противном случае — <see langword="false" />.</param>
        <summary>Кодирует значение атрибута указанной разметки на основе требований к объекту <see cref="T:System.Web.HttpRequest" /> в текущем контексте.</summary>
        <returns>Строка, которая содержит закодированное значение атрибута. <see langword="null" />, если <paramref name="value" /> является пустым, или незакодированное значение атрибута, если <paramref name="fEncode" /> имеет значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте <xref:System.Web.UI.HtmlTextWriter.EncodeAttributeValue%2A> перегруженная версия <xref:System.Web.UI.HtmlTextWriter.EncodeAttributeValue%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%29> метод, если атрибут не <xref:System.Web.UI.HtmlTextWriterAttribute> значение перечисления или неизвестны до времени выполнения.  
  
 <xref:System.Web.UI.HtmlTextWriter.EncodeAttributeValue%2A> Метод удаляет двойные кавычки ("«), амперсанды (&) и меньше (<), так что недопустимый тег знаки не создаются, вне зависимости от входных данных. Фактическая кодировка выполняет <xref:System.Web.HttpUtility.HtmlAttributeEncode%2A> метод.  
  
   
  
## Examples  
 В следующем примере кода показано, как вызвать <xref:System.Web.UI.HtmlTextWriter.EncodeAttributeValue%2A> методу в качестве параметра в <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> вызова метода и затем кодирует `color:blue` стиля значение атрибута.  
  
 [!code-cpp[HtmlTextWriter_Methods#5](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#5)]
 [!code-csharp[HtmlTextWriter_Methods#5](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#5)]
 [!code-vb[HtmlTextWriter_Methods#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String)" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="T:System.Web.HttpRequest" />
      </Docs>
    </Member>
    <Member MemberName="EncodeAttributeValue">
      <MemberSignature Language="C#" Value="protected virtual string EncodeAttributeValue (System.Web.UI.HtmlTextWriterAttribute attrKey, string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string EncodeAttributeValue(valuetype System.Web.UI.HtmlTextWriterAttribute attrKey, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EncodeAttributeValue(System.Web.UI.HtmlTextWriterAttribute,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function EncodeAttributeValue (attrKey As HtmlTextWriterAttribute, value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ EncodeAttributeValue(System::Web::UI::HtmlTextWriterAttribute attrKey, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attrKey" Type="System.Web.UI.HtmlTextWriterAttribute" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="attrKey">
          <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />, представляющий атрибут разметки.</param>
        <param name="value">Строка, которая содержит значение атрибута для кодирования.</param>
        <summary>Кодирует значение атрибута указанной разметки на основе требований к объекту <see cref="T:System.Web.HttpRequest" /> в текущем контексте.</summary>
        <returns>Строка, содержащая значение закодированного атрибута.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.EncodeAttributeValue%2A> Метод удаляет двойные кавычки ("«), амперсанды (&) и меньше (<), так что недопустимый тег знаки не создаются, вне зависимости от входных данных. Фактическая кодировка выполняет <xref:System.Web.HttpUtility.HtmlAttributeEncode%2A> метод.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String)" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="T:System.Web.HttpRequest" />
      </Docs>
    </Member>
    <Member MemberName="EncodeUrl">
      <MemberSignature Language="C#" Value="protected string EncodeUrl (string url);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string EncodeUrl(string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EncodeUrl(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Function EncodeUrl (url As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::String ^ EncodeUrl(System::String ^ url);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="url">Строка, содержащая URL-адрес для кодирования.</param>
        <summary>Осуществляет минимальную кодировку URL путем преобразования пробелов в указанном URL-адресе в строку "%20".</summary>
        <returns>Строка, содержащая закодированный URL-адрес.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Кодировка URL-адрес для знака состоит из символ процента (%), следуют двузначное шестнадцатеричное представление (без учета регистра) кода знака ISO-Latin для символа. Шестнадцатеричное представление пространства — 20.  
  
   
  
## Examples  
 В следующем примере кода показано, как вызвать <xref:System.Web.UI.HtmlTextWriter.EncodeUrl%2A> метод, чтобы преобразовать все пробелы в URL-адрес, который передается как параметр в <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> вызова метода.  
  
 [!code-cpp[HtmlTextWriter_Methods#6](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#6)]
 [!code-csharp[HtmlTextWriter_Methods#6](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#6)]
 [!code-vb[HtmlTextWriter_Methods#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.HttpUtility.UrlPathEncode(System.String)" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddAttribute" />
        <altmember cref="T:System.Web.HttpRequest" />
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public override System.Text.Encoding Encoding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding Encoding" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.Encoding" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Encoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Text::Encoding ^ Encoding { System::Text::Encoding ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает кодировку, используемую объектом <see cref="T:System.Web.UI.HtmlTextWriter" />, для записи содержимого на страницу.</summary>
        <value>
          <see cref="T:System.Text.Encoding" /> в которой записывается разметка на страницу.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.Encoding%2A> Свойство получил свое значение из базового <xref:System.IO.TextWriter> объекта.  
  
   
  
## Examples  
 В следующем примере кода показано, как использовать <xref:System.Web.UI.HtmlTextWriter.Encoding%2A> свойство для записи типа кодировки, что пользовательский элемент управления используется для отображения текста на странице, содержащей его.  
  
 [!code-cpp[HtmlTextWriter_Properties#2](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Properties/CPP/htmltextwriter_properties1.cpp#2)]
 [!code-csharp[HtmlTextWriter_Properties#2](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Properties/CS/htmltextwriter_properties1.cs#2)]
 [!code-vb[HtmlTextWriter_Properties#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Properties/VB/htmltextwriter_properties1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Text.Encoding" />
      </Docs>
    </Member>
    <Member MemberName="EndRender">
      <MemberSignature Language="C#" Value="public virtual void EndRender ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndRender() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EndRender" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndRender ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndRender();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Оповещает объект <see cref="T:System.Web.UI.HtmlTextWriter" /> или объект производного класса, что элемент управления завершил отрисовку. Этот метод используется для закрытия любых элементов разметки, открытых в методе <see cref="M:System.Web.UI.HtmlTextWriter.BeginRender" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter> Реализации класса <xref:System.Web.UI.HtmlTextWriter.EndRender%2A> метод не имеет функциональных возможностей. Необходимо переопределить <xref:System.Web.UI.HtmlTextWriter.EndRender%2A> в классе, производном от <xref:System.Web.UI.HtmlTextWriter> класса для выполнения функций подготовки к просмотру.  
  
 Можно использовать <xref:System.Web.UI.HtmlTextWriter.EndRender%2A> метод, чтобы закрыть все элементы разметки открыт в <xref:System.Web.UI.HtmlTextWriter.BeginRender%2A> метод.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.BeginRender" />
      </Docs>
    </Member>
    <Member MemberName="EndTagLeftChars">
      <MemberSignature Language="C#" Value="public const string EndTagLeftChars;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string EndTagLeftChars" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.EndTagLeftChars" />
      <MemberSignature Language="VB.NET" Value="Public Const EndTagLeftChars As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ EndTagLeftChars;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Представляет открывающую угловую скобку и символ косой черты (&lt;/) для закрывающего тега элемента разметки.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.EndTagLeftChars> Поле используется <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> метод для создания разметки элемент закрывающие теги.  
  
   
  
## Examples  
 В следующем примере кода показано, как для отображения закрывающего тега элемента `<table>` элемент разметки с помощью <xref:System.Web.UI.HtmlTextWriter.EndTagLeftChars> и <xref:System.Web.UI.HtmlTextWriter.TagRightChar> поля в качестве значений параметров в вызовах <xref:System.Web.UI.HtmlTextWriter.Write%2A> метод.  
  
 Этот пример кода визуализирует следующую разметку:  
  
 `</table>`  
  
 [!code-csharp[MarkupTextWriter_Constants#4](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#4)]
 [!code-vb[MarkupTextWriter_Constants#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <MemberGroup MemberName="EnterStyle">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Записывает открывающий тег элемента разметки, содержащий атрибуты, реализующие форматирование варианта разметки и знака указанного стиля.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EnterStyle">
      <MemberSignature Language="C#" Value="public virtual void EnterStyle (System.Web.UI.WebControls.Style style);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnterStyle(class System.Web.UI.WebControls.Style style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EnterStyle(System.Web.UI.WebControls.Style)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EnterStyle(System::Web::UI::WebControls::Style ^ style);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="style" Type="System.Web.UI.WebControls.Style" />
      </Parameters>
      <Docs>
        <param name="style">
          <see cref="T:System.Web.UI.WebControls.Style" />, указывающий вариант разметки и форматирование для применения к блоку разметки.</param>
        <summary>Записывает открывающий тег элемента <see langword="&lt;span&gt;" />, содержащего атрибуты, реализующие форматирование варианта разметки и знаков указанного стиля.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> метод для применения стиля, такие как цвет фона или границы ширина, блок разметки.  
  
 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> И <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> методы позволяют адаптер устройства или элемент управления для создания разметки, использующий форматирование символов из заданного стиля. Используйте то же значение для `style` в <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> метода, используемого в соответствующем <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> метод.  
  
 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> Перегруженная версия <xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%29> метод отображает открывающего тега элемента `<span>` элемент. Затем этот метод добавляет необходимые атрибуты и атрибуты стиля для открывающего тега элемента `<span>` элемент для отображения параметров, заданных свойством <xref:System.Web.UI.WebControls.Style> объекта. Если вы хотите отображать элемент разметки различные атрибуты и атрибуты стиля, используйте <xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%2CSystem.Web.UI.HtmlTextWriterTag%29> перегрузки.  
  
   
  
## Examples  
 В следующем примере кода показано, как использовать пользовательский класс с именем `TextSample`, который является производным от <xref:System.Web.UI.WebControls.WebControl> класс, который использует <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> применить метод <xref:System.Web.UI.WebControls.Style.ForeColor%2A> стиль строки текста.  
  
 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> Метод выводит HTML- `<span style="color:Navy;">`. <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> Закрывает вызов метода `<span>` элемент после отрисовки текста.  
  
 [!code-vb[System.Web.UI.HtmlTextWriter_EnterStyle#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter_EnterStyle/VB/styledtext.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.WebControls.Style" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.ExitStyle" />
      </Docs>
    </Member>
    <Member MemberName="EnterStyle">
      <MemberSignature Language="C#" Value="public virtual void EnterStyle (System.Web.UI.WebControls.Style style, System.Web.UI.HtmlTextWriterTag tag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnterStyle(class System.Web.UI.WebControls.Style style, valuetype System.Web.UI.HtmlTextWriterTag tag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EnterStyle(System.Web.UI.WebControls.Style,System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EnterStyle(System::Web::UI::WebControls::Style ^ style, System::Web::UI::HtmlTextWriterTag tag);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="style" Type="System.Web.UI.WebControls.Style" />
        <Parameter Name="tag" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="style">
          <see cref="T:System.Web.UI.WebControls.Style" />, указывающий вариант разметки и форматирование для применения к блоку разметки.</param>
        <param name="tag">Объект <see cref="T:System.Web.UI.HtmlTextWriterTag" />, указывающий открывающий тег элемента разметки, который будет содержать объект стиля, указанный в <c>style</c>.</param>
        <summary>Записывает открывающий тег элемента разметки, содержащий атрибуты, реализующие форматирование варианта разметки и знака указанного стиля.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> метод для применения стиля, такие как цвет фона или границы ширина, блок разметки.  
  
 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> И <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> методы позволяют адаптер устройства или элемент управления для создания разметки, использующий форматирование символов из заданного стиля. Используйте то же значение для `style` в <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> метода, используемого в соответствующем <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> метод.  
  
 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> Перегруженная версия <xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%2CSystem.Web.UI.HtmlTextWriterTag%29> метод отображает открывающий тег элемента, указанного по `tag` параметр. <xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%2CSystem.Web.UI.HtmlTextWriterTag%29> Метод добавляет необходимые атрибуты и атрибуты стиля в открывающем теге элемента для отображения параметров, которые задаются с <xref:System.Web.UI.WebControls.Style> объекта. Используйте <xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%29> перегрузка для отображения открывающего тега элемента `<span>` элемент.  
  
   
  
## Examples  
 В следующем примере кода показано, как использовать пользовательский класс с именем `TextSample`, который является производным от <xref:System.Web.UI.WebControls.WebControl> класс, который использует <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> применить метод <xref:System.Web.UI.WebControls.Style.ForeColor%2A> стиль строки текста.  
  
 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> Метод выводит HTML-`<span style="color:Navy;">`. <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> Закрывает вызов метода `<span>` элемент после отрисовки текста.  
  
 [!code-vb[System.Web.UI.HtmlTextWriter_EnterStyle#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter_EnterStyle/VB/styledtext.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.WebControls.Style" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.ExitStyle" />
      </Docs>
    </Member>
    <Member MemberName="EqualsChar">
      <MemberSignature Language="C#" Value="public const char EqualsChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char EqualsChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.EqualsChar" />
      <MemberSignature Language="VB.NET" Value="Public Const EqualsChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char EqualsChar;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Представляет знак равенства (<see langword="=" />).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вы можете использовать <xref:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString> поле вместо <xref:System.Web.UI.HtmlTextWriter.EqualsChar> поля при создании открывающий разделитель значения атрибута.  
  
   
  
## Examples  
 В следующем примере кода показано, как отобразить `src` атрибут и часть его значения для `<img>` элемента. Код использует <xref:System.Web.UI.HtmlTextWriter.EqualsChar> в <xref:System.Web.UI.HtmlTextWriter.Write%2A> вызова метода отображаемое знак равенства (=) между `src` атрибут и его значение.  
  
 Этот пример кода визуализирует следующую разметку:  
  
 `src="/images/`  
  
 [!code-csharp[MarkupTextWriter_Constants#10](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpleimage.cs#10)]
 [!code-vb[MarkupTextWriter_Constants#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpleimage.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString" />
      </Docs>
    </Member>
    <Member MemberName="EqualsDoubleQuoteString">
      <MemberSignature Language="C#" Value="public const string EqualsDoubleQuoteString;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string EqualsDoubleQuoteString" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString" />
      <MemberSignature Language="VB.NET" Value="Public Const EqualsDoubleQuoteString As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ EqualsDoubleQuoteString;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Представляет вместе знак равенства (=) и знак двойных кавычек (") в строке (=").</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString> Поле используется <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> и <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> методы для создания открывающий разделитель значений атрибутов.  
  
   
  
## Examples  
 В следующем примере кода показано, как отобразить `border` для атрибута `<table>` элемента. Этот код вызывает <xref:System.Web.UI.HtmlTextWriter.Write%2A> метод для отображения атрибута и его значение и использует <xref:System.Web.UI.HtmlTextWriter.Write%2A> метод для отображения <xref:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString> и <xref:System.Web.UI.HtmlTextWriter.DoubleQuoteChar> поля.  
  
 Этот пример кода визуализирует следующую разметку:  
  
 `border="1"`  
  
 [!code-csharp[MarkupTextWriter_Constants#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#6)]
 [!code-vb[MarkupTextWriter_Constants#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.WriteAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ExitStyle">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Записывает закрывающий тег элемента разметки для завершения форматирования указанного варианта разметки и знаков.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ExitStyle">
      <MemberSignature Language="C#" Value="public virtual void ExitStyle (System.Web.UI.WebControls.Style style);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExitStyle(class System.Web.UI.WebControls.Style style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.ExitStyle(System.Web.UI.WebControls.Style)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ExitStyle(System::Web::UI::WebControls::Style ^ style);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="style" Type="System.Web.UI.WebControls.Style" />
      </Parameters>
      <Docs>
        <param name="style">
          <see cref="T:System.Web.UI.WebControls.Style" />, указывающий вариант разметки и форматирование, которые должны быть закрыты.</param>
        <summary>Записывает закрывающий тег элемента разметки <see langword="&lt;span&gt;" /> для завершения форматирования указанного варианта разметки и знаков.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> Перегруженная версия <xref:System.Web.UI.HtmlTextWriter.ExitStyle%28System.Web.UI.WebControls.Style%29> метод отображает закрывающий тег `<span>` закрытие элемент открыт элемент после закрывающего тега элемента управления с помощью соответствующих <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> вызова.  
  
 <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> И <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> методы позволяют адаптер устройства или элемент управления для создания разметки, который начинается и заканчивается блок, используя форматирование символов из заданного стиля. Используйте то же значение для `style` в <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> метода, используемого в соответствующем <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> метод.  
  
   
  
## Examples  
 В следующем примере кода показано, как использовать пользовательский класс с именем `TextSample`, который является производным от <xref:System.Web.UI.WebControls.WebControl> класс, который использует <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> применить метод <xref:System.Web.UI.WebControls.Style.ForeColor%2A> стиль строки текста.  
  
 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> Метод выводит HTML- `<span style="color:Navy;">`. <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> Закрывает вызов метода `<span>` элемент после отрисовки текста.  
  
 [!code-vb[System.Web.UI.HtmlTextWriter_EnterStyle#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter_EnterStyle/VB/styledtext.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.EnterStyle" />
        <altmember cref="T:System.Web.UI.WebControls.Style" />
      </Docs>
    </Member>
    <Member MemberName="ExitStyle">
      <MemberSignature Language="C#" Value="public virtual void ExitStyle (System.Web.UI.WebControls.Style style, System.Web.UI.HtmlTextWriterTag tag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExitStyle(class System.Web.UI.WebControls.Style style, valuetype System.Web.UI.HtmlTextWriterTag tag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.ExitStyle(System.Web.UI.WebControls.Style,System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ExitStyle(System::Web::UI::WebControls::Style ^ style, System::Web::UI::HtmlTextWriterTag tag);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="style" Type="System.Web.UI.WebControls.Style" />
        <Parameter Name="tag" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="style">Параметр <see cref="T:System.Web.UI.WebControls.Style" />, указывающий, что этот макет и форматирование больше не применяются к выходному тексту.</param>
        <param name="tag">Параметр <see cref="T:System.Web.UI.HtmlTextWriterTag" />, указывающий закрывающий тег элемента разметки, который содержит атрибуты, отвечающие за применение заданного стиля. Он должен соответствовать ключу, переданному в соответствующий вызов <see cref="Overload:System.Web.UI.HtmlTextWriter.EnterStyle" />.</param>
        <summary>Записывает закрывающий тег указанного элемента разметки, чтобы завершить выбранный макет и форматирование символов.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> Перегруженная версия <xref:System.Web.UI.HtmlTextWriter.ExitStyle%28System.Web.UI.WebControls.Style%2CSystem.Web.UI.HtmlTextWriterTag%29> метод отображает закрывающий тег элемента, который задается параметром `tag` после закрывающего тега элемента управления, закрывающего элемента, который был открыт с помощью соответствующих <xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%2CSystem.Web.UI.HtmlTextWriterTag%29> вызова метода.  
  
 <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> И <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> методы позволяют адаптер устройства или элемент управления для создания разметки, который начинается и заканчивается блок, используя форматирование символов из заданного стиля. Используйте то же значение для `style` в <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> метода, используемого в соответствующем <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> метод.  
  
   
  
## Examples  
 В следующем примере кода показано, как использовать пользовательский класс с именем `TextSample`, который является производным от <xref:System.Web.UI.WebControls.WebControl> класс, который использует <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> применить метод <xref:System.Web.UI.WebControls.Style.ForeColor%2A> стиль строки текста.  
  
 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> Метод выводит HTML- `<span style="color:Navy;">`. <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> Закрывает вызов метода `<span>` элемент после отрисовки текста.  
  
 [!code-vb[System.Web.UI.HtmlTextWriter_EnterStyle#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter_EnterStyle/VB/styledtext.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.EnterStyle" />
        <altmember cref="T:System.Web.UI.WebControls.Style" />
      </Docs>
    </Member>
    <Member MemberName="FilterAttributes">
      <MemberSignature Language="C#" Value="protected virtual void FilterAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void FilterAttributes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.FilterAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub FilterAttributes ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void FilterAttributes();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Удаляет все атрибуты разметки и стиля со всех свойств страницы или элемента управления веб-сервера.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Перед отрисовкой атрибуты на элемент разметки <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> вызывается метод. В свою очередь <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> вызовы метода <xref:System.Web.UI.HtmlTextWriter.OnAttributeRender%2A> и <xref:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender%2A> методы для каждого атрибута и стиля для подготовки к просмотру.  
  
   
  
## Examples  
 В следующем примере кода показано, как использовать пользовательский класс, производный от <xref:System.Web.UI.HtmlTextWriter> класс, который переопределяет <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> метод. При вызове <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> переопределенный метод проверяет, является ли модуль записи текста отображает все `<label>` или `<a>` элементов:  
  
-   Если `<label>` отображается элемент <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> метод проверяет ли `style` атрибут отображается в элементе и, если нет, создает `style` атрибут и присваивает его `color: blue`.  
  
-   Если `<a>` отображается элемент <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> определяет метод ли `href` атрибут включено и, если нет, добавляет `href` URL-адрес http://www.cohowinery.com.  
  
 [!code-cpp[HtmlTextWriter_Methods#4](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#4)]
 [!code-csharp[HtmlTextWriter_Methods#4](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#4)]
 [!code-vb[HtmlTextWriter_Methods#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Flush();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Очищает все буферы для текущего объекта <see cref="T:System.Web.UI.HtmlTextWriter" /> и вызывает запись всех данных буфера в исходящий поток.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter> Реализации класса <xref:System.Web.UI.HtmlTextWriter.Flush%2A> просто вызывает метод <xref:System.IO.TextWriter.Flush%2A> базового метода.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="GetAttributeKey">
      <MemberSignature Language="C#" Value="protected System.Web.UI.HtmlTextWriterAttribute GetAttributeKey (string attrName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Web.UI.HtmlTextWriterAttribute GetAttributeKey(string attrName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetAttributeKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetAttributeKey (attrName As String) As HtmlTextWriterAttribute" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Web::UI::HtmlTextWriterAttribute GetAttributeKey(System::String ^ attrName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.HtmlTextWriterAttribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attrName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="attrName">Строка, содержащая атрибут, для которого необходимо получить <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />.</param>
        <summary>Получает соответствующее значение перечисления <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> для указанного атрибута.</summary>
        <returns>Значение перечисления <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> для указанного атрибута; в противном случае — неверное значение <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />, если атрибут не является элементом перечисления.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если `attrName` — `null` или пустая строка ("»), или не найден в таблице имен атрибутов, значение -1, приведенным к <xref:System.Web.UI.HtmlTextWriterAttribute> объекта, возвращается.  
  
   
  
## Examples  
 В следующем примере кода показано, как использовать класс, производный от <xref:System.Web.UI.HtmlTextWriter> класс, который переопределяет <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> метод. Переопределение проверок ли `tagKey` равен <xref:System.Web.UI.HtmlTextWriterTag.Font> поле, которое указывает, что `<font>` отображается элемент разметки. Если Да, вызывает переопределение <xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%2A> метод, чтобы выяснить, был ли `<font>` элемент содержит <xref:System.Web.UI.HtmlTextWriterAttribute.Size> атрибута. Если <xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%2A> возвращает `false`, <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> вызовы метода <xref:System.Web.UI.HtmlTextWriter.GetAttributeKey%2A> метод, который определяет <xref:System.Web.UI.HtmlTextWriterAttribute.Size> и присваивает ей значение `30pt`.  
  
 [!code-cpp[HtmlTextWriter_Methods#3](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#3)]
 [!code-csharp[HtmlTextWriter_Methods#3](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#3)]
 [!code-vb[HtmlTextWriter_Methods#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.IsAttributeDefined" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetAttributeName">
      <MemberSignature Language="C#" Value="protected string GetAttributeName (System.Web.UI.HtmlTextWriterAttribute attrKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string GetAttributeName(valuetype System.Web.UI.HtmlTextWriterAttribute attrKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetAttributeName(System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetAttributeName (attrKey As HtmlTextWriterAttribute) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::String ^ GetAttributeName(System::Web::UI::HtmlTextWriterAttribute attrKey);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attrKey" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="attrKey">
          <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> для которого требуется получить имя атрибута разметки.</param>
        <summary>Получает имя атрибута разметки, связанного с указанным значением <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />.</summary>
        <returns>Строка, содержащая имя атрибута разметки.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.GetAttributeName%2A> Метод возвращает пустую строку ("»), если `attrKey` не является допустимым <xref:System.Web.UI.HtmlTextWriterAttribute> значение.  
  
   
  
## Examples  
 В следующем примере кода показано, как использовать <xref:System.Web.UI.HtmlTextWriter.GetAttributeName%2A> метод преобразования <xref:System.Web.UI.HtmlTextWriterAttribute.Size> значение перечисления своим строковым именем.  
  
 [!code-cpp[HtmlTextWriter_Methods3#6](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#6)]
 [!code-csharp[HtmlTextWriter_Methods3#6](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#6)]
 [!code-vb[HtmlTextWriter_Methods3#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetStyleKey">
      <MemberSignature Language="C#" Value="protected System.Web.UI.HtmlTextWriterStyle GetStyleKey (string styleName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Web.UI.HtmlTextWriterStyle GetStyleKey(string styleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetStyleKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetStyleKey (styleName As String) As HtmlTextWriterStyle" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Web::UI::HtmlTextWriterStyle GetStyleKey(System::String ^ styleName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.HtmlTextWriterStyle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="styleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="styleName">Атрибут стиля, для которого необходимо получить <see cref="T:System.Web.UI.HtmlTextWriterStyle" />.</param>
        <summary>Получает значение перечисления <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> для указанного стиля.</summary>
        <returns>Значение перечисления <see cref="T:System.Web.UI.HtmlTextWriterStyle" />, соответствующее <paramref name="styleName" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.GetStyleKey%2A> Метод возвращает значение -1, типизированного как <xref:System.Web.UI.HtmlTextWriterStyle> значение, если `styleName` не соответствует ни одному <xref:System.Web.UI.HtmlTextWriterStyle> значение перечисления.  
  
   
  
## Examples  
 В следующем примере кода показано, как переопределить <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> метод в классе, производным от <xref:System.Web.UI.HtmlTextWriter> класса. <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> Определяет переопределение ли `<label>` будут отображаться в разметке и если да, проверяет элемент на <xref:System.Web.UI.HtmlTextWriterStyle.Color> атрибута. Если <xref:System.Web.UI.HtmlTextWriterStyle.Color> атрибут не определен, <xref:System.Web.UI.HtmlTextWriter.GetStyleKey%2A> метод используется в качестве первого параметра в вызове <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> метод, чтобы добавить <xref:System.Web.UI.HtmlTextWriterStyle.Color> атрибут `<label>` разметки и присвойте <xref:System.Web.UI.HtmlTextWriterStyle.Color> атрибут `red`.  
  
 [!code-cpp[HtmlTextWriter_Methods#1](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#1)]
 [!code-csharp[HtmlTextWriter_Methods#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#1)]
 [!code-vb[HtmlTextWriter_Methods#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddStyleAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetStyleName">
      <MemberSignature Language="C#" Value="protected string GetStyleName (System.Web.UI.HtmlTextWriterStyle styleKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string GetStyleName(valuetype System.Web.UI.HtmlTextWriterStyle styleKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetStyleName(System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetStyleName (styleKey As HtmlTextWriterStyle) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::String ^ GetStyleName(System::Web::UI::HtmlTextWriterStyle styleKey);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="styleKey" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="styleKey">
          <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> для которого предназначено получаемое имя атрибута стиля разметки.</param>
        <summary>Получает имя стиля атрибута разметки, связанного с указанным значением перечисления <see cref="T:System.Web.UI.HtmlTextWriterStyle" />.</summary>
        <returns>Имя атрибута стиля, связанное со значением перечисления <see cref="T:System.Web.UI.HtmlTextWriterStyle" />, указанным в <paramref name="styleKey" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если `styleKey` не является допустимым <xref:System.Web.UI.HtmlTextWriterStyle> объекта, <xref:System.Web.UI.HtmlTextWriter.GetStyleName%2A> метод возвращает пустую строку (»»).  
  
   
  
## Examples  
 В следующем примере кода показано, как проверить ли `<label>` отображается элемент. Если Да, он проверяет, является ли <xref:System.Web.UI.HtmlTextWriterStyle.Color> был определен атрибут стиля для элемента. Если атрибут не определен, <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> вызывается метод и <xref:System.Web.UI.HtmlTextWriter.GetStyleName%2A> метод преобразует <xref:System.Web.UI.HtmlTextWriterStyle.Color> член перечисления в строковое представление для передачи <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> метод.  
  
 [!code-cpp[HtmlTextWriter_Methods3#4](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#4)]
 [!code-csharp[HtmlTextWriter_Methods3#4](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#4)]
 [!code-vb[HtmlTextWriter_Methods3#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddStyleAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetTagKey">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.HtmlTextWriterTag GetTagKey (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Web.UI.HtmlTextWriterTag GetTagKey(string tagName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetTagKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetTagKey (tagName As String) As HtmlTextWriterTag" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Web::UI::HtmlTextWriterTag GetTagKey(System::String ^ tagName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.HtmlTextWriterTag</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">Элемент разметки, для которого требуется получить <see cref="T:System.Web.UI.HtmlTextWriterTag" />.</param>
        <summary>Получает значение перечисления <see cref="T:System.Web.UI.HtmlTextWriterTag" />, связанное с указанным элементом разметки.</summary>
        <returns>Значение перечисления <see cref="T:System.Web.UI.HtmlTextWriterTag" />; в противном случае, если <paramref name="tagName" /> не связан с конкретным значением <see cref="T:System.Web.UI.HtmlTextWriterTag" />, <see cref="F:System.Web.UI.HtmlTextWriterTag.Unknown" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если `tagName` — `null`, пустая строка ("»), или не найден в таблице имена тегов разметки, <xref:System.Web.UI.HtmlTextWriter.GetTagKey%2A> возвращает метод <xref:System.Web.UI.HtmlTextWriterTag.Unknown> поля.  
  
   
  
## Examples  
 В следующем примере кода показано, как переопределить перегруженный <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> метод, который принимает строку в качестве параметра. Строка, переданная в <xref:System.Web.UI.HtmlTextWriter.GetTagKey%2A> метод, который преобразует его в соответствующий <xref:System.Web.UI.HtmlTextWriterTag> член перечисления и затем передает его <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> перегрузку, принимающую <xref:System.Web.UI.HtmlTextWriterTag> значение перечисления в качестве параметра.  
  
 [!code-cpp[HtmlTextWriter_Methods3#8](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#8)]
 [!code-csharp[HtmlTextWriter_Methods3#8](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#8)]
 [!code-vb[HtmlTextWriter_Methods3#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
      </Docs>
    </Member>
    <Member MemberName="GetTagName">
      <MemberSignature Language="C#" Value="protected virtual string GetTagName (System.Web.UI.HtmlTextWriterTag tagKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string GetTagName(valuetype System.Web.UI.HtmlTextWriterTag tagKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetTagName(System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetTagName (tagKey As HtmlTextWriterTag) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ GetTagName(System::Web::UI::HtmlTextWriterTag tagKey);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagKey" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="tagKey">
          <see cref="T:System.Web.UI.HtmlTextWriterTag" />, который необходимо получить для элемента разметки.</param>
        <summary>Получает элемент разметки, связанный с указанным значением перечисления <see cref="T:System.Web.UI.HtmlTextWriterTag" />.</summary>
        <returns>Строка, представляющая элемент разметки.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если `tagKey` не является допустимым <xref:System.Web.UI.HtmlTextWriterTag> значение, <xref:System.Web.UI.HtmlTextWriter.GetTagName%2A> метод возвращает пустую строку (»»).  
  
   
  
## Examples  
 В следующем примере кода показано, как закрыть `<font>` элемента с помощью <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> метод. <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> Вызовы метода <xref:System.Web.UI.HtmlTextWriter.GetTagName%2A> метод преобразования <xref:System.Web.UI.HtmlTextWriterTag.Font> значения в строку.  
  
 [!code-cpp[HtmlTextWriter_Methods3#7](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#7)]
 [!code-csharp[HtmlTextWriter_Methods3#7](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#7)]
 [!code-vb[HtmlTextWriter_Methods3#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
      </Docs>
    </Member>
    <Member MemberName="Indent">
      <MemberSignature Language="C#" Value="public int Indent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Indent" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.Indent" />
      <MemberSignature Language="VB.NET" Value="Public Property Indent As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Indent { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает количество позиций табуляции для задания отступа начала каждой строки разметки.</summary>
        <value>Количество позиций табуляции для отступа каждой строки.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Отступ выполняется путем записи в строку, которая определяется `tabString` параметр <xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%2CSystem.String%29> конструктор сколько раз, которые определяются <xref:System.Web.UI.HtmlTextWriter.Indent%2A> свойство.  
  
 Если <xref:System.Web.UI.HtmlTextWriter.Indent%2A> задано отрицательное значение, оно принимает значение 0 перед их сохранением.  
  
   
  
## Examples  
 В следующем примере кода показано, как увеличить значение, присвоенное <xref:System.Web.UI.HtmlTextWriter.Indent%2A> свойство открывающего тега элемента будут добавлены атрибуты `<span>` элемент и <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> был вызван метод. Это увеличивает отступ для любой разметки, отображается внутри `<span>` элемента.  
  
 [!code-csharp[MarkupTextWriter_Samples1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Samples1/CS/markuptextwriter_samples1.cs#2)]
 [!code-vb[MarkupTextWriter_Samples1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Samples1/VB/markuptextwriter_samples1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.OutputTabs" />
      </Docs>
    </Member>
    <Member MemberName="InnerWriter">
      <MemberSignature Language="C#" Value="public System.IO.TextWriter InnerWriter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.TextWriter InnerWriter" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.InnerWriter" />
      <MemberSignature Language="VB.NET" Value="Public Property InnerWriter As TextWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::TextWriter ^ InnerWriter { System::IO::TextWriter ^ get(); void set(System::IO::TextWriter ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.TextWriter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает модуль записи текста, записывающий внутреннее содержание элемента разметки.</summary>
        <value>
          <see cref="T:System.IO.TextWriter" />, записывающий внутреннее содержание разметки.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Внутреннее содержание разметки — это текст между открывающим и закрывающим тегами элемента языка разметки.  
  
 Если <xref:System.Web.UI.HtmlTextWriter.InnerWriter%2A> свойству <xref:System.IO.TextWriter> объект, который является экземпляром класса <xref:System.Web.HttpWriter> класса, этот факт фиксируется и сохраняется есть отдельная ссылка.  
  
   
  
## Examples  
 В следующем примере кода показано, как использовать пользовательский серверный элемент управления, производный от <xref:System.Web.UI.WebControls.WebControl> класс, который переопределяет <xref:System.Web.UI.Control.Render%2A> метод. Она использует <xref:System.Web.UI.HtmlTextWriter> класс для создания `<font>` элемента. После его записывает открывающий тег элемента, он использует <xref:System.Web.UI.HtmlTextWriter.InnerWriter%2A> свойство для записи строки `"<br> The time on the server:"` и объединяет эту строку со значением <xref:System.DateTime.Now%2A?displayProperty=nameWithType> свойство.  
  
 [!code-cpp[HtmlTextWriter_Properties#3](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Properties/CPP/htmltextwriter_properties1.cpp#3)]
 [!code-csharp[HtmlTextWriter_Properties#3](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Properties/CS/htmltextwriter_properties1.cs#3)]
 [!code-vb[HtmlTextWriter_Properties#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Properties/VB/htmltextwriter_properties1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.HttpWriter" />
        <altmember cref="T:System.Web.UI.WebControls.WebControl" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsAttributeDefined">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Определяет, визуализируются ли указанный атрибут разметки и его значение во время следующего вызова метод <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsAttributeDefined">
      <MemberSignature Language="C#" Value="protected bool IsAttributeDefined (System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool IsAttributeDefined(valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.IsAttributeDefined(System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Function IsAttributeDefined (key As HtmlTextWriterAttribute) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool IsAttributeDefined(System::Web::UI::HtmlTextWriterAttribute key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />, связанный с атрибутом разметки.</param>
        <summary>Определяет, визуализируются ли указанный атрибут разметки и его значение во время следующего вызова метод <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />.</summary>
        <returns>
          <see langword="true" /> если атрибут визуализируется во время следующего вызова метода <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Для получения значения, присваиваемые <xref:System.Web.UI.HtmlTextWriterAttribute> , используйте <xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%40%29> вместо этой перегрузки.  
  
   
  
## Examples  
 В следующем примере кода показано, как использовать переопределение <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> метод в классе, который наследует от <xref:System.Web.UI.HtmlTextWriter> класса. <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> Переопределенный метод проверяет, является ли `<font>` отображается элемент разметки. Если Да, вызывает переопределение <xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%2A> метод для проверки, является ли `<font>` элемент содержит <xref:System.Web.UI.HtmlTextWriterAttribute.Size> атрибута. Если нет, <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> вызовы метода <xref:System.Web.UI.HtmlTextWriter.GetAttributeKey%2A> метод, который определяет <xref:System.Web.UI.HtmlTextWriterAttribute.Size> атрибут и присваивает ей значение `30pt`.  
  
 [!code-cpp[HtmlTextWriter_Methods#3](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#3)]
 [!code-csharp[HtmlTextWriter_Methods#3](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#3)]
 [!code-vb[HtmlTextWriter_Methods#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="IsAttributeDefined">
      <MemberSignature Language="C#" Value="protected bool IsAttributeDefined (System.Web.UI.HtmlTextWriterAttribute key, out string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool IsAttributeDefined(valuetype System.Web.UI.HtmlTextWriterAttribute key, [out] string&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.IsAttributeDefined(System.Web.UI.HtmlTextWriterAttribute,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Protected Function IsAttributeDefined (key As HtmlTextWriterAttribute, ByRef value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool IsAttributeDefined(System::Web::UI::HtmlTextWriterAttribute key, [Runtime::InteropServices::Out] System::String ^ % value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
        <Parameter Name="value" Type="System.String&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />, связанный с атрибутом разметки.</param>
        <param name="value">Значение, назначенное атрибуту.</param>
        <summary>Определяет, визуализируются ли указанный атрибут разметки и его значение во время следующего вызова метод <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />.</summary>
        <returns>
          <see langword="true" /> если атрибут визуализируется во время следующего вызова метода <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если <xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%2A> возвращает `true`, значение, присваиваемое <xref:System.Web.UI.HtmlTextWriterAttribute> возвращается в `value` параметра.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsStyleAttributeDefined">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Определяет, визуализируется ли указанный атрибут стиля разметки во время следующего вызова метода <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsStyleAttributeDefined">
      <MemberSignature Language="C#" Value="protected bool IsStyleAttributeDefined (System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool IsStyleAttributeDefined(valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined(System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Function IsStyleAttributeDefined (key As HtmlTextWriterStyle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool IsStyleAttributeDefined(System::Web::UI::HtmlTextWriterStyle key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterStyle" />, связанный с атрибутом.</param>
        <summary>Определяет, визуализируется ли атрибут стиля разметки во время следующего вызова метода <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />.</summary>
        <returns>
          <see langword="true" /> если атрибут будет визуализируется во время следующего вызова метода <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Чтобы получить значение, которое выводится, атрибут указанного стиля, используйте <xref:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined%28System.Web.UI.HtmlTextWriterStyle%2CSystem.String%40%29> перегрузки <xref:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined%2A> метод.  
  
   
  
## Examples  
 В следующем примере кода показано, как проверить ли `<label>` отображается элемент. В этом случае <xref:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined%2A> метод проверяет ли <xref:System.Web.UI.HtmlTextWriterStyle.Color> был определен атрибут стиля для элемента. Если <xref:System.Web.UI.HtmlTextWriterStyle.Color> атрибут не определен, <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> определяет метод <xref:System.Web.UI.HtmlTextWriterStyle.Color> атрибут и присваивает ей значение `red`.  
  
 [!code-cpp[HtmlTextWriter_Methods3#4](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#4)]
 [!code-csharp[HtmlTextWriter_Methods3#4](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#4)]
 [!code-vb[HtmlTextWriter_Methods3#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="IsStyleAttributeDefined">
      <MemberSignature Language="C#" Value="protected bool IsStyleAttributeDefined (System.Web.UI.HtmlTextWriterStyle key, out string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool IsStyleAttributeDefined(valuetype System.Web.UI.HtmlTextWriterStyle key, [out] string&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined(System.Web.UI.HtmlTextWriterStyle,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Protected Function IsStyleAttributeDefined (key As HtmlTextWriterStyle, ByRef value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool IsStyleAttributeDefined(System::Web::UI::HtmlTextWriterStyle key, [Runtime::InteropServices::Out] System::String ^ % value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
        <Parameter Name="value" Type="System.String&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterStyle" />, связанный с атрибутом.</param>
        <param name="value">Значение, назначенное атрибуту стиля.</param>
        <summary>Определяет, визуализируются ли указанный атрибут стиля разметки и его значение во время следующего вызова метода <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />.</summary>
        <returns>
          <see langword="true" /> если атрибут и его значение будут визуализироваться во время следующего вызова метода <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если <xref:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined%2A> возвращает `true`, значение, присваиваемое <xref:System.Web.UI.HtmlTextWriterStyle> в возвращается атрибут `value` параметра.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="IsValidFormAttribute">
      <MemberSignature Language="C#" Value="public virtual bool IsValidFormAttribute (string attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsValidFormAttribute(string attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.IsValidFormAttribute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsValidFormAttribute (attribute As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsValidFormAttribute(System::String ^ attribute);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="attribute">Строка, содержащая имя атрибута для проверки.</param>
        <summary>Проверьте атрибут для того, чтобы удостовериться в том, что он может быть отображен в открывающем теге элемента разметки <see langword="&lt;form&gt;" />.</summary>
        <returns>Всегда <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter> Реализации класса <xref:System.Web.UI.HtmlTextWriter.IsValidFormAttribute%2A> возвращает `true` для всех атрибутов. Переопределить <xref:System.Web.UI.HtmlTextWriter.IsValidFormAttribute%2A> ограничить атрибуты, которые может быть отображен в открывающем теге элемента `<form>` элемент.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Переопределить <see cref="M:System.Web.UI.HtmlTextWriter.IsValidFormAttribute(System.String)" /> метод для возврата <see langword="true" /> только для тех атрибутов, которые могут быть включены в <see langword="&lt;form&gt;" /> элемент разметки, для которого класс, производный от <see cref="T:System.Web.UI.HtmlTextWriter" /> класс предназначен.</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="NewLine">
      <MemberSignature Language="C#" Value="public override string NewLine { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NewLine" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.NewLine" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property NewLine As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ NewLine { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или назначает знак завершения строки, используемый объектом <see cref="T:System.Web.UI.HtmlTextWriter" />.</summary>
        <value>Знак завершения строки, используемый текущим <see cref="T:System.Web.UI.HtmlTextWriter" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Признак конца строки по умолчанию является возврат каретки и перевода строки («\r\n»).  
  
 Признак конца строки записывается в выходной поток, каждый раз, когда один из <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> вызывать методы. Если <xref:System.Web.UI.HtmlTextWriter.NewLine%2A> свойству `null`, используется знак новой строки по умолчанию.  
  
   
  
## Examples  
 В следующем примере кода показано, как использовать пользовательский класс, производный от <xref:System.Web.UI.HtmlTextWriter> класс, который переопределяет <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> метод. При вызове <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> переопределенный метод проверяет, является ли модуль записи текста отображает все `<label>` или `<a>` элементы. В этом случае <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> метод определяет, определен ли атрибут стиля для метки. Если стиль не определен, <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> метод задает значение по умолчанию для `style:color` атрибут на синий. <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> Затем использует метод <xref:System.Web.UI.HtmlTextWriter.NewLine%2A> свойство, чтобы вставить строку прерывания в теге разметку и записывает определенные атрибуты.  
  
 [!code-cpp[HtmlTextWriter_Methods#4](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#4)]
 [!code-csharp[HtmlTextWriter_Methods#4](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#4)]
 [!code-vb[HtmlTextWriter_Methods#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.WriteLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="P:System.IO.TextWriter.NewLine" />
      </Docs>
    </Member>
    <Member MemberName="OnAttributeRender">
      <MemberSignature Language="C#" Value="protected virtual bool OnAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnAttributeRender (name As String, value As String, key As HtmlTextWriterAttribute) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterAttribute key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="name">Строка, содержащая имя атрибута для визуализации.</param>
        <param name="value">Строка, содержащая значение назначенное атрибуту.</param>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />, связанный с атрибутом разметки.</param>
        <summary>Определяет, могут ли быть визуализированы указанные атрибут разметки и его значение текущему элемент разметки.</summary>
        <returns>Всегда <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter> Реализации класса <xref:System.Web.UI.HtmlTextWriter.OnAttributeRender%2A> метод всегда возвращает `true`. <xref:System.Web.UI.HtmlTextWriter.OnAttributeRender%2A> Переопределения можно определить, является ли атрибут будет отображен на странице.  
  
   
  
## Examples  
 В следующем примере кода показано, как переопределить <xref:System.Web.UI.HtmlTextWriter.OnAttributeRender%2A> метод. Если <xref:System.Web.UI.HtmlTextWriterAttribute.Size> атрибут отображается, но <xref:System.Web.UI.HtmlTextWriterAttribute.Size> значение не `30pt`, <xref:System.Web.UI.HtmlTextWriter.OnAttributeRender%2A> переопределить вызовы <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> метод, чтобы добавить <xref:System.Web.UI.HtmlTextWriterAttribute.Size> атрибут и присвойте ему значение `30pt`.  
  
 [!code-csharp[MarkupTextWriter_Methods3#5](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods3/CS/overriddenmarkup.cs#5)]
 [!code-vb[MarkupTextWriter_Methods3#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods3/VB/overriddenmarkup.vb#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>При наследовании от <see cref="T:System.Web.UI.HtmlTextWriter" /> , можно переопределить <see cref="M:System.Web.UI.HtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" /> метод для возврата <see langword="false" /> во избежание атрибут готовится к просмотру вообще, готовится к просмотру на конкретный элемент или готовится к просмотру для конкретного разметки. Например, если вы не хотите объект, производный от <see cref="T:System.Web.UI.HtmlTextWriter" /> для подготовки к просмотру <see langword="bgcolor" /> атрибут <see langword="&lt;table&gt;" /> элементов, можно переопределить <see cref="M:System.Web.UI.HtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" /> и возвращают <see langword="false" /> при <paramref name="name" /> передает <see langword="bgcolor" /> и <see cref="P:System.Web.UI.HtmlTextWriter.TagName" /> значение свойства <see langword="table" />.</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
      </Docs>
    </Member>
    <Member MemberName="OnStyleAttributeRender">
      <MemberSignature Language="C#" Value="protected virtual bool OnStyleAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnStyleAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnStyleAttributeRender (name As String, value As String, key As HtmlTextWriterStyle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnStyleAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterStyle key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="name">Строка, содержащая имя стиля атрибута для визуализации.</param>
        <param name="value">Строка, содержащая значение назначенное атрибуту стиля.</param>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterStyle" />, связанный со стилем атрибута.</param>
        <summary>Определяет, могут ли быть визуализированы указанные атрибут стиля разметки и его значение текущему элемент разметки.</summary>
        <returns>Всегда <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter> Реализации класса <xref:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender%2A> метод всегда возвращает `true`. <xref:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender%2A> Переопределения можно определить, является ли атрибут стиля будет отображен на странице.  
  
   
  
## Examples  
 В следующем примере кода показано, как переопределить <xref:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender%2A> метод. Если <xref:System.Web.UI.HtmlTextWriterStyle.Color> атрибут стиля отображается, но <xref:System.Web.UI.HtmlTextWriterStyle.Color> значение не `purple`, <xref:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender%2A> переопределить использует <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> метод, чтобы задать <xref:System.Web.UI.HtmlTextWriterStyle.Color> атрибут `purple`.  
  
 [!code-csharp[MarkupTextWriter_Methods3#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods3/CS/overriddenmarkup.cs#6)]
 [!code-vb[MarkupTextWriter_Methods3#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods3/VB/overriddenmarkup.vb#6)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>При наследовании от <see cref="T:System.Web.UI.HtmlTextWriter" /> , можно переопределить <see cref="M:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" /> метод для возврата <see langword="false" /> для предотвращения готовится к просмотру вообще, готовится к просмотру на конкретный элемент или готовится к просмотру для языка разметки определенного атрибут стиля. Например, если вы не хотите объект, который является производным от <see cref="T:System.Web.UI.HtmlTextWriter" /> для подготовки к просмотру <see langword="color" /> атрибут стиля <see langword="&lt;p&gt;" /> элемента, можно переопределить <see cref="M:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" /> и возвращают <see langword="false" /> при <paramref name="name" /> передает <see langword="color" />и <see cref="P:System.Web.UI.HtmlTextWriter.TagName" /> значение свойства <see langword="p" />.</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
      </Docs>
    </Member>
    <Member MemberName="OnTagRender">
      <MemberSignature Language="C#" Value="protected virtual bool OnTagRender (string name, System.Web.UI.HtmlTextWriterTag key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnTagRender(string name, valuetype System.Web.UI.HtmlTextWriterTag key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.OnTagRender(System.String,System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnTagRender (name As String, key As HtmlTextWriterTag) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnTagRender(System::String ^ name, System::Web::UI::HtmlTextWriterTag key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="name">Строка, содержащая имя элемента для визуализации.</param>
        <param name="key">Представление <see cref="T:System.Web.UI.HtmlTextWriterTag" />, связанное с элементом.</param>
        <summary>Определяет будет ли указанный элемент разметки визуализирован запрашиваемой странице.</summary>
        <returns>Всегда <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter> Реализации класса <xref:System.Web.UI.HtmlTextWriter.OnTagRender%2A> метод всегда возвращает `true`. <xref:System.Web.UI.HtmlTextWriter.OnTagRender%2A> Переопределения можно определить, отображается ли элемент на страницу.  
  
   
  
## Examples  
 В следующем примере кода показано, как переопределить <xref:System.Web.UI.HtmlTextWriter.OnTagRender%2A> метод. Если <xref:System.Web.UI.HtmlTextWriterTag.Font> отображается элемент <xref:System.Web.UI.HtmlTextWriter.OnTagRender%2A> переопределить использует <xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%2A> метод, чтобы определить ли <xref:System.Web.UI.HtmlTextWriterAttribute.Size> атрибут готовится к просмотру. Если нет, он использует <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> метод для создания <xref:System.Web.UI.HtmlTextWriterAttribute.Size> атрибут и присвойте ему значение `20pt`.  
  
 [!code-csharp[MarkupTextWriter_Methods3#4](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods3/CS/overriddenmarkup.cs#4)]
 [!code-vb[MarkupTextWriter_Methods3#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods3/VB/overriddenmarkup.vb#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>При наследовании от <see cref="T:System.Web.UI.HtmlTextWriter" /> , можно переопределить <see cref="M:System.Web.UI.HtmlTextWriter.OnTagRender(System.String,System.Web.UI.HtmlTextWriterTag)" /> метод для возврата <see langword="false" /> для предотвращения готовится к просмотру вообще или для языка разметки определенный элемент разметки. Например, если вы не хотите объект, который является производным от <see cref="T:System.Web.UI.HtmlTextWriter" /> для подготовки к просмотру <see langword="&lt;font&gt;" /> элемента, можно переопределить <see cref="M:System.Web.UI.HtmlTextWriter.OnTagRender(System.String,System.Web.UI.HtmlTextWriterTag)" /> метод для возврата <see langword="false" /> при запросе страницы, содержащий <see langword="&lt;font&gt;" /> элемента.</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
      </Docs>
    </Member>
    <Member MemberName="OutputTabs">
      <MemberSignature Language="C#" Value="protected virtual void OutputTabs ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OutputTabs() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.OutputTabs" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OutputTabs ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OutputTabs();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Записывает набор строк табуляции, представляющих уровень отступа для строки знаков разметки.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.OutputTabs%2A> Использует метод <xref:System.Web.UI.HtmlTextWriter.Indent%2A> свойство, чтобы определить, сколько строк табуляции для записи получить нужный отступ.  
  
 Вкладка строки, указанные с <xref:System.Web.UI.HtmlTextWriter.%23ctor%2A> конструктор. Если строка не вкладку, <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> константы (`\t`) используется.  
  
   
  
## Examples  
 В следующем примере кода показано, как переопределить <xref:System.Web.UI.HtmlTextWriter.OutputTabs%2A> метод в классе, который является производным от <xref:System.Web.UI.HtmlTextWriter> класса. <xref:System.Web.UI.HtmlTextWriter.OutputTabs%2A> Переопределить всегда использует <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> константа для выполнения отступы.  
  
 [!code-cpp[HtmlTextWriter_Methods#7](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#7)]
 [!code-csharp[HtmlTextWriter_Methods#7](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#7)]
 [!code-vb[HtmlTextWriter_Methods#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="P:System.Web.UI.HtmlTextWriter.Indent" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.DefaultTabString" />
      </Docs>
    </Member>
    <Member MemberName="PopEndTag">
      <MemberSignature Language="C#" Value="protected string PopEndTag ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string PopEndTag() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.PopEndTag" />
      <MemberSignature Language="VB.NET" Value="Protected Function PopEndTag () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::String ^ PopEndTag();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Удаляет недавно сохраненный элемент разметки из списка визуализированных элементов.</summary>
        <returns>
          <see cref="T:System.String" />, содержащий недавно визуализированный элемент разметки.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Элементы добавляются в список элементов отображения разметки по <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> метод. <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> Метод удаляет элементов разметки в списке путем вызова <xref:System.Web.UI.HtmlTextWriter.PopEndTag%2A> метод.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Список визуализированных элементов пуст.</exception>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.PushEndTag(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="PushEndTag">
      <MemberSignature Language="C#" Value="protected void PushEndTag (string endTag);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void PushEndTag(string endTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.PushEndTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub PushEndTag (endTag As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void PushEndTag(System::String ^ endTag);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endTag" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="endTag">Закрывающий тег элемента разметки.</param>
        <summary>Сохраняет указанный элемент разметки для использования позже при генерации закрывающего тега для элемента разметки.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Элементы добавляются в список элементов для отображения разметки при <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> вызовы метода <xref:System.Web.UI.HtmlTextWriter.PushEndTag%2A> метод. <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> Метод удаляет элементов разметки в списке после отображения закрывающего тега элемента.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.PopEndTag" />
      </Docs>
    </Member>
    <Member MemberName="RegisterAttribute">
      <MemberSignature Language="C#" Value="protected static void RegisterAttribute (string name, System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig void RegisterAttribute(string name, valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RegisterAttribute(System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Sub RegisterAttribute (name As String, key As HtmlTextWriterAttribute)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static void RegisterAttribute(System::String ^ name, System::Web::UI::HtmlTextWriterAttribute key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="name">Строка, содержащая имя атрибута разметки для регистрации.</param>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />, соответствующий имени атрибута.</param>
        <summary>Регистрирует атрибуты разметки литералы или динамически генерируемые, из исходного файла, чтобы они были правильно визуализированы запрашивающему клиенту.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Предопределенные атрибуты языка разметки HTML регистрируются путем вызова метода <xref:System.Web.UI.HtmlTextWriter.RegisterAttribute%2A> метод при первой <xref:System.Web.UI.HtmlTextWriter> создан объект. Динамические атрибуты могут быть зарегистрированы с помощью <xref:System.Web.UI.HtmlTextWriter.RegisterAttribute%2A> метод в другое время.  
  
 Используемые таблицы регистрации <xref:System.Web.UI.HtmlTextWriter.RegisterAttribute%2A> метод `static`, поэтому регистрация атрибутов применяется ко всем <xref:System.Web.UI.HtmlTextWriter> объектов на главном компьютере.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
      </Docs>
    </Member>
    <Member MemberName="RegisterStyle">
      <MemberSignature Language="C#" Value="protected static void RegisterStyle (string name, System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig void RegisterStyle(string name, valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RegisterStyle(System.String,System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Sub RegisterStyle (name As String, key As HtmlTextWriterStyle)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static void RegisterStyle(System::String ^ name, System::Web::UI::HtmlTextWriterStyle key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="name">Строка, передаваемая из исходного файла, указывающего имя стиля.</param>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterStyle" />, соответствующий указанному стилю.</param>
        <summary>Регистрирует свойства стиля разметки литералы или динамически генерируемые, из исходного файла, чтобы они были правильно визуализированы запрашивающему клиенту.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Стандартные атрибуты таблицы каскадных стилей (CSS) языка разметки HTML регистрируются путем вызова метода <xref:System.Web.UI.HtmlTextWriter.RegisterStyle%2A> метод при первой <xref:System.Web.UI.HtmlTextWriter> создан объект. Атрибуты динамического стиля, которые могут быть зарегистрированы с помощью <xref:System.Web.UI.HtmlTextWriter.RegisterStyle%2A> метод в другое время.  
  
 Используемые таблицы регистрации <xref:System.Web.UI.HtmlTextWriter.RegisterStyle%2A> метод `static`, поэтому регистрация атрибутов применяется ко всем <xref:System.Web.UI.HtmlTextWriter> объектов на главном компьютере.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
      </Docs>
    </Member>
    <Member MemberName="RegisterTag">
      <MemberSignature Language="C#" Value="protected static void RegisterTag (string name, System.Web.UI.HtmlTextWriterTag key);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig void RegisterTag(string name, valuetype System.Web.UI.HtmlTextWriterTag key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RegisterTag(System.String,System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Sub RegisterTag (name As String, key As HtmlTextWriterTag)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static void RegisterTag(System::String ^ name, System::Web::UI::HtmlTextWriterTag key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="name">Строка, содержащая HTML тег.</param>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterTag" />, указывающий элемент для визуализации.</param>
        <summary>Регистрирует атрибуты разметки, литералы или динамически генерируемые, из исходного файла, так чтобы они были правильно визуализированы запрашивающему клиенту.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Теги предопределенных разметки HTML языка регистрируются путем вызова метода <xref:System.Web.UI.HtmlTextWriter.RegisterTag%2A> метод при первой <xref:System.Web.UI.HtmlTextWriter> создается объект. Теги динамической разметки могут быть зарегистрированы с помощью <xref:System.Web.UI.HtmlTextWriter.RegisterTag%2A> метод в другое время.  
  
 Используемые таблицы регистрации <xref:System.Web.UI.HtmlTextWriter.RegisterTag%2A> метод `static`, поэтому регистрация тегов применяется ко всем <xref:System.Web.UI.HtmlTextWriter> объектов на главном компьютере.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
      </Docs>
    </Member>
    <Member MemberName="RenderAfterContent">
      <MemberSignature Language="C#" Value="protected virtual string RenderAfterContent ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string RenderAfterContent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderAfterContent" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function RenderAfterContent () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ RenderAfterContent();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Записывает любой текст или пространство после содержимого и перед закрывающим тегом элемента разметки в исходящий поток разметки.</summary>
        <returns>Строка, содержащая пространство или текст для записи после содержимого элемента.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.RenderAfterContent%2A> Метод может оказаться полезным в том случае, если вы хотите вставить дочерние элементы в текущий элемент разметки.  
  
   
  
## Examples  
 В следующем примере кода показано, как переопределить <xref:System.Web.UI.HtmlTextWriter.RenderAfterContent%2A> метод в классе, производным от <xref:System.Web.UI.HtmlTextWriter> класс, чтобы определить ли `<label>` отображается элемент. В этом случае <xref:System.Web.UI.HtmlTextWriter.RenderAfterContent%2A> переопределение вставляет закрывающий тег `<font>` элемент непосредственно перед закрывающим тегом `<label>` элемента. Если обнаруживается элемент, отличный от `<label>` готовится к просмотру, <xref:System.Web.UI.HtmlTextWriter.RenderAfterContent%2A> используется базовый метод.  
  
 [!code-cpp[HtmlTextWriter_Methods1#3](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CPP/htw2.cpp#3)]
 [!code-csharp[HtmlTextWriter_Methods1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CS/htw2.cs#3)]
 [!code-vb[HtmlTextWriter_Methods1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods1/VB/htw2.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see cref="T:System.Web.UI.HtmlTextWriter" /> Реализации класса <see cref="M:System.Web.UI.HtmlTextWriter.RenderAfterContent" /> возвращает <see langword="null" />. Переопределить <see cref="M:System.Web.UI.HtmlTextWriter.RenderAfterContent" /> требуется записать текст или пробел после содержимого элемента, но перед закрывающим тегом.</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="RenderAfterTag">
      <MemberSignature Language="C#" Value="protected virtual string RenderAfterTag ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string RenderAfterTag() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderAfterTag" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function RenderAfterTag () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ RenderAfterTag();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Записывает любое пространство или текст после закрывающего тега элемента разметки.</summary>
        <returns>Пространство или текст, предназначенные для записи после закрывающего тега элемента.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.RenderAfterTag%2A> Метод может быть полезен, если нужно отобразить дополнительные закрывающие теги после тега элемента.  
  
   
  
## Examples  
 В следующем примере кода показано, как переопределить <xref:System.Web.UI.HtmlTextWriter.RenderAfterTag%2A> метод, чтобы определить, является ли класс, производный от <xref:System.Web.UI.HtmlTextWriter> визуализации класс `<label>` элемента. В этом случае <xref:System.Web.UI.HtmlTextWriter.RenderAfterTag%2A> переопределение вставляет закрывающий тег `<font>` элемент сразу после `<label>` элемента. Если это не `<label>` элемент, <xref:System.Web.UI.HtmlTextWriter.RenderAfterTag%2A> используется базовый метод.  
  
 [!code-cpp[HtmlTextWriter_Methods4#2](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CPP/htmltextwriter_methods4.cpp#2)]
 [!code-csharp[HtmlTextWriter_Methods4#2](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CS/htmltextwriter_methods4.cs#2)]
 [!code-vb[HtmlTextWriter_Methods4#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods4/VB/htmltextwriter_methods4.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see cref="T:System.Web.UI.HtmlTextWriter" /> Реализации класса <see cref="M:System.Web.UI.HtmlTextWriter.RenderAfterTag" /> возвращает <see langword="null" />. Переопределить <see cref="M:System.Web.UI.HtmlTextWriter.RenderAfterTag" /> Если вы планируете написать текст или пробел после закрывающего тега элемента.</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="RenderBeforeContent">
      <MemberSignature Language="C#" Value="protected virtual string RenderBeforeContent ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string RenderBeforeContent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderBeforeContent" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function RenderBeforeContent () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ RenderBeforeContent();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Записывает любой текст или пространство перед содержимым и после открывающего тега элемента разметки.</summary>
        <returns>Пространство или текст, предназначенные для записи перед содержимым элемента. Если не переопределен, <see cref="M:System.Web.UI.HtmlTextWriter.RenderBeforeContent" /> возвращает <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.RenderBeforeContent%2A> Метод может оказаться полезным в том случае, если вы хотите вставить в текущий элемент разметки перед внутреннюю разметку дочерних элементов.  
  
   
  
## Examples  
 В следующем примере кода показано, как переопределить <xref:System.Web.UI.HtmlTextWriter.RenderBeforeContent%2A> метод, чтобы определить, является ли класс, производный от <xref:System.Web.UI.HtmlTextWriter> класс находится отрисовки `<label>` элемента. В этом случае <xref:System.Web.UI.HtmlTextWriter.RenderBeforeContent%2A> переопределение вставляет открывающего тега элемента `<font>` сразу после открывающего тега элемента `<label>` элемент. Если это не `<label>` элемент, <xref:System.Web.UI.HtmlTextWriter.RenderBeforeContent%2A> используется базовый метод.  
  
 [!code-cpp[HtmlTextWriter_Methods1#2](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CPP/htw2.cpp#2)]
 [!code-csharp[HtmlTextWriter_Methods1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CS/htw2.cs#2)]
 [!code-vb[HtmlTextWriter_Methods1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods1/VB/htw2.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see cref="T:System.Web.UI.HtmlTextWriter" /> Реализации класса <see cref="M:System.Web.UI.HtmlTextWriter.RenderBeforeContent" /> возвращает <see langword="null" />. Переопределить <see cref="M:System.Web.UI.HtmlTextWriter.RenderBeforeContent" /> требуется записать текст или пробел после открывающего тега, но раньше содержимое элемента.</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="RenderBeforeTag">
      <MemberSignature Language="C#" Value="protected virtual string RenderBeforeTag ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string RenderBeforeTag() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderBeforeTag" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function RenderBeforeTag () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ RenderBeforeTag();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Записывает любое пространство или текст перед открывающим тегом элемента разметки.</summary>
        <returns>Текст или пространство, предназначенные для записи перед открывающим тегом элемента разметки. Если не переопределен, <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A> Метод может быть полезен, если нужно отобразить дополнительные открывающие теги перед открывающим тегом предполагаемого элемента.  
  
   
  
## Examples  
 В следующем примере кода показано, как переопределить <xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A> метод, чтобы определить, является ли класс, производный от <xref:System.Web.UI.HtmlTextWriter> класс находится отрисовки `<label>` элемента. В этом случае <xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A> переопределение вставляет открывающего тега элемента `<font>` элемент непосредственно перед `<label>` элемента. Если он не отрисовывается `<label>` элемент, <xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A> используется базовый метод.  
  
 [!code-cpp[HtmlTextWriter_Methods4#1](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CPP/htmltextwriter_methods4.cpp#1)]
 [!code-csharp[HtmlTextWriter_Methods4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CS/htmltextwriter_methods4.cs#1)]
 [!code-vb[HtmlTextWriter_Methods4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods4/VB/htmltextwriter_methods4.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see cref="T:System.Web.UI.HtmlTextWriter" /> Реализации класса <see cref="M:System.Web.UI.HtmlTextWriter.RenderBeforeTag" /> возвращает <see langword="null" />. Переопределить <see cref="M:System.Web.UI.HtmlTextWriter.RenderBeforeTag" /> Если вы планируете написать текст или пробел перед открывающим тегом элемента.</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RenderBeginTag">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Записывает открывающий тег элемента разметки в исходящий поток.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RenderBeginTag">
      <MemberSignature Language="C#" Value="public virtual void RenderBeginTag (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RenderBeginTag(string tagName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderBeginTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RenderBeginTag (tagName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RenderBeginTag(System::String ^ tagName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">Строка, содержащая имя элемента разметки, для которого необходимо выполнить прорисовку открывающего тега.</param>
        <summary>Записывает открывающий тег указанного элемента разметки в выходной поток.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> переопределение <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%28System.String%29> метод, если элемент разметки не является одним из <xref:System.Web.UI.HtmlTextWriterTag> значений перечисления.  
  
 Для создания элемента разметки с помощью <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> метод, сначала вызовите <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> и <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> методов, при необходимости, чтобы указать элемент атрибуты или атрибуты стиля, которое отображается в открывающем теге элемента. После создания внутреннего разметки, вызовите метод <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> способ создания закрывающего тега.  
  
   
  
## Examples  
 В следующем примере кода показано, как вызвать <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> метод в пользовательский элемент управления для отображения открывающего тега элемента стандартным `MyTag` элемента. Затем в примере кода вызывается <xref:System.Web.UI.HtmlTextWriter.Write%2A> метод для отображения внутреннюю разметку, а затем вызывает <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> метод для закрытия элемента.  
  
 Этот пример кода создает следующую разметку:  
  
 `<MyTag>`  
  
 `Contents of MyTag`  
  
 `</MyTag>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#4)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#4)]
 [!code-vb[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddAttribute" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddStyleAttribute" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
      </Docs>
    </Member>
    <Member MemberName="RenderBeginTag">
      <MemberSignature Language="C#" Value="public virtual void RenderBeginTag (System.Web.UI.HtmlTextWriterTag tagKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RenderBeginTag(valuetype System.Web.UI.HtmlTextWriterTag tagKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderBeginTag(System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RenderBeginTag (tagKey As HtmlTextWriterTag)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RenderBeginTag(System::Web::UI::HtmlTextWriterTag tagKey);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagKey" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="tagKey">Одно из значений <see cref="T:System.Web.UI.HtmlTextWriterTag" />, определяющих открывающий тег элемента разметки, предназначенного для визуализации.</param>
        <summary>Записывает в исходящий поток открывающий тег элемента разметки, связанного с указанным значением перечисления <see cref="T:System.Web.UI.HtmlTextWriterTag" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> перегруженная версия <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%28System.Web.UI.HtmlTextWriterTag%29> метод, если элемент разметки имеет известный тип, который является одним из <xref:System.Web.UI.HtmlTextWriterTag> значений перечисления.  
  
 Для создания элемента разметки с помощью <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> метод, сначала вызовите <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> и <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> методов, при необходимости, чтобы указать элемент атрибуты или атрибуты стиля, которое отображается в открывающем теге элемента. После создания внутреннего разметки, вызовите метод <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> способ создания закрывающего тега.  
  
   
  
## Examples  
 В следующем примере кода показано, как использовать <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> метод для вывода открывающего тега элемента `<img>` элемент. Атрибуты, которые добавляются к элементу с <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> метод будет в открывающем `<img>` тег. <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> Метод используется для создания закрывающего тега.  
  
 Этот пример кода создает следующую разметку:  
  
 `<img alt="Encoding &quot;Required&quot;" myattribute="No &quot;encoding&quot; required">`  
  
 `</img>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#3)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddAttribute" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddStyleAttribute" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
      </Docs>
    </Member>
    <Member MemberName="RenderEndTag">
      <MemberSignature Language="C#" Value="public virtual void RenderEndTag ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RenderEndTag() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RenderEndTag ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RenderEndTag();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Записывает закрывающий тег элемента разметки в исходящий поток.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вызовите <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> метод после <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> перегрузка вызывается после отрисовки все содержимое между открывающим и закрывающим тегами (Внутренняя разметка) элемента.  
  
   
  
## Examples  
 В следующем примере кода показано, как вызвать <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> метод после оба <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> методу, создающему открывающий тег и <xref:System.Web.UI.HtmlTextWriter.Write%2A> метода, который отображает внутреннюю разметку между открывающим и закрывающим тегами пользовательского `MyTag` элемент был вызван.  
  
 Этот пример кода создает следующую разметку:  
  
 `<MyTag>`  
  
 `Contents of MyTag`  
  
 `</MyTag>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#4)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#4)]
 [!code-vb[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="SelfClosingChars">
      <MemberSignature Language="C#" Value="public const string SelfClosingChars;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string SelfClosingChars" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SelfClosingChars" />
      <MemberSignature Language="VB.NET" Value="Public Const SelfClosingChars As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ SelfClosingChars;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Представляет пробел и самозакрывающийся знак косой черты (/) тега разметки.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.SelfClosingChars> Поле используется в самозакрытые элементы разметки. Пример:  
  
 `<input type="submit" value="go"  />`  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="SelfClosingTagEnd">
      <MemberSignature Language="C#" Value="public const string SelfClosingTagEnd;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string SelfClosingTagEnd" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd" />
      <MemberSignature Language="VB.NET" Value="Public Const SelfClosingTagEnd As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ SelfClosingTagEnd;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Представляет закрывающий знак косой черты и закрывающую угловую скобку (/&gt;) самозакрывающегося элемента разметки.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd> Поле используется <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> метод при построении самозакрывающегося элементы разметки.  
  
   
  
## Examples  
 В следующем примере кода показано, как отображать значение настраиваемого `FileName` свойство следуют кавычки и символов, представленных <xref:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd> поля. В примере кода вызывается <xref:System.Web.UI.HtmlTextWriter.Write%2A> метод и передает <xref:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd> поля в качестве аргумента параметра для закрытия элемента.  
  
 Этот пример кода визуализирует `FileName` значение свойства, а затем следующую разметку:  
  
 `" />`  
  
 [!code-csharp[MarkupTextWriter_Constants#11](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpleimage.cs#11)]
 [!code-vb[MarkupTextWriter_Constants#11](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpleimage.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="SemicolonChar">
      <MemberSignature Language="C#" Value="public const char SemicolonChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char SemicolonChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SemicolonChar" />
      <MemberSignature Language="VB.NET" Value="Public Const SemicolonChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char SemicolonChar;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Представляет точку с запятой (;).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Передайте <xref:System.Web.UI.HtmlTextWriter.SemicolonChar> поля в качестве аргумента в параметр <xref:System.Web.UI.HtmlTextWriter.Write%2A> вызова метода, когда нужно отобразить запятой из пользовательского элемента управления или адаптер.  
  
   
  
## Examples  
 В следующем примере кода показано, как вручную визуализировать серии стилей на элементе разметки. В примере кода используется <xref:System.Web.UI.HtmlTextWriter.Write%2A> метод для отображения `font-size` и `border-style` атрибуты стиля. <xref:System.Web.UI.HtmlTextWriter.SemicolonChar> Поле используется в качестве параметра <xref:System.Web.UI.HtmlTextWriter.Write%2A> метод для разделения значение `font-size` атрибута с начала `border-style` атрибута.  
  
 Этот пример кода визуализирует следующую разметку:  
  
 `style="font-size:12pt;border-style:ridge"`  
  
 [!code-csharp[MarkupTextWriter_Constants#7](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simplebutton.cs#7)]
 [!code-vb[MarkupTextWriter_Constants#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simplebutton.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.Write(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SingleQuoteChar">
      <MemberSignature Language="C#" Value="public const char SingleQuoteChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char SingleQuoteChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SingleQuoteChar" />
      <MemberSignature Language="VB.NET" Value="Public Const SingleQuoteChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char SingleQuoteChar;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Представляет апостроф (').</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте <xref:System.Web.UI.HtmlTextWriter.SingleQuoteChar> поле, когда это необходимо для отрисовки апостроф.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="SlashChar">
      <MemberSignature Language="C#" Value="public const char SlashChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char SlashChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SlashChar" />
      <MemberSignature Language="VB.NET" Value="Public Const SlashChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char SlashChar;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Представляет знак косой черты (/).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Использование <xref:System.Web.UI.HtmlTextWriter.SlashChar> поля для визуализации косую черту помечает при создании URL-адреса. <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> Использует метод <xref:System.Web.UI.HtmlTextWriter.SlashChar> поле при записи закрывающего тега элемента разметки.  
  
   
  
## Examples  
 В следующем примере кода показано, как вручную визуализировать `src` атрибут `<img>` элемента. В примере кода используется <xref:System.Web.UI.HtmlTextWriter.Write%2A> метод с <xref:System.Web.UI.HtmlTextWriter.SlashChar> помечает поле как его параметр для отображения косой черты в пути, который применяется к `src` атрибута.  
  
 Этот пример кода визуализирует следующую разметку:  
  
 `src="/images/`  
  
 [!code-csharp[MarkupTextWriter_Constants#10](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpleimage.cs#10)]
 [!code-vb[MarkupTextWriter_Constants#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpleimage.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEndTag(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SpaceChar">
      <MemberSignature Language="C#" Value="public const char SpaceChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char SpaceChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SpaceChar" />
      <MemberSignature Language="VB.NET" Value="Public Const SpaceChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char SpaceChar;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Представляет знак ( ) пробела.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.SpaceChar> Поле используется <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> и <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> методов при записи в качестве разделителей между элементами и атрибутами.  
  
   
  
## Examples  
 В этом разделе приводятся два примера кода. Первый показано, как создать массив символов. Во втором демонстрируется использование массива.  
  
 Эти примеры кода создать следующую разметку:  
  
 `<label>`  
  
 `hello world`  
  
 `</label>`  
  
 В следующем примере кода показано, как создать <xref:System.Char> массив, содержащий <xref:System.Web.UI.HtmlTextWriter.SpaceChar> поля.  
  
 [!code-csharp[MarkupTextWriter_Methods2#13](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#13)]
 [!code-vb[MarkupTextWriter_Methods2#13](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#13)]  
  
 В следующем примере кода показано, как использовать массив, который был создан в предыдущем примере кода в качестве параметра при вызове <xref:System.Web.UI.HtmlTextWriter.Write%2A> метода.  
  
 [!code-csharp[MarkupTextWriter_Methods2#12](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#12)]
 [!code-vb[MarkupTextWriter_Methods2#12](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderBeginTag(System.Web.UI.HtmlTextWriterTag)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="StyleEqualsChar">
      <MemberSignature Language="C#" Value="public const char StyleEqualsChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char StyleEqualsChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.StyleEqualsChar" />
      <MemberSignature Language="VB.NET" Value="Public Const StyleEqualsChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char StyleEqualsChar;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Представляет знак равенства стиля (<see langword=":" />) для задания атрибутам стиля равенства значениям.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.StyleEqualsChar> Поле используется <xref:System.Web.UI.HtmlTextWriter.WriteStyleAttribute%2A> метод в качестве разделителя имен стилей и значения.  
  
   
  
## Examples  
 В следующем примере кода показано, как отобразить `FontWeight` атрибут и значение `bold` в открывающем теге элемента. В примере кода используется <xref:System.Web.UI.HtmlTextWriter.Write%2A> метод с <xref:System.Web.UI.HtmlTextWriter.StyleEqualsChar> как параметр для отображения символ, который задает значение для каждого атрибута стиля.  
  
 Этот пример кода визуализирует следующую разметку:  
  
 `FontWeight:"bold"`  
  
 [!code-csharp[MarkupTextWriter_Constants#5](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#5)]
 [!code-vb[MarkupTextWriter_Constants#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteStyleAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TagKey">
      <MemberSignature Language="C#" Value="protected System.Web.UI.HtmlTextWriterTag TagKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.HtmlTextWriterTag TagKey" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.TagKey" />
      <MemberSignature Language="VB.NET" Value="Protected Property TagKey As HtmlTextWriterTag" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Web::UI::HtmlTextWriterTag TagKey { System::Web::UI::HtmlTextWriterTag get(); void set(System::Web::UI::HtmlTextWriterTag value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.HtmlTextWriterTag</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение <see cref="T:System.Web.UI.HtmlTextWriterTag" /> для указанного элемента разметки.</summary>
        <value>Элемент разметки с визуализированным открывающим тегом.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.TagKey%2A> Свойство может использоваться только для классов, которые наследуют от <xref:System.Web.UI.HtmlTextWriter> класса. Следует считывать или устанавливать <xref:System.Web.UI.HtmlTextWriter.TagKey%2A> свойства только в вызове <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> метода; это единственный случай, ему присваивается постоянное значение.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется переопределенная версия <xref:System.Web.UI.HtmlTextWriter.RenderBeforeContent%2A> метод в классе, который является производным от <xref:System.Web.UI.HtmlTextWriter> класса. Она использует значение <xref:System.Web.UI.HtmlTextWriter.TagKey%2A> свойства, чтобы определить, является ли серверный элемент управления с помощью пользовательского <xref:System.Web.UI.HtmlTextWriter> визуализации объекта `<label>` элемент разметки. Если это так, `<font>` элемент с `color` атрибута `red` возвращается для изменения форматирования `<label>` текста элемента.  
  
 [!code-cpp[HtmlTextWriter_Methods1#2](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CPP/htw2.cpp#2)]
 [!code-csharp[HtmlTextWriter_Methods1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CS/htw2.cs#2)]
 [!code-vb[HtmlTextWriter_Methods1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods1/VB/htw2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Не удается установить значение свойства.</exception>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="P:System.Web.UI.HtmlTextWriter.TagName" />
      </Docs>
    </Member>
    <Member MemberName="TagLeftChar">
      <MemberSignature Language="C#" Value="public const char TagLeftChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char TagLeftChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.TagLeftChar" />
      <MemberSignature Language="VB.NET" Value="Public Const TagLeftChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char TagLeftChar;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Представляет открывающую угловую скобку (&lt;) тега разметки.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.TagLeftChar> Поле используется <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>, <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A>, <xref:System.Web.UI.HtmlTextWriter.WriteFullBeginTag%2A>, и <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> методов при написании теги разметки.  
  
   
  
## Examples  
 В следующем примере кода визуализирует первый знак открывающего тега элемента `<table>` элемент с именем элемента. В примере кода используется <xref:System.Web.UI.HtmlTextWriter.Write%2A> метод с <xref:System.Web.UI.HtmlTextWriter.TagLeftChar> поля в качестве параметра.  
  
 Этот пример кода визуализирует следующую разметку:  
  
 `<table`  
  
 [!code-csharp[MarkupTextWriter_Constants#9](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#9)]
 [!code-vb[MarkupTextWriter_Constants#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderBeginTag(System.Web.UI.HtmlTextWriterTag)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteBeginTag(System.String)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteFullBeginTag(System.String)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEndTag(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TagName">
      <MemberSignature Language="C#" Value="protected string TagName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TagName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.TagName" />
      <MemberSignature Language="VB.NET" Value="Protected Property TagName As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::String ^ TagName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает имя тега визуализируемого элемента разметки.</summary>
        <value>Имя тега визуализируемого элемента разметки.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.TagName%2A> Свойство может использоваться только для классов, которые наследуют от <xref:System.Web.UI.HtmlTextWriter> класса. Вы должны считывать или устанавливать <xref:System.Web.UI.HtmlTextWriter.TagName%2A> свойства только в <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> вызовов метода; это единственный случай, ему присваивается постоянное значение.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется переопределенная версия <xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A> метод в классе, который является производным от <xref:System.Web.UI.HtmlTextWriter> класса. Пример кода проверяет, является ли элемент для отображения `<label>` элемента путем вызова <xref:System.String.Compare%2A?displayProperty=nameWithType> метод и затем передачу <xref:System.Web.UI.HtmlTextWriter.TagName%2A> значение свойства и строки, `"label"`, как аргументы параметра. Если `<label>` элемент сейчас будет отображаться, открывающего тега элемента `<font>` элемент, с `color` атрибут `red`, отображается перед `<label>` открывающего тега элемента. Если этот элемент для подготовки к просмотру не `<label>` элемент, версии базового класса <xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A> вызывается метод.  
  
 [!code-cpp[HtmlTextWriter_Methods4#1](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CPP/htmltextwriter_methods4.cpp#1)]
 [!code-csharp[HtmlTextWriter_Methods4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CS/htmltextwriter_methods4.cs#1)]
 [!code-vb[HtmlTextWriter_Methods4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods4/VB/htmltextwriter_methods4.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="P:System.Web.UI.HtmlTextWriter.TagKey" />
      </Docs>
    </Member>
    <Member MemberName="TagRightChar">
      <MemberSignature Language="C#" Value="public const char TagRightChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char TagRightChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.TagRightChar" />
      <MemberSignature Language="VB.NET" Value="Public Const TagRightChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char TagRightChar;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Представляет закрывающую угловую скобку (&gt;) тега разметки.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.TagRightChar> Поле используется <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>, <xref:System.Web.UI.HtmlTextWriter.WriteFullBeginTag%2A>, и <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> методов при написании теги разметки.  
  
   
  
## Examples  
 В следующем примере кода показано, как для отображения закрывающего тега элемента `<table>` элемента путем вызова перегрузки <xref:System.Web.UI.HtmlTextWriter.Write%2A> метод. Для подготовки к просмотру последним символом тега, в примере кода используется <xref:System.Web.UI.HtmlTextWriter.Write%2A> метод с <xref:System.Web.UI.HtmlTextWriter.TagRightChar> поля в качестве параметра.  
  
 Этот пример кода визуализирует следующую разметку:  
  
 `</table>`  
  
 [!code-csharp[MarkupTextWriter_Constants#4](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#4)]
 [!code-vb[MarkupTextWriter_Constants#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderBeginTag(System.Web.UI.HtmlTextWriterTag)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteFullBeginTag(System.String)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEndTag(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Write">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Записывает указанный тип данных в исходящий поток вместе с любым требующимся пространством вкладки.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(bool value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">
          <see cref="T:System.Boolean" /> для записи в исходящий поток.</param>
        <summary>Записывает текстовое представление логического значения в исходящий поток вместе с любым требуемым пространством табуляции.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.Write%2A> Метод создает все вкладки, которые ожидают, а затем вызывает <xref:System.IO.TextWriter.Write%2A> базового метода.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(char value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">Символ в кодировке Юникод для записи в исходящий поток.</param>
        <summary>Записывает текстовое представление символа в кодировке Юникод в исходящий поток вместе с любым требуемым пространством табуляции.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.Write%2A> Метод создает все вкладки, которые ожидают, а затем вызывает <xref:System.IO.TextWriter.Write%2A> базового метода.  
  
   
  
## Examples  
 В следующем примере кода показано использование <xref:System.Web.UI.HtmlTextWriter.Write%2A> метод для закрытия открывающего тега элемента `<img>` элемента с помощью <xref:System.Web.UI.HtmlTextWriter.TagRightChar> константой.  
  
 Этот пример кода визуализирует следующую разметку:  
  
 `<img alt="A custom image">`  
  
 `</img>`  
  
 [!code-csharp[MarkupTextWriter_Samples1#5](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Samples1/CS/markuptextwriter_samples1.cs#5)]
 [!code-vb[MarkupTextWriter_Samples1#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Samples1/VB/markuptextwriter_samples1.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (char[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(char[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (buffer As Char())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(cli::array &lt;char&gt; ^ buffer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="buffer">Массив символов в кодировке Юникод для записи в исходящий поток.</param>
        <summary>Записывает текстовое представление массива символов в кодировке Юникод в исходящий поток вместе с любым требуемым пространством табуляции.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.Write%2A> Метод создает все вкладки, которые ожидают, а затем вызывает <xref:System.IO.TextWriter.Write%2A> базового метода.  
  
   
  
## Examples  
 В этом разделе приводятся два примера кода. Первый показано, как создать массив символов. Во втором демонстрируется использование массива.  
  
 Эти примеры кода создать следующую разметку:  
  
 `<label>`  
  
 `hello world`  
  
 `</label>`  
  
 В следующем примере кода показано, как создать массив символов, которые по буквам `hello world`. Включается в массив является <xref:System.Web.UI.HtmlTextWriter.SpaceChar> поле, которое создает пробел между словами.  
  
 [!code-csharp[MarkupTextWriter_Methods2#13](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#13)]
 [!code-vb[MarkupTextWriter_Methods2#13](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#13)]  
  
 В следующем примере кода демонстрируется использование <xref:System.Web.UI.HtmlTextWriter.Write%2A> метод для отображения `hello world` массив символов, созданные в предыдущем примере кода на странице, если элемент управления, содержащий этот пример включен на странице.  
  
 [!code-csharp[MarkupTextWriter_Methods2#12](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#12)]
 [!code-vb[MarkupTextWriter_Methods2#12](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Число двойной точности с плавающей запятой, записываемое в исходящий поток.</param>
        <summary>Записывает текстовое представление числа с плавающей запятой в исходящий поток вместе с любым требуемым пространством табуляции.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.Write%2A> Метод создает все вкладки, которые ожидают, а затем вызывает <xref:System.IO.TextWriter.Write%2A> базового метода.  
  
   
  
## Examples  
 В следующем примере кода показано, как использовать <xref:System.Web.UI.HtmlTextWriter.Write%2A> метод для отображения значения <xref:System.Double.MaxValue?displayProperty=nameWithType> поля.  
  
 Этот пример кода создает следующую разметку:  
  
 `<label>`  
  
 `1.79769313486232E+308`  
  
 `</label>`  
  
 [!code-csharp[MarkupTextWriter_Methods1#7](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering2.cs#7)]
 [!code-vb[MarkupTextWriter_Methods1#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering2.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(int value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">32-разрядное целое число со знаком для записи в исходящий поток.</param>
        <summary>Записывает текстовое представление 32-разрядного знакового целого числа в исходящий поток вместе со всеми необходимыми пробелами табуляции.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.Write%2A> Метод создает все вкладки, которые ожидают, а затем вызывает <xref:System.IO.TextWriter.Write%2A> базового метода.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">64-разрядное целое число со знаком для записи в исходящий поток.</param>
        <summary>Записывает текстовое представление 64-разрядного целого числа со знаком в исходящий поток вместе со всеми необходимыми пробелами табуляции.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.Write%2A> Метод создает все вкладки, которые ожидают, а затем вызывает <xref:System.IO.TextWriter.Write%2A> базового метода.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Объект для записи в исходящий поток.</param>
        <summary>Записывает текстовое представление объекта в исходящий поток вместе с любым требуемым пространством табуляции.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.Write%2A> Метод создает все вкладки, которые ожидают, а затем вызывает <xref:System.IO.TextWriter.Write%2A> базового метода.  
  
   
  
## Examples  
 В следующем примере кода показано, как использовать <xref:System.Web.UI.HtmlTextWriter.Write%2A> метод для отображения значения <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> свойство.  
  
 Этот пример кода создает следующую разметку:  
  
 `This is a rendered CultureInfo object.`  
  
 `<bold>`  
  
 Значение <xref:System.Globalization.CultureInfo.CurrentCulture%2A> свойства:  
  
 `</bold>`  
  
 [!code-csharp[MarkupTextWriter_Methods1#8](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering2.cs#8)]
 [!code-vb[MarkupTextWriter_Methods1#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering2.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(float value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">Число с плавающей запятой (одинарная точность) для записи в исходящий поток.</param>
        <summary>Записывает текстовое представление числа с плавающей запятой (одинарная точность) в исходящий поток вместе с любым требуемым пространством табуляции.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.Write%2A> Метод создает все вкладки, которые ожидают, а затем вызывает <xref:System.IO.TextWriter.Write%2A> базового метода.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется использование <xref:System.Web.UI.HtmlTextWriter.Write%2A> метод для отображения значения <xref:System.Single.Epsilon?displayProperty=nameWithType> поле, которое является наименьшее возможное значение для <xref:System.Single> структуры.  
  
 Этот пример кода создает следующую разметку:  
  
 `<b>`  
  
 `1.401298E-45`  
  
 `</b>`  
  
 [!code-csharp[MarkupTextWriter_Methods1#10](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering2.cs#10)]
 [!code-vb[MarkupTextWriter_Methods1#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering2.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (s As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ s);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">Строка для записи в исходящий поток.</param>
        <summary>Записывает указанную строку в исходящий поток вместе с любым требующимся пространством вкладки.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.Write%2A> Метод создает все вкладки, которые ожидают, а затем вызывает <xref:System.IO.TextWriter.Write%2A> базового метода.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется использование <xref:System.Web.UI.HtmlTextWriter.Write%2A> метод для отображения строки между открывающим и закрывающим тегами элемента пользовательской разметки.  
  
 Этот пример кода создает следующую разметку:  
  
 `<MyTag>`  
  
 `Contents of MyTag`  
  
 `</MyTag>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#4)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#4)]
 [!code-vb[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string format, object arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string format, object arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (format As String, arg0 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ format, System::Object ^ arg0);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Строка, содержащая ноль или другие элементы формата.</param>
        <param name="arg0">Объект для форматирования.</param>
        <summary>Записывает строку табуляции и форматированную строку в исходящий поток с помощью той же семантики, что и метод <see cref="M:System.String.Format(System.String,System.Object)" /> вместе с любым требующимся пространством табуляции.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.Write%2A> Метод создает все вкладки, которые ожидают, а затем вызывает <xref:System.IO.TextWriter.Write%2A> базового метода.  
  
   
  
## Examples  
 В следующем примере кода показано, как использовать <xref:System.Web.UI.HtmlTextWriter.Write%2A> метод для отображения форматированную строку со значением <xref:System.Globalization.CultureInfo.CurrentCulture%2A> свойство.  
  
 [!code-csharp[MarkupTextWriter_Methods1#5](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering2.cs#5)]
 [!code-vb[MarkupTextWriter_Methods1#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering2.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.String.Format(System.String,System.Object)" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string format, params object[] arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string format, object[] arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (format As String, ParamArray arg As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ arg);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">Строка, содержащая ноль или другие элементы формата.</param>
        <param name="arg">Массив объекта для форматирования.</param>
        <summary>Записывает форматированную строку, содержащую текстовое представление двух объектов массива в исходящий поток вместе с любым требуемым пространством табуляции. Этот метод использует ту же семантику, что и метод <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.Write%2A> Метод создает все вкладки, которые ожидают, а затем вызывает <xref:System.IO.TextWriter.Write%2A> базового метода.  
  
   
  
## Examples  
 Этот раздел содержит два примера кода. Первый демонстрирует визуализацию форматированной строки и содержимое массива. Во втором примере показано как объявить массив.  
  
 В следующем примере кода показано, как использовать <xref:System.Web.UI.HtmlTextWriter.Write%2A> метод для отображения форматированную строку и содержимое массива объектов, с именем `curPriceTime`. Вызов метода визуализирует второй элемент массива перед его отрисовкой первого элемента.  
  
 [!code-csharp[MarkupTextWriter_Methods2#9](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#9)]
 [!code-vb[MarkupTextWriter_Methods2#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#9)]  
  
 В следующем примере кода демонстрируется объявление `curPriceTime` массив объектов.  
  
 [!code-csharp[MarkupTextWriter_Methods2#14](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#14)]
 [!code-vb[MarkupTextWriter_Methods2#14](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.String.Format(System.String,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (buffer As Char(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Массив символов для записи текста в исходящий поток.</param>
        <param name="index">Расположение индекса в массиве откуда начинается запись.</param>
        <param name="count">Количество символов для записи в исходящий поток.</param>
        <summary>Записывает текстовое представление подмассива символов в кодировке Юникод в исходящий поток вместе с любым требуемым пространством табуляции.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.Write%2A> Метод создает все вкладки, которые ожидают, а затем вызывает <xref:System.IO.TextWriter.Write%2A> базового метода.  
  
   
  
## Examples  
 В этом разделе приводятся два примера кода. Первый показано, как создать массив символов. Во втором демонстрируется использование массива.  
  
 Эти примеры кода создать следующую разметку:  
  
 `<label>`  
  
 `hello`  
  
 `</label>`  
  
 В следующем примере кода показано, как создать массив символов, которые по буквам `hello world`. Включается в массив является <xref:System.Web.UI.HtmlTextWriter.SpaceChar> поле, которое создает пробел между словами.  
  
 [!code-csharp[MarkupTextWriter_Methods2#13](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#13)]
 [!code-vb[MarkupTextWriter_Methods2#13](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#13)]  
  
 Использует следующие части примера кода `index` и `count` параметры <xref:System.Web.UI.HtmlTextWriter.Write%2A> метод для отображения первые пять символов массив, созданный в предыдущем примере.  
  
 [!code-csharp[MarkupTextWriter_Methods2#11](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#11)]
 [!code-vb[MarkupTextWriter_Methods2#11](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string format, object arg0, object arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string format, object arg0, object arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (format As String, arg0 As Object, arg1 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Строка, содержащая ноль или другие элементы формата.</param>
        <param name="arg0">Объект для форматирования.</param>
        <param name="arg1">Объект для форматирования.</param>
        <summary>Записывает форматированную строку, содержащую текстовое представление двух объектов в исходящий поток вместе с любым требуемым пространством табуляции. Этот метод использует ту же семантику, что и метод <see cref="M:System.String.Format(System.String,System.Object,System.Object)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.Write%2A> Метод создает все вкладки, которые ожидают, а затем вызывает <xref:System.IO.TextWriter.Write%2A> базового метода.  
  
   
  
## Examples  
 В следующем примере кода показано, как использовать <xref:System.Web.UI.HtmlTextWriter.Write%2A> метод для отображения форматированную строку и значения <xref:System.Globalization.CultureInfo.CurrentCulture%2A> и <xref:System.DateTime.Today%2A> свойства.  
  
 [!code-csharp[MarkupTextWriter_Methods1#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering2.cs#6)]
 [!code-vb[MarkupTextWriter_Methods1#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering2.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.String.Format(System.String,System.Object,System.Object)" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Записывает атрибут разметки и его значение в исходящий поток.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteAttribute">
      <MemberSignature Language="C#" Value="public virtual void WriteAttribute (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteAttribute(string name, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteAttribute (name As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteAttribute(System::String ^ name, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Атрибут, записываемый в исходящий поток.</param>
        <param name="value">Значение, назначенное атрибуту.</param>
        <summary>Записывает указанный атрибут и значение разметки в исходящий поток.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> метод для записи разметки атрибуты и их значения без кодировки. <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> Метод записывает значение атрибута, заключенные в двойные кавычки ("«). Если `value` — `null`, <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> метод записывает только имя атрибута.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется отрисовки `<img>` элемент, в которых обе перегрузки <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> метода вызываются. В примере кода используется следующий процесс:  
  
-   Вызовы <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> метод, который отображает символы открытия элемента.  
  
-   Вызовы <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%29> перегрузки, который производит запись `alt` атрибута и его значения для `<img>` элемента.  
  
-   Вызовы <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29> перегрузка для отрисовки пользовательского `myattribute` атрибут со значением `No "encoding" required`, а затем задает `fEncode` для `false`.  
  
-   Закрывается открывающий тег элемента, а затем вызывает метод <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> метод закрытия `<img>` элемента.  
  
 Этот пример кода создает следующую разметку:  
  
 `<img alt="AtlValue" myattribute="No &quot;encoding&quot; required">`  
  
 `</img>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#5)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>В производных классах можно переопределить <see cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String)" /> метод, чтобы определить пользовательские правила для записи атрибутов и их значений. Например, можно написать код, который разрешен <see cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String)" /> метод для записи атрибута с пустым значением.</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="WriteAttribute">
      <MemberSignature Language="C#" Value="public virtual void WriteAttribute (string name, string value, bool fEncode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteAttribute(string name, string value, bool fEncode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteAttribute (name As String, value As String, fEncode As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteAttribute(System::String ^ name, System::String ^ value, bool fEncode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fEncode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">Атрибут разметки для записи в поток вывода.</param>
        <param name="value">Значение, назначенное атрибуту.</param>
        <param name="fEncode">Значение <see langword="true" /> для кодирования атрибута и назначенного значения; в противном случае — значение <see langword="false" />.</param>
        <summary>Записывает указанные атрибут и значение разметки в поток вывода и, если указано, записывает закодированное значение.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> метод для записи разметки атрибуты и их значения с или без кодирования. <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> Использует метод <xref:System.Web.HttpUtility.HtmlAttributeEncode%2A> метод для выполнения кодировку.  
  
 <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> Метод записывает значение атрибута, заключенные в двойные кавычки ("«). Если `value` — `null`, <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> метод записывает только имя атрибута.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется отрисовки `<img>` элемент, в которых обе перегрузки <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> метода вызываются. В примере кода используется следующий процесс:  
  
-   Вызовы <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> метод, который отображает символы открытия элемента.  
  
-   Вызовы <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%29> перегрузки, который производит запись `alt` атрибута и его значения для `<img>` элемента.  
  
-   Вызовы <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29> перегрузка для отрисовки пользовательского `myattribute` атрибут со значением `No "encoding" required`, а затем задает `fEncode` для `false`.  
  
-   Закрывается открывающий тег элемента, а затем вызывает метод <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> метод закрытия `<img>` элемента.  
  
 Этот пример кода создает следующую разметку:  
  
 `<img alt="AtlValue" myattribute="No &quot;encoding&quot; required">`  
  
 `</img>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#5)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>В производных классах можно переопределить <see cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String,System.Boolean)" /> метод, чтобы определить пользовательские правила для записи атрибутов и их значений. Например, можно написать код, который разрешен <see cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String,System.Boolean)" /> метод для записи атрибута с пустым значением.</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String,System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="WriteBeginTag">
      <MemberSignature Language="C#" Value="public virtual void WriteBeginTag (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteBeginTag(string tagName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteBeginTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteBeginTag (tagName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteBeginTag(System::String ^ tagName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">Элемент разметки, открывающий тег которого предназначен для записи.</param>
        <summary>Записывает любой пробел табуляции и открывающий тег указанного элемента разметки в исходящий поток.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> Метод не записывает закрывающей угловой скобкой (>) из открывающего тега элемента разметки. Это позволяет записывать атрибуты разметки в открывающем теге элемента. Используйте <xref:System.Web.UI.HtmlTextWriter.TagRightChar> константу, чтобы закрыть открывающий тег при вызове <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> метода. Используйте <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> метод с <xref:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd> константа при написании самозакрывающегося элементы разметки.  
  
 <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> Метод используется пользовательских серверных элементов управления, не разрешить сопоставления тегов или атрибутов и отображать элементы разметки таким же образом для каждого запроса.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется отрисовки `<img>` элемент, в которых обе перегрузки <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> метода вызываются. В примере кода используется следующий процесс:  
  
-   Вызовы <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> метод, который отображает символы открытия элемента.  
  
-   Вызовы <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%29> перегрузки, который производит запись `alt` атрибута и его значения для `<img>` элемента.  
  
-   Вызовы <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29> перегрузка для отрисовки пользовательского `myattribute` атрибут со значением `No "encoding" required`, а затем задает `fEncode` для `false`.  
  
-   Закрывается открывающий тег элемента, а затем вызывает метод <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> метод закрытия `<img>` элемента.  
  
 Этот пример кода создает следующую разметку:  
  
 `<img alt="AtlValue" myattribute="No &quot;encoding&quot; required">`  
  
 `</img>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#5)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.WriteAttribute" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.TagRightChar" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEndTag(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="WriteBreak">
      <MemberSignature Language="C#" Value="public virtual void WriteBreak ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteBreak() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteBreak" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteBreak ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteBreak();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Записывает элемент разметки <see langword="&lt;br /&gt;" /> в исходящий поток.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте <xref:System.Web.UI.HtmlTextWriter.WriteBreak%2A> метод для отображения линии разрывов страниц в пользовательский элемент управления или адаптер разметки. <xref:System.Web.UI.HtmlTextWriter.WriteBreak%2A> Метод записывает пробел между `br` и `/` для повышения совместимости HTML.  
  
   
  
## Examples  
 В следующем примере кода показано, как вызвать <xref:System.Web.UI.HtmlTextWriter.WriteBreak%2A> метод для записи `<br />` элемент браузеру после <xref:System.Web.UI.HtmlTextWriter.WriteEncodedText%2A> метод записывает закодированное `&lt;custID&gt; &amp; &lt;invoice#&gt;` разметки.  
  
 [!code-csharp[System.Web.UI.MarkupTextWriter_Samples1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/CS/stringencoder.cs#2)]
 [!code-vb[System.Web.UI.MarkupTextWriter_Samples1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/VB/stringencoder.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEncodedText(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="WriteEncodedText">
      <MemberSignature Language="C#" Value="public virtual void WriteEncodedText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEncodedText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteEncodedText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteEncodedText (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteEncodedText(System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Текстовая строка для кодирования и записи в поток вывода.</param>
        <summary>Кодирует указанный текст для запрашивающего устройства и записывает его в поток вывода.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте <xref:System.Web.UI.HtmlTextWriter.WriteEncodedText%2A> метод, когда строка содержит угловые скобки (\< или >) или знак амперсанда (&).  
  
 <xref:System.Web.UI.HtmlTextWriter.WriteEncodedText%2A> Использует метод <xref:System.Web.HttpUtility.HtmlEncode%2A> метод для выполнения кодирования, а также преобразует символ Юникода `00A0` для `&nbsp;`.  
  
   
  
## Examples  
 В следующем примере кода показано, как использовать <xref:System.Web.UI.HtmlTextWriter.WriteEncodedText%2A> метод для записи кодировке разметки `&lt;custID&gt; &amp; &lt;invoice#&gt;` в выходной поток. <xref:System.Web.UI.HtmlTextWriter.WriteBreak%2A> Метод записи `<br />`.  
  
 [!code-csharp[System.Web.UI.MarkupTextWriter_Samples1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/CS/stringencoder.cs#2)]
 [!code-vb[System.Web.UI.MarkupTextWriter_Samples1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/VB/stringencoder.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="text" /> имеет значение <see langword="null" />.</exception>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.HttpUtility.HtmlEncode(System.String,System.IO.TextWriter)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteBreak" />
      </Docs>
    </Member>
    <Member MemberName="WriteEncodedUrl">
      <MemberSignature Language="C#" Value="public virtual void WriteEncodedUrl (string url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEncodedUrl(string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteEncodedUrl(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteEncodedUrl (url As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteEncodedUrl(System::String ^ url);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="url">Строка URL-адреса для кодирования и записи в поток вывода.</param>
        <summary>Кодирует указанный URL-адрес и затем записывает его в поток вывода. URL-адрес может включать параметры.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.WriteEncodedUrl%2A> Метод кодирует строку в `url` параметр в соответствии со спецификацией для кодирования URL-адреса. Параметры, следующие за разделителем вопросительный знак (?) не кодируются.  
  
   
  
## Examples  
 В следующем примере кода показано, как использовать <xref:System.Web.UI.HtmlTextWriter.WriteEncodedUrl%2A> метод, который создает следующие выходные данные:  
  
 `http://localhost/Sample%20Folder/Sample%20%2b%20File.txt`  
  
 [!code-csharp[System.Web.UI.MarkupTextWriter_Samples1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/CS/stringencoder.cs#3)]
 [!code-vb[System.Web.UI.MarkupTextWriter_Samples1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/VB/stringencoder.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="WriteEncodedUrlParameter">
      <MemberSignature Language="C#" Value="public virtual void WriteEncodedUrlParameter (string urlText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEncodedUrlParameter(string urlText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteEncodedUrlParameter(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteEncodedUrlParameter (urlText As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteEncodedUrlParameter(System::String ^ urlText);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="urlText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="urlText">Строка параметра URL для кодирования и записи в исходящий поток.</param>
        <summary>Кодирует указанный параметр URL для запрашивающего устройства, а затем записывает его в исходящий поток.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Пробелы в части URL-адреса, кодируются как плюс (+) и знак равенства (=), кодируются как `%3d`.  
  
   
  
## Examples  
 В следующем примере кода показано, как использовать <xref:System.Web.UI.HtmlTextWriter.WriteEncodedUrlParameter%2A> метод, который создает следующие выходные данные:  
  
 `ID%3dCity+State`  
  
 [!code-csharp[System.Web.UI.MarkupTextWriter_Samples1#4](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/CS/stringencoder.cs#4)]
 [!code-vb[System.Web.UI.MarkupTextWriter_Samples1#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/VB/stringencoder.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteUrlEncodedString(System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="WriteEndTag">
      <MemberSignature Language="C#" Value="public virtual void WriteEndTag (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEndTag(string tagName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteEndTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteEndTag (tagName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteEndTag(System::String ^ tagName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">Элемент, для которого записывается закрывающий тег.</param>
        <summary>Записывает любой пробел табуляции и закрывающий тег указанного элемента разметки.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В отличие от <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> метода <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> метод не имеет логики вносить закрывающего тега элемента совпадают с соответствующим открывающий тег.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется отрисовки `<img>` элемента. В примере кода используется следующий процесс:  
  
-   Вызовы <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> метод для отображения символов открытия элемента.  
  
-   Вызывается две перегрузки <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> метод для записи атрибутов `<img>` элемента.  
  
-   Вызовы <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> метод закрытия `<img>` элемента.  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#5)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteBeginTag(System.String)" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.WriteAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteFullBeginTag">
      <MemberSignature Language="C#" Value="public virtual void WriteFullBeginTag (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteFullBeginTag(string tagName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteFullBeginTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteFullBeginTag (tagName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteFullBeginTag(System::String ^ tagName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">Элемент для записи в исходящий поток.</param>
        <summary>Записывает любой пробел табуляции и открывающий тег указанного элемента разметки в исходящий поток.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.WriteFullBeginTag%2A> Метод автоматически записывает закрывающей угловой скобкой (>) открывающего тега элемента, в отличие от <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> метод, который не записывает закрывающей угловой скобкой. Используйте <xref:System.Web.UI.HtmlTextWriter.WriteFullBeginTag%2A> для элементов разметки без атрибутов.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteBeginTag(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteLine">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Записывает данные в исходящий поток <see cref="T:System.Web.UI.HtmlTextWriter" />, как указано параметрами перегрузки, следующими за признаком конца строки. Все версии данного метода записывают любой требуемый пробел табуляции в исходящий поток.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Признак конца строки по умолчанию является символ возврата каретки и перевода строки («\r\n»). <xref:System.IO.TextWriter.WriteLine%2A> Базовый метод, используемый для записи `value` параметра.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Записывает признак конца строки в исходящий поток.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Признак конца строки по умолчанию является символ возврата каретки и перевода строки («\r\n»). Дополнительные сведения см. в разделе <xref:System.IO.TextWriter.WriteLine%2A>.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется использование <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> метод, чтобы вставить строку после `<img>` элемент подготавливается к просмотру.  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#3)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(bool value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">Логическое значение для записи в исходящий поток.</param>
        <summary>Записывает в исходящий поток любой требуемый пробел табуляции и текстовое представление логического значения, за которым следует признак конца строки.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Признак конца строки по умолчанию является символ возврата каретки и перевода строки («\r\n»). <xref:System.IO.TextWriter.WriteLine%2A> Базовый метод, используемый для записи `value` параметра.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(char value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">Символ для записи в исходящий поток.</param>
        <summary>Записывает в исходящий поток любой требуемый пробел табуляции и символ Юникода, за которым следует признак конца строки.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Признак конца строки по умолчанию является символ возврата каретки и перевода строки («\r\n»). <xref:System.IO.TextWriter.WriteLine%2A> Базовый метод, используемый для записи `value` параметра.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (char[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(char[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (buffer As Char())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(cli::array &lt;char&gt; ^ buffer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="buffer">Массив символов для записи в исходящий поток.</param>
        <summary>Записывает в исходящий поток любой требуемый пробел табуляции и массив символов Юникода, за которым следует признак конца строки.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Признак конца строки по умолчанию является символ возврата каретки и перевода строки («\r\n»). <xref:System.IO.TextWriter.WriteLine%2A> Базовый метод, используемый для записи `value` параметра.  
  
   
  
## Examples  
 В этом разделе приводятся два примера кода. Первый показано, как создать массив. Во втором демонстрируется использование этого массива.  
  
 Эти примеры кода создать следующую разметку:  
  
 `<label>`  
  
 `hello world`  
  
 `</label>`  
  
 В следующем примере кода показано, как создать массив символов, которые по буквам `hello world`. Включается в массив является <xref:System.Web.UI.HtmlTextWriter.SpaceChar> поле, которое создает пробел между словами.  
  
 [!code-csharp[MarkupTextWriter_Methods2#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#6)]
 [!code-vb[MarkupTextWriter_Methods2#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#6)]  
  
 В следующем примере кода в примере подготавливается `hello world` массив символов, который был создан в предыдущем примере с помощью <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> метод.  
  
 [!code-csharp[MarkupTextWriter_Methods2#5](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#5)]
 [!code-vb[MarkupTextWriter_Methods2#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Число двойной точности с плавающей запятой, записываемое в исходящий поток.</param>
        <summary>Записывает в исходящий поток любой требуемый пробел табуляции и текстовое представление числа двойной точности с плавающей запятой, за которым следует признак конца строки.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Признак конца строки по умолчанию является символ возврата каретки и перевода строки («\r\n»). <xref:System.IO.TextWriter.WriteLine%2A> Базовый метод, используемый для записи `value` параметра.  
  
   
  
## Examples  
 В следующем примере кода показано, как использовать <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> метод для отображения значения <xref:System.Double.MaxValue?displayProperty=nameWithType> поля.  
  
 Этот пример кода создает следующую разметку:  
  
 `<label>`  
  
 `1.79769313486232E+308`  
  
 `</label>`  
  
 [!code-csharp[MarkupTextWriter_Methods1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering.cs#3)]
 [!code-vb[MarkupTextWriter_Methods1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(int value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">32-разрядное целое число со знаком для записи в исходящий поток.</param>
        <summary>Записывает в исходящий поток все требуемые пробелы табуляции и текстовое представление 32-разрядного знакового целого числа, за которым следует признак конца строки.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Признак конца строки по умолчанию является символ возврата каретки и перевода строки («\r\n»). <xref:System.IO.TextWriter.WriteLine%2A> Базовый метод, используемый для записи `value` параметра.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">64-разрядное целое число со знаком для записи в исходящий поток.</param>
        <summary>Записывает в исходящий поток все требуемые пробелы табуляции и текстовое представление 64-разрядного целого числа со знаком, за которым следует признак конца строки.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Признак конца строки по умолчанию является символ возврата каретки и перевода строки («\r\n»). <xref:System.IO.TextWriter.WriteLine%2A> Базовый метод, используемый для записи `value` параметра.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Объект для записи в исходящий поток.</param>
        <summary>Записывает в исходящий поток любой требуемый пробел табуляции и текстовое представление объекта, за которым следует признак конца строки.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Признак конца строки по умолчанию является символ возврата каретки и перевода строки («\r\n»). <xref:System.IO.TextWriter.WriteLine%2A> Базовый метод, используемый для записи `value` параметра.  
  
   
  
## Examples  
 В следующем примере кода показано, как использовать <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> метод для отображения значения <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> свойства для элемента управления.  
  
 [!code-csharp[MarkupTextWriter_Methods1#4](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering.cs#4)]
 [!code-vb[MarkupTextWriter_Methods1#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(float value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">Число одинарной точности с плавающей запятой, записываемое в исходящий поток.</param>
        <summary>Записывает в исходящий поток любой требуемый пробел табуляции и текстовое представление числа одинарной точности с плавающей запятой, за которым следует признак конца строки.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Признак конца строки по умолчанию является символ возврата каретки и перевода строки («\r\n»). <xref:System.IO.TextWriter.WriteLine%2A> Базовый метод, используемый для записи `value` параметра.  
  
   
  
## Examples  
 В следующем примере кода показано, как использовать <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> метод для отображения значения <xref:System.Single.Epsilon?displayProperty=nameWithType> поле, которое является наименьшее возможное значение для <xref:System.Single> структуры.  
  
 Этот пример кода создает следующую разметку:  
  
 `<b>`  
  
 `1.401298E-45`  
  
 `</b>`  
  
 [!code-csharp[MarkupTextWriter_Methods1#9](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering.cs#9)]
 [!code-vb[MarkupTextWriter_Methods1#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (s As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ s);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">Строка для записи в исходящий поток.</param>
        <summary>Записывает в исходящий поток любой требуемый пробел табуляции и текстовую строку, за которой следует признак конца строки.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Признак конца строки по умолчанию является символ возврата каретки и перевода строки («\r\n»). <xref:System.IO.TextWriter.WriteLine%2A> Базовый метод, используемый для записи `value` параметра.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::UInt32 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">Целое число без знака длиной 4 байта, записываемое в исходящий поток.</param>
        <summary>Записывает в исходящий поток любой требуемый пробел табуляции и текстовое представление 4-разрядного целого числа без знака, за которым следует признак конца строки.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Признак конца строки по умолчанию является символ возврата каретки и перевода строки («\r\n»). <xref:System.IO.TextWriter.WriteLine%2A> Базовый метод, используемый для записи `value` параметра.  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Int64)" />
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string format, object arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string format, object arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (format As String, arg0 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ format, System::Object ^ arg0);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Строка, содержащая ноль или более элементов формата.</param>
        <param name="arg0">Объект для форматирования.</param>
        <summary>Записывает в исходящий поток любой требуемый пробел табуляции и форматированную строку, содержащую текстовое представление объекта, за которым следует признак конца строки.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Признак конца строки по умолчанию является символ возврата каретки и перевода строки («\r\n»). <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> Метод использует ту же семантику, что <xref:System.String.Format%28System.String%2CSystem.Object%29> метод. <xref:System.IO.TextWriter.WriteLine%2A> Базовый метод, используемый для записи `value` параметра.  
  
   
  
## Examples  
 В следующем примере кода показано, как использовать <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> метод для отображения форматированную строку со значением <xref:System.Globalization.CultureInfo.CurrentCulture%2A> свойство.  
  
 [!code-csharp[MarkupTextWriter_Methods1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering.cs#1)]
 [!code-vb[MarkupTextWriter_Methods1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string format, params object[] arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string format, object[] arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (format As String, ParamArray arg As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ arg);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">Строка, содержащая ноль или более элементов формата.</param>
        <param name="arg">Массив объекта для форматирования.</param>
        <summary>Записывает в исходящий поток любой требуемый пробел табуляции и форматированную строку, содержащую текстовое представление массива объекта, за которым следует признак конца строки.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Признак конца строки по умолчанию является символ возврата каретки и перевода строки («\r\n»). <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> Метод использует ту же семантику, что <xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29> метод. <xref:System.IO.TextWriter.WriteLine%2A> Базовый метод, используемый для записи `value` метод.  
  
   
  
## Examples  
 Этот раздел содержит два примера кода. Первый демонстрирует визуализацию строки и массив в выходной поток. Во втором показан способ объявления массива.  
  
 В следующем примере кода демонстрируется использование <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> для отрисовки форматированную строку и содержимое массива объектов в поток вывода.  
  
 [!code-csharp[MarkupTextWriter_Methods2#2](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#2)]
 [!code-vb[MarkupTextWriter_Methods2#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#2)]  
  
 В следующем примере кода показано, как объявить массив объектов, в предыдущем примере кода.  
  
 [!code-csharp[MarkupTextWriter_Methods2#7](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#7)]
 [!code-vb[MarkupTextWriter_Methods2#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (buffer As Char(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Массив символов для записи текста в исходящий поток.</param>
        <param name="index">Индекс в массиве знаков, с которого начинается запись.</param>
        <param name="count">Количество символов в массиве для записи в исходящий поток.</param>
        <summary>Записывает в исходящий поток любой требуемый пробел табуляции и подмассив символов Юникода, за которым следует признак конца строки.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Признак конца строки по умолчанию является символ возврата каретки и перевода строки («\r\n»). <xref:System.IO.TextWriter.WriteLine%2A> Базовый метод, используемый для записи `value` параметра.  
  
   
  
## Examples  
 Этот раздел содержит два примера кода. Первый показано, как создать массив символов. Во втором демонстрируется использование массива.  
  
 Эти примеры кода создать следующую разметку:  
  
 `<label>`  
  
 `hello`  
  
 `</label>`  
  
 В следующем примере кода показано, как создать массив символов, которые по буквам `hello world`. Включается в массив является <xref:System.Web.UI.HtmlTextWriter.SpaceChar> поле, которое создает пробел между словами.  
  
 [!code-csharp[MarkupTextWriter_Methods2#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#6)]
 [!code-vb[MarkupTextWriter_Methods2#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#6)]  
  
 Следующий пример кода использует `index` и `count` параметры <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> метод для отображения первые пять символов массив, созданный в предыдущем примере кода.  
  
 [!code-csharp[MarkupTextWriter_Methods2#4](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#4)]
 [!code-vb[MarkupTextWriter_Methods2#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string format, object arg0, object arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string format, object arg0, object arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (format As String, arg0 As Object, arg1 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Строка, содержащая ноль или более элементов формата.</param>
        <param name="arg0">Объект для форматирования.</param>
        <param name="arg1">Объект для форматирования.</param>
        <summary>Записывает в исходящий поток любой требуемый пробел табуляции и форматированную строку, содержащую текстовое представление двух объектов, за которым следует признак конца строки.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Признак конца строки по умолчанию является символ возврата каретки и перевода строки («\r\n»). <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> Метод использует ту же семантику, что <xref:System.String.Format%28System.String%2CSystem.Object%2CSystem.Object%29> метод. <xref:System.IO.TextWriter.WriteLine%2A> Базовый метод, используемый для записи `value` параметра.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется использование <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> метод для отображения форматированную строку и значения <xref:System.Globalization.CultureInfo.CurrentCulture%2A> свойство и <xref:System.DateTime.Today%2A> свойства.  
  
 [!code-csharp[MarkupTextWriter_Methods1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering.cs#2)]
 [!code-vb[MarkupTextWriter_Methods1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLineNoTabs">
      <MemberSignature Language="C#" Value="public void WriteLineNoTabs (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteLineNoTabs(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLineNoTabs(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteLineNoTabs (s As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteLineNoTabs(System::String ^ s);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">Строка для записи в исходящий поток.</param>
        <summary>Записывает в исходящий поток строку, за которой следует признак конца строки. Этот метод игнорирует любой указанный пробел табуляции.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте <xref:System.Web.UI.HtmlTextWriter.WriteLineNoTabs%2A> метод вместо <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> метод, если нужно отобразить любой табуляции опережает отображаемой строки не `s`.  
  
 Признак конца строки по умолчанию является символ возврата каретки и перевода строки («\r\n»). <xref:System.IO.TextWriter.WriteLine%2A> Базовый метод, используемый для записи `value` параметра.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteStyleAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Записывает атрибут стиля и его значение в исходящий поток.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteStyleAttribute">
      <MemberSignature Language="C#" Value="public virtual void WriteStyleAttribute (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteStyleAttribute(string name, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteStyleAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteStyleAttribute (name As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteStyleAttribute(System::String ^ name, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Атрибут стиля, записываемый в исходящий поток.</param>
        <param name="value">Значение, назначенное атрибуту стиля.</param>
        <summary>Записывает указанный атрибут стиля в исходящий поток.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.WriteStyleAttribute%2A> Метод записывает атрибут стиля в следующей форме:  
  
 `name` `=` `value` `;`  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.Write" />
      </Docs>
    </Member>
    <Member MemberName="WriteStyleAttribute">
      <MemberSignature Language="C#" Value="public virtual void WriteStyleAttribute (string name, string value, bool fEncode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteStyleAttribute(string name, string value, bool fEncode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteStyleAttribute(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteStyleAttribute (name As String, value As String, fEncode As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteStyleAttribute(System::String ^ name, System::String ^ value, bool fEncode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fEncode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">Атрибут стиля, записываемый в исходящий поток.</param>
        <param name="value">Значение, назначенное атрибуту стиля.</param>
        <param name="fEncode">
          <see langword="true" /> для кодирования атрибута стиля и назначенного ему значения; в противном случае — значение <see langword="false" />.</param>
        <summary>Записывает указанный атрибут стиля и значение в исходящий поток и, если указано, кодирует значение.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.WriteStyleAttribute%2A> Метод записывает атрибут стиля в следующей форме:  
  
 `name` `=` `value` `;`  
  
 <xref:System.Web.HttpUtility.HtmlAttributeEncode%2A> Метод, используемый для кодирования `value` параметра.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.Write" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String,System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="WriteUrlEncodedString">
      <MemberSignature Language="C#" Value="protected void WriteUrlEncodedString (string text, bool argument);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void WriteUrlEncodedString(string text, bool argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteUrlEncodedString(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub WriteUrlEncodedString (text As String, argument As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void WriteUrlEncodedString(System::String ^ text, bool argument);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="argument" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">Строка для кодирования и записи в исходящий поток.</param>
        <param name="argument">
          <see langword="true" /> для кодирования строки в качестве части раздела параметра URL; <see langword="false" /> для кодирования строки в качестве части раздела пути URL.</param>
        <summary>Записывает указанную строку, кодируя ее по требованиям URL.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.WriteUrlEncodedString%2A> Метод кодирует символы, которые можно считать разделители URL-адрес (зависит от настройки `argument`) в строки формы `%xx`, если код ASCII меньше, чем 128; в противном случае — `%uxxxx`, где `x` — шестнадцатеричная цифра.  
  
 <xref:System.Web.UI.HtmlTextWriter.WriteEncodedUrl%2A> И <xref:System.Web.UI.HtmlTextWriter.WriteEncodedUrlParameter%2A> методы используют <xref:System.Web.UI.HtmlTextWriter.WriteUrlEncodedString%2A> метод как вспомогательный метод.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEncodedUrl(System.String)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEncodedUrlParameter(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>