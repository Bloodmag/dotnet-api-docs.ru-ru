<Type Name="ScriptReference" FullName="System.Web.UI.ScriptReference">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6649a80431351c05061b611f23084a727c1068f5" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36376301" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ScriptReference : System.Web.UI.ScriptReferenceBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ScriptReference extends System.Web.UI.ScriptReferenceBase" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.ScriptReference" />
  <TypeSignature Language="VB.NET" Value="Public Class ScriptReference&#xA;Inherits ScriptReferenceBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class ScriptReference : System::Web::UI::ScriptReferenceBase" />
  <TypeSignature Language="F#" Value="type ScriptReference = class&#xA;    inherit ScriptReferenceBase" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.ScriptReferenceBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Path")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Регистрирует файл ECMAScript (JavaScript) для использования в веб — странице ASP.NET.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Можно включить файл JavaScript на веб-страницу ASP.NET, зарегистрировав его через <xref:System.Web.UI.ScriptReference> объекта. Можно зарегистрировать файл скрипта, расположенного в файл .js (статический файл скрипта) на веб-сайте. Также можно зарегистрировать файл скрипта, внедренных в качестве ресурса в сборку. После регистрации файла скрипта, можно использовать его функции в клиентском сценарии на веб-странице.  
  
 Чтобы зарегистрировать статический файл скрипта, задайте <xref:System.Web.UI.ScriptReferenceBase.Path%2A> свойство <xref:System.Web.UI.ScriptReference> объекта относительное расположение файла.  
  
 Чтобы зарегистрировать файл скрипта, внедренных в качестве ресурса в сборку, задайте <xref:System.Web.UI.ScriptReference.Assembly%2A> на имя сборки, содержащей файл. Затем установите <xref:System.Web.UI.ScriptReference.Name%2A> на имя JS-файла, внедренного в сборку. В этом случае файл сценария должен внедряться, не связаны.  
  
 Задать <xref:System.Web.UI.ScriptReferenceBase.ScriptMode%2A> свойство, указывающее, следует ли использовать отладочной или окончательной версии скрипта.  
  
 <xref:System.Web.UI.ScriptMode.Auto> Значение выдает разные результаты в зависимости от того, является ли он ссылается, в отдельный файл скрипта или файл сценария, внедренных в сборку в качестве ресурса. Отдельный файл скрипта, определяется с <xref:System.Web.UI.ScriptReferenceBase.Path%2A> свойство. Ссылка на сборку должен осуществляться через <xref:System.Web.UI.ScriptReference.Name%2A> и <xref:System.Web.UI.ScriptReference.Assembly%2A> свойства. Результаты для <xref:System.Web.UI.ScriptMode.Auto> значения, как показано ниже:  
  
-   При применении в отдельный файл скрипта где <xref:System.Web.UI.ScriptReferenceBase.Path%2A> свойство указано, <xref:System.Web.UI.ScriptMode.Auto> значение эквивалентно <xref:System.Web.UI.ScriptMode.Release>.  
  
-   При применении ссылку на скрипт в сборке, <xref:System.Web.UI.ScriptMode.Auto> эквивалентно <xref:System.Web.UI.ScriptMode.Inherit>. Только если <xref:System.Web.UI.ScriptReference.Name%2A> указано, используется для ссылки на скрипт. Когда <xref:System.Web.UI.ScriptReference.Name%2A> и <xref:System.Web.UI.ScriptReferenceBase.Path%2A> свойства указаны, <xref:System.Web.UI.ScriptReferenceBase.Path%2A> свойства используется вместо <xref:System.Web.UI.ScriptReference.Name%2A>, но <xref:System.Web.UI.ScriptMode.Auto> значение эквивалентно по-прежнему <xref:System.Web.UI.ScriptMode.Inherit>.  
  
   
  
## Examples  
 В следующем примере показано, как для ссылки на пользовательский элемент управления и файл JavaScript, внедренных в сборку элемента управления. Предполагается, что сборка находится в папке Bin веб-сайта. Анимирует пользовательский элемент управления <xref:System.Web.UI.UpdatePanel> элементов управления. Файл JavaScript компилируется как внедренный ресурс с именем SampleControl.UpdatePanelAnimation.js. Зарегистрируйте внедренный файл JavaScript с помощью <xref:System.Web.UI.ScriptReference.Assembly%2A> и <xref:System.Web.UI.ScriptReference.Name%2A> свойства.  
  
 Чтобы использовать этот пример, скомпилируйте файл JavaScript, который показан в примере в качестве внедренного ресурса с пользовательским элементом управления. Поместите результирующую сборку в папку Bin веб-сайта. Пример того, как для внедрения в сборку файла JavaScript см. в разделе [Пошаговое руководство: внедрения файл JavaScript в качестве ресурса в сборку](http://msdn.microsoft.com/library/d8cb78cd-95a9-4dc6-92df-391866817e89).  
  
 В следующем примере страницы, использующей пользовательский элемент управления.  
  
 [!code-aspx-csharp[System.Web.UI.ScriptReference#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptReference/CS/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ScriptReference#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptReference/vb/Default.aspx#1)]  
  
 В следующем примере показано определение класса пользовательского элемента управления.  
  
 [!code-csharp[System.Web.UI.ScriptReference#2](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptReference/CS/customcontrol.cs#2)]
 [!code-vb[System.Web.UI.ScriptReference#2](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptReference/vb/customcontrol.vb#2)]  
  
 В следующем примере вспомогательный файл JavaScript.  
  
 [!code-javascript[System.Web.UI.ScriptReference#3](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptReference/CS/UpdatePanelAnimation.js#3)]  
  
 В следующем примере код, который необходимо добавить в файл AssemblyInfo проекта, который содержит пользовательский элемент управления и файл JavaScript.  
  
 [!code-csharp[System.Web.UI.ScriptReference#4](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptReference/CS/AssemblyInfo.cs#4)]
 [!code-vb[System.Web.UI.ScriptReference#4](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptReference/vb/AssemblyInfo.vb#4)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.UI.ScriptReference" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ScriptReference ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptReference.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ScriptReference();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.UI.ScriptReference" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ScriptReference (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptReference.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ScriptReference(System::String ^ path);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.ScriptReference : string -&gt; System.Web.UI.ScriptReference" Usage="new System.Web.UI.ScriptReference path" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Путь файла пользовательского скрипта по отношению к веб — странице.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.UI.ScriptReference" /> с помощью указанного принтера.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ScriptReference (string name, string assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, string assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptReference.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, assembly As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ScriptReference(System::String ^ name, System::String ^ assembly);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.ScriptReference : string * string -&gt; System.Web.UI.ScriptReference" Usage="new System.Web.UI.ScriptReference (name, assembly)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="assembly" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Имя файла скрипта, встроенного в сборку.</param>
        <param name="assembly">Имя сборки, содержащей файл пользовательского скрипта как встроенный ресурс.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.UI.ScriptReference" />, используя указанные имя и сборку.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Assembly">
      <MemberSignature Language="C#" Value="public string Assembly { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Assembly" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptReference.Assembly" />
      <MemberSignature Language="VB.NET" Value="Public Property Assembly As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Assembly { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Assembly : string with get, set" Usage="System.Web.UI.ScriptReference.Assembly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает имя сборки, содержащей пользовательский файл скрипта как внедренный ресурс.</summary>
        <value>Полностью или частично определенное имя сборки, содержащей пользовательский файл скрипта как внедренный ресурс.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Задать <xref:System.Web.UI.ScriptReference.Assembly%2A> свойства при ссылке на файл клиентского скрипта, который включается в качестве внедренного ресурса в сборку. Задать <xref:System.Web.UI.ScriptReference.Assembly%2A> сборка полностью или частично определенное имя. Полное имя сборки включает имя, язык и региональные параметры, открытый ключ и номер версии. Частично определенное имя сборки включает только имя.  
  
 Если указать значение для <xref:System.Web.UI.ScriptReference.Assembly%2A>, необходимо также указать имя внедренного ресурса в <xref:System.Web.UI.ScriptReference.Name%2A> свойство. В противном случае <xref:System.InvalidOperationException> будет создано.  
  
 Ссылка на сборку должен быть расположен в папке Bin веб-сайта или в глобальном кэше сборок.  
  
   
  
## Examples  
 В следующем примере показано, как для ссылки на пользовательский элемент управления и файл JavaScript, внедренных в сборку элемента управления. Предполагается, что сборка находится в папке Bin веб-сайта. Анимирует пользовательский элемент управления <xref:System.Web.UI.UpdatePanel> элементов управления. Файл JavaScript компилируется как внедренный ресурс с именем SampleControl.UpdatePanelAnimation.js. Зарегистрируйте внедренный файл JavaScript с помощью <xref:System.Web.UI.ScriptReference.Assembly%2A> и <xref:System.Web.UI.ScriptReference.Name%2A> свойства.  
  
 Чтобы использовать этот пример, скомпилируйте файл JavaScript, который показан в примере в качестве внедренного ресурса с пользовательским элементом управления. Поместите результирующую сборку в папку Bin веб-сайта. Пример того, как для внедрения в сборку файла JavaScript см. в разделе [Пошаговое руководство: внедрения файл JavaScript в качестве ресурса в сборку](http://msdn.microsoft.com/library/d8cb78cd-95a9-4dc6-92df-391866817e89).  
  
 В следующем примере страницы, использующей пользовательский элемент управления.  
  
 [!code-aspx-csharp[System.Web.UI.ScriptReference#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptReference/CS/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ScriptReference#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptReference/vb/Default.aspx#1)]  
  
 В следующем примере показано определение класса пользовательского элемента управления.  
  
 [!code-csharp[System.Web.UI.ScriptReference#2](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptReference/CS/customcontrol.cs#2)]
 [!code-vb[System.Web.UI.ScriptReference#2](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptReference/vb/customcontrol.vb#2)]  
  
 В следующем примере вспомогательный файл JavaScript.  
  
 [!code-javascript[System.Web.UI.ScriptReference#3](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptReference/CS/UpdatePanelAnimation.js#3)]  
  
 В следующем примере код, который необходимо добавить в файл AssemblyInfo проекта, который содержит пользовательский элемент управления и файл JavaScript.  
  
 [!code-csharp[System.Web.UI.ScriptReference#4](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptReference/CS/AssemblyInfo.cs#4)]
 [!code-vb[System.Web.UI.ScriptReference#4](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptReference/vb/AssemblyInfo.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUrl">
      <MemberSignature Language="C#" Value="protected internal override string GetUrl (System.Web.UI.ScriptManager scriptManager, bool zip);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance string GetUrl(class System.Web.UI.ScriptManager scriptManager, bool zip) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptReference.GetUrl(System.Web.UI.ScriptManager,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override System::String ^ GetUrl(System::Web::UI::ScriptManager ^ scriptManager, bool zip);" />
      <MemberSignature Language="F#" Value="override this.GetUrl : System.Web.UI.ScriptManager * bool -&gt; string" Usage="scriptReference.GetUrl (scriptManager, zip)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scriptManager" Type="System.Web.UI.ScriptManager" />
        <Parameter Name="zip" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="scriptManager">Элемент управления <see langword="ScriptManager" /> на целевой веб-странице.</param>
        <param name="zip">Значение <see langword="true" />, если скрипт необходимо сжать, в противном случае — <see langword="false" />.</param>
        <summary>Извлекает URL-адрес, отображаемый в качестве атрибута <see langword="src" /> элемента <see langword="script" />.</summary>
        <returns>Строка, содержащая URL-адрес, отображаемый в качестве атрибута <see langword="src" /> элемента <see langword="script" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IgnoreScriptPath">
      <MemberSignature Language="C#" Value="public bool IgnoreScriptPath { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnoreScriptPath" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptReference.IgnoreScriptPath" />
      <MemberSignature Language="VB.NET" Value="Public Property IgnoreScriptPath As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IgnoreScriptPath { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IgnoreScriptPath : bool with get, set" Usage="System.Web.UI.ScriptReference.IgnoreScriptPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This property is obsolete. Instead of using ScriptManager.ScriptPath, set the Path property on each individual ScriptReference.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, указывающее включено ли свойство <see cref="P:System.Web.UI.ScriptManager.ScriptPath" /> в URL — адрес при регистрации пользовательского файла скрипта из ресурса.</summary>
        <value>
          <see langword="true" />, если путь скрипта не используется при регистрации пользовательского скрипта, в противном случае — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Задать <xref:System.Web.UI.ScriptReference.IgnoreScriptPath%2A> для `true` Если вы хотите зарегистрировать файл клиентского скрипта, не включая <xref:System.Web.UI.ScriptManager.ScriptPath%2A> значение в URL-адрес файла скрипта.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAjaxFrameworkScript">
      <MemberSignature Language="C#" Value="protected internal override bool IsAjaxFrameworkScript (System.Web.UI.ScriptManager scriptManager);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance bool IsAjaxFrameworkScript(class System.Web.UI.ScriptManager scriptManager) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptReference.IsAjaxFrameworkScript(System.Web.UI.ScriptManager)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override bool IsAjaxFrameworkScript(System::Web::UI::ScriptManager ^ scriptManager);" />
      <MemberSignature Language="F#" Value="override this.IsAjaxFrameworkScript : System.Web.UI.ScriptManager -&gt; bool" Usage="scriptReference.IsAjaxFrameworkScript scriptManager" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scriptManager" Type="System.Web.UI.ScriptManager" />
      </Parameters>
      <Docs>
        <param name="scriptManager">Объект <see cref="T:System.Web.UI.ScriptManager" />.</param>
        <summary>Определяет, указывает ли данная ссылка на скрипт технологии AJAX ASP.NET.</summary>
        <returns>Значение <see langword="true" />, если данная ссылка указывает на скрипт технологии AJAX; в противном случае — значение <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFromSystemWebExtensions">
      <MemberSignature Language="C#" Value="protected internal override bool IsFromSystemWebExtensions ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance bool IsFromSystemWebExtensions() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptReference.IsFromSystemWebExtensions" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function IsFromSystemWebExtensions () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override bool IsFromSystemWebExtensions();" />
      <MemberSignature Language="F#" Value="override this.IsFromSystemWebExtensions : unit -&gt; bool" Usage="scriptReference.IsFromSystemWebExtensions " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This method is obsolete. Use IsAjaxFrameworkScript(ScriptManager) instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Определяет, содержит ли составной скрипт ссылку на скрипт, написанный с использованием технологии ASP.NET AJAX.</summary>
        <returns>Значение <see langword="true" />, если составной скрипт содержит ссылку на скрипт, написанный с использованием технологии ASP.NET AJAX; в противном случае — значение <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptReference.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Web.UI.ScriptReference.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает имя сборки, содержащей файл пользовательского скрипта как встроенный ресурс.</summary>
        <value>Имя файла пользовательского скрипта, встроенного в сборку как ресурс.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Задать <xref:System.Web.UI.ScriptReference.Name%2A> свойства для ссылки на файл клиентского скрипта, внедренных в сборку в качестве ресурса.  
  
 При указании значения для обоих <xref:System.Web.UI.ScriptReferenceBase.Path%2A> и <xref:System.Web.UI.ScriptReference.Name%2A> свойства в ту же ссылку на скрипт, <xref:System.Web.UI.ScriptReferenceBase.Path%2A> имеет приоритет.  
  
   
  
## Examples  
 В следующем примере показано, как для ссылки на пользовательский элемент управления и файл JavaScript, внедренных в сборку элемента управления. Предполагается, что сборка находится в папке Bin веб-сайта. Анимирует пользовательский элемент управления <xref:System.Web.UI.UpdatePanel> элементов управления. Файл JavaScript компилируется как внедренный ресурс с именем SampleControl.UpdatePanelAnimation.js. Зарегистрируйте внедренный файл JavaScript с помощью <xref:System.Web.UI.ScriptReference.Assembly%2A> и <xref:System.Web.UI.ScriptReference.Name%2A> свойства.  
  
 Чтобы использовать этот пример, скомпилируйте файл JavaScript, который показан в примере в качестве внедренного ресурса с пользовательским элементом управления. Поместите результирующую сборку в папку Bin веб-сайта. Пример того, как для внедрения в сборку файла JavaScript см. в разделе [Пошаговое руководство: внедрения файл JavaScript в качестве ресурса в сборку](http://msdn.microsoft.com/library/d8cb78cd-95a9-4dc6-92df-391866817e89).  
  
 В следующем примере страницы, использующей пользовательский элемент управления.  
  
 [!code-aspx-csharp[System.Web.UI.ScriptReference#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptReference/CS/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ScriptReference#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptReference/vb/Default.aspx#1)]  
  
 В следующем примере показано определение класса пользовательского элемента управления.  
  
 [!code-csharp[System.Web.UI.ScriptReference#2](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptReference/CS/customcontrol.cs#2)]
 [!code-vb[System.Web.UI.ScriptReference#2](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptReference/vb/customcontrol.vb#2)]  
  
 В следующем примере вспомогательный файл JavaScript.  
  
 [!code-javascript[System.Web.UI.ScriptReference#3](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptReference/CS/UpdatePanelAnimation.js#3)]  
  
 В следующем примере код, который необходимо добавить в файл AssemblyInfo проекта, который содержит пользовательский элемент управления и файл JavaScript.  
  
 [!code-csharp[System.Web.UI.ScriptReference#4](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptReference/CS/AssemblyInfo.cs#4)]
 [!code-vb[System.Web.UI.ScriptReference#4](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptReference/vb/AssemblyInfo.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptReference.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="scriptReference.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает строку, которая представляет значение свойства <see cref="P:System.Web.UI.ScriptReference.Name" /> или свойства <see cref="P:System.Web.UI.ScriptReferenceBase.Path" />, либо имя типа.</summary>
        <returns>Значение свойства <see cref="P:System.Web.UI.ScriptReference.Name" />, если оно определено, или значение свойства <see cref="P:System.Web.UI.ScriptReferenceBase.Path" />, если оно определено, в противном случае — значение свойства <see cref="P:System.Reflection.MemberInfo.Name" /> для класса.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>