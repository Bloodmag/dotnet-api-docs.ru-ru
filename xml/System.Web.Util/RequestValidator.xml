<Type Name="RequestValidator" FullName="System.Web.Util.RequestValidator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8b4c79fe59673d5d8a6ab4176cc578a2c36aec23" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30609488" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class RequestValidator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RequestValidator extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Util.RequestValidator" />
  <TypeSignature Language="VB.NET" Value="Public Class RequestValidator" />
  <TypeSignature Language="C++ CLI" Value="public ref class RequestValidator" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Определяет основные методы настраиваемой проверки запросов.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 По умолчанию ASP.NET не проверяет запросы, пока код явно не запросит значение из запроса. Например, ASP.NET не проверяет значения строки запроса, пока код обращается к <xref:System.Web.HttpRequest.QueryString%2A> коллекции. По умолчанию ASP.NET также не проверяет некоторые типы данных запроса, такие как значения формы, файлы cookie, имена файлов, которые были переданы с помощью HTTP и значение <xref:System.Web.HttpRequest.RawUrl%2A> свойства.  
  
 <xref:System.Web.Util.RequestValidator> Класс является базовым классом, который можно реализовать, чтобы обеспечить проверку пользовательских запросов. При реализации этого класса, можно определить, когда происходит проверка и какого рода данные запроса для выполнения проверки.  
  
 По умолчанию ASP.NET предоставляет межсайтовых сценариев (XSS) проверки. Однако можно дополнить или заменить логику проверки запроса, которая предоставляется в ASP.NET, создав пользовательскую реализацию XSS. Например можно написать реализацию проверки пользовательского запроса, которое проверяет для атак путем внедрения кода SQL в дополнение к проверке для атак с XSS.  
  
 Для создания настраиваемой проверки запросов, необходимо написать пользовательский класс, производный от <xref:System.Web.Util.RequestValidator> базового класса. После этого настроить ASP.NET для использования пользовательского запроса проверяющий элемент управления в файле Web.config уровня приложения. Пользовательский класс можно поместить в папку App_Code, в скомпилированную библиотеку классов в папке Bin или в скомпилированную библиотеку классов в глобальном кэше СБОРОК.  
  
> [!NOTE]
>  Для приложения можно настроить только один тип проверки пользовательского запроса. Настройка типа проверки других запросов для отдельных виртуальных путей или страниц невозможна.  
  
   
  
## Examples  
 В следующем примере демонстрируется создание пользовательского запроса проверяющий элемент управления, позволяющий определенную строку для значения строки запроса.  
  
 [!code-csharp[System.Web.Util.RequestValidator#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.util.requestvalidator/cs/requestvalidator.cs#1)]
 [!code-vb[System.Web.Util.RequestValidator#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.util.requestvalidator/vb/requestvalidator.vb#1)]  
  
 Приведенный ниже показано, как настроить ASP.NET для использования пользовательского проверяющего элемента управления в файле Web.config для приложения.  
  
```  
<system.web>  
  <httpRuntime requestValidationType="CustomRequestValidation" />  
</system.web>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Util.RequestValidationSource" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RequestValidator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.RequestValidator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RequestValidator();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Util.RequestValidator" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Util.RequestValidator> Класс имеет конструктор по умолчанию. При инициализации нового экземпляра класса внутренний метод извлекает сведения настраиваемой проверки из данных конфигурации. Сведения о конфигурации находятся в <xref:System.Web.Configuration.HttpRuntimeSection> раздела. Дополнительные сведения см. в разделе [httpRuntime (схема параметров ASP.NET) элемент](http://msdn.microsoft.com/library/e9b81350-8aaf-47cc-9843-5f7d0c59f369) и <xref:System.Web.Configuration.HttpRuntimeSection.RequestValidationType%2A> атрибута.  
  
 Во время инициализации, один экземпляр <xref:System.Web.Util.RequestValidator> создается класс, и ссылку на экземпляр сохраняется в <xref:System.Web.Util.RequestValidator.Current%2A> свойство. ASP.NET не создает новый экземпляр средства проверки запроса на запрос. Таким образом пользовательские реализации <xref:System.Web.Util.RequestValidator> класс должен быть потокобезопасным.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public static System.Web.Util.RequestValidator Current { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Util.RequestValidator Current" />
      <MemberSignature Language="DocId" Value="P:System.Web.Util.RequestValidator.Current" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property Current As RequestValidator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Util::RequestValidator ^ Current { System::Web::Util::RequestValidator ^ get(); void set(System::Web::Util::RequestValidator ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Util.RequestValidator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает ссылку на текущий экземпляр <see cref="T:System.Web.Util.RequestValidator" />, который будет использован в приложении.</summary>
        <value>Экземпляр класса <see cref="T:System.Web.Util.RequestValidator" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Util.RequestValidator.Current%2A> Свойство содержит ссылку на один допустимый экземпляр <xref:System.Web.Util.RequestValidator> класса. Если экземпляр не существует, создается новый. Если экземпляр уже существует, возвращается текущий экземпляр.  
  
 Во время инициализации, один экземпляр <xref:System.Web.Util.RequestValidator> создается класс, и ссылку на экземпляр становится доступным в <xref:System.Web.Util.RequestValidator.Current%2A> свойство. ASP.NET не создает новый экземпляр средства проверки запроса на запрос. Таким образом пользовательские реализации <xref:System.Web.Util.RequestValidator> класс должен быть потокобезопасным.  
  
> [!NOTE]
>  <xref:System.Web.Util.RequestValidator.Current%2A> Свойство не является потокобезопасной, пока свойство устанавливает ссылку на текущий <xref:System.Web.Util.RequestValidator> класса.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Значение свойства равно <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="InvokeIsValidRequestString">
      <MemberSignature Language="C#" Value="public bool InvokeIsValidRequestString (System.Web.HttpContext context, string value, System.Web.Util.RequestValidationSource requestValidationSource, string collectionKey, out int validationFailureIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool InvokeIsValidRequestString(class System.Web.HttpContext context, string value, valuetype System.Web.Util.RequestValidationSource requestValidationSource, string collectionKey, [out] int32&amp; validationFailureIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.RequestValidator.InvokeIsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool InvokeIsValidRequestString(System::Web::HttpContext ^ context, System::String ^ value, System::Web::Util::RequestValidationSource requestValidationSource, System::String ^ collectionKey, [Runtime::InteropServices::Out] int % validationFailureIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="requestValidationSource" Type="System.Web.Util.RequestValidationSource" />
        <Parameter Name="collectionKey" Type="System.String" />
        <Parameter Name="validationFailureIndex" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="context">Контекст HTTP-запроса.</param>
        <param name="value">Данные HTTP-запроса для проверки.</param>
        <param name="requestValidationSource">Перечисление, представляющее источник данных запроса, подлежащих проверке. Ниже приведены возможные значения для перечисления.  
  
-   <see langword="QueryString" />  
  
-   <see langword="Form" />  
  
-   <see langword="Cookies" />  
  
-   <see langword="Files" />  
  
-   <see langword="Path" />  
  
-   <see langword="PathInfo" />  
  
-   <see langword="Headers" /></param>
        <param name="collectionKey">(Необязательно.) Ключ в коллекции запроса элемента для проверки. Этот параметр используется, если данные для проверки получены из коллекции. Если данные для проверки не из коллекции, этот параметр может иметь значение <see langword="null" />.</param>
        <param name="validationFailureIndex">После выполнения возврата этим методом указывается отсчитываемая от нуля начальная точка проблемного или недопустимого текста в коллекции запроса. Этот параметр передается неинициализированным.</param>
        <summary>Предоставляет общий метод, который вызывает защищенный метод <see cref="M:System.Web.Util.RequestValidator.IsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)" />, чтобы проверить данные HTTP-запроса.</summary>
        <returns>
          Значение <see langword="true" />, если строка для проверки не содержит незашифрованные символы, создающие возможность атаки с применением вредоносных скриптов. В противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Util.RequestValidator.InvokeIsValidRequestString%2A> Метод предоставляет общий доступ к защищаемым <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> метод. Это позволяет создавать класс пользовательскую программу-оболочку для <xref:System.Web.Util.RequestValidator> класса и вызове <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> метод без необходимости наследования от <xref:System.Web.Util.RequestValidator> класса.  
  
 Сведения о проверке запроса см. в разделе <xref:System.Web.UnvalidatedRequestValues>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidRequestString">
      <MemberSignature Language="C#" Value="protected internal virtual bool IsValidRequestString (System.Web.HttpContext context, string value, System.Web.Util.RequestValidationSource requestValidationSource, string collectionKey, out int validationFailureIndex);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool IsValidRequestString(class System.Web.HttpContext context, string value, valuetype System.Web.Util.RequestValidationSource requestValidationSource, string collectionKey, [out] int32&amp; validationFailureIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.RequestValidator.IsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual bool IsValidRequestString(System::Web::HttpContext ^ context, System::String ^ value, System::Web::Util::RequestValidationSource requestValidationSource, System::String ^ collectionKey, [Runtime::InteropServices::Out] int % validationFailureIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="requestValidationSource" Type="System.Web.Util.RequestValidationSource" />
        <Parameter Name="collectionKey" Type="System.String" />
        <Parameter Name="validationFailureIndex" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="context">Контекст текущего запроса.</param>
        <param name="value">Данные HTTP-запроса для проверки.</param>
        <param name="requestValidationSource">Перечисление, представляющее источник данных запроса, подлежащих проверке. Ниже приведены возможные значения для перечисления.  
  
- <see langword="QueryString" />
- <see langword="Form " />
- <see langword="Cookies" />
- <see langword="Files" />
- <see langword="RawUrl" />
- <see langword="Path" />
- <see langword="PathInfo" />
- <see langword="Headers" /></param>
        <param name="collectionKey">Ключ в коллекции запроса элемента для проверки. Этот параметр является необязательным. Этот параметр используется, если данные для проверки получены из коллекции. Если данные для проверки не из коллекции, параметр <c>collectionKey</c> может иметь значение <see langword="null" />.</param>
        <param name="validationFailureIndex">После выполнения возврата этим методом указывается отсчитываемая от нуля начальная точка проблемного или недопустимого текста в коллекции запроса. Этот параметр передается неинициализированным.</param>
        <summary>Проверяет строку, содержащую данные HTTP-запроса.</summary>
        <returns>
          Значение <see langword="true" />, если строка для проверки допустимая. В противном случае — <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Можно реализовать этот метод для выполнения пользовательской проверки данных запроса. Базовый поведение <xref:System.Web.Util.RequestValidator.IsValidRequestString%28System.Web.HttpContext%2CSystem.String%2CSystem.Web.Util.RequestValidationSource%2CSystem.String%2CSystem.Int32%40%29> метод аналогичен поведения, который реализуется ASP.NET, внутренне проверьте опасных строк в проверка межсайтовых скриптов. Дополнительные сведения см. в разделе [How To: предотвращения межсайтовых сценариев в ASP.NET](http://go.microsoft.com/fwlink/?LinkID=178708).  
  
 Если пользовательскую логику проверки обнаруживает ошибку, этот метод должен возвращать `false` и ввести значение в `validationFailureIndex` для указания начальной точки текста, который вызвал ошибку. Значение `validationFailureIndex` должно быть 0 или положительным целым числом.  
  
 Логика в проверке запроса продолжается следующим образом:  
  
-   <xref:System.Web.HttpRequest> Класс выполняет проверку удаления нуль символа для входящих данных.  
  
-   <xref:System.Web.HttpRequest> Класс вызывает либо <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> метод (по умолчанию реализация метода базового класса) или вызывает производной версии этого метода.  
  
-   Если <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> возвращает `false` для сигнализации об ошибке проверки ASP.NET создает строку об ошибке (при необходимости) и создает исключение <xref:System.Web.HttpRequestValidationException> исключение.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>