<Type Name="IInvokeProvider" FullName="System.Windows.Automation.Provider.IInvokeProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f7ac8b68faa1b67a6bcbb608b270460bece93ca9" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39750712" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IInvokeProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IInvokeProvider" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Automation.Provider.IInvokeProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IInvokeProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IInvokeProvider" />
  <TypeSignature Language="F#" Value="type IInvokeProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationProvider</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Runtime.InteropServices.Guid("54fcb24b-e18e-47a2-b4d3-eccbe77599a2")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Runtime.InteropServices.InterfaceType</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
      <AttributeName>System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Предоставляет методы и свойства для поддержки доступа клиента автоматизации пользовательского интерфейса к элементам управления, которые инициируют или выполняют единственное однозначное действие и не сохраняют состояние при активации.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Реализован на поставщик автоматизации пользовательского интерфейса, который должен поддерживаться <xref:System.Windows.Automation.InvokePattern> шаблон элемента управления.  
  
 Элементы управления реализуют <xref:System.Windows.Automation.Provider.IInvokeProvider> , если то же самое поведение не доступно через другого поставщика шаблона элемента управления. Например, если метод <xref:System.Windows.Automation.InvokePattern.Invoke%2A> в элементе управления выполняет те же действия, что и метод <xref:System.Windows.Automation.ExpandCollapsePattern.Expand%2A> или <xref:System.Windows.Automation.ExpandCollapsePattern.Collapse%2A> этот элемент управления не должен реализовывать <xref:System.Windows.Automation.Provider.IInvokeProvider>.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Automation.InvokePattern" />
  </Docs>
  <Members>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Invoke() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.IInvokeProvider.Invoke" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invoke ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke();" />
      <MemberSignature Language="F#" Value="abstract member Invoke : unit -&gt; unit" Usage="iInvokeProvider.Invoke " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Отправляет запрос для активации элемента управления и инициализации его единственного однозначного действия.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Automation.Provider.IInvokeProvider.Invoke%2A> является асинхронным вызовом и должен возвращаться немедленно без блокировки.  
  
> [!NOTE]
>  Это особенно важно для элементов управления, которые при вызове прямо или косвенно запускают модальное диалоговое окно. Любой клиент автоматизации пользовательского интерфейса, инициировавший это событие, будет оставаться заблокированным до закрытия модального диалогового окна.  
  
 Метод <xref:System.Windows.Automation.Provider.IInvokeProvider.Invoke%2A> формирует событие <xref:System.Windows.Automation.InvokePatternIdentifiers.InvokedEvent>. Если это возможно событие должно вызываться после завершения связанного действия в элементе управления.  
  
 <xref:System.Windows.Automation.InvokePatternIdentifiers.InvokedEvent> должен вызываться перед обслуживанием <xref:System.Windows.Automation.Provider.IInvokeProvider.Invoke%2A> запроса в следующих сценариях:  
  
-   невозможно или нецелесообразно ожидать завершения действия;  
  
-   действие требует взаимодействия с пользователем;  
  
-   Действие занимает много времени и приведет к блокировке для значительного промежутка времени вызывающего клиента.  
  
   
  
## Examples  
 В следующем примере реализуется <xref:System.Windows.Automation.Provider.IInvokeProvider.Invoke%2A> метод обработчика события MouseDown элемента управления. Предполагается, что `providerControl` является переменной-членом, инициализированной при создании класса.  
  
 [!code-csharp[UIAProvider_snip#106](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAProvider_snip/CSharp/Invoker.cs#106)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Windows.Automation.ElementNotEnabledException">Если элемент управления не включен.</exception>
      </Docs>
    </Member>
  </Members>
</Type>