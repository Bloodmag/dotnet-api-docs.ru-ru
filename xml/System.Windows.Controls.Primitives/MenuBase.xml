<Type Name="MenuBase" FullName="System.Windows.Controls.Primitives.MenuBase">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="aaafd84b5544ad73eb779a785aa780b25a0c6b96" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30618668" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class MenuBase : System.Windows.Controls.ItemsControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract MenuBase extends System.Windows.Controls.ItemsControl" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.Primitives.MenuBase" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class MenuBase&#xA;Inherits ItemsControl" />
  <TypeSignature Language="C++ CLI" Value="public ref class MenuBase abstract : System::Windows::Controls::ItemsControl" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Controls.ItemsControl</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.Menu)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.StyleTypedProperty(Property="ItemContainerStyle", StyleTargetType=typeof(System.Windows.Controls.MenuItem))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Представляет элемент управления, определяющий варианты выбора для пользователей.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Controls.Primitives.MenuBase> Является базовым классом для элементов управления, определяющих варианты выбора для пользователей. <xref:System.Windows.Controls.Menu> И <xref:System.Windows.Controls.ContextMenu> наследовать от <xref:System.Windows.Controls.Primitives.MenuBase> и разрешить пользователю выбирать элемент, чтобы вызывать какие-либо действия.  
  
 <xref:System.Windows.Controls.Primitives.MenuBase> — <xref:System.Windows.Controls.ItemsControl>, то есть может содержать коллекцию объектов любого типа (например, строки, изображения или панели). Дополнительные сведения см. в описании класса <xref:System.Windows.Controls.ItemsControl>.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MenuBase ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.MenuBase.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; MenuBase();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Windows.Controls.Primitives.MenuBase" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContainerForItemOverride">
      <MemberSignature Language="C#" Value="protected override System.Windows.DependencyObject GetContainerForItemOverride ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.DependencyObject GetContainerForItemOverride() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.MenuBase.GetContainerForItemOverride" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetContainerForItemOverride () As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::DependencyObject ^ GetContainerForItemOverride();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Создает или идентифицирует элемент, используемый для отображения заданного элемента.</summary>
        <returns>Объект, используемый для отображения указанного элемента.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HandleMouseButton">
      <MemberSignature Language="C#" Value="protected virtual void HandleMouseButton (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void HandleMouseButton(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.MenuBase.HandleMouseButton(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub HandleMouseButton (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void HandleMouseButton(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Данные для события мыши.</param>
        <summary>Вызывается при нажатии или отпускании кнопки мыши.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsItemItsOwnContainerOverride">
      <MemberSignature Language="C#" Value="protected override bool IsItemItsOwnContainerOverride (object item);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsItemItsOwnContainerOverride(object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.MenuBase.IsItemItsOwnContainerOverride(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsItemItsOwnContainerOverride (item As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsItemItsOwnContainerOverride(System::Object ^ item);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item">Элемент для которого нужно проверить, является ли он контейнером элементов.</param>
        <summary>Определяет, является ли заданный элемент (или может являться) контейнером собственных элементов.</summary>
        <returns>
          <see langword="true" />, если элемент является <see cref="T:System.Windows.Controls.MenuItem" /> или <see cref="T:System.Windows.Controls.Separator" />; в противном случае <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemContainerTemplateSelector">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.ItemContainerTemplateSelector ItemContainerTemplateSelector { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Controls.ItemContainerTemplateSelector ItemContainerTemplateSelector" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Primitives.MenuBase.ItemContainerTemplateSelector" />
      <MemberSignature Language="VB.NET" Value="Public Property ItemContainerTemplateSelector As ItemContainerTemplateSelector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Controls::ItemContainerTemplateSelector ^ ItemContainerTemplateSelector { System::Windows::Controls::ItemContainerTemplateSelector ^ get(); void set(System::Windows::Controls::ItemContainerTemplateSelector ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ItemContainerTemplateSelector</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает пользовательскую логику для выбора шаблона, используемого для отображения каждого элемента.</summary>
        <value>Пользовательский объект, предоставляющий логику и возвращающий контейнер элемента.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте <xref:System.Windows.Controls.ItemContainerTemplateSelector> для выбора другого элемента контейнеров, если все элементы в коллекции имеют тот же тип, и необходимо реализовать пользовательскую логику для выбора контейнера элементов.  
  
<a name="dependencyPropertyInfo_ItemContainerTemplateSelector"></a>   
## <a name="dependency-property-information"></a>Сведения о свойстве зависимостей  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.Controls.Primitives.MenuBase.ItemContainerTemplateSelectorProperty>|  
|Значение свойства метаданных `true`|Нет|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemContainerTemplateSelectorProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ItemContainerTemplateSelectorProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ItemContainerTemplateSelectorProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Primitives.MenuBase.ItemContainerTemplateSelectorProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ItemContainerTemplateSelectorProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ItemContainerTemplateSelectorProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует свойство зависимостей <see cref="P:System.Windows.Controls.Primitives.MenuBase.ItemContainerTemplateSelector" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsKeyboardFocusWithinChanged">
      <MemberSignature Language="C#" Value="protected override void OnIsKeyboardFocusWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnIsKeyboardFocusWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.MenuBase.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnIsKeyboardFocusWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnIsKeyboardFocusWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Данные события <see cref="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged" />.</param>
        <summary>Отвечает на изменение свойства <see cref="P:System.Windows.UIElement.IsKeyboardFocusWithin" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnKeyDown">
      <MemberSignature Language="C#" Value="protected override void OnKeyDown (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnKeyDown(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.MenuBase.OnKeyDown(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnKeyDown(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Данные события <see cref="E:System.Windows.UIElement.KeyDown" />.</param>
        <summary>Предоставляет обработку класса для перенаправленного события <see cref="E:System.Windows.UIElement.KeyDown" />, которое происходит при нажатии клавиши пользователем.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если пользователь нажмет клавишу ESC, ALT + F10 или ALT + ALT, эта реализация помечает <xref:System.Windows.UIElement.KeyDown> событие как обработанное, задав <xref:System.Windows.RoutedEventArgs.Handled%2A> свойства данных события `true`.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>При переопределении <see cref="M:System.Windows.Controls.Primitives.MenuBase.OnKeyDown(System.Windows.Input.KeyEventArgs)" />, всегда вызывать базовую реализацию вашей <see cref="M:System.Windows.Controls.Primitives.MenuBase.OnKeyDown(System.Windows.Input.KeyEventArgs)" /> реализации. Не удалось вызвать базовую реализацию базовые классы не смогут обрабатывать событие с помощью обработчика класса, который может изменить поведение во время выполнения конечного класса. В зависимости от требований, можно вызвать базовую реализацию до или после специальной обработки.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeave">
      <MemberSignature Language="C#" Value="protected override void OnMouseLeave (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseLeave(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.MenuBase.OnMouseLeave(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMouseLeave (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMouseLeave(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Данные события <see cref="E:System.Windows.UIElement.MouseLeave" />.</param>
        <summary>Предоставляет обработку класса для маршрутизируемого события <see cref="E:System.Windows.UIElement.MouseLeave" />, которое генерируется, когда мышь покидает элемент управления.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Эта реализация не изменяет состояние обработки ( <xref:System.Windows.RoutedEventArgs.Handled%2A> свойство) из <xref:System.Windows.UIElement.MouseLeave> данные события.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>При переопределении <see cref="M:System.Windows.Controls.Primitives.MenuBase.OnMouseLeave(System.Windows.Input.MouseEventArgs)" />, всегда вызывать базовую реализацию вашей <see cref="M:System.Windows.Controls.Primitives.MenuBase.OnMouseLeave(System.Windows.Input.MouseEventArgs)" /> реализации. Не удалось вызвать базовую реализацию базовые классы не смогут обрабатывать событие с помощью обработчика класса, который может изменить поведение во время выполнения конечного класса. В зависимости от требований, можно вызвать базовую реализацию до или после специальной обработки.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="UsesItemContainerTemplate">
      <MemberSignature Language="C#" Value="public bool UsesItemContainerTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UsesItemContainerTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Primitives.MenuBase.UsesItemContainerTemplate" />
      <MemberSignature Language="VB.NET" Value="Public Property UsesItemContainerTemplate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UsesItemContainerTemplate { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает значение, указывающее, выбирает ли меню разные контейнеры элементов в зависимости от типа элемента в базовой коллекции или какой-либо другой эвристики.</summary>
        <value>
          Значение <see langword="true" />, если меню выбирает другие контейнеры элементов; в противном случае — значение <see langword="false" />.  
  
 Зарегистрированное значение по умолчанию — <see langword="false" />. Дополнительные сведения о том, что может влиять на значение см. в разделе [приоритет значения свойства зависимости](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это свойство полезно, если вы хотите создать меню с помощью привязки в коллекцию.  Контейнера элементов является элементом пользовательского интерфейса, который отображает объект в коллекцию. Если вы хотите привязать к коллекции, чтобы создать меню, которое содержит <xref:System.Windows.Controls.MenuItem> объектов и <xref:System.Windows.Controls.Separator> набор объектов, <xref:System.Windows.Controls.Primitives.MenuBase.UsesItemContainerTemplate%2A> свойство равным true и создать <xref:System.Windows.Controls.ItemContainerTemplate> для каждого типа объектов в коллекции.  Каждый <xref:System.Windows.Controls.ItemContainerTemplate> должен содержать <xref:System.Windows.Controls.MenuItem> или <xref:System.Windows.Controls.Separator>.  
  
<a name="dependencyPropertyInfo_UsesItemContainerTemplate"></a>   
## <a name="dependency-property-information"></a>Сведения о свойстве зависимостей  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.Controls.Primitives.MenuBase.UsesItemContainerTemplateProperty>|  
|Значение свойства метаданных `true`|Нет|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UsesItemContainerTemplateProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty UsesItemContainerTemplateProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty UsesItemContainerTemplateProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Primitives.MenuBase.UsesItemContainerTemplateProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UsesItemContainerTemplateProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ UsesItemContainerTemplateProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует свойство зависимостей <see cref="P:System.Windows.Controls.Primitives.MenuBase.UsesItemContainerTemplate" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>