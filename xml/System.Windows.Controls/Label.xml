<Type Name="Label" FullName="System.Windows.Controls.Label">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8e2c2703d49f4ce15e4bbc5a90c2dc8ca5b87073" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30618698" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Label : System.Windows.Controls.ContentControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Label extends System.Windows.Controls.ContentControl" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.Label" />
  <TypeSignature Language="VB.NET" Value="Public Class Label&#xA;Inherits ContentControl" />
  <TypeSignature Language="C++ CLI" Value="public ref class Label : System::Windows::Controls::ContentControl" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Controls.ContentControl</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.Label)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Представляет текстовую подпись для элемента управления и обеспечивает поддержку клавиш доступа.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот класс обеспечивает функциональную и визуальную поддержку клавиш доступа (также известных как назначенные клавиши). Он часто используется для включения быстрый доступ к элементам управления, такие как <xref:System.Windows.Controls.TextBox>. Чтобы назначить <xref:System.Windows.Controls.Label> для <xref:System.Windows.Controls.Control>, задайте <xref:System.Windows.Controls.Label.Target%2A> свойства в элемент управления, который должен получить фокус, когда пользователь нажимает клавишу доступа. Настройка целевого объекта также причины [!INCLUDE[TLA#tla_uiautomation](~/includes/tlasharptla-uiautomation-md.md)] для использования в качестве имени целевого элемента управления текст метки. Дополнительные сведения см. в разделе [специальных возможностей](~/docs/framework/ui-automation/index.md).  
  
 Чтобы задать ключ доступа, добавьте символ подчеркивания перед символом, который должен использоваться в сочетании клавиш. Если в содержимом имеется несколько символов подчеркивания, только первый из них преобразуется в ключ доступа; остальные подчеркивания отображаются как обычный текст. Если подчеркивание, которое необходимо преобразовать в клавишу доступа, не является первым, используйте два последовательных символа подчеркивания для любых символов подчеркивания, которые предшествуют тому, который требуется преобразовать. Например, следующий код содержит клавишу доступа и отображается как _Hello**W**orld:  
  
```  
<Label>__Hello_World</Label>   
```  
  
 Так как символ подчеркивания, за которым следуют H значение типа double, клавиша W регистрируется как клавиша доступа.  
  
 Метка не может иметь фокус и не является позицией табуляции. Дополнительные сведения см. в разделе [фокус Обзор](~/docs/framework/wpf/advanced/focus-overview.md).  
  
 Объект <xref:System.Windows.Controls.Label> является <xref:System.Windows.Controls.ContentControl>, означающее, что она может содержать один объект любого типа (например, строки, изображения или панели). Дополнительные сведения см. в описании класса <xref:System.Windows.Controls.ContentControl>.  
  
## <a name="customizing-the-label-control"></a>Настройка элемента управления Label  
 Чтобы применить к нескольким значения свойств <xref:System.Windows.Controls.Label> использовать элементы управления <xref:System.Windows.FrameworkElement.Style%2A> свойство. Можно изменить значение по умолчанию <xref:System.Windows.Controls.ControlTemplate> для предоставления уникального внешнего вида элемента управления. Дополнительные сведения о создании <xref:System.Windows.Controls.ControlTemplate>, в разделе [Настройка внешнего вида существующего элемента управления путем создания объекта ControlTemplate](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md).  Для просмотра части и состояния, которые относятся к <xref:System.Windows.Controls.Label>, в разделе [метки стили и шаблоны](~/docs/framework/wpf/controls/label-styles-and-templates.md).  
  
 Свойства зависимостей для этого элемента управления могут быть заданы посредством стиля элемента управления по умолчанию.  Если свойство задано стилем по умолчанию, когда элемент управления появится в приложении свойство может изменять значения по умолчанию. Стиль по умолчанию определяется по какая тема рабочего стола используется при запуске приложения.  Дополнительные сведения см. в разделе [темы по умолчанию WPF](http://go.microsoft.com/fwlink/?LinkID=158252).  
  
> [!NOTE]
>  Установка visual свойства будет действовать только если это свойство является одновременно присутствуют в <xref:System.Windows.Controls.Label> элемента управления, шаблон по умолчанию и устанавливается с помощью. Список визуальных свойств можно найти в разделе «Изменение Visual структуры управления» в [Настройка внешнего вида существующего элемента управления путем создания объекта ControlTemplate](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md).  
  
   
  
## Examples  
 В следующем примере показано, как создать <xref:System.Windows.Controls.Label> , использует привязку, чтобы задать целевой объект.  
  
 [!code-xaml[LabelSnippet#1](~/samples/snippets/csharp/VS_Snippets_Wpf/LabelSnippet/CS/Pane1.xaml#1)]   
  
 В следующем примере показано, как создать <xref:System.Windows.Controls.Label> , имеет клавишу доступа и поддерживает перенос текста.  
  
 [!code-xaml[LabelSnippet#4](~/samples/snippets/csharp/VS_Snippets_Wpf/LabelSnippet/CS/Pane1.xaml#4)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Label ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Label.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Label();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Windows.Controls.Label" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCreateAutomationPeer">
      <MemberSignature Language="C#" Value="protected override System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Label.OnCreateAutomationPeer" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnCreateAutomationPeer () As AutomationPeer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Automation::Peers::AutomationPeer ^ OnCreateAutomationPeer();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Peers.AutomationPeer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Предоставляет подходящую реализацию <see cref="T:System.Windows.Automation.Peers.LabelAutomationPeer" /> для данного элемента управления как часть инфраструктуры [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)].</summary>
        <returns>Реализация <see cref="T:System.Windows.Automation.Peers.AutomationPeer" />, зависящая от конкретного типа.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Target">
      <MemberSignature Language="C#" Value="public System.Windows.UIElement Target { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.UIElement Target" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Label.Target" />
      <MemberSignature Language="VB.NET" Value="Public Property Target As UIElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::UIElement ^ Target { System::Windows::UIElement ^ get(); void set(System::Windows::UIElement ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Markup.NameReferenceConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.UIElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает элемент, который получает фокус, когда пользователь нажимает клавишу доступа метки.</summary>
        <value>
          <see cref="T:System.Windows.UIElement" />, на котором устанавливается фокус, когда пользователь нажимает клавишу доступа. Значение по умолчанию: <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Можно определить сочетания клавиш для элементов, которые не поддерживают клавиши доступа, предоставляя <xref:System.Windows.Controls.Label> ключ доступа и настройке этого свойства. Назначение клавиши доступа к метке, установив знак подчеркивания, непосредственно перед символом, который действует как клавиша доступа. Ключ доступа может быть указано в <xref:System.Windows.Controls.ContentControl.Content%2A> свойства или путем установки <xref:System.Windows.Controls.ContentControl.Content%2A> для <xref:System.Windows.Controls.AccessText> объекта.  
  
 Это свойство нельзя использовать для определения <xref:System.Windows.UIElement>. Например, следующее компилирует, но не будет работать: `<object.Target><UIElement../></object.Target>`. Это свойство предоставляет ссылку на элемент, который уже определен в приложении.  
  
<a name="dependencyPropertyInfo_Target"></a>   
## <a name="dependency-property-information"></a>Сведения о свойстве зависимостей  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.Controls.Label.TargetProperty>|  
|Значение свойства метаданных `true`|Нет|  
  
<a name="xamlAttributeUsage_Target"></a>   
## <a name="xaml-attribute-usage"></a>Использование атрибута XAML  
  
```  
<Label Target=" nameOfExistingElement"/>  
  
```  
  
<a name="xamlPropertyElementUsage_Target"></a>   
## <a name="xaml-property-element-usage"></a>Использование элемента свойства XAML  
  
<a name="xamlValues_Target"></a>   
## <a name="xaml-values"></a>Значения XAML  
 `nameOfExistingElement`  
 Имя <xref:System.Windows.UIElement> при нажатии клавиши доступа, который получает фокус.  
  
   
  
## Examples  
 В следующем примере показано, как задать свойство <xref:System.Windows.Controls.Label.Target%2A> объекта <xref:System.Windows.Controls.Label>.  
  
 [!code-xaml[LabelSnippet#1](~/samples/snippets/csharp/VS_Snippets_Wpf/LabelSnippet/CS/Pane1.xaml#1)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TargetProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TargetProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Label.TargetProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TargetProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ TargetProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует свойство зависимостей <see cref="P:System.Windows.Controls.Label.Target" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>