<Type Name="UpdateSourceExceptionFilterCallback" FullName="System.Windows.Data.UpdateSourceExceptionFilterCallback">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="65b5bfbadcdb56e0bc2f5373d8d94483568f6634" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30625498" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate object UpdateSourceExceptionFilterCallback(object bindExpression, Exception exception);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed UpdateSourceExceptionFilterCallback extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Data.UpdateSourceExceptionFilterCallback" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function UpdateSourceExceptionFilterCallback(bindExpression As Object, exception As Exception) As Object " />
  <TypeSignature Language="C++ CLI" Value="public delegate System::Object ^ UpdateSourceExceptionFilterCallback(System::Object ^ bindExpression, Exception ^ exception);" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="bindExpression" Type="System.Object" />
    <Parameter Name="exception" Type="System.Exception" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Object</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="bindExpression">Объект с исключением.</param>
    <param name="exception">Возникло исключение.</param>
    <summary>Представляет метод, который обрабатывает исключения, вызываемые во время обновления значения источника привязки. Должен использоваться вместе с <see cref="T:System.Windows.Controls.ExceptionValidationRule" />.</summary>
    <returns>Объект, который обычно является одним из следующих.  
  
 <list type="table"><listheader><term> Значение  
  
 </term><description> Описание  
  
 </description></listheader><item><term><see langword="null" /></term><description> Для игнорирования любых исключений. Поведение по умолчанию (если нет <see cref="T:System.Windows.Data.UpdateSourceExceptionFilterCallback" />) — создать <see cref="T:System.Windows.Controls.ValidationError" /> с исключением и добавить его в коллекцию <see cref="P:System.Windows.Controls.Validation.Errors" /> привязанного элемента.  
  
 </description></item><item><term> Любой объект.  
  
 </term><description> Для создания объекта <see cref="T:System.Windows.Controls.ValidationError" /> с установленным для этого объекта <see cref="P:System.Windows.Controls.ValidationError.ErrorContent" />.  
  
 <see cref="T:System.Windows.Controls.ValidationError" /> объект добавлен в коллекцию <see cref="P:System.Windows.Controls.Validation.Errors" /> привязанного элемента.  
  
 </description></item><item><term> Объект <see cref="T:System.Windows.Controls.ValidationError" /></term><description> Чтобы задать объект <see cref="T:System.Windows.Data.BindingExpression" /> или <see cref="T:System.Windows.Data.MultiBindingExpression" /> как <see cref="P:System.Windows.Controls.ValidationError.BindingInError" />. <see cref="T:System.Windows.Controls.ValidationError" /> объект добавлен в коллекцию <see cref="P:System.Windows.Controls.Validation.Errors" /> привязанного элемента.  
  
 </description></item></list></returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если была связана <xref:System.Windows.Controls.ExceptionValidationRule> с вашей <xref:System.Windows.Data.Binding> объекта, у вас есть возможность использовать <xref:System.Windows.Data.Binding.UpdateSourceExceptionFilter%2A> свойство, чтобы задать этот обратный вызов для предоставления пользовательской логики для обработки исключений. Этот обратный вызов при обнаружении любое исключение, что механизму привязки при обновлении значения источника привязки.  
  
 Если <xref:System.Windows.Data.Binding.UpdateSourceExceptionFilter%2A> не указан в <xref:System.Windows.Data.Binding>, обработчик привязки создает <xref:System.Windows.Controls.ValidationError> с исключением и добавляет его в <xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=nameWithType> коллекции связанного элемента.  
  
   
  
## Examples  
 <xref:System.Windows.Controls.TextBox.Text%2A> Свойство из следующих <xref:System.Windows.Controls.TextBox> данных привязан к свойству источника `Age3` типа `int`. <xref:System.Windows.Controls.ExceptionValidationRule> Проверяет наличие исключений, возникших во время обновления свойства источника (например, когда пользователь вводит значение, которое невозможно преобразовать в целое число).  
  
 [!code-xaml[BindValidation#tbExceptionFilter](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/Window1.xaml#tbexceptionfilter)]  
  
 Имеется возможность для предоставления пользовательской логики для обработки этих исключений. В следующем примере показано, как использовать <xref:System.Windows.Data.Binding.UpdateSourceExceptionFilter%2A> задаваемого свойства <xref:System.Windows.Data.UpdateSourceExceptionFilterCallback>:  
  
 [!code-csharp[BindValidation#filtercallback](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/Window1.xaml.cs#filtercallback)]  
  
 Ниже приведен пример реализации <xref:System.Windows.Data.UpdateSourceExceptionFilterCallback>:  
  
 [!code-csharp[BindValidation#Handler](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/Window1.xaml.cs#handler)]  
  
 Полный пример см. в разделе [пример проверки привязки](http://go.microsoft.com/fwlink/?LinkID=159972).  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Windows.Data.MultiBinding.UpdateSourceExceptionFilter" />
  </Docs>
</Type>