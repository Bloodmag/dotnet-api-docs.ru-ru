<Type Name="ListItem" FullName="System.Windows.Documents.ListItem">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="63ce7f414054090ca0455091f3f612484cfbc42d" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30630318" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ListItem : System.Windows.Documents.TextElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ListItem extends System.Windows.Documents.TextElement" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Documents.ListItem" />
  <TypeSignature Language="VB.NET" Value="Public Class ListItem&#xA;Inherits TextElement" />
  <TypeSignature Language="C++ CLI" Value="public ref class ListItem : System::Windows::Documents::TextElement" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Documents.TextElement</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Markup.ContentProperty("Blocks")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Элемент содержимого потока, представляющий определенный элемент содержимого в упорядоченном или маркированном <see cref="T:System.Windows.Documents.List" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Documents.ListItem> обеспечивает надежный модель содержимого для дочернего содержимого. В разделе [Общие сведения о модели содержимого TextElement](~/docs/framework/wpf/advanced/textelement-content-model-overview.md) Дополнительные сведения о <xref:System.Windows.Documents.ListItem> модели содержимого.  
  
 <xref:System.Windows.Documents.ListItem> элементы, которые должны содержаться в <xref:System.Windows.Documents.List> элемент.  
  
   
  
## Examples  
 В следующем примере показан способ определения <xref:System.Windows.Documents.List> с помощью [!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)].  
  
 [!code-xaml[ListSnippets#_ListXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/ListSnippets/CSharp/Window1.xaml#_listxaml)]  
  
 В следующем примере показано, как создать и заполнить <xref:System.Windows.Documents.List> программными средствами.  
  
 [!code-csharp[ListSnippets#_List_Props](~/samples/snippets/csharp/VS_Snippets_Wpf/ListSnippets/CSharp/Window1.xaml.cs#_list_props)]
 [!code-vb[ListSnippets#_List_Props](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ListSnippets/visualbasic/window1.xaml.vb#_list_props)]  
  
 На следующем рисунке показана отрисовка этого примера.  
  
 ![Снимок экрана: Упорядоченный список](~/add/media/ordered-list.png "снимок экрана: упорядоченный список")  
  
 В следующем примере показан способ определения вложенный <xref:System.Windows.Documents.List> (перечислены в списках) с помощью [!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)].  
  
 [!code-xaml[ListSnippets#_NestedListXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/ListSnippets/CSharp/Window1.xaml#_nestedlistxaml)]  
  
 На следующем рисунке показана отрисовка этого примера.  
  
 ![Список вложенных](~/add/media/flow-nested-list-example.png "вложенный список")  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Windows.Documents.ListItem" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ListItem ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.ListItem.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ListItem();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый пустой экземпляр класса <see cref="T:System.Windows.Documents.ListItem" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ListItem (System.Windows.Documents.Paragraph paragraph);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Documents.Paragraph paragraph) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.ListItem.#ctor(System.Windows.Documents.Paragraph)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ListItem(System::Windows::Documents::Paragraph ^ paragraph);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="paragraph" Type="System.Windows.Documents.Paragraph" />
      </Parameters>
      <Docs>
        <param name="paragraph">Объект <see cref="T:System.Windows.Documents.Paragraph" />, задающий начальное содержимое нового <see cref="T:System.Windows.Documents.ListItem" />.</param>
        <summary>Инициализирует новый экземпляр класса  <see cref="T:System.Windows.Documents.ListItem" />, принимая указанный объект <see cref="T:System.Windows.Documents.Paragraph" /> в качестве начального содержимого нового <see cref="T:System.Windows.Documents.ListItem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере показано использование этого конструктора.  
  
 [!code-csharp[ListSnippets#_List_Const](~/samples/snippets/csharp/VS_Snippets_Wpf/ListSnippets/CSharp/Window1.xaml.cs#_list_const)]
 [!code-vb[ListSnippets#_List_Const](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ListSnippets/visualbasic/window1.xaml.vb#_list_const)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Blocks">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.BlockCollection Blocks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Documents.BlockCollection Blocks" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.ListItem.Blocks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Blocks As BlockCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Documents::BlockCollection ^ Blocks { System::Windows::Documents::BlockCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.BlockCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получение коллекции блоков, содержащей элементы <see cref="T:System.Windows.Documents.Block" /> высшего уровня <see cref="T:System.Windows.Documents.ListItem" />.</summary>
        <value>Коллекция блоков, содержащая элементы <see cref="T:System.Windows.Documents.Block" /><see cref="T:System.Windows.Documents.ListItem" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте коллекцию блоков, возвращаемый этим свойством перечисления или управлять содержимым <xref:System.Windows.Documents.Section> элемента.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BorderBrush">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Brush BorderBrush { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Brush BorderBrush" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.ListItem.BorderBrush" />
      <MemberSignature Language="VB.NET" Value="Public Property BorderBrush As Brush" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Brush ^ BorderBrush { System::Windows::Media::Brush ^ get(); void set(System::Windows::Media::Brush ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Brush</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает кисть <see cref="T:System.Windows.Media.Brush" />, используемую при отрисовке границы элемента.</summary>
        <value>Кисть, используемая для применения к границе элемента. Значение по умолчанию: <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Таблицу образцов, отображающей доступные предопределенные цвета кисти см. в разделе <xref:System.Windows.Media.Brushes>.  
  
<a name="dependencyPropertyInfo_BorderBrush"></a>   
## <a name="dependency-property-information"></a>Сведения о свойстве зависимостей  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.Documents.ListItem.BorderBrushProperty>|  
|Значение свойства метаданных `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A>|  
  
   
  
## Examples  
 Следующий пример показывает, как задать <xref:System.Windows.Documents.ListItem.BorderBrush%2A> атрибут <xref:System.Windows.Documents.Block> элемент (<xref:System.Windows.Documents.Paragraph>).  
  
 [!code-xaml[BlockSnippets#_Block_BordersXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/BlockSnippets/CSharp/Window1.xaml#_block_bordersxaml)]  
  
 На следующем рисунке показана отрисовка этого примера.  
  
 ![Снимок экрана: Синяя, 1&#47;границы 4 дюйма вокруг Block](~/add/media/block-borders.png "снимок экрана: синяя, границы 1/4 дюйма вокруг Block")  
  
 Следующий пример показывает, как задать <xref:System.Windows.Documents.ListItem.BorderBrush%2A> свойства программными средствами.  
  
 [!code-csharp[BlockSnippets#_Block_Borders](~/samples/snippets/csharp/VS_Snippets_Wpf/BlockSnippets/CSharp/Window1.xaml.cs#_block_borders)]
 [!code-vb[BlockSnippets#_Block_Borders](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BlockSnippets/visualbasic/window1.xaml.vb#_block_borders)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.ListItem.BorderThickness" />
      </Docs>
    </Member>
    <Member MemberName="BorderBrushProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty BorderBrushProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty BorderBrushProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Documents.ListItem.BorderBrushProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly BorderBrushProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ BorderBrushProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует свойство зависимостей <see cref="P:System.Windows.Documents.ListItem.BorderBrush" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BorderThickness">
      <MemberSignature Language="C#" Value="public System.Windows.Thickness BorderThickness { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Thickness BorderThickness" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.ListItem.BorderThickness" />
      <MemberSignature Language="VB.NET" Value="Public Property BorderThickness As Thickness" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Thickness BorderThickness { System::Windows::Thickness get(); void set(System::Windows::Thickness value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Thickness</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает толщину границы для элемента.</summary>
        <value>Объект <see cref="T:System.Windows.Thickness" /> структуру, которая указывает применяемую толщину границы в аппаратно-независимых пикселях. Значение по умолчанию — единая нулевая толщина (0,0).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlAttributeUsage_BorderThickness"></a>   
## <a name="xaml-attribute-usage"></a>Использование атрибута XAML  
  
```  
<object BorderThickness="uniformThickness"/>  
- or -  
<object BorderThickness="independentThickness"/>  
- or -  
<object BorderThickness="qualifiedUniformThickness"/>  
- or -  
<object BorderThickness="qualifiedIndependentThickness"/>  
```  
  
<a name="xamlValues_BorderThickness"></a>   
## <a name="xaml-values"></a>Значения XAML  
 *uniformThickness*  
 Строковое представление значения типа single <xref:System.Double> значение, применяемое ко всем четырем размерам толщины.  Например, значение `"10"` эквивалентное значение `"10,10,10,10"`.  Неквалифицированное значение измеряется в аппаратно-независимых пикселях. Строки не нужно явно указывать десятичного разделителя.  
  
 *independentThickness*  
 Строковое представление четырех упорядоченных <xref:System.Double> значения, соответствующие ширине слева, сверху, вправо и вниз, в следующем порядке.  Четыре значения должны разделяться запятыми; пробелы не допускаются.  Например «5,10,15,20» приведет к 5 точек границы слева от содержимого, 10 точек границы над содержимым, 15 точек границы справа от содержимого и 20 точек границы под содержимым.  
  
 *qualifiedUniformThickness*  
 Значение, описываемое *uniformThickness* следует один из следующих спецификаторов единиц: `px`, `in`.  
  
 `px` (по умолчанию) [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` дюймах; 1 дюйм == 96 точек  
  
 Например `"1in"` предоставляет единую границу в 1 дюйм во всех направлениях.  
  
 *qualifiedIndependentThickness*  
 Значение, описываемое *independentThickness*, за каждым независимым значением, за которым следует один из следующих спецификаторов единиц: `px`, `in`.  
  
 `px` (по умолчанию) [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` дюймах; 1 дюйм == 96 точек  
  
 Например, `"1.5in,0.8in,1.5in,0.8in"`.  Спецификаторы единиц может смешанных или исключаются из одного или нескольких значений.  
  
<a name="dependencyPropertyInfo_BorderThickness"></a>   
## <a name="dependency-property-information"></a>Сведения о свойстве зависимостей  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.Documents.ListItem.BorderThicknessProperty>|  
|Значение свойства метаданных `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
   
  
## Examples  
 Следующий пример показывает, как задать <xref:System.Windows.Documents.ListItem.BorderThickness%2A> атрибут <xref:System.Windows.Documents.Block> элемент (<xref:System.Windows.Documents.Paragraph>).  
  
 [!code-xaml[BlockSnippets#_Block_BordersXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/BlockSnippets/CSharp/Window1.xaml#_block_bordersxaml)]  
  
 На следующем рисунке показана отрисовка этого примера.  
  
 ![Снимок экрана: Синяя, 1&#47;границы 4 дюйма вокруг Block](~/add/media/block-borders.png "снимок экрана: синяя, границы 1/4 дюйма вокруг Block")  
  
 Следующий пример показывает, как задать <xref:System.Windows.Documents.ListItem.BorderThickness%2A> свойства программными средствами.  
  
 [!code-csharp[BlockSnippets#_Block_Borders](~/samples/snippets/csharp/VS_Snippets_Wpf/BlockSnippets/CSharp/Window1.xaml.cs#_block_borders)]
 [!code-vb[BlockSnippets#_Block_Borders](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BlockSnippets/visualbasic/window1.xaml.vb#_block_borders)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.ListItem.BorderBrush" />
      </Docs>
    </Member>
    <Member MemberName="BorderThicknessProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty BorderThicknessProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty BorderThicknessProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Documents.ListItem.BorderThicknessProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly BorderThicknessProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ BorderThicknessProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует свойство зависимостей <see cref="P:System.Windows.Documents.ListItem.BorderThickness" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FlowDirection">
      <MemberSignature Language="C#" Value="public System.Windows.FlowDirection FlowDirection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.FlowDirection FlowDirection" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.ListItem.FlowDirection" />
      <MemberSignature Language="VB.NET" Value="Public Property FlowDirection As FlowDirection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::FlowDirection FlowDirection { System::Windows::FlowDirection get(); void set(System::Windows::FlowDirection value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.FlowDirection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает относительное направление потока содержимого в элементе <see cref="T:System.Windows.Documents.ListItem" />.</summary>
        <value>Одно из значений <see cref="T:System.Windows.FlowDirection" />, задающее относительное направление потока.  Значение по умолчанию: <see cref="F:System.Windows.FlowDirection.LeftToRight" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При получении данного свойства возвращается текущее эффективное направления потока.  Установка данного свойства вызывает повторную заливку содержимого элемента <xref:System.Windows.Documents.ListItem> в указанном направлении.  
  
 Направление потока содержимого обычно соответствует направлению направлению потока представляемого языка.  Иврит и арабский являются примерами языков, которые читаются справа налево.  Английский, немецкий и русский являются примерами языков, которые читаются слева направо.  
  
> [!NOTE]
>  Значение этого свойства не изменяется автоматически в соответствии с языком операционной системы. Если необходимо использовать значение, отличное от значения по умолчанию <xref:System.Windows.FlowDirection.LeftToRight>, необходимо указать его самостоятельно.  
  
<a name="dependencyPropertyInfo_FlowDirection"></a>   
## <a name="dependency-property-information"></a>Сведения о свойстве зависимостей  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.Documents.ListItem.FlowDirectionProperty>|  
|Значение свойства метаданных `true`|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>, <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A>|  
  
   
  
## Examples  
 Следующий пример показывает, как задать <xref:System.Windows.Documents.ListItem.FlowDirection%2A> атрибут <xref:System.Windows.Documents.Block> элемент (<xref:System.Windows.Documents.Paragraph>).  
  
 [!code-xaml[BlockSnippets#_Block_FlowDirectionXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/BlockSnippets/CSharp/Window1.xaml#_block_flowdirectionxaml)]  
  
 Следующий пример показывает, как задать <xref:System.Windows.Documents.ListItem.FlowDirection%2A> свойства программными средствами.  
  
 [!code-csharp[BlockSnippets#_Block_FlowDirection](~/samples/snippets/csharp/VS_Snippets_Wpf/BlockSnippets/CSharp/Window1.xaml.cs#_block_flowdirection)]
 [!code-vb[BlockSnippets#_Block_FlowDirection](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BlockSnippets/visualbasic/window1.xaml.vb#_block_flowdirection)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FlowDirectionProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FlowDirectionProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FlowDirectionProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Documents.ListItem.FlowDirectionProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FlowDirectionProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ FlowDirectionProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует свойство зависимостей <see cref="P:System.Windows.Documents.ListItem.FlowDirection" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LineHeight">
      <MemberSignature Language="C#" Value="public double LineHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 LineHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.ListItem.LineHeight" />
      <MemberSignature Language="VB.NET" Value="Public Property LineHeight As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double LineHeight { double get(); void set(double value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает высоту каждой строки содержимого.</summary>
        <value>Высота каждой строки в аппаратно-независимых пикселях в диапазоне от 0,0034 до 160 000.  Значение <see cref="F:System.Double.NaN" /> (эквивалентно значению атрибута "<c>автоматически</c>«) указывает, что высота строки определяется автоматически на основе характеристик текущего шрифта.  Значение по умолчанию: <see cref="F:System.Double.NaN" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Изменение <xref:System.Windows.Documents.ListItem.LineHeight%2A> значение не меняется высота связанный текст; вместо этого он изменяет высоту строки, содержащей текст.  
  
 В дополнение к этим свойством, макет строк в <xref:System.Windows.Documents.ListItem> зависит от его <xref:System.Windows.Documents.ListItem.LineStackingStrategy%2A> свойство.  
  
<a name="xamlAttributeUsage_LineHeight"></a>   
## <a name="xaml-attribute-usage"></a>Использование атрибута XAML  
  
```  
<object LineHeight="double"/>  
- or -  
<object LineHeight="qualifiedDouble"/>  
- or -  
<object LineHeight="Auto"/>  
```  
  
<a name="xamlValues_LineHeight"></a>   
## <a name="xaml-values"></a>Значения XAML  
 *double*  
 Строковое представление <xref:System.Double> значение в диапазоне `0.0034` для `160000`. Неквалифицированное значение измеряется в аппаратно-независимых пикселях. Строки не нужно явно указывать десятичного разделителя.  
  
 *qualifiedDouble*  
 Объект *двойные* значение, как описано выше, (за исключением `Auto`) следует один из следующих спецификаторов единиц: `px`, `in`, `cm`, `pt`.  
  
 `px` (по умолчанию) [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` дюймах; 1 дюйм == 96 точек  
  
 `cm` сантиметрах; 1см==(96/2,54) пкс  
  
 `pt` точках; 1точка==(96/72) пкс  
  
 Авто  
 Указывает, что высота строки определяется автоматически на основе характеристик текущего шрифта.  Эквивалентно значению свойства <xref:System.Double.NaN?displayProperty=nameWithType>.  
  
<a name="dependencyPropertyInfo_LineHeight"></a>   
## <a name="dependency-property-information"></a>Сведения о свойстве зависимостей  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.Documents.ListItem.LineHeightProperty>|  
|Значение свойства метаданных `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>, <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A>, <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
   
  
## Examples  
 Следующий пример показывает, как задать <xref:System.Windows.Documents.ListItem.LineHeight%2A> атрибут <xref:System.Windows.Documents.Block> элемента.  
  
 [!code-xaml[BlockSnippets#_Block_LineHeightXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/BlockSnippets/CSharp/Window1.xaml#_block_lineheightxaml)]  
  
 На следующем рисунке показана прорисовку предыдущего примера.  
  
 ![Снимок экрана: FlowDocument LineHeight](~/add/media/flowdocument-lineheight.png "снимок экрана: LineHeight для документа нефиксированного формата")  
  
 На следующем рисунке показана прорисовку тот же пример с значение по умолчанию <xref:System.Windows.Documents.ListItem.LineHeight%2A> = <xref:System.Double.NaN?displayProperty=nameWithType>.  
  
 ![Снимок экрана: LineHeight документ нефиксированного формата по умолчанию](~/add/media/flowdocument-lineheightdefault.png "снимок экрана: LineHeight для документа нефиксированного формата по умолчанию")  
  
 Следующий пример показывает, как задать <xref:System.Windows.Documents.ListItem.LineHeight%2A> свойства программными средствами.  
  
 [!code-csharp[BlockSnippets#_Block_LineHeight](~/samples/snippets/csharp/VS_Snippets_Wpf/BlockSnippets/CSharp/Window1.xaml.cs#_block_lineheight)]
 [!code-vb[BlockSnippets#_Block_LineHeight](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BlockSnippets/visualbasic/window1.xaml.vb#_block_lineheight)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LineHeightProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty LineHeightProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty LineHeightProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Documents.ListItem.LineHeightProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LineHeightProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ LineHeightProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует свойство зависимостей <see cref="P:System.Windows.Documents.ListItem.LineHeight" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LineStackingStrategy">
      <MemberSignature Language="C#" Value="public System.Windows.LineStackingStrategy LineStackingStrategy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.LineStackingStrategy LineStackingStrategy" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.ListItem.LineStackingStrategy" />
      <MemberSignature Language="VB.NET" Value="Public Property LineStackingStrategy As LineStackingStrategy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::LineStackingStrategy LineStackingStrategy { System::Windows::LineStackingStrategy get(); void set(System::Windows::LineStackingStrategy value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.LineStackingStrategy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает механизм, с помощью которого для каждой строки текста в рамках <see cref="T:System.Windows.Documents.ListItem" />.</summary>
        <value>Одно из значений <see cref="T:System.Windows.LineStackingStrategy" />, задающее механизм определения поля строки для каждой строки текста в <see cref="T:System.Windows.Documents.ListItem" />. Значение по умолчанию: <see cref="F:System.Windows.LineStackingStrategy.MaxHeight" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_LineStackingStrategy"></a>   
## <a name="dependency-property-information"></a>Сведения о свойстве зависимостей  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.Documents.ListItem.LineStackingStrategyProperty>|  
|Значение свойства метаданных `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>, <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A>, <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
   
  
## Examples  
 В следующем примере показано, как использовать <xref:System.Windows.Controls.TextBlock.LineStackingStrategy%2A> свойства, чтобы определить, как поля строк создаются для строки текста <xref:System.Windows.Controls.TextBlock>. Первый <xref:System.Windows.Controls.TextBlock> имеет <xref:System.Windows.Controls.TextBlock.LineStackingStrategy%2A> значение <xref:System.Windows.LineStackingStrategy.MaxHeight> , а второй — <xref:System.Windows.Controls.TextBlock> имеет значение <xref:System.Windows.LineStackingStrategy.BlockLineHeight>.  
  
 [!code-xaml[FlowMiscSnippets_snip#LineStackingStrategyExampleWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/FlowMiscSnippets_snip/cs/linestackingstrategyexample.xaml#linestackingstrategyexamplewholepage)]  
  
 Ниже показан результат выполнения предыдущего кода.  
  
 ![Снимок экрана: Сравнение значений LineStackingStrategy](~/add/media/flow-linestackingstrategy.gif "снимок экрана: сравнение LineStackingStrategy значения")  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LineStackingStrategyProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty LineStackingStrategyProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty LineStackingStrategyProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Documents.ListItem.LineStackingStrategyProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LineStackingStrategyProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ LineStackingStrategyProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует свойство зависимостей <see cref="P:System.Windows.Documents.ListItem.LineStackingStrategy" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="List">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.List List { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Documents.List List" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.ListItem.List" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property List As List" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Documents::List ^ List { System::Windows::Documents::List ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.List</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает контейнер <see cref="T:System.Windows.Documents.List" />, содержащий компонент <see cref="T:System.Windows.Documents.ListItem" />.</summary>
        <value>Список, содержащий <see cref="T:System.Windows.Documents.ListItem" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Margin">
      <MemberSignature Language="C#" Value="public System.Windows.Thickness Margin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Thickness Margin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.ListItem.Margin" />
      <MemberSignature Language="VB.NET" Value="Public Property Margin As Thickness" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Thickness Margin { System::Windows::Thickness get(); void set(System::Windows::Thickness value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Thickness</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает толщину поля для элемента.</summary>
        <value>Объект <see cref="T:System.Windows.Thickness" /> структуру, которая указывает применяемое значение поля в аппаратно-независимых пикселях. Значение по умолчанию — единая нулевая толщина (0,0).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Documents.ListItem.Margin%2A> представляет свободное пространство, которое находится за пределами области содержимого элемента между краями области содержимого элемента и краями родительского элемента.  Этот метод противоположен <xref:System.Windows.Documents.ListItem.Padding%2A>, являющееся буфера пространство внутри области содержимого элемента между содержимым элемента и его внутренней границей элемента.  
  
<a name="xamlAttributeUsage_Margin"></a>   
## <a name="xaml-attribute-usage"></a>Использование атрибута XAML  
  
```  
<object Margin="uniformThickness"/>  
- or -  
<object Margin="independentThickness"/>  
- or -  
<object Margin="qualifiedUniformThickness"/>  
- or -  
<object Margin="qualifiedIndependentThickness"/>  
```  
  
<a name="xamlValues_Margin"></a>   
## <a name="xaml-values"></a>Значения XAML  
 *uniformThickness*  
 Строковое представление значения типа single <xref:System.Double> значение, применяемое ко всем четырем размерам толщины.  Например, значение `"10"` эквивалентное значение `"10,10,10,10"`.  Неквалифицированное значение измеряется в аппаратно-независимых пикселях. Строки не нужно явно указывать десятичного разделителя.  
  
 *independentThickness*  
 Строковое представление четырех упорядоченных <xref:System.Double> значения, соответствующие ширине слева, сверху, вправо и вниз, в следующем порядке.  Четыре значения должны разделяться запятыми; пробелы не допускаются.  Например «5,10,15,20» приведет к 5 точек поля слева от содержимого, 10 точек поля над содержимым, 15 точек поля справа от содержимого и 20 точек поля под содержимым.  
  
 *qualifiedUniformThickness*  
 Значение, описываемое *uniformThickness* следует один из следующих спецификаторов единиц: `px`, `in`.  
  
 `px` (по умолчанию) [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` дюймах; 1 дюйм == 96 точек  
  
 Например `"1in"` обеспечивает единое поле шириной 1 дюйм во всех направлениях.  
  
 *qualifiedIndependentThickness*  
 Значение, описываемое *independentThickness*, за каждым независимым значением, за которым следует один из следующих спецификаторов единиц: `px`, `in`.  
  
 `px` (по умолчанию) [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` дюймах; 1 дюйм == 96 точек  
  
 Например, `"1.5in,0.8in,1.5in,0.8in"`.  Спецификаторы единиц может смешанных или исключаются из одного или нескольких значений.  
  
<a name="dependencyPropertyInfo_Margin"></a>   
## <a name="dependency-property-information"></a>Сведения о свойстве зависимостей  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.Documents.ListItem.MarginProperty>|  
|Значение свойства метаданных `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
   
  
## Examples  
 Следующий пример показывает, как задать <xref:System.Windows.Documents.ListItem.Margin%2A> атрибут <xref:System.Windows.Documents.Block> элемент (<xref:System.Windows.Documents.Paragraph>).  
  
 [!code-xaml[BlockSnippets#_Block_MarginPaddingXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/BlockSnippets/CSharp/Window1.xaml#_block_marginpaddingxaml)]  
  
 На следующем рисунке показана отрисовка этого примера.  Увеличенная толщина и цвета используются для иллюстрации.  
  
 ![Снимок экрана: Например абзацы с заполнениями и границами](~/add/media/block-marginpadding.png "снимок экрана: параграфы с заполнениями и полей")  
  
 Следующий пример показывает, как задать <xref:System.Windows.Documents.ListItem.Margin%2A> свойства программными средствами.  
  
 [!code-csharp[BlockSnippets#_Block_MarginPadding](~/samples/snippets/csharp/VS_Snippets_Wpf/BlockSnippets/CSharp/Window1.xaml.cs#_block_marginpadding)]
 [!code-vb[BlockSnippets#_Block_MarginPadding](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BlockSnippets/visualbasic/window1.xaml.vb#_block_marginpadding)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.ListItem.Padding" />
      </Docs>
    </Member>
    <Member MemberName="MarginProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty MarginProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty MarginProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Documents.ListItem.MarginProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MarginProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ MarginProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует свойство зависимостей <see cref="P:System.Windows.Documents.ListItem.Margin" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NextListItem">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.ListItem NextListItem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Documents.ListItem NextListItem" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.ListItem.NextListItem" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NextListItem As ListItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Documents::ListItem ^ NextListItem { System::Windows::Documents::ListItem ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.ListItem</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получение следующего <see cref="T:System.Windows.Documents.ListItem" /> в содержащем <see cref="T:System.Windows.Documents.List" />.</summary>
        <value>Следующий объект <see cref="T:System.Windows.Documents.ListItem" /> в объекте <see cref="T:System.Windows.Documents.List" /> или значение <see langword="null" />, если следующего объекта <see cref="T:System.Windows.Documents.ListItem" /> не существует.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Documents.ListItem.PreviousListItem" />
        <altmember cref="P:System.Windows.Documents.ListItem.SiblingListItems" />
      </Docs>
    </Member>
    <Member MemberName="Padding">
      <MemberSignature Language="C#" Value="public System.Windows.Thickness Padding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Thickness Padding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.ListItem.Padding" />
      <MemberSignature Language="VB.NET" Value="Public Property Padding As Thickness" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Thickness Padding { System::Windows::Thickness get(); void set(System::Windows::Thickness value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Thickness</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает толщину заполнения для элемента.</summary>
        <value>Объект <see cref="T:System.Windows.Thickness" /> структуру, которая указывает применяемое значение Отбивки в аппаратно-независимых пикселях. Значение по умолчанию — единая нулевая толщина (0,0).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Documents.ListItem.Padding%2A> имеет место в буфере, внутри области содержимого элемента между содержимым элемента и его внутренней границей элемента.  Этот метод противоположен <xref:System.Windows.Documents.ListItem.Margin%2A>, который является буферное пространство, которое находится за пределами области содержимого элемента между краями области содержимого элемента и краями родительского элемента.  
  
<a name="xamlAttributeUsage_Padding"></a>   
## <a name="xaml-attribute-usage"></a>Использование атрибута XAML  
  
```  
<object Padding="uniformThickness"/>  
- or -  
<object Padding="independentThickness"/>  
- or -  
<object Padding="qualifiedUniformThickness"/>  
- or -  
<object Padding="qualifiedIndependentThickness"/>  
```  
  
<a name="xamlValues_Padding"></a>   
## <a name="xaml-values"></a>Значения XAML  
 *uniformThickness*  
 Строковое представление значения типа single <xref:System.Double> значение, применяемое ко всем четырем размерам толщины.  Например, значение `"10"` эквивалентное значение `"10,10,10,10"`.  Неквалифицированное значение измеряется в аппаратно-независимых пикселях. Строки не нужно явно указывать десятичного разделителя.  
  
 *independentThickness*  
 Строковое представление четырех упорядоченных <xref:System.Double> значения, соответствующие ширине слева, сверху, вправо и вниз, в следующем порядке.  Четыре значения должны разделяться запятыми; пробелы не допускаются.  Например «5,10,15,20» приведет к 5 точек поля слева от содержимого, 10 точек поля над содержимым, 15 точек поля справа от содержимого и 20 точек поля под содержимым.  
  
 *qualifiedUniformThickness*  
 Значение, описываемое *uniformThickness* следует один из следующих спецификаторов единиц: `px`, `in`.  
  
 `px` (по умолчанию) [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` дюймах; 1 дюйм == 96 точек  
  
 Например `"1in"` обеспечивает единое внутреннее поле размером 1 дюйм во всех направлениях.  
  
 *qualifiedIndependentThickness*  
 Значение, описываемое *independentThickness*, за каждым независимым значением, за которым следует один из следующих спецификаторов единиц: `px`, `in`.  
  
 `px` (по умолчанию) [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` дюймах; 1 дюйм == 96 точек  
  
 Например, `"1.5in,0.8in,1.5in,0.8in"`.  Спецификаторы единиц может смешанных или исключаются из одного или нескольких значений.  
  
<a name="dependencyPropertyInfo_Padding"></a>   
## <a name="dependency-property-information"></a>Сведения о свойстве зависимостей  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.Documents.ListItem.PaddingProperty>|  
|Значение свойства метаданных `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
   
  
## Examples  
 Следующий пример показывает, как задать <xref:System.Windows.Documents.ListItem.Padding%2A> атрибут <xref:System.Windows.Documents.Block> элемент (<xref:System.Windows.Documents.Paragraph>).  
  
 [!code-xaml[BlockSnippets#_Block_MarginPaddingXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/BlockSnippets/CSharp/Window1.xaml#_block_marginpaddingxaml)]  
  
 На следующем рисунке показана отрисовка этого примера.  Увеличенная толщина и цвета используются для иллюстрации.  
  
 ![Снимок экрана: Например абзацы с заполнениями и границами](~/add/media/block-marginpadding.png "снимок экрана: параграфы с заполнениями и полей")  
  
 Следующий пример показывает, как задать <xref:System.Windows.Documents.ListItem.Padding%2A> свойства программными средствами.  
  
 [!code-csharp[BlockSnippets#_Block_MarginPadding](~/samples/snippets/csharp/VS_Snippets_Wpf/BlockSnippets/CSharp/Window1.xaml.cs#_block_marginpadding)]
 [!code-vb[BlockSnippets#_Block_MarginPadding](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BlockSnippets/visualbasic/window1.xaml.vb#_block_marginpadding)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.ListItem.Margin" />
      </Docs>
    </Member>
    <Member MemberName="PaddingProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty PaddingProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty PaddingProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Documents.ListItem.PaddingProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PaddingProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ PaddingProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует свойство зависимостей <see cref="P:System.Windows.Documents.ListItem.Padding" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviousListItem">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.ListItem PreviousListItem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Documents.ListItem PreviousListItem" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.ListItem.PreviousListItem" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PreviousListItem As ListItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Documents::ListItem ^ PreviousListItem { System::Windows::Documents::ListItem ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.ListItem</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получение предыдущего <see cref="T:System.Windows.Documents.ListItem" /> в содержащем <see cref="T:System.Windows.Documents.List" />.</summary>
        <value>Предыдущий объект <see cref="T:System.Windows.Documents.ListItem" /> в объекте<see cref="T:System.Windows.Documents.List" /> или значение <see langword="null" />, если предыдущего объекта <see cref="T:System.Windows.Documents.ListItem" /> не существует.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Documents.ListItem.NextListItem" />
        <altmember cref="P:System.Windows.Documents.ListItem.SiblingListItems" />
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeBlocks">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeBlocks (System.Windows.Markup.XamlDesignerSerializationManager manager);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeBlocks(class System.Windows.Markup.XamlDesignerSerializationManager manager) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.ListItem.ShouldSerializeBlocks(System.Windows.Markup.XamlDesignerSerializationManager)" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeBlocks (manager As XamlDesignerSerializationManager) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeBlocks(System::Windows::Markup::XamlDesignerSerializationManager ^ manager);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="manager" Type="System.Windows.Markup.XamlDesignerSerializationManager" />
      </Parameters>
      <Docs>
        <param name="manager">Объект диспетчера служб сериализации для данного объекта.</param>
        <summary>Возвращает значение, показывающее, должно ли быть сериализовано действительное значение свойства <see cref="P:System.Windows.Documents.ListItem.Blocks" /> в процессе сериализации объекта <see cref="T:System.Windows.Documents.ListItem" />.</summary>
        <returns>
          Значение <see langword="true" />, если свойство<see cref="P:System.Windows.Documents.ListItem.Blocks" /> должно сериализоваться; в противном случае — значение <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NullReferenceException">
          Свойство <paramref name="manager" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SiblingListItems">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.ListItemCollection SiblingListItems { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Documents.ListItemCollection SiblingListItems" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.ListItem.SiblingListItems" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SiblingListItems As ListItemCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Documents::ListItemCollection ^ SiblingListItems { System::Windows::Documents::ListItemCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.ListItemCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получение <see cref="T:System.Windows.Documents.ListItemCollection" />, содержащего элементы <see cref="T:System.Windows.Documents.ListItem" />, которые являются одноранговыми с текущим элементом <see cref="T:System.Windows.Documents.ListItem" />.</summary>
        <value>Коллекция <see cref="T:System.Windows.Documents.ListItemCollection" /> дочерних элементов <see cref="T:System.Windows.Documents.ListItem" />, непосредственно размещенных в родительском элементе текущего элемента <see cref="T:System.Windows.Documents.ListItem" />, или значение <see langword="null" />, если текущий элемент <see cref="T:System.Windows.Documents.ListItem" /> не имеет родительского элемента.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Documents.ListItemCollection> Это свойство включает <xref:System.Windows.Documents.ListItem> элемент, через который доступ к коллекции; то есть, которому принадлежит это свойство считается собственным сестринским элементом для создания коллекции элементов того же уровня.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.ListItem.NextListItem" />
        <altmember cref="P:System.Windows.Documents.ListItem.PreviousListItem" />
      </Docs>
    </Member>
    <Member MemberName="TextAlignment">
      <MemberSignature Language="C#" Value="public System.Windows.TextAlignment TextAlignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.TextAlignment TextAlignment" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.ListItem.TextAlignment" />
      <MemberSignature Language="VB.NET" Value="Public Property TextAlignment As TextAlignment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::TextAlignment TextAlignment { System::Windows::TextAlignment get(); void set(System::Windows::TextAlignment value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.TextAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает значение, указывающее горизонтальное выравнивание содержимого текста.</summary>
        <value>Одно из значений <see cref="T:System.Windows.TextAlignment" />, задающее необходимое выравнивание. Значение по умолчанию: <see cref="F:System.Windows.TextAlignment.Left" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_TextAlignment"></a>   
## <a name="dependency-property-information"></a>Сведения о свойстве зависимостей  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.Documents.ListItem.TextAlignmentProperty>|  
|Значение свойства метаданных `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>, <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A>, <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
   
  
## Examples  
 Следующий пример показывает, как задать <xref:System.Windows.Documents.Block.TextAlignment%2A> атрибут <xref:System.Windows.Documents.Block> элемента.  
  
 [!code-xaml[BlockSnippets#_Block_TextAlignmentXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/BlockSnippets/CSharp/Window1.xaml#_block_textalignmentxaml)]  
  
 На следующем рисунке показана прорисовку предыдущего примера с <xref:System.Windows.TextAlignment.Left> выравнивание текста (по умолчанию).  
  
 ![Снимок экрана: Значение свойства TextAlign для Left](~/add/media/flowdoc-textalign-left.png "снимок экрана: значение свойства TextAlign для Left")  
  
 На следующем рисунке показана прорисовку тот же пример с <xref:System.Windows.TextAlignment.Right> выравнивание текста.  
  
 ![Снимок экрана: Значение TextAlign для Right](~/add/media/flowdoc-textalign-right.png "снимок экрана: значение TextAlign для Right")  
  
 На следующем рисунке показана прорисовку тот же пример с <xref:System.Windows.TextAlignment.Center> выравнивание текста.  
  
 ![Снимок экрана: Значение свойства TextAlign для Center](~/add/media/flowdoc-textalign-center.png "снимок экрана: значение свойства TextAlign для Center")  
  
 Следующий пример показывает, как задать <xref:System.Windows.Documents.ListItem.TextAlignment%2A> свойства программными средствами.  
  
 [!code-csharp[BlockSnippets#_Block_TextAlignment](~/samples/snippets/csharp/VS_Snippets_Wpf/BlockSnippets/CSharp/Window1.xaml.cs#_block_textalignment)]
 [!code-vb[BlockSnippets#_Block_TextAlignment](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BlockSnippets/visualbasic/window1.xaml.vb#_block_textalignment)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextAlignmentProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TextAlignmentProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TextAlignmentProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Documents.ListItem.TextAlignmentProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TextAlignmentProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ TextAlignmentProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует свойство зависимостей <see cref="P:System.Windows.Documents.ListItem.TextAlignment" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>