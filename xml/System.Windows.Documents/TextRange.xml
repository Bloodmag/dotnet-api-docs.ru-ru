<Type Name="TextRange" FullName="System.Windows.Documents.TextRange">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fb8c911bcd50ae7df0bc24cc8b65e1bdb494e3e5" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30629978" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class TextRange" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TextRange extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Documents.TextRange" />
  <TypeSignature Language="VB.NET" Value="Public Class TextRange" />
  <TypeSignature Language="C++ CLI" Value="public ref class TextRange" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Представляет выделение содержимого между двумя позициями <see cref="T:System.Windows.Documents.TextPointer" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Documents.TextRange> Класс представлены следующие термины.  
  
-   **Выбор** - <xref:System.Windows.Documents.TextRange> выделения содержимого между двумя положениями обозначается **текстовые указатели**.  Одна из данных позиций представляет фиксированную привязку относительно выделения, а другая позиция может быть перемещена.  Это похоже на поведение выбор, сделанный пользователем с помощью мыши или клавиатуры.  
  
-   **Текущее выделение** — так как <xref:System.Windows.Documents.TextRange> всегда указывает на выделение в содержимом, имеет смысл просто найти соответствующий <xref:System.Windows.Documents.TextRange> как *текущее выделение*.  
  
-   **Текстовый контейнер** - *контейнера текста* элемент, который образует конечную границу для имеющегося содержимого потока; в соответствующий <xref:System.Windows.Documents.TextRange> всегда попадает в текстовом контейнере.  В настоящее время текстовый контейнер должен быть либо <xref:System.Windows.Documents.FlowDocument> или <xref:System.Windows.Controls.TextBlock>.  
  
-   **Документ** -содержимое коллективно содержится в текстовом контейнере, называется *документа*.  
  
 Дополнительные сведения о других связанных такие термины, как *позиции*, в разделе <xref:System.Windows.Documents.TextPointer>.  
  
   
  
## Examples  
 В следующем примере показано использование <xref:System.Windows.Documents.TextRange.Text%2A> свойство <xref:System.Windows.Documents.TextRange> представления в виде обычного текста указанного <xref:System.Windows.Documents.FlowDocument>.  
  
 [!code-csharp[TextPointer_Snippets#_TextRange_Text](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textrange_text)]
 [!code-vb[TextPointer_Snippets#_TextRange_Text](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textrange_text)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Documents.TextPointerContext" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextRange (System.Windows.Documents.TextPointer position1, System.Windows.Documents.TextPointer position2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Documents.TextPointer position1, class System.Windows.Documents.TextPointer position2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextRange.#ctor(System.Windows.Documents.TextPointer,System.Windows.Documents.TextPointer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (position1 As TextPointer, position2 As TextPointer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextRange(System::Windows::Documents::TextPointer ^ position1, System::Windows::Documents::TextPointer ^ position2);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="position1" Type="System.Windows.Documents.TextPointer" />
        <Parameter Name="position2" Type="System.Windows.Documents.TextPointer" />
      </Parameters>
      <Docs>
        <param name="position1">Фиксированная привязанная позиция, помечающая один край выделения, используемый для формирования нового <see cref="T:System.Windows.Documents.TextRange" />.</param>
        <param name="position2">Перемещаемая позиция, помечающая другой край выделения, используемый для формирования нового <see cref="T:System.Windows.Documents.TextRange" />.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Windows.Documents.TextRange" />, принимая две указанных позиции <see cref="T:System.Windows.Documents.TextPointer" /> в качестве начальной и конечной позиций для нового интервала.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Объект <xref:System.Windows.Documents.TextRange> формируется на основе выбора между двумя положениями обозначается **текстовые указатели**.  Одну из этих позиций (обозначается `position1`) является фиксированным по отношению к выбор, во время другой позиции (обозначается `position2`) может быть перемещена.  Это похоже на поведение выбор, сделанный пользователем с помощью мыши или клавиатуры.  
  
 Фактические края нового <xref:System.Windows.Documents.TextRange> могут быть изменены для соответствия любой эвристике выделения, применимые к документу, который содержит новый <xref:System.Windows.Documents.TextRange>.  
  
   
  
## Examples  
 В следующем примере показано использование <xref:System.Windows.Documents.TextRange> конструктор.  
  
 [!code-csharp[TextPointer_Snippets#_TextRange_Text](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textrange_text)]
 [!code-vb[TextPointer_Snippets#_TextRange_Text](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textrange_text)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Происходит, когда <paramref name="position1" /> и <paramref name="position2" /> перемещаются в рамках одного документа.</exception>
        <exception cref="T:System.ArgumentNullException">Происходит, когда <paramref name="position1" /> или <paramref name="position2" /> является <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ApplyPropertyValue">
      <MemberSignature Language="C#" Value="public void ApplyPropertyValue (System.Windows.DependencyProperty formattingProperty, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ApplyPropertyValue(class System.Windows.DependencyProperty formattingProperty, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextRange.ApplyPropertyValue(System.Windows.DependencyProperty,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ApplyPropertyValue (formattingProperty As DependencyProperty, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyPropertyValue(System::Windows::DependencyProperty ^ formattingProperty, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formattingProperty" Type="System.Windows.DependencyProperty" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="formattingProperty">Свойство форматирования для применения.</param>
        <param name="value">Значение для свойства форматирования.</param>
        <summary>Применяет указанное свойство форматирования и значение к текущему выделению.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод применяется форматирование, вставив соответствующий <xref:System.Windows.Documents.Inline> элементы, такие как <xref:System.Windows.Documents.Bold> и <xref:System.Windows.Documents.Italic>, в соответствующий это <xref:System.Windows.Documents.TextRange>.  
  
   
  
## Examples  
 В следующем примере иллюстрируется использование метода <xref:System.Windows.Documents.TextRange.ApplyPropertyValue%2A>.  
  
 [!code-csharp[TextPointer_Snippets#_TextRange_LoadSave](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textrange_loadsave)]
 [!code-vb[TextPointer_Snippets#_TextRange_LoadSave](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textrange_loadsave)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Происходит, когда <paramref name="formattingProperty" /> не указывает допустимое свойство форматирования или <paramref name="value" /> указывает недопустимое значение для <paramref name="formattingProperty" />.</exception>
        <exception cref="T:System.ArgumentNullException">Генерируется, когда <paramref name="formattingProperty" /> содержит <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Documents.TextRange.ClearAllProperties" />
        <altmember cref="M:System.Windows.Documents.TextRange.GetPropertyValue(System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="CanLoad">
      <MemberSignature Language="C#" Value="public bool CanLoad (string dataFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanLoad(string dataFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextRange.CanLoad(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanLoad (dataFormat As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanLoad(System::String ^ dataFormat);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataFormat" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataFormat">Формат данных для проверки на предмет возможности загрузки в текущее выделение.  Список предварительно заданных форматов данных см. в разделе <see cref="T:System.Windows.DataFormats" />.</param>
        <summary>Проверяет возможность загрузки текущего выделения содержимым в указанном формате данных.</summary>
        <returns>
          <see langword="true" />, если текущее выделение может быть загружено содержимым в указанном формате данных, в противном случае <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте соответствующий <xref:System.Windows.Documents.TextRange.Load%2A> метода требуется загрузить содержимое в текущее выделение в указанном формате.  
  
   
  
## Examples  
 В следующем примере иллюстрируется использование метода <xref:System.Windows.Documents.TextRange.CanLoad%2A>.  
  
 [!code-csharp[TextPointer_Snippets#_TextRange_LoadSave](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textrange_loadsave)]
 [!code-vb[TextPointer_Snippets#_TextRange_LoadSave](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textrange_loadsave)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Documents.TextRange.CanSave(System.String)" />
        <altmember cref="M:System.Windows.Documents.TextRange.Save(System.IO.Stream,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CanSave">
      <MemberSignature Language="C#" Value="public bool CanSave (string dataFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanSave(string dataFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextRange.CanSave(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanSave (dataFormat As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanSave(System::String ^ dataFormat);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Documents.ITextRange.CanSave(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataFormat" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataFormat">Формат данных для проверки на предмет возможности сохранения с текущим выделением.  Список предварительно заданных форматов данных см. в разделе <see cref="T:System.Windows.DataFormats" />.</param>
        <summary>Проверяет возможность сохранения текущего выделения в указанном формате данных.</summary>
        <returns>
          <see langword="true" />, если текущее выделение может быть записано в указанном формате данных, в противном случае <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте соответствующий <xref:System.Windows.Documents.TextRange.Save%2A> метод фактически Сохранение текущего выделения в указанном формате.  
  
   
  
## Examples  
 В следующем примере иллюстрируется использование метода <xref:System.Windows.Documents.TextRange.CanSave%2A>.  
  
 [!code-csharp[TextPointer_Snippets#_TextRange_LoadSave](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textrange_loadsave)]
 [!code-vb[TextPointer_Snippets#_TextRange_LoadSave](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textrange_loadsave)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Documents.TextRange.CanLoad(System.String)" />
        <altmember cref="M:System.Windows.Documents.TextRange.Load(System.IO.Stream,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Changed">
      <MemberSignature Language="C#" Value="public event EventHandler Changed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Changed" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Documents.TextRange.Changed" />
      <MemberSignature Language="VB.NET" Value="Public Event Changed As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Changed;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.Documents.ITextRange.Changed</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при изменении положения диапазона для покрытия нового фрагмента содержимого.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearAllProperties">
      <MemberSignature Language="C#" Value="public void ClearAllProperties ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearAllProperties() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextRange.ClearAllProperties" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearAllProperties ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearAllProperties();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Удаляет все свойства форматирования (представленные элементами <see cref="T:System.Windows.Documents.Inline" />) из текущего выделения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод влияет только на любой <xref:System.Windows.Documents.Inline> форматирование элементов, таких как <xref:System.Windows.Documents.Bold> или <xref:System.Windows.Documents.Italic>. Свойства, заданные абзацев и другие заключив <xref:System.Windows.Documents.Block> элементов не изменяются.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Documents.TextRange.ApplyPropertyValue(System.Windows.DependencyProperty,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.Windows.Documents.TextPointer textPointer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(class System.Windows.Documents.TextPointer textPointer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextRange.Contains(System.Windows.Documents.TextPointer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::Windows::Documents::TextPointer ^ textPointer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textPointer" Type="System.Windows.Documents.TextPointer" />
      </Parameters>
      <Docs>
        <param name="textPointer">Позиция для тестирования на предмет включения в текущее выделение.</param>
        <summary>Проверяет расположена ли позиция (указанная <see cref="T:System.Windows.Documents.TextPointer" />) в текущем выделении.</summary>
        <returns>
          <see langword="true" />, если указанная позиция расположена в текущем выделении, в противном случае <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Позиций на любом конце текущее выделение (обозначается <xref:System.Windows.Documents.TextRange.Start%2A> и <xref:System.Windows.Documents.TextRange.End%2A>), считаются частью текущего выделения.  
  
   
  
## Examples  
 В следующем примере иллюстрируется использование метода <xref:System.Windows.Documents.TextRange.Contains%2A>.  
  
 [!code-csharp[TextPointer_Snippets#_TextRange_StartEnd](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textrange_startend)]
 [!code-vb[TextPointer_Snippets#_TextRange_StartEnd](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textrange_startend)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Происходит, когда *textPointer* не находится в том же документе, что и текущее выделение.</exception>
      </Docs>
    </Member>
    <Member MemberName="End">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.TextPointer End { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Documents.TextPointer End" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextRange.End" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property End As TextPointer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Documents::TextPointer ^ End { System::Windows::Documents::TextPointer ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.TextPointer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает позицию, помечающую край текущего выделения.</summary>
        <value>
          <see cref="T:System.Windows.Documents.TextPointer" />, указывающий край текущего выделения.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере показано использование <xref:System.Windows.Documents.TextRange.End%2A> свойство.  
  
 [!code-csharp[TextPointer_Snippets#_TextRange_StartEnd](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textrange_startend)]
 [!code-vb[TextPointer_Snippets#_TextRange_StartEnd](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textrange_startend)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.TextRange.Start" />
      </Docs>
    </Member>
    <Member MemberName="GetPropertyValue">
      <MemberSignature Language="C#" Value="public object GetPropertyValue (System.Windows.DependencyProperty formattingProperty);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetPropertyValue(class System.Windows.DependencyProperty formattingProperty) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextRange.GetPropertyValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPropertyValue (formattingProperty As DependencyProperty) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetPropertyValue(System::Windows::DependencyProperty ^ formattingProperty);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Documents.ITextRange.GetPropertyValue(System.Windows.DependencyProperty)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formattingProperty" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="formattingProperty">Свойство форматирования для получения значения относительно текущего выделения.</param>
        <summary>Возвращает эффективное значение указанного свойства форматирования в текущем выделении.</summary>
        <returns>Объект, указывающий значение указанного свойства форматирования.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Для возврата значения свойства, вся <xref:System.Windows.Documents.TextRange> необходимо расширить на текст с только одним значением для `formattingProperty`. Если <xref:System.Windows.Documents.TextRange> расширяет над текстом, с двумя или более различными значениями для `formattingProperty`, <xref:System.Windows.DependencyProperty.UnsetValue> возвращается.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Происходит, когда <paramref name="formattingProperty" /> не указывает допустимое свойство форматирования или <paramref name="value" /> указывает недопустимое значение для <paramref name="formattingProperty" />.</exception>
        <exception cref="T:System.ArgumentNullException">Генерируется, когда <paramref name="formattingProperty" /> содержит <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Documents.TextRange.ClearAllProperties" />
        <altmember cref="M:System.Windows.Documents.TextRange.ApplyPropertyValue(System.Windows.DependencyProperty,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextRange.IsEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEmpty { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Documents.ITextRange.IsEmpty</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, является ли текущее выделение пустым или нет.</summary>
        <value>
          <see langword="true" />, если текущее выделение пустое, в противном случае <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Объект <xref:System.Windows.Documents.TextRange> считается пустым, если <xref:System.Windows.Documents.TextRange.Start%2A> и <xref:System.Windows.Documents.TextRange.End%2A> положения равны.  
  
   
  
## Examples  
 В следующем примере показано использование <xref:System.Windows.Documents.TextRange.IsEmpty%2A> свойство.  
  
 [!code-csharp[TextPointer_Snippets#_TextRange_LoadSave](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textrange_loadsave)]
 [!code-vb[TextPointer_Snippets#_TextRange_LoadSave](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textrange_loadsave)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.IO.Stream stream, string dataFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.IO.Stream stream, string dataFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextRange.Load(System.IO.Stream,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::IO::Stream ^ stream, System::String ^ dataFormat);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="dataFormat" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="stream">Пригодный для чтения поток, содержащий данные для загрузки в текущее выделение.</param>
        <param name="dataFormat">Формат данных, в котором требуется загрузить данные.  Текущие поддерживаемые форматы данных включают <see cref="F:System.Windows.DataFormats.Rtf" />, <see cref="F:System.Windows.DataFormats.Text" />, <see cref="F:System.Windows.DataFormats.Xaml" /> и <see cref="F:System.Windows.DataFormats.XamlPackage" />.</param>
        <summary>Загружает текущее выделение в указанном формате данных из указанного потока.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если <xref:System.IO.Stream.CanSeek%2A> — `true` для `stream`, содержимое будет загружено с самого начала потока до конца потока.  В противном случае содержимое будет считываться из текущего <xref:System.IO.Stream.Position%2A> до конца потока.  По возвращении из этого метода `stream` остается открытым и текущую позицию внутри `stream` не определено.  
  
 Операция загрузки заменяет текущее выделение новым загруженным содержимым.  
  
   
  
## Examples  
 В следующем примере иллюстрируется использование метода <xref:System.Windows.Documents.TextRange.Load%2A>.  
  
 [!code-csharp[TextPointer_Snippets#_TextRange_LoadSave](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textrange_loadsave)]
 [!code-vb[TextPointer_Snippets#_TextRange_LoadSave](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textrange_loadsave)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Происходит, когда <paramref name="stream" /> или <paramref name="dataFormat" /> является <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Происходит, когда указанный формат данных не поддерживается.  Может быть также вызван, если содержимое, загруженное из <paramref name="stream" />, не соответствует указанному формату данных.</exception>
        <altmember cref="M:System.Windows.Documents.TextRange.CanLoad(System.String)" />
        <altmember cref="M:System.Windows.Documents.TextRange.Save(System.IO.Stream,System.String)" />
        <altmember cref="M:System.Windows.Documents.TextRange.CanSave(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Save">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Сохраняет текущее выделение в указанном формате данных из указанного потока.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.IO.Stream stream, string dataFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class System.IO.Stream stream, string dataFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextRange.Save(System.IO.Stream,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::IO::Stream ^ stream, System::String ^ dataFormat);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Documents.ITextRange.Save(System.IO.Stream,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="dataFormat" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="stream">Пустой записываемый поток для сохранения текущего выделения.</param>
        <param name="dataFormat">Формат данных, в котором требуется сохранить текущее выделение.  Текущие поддерживаемые форматы данных включают <see cref="F:System.Windows.DataFormats.Rtf" />, <see cref="F:System.Windows.DataFormats.Text" />, <see cref="F:System.Windows.DataFormats.Xaml" /> и <see cref="F:System.Windows.DataFormats.XamlPackage" />.</param>
        <summary>Сохраняет текущее выделение в указанном формате данных из указанного потока.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 По возвращении из этого метода `stream` остается открытым и текущую позицию внутри `stream` не определено.  
  
 В процессе сохранения содержимого в текущем выделенном фрагменте операции могут быть преобразованы в данные с форматом, заданным `dataFormat`.  
  
   
  
## Examples  
 В следующем примере иллюстрируется использование метода <xref:System.Windows.Documents.TextRange.Save%2A>.  
  
 [!code-csharp[TextPointer_Snippets#_TextRange_LoadSave](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textrange_loadsave)]
 [!code-vb[TextPointer_Snippets#_TextRange_LoadSave](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textrange_loadsave)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Параметр <paramref name="stream" /> или <paramref name="dataFormat" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Указанный формат данных не поддерживается.  
  
 или  
  
 Содержимое, загруженное из <paramref name="stream" />, не соответствует указанному формату данных.</exception>
        <altmember cref="M:System.Windows.Documents.TextRange.CanSave(System.String)" />
        <altmember cref="M:System.Windows.Documents.TextRange.Load(System.IO.Stream,System.String)" />
        <altmember cref="M:System.Windows.Documents.TextRange.CanLoad(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.IO.Stream stream, string dataFormat, bool preserveTextElements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class System.IO.Stream stream, string dataFormat, bool preserveTextElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextRange.Save(System.IO.Stream,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::IO::Stream ^ stream, System::String ^ dataFormat, bool preserveTextElements);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Documents.ITextRange.Save(System.IO.Stream,System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="dataFormat" Type="System.String" />
        <Parameter Name="preserveTextElements" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stream">Пустой записываемый поток для сохранения текущего выделения.</param>
        <param name="dataFormat">Формат данных, в котором требуется сохранить текущее выделение.  Текущие поддерживаемые форматы данных включают <see cref="F:System.Windows.DataFormats.Rtf" />, <see cref="F:System.Windows.DataFormats.Text" />, <see cref="F:System.Windows.DataFormats.Xaml" /> и <see cref="F:System.Windows.DataFormats.XamlPackage" />.</param>
        <param name="preserveTextElements">
          <see langword="true" /> для сохранения пользовательских объектов <see cref="T:System.Windows.Documents.TextElement" />, противном случае <see langword="false" />.</param>
        <summary>Сохраняет текущее выделение в указанный поток в указанном формате данных с возможностью сохранения пользовательских объектов <see cref="T:System.Windows.Documents.TextElement" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При `preserveTextElements` — `false`пользовательские <xref:System.Windows.Documents.TextElement> сохраняются как известные объекты <xref:System.Windows.Documents.TextElement> типов.  Предположим, например, можно создать настраиваемый <xref:System.Windows.Documents.TextElement> вызывается `Heading1`, который наследует от <xref:System.Windows.Documents.Paragraph>. При вызове этого метода с `preserveTextElements` значение `false`, `Heading1` преобразуется в <xref:System.Windows.Documents.Paragraph> при <xref:System.Windows.Documents.TextRange> сохраняется.  При вызове этого метода с `preserveTextElements` значение `true`, `Heading1` сохраняется без преобразования. Чтобы сохранить настраиваемые текстовые элементы, `dataFormat` должно быть присвоено <xref:System.Windows.DataFormats.Xaml?displayProperty=nameWithType>.  
  
 <xref:System.Windows.Documents.TextRange.Save%28System.IO.Stream%2CSystem.String%2CSystem.Boolean%29> впервые появился в платформе .NET Framework версии 3.5.  Дополнительные сведения см. в статье [Версии и зависимости платформы .NET Framework](~/docs/framework/migration-guide/versions-and-dependencies.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Происходит, когда <paramref name="stream" /> или <paramref name="dataFormat" /> является <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Происходит, когда указанный формат данных не поддерживается.  Может быть также вызван, если содержимое, загруженное из <paramref name="stream" />, не соответствует указанному формату данных.</exception>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public void Select (System.Windows.Documents.TextPointer position1, System.Windows.Documents.TextPointer position2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Select(class System.Windows.Documents.TextPointer position1, class System.Windows.Documents.TextPointer position2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextRange.Select(System.Windows.Documents.TextPointer,System.Windows.Documents.TextPointer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Select (position1 As TextPointer, position2 As TextPointer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Select(System::Windows::Documents::TextPointer ^ position1, System::Windows::Documents::TextPointer ^ position2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position1" Type="System.Windows.Documents.TextPointer" />
        <Parameter Name="position2" Type="System.Windows.Documents.TextPointer" />
      </Parameters>
      <Docs>
        <param name="position1">Фиксированная позиция привязки, помечающая один край обновленного выделения.</param>
        <param name="position2">Перемещаемая позиция, помечающая другой край обновленного выделения.</param>
        <summary>Обновляет текущее выделение, принимая две позиции <see cref="T:System.Windows.Documents.TextPointer" /> для указания обновленного выделения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Объект <xref:System.Windows.Documents.TextRange> формируется на основе выбора между двумя положениями обозначается **текстовые указатели**.  Одну из этих позиций (обозначается `position1`) является фиксированным по отношению к выбор, во время другой позиции (обозначается `position2`) может быть перемещена.  Это похоже на поведение выбор, сделанный пользователем с помощью мыши или клавиатуры.  
  
 Фактические края нового выделения могут быть изменены для соответствия любой эвристике выделения, применимые к документу, который содержит новое текущее выделение.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Происходит, когда <paramref name="position1" /> и <paramref name="position2" /> перемещаются в рамках одного документа.</exception>
        <exception cref="T:System.ArgumentNullException">Происходит, когда <paramref name="position1" /> или <paramref name="position2" /> является <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.TextPointer Start { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Documents.TextPointer Start" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextRange.Start" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Start As TextPointer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Documents::TextPointer ^ Start { System::Windows::Documents::TextPointer ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.TextPointer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает позицию, помечающую начало текущего выделения.</summary>
        <value>
          <see cref="T:System.Windows.Documents.TextPointer" />, указывающий начало текущего выделения.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере показано использование <xref:System.Windows.Documents.TextRange.Start%2A> свойство.  
  
 [!code-csharp[TextPointer_Snippets#_TextRange_StartEnd](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textrange_startend)]
 [!code-vb[TextPointer_Snippets#_TextRange_StartEnd](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textrange_startend)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.TextRange.End" />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextRange.Text" />
      <MemberSignature Language="VB.NET" Value="Public Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Documents.ITextRange.Text</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает текстовое содержимое текущего выделения.</summary>
        <value>Строка, содержащая текстовое содержимое текущего выделения.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это свойство можно используйте для извлечения содержимого обычного текста в выделенном фрагменте, независимо от того, все форматирования, которые могут присутствовать.  
  
 Символы новой строки и разрывы абзацев обрабатываются как эквивалент по отношению к этому свойству.  Любые типы разрывов содержимого, присутствующие в текущем выделении преобразуются в новые строки, когда это свойство доступно для чтения.  
  
   
  
## Examples  
 В следующем примере показано использование <xref:System.Windows.Documents.TextRange.Text%2A> свойство.  
  
 [!code-csharp[TextPointer_Snippets#_TextRange_Text](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textrange_text)]
 [!code-vb[TextPointer_Snippets#_TextRange_Text](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textrange_text)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Происходит, когда предпринимается попытка установки для данного свойства значения <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>