<Type Name="DomainUpDown" FullName="System.Windows.Forms.DomainUpDown">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4bf58a4964d475bf910d87a0999860cfaef3057f" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37512101" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DomainUpDown : System.Windows.Forms.UpDownBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DomainUpDown extends System.Windows.Forms.UpDownBase" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.DomainUpDown" />
  <TypeSignature Language="VB.NET" Value="Public Class DomainUpDown&#xA;Inherits UpDownBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class DomainUpDown : System::Windows::Forms::UpDownBase" />
  <TypeSignature Language="F#" Value="type DomainUpDown = class&#xA;    inherit UpDownBase" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.UpDownBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultBindingProperty("SelectedItem")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("SelectedItemChanged")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Items")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents a Windows spin box (also known as an up-down control) that displays string values.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Объект <xref:System.Windows.Forms.DomainUpDown> элемент управления отображает одно строковое значение, выбранное из <xref:System.Object> коллекции вверх или вниз элемента управления. Пользователь также может вводить текст в элементе управления, если <xref:System.Windows.Forms.UpDownBase.ReadOnly%2A> свойству `true` (строка, вводимая в должна соответствовать элементу в коллекции, чтобы быть допустимой). При выборе элемента объект преобразуется в строковое значение, чтобы его можно было отобразить в регуляторе.  
  
 Чтобы создать коллекцию объектов для отображения в <xref:System.Windows.Forms.DomainUpDown> элемента управления, можно добавить или удалить элементы по отдельности с помощью <xref:System.Collections.ArrayList.Add%2A> и <xref:System.Collections.ArrayList.Remove%2A> методы. Это может вызываться в обработчике событий, таких как <xref:System.Windows.Forms.Control.Click> события кнопки. Коллекция объектов могут быть отсортированы по алфавиту, задав <xref:System.Windows.Forms.DomainUpDown.Sorted%2A> свойства `true`. Когда <xref:System.Windows.Forms.DomainUpDown.Wrap%2A> свойству `true`при прокрутке последнего или первого объекта в коллекции, список будет отображаться для наката длинного списка с начала с первого или последнего объекта соответственно.  
  
 Когда <xref:System.Windows.Forms.DomainUpDown.UpButton%2A> или <xref:System.Windows.Forms.DomainUpDown.DownButton%2A> методы вызываются в коде или в меню вверх или вниз, <xref:System.Windows.Forms.DomainUpDown.UpdateEditText%2A> вызывается, чтобы обновить элемент управления с новой строки. Если <xref:System.Windows.Forms.UpDownBase.UserEdit%2A> присваивается `true`, строка соответствует одному из значений в коллекции перед обновлением отображения текста элемента управления.  
  
 Начиная с .NET Framework 4.6, <xref:System.Windows.Forms.DomainUpDown> элемент управления будет изменяться в зависимости от используемого параметра системы точек на ДЮЙМ, если файл app.config содержит следующую запись:  
  
```  
<appSettings>  
  <add key="EnableWindowsFormsHighDpiAutoResizing" value="true" />  
</appSettings>  
  
```  
  
   
  
## Examples  
 В следующем примере кода создает и инициализирует <xref:System.Windows.Forms.DomainUpDown> элемента управления. Пример позволяет настроить некоторые из его свойств и создать коллекцию строк, отображаемых в регуляторе. Предполагается, что <xref:System.Windows.Forms.TextBox>, <xref:System.Windows.Forms.CheckBox>, и <xref:System.Windows.Forms.Button> уже созданы в форме. Также предполагается, что у вас есть переменную-член на уровне класса, объявленные как 32-разрядное знаковое целое число с именем `myCounter`. Можно ввести строку в текстовом поле и добавьте его в <xref:System.Windows.Forms.DomainUpDown.Items%2A> коллекции при нажатии кнопки. Щелкнув флажок, можно переключать <xref:System.Windows.Forms.DomainUpDown.Sorted%2A> свойства и определить разницу в коллекции элементов в регуляторе.  
  
 [!code-cpp[Classic DomainUpDown Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic DomainUpDown Example/CPP/source.cpp#1)]
 [!code-csharp[Classic DomainUpDown Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic DomainUpDown Example/CS/source.cs#1)]
 [!code-vb[Classic DomainUpDown Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic DomainUpDown Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.UpDownBase" />
    <altmember cref="T:System.Windows.Forms.NumericUpDown" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DomainUpDown ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DomainUpDown.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DomainUpDown();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DomainUpDown" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере кода создает и инициализирует <xref:System.Windows.Forms.DomainUpDown> элемента управления. Пример позволяет настроить некоторые из его свойств и создать коллекцию строк, отображаемых в регуляторе (также известный как элемент управления "вверх вниз"). Предполагается, что <xref:System.Windows.Forms.TextBox>, <xref:System.Windows.Forms.CheckBox>, и <xref:System.Windows.Forms.Button> уже созданы в форме. Также предполагается, что у вас есть переменную-член на уровне класса, объявленные как 32-разрядное знаковое целое число с именем `myCounter`. Можно ввести строку в текстовом поле и добавьте его в <xref:System.Windows.Forms.DomainUpDown.Items%2A> коллекции при нажатии кнопки. Щелкнув флажок, можно переключать <xref:System.Windows.Forms.DomainUpDown.Sorted%2A> свойства и определить разницу в коллекции элементов в регуляторе.  
  
 [!code-cpp[Classic DomainUpDown Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic DomainUpDown Example/CPP/source.cpp#1)]
 [!code-csharp[Classic DomainUpDown Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic DomainUpDown Example/CS/source.cs#1)]
 [!code-vb[Classic DomainUpDown Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic DomainUpDown Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.UpDownBase" />
      </Docs>
    </Member>
    <Member MemberName="CreateAccessibilityInstance">
      <MemberSignature Language="C#" Value="protected override System.Windows.Forms.AccessibleObject CreateAccessibilityInstance ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Forms.AccessibleObject CreateAccessibilityInstance() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DomainUpDown.CreateAccessibilityInstance" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateAccessibilityInstance () As AccessibleObject" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Forms::AccessibleObject ^ CreateAccessibilityInstance();" />
      <MemberSignature Language="F#" Value="override this.CreateAccessibilityInstance : unit -&gt; System.Windows.Forms.AccessibleObject" Usage="domainUpDown.CreateAccessibilityInstance " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AccessibleObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a new accessibility object for the <see cref="T:System.Windows.Forms.DomainUpDown" /> control.</summary>
        <returns>A new <see cref="T:System.Windows.Forms.DomainUpDown.DomainUpDownAccessibleObject" /> for the control.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если метод <xref:System.Windows.Forms.DomainUpDown.CreateAccessibilityInstance%2A> не вызывается явно, он будет вызван при обращении к свойству <xref:System.Windows.Forms.Control.AccessibilityObject%2A>.  
  
> [!NOTE]
>  Чтобы получить или задать свойство <xref:System.Windows.Forms.Control.AccessibilityObject%2A>, необходимо добавить ссылку на сборку Accessibility, устанавливаемую вместе с платформой .NET Framework.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>При переопределении метода <see cref="M:System.Windows.Forms.DomainUpDown.CreateAccessibilityInstance" /> в производном классе, не следует вызывать базовый класс <see cref="M:System.Windows.Forms.DomainUpDown.CreateAccessibilityInstance" /> метод.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="DownButton">
      <MemberSignature Language="C#" Value="public override void DownButton ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void DownButton() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DomainUpDown.DownButton" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub DownButton ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void DownButton();" />
      <MemberSignature Language="F#" Value="override this.DownButton : unit -&gt; unit" Usage="domainUpDown.DownButton " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Displays the next item in the object collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 По мере продвижения по коллекции элементов в <xref:System.Windows.Forms.DomainUpDown> управление с помощью свойств «вниз», будет достигнут последний элемент в коллекции. Если вы продолжите, и <xref:System.Windows.Forms.DomainUpDown.Wrap%2A> присваивается `true`, список будет начать заново с первого элемента в коллекции и могут быть непрерывной. Это также происходит при перемещении по коллекции, используя со стрелкой вверх.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.DomainUpDown.UpButton" />
      </Docs>
    </Member>
    <Member MemberName="Items">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DomainUpDown.DomainUpDownItemCollection Items { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DomainUpDown/DomainUpDownItemCollection Items" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DomainUpDown.Items" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Items As DomainUpDown.DomainUpDownItemCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DomainUpDown::DomainUpDownItemCollection ^ Items { System::Windows::Forms::DomainUpDown::DomainUpDownItemCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Items : System.Windows.Forms.DomainUpDown.DomainUpDownItemCollection" Usage="System.Windows.Forms.DomainUpDown.Items" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.StringCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DomainUpDown+DomainUpDownItemCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A collection of objects assigned to the spin box (also known as an up-down control).</summary>
        <value>Объект <see cref="T:System.Windows.Forms.DomainUpDown.DomainUpDownItemCollection" /> , содержащий <see cref="T:System.Object" /> коллекции.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Object> Коллекции можно выполнять построение и становятся доступными для <xref:System.Windows.Forms.DomainUpDown> управления двумя способами. Можно добавить элементы в коллекцию с помощью <xref:System.Collections.ArrayList.Add%2A> или <xref:System.Collections.ArrayList.Insert%2A> методы.  
  
   
  
## Examples  
 В следующем примере кода создает и инициализирует <xref:System.Windows.Forms.DomainUpDown> элемента управления. Пример позволяет настроить некоторые из его свойств и создать коллекцию строк, отображаемых в регуляторе. Предполагается, что <xref:System.Windows.Forms.TextBox>, <xref:System.Windows.Forms.CheckBox>, и <xref:System.Windows.Forms.Button> уже созданы в форме. Также предполагается, что у вас есть переменную-член на уровне класса, объявленные как 32-разрядное знаковое целое число с именем `myCounter`. Можно ввести строку в текстовом поле и добавьте его в <xref:System.Windows.Forms.DomainUpDown.Items%2A> коллекции при нажатии кнопки. Щелкнув флажок, можно переключать <xref:System.Windows.Forms.DomainUpDown.Sorted%2A> свойства и определить разницу в коллекции элементов в регуляторе.  
  
 [!code-cpp[Classic DomainUpDown Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic DomainUpDown Example/CPP/source.cpp#1)]
 [!code-csharp[Classic DomainUpDown Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic DomainUpDown Example/CS/source.cs#1)]
 [!code-vb[Classic DomainUpDown Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic DomainUpDown Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DomainUpDown.Items" />
        <altmember cref="T:System.Windows.Forms.DomainUpDown.DomainUpDownItemCollection" />
      </Docs>
    </Member>
    <Member MemberName="OnChanged">
      <MemberSignature Language="C#" Value="protected override void OnChanged (object source, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnChanged(object source, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DomainUpDown.OnChanged(System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnChanged (source As Object, e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnChanged(System::Object ^ source, EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnChanged : obj * EventArgs -&gt; unit" Usage="domainUpDown.OnChanged (source, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="source">The source of the event.</param>
        <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DomainUpDown.SelectedItemChanged" /> event.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSelectedItemChanged">
      <MemberSignature Language="C#" Value="protected void OnSelectedItemChanged (object source, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnSelectedItemChanged(object source, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DomainUpDown.OnSelectedItemChanged(System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnSelectedItemChanged (source As Object, e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnSelectedItemChanged(System::Object ^ source, EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.OnSelectedItemChanged : obj * EventArgs -&gt; unit" Usage="domainUpDown.OnSelectedItemChanged (source, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="source">The source of the event.</param>
        <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DomainUpDown.SelectedItemChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При возникновении события через делегат вызывается обработчик события. Дополнительные сведения см. в разделе [обработка и вызов событий](~/docs/standard/events/index.md).  
  
 Метод <xref:System.Windows.Forms.DomainUpDown.OnSelectedItemChanged%2A> также позволяет производным классам обрабатывать событие, не присоединяя делегат. Это предпочтительная методика обработки событий в производном классе.  
  
   
  
## Examples  
 В следующем примере кода создает и инициализирует <xref:System.Windows.Forms.DomainUpDown> элемента управления. Пример позволяет настроить некоторые из его свойств и создать коллекцию строк, отображаемых в регуляторе (также известный как элемент управления "вверх вниз"). Предполагается, что <xref:System.Windows.Forms.TextBox>, <xref:System.Windows.Forms.CheckBox>, и <xref:System.Windows.Forms.Button> уже созданы в форме. Также предполагается, что у вас есть переменную-член на уровне класса, объявленные как 32-разрядное знаковое целое число с именем `myCounter`. Можно ввести строку в текстовом поле и добавьте его в <xref:System.Windows.Forms.DomainUpDown.Items%2A> коллекции при нажатии кнопки. Щелкнув флажок, можно переключать <xref:System.Windows.Forms.DomainUpDown.Sorted%2A> свойства и определить разницу в коллекции элементов в регуляторе.  
  
 [!code-cpp[Classic DomainUpDown Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic DomainUpDown Example/CPP/source.cpp#1)]
 [!code-csharp[Classic DomainUpDown Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic DomainUpDown Example/CS/source.cs#1)]
 [!code-vb[Classic DomainUpDown Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic DomainUpDown Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>При переопределении метода <see cref="M:System.Windows.Forms.DomainUpDown.OnSelectedItemChanged(System.Object,System.EventArgs)" /> в производном классе, не забудьте вызвать базовый класс <see cref="M:System.Windows.Forms.DomainUpDown.OnSelectedItemChanged(System.Object,System.EventArgs)" /> метод, чтобы зарегистрированные делегаты получили событие.</para>
        </block>
        <altmember cref="P:System.Windows.Forms.DomainUpDown.SelectedItem" />
        <altmember cref="E:System.Windows.Forms.DomainUpDown.SelectedItemChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnTextBoxKeyDown">
      <MemberSignature Language="C#" Value="protected override void OnTextBoxKeyDown (object source, System.Windows.Forms.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnTextBoxKeyDown(object source, class System.Windows.Forms.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DomainUpDown.OnTextBoxKeyDown(System.Object,System.Windows.Forms.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnTextBoxKeyDown (source As Object, e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnTextBoxKeyDown(System::Object ^ source, System::Windows::Forms::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnTextBoxKeyDown : obj * System.Windows.Forms.KeyEventArgs -&gt; unit" Usage="domainUpDown.OnTextBoxKeyDown (source, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="e" Type="System.Windows.Forms.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="e">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTextBoxKeyPress">
      <MemberSignature Language="C#" Value="protected override void OnTextBoxKeyPress (object source, System.Windows.Forms.KeyPressEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnTextBoxKeyPress(object source, class System.Windows.Forms.KeyPressEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DomainUpDown.OnTextBoxKeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnTextBoxKeyPress (source As Object, e As KeyPressEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnTextBoxKeyPress(System::Object ^ source, System::Windows::Forms::KeyPressEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnTextBoxKeyPress : obj * System.Windows.Forms.KeyPressEventArgs -&gt; unit" Usage="domainUpDown.OnTextBoxKeyPress (source, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="e" Type="System.Windows.Forms.KeyPressEventArgs" />
      </Parameters>
      <Docs>
        <param name="source">The source of the event.</param>
        <param name="e">A <see cref="T:System.Windows.Forms.KeyPressEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.KeyPress" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если <xref:System.Windows.Forms.UpDownBase.ReadOnly%2A> свойству `true`, <xref:System.Windows.Forms.DomainUpDown> элемент управления выбирает элемент в списке, который начинается с символа. Если несколько элементов в коллекции начинается с один и тот же символ <xref:System.Windows.Forms.DomainUpDown> элемент управления выбирает следующий элемент, который начинается с типизированный знак, начиная с текущей выбранной позиции.  
  
 При возникновении события через делегат вызывается обработчик события. Дополнительные сведения см. в разделе [обработка и вызов событий](~/docs/standard/events/index.md).  
  
 Метод <xref:System.Windows.Forms.DomainUpDown.OnTextBoxKeyPress%2A> также позволяет производным классам обрабатывать событие, не присоединяя делегат. Это предпочтительная методика обработки событий в производном классе.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>При переопределении метода <see cref="M:System.Windows.Forms.DomainUpDown.OnTextBoxKeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)" /> в производном классе, не забудьте вызвать базовый класс <see cref="M:System.Windows.Forms.DomainUpDown.OnTextBoxKeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)" /> метод, чтобы зарегистрированные делегаты получили событие.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Padding">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Padding Padding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Padding Padding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DomainUpDown.Padding" />
      <MemberSignature Language="VB.NET" Value="Public Property Padding As Padding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Padding Padding { System::Windows::Forms::Padding get(); void set(System::Windows::Forms::Padding value); };" />
      <MemberSignature Language="F#" Value="member this.Padding : System.Windows.Forms.Padding with get, set" Usage="System.Windows.Forms.DomainUpDown.Padding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Padding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the spacing between the <see cref="T:System.Windows.Forms.DomainUpDown" /> control's contents and its edges.</summary>
        <value>Значение <see cref="F:System.Windows.Forms.Padding.Empty" /> во всех случаях.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Даже если вы настроите <xref:System.Windows.Forms.DomainUpDown.Padding%2A> свойство, он будет иметь значение <xref:System.Windows.Forms.Padding.Empty>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PaddingChanged">
      <MemberSignature Language="C#" Value="public event EventHandler PaddingChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler PaddingChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DomainUpDown.PaddingChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PaddingChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ PaddingChanged;" />
      <MemberSignature Language="F#" Value="member this.PaddingChanged : EventHandler " Usage="member this.PaddingChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.DomainUpDown.Padding" /> property changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Дополнительные сведения об обработке событий см. в разделе [обработка и вызов событий](~/docs/standard/events/index.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectedIndex">
      <MemberSignature Language="C#" Value="public int SelectedIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SelectedIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DomainUpDown.SelectedIndex" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectedIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int SelectedIndex { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.SelectedIndex : int with get, set" Usage="System.Windows.Forms.DomainUpDown.SelectedIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(-1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the index value of the selected item.</summary>
        <value>Отсчитываемое от нуля значение индекса для выделенного элемента. Значение по умолчанию — -1.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.DomainUpDown.SelectedIndex%2A> Свойство содержит значение индекса элемента в коллекции, выбранное в настоящий момент в регуляторе (также известный как элемент управления "вверх вниз"). Элементы коллекции может быть переназначенные новые значения индекса, если <xref:System.Windows.Forms.DomainUpDown.Sorted%2A> свойство было изменено с `false` для `true`. Как коллекции повторно сортируется в алфавитном порядке, элементам назначается новое значение индекса.  
  
> [!NOTE]
>  Если пользователь ввел в регуляторе элемент или элемент не выбран, <xref:System.Windows.Forms.DomainUpDown.SelectedIndex%2A> значение будет равно -1, значение по умолчанию.  
  
   
  
## Examples  
 В следующем примере кода создает и инициализирует <xref:System.Windows.Forms.DomainUpDown> элемента управления. Пример позволяет настроить некоторые из его свойств и создать коллекцию строк, отображаемых в регуляторе. Предполагается, что <xref:System.Windows.Forms.TextBox>, <xref:System.Windows.Forms.CheckBox>, и <xref:System.Windows.Forms.Button> уже созданы в форме. Также предполагается, что у вас есть переменную-член на уровне класса, объявленные как 32-разрядное знаковое целое число с именем `myCounter`. Можно ввести строку в текстовом поле и добавьте его в <xref:System.Windows.Forms.DomainUpDown.Items%2A> коллекции при нажатии кнопки. Щелкнув флажок, можно переключать <xref:System.Windows.Forms.DomainUpDown.Sorted%2A> свойства и определить разницу в коллекции элементов в регуляторе.  
  
 [!code-cpp[Classic DomainUpDown Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic DomainUpDown Example/CPP/source.cpp#1)]
 [!code-csharp[Classic DomainUpDown Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic DomainUpDown Example/CS/source.cs#1)]
 [!code-vb[Classic DomainUpDown Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic DomainUpDown Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The assigned value is less than the default, -1.  -or-  The assigned value is greater than the <see cref="P:System.Windows.Forms.DomainUpDown.Items" /> count.</exception>
        <altmember cref="P:System.Windows.Forms.DomainUpDown.SelectedItem" />
      </Docs>
    </Member>
    <Member MemberName="SelectedItem">
      <MemberSignature Language="C#" Value="public object SelectedItem { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SelectedItem" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DomainUpDown.SelectedItem" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectedItem As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ SelectedItem { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SelectedItem : obj with get, set" Usage="System.Windows.Forms.DomainUpDown.SelectedItem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the selected item based on the index value of the selected item in the collection.</summary>
        <value>На основе выбранного элемента <see cref="P:System.Windows.Forms.DomainUpDown.SelectedIndex" /> значение. Значение по умолчанию — <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если это свойство имеет значение, значение проверяется на один из элементов в коллекции и <xref:System.Windows.Forms.DomainUpDown.SelectedIndex%2A> свойству присваивается соответствующее значение индекса.  
  
   
  
## Examples  
 В следующем примере кода создает и инициализирует <xref:System.Windows.Forms.DomainUpDown> элемента управления. Пример позволяет настроить некоторые из его свойств и создать коллекцию строк, отображаемых в регуляторе (также известный как элемент управления "вверх вниз"). Предполагается, что <xref:System.Windows.Forms.TextBox>, <xref:System.Windows.Forms.CheckBox>, и <xref:System.Windows.Forms.Button> уже созданы в форме. Также предполагается, что у вас есть переменную-член на уровне класса, объявленные как 32-разрядное знаковое целое число с именем `myCounter`. Можно ввести строку в текстовом поле и добавьте его в <xref:System.Windows.Forms.DomainUpDown.Items%2A> коллекции при нажатии кнопки. Щелкнув флажок, можно переключать <xref:System.Windows.Forms.DomainUpDown.Sorted%2A> свойства и определить разницу в коллекции элементов в регуляторе.  
  
 [!code-cpp[Classic DomainUpDown Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic DomainUpDown Example/CPP/source.cpp#1)]
 [!code-csharp[Classic DomainUpDown Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic DomainUpDown Example/CS/source.cs#1)]
 [!code-vb[Classic DomainUpDown Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic DomainUpDown Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DomainUpDown.SelectedIndex" />
      </Docs>
    </Member>
    <Member MemberName="SelectedItemChanged">
      <MemberSignature Language="C#" Value="public event EventHandler SelectedItemChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SelectedItemChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DomainUpDown.SelectedItemChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SelectedItemChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ SelectedItemChanged;" />
      <MemberSignature Language="F#" Value="member this.SelectedItemChanged : EventHandler " Usage="member this.SelectedItemChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the <see cref="P:System.Windows.Forms.DomainUpDown.SelectedItem" /> property has been changed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Для <xref:System.Windows.Forms.DomainUpDown.SelectedItemChanged> произойдет событие, <xref:System.Windows.Forms.DomainUpDown.SelectedItem%2A> в коде, можно изменить свойство, пользователем, введя новое значение или щелчок элемента управления вверх или вниз.  
  
   
  
## Examples  
 В следующем примере кода показано использование этого элемента. В примере обработчик событий сообщает о вхождение <xref:System.Windows.Forms.DomainUpDown.SelectedItemChanged> событий. Этот отчет позволяет выяснить, когда происходит событие и может оказаться полезным при отладке. Чтобы создать отчет для нескольких событий или событий, которые происходят часто, рассмотрите возможность замены <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> с <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> или добавлении сообщения в многострочном <xref:System.Windows.Forms.TextBox>.  
  
 Чтобы запустить пример кода, вставьте его в проект, который содержит экземпляр типа <xref:System.Windows.Forms.DomainUpDown> с именем `DomainUpDown1`. Убедитесь, что обработчик событий, связанный с <xref:System.Windows.Forms.DomainUpDown.SelectedItemChanged> событий.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#381](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#381)]
 [!code-vb[System.Windows.Forms.EventExamples#381](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#381)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DomainUpDown.SelectedItem" />
        <altmember cref="M:System.Windows.Forms.DomainUpDown.UpButton" />
        <altmember cref="M:System.Windows.Forms.DomainUpDown.DownButton" />
      </Docs>
    </Member>
    <Member MemberName="Sorted">
      <MemberSignature Language="C#" Value="public bool Sorted { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Sorted" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DomainUpDown.Sorted" />
      <MemberSignature Language="VB.NET" Value="Public Property Sorted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Sorted { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Sorted : bool with get, set" Usage="System.Windows.Forms.DomainUpDown.Sorted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the item collection is sorted.</summary>
        <value>
          <see langword="true" /> Если коллекция элементов отсортирована; в противном случае <see langword="false" />. Значение по умолчанию — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Когда <xref:System.Windows.Forms.DomainUpDown.Sorted%2A> присваивается `true`, коллекция сортируется в алфавитном порядке.  
  
   
  
## Examples  
 В следующем примере кода создает и инициализирует <xref:System.Windows.Forms.DomainUpDown> элемента управления. Пример позволяет настроить некоторые из его свойств и создать коллекцию строк, отображаемых в регуляторе (также известный как элемент управления "вверх вниз"). Предполагается, что <xref:System.Windows.Forms.TextBox>, <xref:System.Windows.Forms.CheckBox>, и <xref:System.Windows.Forms.Button> уже созданы в форме. Также предполагается, что у вас есть переменную-член на уровне класса, объявленные как 32-разрядное знаковое целое число с именем `myCounter`. Можно ввести строку в текстовом поле и добавьте его в <xref:System.Windows.Forms.DomainUpDown.Items%2A> коллекции при нажатии кнопки. Щелкнув флажок, можно переключать <xref:System.Windows.Forms.DomainUpDown.Sorted%2A> свойства и определить разницу в коллекции элементов в регуляторе.  
  
 [!code-cpp[Classic DomainUpDown Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic DomainUpDown Example/CPP/source.cpp#1)]
 [!code-csharp[Classic DomainUpDown Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic DomainUpDown Example/CS/source.cs#1)]
 [!code-vb[Classic DomainUpDown Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic DomainUpDown Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DomainUpDown.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="abstract member ToString : unit -&gt; string&#xA;override this.ToString : unit -&gt; string" Usage="domainUpDown.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a string that represents the <see cref="T:System.Windows.Forms.DomainUpDown" /> control.</summary>
        <returns>A string that represents the current <see cref="T:System.Windows.Forms.DomainUpDown" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Возвращаемая строка содержит тип и значения для <xref:System.Collections.ArrayList.Count%2A> и <xref:System.Windows.Forms.DomainUpDown.SelectedIndex%2A> свойства.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpButton">
      <MemberSignature Language="C#" Value="public override void UpButton ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void UpButton() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DomainUpDown.UpButton" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub UpButton ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void UpButton();" />
      <MemberSignature Language="F#" Value="override this.UpButton : unit -&gt; unit" Usage="domainUpDown.UpButton " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Displays the previous item in the collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 По мере продвижения по коллекции элементов в <xref:System.Windows.Forms.DomainUpDown> управление с помощью свойств со стрелкой вверх, будет достигнут первый элемент в коллекции. Если вы продолжите, и <xref:System.Windows.Forms.DomainUpDown.Wrap%2A> присваивается `true`, список будет начать заново с последнего элемента в коллекции и могут быть непрерывной. Это также происходит при перемещении по коллекции с помощью кнопки вниз.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.DomainUpDown.DownButton" />
      </Docs>
    </Member>
    <Member MemberName="UpdateEditText">
      <MemberSignature Language="C#" Value="protected override void UpdateEditText ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void UpdateEditText() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DomainUpDown.UpdateEditText" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub UpdateEditText ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void UpdateEditText();" />
      <MemberSignature Language="F#" Value="override this.UpdateEditText : unit -&gt; unit" Usage="domainUpDown.UpdateEditText " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Updates the text in the spin box (also known as an up-down control) to display the selected item.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Forms.UpDownBase.Text" />
      </Docs>
    </Member>
    <Member MemberName="Wrap">
      <MemberSignature Language="C#" Value="public bool Wrap { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Wrap" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DomainUpDown.Wrap" />
      <MemberSignature Language="VB.NET" Value="Public Property Wrap As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Wrap { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Wrap : bool with get, set" Usage="System.Windows.Forms.DomainUpDown.Wrap" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the collection of items continues to the first or last item if the user continues past the end of the list.</summary>
        <value>
          <see langword="true" /> Если список начинается заново при достижении пользователем начала или конца коллекции; в противном случае <see langword="false" />. Значение по умолчанию — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Когда <xref:System.Windows.Forms.DomainUpDown.Wrap%2A> свойству `true`, при достижении последнего элемента в коллекции и продолжить, список будет начать заново с первого элемента, а также могут быть непрерывной. Это поведение работает в обратном порядке также.  
  
   
  
## Examples  
 В следующем примере кода создает и инициализирует <xref:System.Windows.Forms.DomainUpDown> элемента управления. Пример позволяет настроить некоторые из его свойств и создать коллекцию строк, отображаемых в регуляторе (также известный как элемент управления "вверх вниз"). Предполагается, что <xref:System.Windows.Forms.TextBox>, <xref:System.Windows.Forms.CheckBox>, и <xref:System.Windows.Forms.Button> уже созданы в форме. Также предполагается, что у вас есть переменную-член на уровне класса, объявленные как 32-разрядное знаковое целое число с именем `myCounter`. Можно ввести строку в текстовом поле и добавьте его в <xref:System.Windows.Forms.DomainUpDown.Items%2A> коллекции при нажатии кнопки. Щелкнув флажок, можно переключать <xref:System.Windows.Forms.DomainUpDown.Sorted%2A> свойства и определить разницу в коллекции элементов в регуляторе.  
  
 [!code-cpp[Classic DomainUpDown Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic DomainUpDown Example/CPP/source.cpp#1)]
 [!code-csharp[Classic DomainUpDown Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic DomainUpDown Example/CS/source.cs#1)]
 [!code-vb[Classic DomainUpDown Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic DomainUpDown Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.DomainUpDown.DownButton" />
        <altmember cref="M:System.Windows.Forms.DomainUpDown.UpButton" />
      </Docs>
    </Member>
  </Members>
</Type>