<Type Name="DragEventArgs" FullName="System.Windows.Forms.DragEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="89a871da45924275e9a60693bb8e800093cf6409" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36522827" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DragEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DragEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.DragEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class DragEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class DragEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type DragEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Предоставляет данные для события <see cref="E:System.Windows.Forms.Control.DragDrop" />, <see cref="E:System.Windows.Forms.Control.DragEnter" /> или <see cref="E:System.Windows.Forms.Control.DragOver" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Control.DragDrop> Событие возникает, когда пользователь завершает операцию перетаскивания и вставки, перетаскивания объекта на элемент управления и помещения его в элемент управления, не отпуская кнопку мыши. <xref:System.Windows.Forms.Control.DragEnter> Событие происходит, когда пользователь перемещает указатель мыши на элемент управления при перетаскивании объекта с помощью мыши. <xref:System.Windows.Forms.Control.DragOver> Событие происходит, когда пользователь перемещает указатель мыши над элементом управления при перетаскивании объекта с помощью мыши.  
  
 Объект <xref:System.Windows.Forms.DragEventArgs> объект определяет любые данные, связанные с этим событием; текущее состояние клавиш SHIFT, CTRL и ALT, положение указателя мыши, и эффектов перетаскивания и вставки допустимый источник и цель события перетаскивания.  
  
 Сведения о модели событий см. в разделе [обработка и вызов событий](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 В следующем примере демонстрируется операции перетаскивания и вставки между двумя <xref:System.Windows.Forms.ListBox> элементов управления. В примере вызывается <xref:System.Windows.Forms.Control.DoDragDrop%2A> метод, когда начинается операция перетаскивания. Операция перетаскивания запускается, если указатель мыши переместился более чем <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> относительно положения мыши во время <xref:System.Windows.Forms.Control.MouseDown> событий. <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> Метод используется для определения индекса элемента во время `MouseDown` событий.  
  
 В примере также показано использование пользовательских курсоров для операции перетаскивания и вставки. В примере предполагается, что два файла курсора, `3dwarro.cur` и `3dwno.cur`, существует в каталоге приложения для пользовательских перетаскивания и запрет перетаскивания курсоров, соответственно. Пользовательские курсоры будут использоваться при `UseCustomCursorsCheck` <xref:System.Windows.Forms.CheckBox> проверяется. Пользовательские курсоры задаются в <xref:System.Windows.Forms.Control.GiveFeedback> обработчика событий.  
  
 Состояние клавиатуры оценивается в <xref:System.Windows.Forms.Control.DragOver> обработчик событий для правого `ListBox`, чтобы определить, каким будет операции перетаскивания на основе состояния клавиш SHIFT, CTRL, ALT или CTRL + ALT. Расположение в `ListBox` где перетаскивается также определяется во время `DragOver` событий. Если данные для удаления не `String`, то <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> равно <xref:System.Windows.Forms.DragDropEffects.None?displayProperty=nameWithType>. Наконец, состояние удаления отображается в `DropLocationLabel` <xref:System.Windows.Forms.Label>.  
  
 Перетаскиваемые данные для правого `ListBox` определяется в <xref:System.Windows.Forms.Control.DragDrop> обработчик событий и `String` значение добавляется в соответствующее место в `ListBox`. Если операции перетаскивания перемещается за пределы формы, то отмены операции перетаскивания и вставки в <xref:System.Windows.Forms.Control.QueryContinueDrag> обработчика событий.  
  
 Этот фрагмент кода демонстрирует использование <xref:System.Windows.Forms.DragEventArgs> класса. В разделе <xref:System.Windows.Forms.Control.DoDragDrop%2A> метод полный пример кода.  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#4)]  
  
 В следующем примере показан способ <xref:System.Windows.Forms.DragEventArgs> передаются между исходной и целевой объект операции перетаскивания и вставки. В этом примере <xref:System.Windows.Forms.ListBox> управления является источником данных и <xref:System.Windows.Forms.RichTextBox> управления является целевым. Предполагается, что <xref:System.Windows.Forms.ListBox> элемент управления был заполнен список допустимых имен файлов. Когда пользователь перетаскивает одно из отображаемых имен файлов из <xref:System.Windows.Forms.ListBox> управления <xref:System.Windows.Forms.RichTextBox> открытии элемента управления, файл, указанный в имени файла.  
  
 Запустить операцию в <xref:System.Windows.Forms.ListBox> MouseDown-событие элемента управления. В <xref:System.Windows.Forms.RichTextBox.DragEnter> обработчик событий в этом примере <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> метод, чтобы проверить, что данные в формате, <xref:System.Windows.Forms.RichTextBox> может отображать элемент управления, а затем задает <xref:System.Windows.Forms.DragDropEffects> свойство, чтобы указать эти данные должны быть скопированы из системы управления версиями к целевому элементу управления. Наконец <xref:System.Windows.Forms.RichTextBox> использует обработчик событий для элемента управления DragDrop <xref:System.Windows.Forms.IDataObject.GetData%2A> метод для извлечения файла, чтобы открыть.  
  
 [!code-cpp[RichTextDragDrop#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextDragDrop/CPP/form1.cpp#1)]
 [!code-csharp[RichTextDragDrop#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextDragDrop/CS/form1.cs#1)]
 [!code-vb[RichTextDragDrop#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextDragDrop/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.DragDropEffects" />
    <altmember cref="M:System.Windows.Forms.Control.OnDragDrop(System.Windows.Forms.DragEventArgs)" />
    <altmember cref="E:System.Windows.Forms.Control.DragDrop" />
    <altmember cref="M:System.Windows.Forms.Control.OnDragEnter(System.Windows.Forms.DragEventArgs)" />
    <altmember cref="E:System.Windows.Forms.Control.DragEnter" />
    <altmember cref="M:System.Windows.Forms.Control.OnDragOver(System.Windows.Forms.DragEventArgs)" />
    <altmember cref="E:System.Windows.Forms.Control.DragOver" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DragEventArgs (System.Windows.Forms.IDataObject data, int keyState, int x, int y, System.Windows.Forms.DragDropEffects allowedEffect, System.Windows.Forms.DragDropEffects effect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.IDataObject data, int32 keyState, int32 x, int32 y, valuetype System.Windows.Forms.DragDropEffects allowedEffect, valuetype System.Windows.Forms.DragDropEffects effect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DragEventArgs.#ctor(System.Windows.Forms.IDataObject,System.Int32,System.Int32,System.Int32,System.Windows.Forms.DragDropEffects,System.Windows.Forms.DragDropEffects)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (data As IDataObject, keyState As Integer, x As Integer, y As Integer, allowedEffect As DragDropEffects, effect As DragDropEffects)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DragEventArgs(System::Windows::Forms::IDataObject ^ data, int keyState, int x, int y, System::Windows::Forms::DragDropEffects allowedEffect, System::Windows::Forms::DragDropEffects effect);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.DragEventArgs : System.Windows.Forms.IDataObject * int * int * int * System.Windows.Forms.DragDropEffects * System.Windows.Forms.DragDropEffects -&gt; System.Windows.Forms.DragEventArgs" Usage="new System.Windows.Forms.DragEventArgs (data, keyState, x, y, allowedEffect, effect)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="data" Type="System.Windows.Forms.IDataObject" />
        <Parameter Name="keyState" Type="System.Int32" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="allowedEffect" Type="System.Windows.Forms.DragDropEffects" />
        <Parameter Name="effect" Type="System.Windows.Forms.DragDropEffects" />
      </Parameters>
      <Docs>
        <param name="data">Данные, связанные с этим событием.</param>
        <param name="keyState">Текущее состояние клавиш SHIFT, CTRL и ALT.</param>
        <param name="x">Координата курсора мыши в пикселях по оси X.</param>
        <param name="y">Координата курсора мыши в пикселях по оси Y.</param>
        <param name="allowedEffect">Одно из значений перечисления <see cref="T:System.Windows.Forms.DragDropEffects" />.</param>
        <param name="effect">Одно из значений перечисления <see cref="T:System.Windows.Forms.DragDropEffects" />.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Windows.Forms.DragEventArgs" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Forms.DragDropEffects" />
        <altmember cref="T:System.Windows.Forms.IDataObject" />
      </Docs>
    </Member>
    <Member MemberName="AllowedEffect">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DragDropEffects AllowedEffect { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DragDropEffects AllowedEffect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DragEventArgs.AllowedEffect" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AllowedEffect As DragDropEffects" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DragDropEffects AllowedEffect { System::Windows::Forms::DragDropEffects get(); };" />
      <MemberSignature Language="F#" Value="member this.AllowedEffect : System.Windows.Forms.DragDropEffects" Usage="System.Windows.Forms.DragEventArgs.AllowedEffect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DragDropEffects</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, указывающее, какие операции перетаскивания разрешены исходным элементом управления (источником) события перетаскивания.</summary>
        <value>Одно из значений перечисления <see cref="T:System.Windows.Forms.DragDropEffects" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Когда элемент управления инициирует операцию перетаскивания и вставки путем вызова <xref:System.Windows.Forms.Control.DoDragDrop%2A?displayProperty=nameWithType> метод, он определяет допустимый эффект этой операции. Например при перетаскивании файла из источника, если файл доступен только для чтения (или с носителя памяти, доступной только для чтения, например компакт-ДИСК), источник покажет файл можно скопировать, но не переданы в целевой объект.  
  
 Перед попыткой выполнения операции с перенесенными данными, необходимо проверить это свойство, чтобы убедиться, что эта операция разрешена.  
  
   
  
## Examples  
 В следующем примере демонстрируется операции перетаскивания и вставки между двумя <xref:System.Windows.Forms.ListBox> элементов управления. В примере вызывается <xref:System.Windows.Forms.Control.DoDragDrop%2A> метод, когда начинается операция перетаскивания. Операция перетаскивания запускается, если указатель мыши переместился более чем <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> относительно положения мыши во время <xref:System.Windows.Forms.Control.MouseDown> событий. <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> Метод используется для определения индекса элемента во время `MouseDown` событий.  
  
 В примере также показано использование пользовательских курсоров для операции перетаскивания и вставки. В примере предполагается, что два файла курсора, `3dwarro.cur` и `3dwno.cur`, существует в каталоге приложения для пользовательских перетаскивания и запрет перетаскивания курсоров, соответственно. Пользовательские курсоры будут использоваться при `UseCustomCursorsCheck` <xref:System.Windows.Forms.CheckBox> проверяется. Пользовательские курсоры задаются в <xref:System.Windows.Forms.Control.GiveFeedback> обработчика событий.  
  
 Состояние клавиатуры оценивается в <xref:System.Windows.Forms.Control.DragOver> обработчик событий для правого `ListBox`, чтобы определить, каким будет операции перетаскивания на основе состояния клавиш SHIFT, CTRL, ALT или CTRL + ALT. Расположение в `ListBox` где перетаскивается также определяется во время `DragOver` событий. Если данные для удаления не `String`, то <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> равно <xref:System.Windows.Forms.DragDropEffects.None?displayProperty=nameWithType>. Наконец, состояние удаления отображается в `DropLocationLabel` <xref:System.Windows.Forms.Label>.  
  
 Перетаскиваемые данные для правого `ListBox` определяется в <xref:System.Windows.Forms.Control.DragDrop> обработчик событий и `String` значение добавляется в соответствующее место в `ListBox`. Если операции перетаскивания перемещается за пределы формы, то отмены операции перетаскивания и вставки в <xref:System.Windows.Forms.Control.QueryContinueDrag> обработчика событий.  
  
 Этот фрагмент кода демонстрирует использование <xref:System.Windows.Forms.DragEventArgs> класса. В разделе <xref:System.Windows.Forms.Control.DoDragDrop%2A> метод полный пример кода.  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DragDropEffects" />
      </Docs>
    </Member>
    <Member MemberName="Data">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.IDataObject Data { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.IDataObject Data" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DragEventArgs.Data" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Data As IDataObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::IDataObject ^ Data { System::Windows::Forms::IDataObject ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Data : System.Windows.Forms.IDataObject" Usage="System.Windows.Forms.DragEventArgs.Data" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.IDataObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает интерфейс <see cref="T:System.Windows.Forms.IDataObject" />, содержащий данные, связанные с этим событием.</summary>
        <value>Данные, связанные с этим событием.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В теле обработчика событий, можно использовать <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> метод для определения соответствия требованиям форматирования элемента управления, на котором перетаскиваемые данные. Кроме того, можно указать, следует ли преобразовывать данные в соответствии с требованиями формата. Если перетаскиваемые данные требованиям к формату, используйте <xref:System.Windows.Forms.IDataObject.GetData%2A> метод для извлечения данных.  
  
   
  
## Examples  
 В следующем примере демонстрируется операции перетаскивания и вставки между двумя <xref:System.Windows.Forms.ListBox> элементов управления. В примере вызывается <xref:System.Windows.Forms.Control.DoDragDrop%2A> метод, когда начинается операция перетаскивания. Операция перетаскивания запускается, если указатель мыши переместился более чем <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> относительно положения мыши во время <xref:System.Windows.Forms.Control.MouseDown> событий. <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> Метод используется для определения индекса элемента во время `MouseDown` событий.  
  
 В примере также показано использование пользовательских курсоров для операции перетаскивания и вставки. В примере предполагается, что два файла курсора, `3dwarro.cur` и `3dwno.cur`, существует в каталоге приложения для пользовательских перетаскивания и запрет перетаскивания курсоров, соответственно. Пользовательские курсоры будут использоваться при `UseCustomCursorsCheck` <xref:System.Windows.Forms.CheckBox> проверяется. Пользовательские курсоры задаются в <xref:System.Windows.Forms.Control.GiveFeedback> обработчика событий.  
  
 Состояние клавиатуры оценивается в <xref:System.Windows.Forms.Control.DragOver> обработчик событий для правого `ListBox`, чтобы определить, каким будет операции перетаскивания на основе состояния клавиш SHIFT, CTRL, ALT или CTRL + ALT. Расположение в `ListBox` где перетаскивается также определяется во время `DragOver` событий. Если данные для удаления не `String`, то <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> равно <xref:System.Windows.Forms.DragDropEffects.None?displayProperty=nameWithType>. Наконец, состояние удаления отображается в `DropLocationLabel` <xref:System.Windows.Forms.Label>.  
  
 Перетаскиваемые данные для правого `ListBox` определяется в <xref:System.Windows.Forms.Control.DragDrop> обработчик событий и `String` значение добавляется в соответствующее место в `ListBox`. Если операции перетаскивания перемещается за пределы формы, то отмены операции перетаскивания и вставки в <xref:System.Windows.Forms.Control.QueryContinueDrag> обработчика событий.  
  
 Этот фрагмент кода демонстрирует использование <xref:System.Windows.Forms.DragEventArgs> класса. В разделе <xref:System.Windows.Forms.Control.DoDragDrop%2A> метод полный пример кода.  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.IDataObject" />
      </Docs>
    </Member>
    <Member MemberName="Effect">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DragDropEffects Effect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DragDropEffects Effect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DragEventArgs.Effect" />
      <MemberSignature Language="VB.NET" Value="Public Property Effect As DragDropEffects" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DragDropEffects Effect { System::Windows::Forms::DragDropEffects get(); void set(System::Windows::Forms::DragDropEffects value); };" />
      <MemberSignature Language="F#" Value="member this.Effect : System.Windows.Forms.DragDropEffects with get, set" Usage="System.Windows.Forms.DragEventArgs.Effect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DragDropEffects</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает эффект сброса в операции перетаскивания.</summary>
        <value>Одно из значений перечисления <see cref="T:System.Windows.Forms.DragDropEffects" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 По умолчанию применяемый эффект определяет курсор мыши для приемника операции перетаскивания и вставки. Это полезно для предоставления отзывов пользователю на операцию, которая будет выполнена. Например, если нажать клавишу CTRL при перетаскивании файла из источника, укажите <xref:System.Windows.Forms.DragDropEffects.Copy?displayProperty=nameWithType> для указания, будет предпринята попытка выполнения операции копирования.  
  
 Чтобы использовать пользовательские курсоры для операции перетаскивания, в разделе <xref:System.Windows.Forms.GiveFeedbackEventArgs.UseDefaultCursors%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 В следующем примере демонстрируется операции перетаскивания и вставки между двумя <xref:System.Windows.Forms.ListBox> элементов управления. В примере вызывается <xref:System.Windows.Forms.Control.DoDragDrop%2A> метод, когда начинается операция перетаскивания. Операция перетаскивания запускается, если указатель мыши переместился более чем <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> относительно положения мыши во время <xref:System.Windows.Forms.Control.MouseDown> событий. <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> Метод используется для определения индекса элемента во время `MouseDown` событий.  
  
 В примере также показано использование пользовательских курсоров для операции перетаскивания и вставки. В примере предполагается, что два файла курсора, `3dwarro.cur` и `3dwno.cur`, существует в каталоге приложения для пользовательских перетаскивания и запрет перетаскивания курсоров, соответственно. Пользовательские курсоры будут использоваться при `UseCustomCursorsCheck` <xref:System.Windows.Forms.CheckBox> проверяется. Пользовательские курсоры задаются в <xref:System.Windows.Forms.Control.GiveFeedback> обработчика событий.  
  
 Состояние клавиатуры оценивается в <xref:System.Windows.Forms.Control.DragOver> обработчик событий для правого `ListBox`, чтобы определить, каким будет операции перетаскивания на основе состояния клавиш SHIFT, CTRL, ALT или CTRL + ALT. Расположение в `ListBox` где перетаскивается также определяется во время `DragOver` событий. Если данные для удаления не `String`, то <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> равно <xref:System.Windows.Forms.DragDropEffects.None?displayProperty=nameWithType>. Наконец, состояние удаления отображается в `DropLocationLabel` <xref:System.Windows.Forms.Label>.  
  
 Перетаскиваемые данные для правого `ListBox` определяется в <xref:System.Windows.Forms.Control.DragDrop> обработчик событий и `String` значение добавляется в соответствующее место в `ListBox`. Если операции перетаскивания перемещается за пределы формы, то отмены операции перетаскивания и вставки в <xref:System.Windows.Forms.Control.QueryContinueDrag> обработчика событий.  
  
 Этот фрагмент кода демонстрирует использование <xref:System.Windows.Forms.DragEventArgs> класса. В разделе <xref:System.Windows.Forms.Control.DoDragDrop%2A> метод полный пример кода.  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DragDropEffects" />
      </Docs>
    </Member>
    <Member MemberName="KeyState">
      <MemberSignature Language="C#" Value="public int KeyState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 KeyState" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DragEventArgs.KeyState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property KeyState As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int KeyState { int get(); };" />
      <MemberSignature Language="F#" Value="member this.KeyState : int" Usage="System.Windows.Forms.DragEventArgs.KeyState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает текущее состояние клавиш SHIFT, CTRL и ALT, а также состояние кнопок мыши.</summary>
        <value>Текущее состояние клавиш SHIFT, CTRL и ALT, а также кнопок мыши.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Можно сделать эффект операции перетаскивания и вставки к состоянию определенного ключа. Например можно скопировать или переместить данные в зависимости от того, является ли при нажатии клавиш SHIFT или CTRL во время операции перетаскивания и вставки.  
  
 Биты, которые заданы в <xref:System.Windows.Forms.DragEventArgs.KeyState%2A> свойства определяют клавиши или кнопки мыши, которые были нажаты во время операции. Например, при нажатии левой кнопки мыши первый бит в <xref:System.Windows.Forms.DragEventArgs.KeyState%2A> свойству. Побитовый оператор AND можно использовать для проверки состояния клавиш.  
  
 В следующей таблице перечислены значения, которые используются для указанного события.  
  
|Значение|Ключ|  
|-----------|---------|  
|1 (бит 0)|Левая кнопка мыши.|  
|2 (бит 1)|Правая кнопка мыши.|  
|4 (бит 2)|Клавиша SHIFT.|  
|8 (бит 3)|Клавиша CTRL.|  
|16 (бит 4)|Средняя кнопка мыши.|  
|32 (бит 5)|Клавиша ALT.|  
  
   
  
## Examples  
 В следующем примере демонстрируется операции перетаскивания и вставки между двумя <xref:System.Windows.Forms.ListBox> элементов управления. В примере вызывается <xref:System.Windows.Forms.Control.DoDragDrop%2A> метод, когда начинается операция перетаскивания. Операция перетаскивания запускается, если указатель мыши переместился более чем <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> относительно положения мыши во время <xref:System.Windows.Forms.Control.MouseDown> событий. <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> Метод используется для определения индекса элемента во время `MouseDown` событий.  
  
 В примере также показано использование пользовательских курсоров для операции перетаскивания и вставки. В примере предполагается, что два файла курсора, `3dwarro.cur` и `3dwno.cur`, существует в каталоге приложения для пользовательских перетаскивания и запрет перетаскивания курсоров, соответственно. Пользовательские курсоры будут использоваться при `UseCustomCursorsCheck` <xref:System.Windows.Forms.CheckBox> проверяется. Пользовательские курсоры задаются в <xref:System.Windows.Forms.Control.GiveFeedback> обработчика событий.  
  
 Состояние клавиатуры оценивается в <xref:System.Windows.Forms.Control.DragOver> обработчик событий для правого `ListBox`, чтобы определить, каким будет операции перетаскивания на основе состояния клавиш SHIFT, CTRL, ALT или CTRL + ALT. Расположение в `ListBox` где перетаскивается также определяется во время `DragOver` событий. Если данные для удаления не `String`, то <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> равно <xref:System.Windows.Forms.DragDropEffects.None?displayProperty=nameWithType>. Наконец, состояние удаления отображается в `DropLocationLabel` <xref:System.Windows.Forms.Label>.  
  
 Перетаскиваемые данные для правого `ListBox` определяется в <xref:System.Windows.Forms.Control.DragDrop> обработчик событий и `String` значение добавляется в соответствующее место в `ListBox`. Если операции перетаскивания перемещается за пределы формы, то отмены операции перетаскивания и вставки в <xref:System.Windows.Forms.Control.QueryContinueDrag> обработчика событий.  
  
 Этот фрагмент кода демонстрирует использование <xref:System.Windows.Forms.DragEventArgs> класса. В разделе <xref:System.Windows.Forms.Control.DoDragDrop%2A> метод полный пример кода.  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="X">
      <MemberSignature Language="C#" Value="public int X { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 X" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DragEventArgs.X" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property X As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int X { int get(); };" />
      <MemberSignature Language="F#" Value="member this.X : int" Usage="System.Windows.Forms.DragEventArgs.X" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает координату по оси X для указателя мыши в экранных координатах.</summary>
        <value>Координата указателя мыши по оси X в пикселях.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере демонстрируется операции перетаскивания и вставки между двумя <xref:System.Windows.Forms.ListBox> элементов управления. В примере вызывается <xref:System.Windows.Forms.Control.DoDragDrop%2A> метод, когда начинается операция перетаскивания. Операция перетаскивания запускается, если указатель мыши переместился более чем <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> относительно положения мыши во время <xref:System.Windows.Forms.Control.MouseDown> событий. <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> Метод используется для определения индекса элемента во время `MouseDown` событий.  
  
 В примере также показано использование пользовательских курсоров для операции перетаскивания и вставки. В примере предполагается, что два файла курсора, `3dwarro.cur` и `3dwno.cur`, существует в каталоге приложения для пользовательских перетаскивания и запрет перетаскивания курсоров, соответственно. Пользовательские курсоры будут использоваться при `UseCustomCursorsCheck` <xref:System.Windows.Forms.CheckBox> проверяется. Пользовательские курсоры задаются в <xref:System.Windows.Forms.Control.GiveFeedback> обработчика событий.  
  
 Состояние клавиатуры оценивается в <xref:System.Windows.Forms.Control.DragOver> обработчик событий для правого `ListBox`, чтобы определить, каким будет операции перетаскивания на основе состояния клавиш SHIFT, CTRL, ALT или CTRL + ALT. Расположение в `ListBox` где перетаскивается также определяется во время `DragOver` событий. Если данные для удаления не `String`, то <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> равно <xref:System.Windows.Forms.DragDropEffects.None?displayProperty=nameWithType>. Наконец, состояние удаления отображается в `DropLocationLabel` <xref:System.Windows.Forms.Label>.  
  
 Перетаскиваемые данные для правого `ListBox` определяется в <xref:System.Windows.Forms.Control.DragDrop> обработчик событий и `String` значение добавляется в соответствующее место в `ListBox`. Если операции перетаскивания перемещается за пределы формы, то отмены операции перетаскивания и вставки в <xref:System.Windows.Forms.Control.QueryContinueDrag> обработчика событий.  
  
 Этот фрагмент кода демонстрирует использование <xref:System.Windows.Forms.DragEventArgs> класса. В разделе <xref:System.Windows.Forms.Control.DoDragDrop%2A> метод полный пример кода.  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DragEventArgs.Y" />
      </Docs>
    </Member>
    <Member MemberName="Y">
      <MemberSignature Language="C#" Value="public int Y { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Y" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DragEventArgs.Y" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Y As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Y { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Y : int" Usage="System.Windows.Forms.DragEventArgs.Y" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает координату указателя мыши по оси Y в экранных координатах.</summary>
        <value>Координата указателя мыши по оси Y в пикселях.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере демонстрируется операции перетаскивания и вставки между двумя <xref:System.Windows.Forms.ListBox> элементов управления. В примере вызывается <xref:System.Windows.Forms.Control.DoDragDrop%2A> метод, когда начинается операция перетаскивания. Операция перетаскивания запускается, если указатель мыши переместился более чем <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> относительно положения мыши во время <xref:System.Windows.Forms.Control.MouseDown> событий. <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> Метод используется для определения индекса элемента во время `MouseDown` событий.  
  
 В примере также показано использование пользовательских курсоров для операции перетаскивания и вставки. В примере предполагается, что два файла курсора, `3dwarro.cur` и `3dwno.cur`, существует в каталоге приложения для пользовательских перетаскивания и запрет перетаскивания курсоров, соответственно. Пользовательские курсоры будут использоваться при `UseCustomCursorsCheck` <xref:System.Windows.Forms.CheckBox> проверяется. Пользовательские курсоры задаются в <xref:System.Windows.Forms.Control.GiveFeedback> обработчика событий.  
  
 Состояние клавиатуры оценивается в <xref:System.Windows.Forms.Control.DragOver> обработчик событий для правого `ListBox`, чтобы определить, каким будет операции перетаскивания на основе состояния клавиш SHIFT, CTRL, ALT или CTRL + ALT. Расположение в `ListBox` где перетаскивается также определяется во время `DragOver` событий. Если данные для удаления не `String`, то <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> равно <xref:System.Windows.Forms.DragDropEffects.None?displayProperty=nameWithType>. Наконец, состояние удаления отображается в `DropLocationLabel` <xref:System.Windows.Forms.Label>.  
  
 Перетаскиваемые данные для правого `ListBox` определяется в <xref:System.Windows.Forms.Control.DragDrop> обработчик событий и `String` значение добавляется в соответствующее место в `ListBox`. Если операции перетаскивания перемещается за пределы формы, то отмены операции перетаскивания и вставки в <xref:System.Windows.Forms.Control.QueryContinueDrag> обработчика событий.  
  
 Этот фрагмент кода демонстрирует использование <xref:System.Windows.Forms.DragEventArgs> класса. В разделе <xref:System.Windows.Forms.Control.DoDragDrop%2A> метод полный пример кода.  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DragEventArgs.X" />
      </Docs>
    </Member>
  </Members>
</Type>