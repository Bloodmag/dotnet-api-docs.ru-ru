<Type Name="HtmlWindow" FullName="System.Windows.Forms.HtmlWindow">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c442b5c816d1d289ffc747d7706df5bec7a6b735" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36520864" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class HtmlWindow" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit HtmlWindow extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.HtmlWindow" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class HtmlWindow" />
  <TypeSignature Language="C++ CLI" Value="public ref class HtmlWindow sealed" />
  <TypeSignature Language="F#" Value="type HtmlWindow = class" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Представляет логическое окно, в котором содержится один или несколько экземпляров <see cref="T:System.Windows.Forms.HtmlDocument" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow> не следует путать с понятием окна в Windows Forms или API-интерфейса Win32; имеется не `HWND` или подобного ресурса Windows, соответствующий экземпляр <xref:System.Windows.Forms.HtmlWindow>. Вместо этого <xref:System.Windows.Forms.HtmlWindow> предоставляет высокоуровневое описание расположению документа на пользователя экрана, а также методы для взаимодействия с пользователями, посредством запросами и диалоговым окнам. <xref:System.Windows.Forms.HtmlWindow> действует как логический контейнер для документов веб-страницы и ее метаданные, такие как расположение документа и возможности веб-браузера.  
  
 A Web страницы состоит из одного документа, а также в `FRAMESET` содержащее один или несколько `FRAME` элементов, каждый из которых размещает свой собственный документ. Разработчики используют наборы рамок для отображения логически связанных страниц рядом друг с другом (например, страницы содержимого рядом со страницей переходов). Если страница состоит из одного документа, его можно открыть через <xref:System.Windows.Forms.HtmlWindow.Document%2A> свойство <xref:System.Windows.Forms.HtmlWindow>; Если страница использует кадры, можно получить доступ к их документов через <xref:System.Windows.Forms.HtmlWindow.Frames%2A> коллекцию, которая состоит из одного или нескольких <xref:System.Windows.Forms.HtmlWindow> объектов.  
  
 Если на узле, <xref:System.Windows.Forms.WebBrowser> управления в приложении Windows Forms можно выбрать для взаимодействия с пользователем, использующим стандартные классы Windows Forms, такие как <xref:System.Windows.Forms.Form> или <xref:System.Windows.Forms.MessageBox>, или методы можно использовать для <xref:System.Windows.Forms.HtmlWindow> определенные для этой цели. <xref:System.Windows.Forms.HtmlWindow.Alert%2A> Метод выводит простое диалоговое окно с пользовательским текстом и **ОК** меню. <xref:System.Windows.Forms.HtmlWindow.Prompt%2A> пользователю строку пользовательского текста и поля ввода текста; и <xref:System.Windows.Forms.HtmlWindow.Confirm%2A> выводит диалоговое окно со строкой пользовательского текста и **ОК** и **отменить** кнопки.  
  
 Можно использовать <xref:System.Windows.Forms.HtmlWindow> для открытия новых окон, содержащий новые документы. <xref:System.Windows.Forms.HtmlWindow.Open%2A> Загружает указанный URL-адрес в именованном окне создает его, если он еще не существует, а <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> всегда открывается в окне вновь созданный его URL-адрес.  
  
   
  
## Examples  
 В следующем примере кода содержит два метода. Первый URL-адрес откроется в окне с именем `displayWindow`, который создается с отображается строка состояния. Второй открывается другой URL-адрес в том же окне, но указывает, что должно отображаться только строка размещения. Обратите внимание, что размеры окна и отображаемые элементы управления зависит от на котором сначала открыт URL-адрес. В примере кода требуется наличие формы <xref:System.Windows.Forms.WebBrowser> управления с именем `WebBrowser1`.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#13](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#13)]
 [!code-vb[System.Windows.Forms.HtmlWindow#13](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#13)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Alert">
      <MemberSignature Language="C#" Value="public void Alert (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Alert(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Alert(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Alert (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Alert(System::String ^ message);" />
      <MemberSignature Language="F#" Value="member this.Alert : string -&gt; unit" Usage="htmlWindow.Alert message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Строка <see cref="T:System.String" />, отображаемая в окне сообщения.</param>
        <summary>Отображает окно сообщения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MessageBox> Класс предлагает более мощной версией <xref:System.Windows.Forms.HtmlWindow.Alert%2A> метод.  
  
 Несмотря на то что <xref:System.Windows.Forms.HtmlWindow.Alert%2A> принимает текст в кодировке Юникод в качестве выходных данных запрос сценария Internet Explorer не будут отображаться текст языка нелатинских соответствующим образом на Windows 95, Windows 98, Windows ME или Windows NT из-за ограничений операционной системы. Дополнительные сведения см. в разделе [INFO: Internet Explorer скрипт запрашивает и многобайтовой Кодировки и Юникода](http://support.microsoft.com/default.aspx?scid=kb;en-us;211147).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AttachEventHandler">
      <MemberSignature Language="C#" Value="public void AttachEventHandler (string eventName, EventHandler eventHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AttachEventHandler(string eventName, class System.EventHandler eventHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.AttachEventHandler(System.String,System.EventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AttachEventHandler(System::String ^ eventName, EventHandler ^ eventHandler);" />
      <MemberSignature Language="F#" Value="member this.AttachEventHandler : string * EventHandler -&gt; unit" Usage="htmlWindow.AttachEventHandler (eventName, eventHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventName" Type="System.String" />
        <Parameter Name="eventHandler" Type="System.EventHandler" />
      </Parameters>
      <Docs>
        <param name="eventName">Имя события для обработки.</param>
        <param name="eventHandler">Ссылка на управляемый код, который обрабатывает это событие.</param>
        <summary>Добавляет обработчик событий для именованного события HTML DOM.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Не следует присоединять событие HTML-документ или одного из его объектов, пока не завершится загрузка документа. Является самой ранней этот метод следует вызывать в <xref:System.Windows.Forms.WebBrowser.DocumentCompleted> событие <xref:System.Windows.Forms.WebBrowser> элемента управления.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="htmlWindow.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Закрывает окно.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте <xref:System.Windows.Forms.HtmlWindow.IsClosed%2A> свойство, чтобы определить, если окно уже закрыто. Если окно уже закрыто, этот метод не будет действовать.  
  
 При создании новых окон с помощью <xref:System.Windows.Forms.HtmlWindow.Open%2A> или <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A>, <xref:System.Windows.Forms.HtmlWindow.Close%2A> вызывает объектной модели документов HTML открыть новый экземпляр из Internet Explorer. Если вы не вызываете <xref:System.Windows.Forms.HtmlWindow.Close%2A> на все окна, который вы создали, этот экземпляр из Internet Explorer сможет продолжить работу даже после закрытия приложения.  
  
   
  
## Examples  
 В следующем примере кода открывается окно и закрывается, если пользователь не использовал его в течение пяти минут. В примере кода был написан в предположении, что имеет форму <xref:System.Windows.Forms.WebBrowser> управления с именем `WebBrowser1`, <xref:System.Windows.Forms.Button> с именем `Button1`и <xref:System.Windows.Forms.Timer> класс с именем `Timer1`. Чтобы успешно выполнить этот пример, измените первый аргумент, предоставленный для <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> допустимый URL-адрес.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#9)]
 [!code-vb[System.Windows.Forms.HtmlWindow#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Confirm">
      <MemberSignature Language="C#" Value="public bool Confirm (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Confirm(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Confirm(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Confirm (message As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Confirm(System::String ^ message);" />
      <MemberSignature Language="F#" Value="member this.Confirm : string -&gt; bool" Usage="htmlWindow.Confirm message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Текст, отображаемый для пользователя.</param>
        <summary>Отображает диалоговое окно с сообщением и кнопками для запроса ответа «Да» или «Нет».</summary>
        <returns>Значение <see langword="true" />, если пользователь нажал кнопку **Да**; значение <see langword="false" />, если пользователь нажал кнопку **Нет** или закрыл диалоговое окно.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow.Confirm%2A> отображает модальное диалоговое окно. пользователь не будет иметь доступ к базовой HTML-странице закрывая данным диалоговым окном.  
  
 Несмотря на то что <xref:System.Windows.Forms.HtmlWindow.Confirm%2A> принимает текст в кодировке Юникод в качестве выходных данных запрос сценария Internet Explorer не будут отображаться текст языка нелатинских соответствующим образом на Windows 95, Windows 98, Windows ME или Windows NT из-за ограничений операционной системы. Дополнительные сведения см. в разделе [INFO: Internet Explorer скрипт запрашивает и многобайтовой Кодировки и Юникода](http://support.microsoft.com/default.aspx?scid=kb;en-us;211147).  
  
   
  
## Examples  
 Скопируйте следующий код HTML и сохраните его в форме с названием orderForm.htm:  
  
 `<HTML>`  
  
 `<BODY>`  
  
 `<FORM name="NewOrderForm">`  
  
 `Select Part Type:`  
  
 `<SELECT name="PartType">`  
  
 `<OPTION>AZ-3700`  
  
 `<OPTION>AZ-3701`  
  
 `<OPTION>AZ-3702`  
  
 `<SELECT><br>`  
  
 `Quantity: <INPUT type="text" name="PartQty" size="2" maxsize="2"><br>`  
  
 `Building/Desk:`  
  
 `<INPUT type="text" name="PartBuilding" size="2" maxsize="2"> /`  
  
 `<INPUT type="text" name="PartDesk" size="2" maxsize="2"><p>`  
  
 `<INPUT type="submit" value="Transmit Order">`  
  
 `</FORM>`  
  
 `</BODY>`  
  
 `</HTML>`  
  
 В следующем примере кода отображается <xref:System.Windows.Forms.HtmlWindow.Confirm%2A> диалоговое окно при отправке `NewOrderForm`.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#10)]
 [!code-vb[System.Windows.Forms.HtmlWindow#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DetachEventHandler">
      <MemberSignature Language="C#" Value="public void DetachEventHandler (string eventName, EventHandler eventHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DetachEventHandler(string eventName, class System.EventHandler eventHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.DetachEventHandler(System.String,System.EventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DetachEventHandler(System::String ^ eventName, EventHandler ^ eventHandler);" />
      <MemberSignature Language="F#" Value="member this.DetachEventHandler : string * EventHandler -&gt; unit" Usage="htmlWindow.DetachEventHandler (eventName, eventHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventName" Type="System.String" />
        <Parameter Name="eventHandler" Type="System.EventHandler" />
      </Parameters>
      <Docs>
        <param name="eventName">Имя события для обработки.</param>
        <param name="eventHandler">Ссылка на управляемый код, который обрабатывает это событие.</param>
        <summary>Удаляет именованный обработчик событий.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Document">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlDocument Document { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlDocument Document" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Document" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Document As HtmlDocument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlDocument ^ Document { System::Windows::Forms::HtmlDocument ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Document : System.Windows.Forms.HtmlDocument" Usage="System.Windows.Forms.HtmlWindow.Document" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlDocument</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает HTML-документ, содержащийся в этом окне.</summary>
        <value>Допустимый экземпляр <see cref="T:System.Windows.Forms.HtmlDocument" />, если документ загружен. Если это окно содержит <c>РАМОК</c>, или документ не загружена, будет возвращено <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Как правило, вы получите доступ к <xref:System.Windows.Forms.HtmlWindow.Document%2A> через <xref:System.Windows.Forms.WebBrowser.Document%2A> свойства <xref:System.Windows.Forms.WebBrowser> элемента управления. Используйте это свойство, когда требуется получить доступ к документу в пределах `FRAME` с помощью <xref:System.Windows.Forms.HtmlWindow.Frames%2A> коллекции.  
  
   
  
## Examples  
 В следующем примере кода изучается каждый документ на странице, содержащей кадры и создает таблицу все внешние ссылки с каждой страницы для дальнейшего изучения.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#2)]
 [!code-vb[System.Windows.Forms.HtmlWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DomWindow">
      <MemberSignature Language="C#" Value="public object DomWindow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DomWindow" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.DomWindow" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DomWindow As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DomWindow { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DomWindow : obj" Usage="System.Windows.Forms.HtmlWindow.DomWindow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает неуправляемый интерфейс, оболочкой для которого является этот класс.</summary>
        <value>Объект, который может быть приведен к <see langword="IHTMLWindow2" />, <see langword="IHTMLWindow3" />, или <see langword="IHTMLWindow4" /> указателя.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте базовые указатели неуправляемый интерфейс для модели объекта документа (DOM), чтобы выполнить методам, предоставляемым не <xref:System.Windows.Forms.HtmlWindow>.  
  
 Необходимо добавить указанный неуправляемый MSHTML.dll для использования <xref:System.Windows.Forms.HtmlWindow.DomWindow%2A>. Дополнительные сведения см. в разделе [импорт библиотеки типов в виде сборки](~/docs/framework/interop/importing-a-type-library-as-an-assembly.md).  
  
   
  
## Examples  
 В следующем примере кода извлекается `IHTMLWindow2` указателя из документа, окно и отображает новый документ в отдельном окне.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#3)]
 [!code-vb[System.Windows.Forms.HtmlWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="htmlWindow.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Объект для тестирования.</param>
        <summary>Тестирует объект на равенство с текущим объектом.</summary>
        <returns>Значение <see langword="true" />, если объекты равны, в противном случае — значение <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Error">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementErrorEventHandler Error;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementErrorEventHandler Error" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.Error" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Error As HtmlElementErrorEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementErrorEventHandler ^ Error;" />
      <MemberSignature Language="F#" Value="member this.Error : System.Windows.Forms.HtmlElementErrorEventHandler " Usage="member this.Error : System.Windows.Forms.HtmlElementErrorEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementErrorEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит, когда скрипт, выполняющийся в окне, обнаруживает ошибку во время выполнения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 HTML-страницы могут содержать код скрипта, обычно на языке JScript или VBScript, который выполняется при загрузке страницы. <xref:System.Windows.Forms.HtmlWindow.Error> возникает, когда скрипт обнаруживает ошибку времени выполнения. Поскольку код скрипта позднего связывания, это означает, что вызовы для объекта не разрешаются до времени выполнения, ошибки могут содержать все, начиная от ссылки на пустой объект до вызова неопределенного свойства или метода.  
  
 Можно задать <xref:System.Windows.Forms.HtmlElementErrorEventArgs.Handled%2A> свойство <xref:System.Windows.Forms.HtmlElementErrorEventArgs> в значение true, чтобы предотвратить отображение диалогового окна собственной ошибки в Internet Explorer.
  
   
  
## Examples  
 В следующем примере кода перехватывается ошибка, результаты, если скрипт на странице HTML пытается получить доступ к объекту, который не определен в документе. Страница должна быть полностью загружена перед <xref:System.Windows.Forms.HtmlWindow.Error> присоединен обработчик событий, в противном случае пример не будет работать.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#16](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#16)]
 [!code-vb[System.Windows.Forms.HtmlWindow#16](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#16)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public void Focus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Focus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Focus" />
      <MemberSignature Language="VB.NET" Value="Public Sub Focus ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Focus();" />
      <MemberSignature Language="F#" Value="member this.Focus : unit -&gt; unit" Usage="htmlWindow.Focus " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Помещает фокус в текущее окно.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если другое окно фокус ранее <xref:System.Windows.Forms.HtmlWindow.Focus%2A> был вызван, это окно теряет фокус.  
  
 Не вызывайте фокус на элемент внутри окна до окна <xref:System.Windows.Forms.HtmlWindow.Load> события.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Frames">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindowCollection Frames { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlWindowCollection Frames" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Frames" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Frames As HtmlWindowCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlWindowCollection ^ Frames { System::Windows::Forms::HtmlWindowCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Frames : System.Windows.Forms.HtmlWindowCollection" Usage="System.Windows.Forms.HtmlWindow.Frames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindowCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает ссылку на каждый из элементов <c>FRAME</c>, определенных на веб-странице.</summary>
        <value>
          <see cref="T:System.Windows.Forms.HtmlWindowCollection" /> В документе <c>КАДРА</c> и <c>IFRAME</c> объектов.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Объект `FRAME` — это ряд окон, определенный в `FRAMESET`. `FRAME`позволяет размещать несколько документов в одном документе. Каждый `FRAME` имеет определенную определенную ширину строки и столбца и располагается на странице относительно другого `FRAME`определенных в `FRAMESET`; положение `FRAME` зафиксировано, однако пользователь может иногда с помощью мыши курсор для увеличения или уменьшения `FRAME`. `IFRAME` Напоминает фрейм, но она должна быть зафиксирована в фиксированном положении.  
  
 Кадры будет содержать один экземпляр <xref:System.Windows.Forms.HtmlWindow> для каждого `FRAME` или `IFRAME` определенных веб-странице.  
  
   
  
## Examples  
 В следующем примере кода изучается каждый документ на странице, содержащей кадры и создает таблицу все внешние ссылки с каждой страницы для дальнейшего изучения.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#2)]
 [!code-vb[System.Windows.Forms.HtmlWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="htmlWindow.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Служит хэш-функцией для определенного типа.</summary>
        <returns>Хэш-код для текущего объекта <see cref="T:System.Windows.Forms.HtmlWindow" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GotFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler GotFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler GotFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.GotFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotFocus As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ GotFocus;" />
      <MemberSignature Language="F#" Value="member this.GotFocus : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.GotFocus : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит, когда текущее окно получает фокус пользовательского ввода.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow.GotFocus> происходит по:  
  
-   В первом окне `FRAMESET` при `FRAMESET` первой загрузке.  
  
-   `FRAME` , Последнее имеет фокус, если окно, содержащее <xref:System.Windows.Forms.WebBrowser> управления переводится на переднем плане.  
  
-   Объект `FRAME` пользователь щелкнул пользователь, но только если щелчка не поместить фокус на элемент в пределах окна.  
  
 Не удается отменить действие по умолчанию для <xref:System.Windows.Forms.HtmlWindow.GotFocus> событий, или отключить восходящую.
  
   
  
## Examples  
 В следующем примере кода показано применение этого элемента. В примере обработчик событий сообщает при наступлении <xref:System.Windows.Forms.HtmlWindow.GotFocus> событий. Этот отчет позволяет выяснить, когда произошло событие и может оказаться полезным при отладке.  
  
 Чтобы запустить пример кода, вставьте его в проект, который содержит экземпляр типа <xref:System.Windows.Forms.HtmlWindow> с именем `HtmlWindow1`. Убедитесь, что обработчик событий связан с <xref:System.Windows.Forms.HtmlWindow.GotFocus> событий.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#452](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#452)]
 [!code-vb[System.Windows.Forms.EventExamples#452](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#452)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="History">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlHistory History { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlHistory History" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.History" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property History As HtmlHistory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlHistory ^ History { System::Windows::Forms::HtmlHistory ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.History : System.Windows.Forms.HtmlHistory" Usage="System.Windows.Forms.HtmlWindow.History" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlHistory</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает объект, содержащий последние посещенные пользователем URL-адреса.</summary>
        <value>
          <see cref="T:System.Windows.Forms.HtmlHistory" /> для текущего окна.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow.History%2A> содержит все URL-адреса, переход в текущем окне, который называется *стек навигации*и предоставляет методы для перехода этих документов.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsClosed">
      <MemberSignature Language="C#" Value="public bool IsClosed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsClosed" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.IsClosed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsClosed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsClosed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsClosed : bool" Usage="System.Windows.Forms.HtmlWindow.IsClosed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, является ли это окно открытым или закрытым.</summary>
        <value>Значение <see langword="true" />, если окно все еще открыто на экране; в противном случае — значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если <xref:System.Windows.Forms.HtmlWindow> было закрыто пользователем или посредством вызова <xref:System.Windows.Forms.HtmlWindow.Close%2A> метод, попытка перехода на новый URL-адрес или получить доступ к документу в окне приведет к ошибке. Используйте это свойство, чтобы определить, является ли безопасно вызывать свойства и методы в объекте текущего окна.  
  
   
  
## Examples  
 В следующем примере кода открывается окно и закрывается, если пользователь не использовал его в течение пяти минут. В примере кода требуется наличие формы <xref:System.Windows.Forms.WebBrowser> управления с именем `WebBrowser1`, <xref:System.Windows.Forms.Button> с именем `Button1`и <xref:System.Windows.Forms.Timer> класс с именем `Timer1`.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#8)]
 [!code-vb[System.Windows.Forms.HtmlWindow#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Load;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Load" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.Load" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Load As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ Load;" />
      <MemberSignature Language="F#" Value="member this.Load : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.Load : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит после окончания инициализации документа окна и всех его элементов.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow.Load> Событие работает так же, как <xref:System.Windows.Forms.WebBrowser.DocumentCompleted> события <xref:System.Windows.Forms.WebBrowser> управления: сообщает безопасности для доступа к HTML-элементам внутри документа.  
  
 Не удается отменить действие по умолчанию для <xref:System.Windows.Forms.HtmlWindow.Load> события.
  
   
  
## Examples  
 В следующем примере кода показано применение этого элемента. В примере обработчик событий сообщает при наступлении <xref:System.Windows.Forms.HtmlWindow.Load> событий. Этот отчет позволяет выяснить, когда произошло событие и может оказаться полезным при отладке. Отчет по несколько событий или события, которые происходят часто, рассмотрите возможность замены <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> с <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> или добавление сообщения в многострочном <xref:System.Windows.Forms.TextBox>.  
  
 Чтобы запустить пример кода, вставьте его в проект, который содержит экземпляр типа <xref:System.Windows.Forms.HtmlWindow> с именем `HtmlWindow1`. Убедитесь, что обработчик событий связан с <xref:System.Windows.Forms.HtmlWindow.Load> событий.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#453](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#453)]
 [!code-vb[System.Windows.Forms.EventExamples#453](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#453)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler LostFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler LostFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.LostFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostFocus As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ LostFocus;" />
      <MemberSignature Language="F#" Value="member this.LostFocus : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.LostFocus : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при потере окном фокуса пользовательского ввода.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере кода показано применение этого элемента. В примере обработчик событий сообщает при наступлении <xref:System.Windows.Forms.HtmlWindow.LostFocus> событий. Этот отчет позволяет выяснить, когда произошло событие и может оказаться полезным при отладке.  
  
 Чтобы запустить пример кода, вставьте его в проект, который содержит экземпляр типа <xref:System.Windows.Forms.HtmlWindow> с именем `HtmlWindow1`. Убедитесь, что обработчик событий связан с <xref:System.Windows.Forms.HtmlWindow.LostFocus> событий.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#454](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#454)]
 [!code-vb[System.Windows.Forms.EventExamples#454](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#454)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MoveTo">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Перемещает окно в указанные координаты на экране.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MoveTo">
      <MemberSignature Language="C#" Value="public void MoveTo (System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MoveTo(valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.MoveTo(System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveTo(System::Drawing::Point point);" />
      <MemberSignature Language="F#" Value="member this.MoveTo : System.Drawing.Point -&gt; unit" Usage="htmlWindow.MoveTo point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="point">Координаты X и Y верхнего левого угла окна.</param>
        <summary>Перемещает окно в указанные координаты на экране.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Нельзя использовать <xref:System.Windows.Forms.HtmlWindow.MoveTo%2A> для перемещения окна за пределы видимой края экрана; этот метод также доступен в скрипты на веб-страницы и позволяя ненадежных скрипт для визуализации окна не считается безопасным.  
  
 <xref:System.Windows.Forms.HtmlWindow.MoveTo%2A> вызывает <xref:System.UnauthorizedAccessException> Если вы пытаетесь переместить окно и родительского окна имеют разные домены верхнего уровня. Например, при размещении <xref:System.Windows.Forms.WebBrowser> для управления a.adatum.com, создайте новое окно с помощью <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> для отображения b.adatum.com. В этом случае оба окна считаются частью одного домена верхнего уровня, и исключение не вызывается. Тем не менее при вызове метода <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> для отображения www,microsoft.com, два окна теперь имеют разные домены верхнего уровня и <xref:System.Windows.Forms.HtmlWindow.MoveTo%2A> операция вызовет исключение.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">Код, пытающийся выполнить эту операцию, не имеет разрешение на работу с этим окном.</exception>
      </Docs>
    </Member>
    <Member MemberName="MoveTo">
      <MemberSignature Language="C#" Value="public void MoveTo (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MoveTo(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.MoveTo(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MoveTo (x As Integer, y As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveTo(int x, int y);" />
      <MemberSignature Language="F#" Value="member this.MoveTo : int * int -&gt; unit" Usage="htmlWindow.MoveTo (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">Координата X верхнего левого угла окна.</param>
        <param name="y">Координата Y верхнего левого угла окна.</param>
        <summary>Перемещает окно в указанные координаты на экране.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Нельзя использовать <xref:System.Windows.Forms.HtmlWindow.MoveTo%2A> для перемещения окна за пределы видимой края экрана; этот метод также доступен в скрипты на веб-страницы и позволяя ненадежных скрипт для визуализации окна не считается безопасным.  
  
 <xref:System.Windows.Forms.HtmlWindow.MoveTo%2A> вызывает <xref:System.UnauthorizedAccessException> Если вы пытаетесь переместить окно и родительского окна имеют разные домены верхнего уровня. Например, при размещении <xref:System.Windows.Forms.WebBrowser> указывает a.adatum.com, управления и создания нового окна с помощью <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> для отображения b.adatum.com. В этом случае оба окна считаются частью одного домена верхнего уровня, и исключение не вызывается. Тем не менее при вызове метода <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> для отображения www,microsoft.com, два окна теперь имеют разные домены верхнего уровня и <xref:System.Windows.Forms.HtmlWindow.MoveTo%2A> операция вызовет исключение.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">Код, пытающийся выполнить эту операцию, не имеет разрешение на работу с этим окном.</exception>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Windows.Forms.HtmlWindow.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает имя окна.</summary>
        <value>Строка <see cref="T:System.String" />, представляющая имя.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Navigate">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Отображает или загружает новое содержимое, расположенное по указанному URL-адресу.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Navigate">
      <MemberSignature Language="C#" Value="public void Navigate (string urlString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Navigate(string urlString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Navigate(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Navigate (urlString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Navigate(System::String ^ urlString);" />
      <MemberSignature Language="F#" Value="member this.Navigate : string -&gt; unit" Usage="htmlWindow.Navigate urlString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="urlString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="urlString">Отображаемый ресурс, описываемый URL-адресом.</param>
        <summary>Отображает или загружает новое содержимое, расположенное по указанному URL-адресу.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если `url` параметр указывает на HTML-страницы, страницы, отображаемой в окне будут удалены и заменены новой страницы; все ссылки, приложение задерживает на управляемые объекты DOM старой страницы не будут допустимыми. Если `url` указывает на ресурс, который не может отображаться в обозревателе Internet Explorer, он откроется диалоговое окно с вопросом, следует ли открыть ресурс вне приложения, сохраните его на диске, или отменить операцию загрузки.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Navigate">
      <MemberSignature Language="C#" Value="public void Navigate (Uri url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Navigate(class System.Uri url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Navigate(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Navigate (url As Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Navigate(Uri ^ url);" />
      <MemberSignature Language="F#" Value="member this.Navigate : Uri -&gt; unit" Usage="htmlWindow.Navigate url" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="url">Расположение, указанное как <see cref="T:System.Uri" />, документа или объекта для отображения в текущем окне.</param>
        <summary>Отображает новый документ в текущем окне.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Windows.Forms.HtmlWindow left, System.Windows.Forms.HtmlWindow right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Windows.Forms.HtmlWindow left, class System.Windows.Forms.HtmlWindow right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.op_Equality(System.Windows.Forms.HtmlWindow,System.Windows.Forms.HtmlWindow)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As HtmlWindow, right As HtmlWindow) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Windows::Forms::HtmlWindow ^ left, System::Windows::Forms::HtmlWindow ^ right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Windows.Forms.HtmlWindow * System.Windows.Forms.HtmlWindow -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.Forms.HtmlWindow" />
        <Parameter Name="right" Type="System.Windows.Forms.HtmlWindow" />
      </Parameters>
      <Docs>
        <param name="left">Первый объект <see cref="T:System.Windows.Forms.HtmlWindow" />.</param>
        <param name="right">Второй объект <see cref="T:System.Windows.Forms.HtmlWindow" />.</param>
        <summary>Сравнивает два объекта <see cref="T:System.Windows.Forms.HtmlWindow" />, чтобы определить, равны ли они.</summary>
        <returns>Значение <see langword="true" />, если оба параметра имеют значение <see langword="null" /> или если оба элемента имеют один и тот же базовый интерфейс COM. В противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Оператор равенства тесты `IUnknown` указатели базовых объектов COM в оболочку с помощью предоставленного <xref:System.Windows.Forms.HtmlWindow> классы.  
  
 Эквивалентный метод для этого оператора <xref:System.Windows.Forms.HtmlWindow.Equals%28System.Object%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Windows.Forms.HtmlWindow left, System.Windows.Forms.HtmlWindow right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Windows.Forms.HtmlWindow left, class System.Windows.Forms.HtmlWindow right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.op_Inequality(System.Windows.Forms.HtmlWindow,System.Windows.Forms.HtmlWindow)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As HtmlWindow, right As HtmlWindow) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Windows::Forms::HtmlWindow ^ left, System::Windows::Forms::HtmlWindow ^ right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Windows.Forms.HtmlWindow * System.Windows.Forms.HtmlWindow -&gt; bool" Usage="System.Windows.Forms.HtmlWindow.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.Forms.HtmlWindow" />
        <Parameter Name="right" Type="System.Windows.Forms.HtmlWindow" />
      </Parameters>
      <Docs>
        <param name="left">Первый объект <see cref="T:System.Windows.Forms.HtmlWindow" />.</param>
        <param name="right">Второй объект <see cref="T:System.Windows.Forms.HtmlWindow" />.</param>
        <summary>Сравнивает два объекта <see langword="HtmlWindow" />, чтобы определить их неравенство.</summary>
        <returns>Значение <see langword="true" />, если только один из двух объектов имеет значение <see langword="null" /> или если базовые указатели COM не совпадают; в противном случае — значение <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Open">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Отображает файл в именованном окне.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow Open (string urlString, string target, string windowOptions, bool replaceEntry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlWindow Open(string urlString, string target, string windowOptions, bool replaceEntry) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Open(System.String,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Open (urlString As String, target As String, windowOptions As String, replaceEntry As Boolean) As HtmlWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlWindow ^ Open(System::String ^ urlString, System::String ^ target, System::String ^ windowOptions, bool replaceEntry);" />
      <MemberSignature Language="F#" Value="member this.Open : string * string * string * bool -&gt; System.Windows.Forms.HtmlWindow" Usage="htmlWindow.Open (urlString, target, windowOptions, replaceEntry)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="urlString" Type="System.String" />
        <Parameter Name="target" Type="System.String" />
        <Parameter Name="windowOptions" Type="System.String" />
        <Parameter Name="replaceEntry" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="urlString">URL-адрес, который описывает расположение загружаемого файла.</param>
        <param name="target">Имя окна, в котором будет открыт ресурс. Это может быть имя, предоставленное разработчиком, или одно из следующих специальных значений. <c>_blank</c>: открывает <c>url-адрес</c> в новом окне. Работает так же, как вызов метода <see cref="M:System.Windows.Forms.HtmlWindow.OpenNew(System.String,System.String)" />.  
  
 <c>_media</c>: открывает <c>url-адрес</c> в панели мультимедиа.  
  
 <c>_parent</c>: открывает <c>url-адрес</c> в окне, создавшем текущее окно.  
  
 <c>_search</c>: открывает <c>url-адрес</c> в строке поиска.  
  
 <c>_self</c>: открывает <c>url-адрес</c> в текущем окне.  
  
 <c>_top</c>: при вызове для окна, принадлежащего элементу <c>FRAME</c>, открывает <c>url-адрес</c> в окне, размещающем его <c>FRAMESET</c>. В противном случае функционирует так же, как <c>_self</c>.</param>
        <param name="windowOptions">Строка, разделяемая запятыми, состоящая из нуля или более следующих параметров в форме <c>name=value</c>. Кроме параметров <c>left</c>, <c>top</c>, <c>height</c> и <c>width</c>, которые принимают произвольные целые числа, все остальные параметры принимают в качестве допустимых значений <c>да</c> или <see langword="1" />, а также <c>нет</c> или <see langword="0" />.  
  
 <c>channelmode</c>: используется вместе с устаревшей технологией каналов Internet Explorer 4.0. Значение по умолчанию — <c>нет</c>.  
  
 <c>directories</c>: должно ли окно отображать кнопки навигации по каталогам. Значение по умолчанию — <c>да</c>.  
  
 <c>height</c>: высота клиентской области окна (в пикселях). Минимальное значение равно 100; при попытке открыть окно с меньшим размером будет открыто окно, соответствующее значениям по умолчанию, установленным в Internet Explorer.  
  
 <c>left</c>: левая позиция окна (координата X) относительно верхнего левого угла экрана пользователя (в пикселях). Это значение должно быть положительным целым числом.  
  
 <c>location</c>: следует ли отображать адресную строку, с помощью которой пользователь сможет переместиться на новый URL-адрес. Значение по умолчанию — <c>да</c>.  
  
 <c>menubar</c>: следует ли отображать меню в новом окне. Значение по умолчанию — <c>да</c>.  
  
 <c>resizable</c>: могут ли размеры окна изменяться пользователем. Значение по умолчанию — <c>да</c>.  
  
 <c>scrollbars</c>: имеет ли окно горизонтальную и вертикальную полосы прокрутки. Значение по умолчанию — <c>да</c>.  
  
 <c>status</c>: имеет ли окно строку состояния в нижней части. Значение по умолчанию — <c>да</c>.  
  
 <c>titlebar</c>: следует ли отображать заголовок текущей страницы. Задание для этого параметра значения <c>Нет</c> не действует в управляемом приложении; строка заголовка будет отображаться всегда.  
  
 <c>toolbar</c>: должны ли отображаться кнопки **Назад**, **Вперед** и **Стоп**. Значение по умолчанию — <c>да</c>.  
  
 <c>top</c>: верхняя позиция (координата Y) окна относительно верхнего левого угла экрана пользователя (в пикселях). Это значение должно быть положительным целым числом.  
  
 <c>width</c>: ширина клиентской области окна (в пикселях). Минимальное значение равно 100; при попытке открыть окно с меньшим размером будет открыто окно, соответствующее значениям по умолчанию, установленным в Internet Explorer.</param>
        <param name="replaceEntry">Заменяет ли <c>url</c> URL-адрес текущего окна в журнале навигации. Это будет влиять на действие методов класса <see cref="T:System.Windows.Forms.HtmlHistory" />.</param>
        <summary>Отображает файл в именованном окне.</summary>
        <returns>Окно <see cref="T:System.Windows.Forms.HtmlWindow" />, представляющее новое окно или ранее созданное окно, указанное параметром <paramref name="target" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `target` Параметров можно назвать окна, который был создан в результате предыдущего вызова <xref:System.Windows.Forms.HtmlWindow.Open%2A>. Параметр также может указывать на окно, щелкнув гиперссылку (`A` элемента) или `FORM` элемент, который использует `TARGET` атрибут, чтобы открыть его URL-адрес в новом окне. Следующий код HTML будет открыто новое окно с именем `orderWindow` когда пользователь щелкает его:  
  
 `<A HREF="/startOrder.aspx" TARGET="orderWindow">Click to Start Order</a>`  
  
 При указании параметров для `windowOptions` параметра любой параметр, не включается автоматически отключается. Другими словами Если вы укажете только посредством `windowOptions` , требуется строка состояния, а затем строки меню, панели инструментов, заголовок, полосы прокрутки и т. д будет отображаться, если не будет явно включено их посредством `windowOptions`.  
  
 Если файл, указанный в `url` файл HTML, текстовый файл или другим типом файла, который может быть размещен в обозревателе Internet Explorer, которое будет отображаться в именованном окне. Если файл не может отображаться в обозревателе Internet Explorer и именованное целевое окно еще не существует, то появится окно только достаточно долго и Internet Explorer загрузить ресурс; он закрывается сразу после него.  
  
 При создании новых окон с помощью <xref:System.Windows.Forms.HtmlWindow.Open%2A> или <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A>, он заставляет объектной модели документов HTML открыть новый экземпляр из Internet Explorer. Если вы не вызываете <xref:System.Windows.Forms.HtmlWindow.Close%2A> на все окна, который вы создали, этот экземпляр из Internet Explorer сможет продолжить работу даже после выйдет из приложения.  
  
 Если вы используете <xref:System.Windows.Forms.HtmlWindow.Open%2A> для загрузки URL-адрес в существующее окно `windowOptions` будут игнорироваться; окно будет сохранять измерения, внешний вид и расположение на экране, сначала предоставить ему, то первый вызов <xref:System.Windows.Forms.HtmlWindow.Open%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow Open (Uri url, string target, string windowOptions, bool replaceEntry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlWindow Open(class System.Uri url, string target, string windowOptions, bool replaceEntry) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Open(System.Uri,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Open (url As Uri, target As String, windowOptions As String, replaceEntry As Boolean) As HtmlWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlWindow ^ Open(Uri ^ url, System::String ^ target, System::String ^ windowOptions, bool replaceEntry);" />
      <MemberSignature Language="F#" Value="member this.Open : Uri * string * string * bool -&gt; System.Windows.Forms.HtmlWindow" Usage="htmlWindow.Open (url, target, windowOptions, replaceEntry)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.Uri" />
        <Parameter Name="target" Type="System.String" />
        <Parameter Name="windowOptions" Type="System.String" />
        <Parameter Name="replaceEntry" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="url">URL-адрес, который описывает расположение загружаемого файла.</param>
        <param name="target">Имя окна, в котором будет открыт ресурс. Это может быть имя, предоставленное разработчиком, или одно из следующих специальных значений. <c>_blank</c>: открывает <c>url-адрес</c> в новом окне. Работает так же, как вызов метода <see cref="M:System.Windows.Forms.HtmlWindow.OpenNew(System.String,System.String)" />.  
  
 <c>_media</c>: открывает <c>url-адрес</c> в панели мультимедиа.  
  
 <c>_parent</c>: открывает <c>url-адрес</c> в окне, создавшем текущее окно.  
  
 <c>_search</c>: открывает <c>url-адрес</c> в строке поиска.  
  
 <c>_self</c>: открывает <c>url-адрес</c> в текущем окне.  
  
 <c>_top</c>: при вызове для окна, принадлежащего элементу <c>FRAME</c>, открывает <c>url-адрес</c> в окне, размещающем его <c>FRAMESET</c>. В противном случае функционирует так же, как <c>_self</c>.</param>
        <param name="windowOptions">Строка, разделяемая запятыми, состоящая из нуля или более следующих параметров в форме <c>name=value</c>. Кроме параметров <c>left</c>, <c>top</c>, <c>height</c> и <c>width</c>, которые принимают произвольные целые числа, все остальные параметры принимают в качестве допустимых значений <c>да</c> или <see langword="1" />, а также <c>нет</c> или <see langword="0" />.  
  
 <c>channelmode</c>: используется вместе с устаревшей технологией каналов Internet Explorer 4.0. Значение по умолчанию — <c>нет</c>.  
  
 <c>directories</c>: должно ли окно отображать кнопки навигации по каталогам. Значение по умолчанию — <c>да</c>.  
  
 <c>height</c>: высота клиентской области окна (в пикселях). Минимальное значение равно 100; при попытке открыть окно с меньшим размером будет открыто окно, соответствующее значениям по умолчанию, установленным в Internet Explorer.  
  
 <c>left</c>: левая позиция окна (координата X) относительно верхнего левого угла экрана пользователя (в пикселях). Это значение должно быть положительным целым числом.  
  
 <c>location</c>: следует ли отображать адресную строку, с помощью которой пользователь сможет переместиться на новый URL-адрес. Значение по умолчанию — <c>да</c>.  
  
 <c>menubar</c>: следует ли отображать меню в новом окне. Значение по умолчанию — <c>да</c>.  
  
 <c>resizable</c>: могут ли размеры окна изменяться пользователем. Значение по умолчанию — <c>да</c>.  
  
 <c>scrollbars</c>: имеет ли окно горизонтальную и вертикальную полосы прокрутки. Значение по умолчанию — <c>да</c>.  
  
 <c>status</c>: имеет ли окно строку состояния в нижней части. Значение по умолчанию — <c>да</c>.  
  
 <c>titlebar</c>: следует ли отображать заголовок текущей страницы. Задание для этого параметра значения <c>Нет</c> не действует в управляемом приложении; строка заголовка будет отображаться всегда.  
  
 <c>toolbar</c>: должны ли отображаться кнопки **Назад**, **Вперед** и **Стоп**. Значение по умолчанию — <c>да</c>.  
  
 <c>top</c>: верхняя позиция (координата Y) окна относительно верхнего левого угла экрана пользователя (в пикселях). Это значение должно быть положительным целым числом.  
  
 <c>width</c>: ширина клиентской области окна (в пикселях). Минимальное значение равно 100; при попытке открыть окно с меньшим размером будет открыто окно, соответствующее значениям по умолчанию, установленным в Internet Explorer.</param>
        <param name="replaceEntry">Заменяет ли <c>url</c> URL-адрес текущего окна в журнале навигации. Это будет влиять на действие методов класса <see cref="T:System.Windows.Forms.HtmlHistory" />.</param>
        <summary>Отображает файл в именованном окне.</summary>
        <returns>Окно <see cref="T:System.Windows.Forms.HtmlWindow" />, представляющее новое окно или ранее созданное окно, указанное параметром <paramref name="target" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `target` Параметров можно назвать окна, который был создан в результате предыдущего вызова <xref:System.Windows.Forms.HtmlWindow.Open%2A>. Параметр также может указывать на окно, щелкнув гиперссылку (`A` элемента) или `FORM` элемент, который использует `TARGET` атрибут, чтобы открыть его URL-адрес в новом окне. Следующий код HTML будет открыто новое окно с именем `orderWindow` когда пользователь щелкает его:  
  
 `<A HREF="/startOrder.aspx" TARGET="orderWindow">Click to Start Order</a>`  
  
 При указании параметров для `windowOptions` параметра любой параметр, не включается автоматически отключается. Другими словами Если вы укажете только посредством `windowOptions` , требуется строка состояния, а затем строки меню, панели инструментов, заголовок, полосы прокрутки и т. д будет отображаться, если не будет явно включено их посредством `windowOptions`.  
  
 Если файл, указанный в `url` файл HTML, текстовый файл или другим типом файла, который может быть размещен в обозревателе Internet Explorer, которое будет отображаться в именованном окне. Если файл не может отображаться в обозревателе Internet Explorer и именованное целевое окно еще не существует, то появится окно только достаточно долго и Internet Explorer загрузить ресурс; он закрывается сразу после него.  
  
 При создании новых окон с помощью <xref:System.Windows.Forms.HtmlWindow.Open%2A> или <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A>, он заставляет объектной модели документов HTML открыть новый экземпляр из Internet Explorer. Если вы не вызываете <xref:System.Windows.Forms.HtmlWindow.Close%2A> на все окна, который вы создали, этот экземпляр из Internet Explorer сможет продолжить работу даже после выйдет из приложения.  
  
 Если вы используете <xref:System.Windows.Forms.HtmlWindow.Open%2A> для загрузки URL-адрес в существующее окно `windowOptions` будут игнорироваться; окно будет сохранять измерения, внешний вид и расположение на экране, сначала предоставить ему, то первый вызов <xref:System.Windows.Forms.HtmlWindow.Open%2A> .  
  
   
  
## Examples  
 В следующем примере кода содержит два метода:  
  
-   Первый URL-адрес откроется в окне с именем `displayWindow`, который создается с отображается строка состояния.  
  
-   Второй открывается другой URL-адрес в том же окне, но указывает, что должно отображаться только строка размещения.  
  
 Обратите внимание, что размеры окна и отображаемые элементы управления зависит от на котором сначала открыт URL-адрес. В примере кода требуется наличие формы <xref:System.Windows.Forms.WebBrowser> управления с именем `WebBrowser1`.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#13](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#13)]
 [!code-vb[System.Windows.Forms.HtmlWindow#13](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Opener">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow Opener { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlWindow Opener" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Opener" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Opener As HtmlWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlWindow ^ Opener { System::Windows::Forms::HtmlWindow ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Opener : System.Windows.Forms.HtmlWindow" Usage="System.Windows.Forms.HtmlWindow.Opener" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает ссылку на окно, которое открыло текущее окно.</summary>
        <value>Окно <see cref="T:System.Windows.Forms.HtmlWindow" />, созданное посредством вызова метода <see cref="M:System.Windows.Forms.HtmlWindow.Open(System.String,System.String,System.String,System.Boolean)" /> или <see cref="M:System.Windows.Forms.HtmlWindow.OpenNew(System.String,System.String)" />. Если окно не было создано с помощью одного из этих методов, данное свойство возвращает значение <see langword="null" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenNew">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Отображает файл в новом окне.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenNew">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow OpenNew (string urlString, string windowOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlWindow OpenNew(string urlString, string windowOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.OpenNew(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenNew (urlString As String, windowOptions As String) As HtmlWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlWindow ^ OpenNew(System::String ^ urlString, System::String ^ windowOptions);" />
      <MemberSignature Language="F#" Value="member this.OpenNew : string * string -&gt; System.Windows.Forms.HtmlWindow" Usage="htmlWindow.OpenNew (urlString, windowOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="urlString" Type="System.String" />
        <Parameter Name="windowOptions" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="urlString">URL-адрес, который описывает расположение загружаемого файла.</param>
        <param name="windowOptions">Строка, разделяемая запятыми, состоящая из нуля или более следующих параметров в форме <c>name=value</c>. Полное описание допустимых параметров см. в описании метода <see cref="M:System.Windows.Forms.HtmlWindow.Open(System.String,System.String,System.String,System.Boolean)" />.</param>
        <summary>Отображает файл в новом окне.</summary>
        <returns>Объект <see cref="T:System.Windows.Forms.HtmlWindow" />, представляющий новое окно.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если файл, указанный в `url` файл HTML, текстовый файл или другим типом файла, который может быть размещен в обозревателе Internet Explorer, которое будет отображаться в новом окне. Если файл не может отображаться в обозревателе Internet Explorer, то появится окно только достаточно долго и Internet Explorer загрузить ресурс; он закрывается сразу после него.  
  
 При создании новых окон с помощью <xref:System.Windows.Forms.HtmlWindow.Open%2A> или <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A>, он заставляет объектной модели документов HTML открыть новый экземпляр из Internet Explorer. Если вы не вызываете <xref:System.Windows.Forms.HtmlWindow.Close%2A> на все окна, который вы создали, этот экземпляр из Internet Explorer сможет продолжить работу даже после выйдет из приложения.  
  
 Если вы хотите загрузить документ в предыдущем открытом окне, см. раздел <xref:System.Windows.Forms.HtmlWindow.Open%2A> метод.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenNew">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow OpenNew (Uri url, string windowOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlWindow OpenNew(class System.Uri url, string windowOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.OpenNew(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenNew (url As Uri, windowOptions As String) As HtmlWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlWindow ^ OpenNew(Uri ^ url, System::String ^ windowOptions);" />
      <MemberSignature Language="F#" Value="member this.OpenNew : Uri * string -&gt; System.Windows.Forms.HtmlWindow" Usage="htmlWindow.OpenNew (url, windowOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.Uri" />
        <Parameter Name="windowOptions" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="url">URL-адрес, который описывает расположение загружаемого файла.</param>
        <param name="windowOptions">Строка, разделяемая запятыми, состоящая из нуля или более следующих параметров в форме <c>name=value</c>. Полное описание допустимых параметров см. в описании метода <see cref="M:System.Windows.Forms.HtmlWindow.Open(System.String,System.String,System.String,System.Boolean)" />.</param>
        <summary>Отображает файл в новом окне.</summary>
        <returns>Объект <see cref="T:System.Windows.Forms.HtmlWindow" />, представляющий новое окно.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если файл, указанный в `url` файл HTML, текстовый файл или другим типом файла, который может быть размещен в обозревателе Internet Explorer, которое будет отображаться в новом окне. Если файл не может отображаться в обозревателе Internet Explorer, то появится окно только достаточно долго и Internet Explorer загрузить ресурс; он закрывается сразу после него.  
  
 При создании новых окон с помощью <xref:System.Windows.Forms.HtmlWindow.Open%2A> или <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A>, он заставляет объектной модели документов HTML открыть новый экземпляр из Internet Explorer. Если вы не вызываете <xref:System.Windows.Forms.HtmlWindow.Close%2A> на все окна, который вы создали, этот экземпляр из Internet Explorer сможет продолжить работу даже после выйдет из приложения.  
  
 Если вы хотите загрузить документ в предыдущем открытом окне, см. раздел <xref:System.Windows.Forms.HtmlWindow.Open%2A> метод.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlWindow Parent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As HtmlWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlWindow ^ Parent { System::Windows::Forms::HtmlWindow ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parent : System.Windows.Forms.HtmlWindow" Usage="System.Windows.Forms.HtmlWindow.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает окно, которое располагается над текущим окном на странице, содержащей рамки.</summary>
        <value>Окно <see cref="T:System.Windows.Forms.HtmlWindow" />, являющееся владельцем текущего окна. Если текущее окно не <c>КАДРА</c>, или не встроено в <c>КАДРА</c>, она возвращает <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В документе, содержащем рамки каждая `FRAME` в `FRAMESET` действует как отдельное дочернее окно на странице. Родителем каждого `FRAME` — `FRAMESET` , содержащее `FRAME`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public System.Drawing.Point Position { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Point Position" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Position" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Position As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Point Position { System::Drawing::Point get(); };" />
      <MemberSignature Language="F#" Value="member this.Position : System.Drawing.Point" Usage="System.Windows.Forms.HtmlWindow.Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает положение клиентской области в окне на экране.</summary>
        <value>Объект <see cref="T:System.Drawing.Point" />, описывающий координаты X и Y (в пикселях) верхнего левого угла экрана.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Control.Location%2A> Свойство <xref:System.Windows.Forms.WebBrowser> элемент управления будет возвращать положение элемента управления относительно левого верхнего угла формы. В отличие от этого <xref:System.Windows.Forms.HtmlWindow.Position%2A> возвращает расположение документа площади относительно верхнего левого угла монитор пользователя.  
  
   
  
## Examples  
 В следующем примере кода открывается новое окно непосредственно через <xref:System.Windows.Forms.WebBrowser> элемента управления в форме. В примере кода требуется, что форма содержит экземпляр <xref:System.Windows.Forms.WebBrowser> управления с именем `WebBrowser1`.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#5)]
 [!code-vb[System.Windows.Forms.HtmlWindow#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Prompt">
      <MemberSignature Language="C#" Value="public string Prompt (string message, string defaultInputValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Prompt(string message, string defaultInputValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Prompt(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Prompt (message As String, defaultInputValue As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Prompt(System::String ^ message, System::String ^ defaultInputValue);" />
      <MemberSignature Language="F#" Value="member this.Prompt : string * string -&gt; string" Usage="htmlWindow.Prompt (message, defaultInputValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="defaultInputValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Сообщение, отображаемое для пользователя.</param>
        <param name="defaultInputValue">Значение по умолчанию, отображаемое в текстовом поле.</param>
        <summary>Показывает диалоговое окно, в котором отображается сообщение и текстовое поле для пользователя.</summary>
        <returns>Строка <see cref="T:System.String" />, представляющая текст, введенный пользователем.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow.Prompt%2A> предоставляет быстрый и простой способ получить простой текстовый ввод от пользователя.  
  
 Несмотря на то что <xref:System.Windows.Forms.HtmlWindow.Prompt%2A> принимает текст в кодировке Юникод в качестве выходных данных запрос сценария Internet Explorer не будут отображаться текст языка нелатинских соответствующим образом на Windows 95, Windows 98, Windows ME или Windows NT из-за ограничений операционной системы. Дополнительные сведения см. в разделе [INFO: Internet Explorer скрипт запрашивает и многобайтовой Кодировки и Юникода](http://support.microsoft.com/default.aspx?scid=kb;en-us;211147).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveFocus">
      <MemberSignature Language="C#" Value="public void RemoveFocus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveFocus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.RemoveFocus" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveFocus ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveFocus();" />
      <MemberSignature Language="F#" Value="member this.RemoveFocus : unit -&gt; unit" Usage="htmlWindow.RemoveFocus " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Перемещает фокус из текущего окна.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При вызове `FRAME` окна в `FRAMESET`, <xref:System.Windows.Forms.HtmlWindow.RemoveFocus%2A> будет вызывать это окно для потеряет фокус, но он не будет автоматически устанавливать фокус на другое окно.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Resize">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Resize;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Resize" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.Resize" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Resize As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ Resize;" />
      <MemberSignature Language="F#" Value="member this.Resize : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.Resize : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при использовании пользователем мыши для изменения размеров окна.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере кода показано применение этого элемента. В примере обработчик событий сообщает при наступлении <xref:System.Windows.Forms.HtmlWindow.Resize> событий. Этот отчет позволяет выяснить, когда произошло событие и может оказаться полезным при отладке. Отчет по несколько событий или события, которые происходят часто, рассмотрите возможность замены <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> с <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> или добавление сообщения в многострочном <xref:System.Windows.Forms.TextBox>.  
  
 Чтобы запустить пример кода, вставьте его в проект, который содержит экземпляр типа <xref:System.Windows.Forms.HtmlWindow> с именем `HtmlWindow1`. Убедитесь, что обработчик событий связан с <xref:System.Windows.Forms.HtmlWindow.Resize> событий.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#455](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#455)]
 [!code-vb[System.Windows.Forms.EventExamples#455](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#455)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ResizeTo">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Изменяет размер окна до указанных размеров.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ResizeTo">
      <MemberSignature Language="C#" Value="public void ResizeTo (System.Drawing.Size size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResizeTo(valuetype System.Drawing.Size size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.ResizeTo(System.Drawing.Size)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResizeTo(System::Drawing::Size size);" />
      <MemberSignature Language="F#" Value="member this.ResizeTo : System.Drawing.Size -&gt; unit" Usage="htmlWindow.ResizeTo size" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.Drawing.Size" />
      </Parameters>
      <Docs>
        <param name="size">Объект <see cref="T:System.Drawing.Size" />, описывающий нужную ширину и высоту окна (в пикселях). Должно быть не менее 100 пикселей для обоих размеров.</param>
        <summary>Изменяет размер окна до указанных размеров.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере кода открывается новое окно и изменяет его для заполнения области экрана.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#15](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#15)]
 [!code-vb[System.Windows.Forms.HtmlWindow#15](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">Окно, размеры которого следует изменить, находится в другом домене, чем родительское окно. Это ограничение является частью сценария безопасности между кадрами; дополнительные сведения содержатся в разделе [Межкадровые скрипты и вопросы безопасности](http://msdn.microsoft.com/library/ms533028.aspx).</exception>
      </Docs>
    </Member>
    <Member MemberName="ResizeTo">
      <MemberSignature Language="C#" Value="public void ResizeTo (int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResizeTo(int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.ResizeTo(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResizeTo (width As Integer, height As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResizeTo(int width, int height);" />
      <MemberSignature Language="F#" Value="member this.ResizeTo : int * int -&gt; unit" Usage="htmlWindow.ResizeTo (width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="width">Описывает нужную ширину окна (в пикселях). Это значение должно быть не менее 100 пикселей.</param>
        <param name="height">Описывает нужную высоту окна (в пикселях). Это значение должно быть не менее 100 пикселей.</param>
        <summary>Изменяет размер окна до указанных размеров.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.UnauthorizedAccessException">Окно, размеры которого следует изменить, находится в другом домене, чем родительское окно. Это ограничение является частью сценария безопасности между кадрами; дополнительные сведения содержатся в разделе [Межкадровые скрипты и вопросы безопасности](http://msdn.microsoft.com/library/ms533028.aspx).</exception>
      </Docs>
    </Member>
    <Member MemberName="Scroll">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Scroll;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Scroll" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.Scroll" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Scroll As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ Scroll;" />
      <MemberSignature Language="F#" Value="member this.Scroll : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.Scroll : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при прокрутке пользователем содержимого окна для просмотра текста, находящегося вне экрана.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере кода показано применение этого элемента. В примере обработчик событий сообщает при наступлении <xref:System.Windows.Forms.HtmlWindow.Scroll> событий. Этот отчет позволяет выяснить, когда произошло событие и может оказаться полезным при отладке. Отчет по несколько событий или события, которые происходят часто, рассмотрите возможность замены <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> с <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> или добавление сообщения в многострочном <xref:System.Windows.Forms.TextBox>.  
  
 Чтобы запустить пример кода, вставьте его в проект, который содержит экземпляр типа <xref:System.Windows.Forms.HtmlWindow> с именем `HtmlWindow1`. Убедитесь, что обработчик событий связан с <xref:System.Windows.Forms.HtmlWindow.Scroll> событий.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#456](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#456)]
 [!code-vb[System.Windows.Forms.EventExamples#456](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#456)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ScrollTo">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Прокручивает окно до назначенной позиции.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ScrollTo">
      <MemberSignature Language="C#" Value="public void ScrollTo (System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScrollTo(valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.ScrollTo(System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScrollTo(System::Drawing::Point point);" />
      <MemberSignature Language="F#" Value="member this.ScrollTo : System.Drawing.Point -&gt; unit" Usage="htmlWindow.ScrollTo point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="point">Координаты X и Y, относящиеся к верхнему левому углу текущего окна, к которым следует прокручивать страницу.</param>
        <summary>Перемещает окно в указанные координаты.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow.ScrollTo%2A> приводит для прокрутки, чтобы указанными координатами на документе находится в левом верхнем углу окна документа. Если документ не большой длины или ширины, чтобы это сделать, <xref:System.Windows.Forms.HtmlWindow.ScrollTo%2A> прокручивать документ, насколько это возможно в указанном направлении.  
  
   
  
## Examples  
 В следующем примере кода документ прокручивается до координат позиции, при щелчке пользователем.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#15](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#15)]
 [!code-vb[System.Windows.Forms.HtmlWindow#15](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScrollTo">
      <MemberSignature Language="C#" Value="public void ScrollTo (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScrollTo(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.ScrollTo(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScrollTo (x As Integer, y As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScrollTo(int x, int y);" />
      <MemberSignature Language="F#" Value="member this.ScrollTo : int * int -&gt; unit" Usage="htmlWindow.ScrollTo (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">Координата X относительно верхнего левого угла текущего окна, к которой следует прокручивать страницу.</param>
        <param name="y">Координата Y относительно верхнего левого угла текущего окна, к которой следует прокручивать страницу.</param>
        <summary>Прокручивает окно до назначенной позиции.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow.ScrollTo%2A> приводит для прокрутки, чтобы указанными координатами на документе находится в левом верхнем углу окна документа. Если документ не большой длины или ширины, чтобы это сделать, <xref:System.Windows.Forms.HtmlWindow.ScrollTo%2A> прокручивать документ, насколько это возможно в указанном направлении.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public System.Drawing.Size Size { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size Size" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Size" />
      <MemberSignature Language="VB.NET" Value="Public Property Size As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Size Size { System::Drawing::Size get(); void set(System::Drawing::Size value); };" />
      <MemberSignature Language="F#" Value="member this.Size : System.Drawing.Size with get, set" Usage="System.Windows.Forms.HtmlWindow.Size" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает размер текущего окна.</summary>
        <value>Объект <see cref="T:System.Drawing.Size" />, описывающий размер окна в пикселях.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StatusBarText">
      <MemberSignature Language="C#" Value="public string StatusBarText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StatusBarText" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.StatusBarText" />
      <MemberSignature Language="VB.NET" Value="Public Property StatusBarText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ StatusBarText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.StatusBarText : string with get, set" Usage="System.Windows.Forms.HtmlWindow.StatusBarText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает текст, отображаемый в строке состояния окна.</summary>
        <value>Объект <see cref="T:System.String" />, содержащий текст текущего состояния.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.WebBrowser> Элемент управления не отображается в строке состояния. Любое новое окно, в котором открывается с <xref:System.Windows.Forms.HtmlWindow.Open%2A> или <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> методы, однако будет отображаться в строке состояния по умолчанию.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unload">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Unload;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Unload" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.Unload" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Unload As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ Unload;" />
      <MemberSignature Language="F#" Value="member this.Unload : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.Unload : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при выгрузке текущей страницы и сразу перед отображением новой страницы.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере кода показано применение этого элемента. В примере обработчик событий сообщает при наступлении <xref:System.Windows.Forms.HtmlWindow.Unload> событий. Этот отчет позволяет выяснить, когда произошло событие и может оказаться полезным при отладке. Отчет по несколько событий или события, которые происходят часто, рассмотрите возможность замены <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> с <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> или добавление сообщения в многострочном <xref:System.Windows.Forms.TextBox>.  
  
 Чтобы запустить пример кода, вставьте его в проект, который содержит экземпляр типа <xref:System.Windows.Forms.HtmlWindow> с именем `HtmlWindow1`. Убедитесь, что обработчик событий связан с <xref:System.Windows.Forms.HtmlWindow.Unload> событий.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#457](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#457)]
 [!code-vb[System.Windows.Forms.EventExamples#457](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#457)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Url">
      <MemberSignature Language="C#" Value="public Uri Url { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri Url" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Url" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Url As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ Url { Uri ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Url : Uri" Usage="System.Windows.Forms.HtmlWindow.Url" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает URL-адрес, соответствующий текущему элементу, отображаемому в окне.</summary>
        <value>Объект <see cref="T:System.Uri" />, описывающий URL-адрес.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это свойство доступно только для чтения. Чтобы перейти в окно документа, используйте <xref:System.Windows.Forms.HtmlWindow.Navigate%2A> метод.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowFrameElement">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement WindowFrameElement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElement WindowFrameElement" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.WindowFrameElement" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WindowFrameElement As HtmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlElement ^ WindowFrameElement { System::Windows::Forms::HtmlElement ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WindowFrameElement : System.Windows.Forms.HtmlElement" Usage="System.Windows.Forms.HtmlWindow.WindowFrameElement" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает элемент рамки, соответствующий этому окну.</summary>
        <value>
          <see cref="T:System.Windows.Forms.HtmlElement" /> Соответствующий этому окну <c>КАДРА</c> элемента. Если это окно не является рамкой, возвращается значение <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При извлечении `FRAME` элемент из <xref:System.Windows.Forms.HtmlWindow.Frames%2A> коллекции, он возвращает <xref:System.Windows.Forms.HtmlWindow>. Вызовите <xref:System.Windows.Forms.HtmlWindow.WindowFrameElement%2A> для этого объекта, если необходимо получить доступ к атрибутам базового `FRAME` элемент, такой как `SRC` атрибута.  
  
   
  
## Examples  
 Следующий пример кода сравнивает `SRC` атрибут кадров на `FRAMESET` в текущей папке. Если они различаются, в рамках сбрасываются на их исходный URL-адреса.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#8)]
 [!code-vb[System.Windows.Forms.HtmlWindow#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#8)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.UnauthorizedAccessException">Не удается получить доступ к <c>КАДРА</c> элементы или <c>КАДРА</c>этого документа, если <c>КАДРА</c> — в другой зоне, отличной от <c>ФРЕЙМОВ</c> , содержащий его. Полное описание см. в разделе [о межсайтовых сценариев и безопасности] (http://msdn.microsoft.com/library/ms533028.aspx).</permission>
      </Docs>
    </Member>
  </Members>
</Type>