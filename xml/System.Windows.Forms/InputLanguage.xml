<Type Name="InputLanguage" FullName="System.Windows.Forms.InputLanguage">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7aa3e5b9b06c0ed44b9a94f33dc858608165aa7d" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30647768" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class InputLanguage" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit InputLanguage extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.InputLanguage" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class InputLanguage" />
  <TypeSignature Language="C++ CLI" Value="public ref class InputLanguage sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Предоставляет методы и поля для управления языком ввода. Этот класс не наследуется.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Язык ввода является парой макета региональных стандартов, определяет, как сопоставить или знакам языка физической клавиши на клавиатуре. Язык ввода основан на идентификаторе языка ввода Windows, например, возвращаемое функцией Platform SDK `GetKeyboardLayout`. Идентификатор языка ввода называется также дескриптор значение раскладки клавиатуры.  
  
 Используйте `static` методы, предоставленные для поиска всех установленных отображений системы, а также для изменения языка ввода для потока или процесса. Вызовите <xref:System.Windows.Forms.InputLanguage.CurrentInputLanguage%2A> для получения текущего языка ввода. Вызовите <xref:System.Windows.Forms.InputLanguage.DefaultInputLanguage%2A> для входного языка по умолчанию. Вызовите <xref:System.Windows.Forms.InputLanguage.InstalledInputLanguages%2A> для получения всех установленных языков в этой системе. После того как вы список всех установленных языков, используйте <xref:System.Windows.Forms.InputLanguage.CurrentInputLanguage%2A> для изменения текущего языка на другой язык ввода.  
  
   
  
## Examples  
 Следующий пример кода возвращает список установленных языков. В этом примере требуется `textBox1` был создан экземпляр и что `textBox1.MultiLine` ему было присвоено `true`.  
  
 [!code-cpp[Classic InputLanguage Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic InputLanguage Example/CPP/source.cpp#1)]
 [!code-csharp[Classic InputLanguage Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic InputLanguage Example/CS/source.cs#1)]
 [!code-vb[Classic InputLanguage Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic InputLanguage Example/VB/source.vb#1)]  
  
 Следующий пример устанавливает язык ввода по умолчанию как текущий язык ввода. В этом примере требуется `textBox1` был создан экземпляр и что `textBox1.MultiLine` ему было присвоено `true`.  
  
 [!code-cpp[Classic InputLanguage Example#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic InputLanguage Example/CPP/source.cpp#2)]
 [!code-csharp[Classic InputLanguage Example#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic InputLanguage Example/CS/source.cs#2)]
 [!code-vb[Classic InputLanguage Example#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic InputLanguage Example/VB/source.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Culture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo Culture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Culture" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.InputLanguage.Culture" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Culture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ Culture { System::Globalization::CultureInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает язык и региональные параметры для текущего языка ввода.</summary>
        <value>Значение <see cref="T:System.Globalization.CultureInfo" />, представляющее язык и региональные параметры для текущего языка ввода.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем коде примере получается <xref:System.Windows.Forms.InputLanguage> для текущего языка ввода. В текстовом поле отображается этот язык ввода и имя языка ввода.  
  
 Этот код предполагает, что `textBox1` был создан экземпляр.  
  
 [!code-cpp[Classic InputLanguage.Culture Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic InputLanguage.Culture Example/CPP/source.cpp#1)]
 [!code-csharp[Classic InputLanguage.Culture Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic InputLanguage.Culture Example/CS/source.cs#1)]
 [!code-vb[Classic InputLanguage.Culture Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic InputLanguage.Culture Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Windows.Forms.InputLanguage.InstalledInputLanguages" />
      </Docs>
    </Member>
    <Member MemberName="CurrentInputLanguage">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.InputLanguage CurrentInputLanguage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Forms.InputLanguage CurrentInputLanguage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.InputLanguage.CurrentInputLanguage" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CurrentInputLanguage As InputLanguage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Forms::InputLanguage ^ CurrentInputLanguage { System::Windows::Forms::InputLanguage ^ get(); void set(System::Windows::Forms::InputLanguage ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.InputLanguage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает язык ввода для текущего потока.</summary>
        <value>Значение <see cref="T:System.Windows.Forms.InputLanguage" />, предоставляющее язык ввода для текущего потока.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере кода получает и отображает имя текущего языка ввода. Этот код предполагает, что `textBox1` был создан экземпляр.  
  
 [!code-cpp[Classic InputLanguage.CurrentInputLanguage Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic InputLanguage.CurrentInputLanguage Example/CPP/source.cpp#1)]
 [!code-csharp[Classic InputLanguage.CurrentInputLanguage Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic InputLanguage.CurrentInputLanguage Example/CS/source.cs#1)]
 [!code-vb[Classic InputLanguage.CurrentInputLanguage Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic InputLanguage.CurrentInputLanguage Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Язык ввода не опознается системой.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">для доступа к неуправляемому коду. Связанное перечисление: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <altmember cref="P:System.Windows.Forms.InputLanguage.DefaultInputLanguage" />
      </Docs>
    </Member>
    <Member MemberName="DefaultInputLanguage">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.InputLanguage DefaultInputLanguage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Forms.InputLanguage DefaultInputLanguage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.InputLanguage.DefaultInputLanguage" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DefaultInputLanguage As InputLanguage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Forms::InputLanguage ^ DefaultInputLanguage { System::Windows::Forms::InputLanguage ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.InputLanguage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает язык ввода, используемый в системе по умолчанию.</summary>
        <value>Значение <see cref="T:System.Windows.Forms.InputLanguage" />, предоставляющее язык ввода, используемый в системе по умолчанию.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере кода возвращает исходный язык ввода и выводит его имя в текстовое поле. Этот код предполагает, что `textBox1` был создан экземпляр.  
  
 [!code-cpp[Classic InputLanguage.DefaultInputLanguage Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic InputLanguage.DefaultInputLanguage Example/CPP/source.cpp#1)]
 [!code-csharp[Classic InputLanguage.DefaultInputLanguage Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic InputLanguage.DefaultInputLanguage Example/CS/source.cs#1)]
 [!code-vb[Classic InputLanguage.DefaultInputLanguage Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic InputLanguage.DefaultInputLanguage Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.InputLanguage.CurrentInputLanguage" />
        <altmember cref="M:System.Windows.Forms.InputLanguage.Equals(System.Object)" />
        <altmember cref="P:System.Windows.Forms.InputLanguage.LayoutName" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.InputLanguage.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Язык, проверяемый на тождественность.</param>
        <summary>Указывает, тождественны ли два языка ввода.</summary>
        <returns>
          Значение <see langword="true" />, если два языка тождественны; в противном случае — значение <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromCulture">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.InputLanguage FromCulture (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Forms.InputLanguage FromCulture(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.InputLanguage.FromCulture(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromCulture (culture As CultureInfo) As InputLanguage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Forms::InputLanguage ^ FromCulture(System::Globalization::CultureInfo ^ culture);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.InputLanguage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture">Объект <see cref="T:System.Globalization.CultureInfo" />, в котором указаны преобразуемые язык и региональные параметры.</param>
        <summary>Возвращает язык ввода, связанный с указанным языком и региональными параметрами.</summary>
        <returns>Класс <see cref="T:System.Windows.Forms.InputLanguage" />, представляющий ранее выбранный язык ввода.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.InputLanguage.FromCulture%2A> Метод выбирает один из установленных клавиатуры. В частности этот метод выполняет следующие операции:  
  
1.  Получает идентификатор LCID, связанный с `culture`.  
  
2.  Возвращает полный список доступных языков ввода идентификаторов (HKLs) из `GetKeyboardLayoutList` функции.  
  
3.  Находит HKL, который соответствует идентификатору LCID из `culture`, если он есть.  
  
4.  Возвращает язык, связанный с этим дескриптором HKL.  
  
5.  Если нет клавиатуры не найдено, возвращается `null`.  
  
> [!NOTE]
>  <xref:System.Windows.Forms.InputLanguage.FromCulture%2A> Метод никогда не пытается загрузить или установить дополнительные сочетания, если она уже не была установлена для `culture`. Используйте функцию Platform SDK `LoadKeyboardLayout`, чтобы установить дополнительные сочетания.  
  
   
  
## Examples  
 В следующем примере кода задает язык ввода по умолчанию как текущий язык ввода.  
  
 Во-первых, <xref:System.Windows.Forms.InputLanguage.DefaultInputLanguage%2A> вызывается для получения язык системы по умолчанию. Далее, <xref:System.Windows.Forms.InputLanguage.CurrentInputLanguage%2A> вызывается для получения текущего языка ввода. Результаты выводятся в текстовом поле. После этого вызова <xref:System.Windows.Forms.InputLanguage.CurrentInputLanguage%2A> со значением по умолчанию язык ввода изменяется текущий язык ввода по умолчанию. В текстовом поле отображается новый текущий язык ввода.  
  
 Этот код предполагает, что `textBox1` был создан экземпляр.  
  
 [!code-cpp[Classic InputLanguage.FromCulture Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic InputLanguage.FromCulture Example/CPP/source.cpp#1)]
 [!code-csharp[Classic InputLanguage.FromCulture Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic InputLanguage.FromCulture Example/CS/source.cs#1)]
 [!code-vb[Classic InputLanguage.FromCulture Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic InputLanguage.FromCulture Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.InputLanguage.DefaultInputLanguage" />
        <altmember cref="P:System.Windows.Forms.InputLanguage.CurrentInputLanguage" />
        <altmember cref="M:System.Windows.Forms.InputLanguage.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.InputLanguage.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает хэш-код данного языка ввода.</summary>
        <returns>Хэш-код данного языка ввода.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.InputLanguage.Handle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Handle { IntPtr get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает дескриптор для языка ввода.</summary>
        <value>Значение <see cref="T:System.IntPtr" />, представляющее дескриптор данного языка ввода.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере кода получает текущий язык ввода. Затем он вызывает <xref:System.Windows.Forms.InputLanguage.Handle%2A> для получения дескриптора и выводит результаты в текстовом поле. В этом примере требуется `textBox1` был создан экземпляр.  
  
 [!code-cpp[Classic InputLanguage.Handle Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic InputLanguage.Handle Example/CPP/source.cpp#1)]
 [!code-csharp[Classic InputLanguage.Handle Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic InputLanguage.Handle Example/CS/source.cs#1)]
 [!code-vb[Classic InputLanguage.Handle Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic InputLanguage.Handle Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.InputLanguage.CurrentInputLanguage" />
      </Docs>
    </Member>
    <Member MemberName="InstalledInputLanguages">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.InputLanguageCollection InstalledInputLanguages { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Forms.InputLanguageCollection InstalledInputLanguages" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.InputLanguage.InstalledInputLanguages" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InstalledInputLanguages As InputLanguageCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Forms::InputLanguageCollection ^ InstalledInputLanguages { System::Windows::Forms::InputLanguageCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.InputLanguageCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает список всех установленных языков ввода.</summary>
        <value>Массив объектов <see cref="T:System.Windows.Forms.InputLanguage" />, представляющих языки ввода, установленные на компьютере.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере извлекаются все языки ввода, установленные на компьютере и отображаются их имена. Этот код вызывает <xref:System.Windows.Forms.InputLanguage.InstalledInputLanguages%2A> для получения установленных языков. В текстовом поле отображается список имен языков.  
  
 Этот код предполагает, что `textBox1` был создан экземпляр и что `textBox1.MultiLine` ему было присвоено `true`.  
  
 [!code-cpp[Classic InputLanguage.InstalledInputLanguages Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic InputLanguage.InstalledInputLanguages Example/CPP/source.cpp#1)]
 [!code-csharp[Classic InputLanguage.InstalledInputLanguages Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic InputLanguage.InstalledInputLanguages Example/CS/source.cs#1)]
 [!code-vb[Classic InputLanguage.InstalledInputLanguages Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic InputLanguage.InstalledInputLanguages Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.InputLanguage.LayoutName" />
      </Docs>
    </Member>
    <Member MemberName="LayoutName">
      <MemberSignature Language="C#" Value="public string LayoutName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LayoutName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.InputLanguage.LayoutName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LayoutName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ LayoutName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает имя текущей раскладки клавиатуры в том виде, в каком оно отображается в региональных параметрах операционной системы компьютера.</summary>
        <value>Имя раскладки.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере кода возвращает культуру, связанную с текущий язык ввода и имя языка и региональных параметров.  
  
 Во-первых, <xref:System.Windows.Forms.InputLanguage.CurrentInputLanguage%2A> вызывается для получения текущего языка ввода. Затем <xref:System.Windows.Forms.InputLanguage.Culture%2A> вызывается для получения сведений о культуре для данного языка ввода. Наконец <xref:System.Globalization.CultureInfo.EnglishName%2A> извлекается и отображается в текстовом поле.  
  
 [!code-cpp[Classic InputLanguage.LayoutName Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic InputLanguage.LayoutName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic InputLanguage.LayoutName Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic InputLanguage.LayoutName Example/CS/source.cs#1)]
 [!code-vb[Classic InputLanguage.LayoutName Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic InputLanguage.LayoutName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.InputLanguage.CurrentInputLanguage" />
      </Docs>
    </Member>
  </Members>
</Type>