<Type Name="ListBox+ObjectCollection" FullName="System.Windows.Forms.ListBox+ObjectCollection">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2a0311e2f8af66a4fbe04bd6fc80bc9d64cc522e" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30649978" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ListBox.ObjectCollection : System.Collections.IList" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi beforefieldinit ListBox/ObjectCollection extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Collections.IList" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.ListBox.ObjectCollection" />
  <TypeSignature Language="VB.NET" Value="Public Class ListBox.ObjectCollection&#xA;Implements IList" />
  <TypeSignature Language="C++ CLI" Value="public: ref class ListBox::ObjectCollection : System::Collections::IList" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.ListBindable(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Представляет коллекцию позиций элемента управления <see cref="T:System.Windows.Forms.ListBox" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListBox.ObjectCollection> Класс сохраняет элементы, отображаемые в <xref:System.Windows.Forms.ListBox>. Существуют два других коллекций, определенных в <xref:System.Windows.Forms.ListBox> класс, позволяющие определить, какие элементы выбраны в данной коллекции. <xref:System.Windows.Forms.ListBox.SelectedObjectCollection> Класс предоставляет свойства и методы для определения, какие элементы выбраны в <xref:System.Windows.Forms.ListBox.ObjectCollection>, пока <xref:System.Windows.Forms.ListBox.SelectedIndexCollection> позволяет определить индексы <xref:System.Windows.Forms.ListBox.ObjectCollection> выбраны.  
  
 Существует несколько способов добавления элементов в коллекцию. <xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A> Метод обеспечивает возможность добавления объекта в коллекцию. Чтобы добавить несколько объектов в коллекцию, можно создать массив элементов и назначить его для <xref:System.Windows.Forms.ListBox.ObjectCollection.AddRange%2A> метод. Если вы хотите вставить объект в определенное место в коллекции, можно использовать <xref:System.Windows.Forms.ListBox.ObjectCollection.Insert%2A> метода. Чтобы удалить элементы, можно использовать <xref:System.Windows.Forms.ListBox.ObjectCollection.Remove%2A> метода или <xref:System.Windows.Forms.ListBox.ObjectCollection.RemoveAt%2A> метод, если вы знаете, где расположен элемент в коллекции. <xref:System.Windows.Forms.ListBox.ObjectCollection.Clear%2A> Метод позволяет удалить все элементы из коллекции вместо использования <xref:System.Windows.Forms.ListBox.ObjectCollection.Remove%2A> метод для удаления одного элемента за раз.  
  
 Можно управлять элементы <xref:System.Windows.Forms.ListBox> с помощью <xref:System.Windows.Forms.ListControl.DataSource%2A> свойство. Если вы используете <xref:System.Windows.Forms.ListControl.DataSource%2A> свойство для добавления элементов к <xref:System.Windows.Forms.ListBox>, можно просмотреть элементы в <xref:System.Windows.Forms.ListBox> с помощью <xref:System.Windows.Forms.ListBox.Items%2A> свойство, но нельзя добавлять или удалять элементы из списка, используя методы <xref:System.Windows.Forms.ListBox.ObjectCollection>.  
  
 Помимо методов и свойств для добавления и удаления элементов <xref:System.Windows.Forms.ListBox.ObjectCollection> также предоставляет методы для поиска элементов в коллекции. <xref:System.Windows.Forms.ListBox.ObjectCollection.Contains%2A> Метод позволяет определить, является ли объект элемента коллекции. Если известно, что элемент является элементом коллекции, можно использовать <xref:System.Windows.Forms.ListBox.ObjectCollection.IndexOf%2A> метод, чтобы определить, где расположен элемент в коллекции.  
  
   
  
## Examples  
 В следующем примере кода показано, рисуемого владельцем <xref:System.Windows.Forms.ListBox> , установив <xref:System.Windows.Forms.ListBox.DrawMode%2A> свойства `OwnerDrawVariable` значение и обработка <xref:System.Windows.Forms.ListBox.DrawItem> и <xref:System.Windows.Forms.ListBox.MeasureItem> события. Он также демонстрирует параметр <xref:System.Windows.Forms.ListBox.BorderStyle%2A> и <xref:System.Windows.Forms.ListBox.ScrollAlwaysVisible%2A> свойства и с помощью <xref:System.Windows.Forms.ListBox.ObjectCollection.AddRange%2A> метод.  
  
 Чтобы выполнить этот пример, вставьте его в пустую форму, которая импортирует <xref:System.Drawing> пространства имен и <xref:System.Windows.Forms> пространства имен. Вызовите `InitializeOwnerDrawnListBox` из конструктора формы или `Load` метод.  
  
 [!code-cpp[System.Windows.Forms.ListBoxExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListBoxExample/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListBoxExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListBoxExample/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListBoxExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListBoxExample/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.ListBox.SelectedObjectCollection" />
    <altmember cref="T:System.Windows.Forms.ListBox.SelectedIndexCollection" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Инициализирует новый экземпляр <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectCollection (System.Windows.Forms.ListBox owner);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.ListBox owner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ObjectCollection.#ctor(System.Windows.Forms.ListBox)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (owner As ListBox)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ObjectCollection(System::Windows::Forms::ListBox ^ owner);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="owner" Type="System.Windows.Forms.ListBox" />
      </Parameters>
      <Docs>
        <param name="owner">Объект <see cref="T:System.Windows.Forms.ListBox" />, которому принадлежит данная коллекция.</param>
        <summary>Инициализирует новый экземпляр <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Невозможно создать экземпляр этого класса, не связывая его с <xref:System.Windows.Forms.ListBox> элемента управления.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectCollection (System.Windows.Forms.ListBox owner, object[] value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.ListBox owner, object[] value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ObjectCollection.#ctor(System.Windows.Forms.ListBox,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (owner As ListBox, value As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ObjectCollection(System::Windows::Forms::ListBox ^ owner, cli::array &lt;System::Object ^&gt; ^ value);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="owner" Type="System.Windows.Forms.ListBox" />
        <Parameter Name="value" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="owner">Объект <see cref="T:System.Windows.Forms.ListBox" />, которому принадлежит данная коллекция.</param>
        <param name="value">Массив объектов, добавляемых в коллекцию.</param>
        <summary>Инициализирует новый экземпляр <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" />, содержащий массив объектов.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Невозможно создать экземпляр этого класса, не связывая его с <xref:System.Windows.Forms.ListBox> элемента управления.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectCollection (System.Windows.Forms.ListBox owner, System.Windows.Forms.ListBox.ObjectCollection value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.ListBox owner, class System.Windows.Forms.ListBox/ObjectCollection value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ObjectCollection.#ctor(System.Windows.Forms.ListBox,System.Windows.Forms.ListBox.ObjectCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (owner As ListBox, value As ListBox.ObjectCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ObjectCollection(System::Windows::Forms::ListBox ^ owner, System::Windows::Forms::ListBox::ObjectCollection ^ value);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="owner" Type="System.Windows.Forms.ListBox" />
        <Parameter Name="value" Type="System.Windows.Forms.ListBox+ObjectCollection" />
      </Parameters>
      <Docs>
        <param name="owner">Объект <see cref="T:System.Windows.Forms.ListBox" />, которому принадлежит данная коллекция.</param>
        <param name="value">Объект <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" />, содержимое которого копируется в новую коллекцию.</param>
        <summary>Инициализирует новый экземпляр <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" /> на основе другого экземпляра <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Невозможно создать экземпляр этого класса, не связывая его с <xref:System.Windows.Forms.ListBox> элемента управления. Эта версия конструктора позволяет использовать элементы, указанные в существующий экземпляр <xref:System.Windows.Forms.ListBox.ObjectCollection> класс для добавления элементов в коллекцию при ее создании. Этот конструктор можно использовать для использования элементов, указанных в другом <xref:System.Windows.Forms.ListBox> управления с этой коллекцией.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public int Add (object item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Add(object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ObjectCollection.Add(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (item As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Add(System::Object ^ item);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Add(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item">Объект, представляющий элемент для добавления в коллекцию.</param>
        <summary>Добавляет элемент в список позиций <see cref="T:System.Windows.Forms.ListBox" />.</summary>
        <returns>Индекс (начиная с нуля) элемента в коллекции или -1, если был вызван метод <see cref="M:System.Windows.Forms.ListBox.BeginUpdate" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если <xref:System.Windows.Forms.ListBox.Sorted%2A> свойство <xref:System.Windows.Forms.ListBox> равно `true`, элемент вставляется в список в алфавитном порядке. В противном случае — элемент вставляется в конец списка. Для вставки элемента в окне списка в заданной позиции, используйте <xref:System.Windows.Forms.ListBox.ObjectCollection.Insert%2A> метод. Чтобы добавить набор элементов списка в одной операции, используйте <xref:System.Windows.Forms.ListBox.ObjectCollection.AddRange%2A> метод. Если вы хотите использовать <xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A> метод, чтобы добавить большое количество элементов в список, используйте <xref:System.Windows.Forms.ListBox.BeginUpdate%2A> и <xref:System.Windows.Forms.ListBox.EndUpdate%2A> методы, чтобы предотвратить <xref:System.Windows.Forms.ListBox> перерисовку каждый раз, элемент добавляется в список, пока добавлены все элементы в список. При добавлении элементов к <xref:System.Windows.Forms.ListBox>, более эффективно сначала отсортировать элементы, а затем добавлять новые элементы.  
  
 Когда объект добавляется в коллекцию <xref:System.Windows.Forms.ListBox> сначала проверяет, если <xref:System.Windows.Forms.ListControl.DisplayMember%2A> свойство <xref:System.Windows.Forms.ListControl> класс имеет имя элемента из указанного объекта для ссылки при получении текста элемента. Если <xref:System.Windows.Forms.ListControl.DisplayMember%2A> свойство не имеет указанный член, <xref:System.Windows.Forms.ListBox> вызывает <xref:System.Object.ToString%2A> метода объекта, чтобы получить текст для отображения в списке.  
  
   
  
## Examples  
 В следующем примере кода показано, как создать <xref:System.Windows.Forms.ListBox> управления, отображающий несколько элементов в столбцах и может иметь более одного элемента, выбранного в списке элемента управления. Пример кода добавляет 50 позиций <xref:System.Windows.Forms.ListBox> с помощью <xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A> метод <xref:System.Windows.Forms.ListBox.ObjectCollection> класса, а затем выбирает три позиции из списка с помощью <xref:System.Windows.Forms.ListBox.SetSelected%2A> метод. Затем код выводит значения из <xref:System.Windows.Forms.ListBox.SelectedObjectCollection> коллекции (через <xref:System.Windows.Forms.ListBox.SelectedItems%2A> свойства) и <xref:System.Windows.Forms.ListBox.SelectedIndexCollection> (через <xref:System.Windows.Forms.ListBox.SelectedIndices%2A> свойство). Для этого примера требуются, что код является и вызывается из <xref:System.Windows.Forms.Form>.  
  
 [!code-cpp[Classic ListBox Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ListBox Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ListBox Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ListBox Example/CS/source.cs#1)]
 [!code-vb[Classic ListBox Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ListBox Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.SystemException">Недостаточно места для того, чтобы добавить новую позицию в список.</exception>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="item" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddRange">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Добавляет группу элементов в список для ячейки <see cref="T:System.Windows.Forms.ListBox" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public void AddRange (object[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange(object[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ObjectCollection.AddRange(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddRange (items As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddRange(cli::array &lt;System::Object ^&gt; ^ items);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="items">Массив объектов, добавляемый в список.</param>
        <summary>Добавляет массив элементов в список позиций <see cref="T:System.Windows.Forms.ListBox" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если <xref:System.Windows.Forms.ListBox.Sorted%2A> свойство <xref:System.Windows.Forms.ListBox> равно `true`, элементы вставляются в список в алфавитном порядке. В противном случае элементы вставляются в порядке их появления в массиве. Этот метод обычно передается массив <xref:System.String> этому методу могут передаваться объекты, а также массив объектов любого типа. Когда объект добавляется в коллекцию <xref:System.Windows.Forms.ListBox> сначала проверяет, если <xref:System.Windows.Forms.ListControl.DisplayMember%2A> свойство <xref:System.Windows.Forms.ListControl> класс имеет имя элемента из указанного объекта для ссылки при получении текста элемента. Если <xref:System.Windows.Forms.ListControl.DisplayMember%2A> свойство не имеет указанный член, <xref:System.Windows.Forms.ListBox> вызывает <xref:System.Object.ToString%2A> метода объекта, чтобы получить текст для отображения в списке. При использовании этого метода для добавления элементов к <xref:System.Windows.Forms.ListBox>, необходимо вызвать <xref:System.Windows.Forms.ListBox.BeginUpdate%2A> и <xref:System.Windows.Forms.ListBox.EndUpdate%2A> методы для оптимизации производительности. При добавлении элементов к <xref:System.Windows.Forms.ListBox>, более эффективно сначала отсортировать элементы, а затем добавлять новые элементы. Этот метод можно использовать для добавления группы элементов в список или повторно использовать элементы, хранящиеся в другом <xref:System.Windows.Forms.ListBox>.  
  
   
  
## Examples  
 В следующем примере кода показано, рисуемого владельцем <xref:System.Windows.Forms.ListBox> , установив <xref:System.Windows.Forms.ListBox.DrawMode%2A> свойства `OwnerDrawVariable` значение и обработка <xref:System.Windows.Forms.ListBox.DrawItem> и <xref:System.Windows.Forms.ListBox.MeasureItem> события. Он также демонстрирует параметр <xref:System.Windows.Forms.ListBox.BorderStyle%2A> и <xref:System.Windows.Forms.ListBox.ScrollAlwaysVisible%2A> свойства и с помощью <xref:System.Windows.Forms.ListBox.ObjectCollection.AddRange%2A> метод.  
  
 Чтобы выполнить этот пример, вставьте его в пустую форму, которая импортирует <xref:System.Drawing> пространства имен и <xref:System.Windows.Forms> пространства имен. Вызовите `InitializeOwnerDrawnListBox` из конструктора формы или `Load` метод.  
  
 [!code-cpp[System.Windows.Forms.ListBoxExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListBoxExample/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListBoxExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListBoxExample/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListBoxExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListBoxExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListBox.ObjectCollection.Add(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public void AddRange (System.Windows.Forms.ListBox.ObjectCollection value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange(class System.Windows.Forms.ListBox/ObjectCollection value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ObjectCollection.AddRange(System.Windows.Forms.ListBox.ObjectCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddRange (value As ListBox.ObjectCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddRange(System::Windows::Forms::ListBox::ObjectCollection ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Windows.Forms.ListBox+ObjectCollection" />
      </Parameters>
      <Docs>
        <param name="value">
          <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" /> для загрузки в данную коллекцию.</param>
        <summary>Добавляет элементы существующего <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" /> в список позиций <see cref="T:System.Windows.Forms.ListBox" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если <xref:System.Windows.Forms.ListBox.Sorted%2A> свойство <xref:System.Windows.Forms.ListBox> равно `true`, элементы вставляются в список в алфавитном порядке. В противном случае элементы вставляются в порядке их появления в массиве. Этот метод обычно передается массив <xref:System.String> этому методу могут передаваться объекты, а также массив объектов любого типа. Когда объект добавляется в коллекцию <xref:System.Windows.Forms.ListBox> сначала проверяет, если <xref:System.Windows.Forms.ListControl.DisplayMember%2A> свойство <xref:System.Windows.Forms.ListControl> класс имеет имя элемента из указанного объекта для ссылки при получении текста элемента. Если <xref:System.Windows.Forms.ListControl.DisplayMember%2A> свойство не имеет указанный член, <xref:System.Windows.Forms.ListBox> вызывает <xref:System.Object.ToString%2A> метода объекта, чтобы получить текст для отображения в списке.  
  
 При использовании этого метода для добавления элементов к <xref:System.Windows.Forms.ListBox>, необходимо вызвать <xref:System.Windows.Forms.ListBox.BeginUpdate%2A> и <xref:System.Windows.Forms.ListBox.EndUpdate%2A> методы для оптимизации производительности. При добавлении элементов к <xref:System.Windows.Forms.ListBox>, более эффективно сначала отсортировать элементы, а затем добавлять новые элементы. Этот метод можно использовать для повторного использования элементов, которые хранятся в другом <xref:System.Windows.Forms.ListBox>.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListBox.ObjectCollection.Add(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public virtual void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ObjectCollection.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Удаляет все элементы из коллекции.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При удалении элементов из списка теряются все сведения об удаленных элементах. Чтобы удалить один элемент из <xref:System.Windows.Forms.ListBox>, используйте <xref:System.Windows.Forms.ListBox.ObjectCollection.Remove%2A> или <xref:System.Windows.Forms.ListBox.ObjectCollection.RemoveAt%2A> метод.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ObjectCollection.Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Contains(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Объект, представляющий элемент для поиска в коллекции.</param>
        <summary>Определяет, содержится ли указанный элемент в коллекции.</summary>
        <returns>
          Значение <see langword="true" />, если элемент входит в коллекцию; в противном случае — <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListBox.ObjectCollection.Contains%2A> Метод позволяет определить, является ли объект элемента коллекции. Если известно, что элемент является элементом коллекции, можно использовать <xref:System.Windows.Forms.ListBox.ObjectCollection.IndexOf%2A> метод, чтобы определить, где расположен элемент в коллекции.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="value" /> имеет значение <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.ListBox.ObjectCollection.IndexOf(System.Object)" />
        <altmember cref="M:System.Windows.Forms.ListBox.FindString(System.String)" />
        <altmember cref="M:System.Windows.Forms.ListBox.FindStringExact(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (object[] destination, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(object[] destination, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ObjectCollection.CopyTo(System.Object[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (destination As Object(), arrayIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(cli::array &lt;System::Object ^&gt; ^ destination, int arrayIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Object[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="destination">Массив объектов, в который копируются элементы коллекции.</param>
        <param name="arrayIndex">Расположение в конечном массиве, куда копируются элементы коллекции.</param>
        <summary>Копирует коллекцию целиком в заданное место существующего массива объектов.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод можно использовать для объединения элементов из нескольких коллекций в одном массиве. Затем можно использовать этот массив для заполнения содержимого другого <xref:System.Windows.Forms.ListBox> управлять с помощью <xref:System.Windows.Forms.ListBox.ObjectCollection.AddRange%2A> метод <xref:System.Windows.Forms.ListBox.ObjectCollection> класса.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.ObjectCollection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает количество элементов в коллекции.</summary>
        <value>Число элементов в данной коллекции</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это свойство позволяет определить число элементов в <xref:System.Windows.Forms.ListBox>. Это значение затем можно использовать, когда цикла по значениям коллекции, и необходимо указать число итераций для выполнения цикла.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ObjectCollection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает перечислитель для перебора элементов коллекции.</summary>
        <returns>Перечислитель <see cref="T:System.Collections.IEnumerator" />, представляющий коллекцию элементов.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ObjectCollection.IndexOf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (value As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.IndexOf(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Объект, представляющий элемент для поиска в коллекции.</param>
        <summary>Возвращает индекс указанного элемента в коллекции.</summary>
        <returns>Начинающийся с нуля индекс элемента в коллекции; в противном случае -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListBox.ObjectCollection.IndexOf%2A> Метод позволяет определить, где находится элемент в коллекции. Чтобы определить, находится ли элемент в коллекции перед вызовом этого метода, используйте <xref:System.Windows.Forms.ListBox.ObjectCollection.Contains%2A> метод.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="value" /> имеет значение null.</exception>
        <altmember cref="M:System.Windows.Forms.ListBox.ObjectCollection.Contains(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public void Insert (int index, object item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Insert(int32 index, object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ObjectCollection.Insert(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Insert (index As Integer, item As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Insert(int index, System::Object ^ item);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Insert(System.Int32,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">Отсчитываемое от нуля расположение в индексе для вставки элемента.</param>
        <param name="item">Объект, который представляет элемент для вставки.</param>
        <summary>Вставляет элемент в список по указанному индексу.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод позволяет вставить элемент в указанной позиции в <xref:System.Windows.Forms.ListBox>. Если <xref:System.Windows.Forms.ListBox.Sorted%2A> свойство <xref:System.Windows.Forms.ListBox> имеет значение true, этот элемент добавляется в правильном положении в отсортированный список независимо от значения, указанные в `index` параметра. Когда объект добавляется в коллекцию <xref:System.Windows.Forms.ListBox> сначала проверяет, если <xref:System.Windows.Forms.ListControl.DisplayMember%2A> свойство <xref:System.Windows.Forms.ListControl> класс имеет имя элемента из указанного объекта для ссылки при получении текста элемента. Если <xref:System.Windows.Forms.ListControl.DisplayMember%2A> свойство не имеет указанный член, <xref:System.Windows.Forms.ListBox> вызывает <xref:System.Object.ToString%2A> метода объекта, чтобы получить текст для отображения в списке.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="index" /> меньше нуля или больше, чем значение свойства <see cref="P:System.Windows.Forms.ListBox.ObjectCollection.Count" /> класса <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="item" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.ObjectCollection.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, указывающее, является ли коллекция доступной только для чтения.</summary>
        <value>
          Значение <see langword="true" />, если данная коллекция доступна только для чтения; в противном случае — значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Данное свойство всегда имеет `false` для этой коллекции.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual object this[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.ObjectCollection.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overridable Property Item(index As Integer) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Object ^ default[int] { System::Object ^ get(int index); void set(int index, System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Индекс элемента коллекции, который требуется возвратить или задать.</param>
        <summary>Получает или задает элемент, расположенный в коллекции по указанному индексу.</summary>
        <value>Объект, представляющий элемент, который расположен в коллекции по указанному индексу.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод можно использовать для получения <xref:System.Windows.Forms.ListBox> элемента, хранящегося в определенном месте в коллекции. Чтобы определить индекс заданного элемента в коллекции, используйте <xref:System.Windows.Forms.ListBox.ObjectCollection.IndexOf%2A> метод.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="index" /> меньше нуля либо больше или равен значению свойства <see cref="P:System.Windows.Forms.ListBox.ObjectCollection.Count" /> класса <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Remove(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ObjectCollection.Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Remove(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Объект, представляющий элемент, который удаляется из коллекции.</param>
        <summary>Удаляет указанный объект из коллекции.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При удалении элемента из списка индексы изменяются последующие элементы в списке. Все сведения об удаленных элементах удаляются. Этот метод можно использовать для удаления конкретного элемента в списке, указав фактическое элемента, удаляемого из списка. Чтобы указать индекс элемента, а не сам элемент, используйте <xref:System.Windows.Forms.ListBox.ObjectCollection.RemoveAt%2A> метод. Чтобы удалить все элементы из списка, используйте <xref:System.Windows.Forms.ListBox.ObjectCollection.Clear%2A> метод.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListBox.ObjectCollection.Clear" />
        <altmember cref="M:System.Windows.Forms.ListBox.ObjectCollection.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ObjectCollection.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveAt(int index);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Отсчитываемый от нуля индекс удаляемого элемента.</param>
        <summary>Удаляет из коллекции элемент по указанному индексу.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При удалении элемента из списка индексы изменяются последующие элементы в списке. Все сведения об удаленных элементах удаляются. Этот метод можно использовать для удаления конкретного элемента в списке, указав индекс элемента, удаляемого из списка. Чтобы указать удаляемый элемент вместо индекса для элемента, используйте <xref:System.Windows.Forms.ListBox.ObjectCollection.Remove%2A> метод. Чтобы удалить все элементы из списка, используйте <xref:System.Windows.Forms.ListBox.ObjectCollection.Clear%2A> метод.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется использование <xref:System.Windows.Forms.ListBox.SelectedIndex%2A> свойство с <xref:System.Windows.Forms.ListBox.TopIndex%2A> свойство, чтобы переместить выделенный элемент в верхнюю часть списка элементов в области отображения <xref:System.Windows.Forms.ListBox>. Далее в примере демонстрируется удаление элементов с помощью <xref:System.Windows.Forms.ListBox.ObjectCollection.RemoveAt%2A> метод <xref:System.Windows.Forms.ListBox.ObjectCollection?displayProperty=nameWithType> , а также для очистки всех выделения с помощью <xref:System.Windows.Forms.ListBox.ClearSelected%2A> метод. Код сначала перемещает выбранный элемент <xref:System.Windows.Forms.ListBox> в верхнюю часть списка. Затем удаляет все элементы, прежде чем текущий выбранный элемент и удаляет все выбранные элементы в <xref:System.Windows.Forms.ListBox>. В этом примере требуется, <xref:System.Windows.Forms.ListBox> содержащие элементы добавляется в форму и что элемент в данный момент выбран в <xref:System.Windows.Forms.ListBox>.  
  
 [!code-cpp[ListBox.SelectedIndex#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.SelectedIndex/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.SelectedIndex#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.SelectedIndex/CS/form1.cs#1)]
 [!code-vb[ListBox.SelectedIndex#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.SelectedIndex/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="index" /> меньше нуля либо больше или равен значению свойства <see cref="P:System.Windows.Forms.ListBox.ObjectCollection.Count" /> класса <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" />.</exception>
        <altmember cref="M:System.Windows.Forms.ListBox.ObjectCollection.Clear" />
        <altmember cref="M:System.Windows.Forms.ListBox.ObjectCollection.Remove(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array destination, int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array destination, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ObjectCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub CopyTo (destination As Array, index As Integer) Implements ICollection.CopyTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ destination, int index) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="destination">Одномерный массив, в который копируются элементы из коллекции <see cref="T:System.Collections.ICollection" />. Индекс в массиве должен начинаться с нуля.</param>
        <param name="index">Индекс (отсчет с нуля) в массиве, с которого начинается копирование.</param>
        <summary>Копирует элементы коллекции в массив начиная с определенного индекса в массиве.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот член представляет собой явную реализацию члена интерфейса. Он может использоваться, только если экземпляр <xref:System.Windows.Forms.ListBox.ObjectCollection> приведен к типу интерфейса <xref:System.Collections.ICollection>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArrayTypeMismatchException">Установленный массив не совместим с элементами в коллекции <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.ObjectCollection.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.ICollection.IsSynchronized { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Описание этого члена см. в разделе <see cref="P:System.Collections.ICollection.IsSynchronized" />.</summary>
        <value>
          Значение <see langword="false" /> во всех случаях.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот член представляет собой явную реализацию члена интерфейса. Он может использоваться, только если экземпляр <xref:System.Windows.Forms.ListBox.ObjectCollection> приведен к типу интерфейса <xref:System.Collections.ICollection>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.ObjectCollection.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.ICollection.SyncRoot { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Описание этого члена см. в разделе <see cref="P:System.Collections.ICollection.SyncRoot" />.</summary>
        <value>Объект, который может использоваться для синхронизации доступа к <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот член представляет собой явную реализацию члена интерфейса. Он может использоваться, только если экземпляр <xref:System.Windows.Forms.ListBox.ObjectCollection> приведен к типу интерфейса <xref:System.Collections.ICollection>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.Add(object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ObjectCollection.System#Collections#IList#Add(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Add (item As Object) As Integer Implements IList.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.Add(System::Object ^ item) = System::Collections::IList::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Add(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item">Объект, который должен быть добавлен в коллекцию <see cref="T:System.Windows.Forms.ListBox" />.</param>
        <summary>Добавляет объект в класс <see cref="T:System.Windows.Forms.ListBox" />.</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот член представляет собой явную реализацию члена интерфейса. Он может использоваться, только если экземпляр <xref:System.Windows.Forms.ListBox.ObjectCollection> приведен к типу интерфейса <xref:System.Collections.IList>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="item" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Текущий объект <see cref="T:System.Windows.Forms.ListBox" /> имеет источник данных.</exception>
        <exception cref="T:System.SystemException">Недостаточно места для сохранения нового элемента.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.ObjectCollection.System#Collections#IList#IsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsFixedSize As Boolean Implements IList.IsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.IList.IsFixedSize { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Описание этого члена см. в разделе <see cref="P:System.Collections.IList.IsFixedSize" />.</summary>
        <value>
          Значение <see langword="true" /> во всех случаях.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот член представляет собой явную реализацию члена интерфейса. Он может использоваться, только если экземпляр <xref:System.Windows.Forms.ListBox.ObjectCollection> приведен к типу интерфейса <xref:System.Collections.IList>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>