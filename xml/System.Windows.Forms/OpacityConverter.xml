<Type Name="OpacityConverter" FullName="System.Windows.Forms.OpacityConverter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="90ebdf7f25cdff9c8dfdf8f164f91373d039f150" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37509341" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class OpacityConverter : System.ComponentModel.TypeConverter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit OpacityConverter extends System.ComponentModel.TypeConverter" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.OpacityConverter" />
  <TypeSignature Language="VB.NET" Value="Public Class OpacityConverter&#xA;Inherits TypeConverter" />
  <TypeSignature Language="C++ CLI" Value="public ref class OpacityConverter : System::ComponentModel::TypeConverter" />
  <TypeSignature Language="F#" Value="type OpacityConverter = class&#xA;    inherit TypeConverter" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.TypeConverter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides a type converter to convert opacity values to and from a string.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Как правило, вы не непосредственно создать экземпляр объекта <xref:System.Windows.Forms.OpacityConverter>. Вместо этого вызовите <xref:System.ComponentModel.TypeDescriptor.GetConverter%2A> метод <xref:System.ComponentModel.TypeDescriptor> класса. Дополнительные сведения о преобразователях типов и просмотреть примеры кода, см. в разделе <xref:System.ComponentModel.TypeConverter> базового класса и [как: реализация преобразователя типов](http://msdn.microsoft.com/library/90373a3f-d8c8-492d-841c-945d62393c56).  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Object)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OpacityConverter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.OpacityConverter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OpacityConverter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes an instance of the <see cref="T:System.Windows.Forms.OpacityConverter" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это конструктор по умолчанию, предоставляемый компилятором.  
  
 Как правило, вы не непосредственно создать экземпляр объекта <xref:System.Windows.Forms.OpacityConverter>. Вместо этого необходимо вызвать <xref:System.ComponentModel.TypeDescriptor.GetConverter%2A> метод <xref:System.ComponentModel.TypeDescriptor> класса. Дополнительные сведения см. в примерах кода в <xref:System.ComponentModel.TypeConverter> базового класса.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CanConvertFrom">
      <MemberSignature Language="C#" Value="public override bool CanConvertFrom (System.ComponentModel.ITypeDescriptorContext context, Type sourceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanConvertFrom(class System.ComponentModel.ITypeDescriptorContext context, class System.Type sourceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.OpacityConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CanConvertFrom (context As ITypeDescriptorContext, sourceType As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool CanConvertFrom(System::ComponentModel::ITypeDescriptorContext ^ context, Type ^ sourceType);" />
      <MemberSignature Language="F#" Value="abstract member CanConvertFrom : System.ComponentModel.ITypeDescriptorContext * Type -&gt; bool&#xA;override this.CanConvertFrom : System.ComponentModel.ITypeDescriptorContext * Type -&gt; bool" Usage="opacityConverter.CanConvertFrom (context, sourceType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="sourceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="context">A <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides information about the context of a type converter.</param>
        <param name="sourceType">The <see cref="T:System.Type" /> that represents the type you want to convert from.</param>
        <summary>Returns a value indicating whether this converter can convert an object of the specified source type to the native type of the converter that uses the specified context.</summary>
        <returns>
          <see langword="true" /> if this converter can perform the conversion; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `sourceType` Должен быть <xref:System.String>.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Переопределите этот метод для предоставления требованиями к преобразованию.  Можно использовать <paramref name="context" /> параметр для получения дополнительных сведений о среде, из которой вызывается этот преобразователь. Этот параметр может принимать <see langword="null" />, поэтому всегда следует проверять содержимое. Кроме того, свойства <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> могут также возвращать <see langword="null" />.</para>
        </block>
        <altmember cref="T:System.ComponentModel.TypeConverter" />
        <altmember cref="Overload:System.Windows.Forms.OpacityConverter.ConvertFrom" />
      </Docs>
    </Member>
    <Member MemberName="ConvertFrom">
      <MemberSignature Language="C#" Value="public override object ConvertFrom (System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ConvertFrom(class System.ComponentModel.ITypeDescriptorContext context, class System.Globalization.CultureInfo culture, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.OpacityConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ConvertFrom (context As ITypeDescriptorContext, culture As CultureInfo, value As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ ConvertFrom(System::ComponentModel::ITypeDescriptorContext ^ context, System::Globalization::CultureInfo ^ culture, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member ConvertFrom : System.ComponentModel.ITypeDescriptorContext * System.Globalization.CultureInfo * obj -&gt; obj&#xA;override this.ConvertFrom : System.ComponentModel.ITypeDescriptorContext * System.Globalization.CultureInfo * obj -&gt; obj" Usage="opacityConverter.ConvertFrom (context, culture, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="context">A <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides information about the context of a type converter.</param>
        <param name="culture">The locale information for the conversion.</param>
        <param name="value">The object to convert.</param>
        <summary>Converts the specified object to the converter's native type.</summary>
        <returns>An <see cref="T:System.Object" /> that represents the converted <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.OpacityConverter.ConvertFrom%2A> Метод является специальным для преобразования <xref:System.String> значения, представляющие процентных долей или дробные десятичные значения с соответствующим <xref:System.Double> значения, которые представляют непрозрачности в процентах. Типов, отличных от <xref:System.String> передаются в реализацию базового класса этого метода.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">The object was not a supported type for the conversion.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> could not be properly converted to type <see cref="T:System.Double" />.  -or-  The resulting converted <paramref name="value" /> was less than zero percent or greater than one hundred percent.</exception>
        <block subset="none" type="overrides">
          <para>Переопределите этот метод для предоставления требованиями к преобразованию.  Можно использовать <paramref name="context" /> параметр для получения дополнительных сведений о среде, из которой вызывается этот преобразователь. Этот параметр может принимать <see langword="null" />, поэтому всегда следует проверять содержимое. Кроме того, свойства <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> могут также возвращать <see langword="null" />.</para>
        </block>
        <altmember cref="T:System.ComponentModel.TypeConverter" />
        <altmember cref="Overload:System.Windows.Forms.OpacityConverter.CanConvertFrom" />
        <altmember cref="Overload:System.Windows.Forms.OpacityConverter.ConvertTo" />
      </Docs>
    </Member>
    <Member MemberName="ConvertTo">
      <MemberSignature Language="C#" Value="public override object ConvertTo (System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, Type destinationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ConvertTo(class System.ComponentModel.ITypeDescriptorContext context, class System.Globalization.CultureInfo culture, object value, class System.Type destinationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.OpacityConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ConvertTo (context As ITypeDescriptorContext, culture As CultureInfo, value As Object, destinationType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ ConvertTo(System::ComponentModel::ITypeDescriptorContext ^ context, System::Globalization::CultureInfo ^ culture, System::Object ^ value, Type ^ destinationType);" />
      <MemberSignature Language="F#" Value="abstract member ConvertTo : System.ComponentModel.ITypeDescriptorContext * System.Globalization.CultureInfo * obj * Type -&gt; obj&#xA;override this.ConvertTo : System.ComponentModel.ITypeDescriptorContext * System.Globalization.CultureInfo * obj * Type -&gt; obj" Usage="opacityConverter.ConvertTo (context, culture, value, destinationType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="destinationType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="context">A <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides information about the context of a type converter.</param>
        <param name="culture">The locale information for the conversion.</param>
        <param name="value">The value to convert.</param>
        <param name="destinationType">The type to convert the object to.</param>
        <summary>Converts from the converter's native type to a value of the destination type.</summary>
        <returns>An <see cref="T:System.Object" /> that represents the converted <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.OpacityConverter.ConvertTo%2A> Метод является специальным для преобразования целочисленных значений к их <xref:System.String> представления в процентах. Другие типы передаются в реализацию базового класса этого метода.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationType" /> is <see langword="null" />.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="value" /> cannot be converted to the <paramref name="destinationType" />.</exception>
        <block subset="none" type="overrides">
          <para>Переопределите этот метод для предоставления требованиями к преобразованию.  Можно использовать <paramref name="context" /> параметр для получения дополнительных сведений о среде, из которой вызывается этот преобразователь. Этот параметр может принимать <see langword="null" />, поэтому всегда следует проверять содержимое. Кроме того, свойства <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> могут также возвращать <see langword="null" />.  Результирующий объект имеет <see cref="T:System.String" /> процентной непрозрачности.</para>
        </block>
        <altmember cref="Overload:System.Windows.Forms.OpacityConverter.CanConvertFrom" />
        <altmember cref="Overload:System.Windows.Forms.OpacityConverter.ConvertFrom" />
      </Docs>
    </Member>
  </Members>
</Type>