<Type Name="SendKeys" FullName="System.Windows.Forms.SendKeys">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b6b90a41865a14f9941de6661b51f1a014e0d0ae" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36514855" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SendKeys" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi SendKeys extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.SendKeys" />
  <TypeSignature Language="VB.NET" Value="Public Class SendKeys" />
  <TypeSignature Language="C++ CLI" Value="public ref class SendKeys" />
  <TypeSignature Language="F#" Value="type SendKeys = class" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Предоставляет методы для отправки приложению сообщений о нажатиях клавиш.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте <xref:System.Windows.Forms.SendKeys> для отправки нажатий клавиш и их сочетаний активному приложению. Для этого класса невозможно создание экземпляров. Отправка нажатия клавиши в класс и сразу же продолжить выполнение программы, используйте <xref:System.Windows.Forms.SendKeys.Send%2A>. Чтобы дождаться все процессы, запущенные нажатие клавиши, используйте <xref:System.Windows.Forms.SendKeys.SendWait%2A>.  
  
 Каждый раздел будет представлен один или несколько символов. Чтобы указать одиночный знак клавиатуры, используйте сам символ. Например для представления буквы A, передайте строку «A» методу. Чтобы представить несколько символов, добавление к предыдущему каждый дополнительный символ. Для представления буквы A, B и C, укажите параметр от «ABC».  
  
 Знак плюс (+), знак вставки (^), знак процента (%), тильда (~) и скобки () имеют специальное значение для <xref:System.Windows.Forms.SendKeys>. Чтобы указать один из этих символов, его следует заключить в фигурные скобки ({}). Например чтобы указать знак «плюс», используйте «{+}». Чтобы указать фигурные скобки, используйте «{{}«и»{}}». Квадратные скобки ([]) не имеют особого значения для <xref:System.Windows.Forms.SendKeys>, но их необходимо заключить в фигурные скобки. В других приложениях квадратные скобки имеют специальное значение, которое может быть значительно при возникновении динамический обмен данными (DDE).  
  
> [!CAUTION]
>  Если приложение предназначено для международного использования с различными клавиатурами, применение метода <xref:System.Windows.Forms.SendKeys.Send%2A> может иметь непредсказуемые результаты и его следует избегать.  
  
 Чтобы указать символы, которые не отображаются при нажатии клавиши, такие как ввод или TAB и ключи, которые представляют действия, а не символы, используйте коды в следующей таблице.  
  
|Ключ|Код|  
|---------|----------|  
|СТИРАНИЕ НАЗАД|{BACKSPACE}, {BS} или {BKSP}|  
|BREAK|{РАЗРЫВ}|  
|CAPS LOCK|{CAPSLOCK}|  
|DEL или DELETE|{Удаление} или {DEL}|  
|СТРЕЛКА ВНИЗ|{СПИСОК}|  
|END|{КОНЕЦ}|  
|ВВОД|{Введите} или ~|  
|ESC|{ESC}|  
|СПРАВКА|{HELP}|  
|ГЛАВНАЯ|{ДОМАШНЕЙ}|  
|МОДУЛИ или INSERT|{Вставить} или {модули}|  
|СТРЕЛКА ВЛЕВО|{LEFT}|  
|NUM LOCK|{NUMLOCK}|  
|PAGE DOWN|{PGDN}|  
|PAGE UP|{PGUP}|  
|ПЕЧАТЬ ЭКРАНА|{PRTSC} (зарезервировано для будущего использования)|  
|СТРЕЛКА ВПРАВО|{СПРАВА}|  
|SCROLL LOCK|{SCROLLLOCK}|  
|TAB|{ВКЛАДКИ}|  
|СТРЕЛКА ВВЕРХ|{КОПИРОВАНИЕ}|  
|F1|{F1}|  
|F2|{F2}|  
|F3|{F3}|  
|F4|{F4}|  
|F5|{F5}|  
|F6|{F6}|  
|F7|{F7}|  
|F8|{F8}|  
|F9|{F9}|  
|F10|{F10}|  
|F11|{F11}|  
|F12|{F12}|  
|F13|{F13}|  
|F14|{F14}|  
|F15|{F15}|  
|F16|{F16}|  
|Добавить клавиатуре|{ADD}|  
|Вычитание клавиатуре|{ВЫЧЕСТЬ}|  
|На цифровой клавиатуре|{УМНОЖИТЬ}|  
|Деление на цифровой клавиатуре|{ДЕЛЕНИЯ}|  
  
 Для указания ключей, в сочетании с любым сочетанием клавиш SHIFT, CTRL и ALT, перед кодом клавиши один или несколько из следующих кодов.  
  
|Ключ|Код|  
|---------|----------|  
|SHIFT|+|  
|CTRL|^|  
|ALT|%|  
  
 Чтобы указать, что любое сочетание клавиш SHIFT, CTRL и ALT должно проводиться нажатой несколько ключей, заключите код для этих ключей в скобки. Например, чтобы указать, удерживая нажатой клавишу SHIFT, E и C нажимаются, используйте «+ (EC)». Чтобы указать, удерживая нажатой клавишу SHIFT, нажата E, следуют C без СМЕНЫ, используйте «+ EC».  
  
 Чтобы указать повторяющихся ключей, используйте формат {клавиша число}. Должен стоять пробел между ключом и номер. Например {LEFT 42} означает нажмите клавишу Стрелка влево 42 раза; {h 10} означает нажимайте клавишу H 10 раз.  
  
> [!NOTE]
>  Поскольку управляемого метода активации другого приложения, можно использовать этот класс в текущем приложении или использовать собственные методы Windows, такие как `FindWindow` и `SetForegroundWindow`, для принудительной установки фокуса на другие приложения.  
  
> [!NOTE]
>  Класс <xref:System.Windows.Forms.SendKeys> был обновлен в .NET Framework 3.0, что позволило использовать его в приложениях, работающих в Windows Vista. Усиленная система безопасности Windows Vista (известная как контроль учетных записей или UAC) не позволяет предыдущей реализации работать должным образом.  
>   
>  Класс <xref:System.Windows.Forms.SendKeys> подвержен проблемам со временем, которые пришлось решать некоторым разработчикам. Обновленная реализация по-прежнему подвержена этим проблемам, но она работает немного быстрее, поэтому существующие решения может потребоваться переработать. Класс <xref:System.Windows.Forms.SendKeys> сначала пытается использовать предыдущую реализацию, и если это не удается, использует новую реализацию. В результате класс <xref:System.Windows.Forms.SendKeys> может работать по-разному в разных операционных системах. Кроме того, при использовании новой реализации класса <xref:System.Windows.Forms.SendKeys> метод <xref:System.Windows.Forms.SendKeys.SendWait%2A> не будет дожидаться обработки сообщений, если они отправляются другому процессу.  
>   
>  Если необходимо обеспечить согласованное поведение приложения независимо от операционной системы, можно заставить класс <xref:System.Windows.Forms.SendKeys> использовать новую реализацию, добавив указанный ниже параметр приложения в файл app.config.  
>   
>  `<appSettings>`  
>   
>  `<add key="SendKeys" value="SendInput"/>`  
>   
>  `</appSettings>`  
>   
>  Для принудительного использования классом <xref:System.Windows.Forms.SendKeys> предыдущей реализации задайте значение `"JournalHook"` .  
  
   
  
## Examples  
 В следующем примере кода показано, как использовать метод <xref:System.Windows.Forms.SendKeys.Send%2A>. Чтобы запустить пример, вставьте следующий код в форму с именем Form1 содержит кнопку с именем Button1. Убедитесь, что событие щелчка связаны с их методы обработки событий в этом примере. Элемента управления button <xref:System.Windows.Forms.Control.TabIndex%2A> свойство должно быть равным 0. Если пример выполняется, дважды щелкните форму, чтобы вызвать нажатия кнопки событий.  
  
 [!code-cpp[System.Windows.Forms.SendKeys#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.SendKeys#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.SendKeys#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public static void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.SendKeys.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Flush();" />
      <MemberSignature Language="F#" Value="static member Flush : unit -&gt; unit" Usage="System.Windows.Forms.SendKeys.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Обрабатывает все сообщения Windows, находящиеся в настоящий момент в очереди сообщений.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте <xref:System.Windows.Forms.SendKeys.Flush%2A> ожидания для приложения для обработки нажатия клавиш и другие сообщения операционной системы, которые находятся в очереди сообщений. Это эквивалентно вызову <xref:System.Windows.Forms.Application.DoEvents%2A?displayProperty=nameWithType> пока отсутствуют дополнительные ключи для обработки.  
  
> [!NOTE]
>  Поскольку управляемого метода активации другого приложения, можно использовать этот класс в текущем приложении или использовать собственные методы Windows, такие как `FindWindow` и `SetForegroundWindow`, для принудительной установки фокуса на другие приложения.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public static void Send (string keys);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Send(string keys) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.SendKeys.Send(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Send (keys As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Send(System::String ^ keys);" />
      <MemberSignature Language="F#" Value="static member Send : string -&gt; unit" Usage="System.Windows.Forms.SendKeys.Send keys" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="keys">Строка, содержащая отправляемые данные о нажатиях клавиш.</param>
        <summary>Посылает сообщения о нажатии клавиш активному приложению.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Каждый раздел будет представлен один или несколько символов. Чтобы указать одиночный знак клавиатуры, используйте сам символ. Например для представления буквы A, передайте строку «A» методу. Чтобы представить несколько символов, добавление к предыдущему каждый дополнительный символ. Для представления буквы A, B и C, укажите параметр от «ABC».  
  
 Знак плюс (+), знак вставки (^), знак процента (%), тильда (~) и скобки () имеют специальное значение для <xref:System.Windows.Forms.SendKeys>. Чтобы указать один из этих символов, его следует заключить в фигурные скобки ({}). Например чтобы указать знак «плюс», используйте «{+}». Чтобы указать фигурные скобки, используйте «{{}«и»{}}». Квадратные скобки ([]) не имеют особого значения для <xref:System.Windows.Forms.SendKeys>, но их необходимо заключить в фигурные скобки. В других приложениях квадратные скобки имеют специальное значение, которое может быть значительно при возникновении динамический обмен данными (DDE).  
  
> [!CAUTION]
>  Если приложение предназначено для международного использования с различными клавиатурами, применение метода <xref:System.Windows.Forms.SendKeys.Send%2A> может иметь непредсказуемые результаты и его следует избегать.  
  
 Чтобы указать символы, которые не отображаются при нажатии клавиши, такие как ввод или TAB и ключи, которые представляют действия, а не символы, используйте коды в следующей таблице.  
  
|Ключ|Код|  
|---------|----------|  
|СТИРАНИЕ НАЗАД|{BACKSPACE}, {BS} или {BKSP}|  
|BREAK|{РАЗРЫВ}|  
|CAPS LOCK|{CAPSLOCK}|  
|DEL или DELETE|{Удаление} или {DEL}|  
|СТРЕЛКА ВНИЗ|{СПИСОК}|  
|END|{КОНЕЦ}|  
|ВВОД|{Введите} или ~|  
|ESC|{ESC}|  
|СПРАВКА|{HELP}|  
|ГЛАВНАЯ|{ДОМАШНЕЙ}|  
|МОДУЛИ или INSERT|{Вставить} или {модули}|  
|СТРЕЛКА ВЛЕВО|{LEFT}|  
|NUM LOCK|{NUMLOCK}|  
|PAGE DOWN|{PGDN}|  
|PAGE UP|{PGUP}|  
|ПЕЧАТЬ ЭКРАНА|{PRTSC} (зарезервировано для будущего использования)|  
|СТРЕЛКА ВПРАВО|{СПРАВА}|  
|SCROLL LOCK|{SCROLLLOCK}|  
|TAB|{ВКЛАДКИ}|  
|СТРЕЛКА ВВЕРХ|{КОПИРОВАНИЕ}|  
|F1|{F1}|  
|F2|{F2}|  
|F3|{F3}|  
|F4|{F4}|  
|F5|{F5}|  
|F6|{F6}|  
|F7|{F7}|  
|F8|{F8}|  
|F9|{F9}|  
|F10|{F10}|  
|F11|{F11}|  
|F12|{F12}|  
|F13|{F13}|  
|F14|{F14}|  
|F15|{F15}|  
|F16|{F16}|  
|Добавить клавиатуре|{ADD}|  
|Вычитание клавиатуре|{ВЫЧЕСТЬ}|  
|На цифровой клавиатуре|{УМНОЖИТЬ}|  
|Деление на цифровой клавиатуре|{ДЕЛЕНИЯ}|  
  
 Для указания ключей, в сочетании с любым сочетанием клавиш SHIFT, CTRL и ALT, перед кодом клавиши один или несколько из следующих кодов.  
  
|Ключ|Код|  
|---------|----------|  
|SHIFT|+|  
|CTRL|^|  
|ALT|%|  
  
 Чтобы указать, что любое сочетание клавиш SHIFT, CTRL и ALT должно проводиться нажатой несколько ключей, заключите код для этих ключей в скобки. Например, чтобы указать, удерживая нажатой клавишу SHIFT, E и C нажимаются, используйте «+ (EC)». Чтобы указать, удерживая нажатой клавишу SHIFT, нажата E, следуют C без СМЕНЫ, используйте «+ EC».  
  
 Чтобы указать повторяющихся ключей, используйте формат {клавиша число}. Должен стоять пробел между ключом и номер. Например {LEFT 42} означает нажмите клавишу Стрелка влево 42 раза; {h 10} означает нажимайте клавишу H 10 раз.  
  
> [!NOTE]
>  Поскольку управляемого метода активации другого приложения, можно использовать этот класс в текущем приложении или использовать собственные методы Windows, такие как `FindWindow` и `SetForegroundWindow`, для принудительной установки фокуса на другие приложения.  
  
> [!NOTE]
>  Класс <xref:System.Windows.Forms.SendKeys> был обновлен в .NET Framework 3.0, что позволило использовать его в приложениях, работающих в Windows Vista. Усиленная система безопасности Windows Vista (известная как контроль учетных записей или UAC) не позволяет предыдущей реализации работать должным образом.  
>   
>  Класс <xref:System.Windows.Forms.SendKeys> подвержен проблемам со временем, которые пришлось решать некоторым разработчикам. Обновленная реализация по-прежнему подвержена этим проблемам, но она работает немного быстрее, поэтому существующие решения может потребоваться переработать. Класс <xref:System.Windows.Forms.SendKeys> сначала пытается использовать предыдущую реализацию, и если это не удается, использует новую реализацию. В результате класс <xref:System.Windows.Forms.SendKeys> может работать по-разному в разных операционных системах. Кроме того, при использовании новой реализации класса <xref:System.Windows.Forms.SendKeys> метод <xref:System.Windows.Forms.SendKeys.SendWait%2A> не будет дожидаться обработки сообщений, если они отправляются другому процессу.  
>   
>  Если необходимо обеспечить согласованное поведение приложения независимо от операционной системы, можно заставить класс <xref:System.Windows.Forms.SendKeys> использовать новую реализацию, добавив указанный ниже параметр приложения в файл app.config.  
>   
>  `<appSettings>`  
>   
>  `<add key="SendKeys" value="SendInput"/>`  
>   
>  `</appSettings>`  
>   
>  Для принудительного использования классом <xref:System.Windows.Forms.SendKeys> предыдущей реализации задайте значение `"JournalHook"` .  
  
   
  
## Examples  
 В следующем примере кода демонстрируется использование <xref:System.Windows.Forms.SendKeys.Send%2A> метода. Чтобы запустить пример, вставьте следующий код в форму с именем Form1 содержит кнопку с именем Button1. Убедитесь, что событие щелчка связаны с их методы обработки событий в этом примере. Элемента управления button <xref:System.Windows.Forms.Control.TabIndex%2A> свойство должно быть равным 0. Если пример выполняется, дважды щелкните форму, чтобы вызвать нажатия кнопки событий.  
  
 [!code-cpp[System.Windows.Forms.SendKeys#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.SendKeys#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.SendKeys#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Отсутствует активное приложение для отправки сообщений о нажатии клавиш.</exception>
        <exception cref="T:System.ArgumentException">Объект <paramref name="keys" /> не представляет допустимые сообщения о нажатии клавиш.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">для неуправляемого кода для вызова этого метода. Связанное перечисление: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendWait">
      <MemberSignature Language="C#" Value="public static void SendWait (string keys);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SendWait(string keys) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.SendKeys.SendWait(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SendWait (keys As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SendWait(System::String ^ keys);" />
      <MemberSignature Language="F#" Value="static member SendWait : string -&gt; unit" Usage="System.Windows.Forms.SendKeys.SendWait keys" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="keys">Строка, содержащая отправляемые данные о нажатиях клавиш.</param>
        <summary>Отправляет данные об указанных клавишах активному приложению и ожидает окончания обработки сообщений.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте <xref:System.Windows.Forms.SendKeys.SendWait%2A> для отправки нажатий на клавиши или сочетания клавиш активному приложению и дождитесь сообщения могут обрабатываться нажатие клавиши. Этот метод можно использовать для отправки нажатий клавиш в приложение и дождаться всех процессов, запущенных путем нажатия клавиш для выполнения. Это может быть важно в том случае, если другое приложение необходимо завершить перед продолжением приложения.  
  
> [!NOTE]
>  Поскольку управляемого метода активации другого приложения, можно использовать этот класс в текущем приложении или использовать собственные методы Windows, такие как `FindWindow` и `SetForegroundWindow`, для принудительной установки фокуса на другие приложения.  
  
> [!NOTE]
>  Класс <xref:System.Windows.Forms.SendKeys> был обновлен в .NET Framework 3.0, что позволило использовать его в приложениях, работающих в Windows Vista. Усиленная система безопасности Windows Vista (известная как контроль учетных записей или UAC) не позволяет предыдущей реализации работать должным образом.  
>   
>  Класс <xref:System.Windows.Forms.SendKeys> подвержен проблемам со временем, которые пришлось решать некоторым разработчикам. Обновленная реализация по-прежнему подвержена этим проблемам, но она работает немного быстрее, поэтому существующие решения может потребоваться переработать. Класс <xref:System.Windows.Forms.SendKeys> сначала пытается использовать предыдущую реализацию, и если это не удается, использует новую реализацию. В результате класс <xref:System.Windows.Forms.SendKeys> может работать по-разному в разных операционных системах. Кроме того, при использовании новой реализации класса <xref:System.Windows.Forms.SendKeys> метод <xref:System.Windows.Forms.SendKeys.SendWait%2A> не будет дожидаться обработки сообщений, если они отправляются другому процессу.  
>   
>  Если необходимо обеспечить согласованное поведение приложения независимо от операционной системы, можно заставить класс <xref:System.Windows.Forms.SendKeys> использовать новую реализацию, добавив указанный ниже параметр приложения в файл app.config.  
>   
>  `<appSettings>`  
>   
>  `<add key="SendKeys" value="SendInput"/>`  
>   
>  `</appSettings>`  
>   
>  Для принудительного использования классом <xref:System.Windows.Forms.SendKeys> предыдущей реализации задайте значение `"JournalHook"` .  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">для неуправляемого кода для вызова этого метода. Связанное перечисление: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
  </Members>
</Type>