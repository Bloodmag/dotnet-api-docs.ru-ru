<Type Name="Timer" FullName="System.Windows.Forms.Timer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="18e249c0dd124f71453f47d1cab943dc0f4e46ee" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36513516" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Timer : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Timer extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.Timer" />
  <TypeSignature Language="VB.NET" Value="Public Class Timer&#xA;Inherits Component" />
  <TypeSignature Language="C++ CLI" Value="public ref class Timer : System::ComponentModel::Component" />
  <TypeSignature Language="F#" Value="type Timer = class&#xA;    inherit Component" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Tick")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Interval")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItemFilter("System.Windows.Forms")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Implements a timer that raises an event at user-defined intervals. This timer is optimized for use in Windows Forms applications and must be used in a window.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Объект <xref:System.Windows.Forms.Timer> используется для вызова события через определенные пользователем интервалы времени. Этот таймер Windows разработан для однопоточной среды, где потоки пользовательского интерфейса используются для выполнения обработки. Он требует пользовательский код имеет доступные обработки сообщений пользовательского интерфейса и всегда работал в одном потоке или маршалировать вызов в другой поток.  
  
 При использовании этого таймера использовать <xref:System.Windows.Forms.Timer.Tick> событий для выполнения операции опроса или отображение экрана-заставки для указанного периода времени. Каждый раз, когда <xref:System.Windows.Forms.Timer.Enabled%2A> свойству `true` и <xref:System.Windows.Forms.Timer.Interval%2A> больше нуля, свойство <xref:System.Windows.Forms.Timer.Tick> событие с интервалами, на основе <xref:System.Windows.Forms.Timer.Interval%2A> значение свойства.  
  
 Этот класс предоставляет методы, чтобы задать интервал, а также для запуска и остановки таймера.  
  
> [!NOTE]
>  Компонент Windows Forms Timer является однопоточным и ограничен точностью 55 миллисекунд. Если требуется многопоточных таймера с большей точностью, воспользуйтесь <xref:System.Timers.Timer> класса в <xref:System.Timers> пространства имен.  
  
   
  
## Examples  
 В следующем примере реализуется простой интервальный таймер, вызывающий аварийный сигнал каждые пять секунд. При подаче сигнала <xref:System.Windows.Forms.MessageBox> отображает число раз сигнала начала и запрашивает пользователя о том, является ли таймер должны продолжать работу.  
  
 [!code-cpp[Classic Timer Example 2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Timer Example 2/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer Example 2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Timer Example 2/CS/source.cs#1)]
 [!code-vb[Classic Timer Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Timer Example 2/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.Timer" /> class.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.Timer" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При создании нового таймера, она будет отключена; то есть <xref:System.Windows.Forms.Timer.Enabled%2A> равно `false`. Чтобы включить таймер, вызовите <xref:System.Windows.Forms.Timer.Start%2A> метода или набора <xref:System.Windows.Forms.Timer.Enabled%2A> для `true`.  
  
 Если таймер выключен и находится вне области, будет удален после сборки мусора. Если таймер включен, даже если он не входит в область, не подвергаются сборке мусора.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Timer.Enabled" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.ComponentModel.IContainer container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.IContainer container) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.#ctor(System.ComponentModel.IContainer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (container As IContainer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::ComponentModel::IContainer ^ container);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Timer : System.ComponentModel.IContainer -&gt; System.Windows.Forms.Timer" Usage="new System.Windows.Forms.Timer container" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="container" Type="System.ComponentModel.IContainer" />
      </Parameters>
      <Docs>
        <param name="container">An <see cref="T:System.ComponentModel.IContainer" /> that represents the container for the timer.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.Timer" /> class together with the specified container.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Timer> Конструктор позволяет связать <xref:System.Windows.Forms.Timer> с любым <xref:System.ComponentModel.Container> объекта. Связав <xref:System.Windows.Forms.Timer> наподобие этого, можно передать контроль времени существования <xref:System.Windows.Forms.Timer> для <xref:System.ComponentModel.Container>. Это может быть полезно, если используется ряд компонентов приложения и требуется освободить их все одновременно. Например, если вы связываете <xref:System.Windows.Forms.ToolTip>, <xref:System.Windows.Forms.ImageList>и <xref:System.Windows.Forms.Timer> с <xref:System.ComponentModel.Container>, вызов <xref:System.ComponentModel.Container.Dispose%2A> на <xref:System.ComponentModel.Container> приведет к реализации всех этих компонентов, а также.  
  
 При создании нового таймера, она будет отключена; то есть <xref:System.Windows.Forms.Timer.Enabled%2A> равно `false`. Чтобы включить таймер, вызовите <xref:System.Windows.Forms.Timer.Start%2A> метода или набора <xref:System.Windows.Forms.Timer.Enabled%2A> для `true`.  
  
 Этот экземпляр будет существовать, пока не будет освобожден его контейнером для сборки мусора.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="timer.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> to release both managed and unmanaged resources. <see langword="false" /> to release only the unmanaged resources.</param>
        <summary>Disposes of the resources, other than memory, used by the timer.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вызовите <xref:System.Windows.Forms.Timer.Dispose%2A> после использования таймера. <xref:System.Windows.Forms.Timer.Dispose%2A> Метод оставляет таймера окажется в неработоспособном состоянии. После вызова метода <xref:System.Windows.Forms.Timer.Dispose%2A>, необходимо освободить все ссылки на таймер, занимаемая ими память можно удалять его сборщику мусора.  
  
> [!NOTE]
>  Всегда вызывайте метод <xref:System.Windows.Forms.Timer.Dispose%2A> перед освобождением последней ссылки на таймера. В противном случае используемые ресурсы таймера не будут освобождены до сборки мусора вызывает деструктор объекта таймера.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public virtual bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Timer.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.Windows.Forms.Timer.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets whether the timer is running.</summary>
        <value>
          <see langword="true" /> Если в настоящее время включена таймера. в противном случае <see langword="false" />. Значение по умолчанию — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Таймер не подвергаются сборке мусора при значении `true`.  
  
 Вызов <xref:System.Windows.Forms.Timer.Start%2A> метод совпадает со значением параметра <xref:System.Windows.Forms.Timer.Enabled%2A> для `true`. Аналогично, вызов <xref:System.Windows.Forms.Timer.Stop%2A> метод совпадает со значением параметра <xref:System.Windows.Forms.Timer.Enabled%2A> для `false`.  
  
   
  
## Examples  
 В следующем примере реализуется простой интервальный таймер, вызывающий аварийный сигнал каждые пять секунд. При подаче сигнала <xref:System.Windows.Forms.MessageBox> отображает число раз сигнала начала и предлагает пользователю ли таймер должны продолжать работу.  
  
 [!code-cpp[Classic Timer Example 2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Timer Example 2/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer Example 2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Timer Example 2/CS/source.cs#1)]
 [!code-vb[Classic Timer Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Timer Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Interval">
      <MemberSignature Language="C#" Value="public int Interval { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Interval" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Timer.Interval" />
      <MemberSignature Language="VB.NET" Value="Public Property Interval As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Interval { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Interval : int with get, set" Usage="System.Windows.Forms.Timer.Interval" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(100)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the time, in milliseconds, before the <see cref="E:System.Windows.Forms.Timer.Tick" /> event is raised relative to the last occurrence of the <see cref="E:System.Windows.Forms.Timer.Tick" /> event.</summary>
        <value>
          <see cref="T:System.Int32" /> Указание количество миллисекунд до <see cref="E:System.Windows.Forms.Timer.Tick" /> события относительно последнего вхождения <see cref="E:System.Windows.Forms.Timer.Tick" /> событий. Значение не может быть меньше единицы.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Чтобы получить количество секунд, в течение интервала, разделите это число 1000.  
  
   
  
## Examples  
 В следующем примере кода реализуется простой интервальный таймер, вызывающий аварийный сигнал каждые пять секунд. При подаче сигнала <xref:System.Windows.Forms.MessageBox> отображает число раз сигнала начала и предлагает пользователю ли таймер должны продолжать работу.  
  
 [!code-cpp[Classic Timer Example 2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Timer Example 2/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer Example 2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Timer Example 2/CS/source.cs#1)]
 [!code-vb[Classic Timer Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Timer Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTick">
      <MemberSignature Language="C#" Value="protected virtual void OnTick (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTick(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.OnTick(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTick (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTick(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTick : EventArgs -&gt; unit&#xA;override this.OnTick : EventArgs -&gt; unit" Usage="timer.OnTick e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. This is always <see cref="F:System.EventArgs.Empty" />.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Timer.Tick" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод вызывается для каждого таймера tick. Он вызывает методы, которые добавляются с помощью <xref:System.Windows.Forms.Timer.Tick>. При наследовании <xref:System.Windows.Forms.Timer>, можно переопределить этот метод.  
  
 При возникновении события через делегат вызывается обработчик события. Дополнительные сведения см. в разделе [обработка и вызов событий](~/docs/standard/events/index.md).  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>При переопределении метода <see cref="M:System.Windows.Forms.Timer.OnTick(System.EventArgs)" /> в производном классе, убедитесь, что вызвать базовый класс <see cref="M:System.Windows.Forms.Timer.OnTick(System.EventArgs)" /> метод.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; unit" Usage="timer.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Starts the timer.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Можно также запустить таймер, задав <xref:System.Windows.Forms.Timer.Enabled%2A> свойства `true`.  
  
   
  
## Examples  
 В следующем примере кода реализуется простой интервальный таймер, вызывающий аварийный сигнал каждые пять секунд. При подаче сигнала <xref:System.Windows.Forms.MessageBox> отображает число раз сигнала начала и предлагает пользователю ли таймер должны продолжать работу.  
  
 [!code-cpp[Classic Timer Example 2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Timer Example 2/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer Example 2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Timer Example 2/CS/source.cs#1)]
 [!code-vb[Classic Timer Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Timer Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Timer.Enabled" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="timer.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Stops the timer.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Кроме того, можно остановить таймер, задав <xref:System.Windows.Forms.Timer.Enabled%2A> свойства `false`. Объект <xref:System.Windows.Forms.Timer> может быть включен и отключен несколько раз в одном сеансе приложения.  
  
 Вызов <xref:System.Windows.Forms.Timer.Start%2A> после отключения <xref:System.Windows.Forms.Timer> путем вызова <xref:System.Windows.Forms.Timer.Stop%2A> вызовет <xref:System.Windows.Forms.Timer> перезапуск прерванной интервал. Если ваш <xref:System.Windows.Forms.Timer> имеет значение для интервала 5000 миллисекунд, можно вызвать метод <xref:System.Windows.Forms.Timer.Stop%2A> на около 3000 миллисекунд, вызвав <xref:System.Windows.Forms.Timer.Start%2A> приведет к <xref:System.Windows.Forms.Timer> ожидать 5000 миллисекунд перед порождением <xref:System.Windows.Forms.Timer.Tick> событий.  
  
> [!NOTE]
>  Вызов Stop для какого-либо <xref:System.Windows.Forms.Timer> в Windows Forms приложения может вызвать сообщения от других <xref:System.Windows.Forms.Timer> компонентов в приложении, чтобы обрабатывать немедленно, так как все <xref:System.Windows.Forms.Timer> компоненты работают с основного потока приложения. При наличии двух <xref:System.Windows.Forms.Timer> компоненты, одно значение 700 миллисекунд и один набор до 500 миллисекунд, и вызывать <xref:System.Windows.Forms.Timer.Stop%2A> на первом <xref:System.Windows.Forms.Timer>, приложения могут получать обратный вызов события для второй компонент сначала. Если это доказывает, проблемы, рассмотрите возможность использования <xref:System.Threading.Timer> в класс <xref:System.Threading> имен вместо него.  
  
   
  
## Examples  
 В следующем примере кода реализуется простой интервальный таймер, вызывающий аварийный сигнал каждые пять секунд. При подаче сигнала <xref:System.Windows.Forms.MessageBox> отображает число раз сигнала начала и предлагает пользователю ли таймер должны продолжать работу.  
  
 [!code-cpp[Classic Timer Example 2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Timer Example 2/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer Example 2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Timer Example 2/CS/source.cs#1)]
 [!code-vb[Classic Timer Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Timer Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Timer.Enabled" />
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public object Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Tag" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Timer.Tag" />
      <MemberSignature Language="VB.NET" Value="Public Property Tag As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Tag { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Tag : obj with get, set" Usage="System.Windows.Forms.Timer.Tag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ComponentModel.StringConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets an arbitrary string representing some type of user state.</summary>
        <value>Произвольная строка, представляющая некоторый тип состояния пользователя.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tick">
      <MemberSignature Language="C#" Value="public event EventHandler Tick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Tick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Timer.Tick" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Tick As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Tick;" />
      <MemberSignature Language="F#" Value="member this.Tick : EventHandler " Usage="member this.Tick : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the specified timer interval has elapsed and the timer is enabled.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вызов <xref:System.Diagnostics.Debug.Assert%2A> метод <xref:System.Diagnostics.Debug> класс изнутри <xref:System.Windows.Forms.Timer.Tick> событий могут работать не так, как ожидалось, как отображение диалогового окна утверждения поле могут привести Windows для вызова <xref:System.Windows.Forms.Timer.Tick> событий несколько раз. Рекомендуется избегать тестирования утверждения в рамках этого события и использовать <xref:System.Diagnostics.Debug.Write%2A>, <xref:System.Diagnostics.Debug.WriteIf%2A>, <xref:System.Diagnostics.Debug.WriteLine%2A>, или <xref:System.Diagnostics.Debug.WriteLineIf%2A> методов вместо него.  
  
 Дополнительные сведения об обработке событий см. в разделе [обработка и вызов событий](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 В следующем примере кода реализуется простой интервальный таймер, вызывающий аварийный сигнал каждые пять секунд. При подаче сигнала <xref:System.Windows.Forms.MessageBox> отображает число раз сигнала начала и предлагает пользователю ли таймер должны продолжать работу.  
  
 [!code-cpp[Classic Timer Example 2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Timer Example 2/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer Example 2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Timer Example 2/CS/source.cs#1)]
 [!code-vb[Classic Timer Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Timer Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="abstract member ToString : unit -&gt; string&#xA;override this.ToString : unit -&gt; string" Usage="timer.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a string that represents the <see cref="T:System.Windows.Forms.Timer" />.</summary>
        <returns>A string that represents the current <see cref="T:System.Windows.Forms.Timer" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Timer.ToString%2A> Метод возвращает строку, содержащую значение <xref:System.Windows.Forms.Timer.Interval%2A> свойства.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>