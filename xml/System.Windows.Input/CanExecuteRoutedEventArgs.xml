<Type Name="CanExecuteRoutedEventArgs" FullName="System.Windows.Input.CanExecuteRoutedEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ee42842634492a0b412e4641ee5dcc557ee54b5c" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30648748" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class CanExecuteRoutedEventArgs : System.Windows.RoutedEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit CanExecuteRoutedEventArgs extends System.Windows.RoutedEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CanExecuteRoutedEventArgs&#xA;Inherits RoutedEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class CanExecuteRoutedEventArgs sealed : System::Windows::RoutedEventArgs" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.RoutedEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Предоставляет данные для маршрутизируемых событий <see cref="E:System.Windows.Input.CommandBinding.CanExecute" /> и <see cref="E:System.Windows.Input.CommandManager.PreviewCanExecute" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Как правило, источник команды, такие <xref:System.Windows.Controls.MenuItem>, вызовет <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> метод <xref:System.Windows.Input.RoutedCommand> ли команда может или не удается выполнить на текущей цели команды.  Если <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> равно `false` из обработчика событий источника команды будет отключена.  Например если <xref:System.Windows.Controls.MenuItem> выступает в качестве источника команды для команды и не может выполнить на текущей цели команды, то <xref:System.Windows.Controls.MenuItem> будет серый сам out.  
  
 <xref:System.Windows.Input.ICommand.CanExecuteChanged> Событие сообщает источник команды при изменении возможности выполнения команды.  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Windows.Input.CanExecuteRoutedEventHandler> , возвращающий `true` только в том случае, если целевой объект команды — это элемент управления.  Во-первых, <xref:System.Windows.RoutedEventArgs.Source%2A> приведен к <xref:System.Windows.Controls.Control>.  Если <xref:System.Windows.RoutedEventArgs.Source%2A> — <xref:System.Windows.Controls.Control>, <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> задано значение `true`; в противном случае оно равно `false`.  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCanExecute](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcanexecute)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCanExecute](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcanexecute)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.CommandManager" />
  </Docs>
  <Members>
    <Member MemberName="CanExecute">
      <MemberSignature Language="C#" Value="public bool CanExecute { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanExecute" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute" />
      <MemberSignature Language="VB.NET" Value="Public Property CanExecute As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanExecute { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает значение, указывающее, может ли <see cref="T:System.Windows.Input.RoutedCommand" />, связанный с данным событием, выполняться для целевого объекта данной команды.</summary>
        <value>
          <see langword="true" />, если данное событие может выполняться для целевого объекта команды; в противном случае — <see langword="false" />.  Значение по умолчанию — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Многие команды источников, таких как <xref:System.Windows.Controls.MenuItem> и <xref:System.Windows.Controls.Button>, отключаются при <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> — `false` и включена, когда <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> — `true`.  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Windows.Input.CanExecuteRoutedEventHandler> , возвращает только значение true, если целевой объект команды — это элемент управления.  Первый <xref:System.Windows.RoutedEventArgs.Source%2A> данные о событиях, приводится к <xref:System.Windows.Controls.Control>.  Если это <xref:System.Windows.Controls.Control>, <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> задано значение `true`; в противном случае оно равно `false`.  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCanExecute](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcanexecute)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCanExecute](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcanexecute)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ICommand Command { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.ICommand Command" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.CanExecuteRoutedEventArgs.Command" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Command As ICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ICommand ^ Command { System::Windows::Input::ICommand ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает команду, связанную с этим событием.</summary>
        <value>Команда. Если команда не является пользовательской, обычно это <see cref="T:System.Windows.Input.RoutedCommand" />. Значение по умолчанию отсутствует.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Дополнительные сведения о командах см. в разделе [Общие сведения о работе с командами](~/docs/framework/wpf/advanced/commanding-overview.md).  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Windows.Input.CanExecuteRoutedEventHandler> обрабатывающая несколько команд.  Если <xref:System.Windows.Input.CanExecuteRoutedEventArgs.Command%2A> свойства равен <xref:System.Windows.Input.MediaCommands.Play%2A> команды, а также метод `IsPlaying` возвращает `false`, <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> задано значение `true`; в противном случае <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> имеет значение `false`.  Если <xref:System.Windows.Input.CanExecuteRoutedEventArgs.Command%2A> свойства равен <xref:System.Windows.Input.MediaCommands.Stop%2A> команды, а также метод `IsPlaying` возвращает `true`, <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> задано значение `true`; в противном случае <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> имеет значение `false`.  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewMultipleCanExecute](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewmultiplecanexecute)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewMultipleCanExecute](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewmultiplecanexecute)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="ContinueRouting">
      <MemberSignature Language="C#" Value="public bool ContinueRouting { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ContinueRouting" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.CanExecuteRoutedEventArgs.ContinueRouting" />
      <MemberSignature Language="VB.NET" Value="Public Property ContinueRouting As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ContinueRouting { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Определяет, следует ли продолжать маршрутизацию перенаправленного события ввода, вызвавшего команду, по дереву элементов.</summary>
        <value>
          Значение <see langword="true" />, если следует продолжать маршрутизацию перенаправленного события по дереву элементов; в противном случае — значение <see langword="false" />.   Значение по умолчанию — <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeEventHandler">
      <MemberSignature Language="C#" Value="protected override void InvokeEventHandler (Delegate genericHandler, object target);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InvokeEventHandler(class System.Delegate genericHandler, object target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CanExecuteRoutedEventArgs.InvokeEventHandler(System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub InvokeEventHandler (genericHandler As Delegate, target As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void InvokeEventHandler(Delegate ^ genericHandler, System::Object ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="genericHandler" Type="System.Delegate" />
        <Parameter Name="target" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="genericHandler">To be added.</param>
        <param name="target">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parameter">
      <MemberSignature Language="C#" Value="public object Parameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Parameter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.CanExecuteRoutedEventArgs.Parameter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parameter As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Parameter { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает связанные с командой данные.</summary>
        <value>Связанные с командой данные.  Значение по умолчанию — <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Параметр команды используется для передачи определенные сведения в команду при ее выполнении.  Тип данных определяется с помощью команды.  
  
 <xref:System.Windows.Input.CanExecuteRoutedEventArgs.Parameter%2A> может быть `null`. Многие команды процесс или не ожидают параметров команды.  
  
   
  
## Examples  
 В следующем примере показано использовать <xref:System.Windows.Controls.Button> как источника команды для пользовательской команды.  <xref:System.Windows.Input.ICommandSource.Command%2A> Свойство <xref:System.Windows.Controls.Button> задать пользовательскому <xref:System.Windows.Input.RoutedCommand> вызывается `customComand` и <xref:System.Windows.Input.ICommandSource.CommandParameter%2A> используется для передачи значения <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> свойства <xref:System.Windows.Controls.Slider> элемента управления.  Это является важным достижением с помощью привязки данных для привязки <xref:System.Windows.Input.ICommandSource.CommandParameter%2A> для <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> свойства.  Преобразователь в выражение привязки является пользовательским <xref:System.Windows.Data.IValueConverter> , преобразующий <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> в <xref:System.Int32> до их привязки к <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.  
  
 [!code-xaml[invalidaterequerywithdispatchertimer#InvalidateSampleSliderCommandParameter](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml#invalidatesampleslidercommandparameter)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
  </Members>
</Type>