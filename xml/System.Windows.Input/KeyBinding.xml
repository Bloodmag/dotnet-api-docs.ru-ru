<Type Name="KeyBinding" FullName="System.Windows.Input.KeyBinding">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f7ffcff8092d477e75345cd0afc6f0d3c265489e" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30659738" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class KeyBinding : System.Windows.Input.InputBinding" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit KeyBinding extends System.Windows.Input.InputBinding" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.KeyBinding" />
  <TypeSignature Language="VB.NET" Value="Public Class KeyBinding&#xA;Inherits InputBinding" />
  <TypeSignature Language="C++ CLI" Value="public ref class KeyBinding : System::Windows::Input::InputBinding" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Input.InputBinding</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Связывает <see cref="T:System.Windows.Input.KeyGesture" /> с <see cref="T:System.Windows.Input.RoutedCommand" /> (или другой реализацией <see cref="T:System.Windows.Input.ICommand" />).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Объект <xref:System.Windows.Input.KeyBinding> связывает <xref:System.Windows.Input.KeyGesture> с <xref:System.Windows.Input.ICommand>, такие как <xref:System.Windows.Input.RoutedCommand>. <xref:System.Windows.Input.RoutedCommand> является основной реализацией <xref:System.Windows.Input.ICommand> интерфейс для [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] заставляя системы.  В общем случае, если <xref:System.Windows.Input.KeyGesture> выполняется вызов команды, несмотря на то, что поведение команды дальнейшей зависит от факторов в конкретных команд например <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> значение.  Дополнительные сведения о командах см. в разделе [Общие сведения о работе с командами](~/docs/framework/wpf/advanced/commanding-overview.md).  
  
 За исключением сочетания клавиш и клавиши цифровой клавиатуре, является допустимым <xref:System.Windows.Input.KeyGesture> должен содержать ровно один <xref:System.Windows.Input.Key> и один или несколько <xref:System.Windows.Input.ModifierKeys>.  Сочетания клавиш и клавиши на цифровой клавиатуре не требуется клавиши-модификатора чтобы быть допустимыми <xref:System.Windows.Input.KeyGesture>. Можно указать недопустимое <xref:System.Windows.Input.KeyGesture> и <xref:System.Windows.Input.KeyBinding> с недопустимым связанные жестов, либо с помощью [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] или кода. Например, отсутствует проверка, предотвращающая создание и привязка <xref:System.Windows.Input.KeyGesture> , содержащий только обнаружен ключ, или только модификаторы но без ключа. Такие <xref:System.Windows.Input.KeyBinding> никогда не будет пытаться вызвать ее связанная команда.  
  
 При определении <xref:System.Windows.Input.KeyBinding> в [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] существует два способа указать <xref:System.Windows.Input.KeyGesture>. Первый способ для установления <xref:System.Windows.Input.KeyBinding> в [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] является определение <xref:System.Windows.Input.KeyBinding.Gesture%2A> атрибут <xref:System.Windows.Input.KeyBinding> элемент, который включает синтаксис для указания разделов и модификаторы в виде одной строки, например «CTRL + P». Вторым способом является определение <xref:System.Windows.Input.KeyBinding.Key%2A> атрибута и <xref:System.Windows.Input.KeyBinding.Modifiers%2A> атрибуты <xref:System.Windows.Input.KeyBinding> элемента. Оба способа параметр <xref:System.Windows.Input.KeyGesture> эквивалентны и изменять один и тот же базовый объект, но будет конфликтов, если оба используются.  В случае, когда <xref:System.Windows.Input.KeyBinding.Key%2A>, <xref:System.Windows.Input.KeyBinding.Modifiers%2A>и <xref:System.Windows.Input.KeyBinding.Gesture%2A> атрибуты имеют значение, атрибут которого определен последнего будет использоваться для <xref:System.Windows.Input.KeyGesture>. Потенциально может иметь ситуациях, где например <xref:System.Windows.Input.KeyBinding.Key%2A> набор последнего будет перезаписывать компонент клавиши предыдущего жеста, но оставьте жеста прежним. В общем случае рекомендуется использовать только <xref:System.Windows.Input.KeyBinding.Gesture%2A> атрибута из [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]; это позволит избежать неоднозначности, обеспечивает более строгий синтаксис и наиболее последовательное представление для сериализации.  
  
 Объект <xref:System.Windows.Input.KeyBinding> можно определить для определенного объекта или на уровне класса, зарегистрировав <xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A> на <xref:System.Windows.Input.CommandManager> класса. Наиболее типичный способ определения <xref:System.Windows.Input.KeyBinding> — в шаблоне элемента управления, установка <xref:System.Windows.UIElement.InputBindings%2A> свойство в [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] путем объявления одного или нескольких <xref:System.Windows.Input.MouseBinding> или <xref:System.Windows.Input.KeyBinding> элементы.  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Windows.Input.KeyBinding> и добавляет его в <xref:System.Windows.Input.InputBindingCollection> корневого окна.  
  
 [!code-xaml[commandWithHandler#CommandHandlerKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml#commandhandlerkeybinding)]  
  
 [!code-csharp[CommandHandlerProcedural#CommandHandlerKeyBindingCodeBehind](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandHandlerProcedural/CSharp/Window1.xaml.cs#commandhandlerkeybindingcodebehind)]
 [!code-vb[CommandHandlerProcedural#CommandHandlerKeyBindingCodeBehind](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandHandlerProcedural/visualbasic/window1.xaml.vb#commandhandlerkeybindingcodebehind)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.KeyBinding" />
    <altmember cref="T:System.Windows.Input.MouseBinding" />
    <altmember cref="T:System.Windows.Input.RoutedCommand" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.KeyGesture" />
    <altmember cref="T:System.Windows.Input.MouseGesture" />
    <altmember cref="T:System.Windows.Input.InputGesture" />
    <altmember cref="T:System.Windows.Input.InputBinding" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Windows.Input.KeyBinding" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyBinding ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.KeyBinding.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; KeyBinding();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Windows.Input.KeyBinding" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.MouseBinding" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
        <altmember cref="T:System.Windows.Input.InputGesture" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyBinding (System.Windows.Input.ICommand command, System.Windows.Input.KeyGesture gesture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Input.ICommand command, class System.Windows.Input.KeyGesture gesture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.KeyBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.KeyGesture)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (command As ICommand, gesture As KeyGesture)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; KeyBinding(System::Windows::Input::ICommand ^ command, System::Windows::Input::KeyGesture ^ gesture);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="command" Type="System.Windows.Input.ICommand" />
        <Parameter Name="gesture" Type="System.Windows.Input.KeyGesture" />
      </Parameters>
      <Docs>
        <param name="command">Команда, связываемая с объектом <c>gesture</c>.</param>
        <param name="gesture">Сочетание клавиш, связываемое с <c>command</c>.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Windows.Input.KeyBinding" /> с использованием указанных объектов <see cref="T:System.Windows.Input.ICommand" /> и <see cref="T:System.Windows.Input.KeyGesture" />.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          Параметр <paramref name="command" /> или <paramref name="gesture" /> имеет значение <see langword="null" />.</exception>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.MouseBinding" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
        <altmember cref="T:System.Windows.Input.InputGesture" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyBinding (System.Windows.Input.ICommand command, System.Windows.Input.Key key, System.Windows.Input.ModifierKeys modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Input.ICommand command, valuetype System.Windows.Input.Key key, valuetype System.Windows.Input.ModifierKeys modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.KeyBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.Key,System.Windows.Input.ModifierKeys)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; KeyBinding(System::Windows::Input::ICommand ^ command, System::Windows::Input::Key key, System::Windows::Input::ModifierKeys modifiers);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="command" Type="System.Windows.Input.ICommand" />
        <Parameter Name="key" Type="System.Windows.Input.Key" />
        <Parameter Name="modifiers" Type="System.Windows.Input.ModifierKeys" />
      </Parameters>
      <Docs>
        <param name="command">Вызываемая команда.</param>
        <param name="key">Клавиша, связываемая с <c>command</c>.</param>
        <param name="modifiers">Модификаторы, связываемые с <c>command</c>.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Windows.Input.KeyBinding" />, используя указанный <see cref="T:System.Windows.Input.ICommand" /> и заданные <see cref="T:System.Windows.Input.Key" /> и <see cref="T:System.Windows.Input.ModifierKeys" />, которые будут преобразованы в <see cref="T:System.Windows.Input.KeyGesture" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.MouseBinding" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
        <altmember cref="T:System.Windows.Input.InputGesture" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Freezable CreateInstanceCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Freezable CreateInstanceCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.KeyBinding.CreateInstanceCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateInstanceCore () As Freezable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Freezable ^ CreateInstanceCore();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Freezable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Создает экземпляр класса <see cref="T:System.Windows.Input.KeyBinding" />.</summary>
        <returns>Новый объект.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Gesture">
      <MemberSignature Language="C#" Value="public override System.Windows.Input.InputGesture Gesture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputGesture Gesture" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyBinding.Gesture" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Gesture As InputGesture" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Input::InputGesture ^ Gesture { System::Windows::Input::InputGesture ^ get(); void set(System::Windows::Input::InputGesture ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Input.KeyGestureConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.ValueSerializer(typeof(System.Windows.Input.KeyGestureValueSerializer))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputGesture</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает жест, связанный с данным <see cref="T:System.Windows.Input.KeyBinding" />.</summary>
        <value>Последовательность клавиш. Значение по умолчанию — <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 За исключением функциональные клавиши и цифровые клавиши <xref:System.Windows.Input.KeyGesture> должен содержать <xref:System.Windows.Input.Key> и один или несколько <xref:System.Windows.Input.ModifierKeys>.  
  
   
  
## Examples  
 Следующий пример показывает, как привязать <xref:System.Windows.Input.KeyGesture> для <xref:System.Windows.Input.RoutedCommand> с помощью <xref:System.Windows.Input.KeyBinding> (разметку и код примеры указания различных ключей, но эквивалентны в противном случае).  
  
 [!code-xaml[commandWithHandler#CommandHandlerKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml#commandhandlerkeybinding)]  
  
 [!code-csharp[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#keybindingwithkeyandmodifiers)]
 [!code-vb[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#keybindingwithkeyandmodifiers)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">задаваемое значение <paramref name="gesture" /> не является <see cref="T:System.Windows.Input.KeyGesture" />.</exception>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.MouseBinding" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
        <altmember cref="T:System.Windows.Input.InputGesture" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
      </Docs>
    </Member>
    <Member MemberName="Key">
      <MemberSignature Language="C#" Value="public System.Windows.Input.Key Key { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.Key Key" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyBinding.Key" />
      <MemberSignature Language="VB.NET" Value="Public Property Key As Key" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::Key Key { System::Windows::Input::Key get(); void set(System::Windows::Input::Key value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Key</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает <see cref="T:System.Windows.Input.Key" /> объекта <see cref="T:System.Windows.Input.KeyGesture" />, связанного с данным <see cref="T:System.Windows.Input.KeyBinding" />.</summary>
        <value>Часть объекта <see cref="T:System.Windows.Input.KeyGesture" />, представляющая клавишу. Значение по умолчанию — <see cref="F:System.Windows.Input.Key.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 За исключением функциональные клавиши и цифровые клавиши <xref:System.Windows.Input.KeyGesture> должен содержать <xref:System.Windows.Input.Key> и один или несколько <xref:System.Windows.Input.ModifierKeys>.  
  
 При определении <xref:System.Windows.Input.KeyBinding> в [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] существует два способа указать <xref:System.Windows.Input.KeyGesture>. Первый способ для установления <xref:System.Windows.Input.KeyBinding> в [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] является определение <xref:System.Windows.Input.KeyBinding.Gesture%2A> атрибут <xref:System.Windows.Input.KeyBinding> элемент, который включает синтаксис для указания разделов и модификаторы в виде одной строки, например «CTRL + P». Вторым способом является определение <xref:System.Windows.Input.KeyBinding.Key%2A> атрибута и <xref:System.Windows.Input.KeyBinding.Modifiers%2A> атрибуты <xref:System.Windows.Input.KeyBinding> элемента. Оба способа параметр <xref:System.Windows.Input.KeyGesture> эквивалентны и изменять один и тот же базовый объект, но будет конфликтов, если оба используются.  В случае, когда <xref:System.Windows.Input.KeyBinding.Key%2A>, <xref:System.Windows.Input.KeyBinding.Modifiers%2A>и <xref:System.Windows.Input.KeyBinding.Gesture%2A> атрибуты имеют значение, атрибут которого определен последнего будет использоваться для <xref:System.Windows.Input.KeyGesture>. Потенциально может иметь ситуациях, где например <xref:System.Windows.Input.KeyBinding.Key%2A> набор последнего будет перезаписывать компонент клавиши предыдущего жеста, но оставьте жеста прежним. В общем случае рекомендуется использовать только <xref:System.Windows.Input.KeyBinding.Gesture%2A> атрибута из [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]; это позволит избежать неоднозначности, обеспечивает более строгий синтаксис и наиболее последовательное представление для сериализации.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.MouseBinding" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
        <altmember cref="T:System.Windows.Input.InputGesture" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
      </Docs>
    </Member>
    <Member MemberName="KeyProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty KeyProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty KeyProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.KeyBinding.KeyProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly KeyProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ KeyProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует свойство зависимостей <see cref="P:System.Windows.Input.KeyBinding.Key" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Modifiers">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ModifierKeys Modifiers { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.ModifierKeys Modifiers" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyBinding.Modifiers" />
      <MemberSignature Language="VB.NET" Value="Public Property Modifiers As ModifierKeys" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ModifierKeys Modifiers { System::Windows::Input::ModifierKeys get(); void set(System::Windows::Input::ModifierKeys value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ModifierKeys</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает <see cref="T:System.Windows.Input.ModifierKeys" /> объекта <see cref="T:System.Windows.Input.KeyGesture" />, связанного с данным <see cref="T:System.Windows.Input.KeyBinding" />.</summary>
        <value>Клавиши CTRL, SHIFT и ALT объекта <see cref="T:System.Windows.Input.KeyGesture" />.  Значение по умолчанию — <see cref="F:System.Windows.Input.ModifierKeys.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 За исключением функциональные клавиши и цифровые клавиши <xref:System.Windows.Input.KeyGesture> должен содержать <xref:System.Windows.Input.Key> и один или несколько <xref:System.Windows.Input.ModifierKeys>.  
  
 При определении <xref:System.Windows.Input.KeyBinding> в [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] существует два способа указать <xref:System.Windows.Input.KeyGesture>. Первый способ для установления <xref:System.Windows.Input.KeyBinding> в [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] является определение <xref:System.Windows.Input.KeyBinding.Gesture%2A> атрибут <xref:System.Windows.Input.KeyBinding> элемент, который включает синтаксис для указания разделов и модификаторы в виде одной строки, например «CTRL + P». Вторым способом является определение <xref:System.Windows.Input.KeyBinding.Key%2A> атрибута и <xref:System.Windows.Input.KeyBinding.Modifiers%2A> атрибуты <xref:System.Windows.Input.KeyBinding> элемента. Оба способа параметр <xref:System.Windows.Input.KeyGesture> эквивалентны и изменять один и тот же базовый объект, но будет конфликтов, если оба используются.  В случае, когда <xref:System.Windows.Input.KeyBinding.Key%2A>, <xref:System.Windows.Input.KeyBinding.Modifiers%2A>и <xref:System.Windows.Input.KeyBinding.Gesture%2A> атрибуты имеют значение, атрибут которого определен последнего будет использоваться для <xref:System.Windows.Input.KeyGesture>. Потенциально может иметь ситуациях, где например <xref:System.Windows.Input.KeyBinding.Key%2A> набор последнего будет перезаписывать компонент клавиши предыдущего жеста, но оставьте жеста прежним. В общем случае рекомендуется использовать только <xref:System.Windows.Input.KeyBinding.Gesture%2A> атрибута из [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]; это позволит избежать неоднозначности, обеспечивает более строгий синтаксис и наиболее последовательное представление для сериализации.  
  
<a name="xamlAttributeUsage_Modifiers"></a>   
## <a name="xaml-attribute-usage"></a>Использование атрибута XAML  
  
```  
<object Modifiers="oneOrMoreModifierKeys"/>  
  
```  
  
<a name="xamlValues_Modifiers"></a>   
## <a name="xaml-values"></a>Значения XAML  
 *oneOrMoreModifierKeys*  
 Один или несколько клавиши-модификаторы, определяемый <xref:System.Windows.Input.ModifierKeys> перечисления, разделенных символом «+».  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.MouseBinding" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
        <altmember cref="T:System.Windows.Input.InputGesture" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
      </Docs>
    </Member>
    <Member MemberName="ModifiersProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ModifiersProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ModifiersProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.KeyBinding.ModifiersProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ModifiersProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ModifiersProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует свойство зависимостей <see cref="P:System.Windows.Input.KeyBinding.Modifiers" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>