<Type Name="KeyEventArgs" FullName="System.Windows.Input.KeyEventArgs">
  <TypeSignature Language="C#" Value="public class KeyEventArgs : System.Windows.Input.KeyboardEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit KeyEventArgs extends System.Windows.Input.KeyboardEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.KeyEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class KeyEventArgs&#xA;Inherits KeyboardEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class KeyEventArgs : System::Windows::Input::KeyboardEventArgs" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Input.KeyboardEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="c7e02-101">Предоставляет данные для перенаправленных событий <see cref="E:System.Windows.UIElement.KeyUp" /> и <see cref="E:System.Windows.UIElement.KeyDown" />, а также связанных присоединенных событий и событий предварительного просмотра.</span><span class="sxs-lookup"><span data-stu-id="c7e02-101">Provides data for the <see cref="E:System.Windows.UIElement.KeyUp" /> and <see cref="E:System.Windows.UIElement.KeyDown" /> routed events, as well as related attached and Preview events.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c7e02-102">Данный класс данных события используется со следующими вложенными событиями:</span><span class="sxs-lookup"><span data-stu-id="c7e02-102">This event data class is used with the following attached events:</span></span>  
  
-   <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType>  
  
-   <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType>  
  
-   <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType>  
  
-   <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType>  
  
 <span data-ttu-id="c7e02-103">Данный класс данных события также используется со следующей перенаправленные события базовых элементов.</span><span class="sxs-lookup"><span data-stu-id="c7e02-103">This event data class is also used with the following routed events on base elements.</span></span> <span data-ttu-id="c7e02-104">Эти перенаправленные события пересылать перечисленных выше присоединенных событий, чтобы сделать их более доступными для общего элемента модели в [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)].</span><span class="sxs-lookup"><span data-stu-id="c7e02-104">These routed events forward the previously listed attached events to make them more accessible to the general element model in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)].</span></span>  
  
-   <xref:System.Windows.UIElement.KeyUp?displayProperty=nameWithType>  
  
-   <xref:System.Windows.UIElement.KeyDown?displayProperty=nameWithType>  
  
-   <xref:System.Windows.UIElement.PreviewKeyUp?displayProperty=nameWithType>  
  
-   <xref:System.Windows.UIElement.PreviewKeyDown?displayProperty=nameWithType>  
  
-   <xref:System.Windows.ContentElement.KeyUp?displayProperty=nameWithType>  
  
-   <xref:System.Windows.ContentElement.KeyDown?displayProperty=nameWithType>  
  
-   <xref:System.Windows.ContentElement.PreviewKeyUp?displayProperty=nameWithType>  
  
-   <xref:System.Windows.ContentElement.PreviewKeyDown?displayProperty=nameWithType>  
  
 <span data-ttu-id="c7e02-105">Вложенные события и перенаправленные события базового элемента доступ к своим и восходящей и туннелирования версии перенаправленных событий также совместно использовать данные события.</span><span class="sxs-lookup"><span data-stu-id="c7e02-105">The attached events and the base element routed events share their event data, and the bubbling and tunneling versions of the routed events also share event data.</span></span> <span data-ttu-id="c7e02-106">Это может повлиять на обрабатываемых характеристиках события при перемещении по маршруту события.</span><span class="sxs-lookup"><span data-stu-id="c7e02-106">This can affect the handled characteristics of the event as it travels the event route.</span></span> <span data-ttu-id="c7e02-107">Дополнительные сведения см. в разделе [фокусе](~/docs/framework/wpf/advanced/input-overview.md).</span><span class="sxs-lookup"><span data-stu-id="c7e02-107">For details, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="c7e02-108">Ключ может находиться в состояния вверх и переключаемых или в нажатом и включенном состоянии одновременно.</span><span class="sxs-lookup"><span data-stu-id="c7e02-108">A key can be in both the up and toggled states or the down and toggled states.</span></span> <span data-ttu-id="c7e02-109">Для этого необходимо определить, является ли ключ вверх или вниз не сложнее, чем проверка <xref:System.Windows.Input.KeyEventArgs.KeyStates%2A> значение в виде числового значения.</span><span class="sxs-lookup"><span data-stu-id="c7e02-109">For this reason, determining whether a key is up or down is not as simple as checking the <xref:System.Windows.Input.KeyEventArgs.KeyStates%2A> value as a numeric value.</span></span> <span data-ttu-id="c7e02-110">Вместо этого следует проверить значение, рассматривая их как перечисление флагов.</span><span class="sxs-lookup"><span data-stu-id="c7e02-110">Instead, you should check the value by treating it as a flag enumeration.</span></span> <span data-ttu-id="c7e02-111">Используйте `AND` сравнения первого бита.</span><span class="sxs-lookup"><span data-stu-id="c7e02-111">Use an `AND` comparison of the first bit.</span></span> <span data-ttu-id="c7e02-112">Кроме того, используйте вспомогательные свойства <xref:System.Windows.Input.KeyEventArgs.IsUp%2A>, <xref:System.Windows.Input.KeyEventArgs.IsDown%2A>, и <xref:System.Windows.Input.KeyEventArgs.IsToggled%2A> для определения ли заданного ключа является вверх, вниз или выключатель.</span><span class="sxs-lookup"><span data-stu-id="c7e02-112">Alternatively, use the helper properties <xref:System.Windows.Input.KeyEventArgs.IsUp%2A>, <xref:System.Windows.Input.KeyEventArgs.IsDown%2A>, and <xref:System.Windows.Input.KeyEventArgs.IsToggled%2A> to determine whether a given key is up, down, or toggled.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.KeyEventHandler" />
    <altmember cref="T:System.Windows.Input.KeyboardEventArgs" />
    <altmember cref="T:System.Windows.Input.KeyboardEventHandler" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyEventArgs (System.Windows.Input.KeyboardDevice keyboard, System.Windows.PresentationSource inputSource, int timestamp, System.Windows.Input.Key key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Input.KeyboardDevice keyboard, class System.Windows.PresentationSource inputSource, int32 timestamp, valuetype System.Windows.Input.Key key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.KeyEventArgs.#ctor(System.Windows.Input.KeyboardDevice,System.Windows.PresentationSource,System.Int32,System.Windows.Input.Key)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; KeyEventArgs(System::Windows::Input::KeyboardDevice ^ keyboard, System::Windows::PresentationSource ^ inputSource, int timestamp, System::Windows::Input::Key key);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="keyboard" Type="System.Windows.Input.KeyboardDevice" />
        <Parameter Name="inputSource" Type="System.Windows.PresentationSource" />
        <Parameter Name="timestamp" Type="System.Int32" />
        <Parameter Name="key" Type="System.Windows.Input.Key" />
      </Parameters>
      <Docs>
        <param name="keyboard"><span data-ttu-id="c7e02-113">Логическое устройство клавиатуры, связанное с этим событием.</span><span class="sxs-lookup"><span data-stu-id="c7e02-113">The logical keyboard device associated with this event.</span></span></param>
        <param name="inputSource"><span data-ttu-id="c7e02-114">Источник ввода.</span><span class="sxs-lookup"><span data-stu-id="c7e02-114">The input source.</span></span></param>
        <param name="timestamp"><span data-ttu-id="c7e02-115">Время, когда был выполнен ввод.</span><span class="sxs-lookup"><span data-stu-id="c7e02-115">The time when the input occurred.</span></span></param>
        <param name="key"><span data-ttu-id="c7e02-116">Клавиша, на которую ссылается данное событие.</span><span class="sxs-lookup"><span data-stu-id="c7e02-116">The key referenced by the event.</span></span></param>
        <summary><span data-ttu-id="c7e02-117">Инициализирует новый экземпляр класса <see cref="T:System.Windows.Input.KeyEventArgs" />.</span><span class="sxs-lookup"><span data-stu-id="c7e02-117">Initializes a new instance of the <see cref="T:System.Windows.Input.KeyEventArgs" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Input.KeyEventHandler" />
        <altmember cref="T:System.Windows.Input.KeyboardEventArgs" />
        <altmember cref="T:System.Windows.Input.KeyboardEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="DeadCharProcessedKey">
      <MemberSignature Language="C#" Value="public System.Windows.Input.Key DeadCharProcessedKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.Key DeadCharProcessedKey" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyEventArgs.DeadCharProcessedKey" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeadCharProcessedKey As Key" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::Key DeadCharProcessedKey { System::Windows::Input::Key get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Key</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c7e02-118">Получает клавишу, которая является частью объединения с мертвой клавишей, для создания одного объединенного символа.</span><span class="sxs-lookup"><span data-stu-id="c7e02-118">Gets the key that is part of dead key composition to create a single combined character.</span></span></summary>
        <value><span data-ttu-id="c7e02-119">Клавиша, которая является частью объединения с мертвой клавишей, для создания одного объединенного символа.</span><span class="sxs-lookup"><span data-stu-id="c7e02-119">The key that is part of dead key composition to create a single combined character.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c7e02-120">Неисправная клавиша, при нажатии, выводятся знака не видны, но указывает, что ключ для объединения с символов, полученных при нажатой клавише Далее буквы.</span><span class="sxs-lookup"><span data-stu-id="c7e02-120">A dead key, when pressed, produces no visible character but indicates that the key is to be combined with the character produced by the next letter key pressed.</span></span>  <span data-ttu-id="c7e02-121">Если <xref:System.Windows.Input.KeyEventArgs.Key%2A> возвращает <xref:System.Windows.Input.Key.DeadCharProcessed?displayProperty=nameWithType>, это свойство можно использовать для получения фактический ключ, который был введен.</span><span class="sxs-lookup"><span data-stu-id="c7e02-121">If <xref:System.Windows.Input.KeyEventArgs.Key%2A> returns <xref:System.Windows.Input.Key.DeadCharProcessed?displayProperty=nameWithType>, you can use this property to get the actual key that was entered.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImeProcessedKey">
      <MemberSignature Language="C#" Value="public System.Windows.Input.Key ImeProcessedKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.Key ImeProcessedKey" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyEventArgs.ImeProcessedKey" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ImeProcessedKey As Key" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::Key ImeProcessedKey { System::Windows::Input::Key get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Key</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c7e02-122">Получает клавишу клавиатуры, на которою ссылается событие, если эта клавиша будет обрабатываться [!INCLUDE[TLA#tla_ime](~/includes/tlasharptla-ime-md.md)].</span><span class="sxs-lookup"><span data-stu-id="c7e02-122">Gets the keyboard key referenced by the event, if the key will be processed by an [!INCLUDE[TLA#tla_ime](~/includes/tlasharptla-ime-md.md)].</span></span></summary>
        <value><span data-ttu-id="c7e02-123">Объект <see cref="T:System.Windows.Input.Key" />, на который ссылается данное событие.</span><span class="sxs-lookup"><span data-stu-id="c7e02-123">The <see cref="T:System.Windows.Input.Key" /> referenced by the event.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Input.KeyEventHandler" />
        <altmember cref="T:System.Windows.Input.KeyboardEventArgs" />
        <altmember cref="T:System.Windows.Input.KeyboardEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="InputSource">
      <MemberSignature Language="C#" Value="public System.Windows.PresentationSource InputSource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.PresentationSource InputSource" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyEventArgs.InputSource" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InputSource As PresentationSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::PresentationSource ^ InputSource { System::Windows::PresentationSource ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.PresentationSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c7e02-124">Получает источник ввода, предоставившего данный ввод.</span><span class="sxs-lookup"><span data-stu-id="c7e02-124">Gets the input source that provided this input.</span></span></summary>
        <value><span data-ttu-id="c7e02-125">Источник ввода.</span><span class="sxs-lookup"><span data-stu-id="c7e02-125">The input source.</span></span></value>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="c7e02-126">Для получения источника входных данных.</span><span class="sxs-lookup"><span data-stu-id="c7e02-126">for getting the input source.</span></span> <span data-ttu-id="c7e02-127">Связанные перечисления: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="c7e02-127">Associated enumerations: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span></span></permission>
        <altmember cref="T:System.Windows.Input.KeyEventHandler" />
        <altmember cref="T:System.Windows.Input.KeyboardEventArgs" />
        <altmember cref="T:System.Windows.Input.KeyboardEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="InvokeEventHandler">
      <MemberSignature Language="C#" Value="protected override void InvokeEventHandler (Delegate genericHandler, object genericTarget);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InvokeEventHandler(class System.Delegate genericHandler, object genericTarget) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.KeyEventArgs.InvokeEventHandler(System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub InvokeEventHandler (genericHandler As Delegate, genericTarget As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void InvokeEventHandler(Delegate ^ genericHandler, System::Object ^ genericTarget);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="genericHandler" Type="System.Delegate" />
        <Parameter Name="genericTarget" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="genericHandler"><span data-ttu-id="c7e02-128">Универсальный обработчик, способ вызова которого зависит от конкретного типа.</span><span class="sxs-lookup"><span data-stu-id="c7e02-128">The generic handler to call in a type-specific way.</span></span></param>
        <param name="genericTarget"><span data-ttu-id="c7e02-129">Объект, для которого необходимо вызвать данный обработчик.</span><span class="sxs-lookup"><span data-stu-id="c7e02-129">The target to call the handler on.</span></span></param>
        <summary><span data-ttu-id="c7e02-130">Вызывает обработчики событий способом, зависящим от типа, что может повысить эффективность системы событий.</span><span class="sxs-lookup"><span data-stu-id="c7e02-130">Invokes event handlers in a type-specific way, which can increase event system efficiency.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c7e02-131">Эта реализация приводит Универсальный обработчик как <xref:System.Windows.Input.KeyEventHandler> и затем вызывает его.</span><span class="sxs-lookup"><span data-stu-id="c7e02-131">This implementation casts the generic handler as a <xref:System.Windows.Input.KeyEventHandler> and then invokes it.</span></span> <span data-ttu-id="c7e02-132">Сведения о шаблоне реализации и его разделе <xref:System.Windows.RoutedEventArgs.InvokeEventHandler%2A> и [направлено Общие сведения о событиях](~/docs/framework/wpf/advanced/routed-events-overview.md).</span><span class="sxs-lookup"><span data-stu-id="c7e02-132">For details on this implementation pattern and the reasons for it, see <xref:System.Windows.RoutedEventArgs.InvokeEventHandler%2A> and [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDown">
      <MemberSignature Language="C#" Value="public bool IsDown { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDown" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyEventArgs.IsDown" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDown As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDown { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c7e02-133">Получает значение, которое показывает, нажата ли клавиша, на которую ссылается данное событие.</span><span class="sxs-lookup"><span data-stu-id="c7e02-133">Gets a value that indicates whether the key referenced by the event is in the down state.</span></span></summary>
        <value>
          <span data-ttu-id="c7e02-134"><see langword="true" /> если данная клавиша нажата; в противном случае — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="c7e02-134"><see langword="true" /> if the key is down; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c7e02-135"><xref:System.Windows.Input.Keyboard> Класс также предоставляет сведения о состоянии клавиши на клавиатуре.</span><span class="sxs-lookup"><span data-stu-id="c7e02-135">The <xref:System.Windows.Input.Keyboard> class also provides information about the state of the keys on the keyboard.</span></span> <span data-ttu-id="c7e02-136">Например <xref:System.Windows.Input.Keyboard.IsKeyDown%2A> метод возвращает, является ли указанный ключ не работает.</span><span class="sxs-lookup"><span data-stu-id="c7e02-136">For instance, the <xref:System.Windows.Input.Keyboard.IsKeyDown%2A> method returns whether a specified key is down.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c7e02-137">В следующем примере проверяется, является ли ключ, связанный с экземпляром <xref:System.Windows.Input.KeyEventArgs> не работает, получая состояние <xref:System.Windows.Input.KeyEventArgs.IsDown%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="c7e02-137">The following example checks whether the key associated with an instance of <xref:System.Windows.Input.KeyEventArgs> is down by obtaining the state of the <xref:System.Windows.Input.KeyEventArgs.IsDown%2A> property.</span></span>  
  
 [!code-csharp[keyargssnippetsample#KeyEventArgsIsDown](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyArgsSnippetSample/CSharp/Window1.xaml.cs#keyeventargsisdown)]
 [!code-vb[keyargssnippetsample#KeyEventArgsIsDown](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyArgsSnippetSample/visualbasic/window1.xaml.vb#keyeventargsisdown)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyEventHandler" />
        <altmember cref="T:System.Windows.Input.KeyboardEventArgs" />
        <altmember cref="T:System.Windows.Input.KeyboardEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="IsRepeat">
      <MemberSignature Language="C#" Value="public bool IsRepeat { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRepeat" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyEventArgs.IsRepeat" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsRepeat As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsRepeat { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c7e02-138">Получает значение, которое указывает, нажата ли повторно клавиша клавиатуры, на которую ссылается данное событие.</span><span class="sxs-lookup"><span data-stu-id="c7e02-138">Gets a value that indicates whether the keyboard key referenced by the event is a repeated key.</span></span></summary>
        <value>
          <span data-ttu-id="c7e02-139"><see langword="true" /> если данная клавиша нажата повторно; в противном случае — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="c7e02-139"><see langword="true" /> if the key is repeated; otherwise, <see langword="false" />.</span></span>  <span data-ttu-id="c7e02-140">Значение по умолчанию отсутствует.</span><span class="sxs-lookup"><span data-stu-id="c7e02-140">There is no default value.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c7e02-141">В следующем примере проверяется, является ли ключ, связанный с экземпляром <xref:System.Windows.Input.KeyEventArgs> — это ключ, повторяющиеся, получая состояние <xref:System.Windows.Input.KeyEventArgs.IsRepeat%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="c7e02-141">The following example checks whether the key associated with an instance of <xref:System.Windows.Input.KeyEventArgs> is a repeated key by obtaining the state of the <xref:System.Windows.Input.KeyEventArgs.IsRepeat%2A> property.</span></span>  
  
 [!code-csharp[keyargssnippetsample#KeyEventArgsIsRepeat](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyArgsSnippetSample/CSharp/Window1.xaml.cs#keyeventargsisrepeat)]
 [!code-vb[keyargssnippetsample#KeyEventArgsIsRepeat](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyArgsSnippetSample/visualbasic/window1.xaml.vb#keyeventargsisrepeat)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyEventHandler" />
        <altmember cref="T:System.Windows.Input.KeyboardEventArgs" />
        <altmember cref="T:System.Windows.Input.KeyboardEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="IsToggled">
      <MemberSignature Language="C#" Value="public bool IsToggled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsToggled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyEventArgs.IsToggled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsToggled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsToggled { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c7e02-142">Получает значение, которое показывает, включена ли клавиша, на которую ссылается данное событие.</span><span class="sxs-lookup"><span data-stu-id="c7e02-142">Gets a value that indicates whether the key referenced by the event is in the toggled state.</span></span></summary>
        <value>
          <span data-ttu-id="c7e02-143"><see langword="true" /> если данная клавиша включена; в противном случае — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="c7e02-143"><see langword="true" /> if the key is toggled; otherwise, <see langword="false" />.</span></span>  <span data-ttu-id="c7e02-144">Значение по умолчанию отсутствует.</span><span class="sxs-lookup"><span data-stu-id="c7e02-144">There is no default value.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c7e02-145"><xref:System.Windows.Input.Keyboard> Класс также предоставляет сведения о состоянии клавиши на клавиатуре.</span><span class="sxs-lookup"><span data-stu-id="c7e02-145">The <xref:System.Windows.Input.Keyboard> class also provides information about the state of the keys on the keyboard.</span></span> <span data-ttu-id="c7e02-146">Например <xref:System.Windows.Input.Keyboard.IsKeyToggled%2A> метод возвращает, является ли указанная клавиша.</span><span class="sxs-lookup"><span data-stu-id="c7e02-146">For instance, the <xref:System.Windows.Input.Keyboard.IsKeyToggled%2A> method returns whether a specified key is toggled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c7e02-147">В следующем примере проверяется, является ли ключ, связанный с экземпляром <xref:System.Windows.Input.KeyEventArgs> переключается с Получение состояния <xref:System.Windows.Input.KeyEventArgs.IsToggled%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="c7e02-147">The following example checks whether the key associated with an instance of <xref:System.Windows.Input.KeyEventArgs> is toggled by obtaining the state of the <xref:System.Windows.Input.KeyEventArgs.IsToggled%2A> property.</span></span>  
  
 [!code-csharp[keyargssnippetsample#KeyEventArgsIsToggled](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyArgsSnippetSample/CSharp/Window1.xaml.cs#keyeventargsistoggled)]
 [!code-vb[keyargssnippetsample#KeyEventArgsIsToggled](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyArgsSnippetSample/visualbasic/window1.xaml.vb#keyeventargsistoggled)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyEventHandler" />
        <altmember cref="T:System.Windows.Input.KeyboardEventArgs" />
        <altmember cref="T:System.Windows.Input.KeyboardEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="IsUp">
      <MemberSignature Language="C#" Value="public bool IsUp { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUp" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyEventArgs.IsUp" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsUp As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsUp { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c7e02-148">Получает значение, которое показывает, является ли ненажатой клавиша, на которую ссылается данное событие.</span><span class="sxs-lookup"><span data-stu-id="c7e02-148">Gets a value that indicates whether the key referenced by the event is in the up state.</span></span></summary>
        <value>
          <span data-ttu-id="c7e02-149"><see langword="true" />, если данная клавиша не нажата; в противном случае — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="c7e02-149"><see langword="true" /> if the key is up; otherwise, <see langword="false" />.</span></span>  <span data-ttu-id="c7e02-150">Значение по умолчанию отсутствует.</span><span class="sxs-lookup"><span data-stu-id="c7e02-150">There is no default value.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c7e02-151"><xref:System.Windows.Input.Keyboard> Класс также предоставляет сведения о состоянии клавиши на клавиатуре.</span><span class="sxs-lookup"><span data-stu-id="c7e02-151">The <xref:System.Windows.Input.Keyboard> class also provides information about the state of the keys on the keyboard.</span></span>  <span data-ttu-id="c7e02-152">Например <xref:System.Windows.Input.Keyboard.IsKeyUp%2A> метод возвращает, находится ли указанный вверх.</span><span class="sxs-lookup"><span data-stu-id="c7e02-152">For instance, the <xref:System.Windows.Input.Keyboard.IsKeyUp%2A> method returns whether a specified is up.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c7e02-153">В следующем примере проверяется, является ли ключ, связанный с экземпляром <xref:System.Windows.Input.KeyEventArgs> работает путем получения состояния <xref:System.Windows.Input.KeyEventArgs.IsUp%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="c7e02-153">The following example checks whether the key associated with an instance of <xref:System.Windows.Input.KeyEventArgs> is up by obtaining the state of the <xref:System.Windows.Input.KeyEventArgs.IsUp%2A> property.</span></span>  
  
 [!code-csharp[keyargssnippetsample#KeyEventArgsIsUp](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyArgsSnippetSample/CSharp/Window1.xaml.cs#keyeventargsisup)]
 [!code-vb[keyargssnippetsample#KeyEventArgsIsUp](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyArgsSnippetSample/visualbasic/window1.xaml.vb#keyeventargsisup)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyEventHandler" />
        <altmember cref="T:System.Windows.Input.KeyboardEventArgs" />
        <altmember cref="T:System.Windows.Input.KeyboardEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="Key">
      <MemberSignature Language="C#" Value="public System.Windows.Input.Key Key { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.Key Key" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyEventArgs.Key" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Key As Key" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::Key Key { System::Windows::Input::Key get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Key</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c7e02-154">Получает клавишу клавиатуры, связанную с данным событием.</span><span class="sxs-lookup"><span data-stu-id="c7e02-154">Gets the keyboard key associated with the event.</span></span></summary>
        <value><span data-ttu-id="c7e02-155">Объект <see cref="T:System.Windows.Input.Key" />, на который ссылается данное событие.</span><span class="sxs-lookup"><span data-stu-id="c7e02-155">The <see cref="T:System.Windows.Input.Key" /> referenced by the event.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c7e02-156">В следующем примере создается <xref:System.Windows.Input.KeyEventHandler> и проверяет, является ли ключ, связанный с <xref:System.Windows.Input.KeyEventArgs> — <xref:System.Windows.Input.Key.Return> ключа.</span><span class="sxs-lookup"><span data-stu-id="c7e02-156">The following example creates a <xref:System.Windows.Input.KeyEventHandler> and checks whether the key associated with the <xref:System.Windows.Input.KeyEventArgs> is the <xref:System.Windows.Input.Key.Return> key.</span></span>  
  
 [!code-csharp[keydown#KeyDownSample](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyDown/CSharp/Window1.xaml.cs#keydownsample)]
 [!code-vb[keydown#KeyDownSample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyDown/VisualBasic/Window1.xaml.vb#keydownsample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyEventHandler" />
        <altmember cref="T:System.Windows.Input.KeyboardEventArgs" />
        <altmember cref="T:System.Windows.Input.KeyboardEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="KeyStates">
      <MemberSignature Language="C#" Value="public System.Windows.Input.KeyStates KeyStates { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.KeyStates KeyStates" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyEventArgs.KeyStates" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property KeyStates As KeyStates" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::KeyStates KeyStates { System::Windows::Input::KeyStates get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyStates</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c7e02-157">Получает состояние клавиши клавиатуры, связанной с данным событием.</span><span class="sxs-lookup"><span data-stu-id="c7e02-157">Gets the state of the keyboard key associated with this event.</span></span></summary>
        <value><span data-ttu-id="c7e02-158">Состояние данной клавиши.</span><span class="sxs-lookup"><span data-stu-id="c7e02-158">The state of the key.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c7e02-159">Ключ может находиться в состояния вверх и переключаемых или в нажатом и включенном состоянии одновременно.</span><span class="sxs-lookup"><span data-stu-id="c7e02-159">A key can be in both the up and toggled states or the down and toggled states.</span></span> <span data-ttu-id="c7e02-160">Для этого необходимо определить, является ли ключ вверх или вниз не сложнее, чем проверка <xref:System.Windows.Input.KeyEventArgs.KeyStates%2A> значение в виде числового значения.</span><span class="sxs-lookup"><span data-stu-id="c7e02-160">For this reason, determining whether a key is up or down is not as simple as checking the <xref:System.Windows.Input.KeyEventArgs.KeyStates%2A> value as a numeric value.</span></span> <span data-ttu-id="c7e02-161">Вместо этого следует проверить значение, рассматривая их как перечисление флагов.</span><span class="sxs-lookup"><span data-stu-id="c7e02-161">Instead, you should check the value by treating it as a flag enumeration.</span></span> <span data-ttu-id="c7e02-162">Используйте `AND` сравнения первого бита.</span><span class="sxs-lookup"><span data-stu-id="c7e02-162">Use an `AND` comparison of the first bit.</span></span> <span data-ttu-id="c7e02-163">Кроме того, используйте вспомогательные свойства <xref:System.Windows.Input.KeyEventArgs.IsUp%2A>, <xref:System.Windows.Input.KeyEventArgs.IsDown%2A>, и <xref:System.Windows.Input.KeyEventArgs.IsToggled%2A> для определения ли заданного ключа является вверх, вниз или выключатель.</span><span class="sxs-lookup"><span data-stu-id="c7e02-163">Alternatively, use the helper properties <xref:System.Windows.Input.KeyEventArgs.IsUp%2A>, <xref:System.Windows.Input.KeyEventArgs.IsDown%2A>, and <xref:System.Windows.Input.KeyEventArgs.IsToggled%2A> to determine whether a given key is up, down, or toggled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c7e02-164">В следующем примере проверяется, является ли ключ, связанный с экземпляром <xref:System.Windows.Input.KeyEventArgs> не работает, выполняя битовую `AND` сравнения на <xref:System.Windows.Input.KeyEventArgs.KeyStates%2A> ключа и <xref:System.Windows.Input.KeyStates.Down> значение перечисления.</span><span class="sxs-lookup"><span data-stu-id="c7e02-164">The following example checks whether a key associated with an instance of <xref:System.Windows.Input.KeyEventArgs> is down by performing a bitwise `AND` comparison on the <xref:System.Windows.Input.KeyEventArgs.KeyStates%2A> of the key and the <xref:System.Windows.Input.KeyStates.Down> enumeration value.</span></span>  
  
 [!code-csharp[keyargssnippetsample#KeyEventArgsKeyStatesDown](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyArgsSnippetSample/CSharp/Window1.xaml.cs#keyeventargskeystatesdown)]
 [!code-vb[keyargssnippetsample#KeyEventArgsKeyStatesDown](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyArgsSnippetSample/visualbasic/window1.xaml.vb#keyeventargskeystatesdown)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyEventHandler" />
        <altmember cref="T:System.Windows.Input.KeyboardEventArgs" />
        <altmember cref="T:System.Windows.Input.KeyboardEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="SystemKey">
      <MemberSignature Language="C#" Value="public System.Windows.Input.Key SystemKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.Key SystemKey" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyEventArgs.SystemKey" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SystemKey As Key" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::Key SystemKey { System::Windows::Input::Key get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Key</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c7e02-165">Получает клавишу клавиатуры, на которою ссылается событие, если эта клавиша будет обрабатываться системой.</span><span class="sxs-lookup"><span data-stu-id="c7e02-165">Gets the keyboard key referenced by the event, if the key will be processed by the system.</span></span></summary>
        <value><span data-ttu-id="c7e02-166">Объект <see cref="T:System.Windows.Input.Key" />, на который ссылается данное событие.</span><span class="sxs-lookup"><span data-stu-id="c7e02-166">The <see cref="T:System.Windows.Input.Key" /> referenced by the event.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Input.KeyEventHandler" />
        <altmember cref="T:System.Windows.Input.KeyboardEventArgs" />
        <altmember cref="T:System.Windows.Input.KeyboardEventHandler" />
      </Docs>
    </Member>
  </Members>
</Type>