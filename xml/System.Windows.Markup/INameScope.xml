<Type Name="INameScope" FullName="System.Windows.Markup.INameScope">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1ae350a552fc26c4cf919e3c7ddd4041a5f79898" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36502836" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface INameScope" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract INameScope" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.INameScope" />
  <TypeSignature Language="VB.NET" Value="Public Interface INameScope" />
  <TypeSignature Language="C++ CLI" Value="public interface class INameScope" />
  <TypeSignature Language="F#" Value="type INameScope = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Определяет контракт для способа доступа к именам элементов в определенной области имен XAML, а также способа обеспечения уникальности имен в этой области имен XAML.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот интерфейс реализуется классами, которые имеют дочерние элементы, которые предназначены для повторно через шаблон или отложить метафоры. Шаблоны, фабрики и аналогичные конструкции должны иметь уникальные области видимости имен XAML, отдельно от основной диаграммы объектов и корневого XAML. Принцип заключается в том, что должен быть без конфликтов имен при объекты, созданные из этих дочерних элементов графа объектов приложения, и, чтобы DOM-операции и методы ссылку XAML, которые зависят от идентификатора имени можно полагаться на имя уникальность данных в каждой области видимости имен XAML.  
  
 В предыдущих версиях платформы .NET Framework этот интерфейс существовали в сборке WindowsBase конкретных WPF. В [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.Windows.Markup.INameScope> находится в сборке System.Xaml. Дополнительные сведения см. в разделе [типы, перенесенные из WPF в сборку System.Xaml](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md).  
  
## <a name="wpf-usage-notes"></a>Примечания об использовании WPF  
 Этот интерфейс реализуется классом WPF <xref:System.Windows.NameScope>. Большинство операций области имен XAML в [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] работать с использованием <xref:System.Windows.NameScope> экземпляров, но данные, иногда передается внутренним образом с помощью <xref:System.Windows.Markup.INameScope> ссылки.  
  
 Примеры классов WPF, использующие фабрику или отложить метафоры вместе с представлением XAML <xref:System.Windows.Style> и <xref:System.Windows.FrameworkTemplate>. Эти реализации обычно полагаются на явные версии методов интерфейса, доступные из <xref:System.Windows.NameScope> класса.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.NameScope" />
    <altmember cref="T:System.Windows.Markup.INameScopeDictionary" />
  </Docs>
  <Members>
    <Member MemberName="FindName">
      <MemberSignature Language="C#" Value="public object FindName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object FindName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.INameScope.FindName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindName (name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ FindName(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member FindName : string -&gt; obj" Usage="iNameScope.FindName name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Идентификатор имени для запрашиваемого объекта.</param>
        <summary>Возвращает объект с предоставленным идентифицирующим именем.</summary>
        <returns>Объект, если найден. Возвращает <see langword="null" />, если объект с таким именем не найден.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Допустимые строки имен в разметке XAML должен соответствовать требованиям, описанным в [Грамматика XamlName](~/docs/framework/xaml-services/xamlname-grammar.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.NameScope" />
      </Docs>
    </Member>
    <Member MemberName="RegisterName">
      <MemberSignature Language="C#" Value="public void RegisterName (string name, object scopedElement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterName(string name, object scopedElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.INameScope.RegisterName(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterName (name As String, scopedElement As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterName(System::String ^ name, System::Object ^ scopedElement);" />
      <MemberSignature Language="F#" Value="abstract member RegisterName : string * obj -&gt; unit" Usage="iNameScope.RegisterName (name, scopedElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="scopedElement" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">Имя для регистрации.</param>
        <param name="scopedElement">Определенный элемент, на который ссылается предоставленный параметр <c>name</c>.</param>
        <summary>Регистрирует предоставленное имя в текущей области имен XAML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Дублирование имен в области имен XAML не допускаются.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Это не разрешено повторяющиеся имена должны быть зарегистрированы. Если входные данные <paramref name="name" /> уже назначен существующего элемента в представлении внутреннюю коллекцию имен XAML (даже если он совпадает со значением <paramref name="scopedElement" />), к возникновению исключения.  Также рассмотрите возможность создания исключения, если предоставленное имя не соответствует [XamlName Grammar](~/docs/framework/xaml-services/xamlname-grammar.md).</para>
        </block>
        <altmember cref="T:System.Windows.NameScope" />
      </Docs>
    </Member>
    <Member MemberName="UnregisterName">
      <MemberSignature Language="C#" Value="public void UnregisterName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnregisterName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.INameScope.UnregisterName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UnregisterName (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnregisterName(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member UnregisterName : string -&gt; unit" Usage="iNameScope.UnregisterName name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Имя для отмены регистрации.</param>
        <summary>Отменяет регистрацию предоставленного имени в текущей области имен XAML.</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>Если имя входа не существует, вызывается исключение.  Имя и ранее зарегистрированный элемент, на который оно указывает, из представления области имен XAML в виде коллекции следует удалить, чтобы то же имя потенциально можно было снова зарегистрировать в будущем.</para>
        </block>
        <altmember cref="T:System.Windows.NameScope" />
      </Docs>
    </Member>
  </Members>
</Type>