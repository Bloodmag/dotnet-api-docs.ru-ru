<Type Name="UsableDuringInitializationAttribute" FullName="System.Windows.Markup.UsableDuringInitializationAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="43a51850f5949a46326338f3f8647441b3d03f89" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36501803" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class UsableDuringInitializationAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit UsableDuringInitializationAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.UsableDuringInitializationAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class UsableDuringInitializationAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class UsableDuringInitializationAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type UsableDuringInitializationAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple=false, Inherited=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Указывает, строится ли этот тип сверху вниз в ходе создания графа объекта XAML.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Сверху вниз — метафора, приблизительно описывающая поведение процессора XAML при создании графа объектов. При построении сверху вниз, создается экземпляр класса, присоединенные к родительскому элементу, а затем настраиваются его свойства. Построение сверху вниз позволяет избежать вызова обработчиков измененных свойств несколько раз. Такая обработка приведет к нарушению графа объектов, и поэтому Устранение множественных вызовов обработчика предоставляет оптимизировать производительность при запуске графа объектов.  
  
 В предыдущих версиях платформы .NET Framework этот класс существовали в сборке WindowsBase конкретных WPF. В [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.Windows.Markup.UsableDuringInitializationAttribute> находится в сборке System.Xaml. Дополнительные сведения см. в разделе [типы, перенесенные из WPF в сборку System.Xaml](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md).  
  
## <a name="wpf-usage-notes"></a>Примечания об использовании WPF  
 В XAML WPF для [!INCLUDE[net_v30_short](~/includes/net-v30-short-md.md)] и [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)], построение сверху вниз был создан код XAML обработка для некоторых классов. <xref:System.Windows.Markup.UsableDuringInitializationAttribute> Атрибута является формальным reporting поведение сверху вниз в [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)].  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.FrameworkElement" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UsableDuringInitializationAttribute (bool usable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool usable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.UsableDuringInitializationAttribute.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (usable As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UsableDuringInitializationAttribute(bool usable);" />
      <MemberSignature Language="F#" Value="new System.Windows.Markup.UsableDuringInitializationAttribute : bool -&gt; System.Windows.Markup.UsableDuringInitializationAttribute" Usage="new System.Windows.Markup.UsableDuringInitializationAttribute usable" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="usable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="usable">Определяет, можно ли использовать связанный класс во время инициализации.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Windows.Markup.UsableDuringInitializationAttribute" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот атрибут наследуется. Для начального приложения обычно применяются как `[UsableDuringInitialization(true)]`, но при этом возможно установить `[UsableDuringInitialization(false)]` в производном классе изменение отчетов производного класса поведения.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Usable">
      <MemberSignature Language="C#" Value="public bool Usable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Usable" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.UsableDuringInitializationAttribute.Usable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Usable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Usable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Usable : bool" Usage="System.Windows.Markup.UsableDuringInitializationAttribute.Usable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, можно ли использовать связанный класс во время инициализации.</summary>
        <value>Значение <see langword="true" />, если связанный класс можно использовать во время инициализации; в противном случае — значение <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>