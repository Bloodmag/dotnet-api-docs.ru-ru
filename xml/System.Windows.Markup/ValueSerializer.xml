<Type Name="ValueSerializer" FullName="System.Windows.Markup.ValueSerializer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="258ed704368bcfb2f89872500ab73ca32065cf4b" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39915952" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ValueSerializer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract ValueSerializer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.ValueSerializer" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ValueSerializer" />
  <TypeSignature Language="C++ CLI" Value="public ref class ValueSerializer abstract" />
  <TypeSignature Language="F#" Value="type ValueSerializer = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="351c8-101">Абстрактный класс, который определяет поведение преобразования сериализации из представления объекта.</span>
      <span class="sxs-lookup">
        <span data-stu-id="351c8-101">Abstract class that defines conversion behavior for serialization from an object representation.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="351c8-102">Строка, возвращаемая преобразователем для сериализации должна быть потерь и преобразователь должен всегда возвращать одну и ту же строку для каждого значения.</span><span class="sxs-lookup"><span data-stu-id="351c8-102">The string a converter returns for serialization must be loss-less and the converter must always return the same string for a particular value.</span></span>  <span data-ttu-id="351c8-103">Если преобразователь типов (производный от <xref:System.ComponentModel.TypeConverter>) не соответствует этим требованиям, в его `ConvertTo` реализации для строковых выходных данных, пользовательский <xref:System.Windows.Markup.ValueSerializer> должен быть объявлен.</span><span class="sxs-lookup"><span data-stu-id="351c8-103">If a type converter (derived from <xref:System.ComponentModel.TypeConverter>) does not meet these requirements in its `ConvertTo` implementations for string output, a custom <xref:System.Windows.Markup.ValueSerializer> must be declared.</span></span> <span data-ttu-id="351c8-104">Либо <xref:System.Windows.Markup.ValueSerializer> должен удовлетворять требованиям, или значение null <xref:System.Windows.Markup.ValueSerializer> должен быть связан с типом.</span><span class="sxs-lookup"><span data-stu-id="351c8-104">Either the <xref:System.Windows.Markup.ValueSerializer> should meet the requirements, or a null <xref:System.Windows.Markup.ValueSerializer> should be associated with the type.</span></span> <span data-ttu-id="351c8-105">Объект <xref:System.Windows.Markup.ValueSerializer> связан с типом, применяя <xref:System.Windows.Markup.ValueSerializerAttribute> атрибута.</span><span class="sxs-lookup"><span data-stu-id="351c8-105">A <xref:System.Windows.Markup.ValueSerializer> is associated with a type by applying the <xref:System.Windows.Markup.ValueSerializerAttribute> attribute.</span></span>  
  
 <span data-ttu-id="351c8-106">Значение null <xref:System.Windows.Markup.ValueSerializer> указывает, следует игнорировать преобразователь типов для преобразования convert-string из графа объектов.</span><span class="sxs-lookup"><span data-stu-id="351c8-106">A null <xref:System.Windows.Markup.ValueSerializer> indicates the type converter should be ignored for convert-to-string conversions from the object graph.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="351c8-107">Реализация <xref:System.Windows.Markup.ValueSerializer> следует избегать вызова исключений.</span><span class="sxs-lookup"><span data-stu-id="351c8-107">Implementation of <xref:System.Windows.Markup.ValueSerializer> should avoid throwing exceptions.</span></span> <span data-ttu-id="351c8-108">Все исключения могут прервать сериализацию.</span><span class="sxs-lookup"><span data-stu-id="351c8-108">Any exceptions thrown could terminate serialization.</span></span>  
  
 <span data-ttu-id="351c8-109"><xref:System.Windows.Markup.IValueSerializerContext> для <xref:System.Windows.Markup.ValueSerializer> и его API является аналогом <xref:System.ComponentModel.ITypeDescriptorContext> для <xref:System.ComponentModel.TypeConverter>.</span><span class="sxs-lookup"><span data-stu-id="351c8-109"><xref:System.Windows.Markup.IValueSerializerContext> for a <xref:System.Windows.Markup.ValueSerializer> and its APIs is analogous to <xref:System.ComponentModel.ITypeDescriptorContext> for a <xref:System.ComponentModel.TypeConverter>.</span></span> <span data-ttu-id="351c8-110">На самом деле <xref:System.Windows.Markup.IValueSerializerContext> наследует <xref:System.ComponentModel.ITypeDescriptorContext>.</span><span class="sxs-lookup"><span data-stu-id="351c8-110">In fact, <xref:System.Windows.Markup.IValueSerializerContext> inherits <xref:System.ComponentModel.ITypeDescriptorContext>.</span></span> <span data-ttu-id="351c8-111">Когда <xref:System.Windows.Markup.ValueSerializer> вызывается производном классе API, вызывающий объект (обычно процесс сериализации) передает контекст, который может предоставить определенные службы.</span><span class="sxs-lookup"><span data-stu-id="351c8-111">When a <xref:System.Windows.Markup.ValueSerializer> derived class API is called, the caller (typically a serializer process) passes a context that may provide certain services.</span></span> <span data-ttu-id="351c8-112">Из-за Общие рекомендации, <xref:System.Windows.Markup.ValueSerializer> не должны выдавать исключения.</span><span class="sxs-lookup"><span data-stu-id="351c8-112">Because of the general guidance that a <xref:System.Windows.Markup.ValueSerializer> must not throw exceptions.</span></span> <span data-ttu-id="351c8-113">Ошибка возврата определенной службы из контекста должен также не создает исключений.</span><span class="sxs-lookup"><span data-stu-id="351c8-113">Failure to return a particular service from the context must also not throw any exceptions.</span></span>  
  
 <span data-ttu-id="351c8-114">В предыдущих версиях .NET Framework этот класс существовали в сборке WindowsBase относящихся к WPF.</span><span class="sxs-lookup"><span data-stu-id="351c8-114">In previous versions of the .NET Framework, this class existed in the WPF-specific assembly WindowsBase.</span></span> <span data-ttu-id="351c8-115">В [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.Windows.Markup.ValueSerializer> находится в сборке System.Xaml.</span><span class="sxs-lookup"><span data-stu-id="351c8-115">In [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.Windows.Markup.ValueSerializer> is in the System.Xaml assembly.</span></span> <span data-ttu-id="351c8-116">Дополнительные сведения см. в разделе [типы, перенесенные из WPF в System.Xaml](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md).</span><span class="sxs-lookup"><span data-stu-id="351c8-116">For more information, see [Types Migrated from WPF to System.Xaml](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md).</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xaml.XamlXmlWriter" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ValueSerializer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ValueSerializer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="351c8-117">Инициализирует новый экземпляр класса <see cref="T:System.Windows.Markup.ValueSerializer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="351c8-117">Initializes a new instance of the <see cref="T:System.Windows.Markup.ValueSerializer" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="351c8-118">Текст этого конструктора пуст; <xref:System.Windows.Markup.ValueSerializer> класс не содержит любые значения, которые требуется инициализация.</span><span class="sxs-lookup"><span data-stu-id="351c8-118">The body of this constructor is empty; the <xref:System.Windows.Markup.ValueSerializer> class does not contain any values that require initialization.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConvertFromString">
      <MemberSignature Language="C#" Value="public virtual bool CanConvertFromString (string value, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanConvertFromString(string value, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanConvertFromString (value As String, context As IValueSerializerContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanConvertFromString(System::String ^ value, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member CanConvertFromString : string * System.Windows.Markup.IValueSerializerContext -&gt; bool&#xA;override this.CanConvertFromString : string * System.Windows.Markup.IValueSerializerContext -&gt; bool" Usage="valueSerializer.CanConvertFromString (value, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="351c8-119">Строка, возможность преобразования которой необходимо определить.</span>
          <span class="sxs-lookup">
            <span data-stu-id="351c8-119">The string to evaluate for conversion.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="351c8-120">Контекстная информация, используемая при выполнении преобразования.</span>
          <span class="sxs-lookup">
            <span data-stu-id="351c8-120">Context information that is used for conversion.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="351c8-121">При переопределении в производном классе определяет, может ли указанный класс <see cref="T:System.String" /> быть преобразован в экземпляр типа, который поддерживается реализацией класса <see cref="T:System.Windows.Markup.ValueSerializer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="351c8-121">When overridden in a derived class, determines whether the specified <see cref="T:System.String" /> can be converted to an instance of the type that the implementation of <see cref="T:System.Windows.Markup.ValueSerializer" /> supports.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="351c8-122">
            <see langword="true" />, если значение может быть преобразовано; в противном случае — <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="351c8-122">
              <see langword="true" /> if the value can be converted; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="351c8-123">Базовая реализация всегда возвращает значение `false`.</span><span class="sxs-lookup"><span data-stu-id="351c8-123">The base implementation always returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConvertToString">
      <MemberSignature Language="C#" Value="public virtual bool CanConvertToString (object value, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanConvertToString(object value, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanConvertToString (value As Object, context As IValueSerializerContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanConvertToString(System::Object ^ value, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member CanConvertToString : obj * System.Windows.Markup.IValueSerializerContext -&gt; bool&#xA;override this.CanConvertToString : obj * System.Windows.Markup.IValueSerializerContext -&gt; bool" Usage="valueSerializer.CanConvertToString (value, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="351c8-124">Объект, для которого необходимо проверить возможность преобразования.</span>
          <span class="sxs-lookup">
            <span data-stu-id="351c8-124">The object to evaluate for conversion.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="351c8-125">Контекстная информация, используемая при выполнении преобразования.</span>
          <span class="sxs-lookup">
            <span data-stu-id="351c8-125">Context information that is used for conversion.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="351c8-126">При переопределении в производном классе определяет, может ли указанный объект быть преобразован в класс <see cref="T:System.String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="351c8-126">When overridden in a derived class, determines whether the specified object can be converted into a <see cref="T:System.String" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="351c8-127">
            <see langword="true" />, если параметр <paramref name="value" /> может быть преобразован в <see cref="T:System.String" />; в противном случае — <see langword="false." /></span>
          <span class="sxs-lookup">
            <span data-stu-id="351c8-127">
              <see langword="true" /> if the <paramref name="value" /> can be converted into a <see cref="T:System.String" />; otherwise, <see langword="false." /></span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="351c8-128">Базовая реализация всегда возвращает значение `false`.</span><span class="sxs-lookup"><span data-stu-id="351c8-128">The base implementation always returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertFromString">
      <MemberSignature Language="C#" Value="public virtual object ConvertFromString (string value, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ConvertFromString(string value, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ConvertFromString (value As String, context As IValueSerializerContext) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ ConvertFromString(System::String ^ value, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member ConvertFromString : string * System.Windows.Markup.IValueSerializerContext -&gt; obj&#xA;override this.ConvertFromString : string * System.Windows.Markup.IValueSerializerContext -&gt; obj" Usage="valueSerializer.ConvertFromString (value, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="351c8-129">Преобразуемая строка.</span>
          <span class="sxs-lookup">
            <span data-stu-id="351c8-129">The string to convert.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="351c8-130">Контекстная информация, используемая при выполнении преобразования.</span>
          <span class="sxs-lookup">
            <span data-stu-id="351c8-130">Context information that is used for conversion.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="351c8-131">При переопределении в производном классе преобразует класс <see cref="T:System.String" /> в экземпляр типа, который поддерживается реализацией класса <see cref="T:System.Windows.Markup.ValueSerializer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="351c8-131">When overridden in a derived class, converts a <see cref="T:System.String" /> to an instance of the type that the implementation of <see cref="T:System.Windows.Markup.ValueSerializer" /> supports.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="351c8-132">Новый экземпляр типа, поддерживаемого данной реализацией <see cref="T:System.Windows.Markup.ValueSerializer" /> на основе заданного <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="351c8-132">A new instance of the type that the implementation of <see cref="T:System.Windows.Markup.ValueSerializer" /> supports based on the supplied <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="351c8-133">Базовая реализация всегда создает исключение.</span><span class="sxs-lookup"><span data-stu-id="351c8-133">The base implementation always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="351c8-134">Значение <paramref name="value" /> невозможно преобразовать.</span>
          <span class="sxs-lookup">
            <span data-stu-id="351c8-134">
              <paramref name="value" /> cannot be converted.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="351c8-135">
            <para>Избегайте создания исключений в реализациях. См. в разделе <see cref="T:System.Windows.Markup.ValueSerializer" />.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="351c8-135">
              <para>Avoid throwing exceptions from implementations. See <see cref="T:System.Windows.Markup.ValueSerializer" />.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ConvertToString">
      <MemberSignature Language="C#" Value="public virtual string ConvertToString (object value, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ConvertToString(object value, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ConvertToString (value As Object, context As IValueSerializerContext) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ConvertToString(System::Object ^ value, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member ConvertToString : obj * System.Windows.Markup.IValueSerializerContext -&gt; string&#xA;override this.ConvertToString : obj * System.Windows.Markup.IValueSerializerContext -&gt; string" Usage="valueSerializer.ConvertToString (value, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="351c8-136">Объект, преобразуемый в строку.</span>
          <span class="sxs-lookup">
            <span data-stu-id="351c8-136">The object to convert into a string.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="351c8-137">Контекстная информация, используемая при выполнении преобразования.</span>
          <span class="sxs-lookup">
            <span data-stu-id="351c8-137">Context information that is used for conversion.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="351c8-138">При переопределении в производном классе преобразует указанный объект в класс <see cref="T:System.String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="351c8-138">When overridden in a derived class, converts the specified object to a <see cref="T:System.String" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="351c8-139">Строковое представление заданного объекта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="351c8-139">A string representation of the specified object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="351c8-140">Базовая реализация всегда создает исключение.</span><span class="sxs-lookup"><span data-stu-id="351c8-140">The base implementation always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="351c8-141">Значение <paramref name="value" /> невозможно преобразовать.</span>
          <span class="sxs-lookup">
            <span data-stu-id="351c8-141">
              <paramref name="value" /> cannot be converted.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="351c8-142">
            <para>Избегайте создания исключений в реализациях. См. в разделе <see cref="T:System.Windows.Markup.ValueSerializer" />.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="351c8-142">
              <para>Avoid throwing exceptions from implementations. See <see cref="T:System.Windows.Markup.ValueSerializer" />.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetConvertFromException">
      <MemberSignature Language="C#" Value="protected Exception GetConvertFromException (object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.Exception GetConvertFromException(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetConvertFromException(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetConvertFromException (value As Object) As Exception" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Exception ^ GetConvertFromException(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.GetConvertFromException : obj -&gt; Exception" Usage="valueSerializer.GetConvertFromException value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="351c8-143">Объект, который не удалось преобразовать.</span>
          <span class="sxs-lookup">
            <span data-stu-id="351c8-143">The object that could not be converted.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="351c8-144">Возвращает исключение, возникающее, если преобразование не может быть выполнено.</span>
          <span class="sxs-lookup">
            <span data-stu-id="351c8-144">Returns an exception to throw when a conversion cannot be performed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="351c8-145">Объект <see cref="T:System.Exception" /> для исключения, которое необходимо создать, если невозможно выполнить преобразование <see langword="ConvertFrom" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="351c8-145">An <see cref="T:System.Exception" /> object for the exception to throw when a <see langword="ConvertFrom" /> conversion cannot be performed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="351c8-146">Фактический `throw` ключевое слово не вызывается этим методом, поэтому обычно `throw GetConvertFromException` (с предоставленными параметрами).</span><span class="sxs-lookup"><span data-stu-id="351c8-146">The actual `throw` keyword is not invoked by this method, therefore the typical usage is `throw GetConvertFromException` (with parameters provided).</span></span>  
  
 <span data-ttu-id="351c8-147">Конкретное исключение возвращается <xref:System.InvalidOperationException>, с помощью `value` переданное сообщение об исключении.</span><span class="sxs-lookup"><span data-stu-id="351c8-147">The specific exception returned is <xref:System.InvalidOperationException>, with `value` passed in the exception message.</span></span> <span data-ttu-id="351c8-148">Шаблон для использования такое же, как служебные программы исключение в <xref:System.ComponentModel.TypeConverter>.</span><span class="sxs-lookup"><span data-stu-id="351c8-148">The pattern for usage is the same as for exception utilities in <xref:System.ComponentModel.TypeConverter>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConvertToException">
      <MemberSignature Language="C#" Value="protected Exception GetConvertToException (object value, Type destinationType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.Exception GetConvertToException(object value, class System.Type destinationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetConvertToException(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetConvertToException (value As Object, destinationType As Type) As Exception" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Exception ^ GetConvertToException(System::Object ^ value, Type ^ destinationType);" />
      <MemberSignature Language="F#" Value="member this.GetConvertToException : obj * Type -&gt; Exception" Usage="valueSerializer.GetConvertToException (value, destinationType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="destinationType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="351c8-149">Объект, который не удалось преобразовать.</span>
          <span class="sxs-lookup">
            <span data-stu-id="351c8-149">The object that could not be converted.</span>
          </span>
        </param>
        <param name="destinationType">
          <span data-ttu-id="351c8-150">Тип, представляющий тип, в который осуществлялось преобразование.</span>
          <span class="sxs-lookup">
            <span data-stu-id="351c8-150">A type that represents the type the conversion was trying to convert to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="351c8-151">Возвращает исключение, возникающее, если преобразование не может быть выполнено.</span>
          <span class="sxs-lookup">
            <span data-stu-id="351c8-151">Returns an exception to throw when a conversion cannot be performed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="351c8-152">Объект <see cref="T:System.Exception" /> для исключения, которое необходимо создать, если невозможно выполнить преобразование <see langword="ConvertTo" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="351c8-152">An <see cref="T:System.Exception" /> object for the exception to throw when a <see langword="ConvertTo" /> conversion cannot be performed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="351c8-153">Фактический `throw` ключевое слово не вызывается этим методом, поэтому типичный сценарий использования `throw GetConvertToException` (с `value` указан параметр).</span><span class="sxs-lookup"><span data-stu-id="351c8-153">The actual `throw` keyword is not invoked by this method, therefore the typical usage is `throw GetConvertToException` (with `value` parameter provided).</span></span>  
  
 <span data-ttu-id="351c8-154">Конкретное исключение возвращается <xref:System.InvalidOperationException>, с помощью `value` переданное сообщение об исключении.</span><span class="sxs-lookup"><span data-stu-id="351c8-154">The specific exception returned is <xref:System.InvalidOperationException>, with `value` passed in the exception message.</span></span> <span data-ttu-id="351c8-155">Шаблон для использования такое же, как служебные программы исключение в <xref:System.ComponentModel.TypeConverter>.</span><span class="sxs-lookup"><span data-stu-id="351c8-155">The pattern for usage is the same as for exception utilities in <xref:System.ComponentModel.TypeConverter>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetSerializerFor">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="351c8-156">Получает <see cref="T:System.Windows.Markup.ValueSerializer" /> для объекта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="351c8-156">Gets the <see cref="T:System.Windows.Markup.ValueSerializer" /> for an object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetSerializerFor">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.ValueSerializer GetSerializerFor (System.ComponentModel.PropertyDescriptor descriptor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Markup.ValueSerializer GetSerializerFor(class System.ComponentModel.PropertyDescriptor descriptor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetSerializerFor (descriptor As PropertyDescriptor) As ValueSerializer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Markup::ValueSerializer ^ GetSerializerFor(System::ComponentModel::PropertyDescriptor ^ descriptor);" />
      <MemberSignature Language="F#" Value="static member GetSerializerFor : System.ComponentModel.PropertyDescriptor -&gt; System.Windows.Markup.ValueSerializer" Usage="System.Windows.Markup.ValueSerializer.GetSerializerFor descriptor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.ValueSerializer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="descriptor" Type="System.ComponentModel.PropertyDescriptor" />
      </Parameters>
      <Docs>
        <param name="descriptor">
          <span data-ttu-id="351c8-157">Дескриптор свойства CLR сериализуемого свойства.</span>
          <span class="sxs-lookup">
            <span data-stu-id="351c8-157">The CLR property descriptor for the property to be serialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="351c8-158">Получает класс <see cref="T:System.Windows.Markup.ValueSerializer" />, объявленный для свойства, путем передачи свойству дескриптора свойства среды CLR.</span>
          <span class="sxs-lookup">
            <span data-stu-id="351c8-158">Gets the <see cref="T:System.Windows.Markup.ValueSerializer" /> declared for a property, by passing a CLR property descriptor for the property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="351c8-159">Сериализатор, связанный с заданным свойством.</span>
          <span class="sxs-lookup">
            <span data-stu-id="351c8-159">The serializer associated with the specified property.</span>
          </span>
          <span data-ttu-id="351c8-160">Может возвращать значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="351c8-160">May return <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="351c8-161">Объект <xref:System.Windows.Markup.ValueSerializer> для свойства или для типа, который используется в качестве значения для свойства, указывается путем применения <xref:System.Windows.Markup.ValueSerializerAttribute> атрибут в объявлении типа или свойства.</span><span class="sxs-lookup"><span data-stu-id="351c8-161">A <xref:System.Windows.Markup.ValueSerializer> for a property, or for a type that is used as the value for a property, is indicated by applying the <xref:System.Windows.Markup.ValueSerializerAttribute> attribute on the property or type declaration.</span></span> <span data-ttu-id="351c8-162"><xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A> Метод — это служебный метод, который считывает информации о системе типов CLR и возвращает новый <xref:System.Windows.Markup.ValueSerializer> класс на основе атрибута Если обнаружен на свойство, или затем, если на тип свойства.</span><span class="sxs-lookup"><span data-stu-id="351c8-162">The <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A> method is a utility method that reads the CLR type system information and returns a new <xref:System.Windows.Markup.ValueSerializer> class based on the attribute if found on the property, or then if found on the property's type.</span></span> <span data-ttu-id="351c8-163">`null` может быть возвращено, если сериализатор не существует.</span><span class="sxs-lookup"><span data-stu-id="351c8-163">`null` might be returned if no such serializer exists.</span></span> <span data-ttu-id="351c8-164">`null` может также возвращаться Если тип или свойство намеренно помечается с помощью со значением null <xref:System.Windows.Markup.ValueSerializerAttribute>.</span><span class="sxs-lookup"><span data-stu-id="351c8-164">`null` might also be returned if a type or property is deliberately attributed with a null-value <xref:System.Windows.Markup.ValueSerializerAttribute>.</span></span>  
  
 <span data-ttu-id="351c8-165">Другой режим, <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A> поддерживает Возвращает внутренний `TypeConverterValueSerializer` класс, являющийся <xref:System.Windows.Markup.ValueSerializer> реализации, который заключает в оболочку <xref:System.ComponentModel.TypeConverter> и преобразует `Convert` методы для `Convert*String` методы (например <xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType>вызывается с входом из <xref:System.String> введите и транслирует <xref:System.Windows.Markup.ValueSerializer.ConvertToString%2A>.</span><span class="sxs-lookup"><span data-stu-id="351c8-165">Another mode that <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A> supports is returning the internal `TypeConverterValueSerializer` class, which is a <xref:System.Windows.Markup.ValueSerializer> implementation that wraps a <xref:System.ComponentModel.TypeConverter> and translates the `Convert` methods to `Convert*String` methods (for instance <xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType> is called with input of the <xref:System.String> type, and translates to <xref:System.Windows.Markup.ValueSerializer.ConvertToString%2A>.</span></span> <span data-ttu-id="351c8-166">Это делается только в тех случаях, где выполняются все следующие условия:</span><span class="sxs-lookup"><span data-stu-id="351c8-166">This is done only in cases where all of the following are true:</span></span>  
  
-   <span data-ttu-id="351c8-167">Объект <xref:System.ComponentModel.TypeConverterAttribute> находится на соответствующее свойство или тип соответствующего свойства.</span><span class="sxs-lookup"><span data-stu-id="351c8-167">A <xref:System.ComponentModel.TypeConverterAttribute> is found on the relevant property, or the relevant property's type.</span></span>  
  
-   <span data-ttu-id="351c8-168">Указанный <xref:System.ComponentModel.TypeConverter> может быть успешно создан.</span><span class="sxs-lookup"><span data-stu-id="351c8-168">The indicated <xref:System.ComponentModel.TypeConverter> can be successfully constructed.</span></span>  
  
-   <span data-ttu-id="351c8-169"><xref:System.ComponentModel.TypeConverter> Возвращает `true` для <xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType>, с именем ссылки на <xref:System.String> типа.</span><span class="sxs-lookup"><span data-stu-id="351c8-169">The <xref:System.ComponentModel.TypeConverter> returns `true` for <xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType>, called referencing the <xref:System.String> type.</span></span>  
  
-   <span data-ttu-id="351c8-170"><xref:System.ComponentModel.TypeConverter> Возвращает `true` для <xref:System.ComponentModel.TypeConverter.CanConvertTo%2A?displayProperty=nameWithType>, с именем ссылки на <xref:System.String> типа.</span><span class="sxs-lookup"><span data-stu-id="351c8-170">The <xref:System.ComponentModel.TypeConverter> returns `true` for <xref:System.ComponentModel.TypeConverter.CanConvertTo%2A?displayProperty=nameWithType>, called referencing the <xref:System.String> type.</span></span>  
  
-   <span data-ttu-id="351c8-171"><xref:System.ComponentModel.TypeConverter> Возвращает `true` для <xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A?displayProperty=nameWithType>, с именем ссылки на <xref:System.String> типа.</span><span class="sxs-lookup"><span data-stu-id="351c8-171">The <xref:System.ComponentModel.TypeConverter> returns `true` for <xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A?displayProperty=nameWithType>, called referencing the <xref:System.String> type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="351c8-172">Ниже приведены особые случаи: <xref:System.DateTime> типы возвращают <xref:System.Windows.Markup.DateTimeValueSerializer>; <xref:System.String> типы возвращаемые внутренним, но функциональные сериализатор (`StringValueSerializer`).</span><span class="sxs-lookup"><span data-stu-id="351c8-172">The following are special cases: <xref:System.DateTime> types return a <xref:System.Windows.Markup.DateTimeValueSerializer>; <xref:System.String> types return an internal but functional serializer (`StringValueSerializer`).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="351c8-173">
            <paramref name="descriptor" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="351c8-173">
              <paramref name="descriptor" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetSerializerFor">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.ValueSerializer GetSerializerFor (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Markup.ValueSerializer GetSerializerFor(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Markup::ValueSerializer ^ GetSerializerFor(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member GetSerializerFor : Type -&gt; System.Windows.Markup.ValueSerializer" Usage="System.Windows.Markup.ValueSerializer.GetSerializerFor type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.ValueSerializer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="351c8-174">Тип, для которого требуется получить <see cref="T:System.Windows.Markup.ValueSerializer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="351c8-174">The type to get the <see cref="T:System.Windows.Markup.ValueSerializer" /> for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="351c8-175">Получает <see cref="T:System.Windows.Markup.ValueSerializer" />, объявленный для заданного типа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="351c8-175">Gets the <see cref="T:System.Windows.Markup.ValueSerializer" /> declared for the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="351c8-176">Сериализатор, связанный с заданным типом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="351c8-176">The serializer associated with the specified type.</span>
          </span>
          <span data-ttu-id="351c8-177">Может возвращать значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="351c8-177">May return <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="351c8-178">Объект <xref:System.Windows.Markup.ValueSerializer> для типа указывается путем применения <xref:System.Windows.Markup.ValueSerializerAttribute> атрибут объявления типа.</span><span class="sxs-lookup"><span data-stu-id="351c8-178">A <xref:System.Windows.Markup.ValueSerializer> for a type is indicated by applying the <xref:System.Windows.Markup.ValueSerializerAttribute> attribute on the type declaration.</span></span> <span data-ttu-id="351c8-179"><xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A> Метод — это служебный метод, который считывает информации о системе типов CLR и возвращает новый <xref:System.Windows.Markup.ValueSerializer> класса, основанных на атрибуте, если найден в указанном `type`.</span><span class="sxs-lookup"><span data-stu-id="351c8-179">The <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A> method is a utility method that reads the CLR type system information and returns a new <xref:System.Windows.Markup.ValueSerializer> class based on the attribute if found on the specified `type`.</span></span> <span data-ttu-id="351c8-180">`null` может быть возвращено, если сериализатор не существует.</span><span class="sxs-lookup"><span data-stu-id="351c8-180">`null` might be returned if no such serializer exists.</span></span> <span data-ttu-id="351c8-181">`null` может также возвращаться Если тип намеренно атрибут со значением null <xref:System.Windows.Markup.ValueSerializerAttribute>.</span><span class="sxs-lookup"><span data-stu-id="351c8-181">`null` might also be returned if a type is deliberately attributed with a null-value <xref:System.Windows.Markup.ValueSerializerAttribute>.</span></span>  
  
 <span data-ttu-id="351c8-182">Другой режим, <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A> поддерживает Возвращает внутренний `TypeConverterValueSerializer` класс, являющийся <xref:System.Windows.Markup.ValueSerializer> реализации, который заключает в оболочку <xref:System.ComponentModel.TypeConverter> и преобразует `Convert` методы для `Convert*String` методы (например <xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType>вызывается с входом из <xref:System.String> введите и транслирует <xref:System.Windows.Markup.ValueSerializer.ConvertToString%2A>.</span><span class="sxs-lookup"><span data-stu-id="351c8-182">Another mode that <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A> supports is returning the internal `TypeConverterValueSerializer` class, which is a <xref:System.Windows.Markup.ValueSerializer> implementation that wraps a <xref:System.ComponentModel.TypeConverter> and translates the `Convert` methods to `Convert*String` methods (for instance <xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType> is called with input of the <xref:System.String> type, and translates to <xref:System.Windows.Markup.ValueSerializer.ConvertToString%2A>.</span></span> <span data-ttu-id="351c8-183">Это делается только в тех случаях, где выполняются все следующие условия:</span><span class="sxs-lookup"><span data-stu-id="351c8-183">This is done only in cases where all of the following are true:</span></span>  
  
-   <span data-ttu-id="351c8-184">Объект <xref:System.ComponentModel.TypeConverterAttribute> находится на `type`.</span><span class="sxs-lookup"><span data-stu-id="351c8-184">A <xref:System.ComponentModel.TypeConverterAttribute> is found on `type`.</span></span>  
  
-   <span data-ttu-id="351c8-185">Указанный <xref:System.ComponentModel.TypeConverter> может быть успешно создан.</span><span class="sxs-lookup"><span data-stu-id="351c8-185">The indicated <xref:System.ComponentModel.TypeConverter> can be successfully constructed.</span></span>  
  
-   <span data-ttu-id="351c8-186"><xref:System.ComponentModel.TypeConverter> Возвращает `true` для <xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType>, с именем ссылки на <xref:System.String> типа.</span><span class="sxs-lookup"><span data-stu-id="351c8-186">The <xref:System.ComponentModel.TypeConverter> returns `true` for <xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType>, called referencing the <xref:System.String> type.</span></span>  
  
-   <span data-ttu-id="351c8-187"><xref:System.ComponentModel.TypeConverter> Возвращает `true` для <xref:System.ComponentModel.TypeConverter.CanConvertTo%2A?displayProperty=nameWithType>, с именем ссылки на <xref:System.String> типа.</span><span class="sxs-lookup"><span data-stu-id="351c8-187">The <xref:System.ComponentModel.TypeConverter> returns `true` for <xref:System.ComponentModel.TypeConverter.CanConvertTo%2A?displayProperty=nameWithType>, called referencing the <xref:System.String> type.</span></span>  
  
-   <span data-ttu-id="351c8-188"><xref:System.ComponentModel.TypeConverter> Возвращает `true` для <xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A?displayProperty=nameWithType>, с именем ссылки на <xref:System.String> типа.</span><span class="sxs-lookup"><span data-stu-id="351c8-188">The <xref:System.ComponentModel.TypeConverter> returns `true` for <xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A?displayProperty=nameWithType>, called referencing the <xref:System.String> type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="351c8-189">Ниже приведены особые случаи: <xref:System.DateTime> типы возвращают <xref:System.Windows.Markup.DateTimeValueSerializer>; <xref:System.String> типы возвращаемые внутренним, но функциональные сериализатор (`StringValueSerializer`).</span><span class="sxs-lookup"><span data-stu-id="351c8-189">The following are special cases: <xref:System.DateTime> types return a <xref:System.Windows.Markup.DateTimeValueSerializer>; <xref:System.String> types return an internal but functional serializer (`StringValueSerializer`).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="351c8-190">
            <paramref name="type" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="351c8-190">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetSerializerFor">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.ValueSerializer GetSerializerFor (System.ComponentModel.PropertyDescriptor descriptor, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Markup.ValueSerializer GetSerializerFor(class System.ComponentModel.PropertyDescriptor descriptor, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetSerializerFor (descriptor As PropertyDescriptor, context As IValueSerializerContext) As ValueSerializer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Markup::ValueSerializer ^ GetSerializerFor(System::ComponentModel::PropertyDescriptor ^ descriptor, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="static member GetSerializerFor : System.ComponentModel.PropertyDescriptor * System.Windows.Markup.IValueSerializerContext -&gt; System.Windows.Markup.ValueSerializer" Usage="System.Windows.Markup.ValueSerializer.GetSerializerFor (descriptor, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.ValueSerializer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="descriptor" Type="System.ComponentModel.PropertyDescriptor" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="descriptor">
          <span data-ttu-id="351c8-191">Дескриптор сериализуемого свойства.</span>
          <span class="sxs-lookup">
            <span data-stu-id="351c8-191">Descriptor for the property to be serialized.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="351c8-192">Контекстная информация, используемая при выполнении преобразования.</span>
          <span class="sxs-lookup">
            <span data-stu-id="351c8-192">Context information that is used for conversion.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="351c8-193">Получает <see cref="T:System.Windows.Markup.ValueSerializer" />, объявленный для заданного свойства с использованием заданного контекста.</span>
          <span class="sxs-lookup">
            <span data-stu-id="351c8-193">Gets the <see cref="T:System.Windows.Markup.ValueSerializer" /> declared for the specified property, using the specified context.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="351c8-194">Сериализатор, связанный с заданным свойством.</span>
          <span class="sxs-lookup">
            <span data-stu-id="351c8-194">The serializer associated with the specified property.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="351c8-195">Вместо того чтобы полагаться исключительно на атрибуты указаны в системе типов CLR, эта перегрузка использует `context` как услуга и вызывает реализацию службы <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="351c8-195">Rather than relying purely on attributes reported in the CLR type system, this overload uses the `context` as a service, and calls the service's implementation of <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="351c8-196"><xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType> Реализации также обычно полагаются на `descriptor`, но может реализовывать специальное поведение для определенных контекстов.</span><span class="sxs-lookup"><span data-stu-id="351c8-196">The <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType> implementation would typically also rely on the `descriptor`, but might implement special behavior for certain contexts.</span></span>  
  
 <span data-ttu-id="351c8-197">Этот метод должен вызываться, когда вызывающий объект имеет доступный <xref:System.Windows.Markup.IValueSerializerContext> из службы.</span><span class="sxs-lookup"><span data-stu-id="351c8-197">This method should be called when the caller has an available <xref:System.Windows.Markup.IValueSerializerContext> from a service.</span></span>  <span data-ttu-id="351c8-198">Это обеспечит правильное <xref:System.Windows.Markup.ValueSerializer> возвращается для данного контекста.</span><span class="sxs-lookup"><span data-stu-id="351c8-198">This will ensure that the correct <xref:System.Windows.Markup.ValueSerializer> is returned for the specific context.</span></span>  
  
 <span data-ttu-id="351c8-199">Возвращает контекст `null` из его <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType> для указанных `descriptor`, или если вы укажите контекст `null`, а затем идентичен вызову <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%28System.ComponentModel.PropertyDescriptor%29> перегрузки.</span><span class="sxs-lookup"><span data-stu-id="351c8-199">If the context returns `null` from its <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType> for your specified `descriptor`, or if the context you specify is `null`, then behavior is identical to calling the <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%28System.ComponentModel.PropertyDescriptor%29> overload.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="351c8-200">
            <paramref name="descriptor" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="351c8-200">
              <paramref name="descriptor" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetSerializerFor">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.ValueSerializer GetSerializerFor (Type type, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Markup.ValueSerializer GetSerializerFor(class System.Type type, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Markup::ValueSerializer ^ GetSerializerFor(Type ^ type, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="static member GetSerializerFor : Type * System.Windows.Markup.IValueSerializerContext -&gt; System.Windows.Markup.ValueSerializer" Usage="System.Windows.Markup.ValueSerializer.GetSerializerFor (type, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.ValueSerializer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="351c8-201">Тип, для которого требуется получить <see cref="T:System.Windows.Markup.ValueSerializer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="351c8-201">The type to get the <see cref="T:System.Windows.Markup.ValueSerializer" /> for.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="351c8-202">Контекстная информация, используемая при выполнении преобразования.</span>
          <span class="sxs-lookup">
            <span data-stu-id="351c8-202">Context information that is used for conversion.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="351c8-203">Получает <see cref="T:System.Windows.Markup.ValueSerializer" />, объявленный для заданного типа с использованием заданного контекста.</span>
          <span class="sxs-lookup">
            <span data-stu-id="351c8-203">Gets the <see cref="T:System.Windows.Markup.ValueSerializer" /> declared for the specified type, using the specified context.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="351c8-204">Сериализатор, связанный с заданным типом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="351c8-204">The serializer associated with the specified type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="351c8-205">Вместо того чтобы полагаться исключительно на атрибуты указаны в системе типов CLR, эта перегрузка использует `context` как услуга и вызывает реализацию службы <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="351c8-205">Rather than relying purely on attributes reported in the CLR type system, this overload uses the `context` as a service, and calls the service's implementation of <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="351c8-206"><xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType> Реализации также обычно полагаются на `type`, но может реализовывать специальное поведение для определенных контекстов.</span><span class="sxs-lookup"><span data-stu-id="351c8-206">The <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType> implementation would typically also rely on the `type`, but might implement special behavior for certain contexts.</span></span>  
  
 <span data-ttu-id="351c8-207">Этот метод должен вызываться, когда вызывающий объект имеет доступный <xref:System.Windows.Markup.IValueSerializerContext> из службы.</span><span class="sxs-lookup"><span data-stu-id="351c8-207">This method should be called when the caller has an available <xref:System.Windows.Markup.IValueSerializerContext> from a service.</span></span> <span data-ttu-id="351c8-208">Это обеспечит правильное <xref:System.Windows.Markup.ValueSerializer> возвращается для данного контекста.</span><span class="sxs-lookup"><span data-stu-id="351c8-208">This will ensure that the correct <xref:System.Windows.Markup.ValueSerializer> is returned for the specific context.</span></span>  
  
 <span data-ttu-id="351c8-209">Возвращает контекст `null` из его <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType> для указанных `type`, или если вы укажите контекст `null`, а затем идентичен вызову <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%28System.Type%29> перегрузки.</span><span class="sxs-lookup"><span data-stu-id="351c8-209">If the context returns `null` from its <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType> for your specified `type`, or if the context you specify is `null`, then behavior is identical to calling the <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%28System.Type%29> overload.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="351c8-210">
            <paramref name="type" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="351c8-210">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TypeReferences">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;Type&gt; TypeReferences (object value, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.Type&gt; TypeReferences(object value, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.TypeReferences(System.Object,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TypeReferences (value As Object, context As IValueSerializerContext) As IEnumerable(Of Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerable&lt;Type ^&gt; ^ TypeReferences(System::Object ^ value, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member TypeReferences : obj * System.Windows.Markup.IValueSerializerContext -&gt; seq&lt;Type&gt;&#xA;override this.TypeReferences : obj * System.Windows.Markup.IValueSerializerContext -&gt; seq&lt;Type&gt;" Usage="valueSerializer.TypeReferences (value, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Type&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="351c8-211">Сериализуемое значение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="351c8-211">The value being serialized.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="351c8-212">Контекстная информация, используемая при выполнении преобразования.</span>
          <span class="sxs-lookup">
            <span data-stu-id="351c8-212">Context information that is used for conversion.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="351c8-213">Получает перечисление типов, на которые ссылается <see cref="T:System.Windows.Markup.ValueSerializer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="351c8-213">Gets an enumeration of the types referenced by the <see cref="T:System.Windows.Markup.ValueSerializer" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="351c8-214">Типы, преобразуемые данным сериализатором.</span>
          <span class="sxs-lookup">
            <span data-stu-id="351c8-214">The types converted by this serializer.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="351c8-215">Все типы <xref:System.Windows.Markup.ValueSerializer> преобразует должны быть включены в возвращаемом перечислении.</span><span class="sxs-lookup"><span data-stu-id="351c8-215">Any types a <xref:System.Windows.Markup.ValueSerializer> converts should be included in the returned enumeration.</span></span>  <span data-ttu-id="351c8-216">Это позволяет убедиться, что десериализатор имеет достаточно сведений о типах, которые преобразует данный сериализатор сериализатору.</span><span class="sxs-lookup"><span data-stu-id="351c8-216">This allows a serializer to ensure a de-serializer has enough information about the types this serializer converts.</span></span>  
  
 <span data-ttu-id="351c8-217">Переопределение этого метода является расширенным сценарием.</span><span class="sxs-lookup"><span data-stu-id="351c8-217">Overriding this method is an advanced scenario.</span></span> <span data-ttu-id="351c8-218">Переопределение должно быть обязательным, если вы реализуете системы где CLR тип системы свойство владельца связей для контекст схемы XAML, не передают достаточно информации.</span><span class="sxs-lookup"><span data-stu-id="351c8-218">Overriding should only be necessary if you are implementing a system where CLR type system ownertype-property relationships available to a XAML schema context do not report enough information.</span></span>  
  
## <a name="wpf-usage-notes"></a><span data-ttu-id="351c8-219">Примечания об использовании WPF</span><span class="sxs-lookup"><span data-stu-id="351c8-219">WPF Usage Notes</span></span>  
 <span data-ttu-id="351c8-220">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] Системы свойств реализует внутреннее значение сериализатора, который переопределяет <xref:System.Windows.Markup.ValueSerializer.TypeReferences%2A> так, как свойство зависимости имеет смысл, что оно может добавлено владельцев.</span><span class="sxs-lookup"><span data-stu-id="351c8-220">The [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system implements an internal value serializer that overrides <xref:System.Windows.Markup.ValueSerializer.TypeReferences%2A> because a dependency property has a concept that it can have added owners.</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]<span data-ttu-id="351c8-221"> выражения также имеют специальной внутренней обработки.</span><span class="sxs-lookup"><span data-stu-id="351c8-221"> expressions also have special internal handling.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>