<Type Name="XamlReader" FullName="System.Windows.Markup.XamlReader">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="cb6251512dd75740e1b01a33ceb7e3470f3a68d1" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30660628" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XamlReader" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XamlReader extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.XamlReader" />
  <TypeSignature Language="VB.NET" Value="Public Class XamlReader" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlReader" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Считывает входные данные XAML и создает граф объекта с использованием средства чтения XAML по умолчанию в составе WPF и соответствующего средства записи объектов XAML.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Синхронный <xref:System.Windows.Markup.XamlReader.Load%2A> методы являются статическими, но асинхронного <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> методы не являются статичными и требуется экземпляр <xref:System.Windows.Markup.XamlReader> класс использовать.  
  
 Выходные данные `Load` методы представляет собой один объект, который представляет корневой объект дерева созданный объект или граф объектов. Объект диаграммы, созданные <xref:System.Windows.Markup.XamlReader> обычно добавляются к существующему дереву объекта приложения WPF во время выполнения. В противном случае новый граф объекта считается отключен в целях модели приложения WPF. Это означает, что он не отображается и доступ к которым осуществляется с помощью методов дерева объектов, как неприменима к дереву главный объект приложения WPF (например, API-интерфейсы <xref:System.Windows.FrameworkElement.FindName%2A>, <xref:System.Windows.LogicalTreeHelper>, <xref:System.Windows.Media.VisualTreeHelper>). Дополнительные сведения о концепции дерева объектов см. в разделе [деревьев в WPF](~/docs/framework/wpf/advanced/trees-in-wpf.md).  
  
 <xref:System.Windows.Markup.XamlReader> поддерживает следующие сценарии источника:  
  
-   **Клонирование объекта фабрики**: без дополнительных механизмов ссылочный тип обычно не может быть включен в более чем одной позиции в дерева объекта WPF. (Число дополнительных механизмов, которые обеспечивают поддержку для общего доступа или повторно использовать в WPF входят объекты, которые основаны на <xref:System.Windows.Freezable>, или поддерживать для часто используемых совместно объектов, таких как <xref:System.Windows.Media.Brush> , указываются как элемент из <xref:System.Windows.ResourceDictionary>.) Один способ копируемый объект, который уже присутствует в дереве объектов — сериализовать объект с помощью <xref:System.Windows.Markup.XamlWriter.Save%2A?displayProperty=nameWithType>. Затем используется сериализованной строки в качестве входного для вызова <xref:System.Windows.Markup.XamlReader.Load%2A>, с потоком или <xref:System.Xml.XmlReader> как посредник.  
  
-   **Построение объектов на основании информации в время**: часто существуют другие способы изменения состояния существующих объектов позднего связывания или предоставленного пользователем входных данных. Например можно использовать то же значение, чтобы задать более одного свойства или использовать привязку данных. Но если у вас есть ситуации, когда даже тип создаваемого объекта является только определимый во время выполнения или взаимодействия с пользователем, путем построения строки для последующего создания такого объекта <xref:System.Windows.Markup.XamlReader.Load%2A> входных данных часто является полезным приемом.  
  
-   **Существующие методы ресурсов с помощью**: <xref:System.IO.Stream> типа часто используются в других платформах и технологии для передачи данных или объекты через границы приложения или подобных ситуаций. Затем можно использовать <xref:System.IO.Stream> методы для хранения и получения данных в формате XAML, который в конечном итоге позволяет создавать объект как часть вашего приложения.  
  
-   **Документов фиксированного формата:** приложение может загрузить локальной или загруженных документов XPS для включения в дерево объектов приложения WPF и пользовательского интерфейса.  
  
> [!NOTE]
>  Иногда в настоящей документации описывается граф объектов, в отличие от дерева объектов. Strict иерархические связи не всегда существует в отношения между объектами время выполнения приложения WPF время выполнения, поэтому граф объектов является более широкой областью применения терминология. Тем не менее поскольку платформа WPF также предоставляет два различных дерева концептуальное представление API-интерфейсы (<xref:System.Windows.LogicalTreeHelper>, <xref:System.Windows.Media.VisualTreeHelper>) метафора дерева по-прежнему адекватно применяется в большинстве случаев реального мира, в WPF. С точки зрения языка XAML Однако, граф объекта часто является лучшим способом можно рассматривать как объекты создаются из XAML, поскольку сам язык XAML не обязательно указывает методологии вспомогательного класса, которые приносят отношения больше в снова древовидной структуры.  
  
## <a name="code-access-security-loose-xaml-and-xamlreader"></a>Управление доступом для кода, Свободный XAML и XamlReader  
 XAML — это язык разметки, непосредственно представляющий создание и выполнение объекта. Таким образом, элементы, созданные в XAML, имеют такие же возможности взаимодействия с системными ресурсами (например, сетевой доступ и операции ввода-вывода файловой системы), как и эквивалентный созданный код.  
  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] поддерживает [!INCLUDE[TLA2#tla_net](~/includes/tla2sharptla-net-md.md)] инфраструктурой безопасности [!INCLUDE[TLA#tla_cas](~/includes/tlasharptla-cas-md.md)]. Это означает, что содержимое [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], работающее в зоне Интернет, сократило разрешения исполнения. "Свободный XAML" (страницы некомпилированного XAML, интерпретируемые во время загрузки средства просмотра XAML) и [!INCLUDE[TLA#tla_xbap](~/includes/tlasharptla-xbap-md.md)] обычно выполняются в этой Интернет-зоне и используют один набор разрешений.  Однако XAML, загруженный в полностью доверенное приложение, имеет такой же доступ к системным ресурсам, как ведущее приложение. Дополнительные сведения см. в разделе [Безопасность частичного доверия в WPF](~/docs/framework/wpf/wpf-partial-trust-security.md).  
  
 Влияние этих инструкций для <xref:System.Windows.Markup.XamlReader> —, что при разработке приложения необходимо принимать решения о доверии XAML вы решили загрузить. При загрузке XAML, который не является доверенным, рассмотрите возможность реализации собственных изолирования как загрузить граф объектов.  
  
 <xref:System.Windows.Markup.XamlReader> может также вызываться кодом с частичным доверием. В этом случае безопасности зоны Интернета применяется для управления доступом для кода. Если никаких действий в загруженном XAML является недопустимым в зоне безопасности Интернета, создается исключение исключения синтаксического анализа XAML. В группе XBAP и в других случаях с частичным доверием на уровне платформы, где <xref:System.Windows.Markup.XamlReader> является частью выполнения, вы получаете поведение исключения с помощью вызовов явным частичным доверием.  
  
## <a name="wpf-xaml-xaml-readerswriters-and-xaml-language-versioning"></a>WPF XAML, средства чтения и записи XAML и управление версиями языка XAML  
 [!INCLUDE[xaml2009](~/includes/xaml2009-md.md)] включает возможности языка, например и. Можно использовать подписи `Load` или `Parse` для загрузки XAML, использующий эти функции. Однако эти средства языка не поддерживаются для XAML, который должен быть скомпилирован разметкой (такие как XAML для **страницы** действие в приложении WPF или XAML, включающий задачи компиляции разметки в действия построения сборки).  
  
 Типы и технологии WPF в общем поддерживают основные понятия, основанные на доступ к внутренним компонентам WPF. Для экземпляра способ реализации свойств зависимостей WPF полагается на внутренние методики для эффективного члена типа подстановки. Доступ к эти внутренние компоненты, включаемые чтения и записи API, предоставляемые в XAML <xref:System.Windows.Markup.XamlWriter> и <xref:System.Windows.Markup.XamlReader> из <xref:System.Windows.Markup> пространство имен и в сборке PresentationFramework. Однако более низкого уровня средств чтения и записи XAML из сборки System.Xaml (классы, основанные на <xref:System.Xaml.XamlReader?displayProperty=nameWithType>, <xref:System.Xaml.XamlWriter?displayProperty=nameWithType>) имеют доступ к внутренним компонентам WPF. Нет, нет зависимостей от System.Xaml к любой сборке конкретных WPF. Без доступа к внутренним компонентам WPF чтения и записи System.Xaml не удается правильно загрузить или сохранить все WPF типов или типов на основе типов WPF. В частности чтения и записи System.Xaml не понимают такие концепции, как резервное хранилище свойств или такие особенности как используемые WPF стили, словари ресурсов и шаблоны свойство зависимостей WPF. Поэтому необходимо сделать выбор:  
  
-   При загрузке типов WPF, или с помощью XAML в форме BAML каким-либо образом, используйте PresentationFramework средств чтения и записи XAML.  
  
-   Если вы не полагаться на все типы WPF или форма BAML кода XAML и не используются специализированные средства чтения XAML или реализацию модуля записи XAML по причинам, которые относятся к этой структуре, используйте System.Xaml средств чтения и записи XAML.  
  
## <a name="systemxaml-backing-implementation-in-net-4"></a>System.Xaml резервное реализация в .NET Framework 4  
 <xref:System.Windows.Markup.XamlReader> является вызываемой область API для синтаксического анализа XAML уровня платформы WPF. Же базовый синтаксический анализатор XAML также выполняет XAML во время выполнения, загрузку и синтаксический анализ для приложений WPF, предназначенных для [!INCLUDE[net_v30_short](~/includes/net-v30-short-md.md)] и [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)].  
  
 Если вы используете [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], внешнего API одинаково, но части реализации построены на [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] общей реализации XAML в сборке System.Xaml, которая повышает многие отчетности и технические аспекты анализа XAML. Отбор информации о [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] обязательно влечет за собой, включая System.Xaml как ссылки и сведения о реализации, такие как исключения сообщил могут поступать из System.Xaml определенных типов.  
  
## Examples  
 В следующем примере выполняется преобразование <xref:System.Windows.Controls.Button> в строку с помощью <xref:System.Windows.Markup.XamlWriter> класса.  Строка затем загружается обратно в <xref:System.Windows.Controls.Button> с помощью статического <xref:System.Windows.Markup.XamlReader.Load%2A> метод <xref:System.Windows.Markup.XamlReader> класса.  
  
 [!code-csharp[xamlreaderwritersnippets#XamlReaderLoadXmlReader](~/samples/snippets/csharp/VS_Snippets_Wpf/XamlReaderWriterSnippets/CSharp/Window1.xaml.cs#xamlreaderloadxmlreader)]
 [!code-vb[xamlreaderwritersnippets#XamlReaderLoadXmlReader](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XamlReaderWriterSnippets/visualbasic/window1.xaml.vb#xamlreaderloadxmlreader)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Markup.XamlWriter" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlReader ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlReader();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Windows.Markup.XamlReader" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelAsync">
      <MemberSignature Language="C#" Value="public void CancelAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.CancelAsync" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelAsync ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Прерывает текущую операцию асинхронной загрузки, если имеется отложенная асинхронная операция загрузки.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Markup.XamlReader.CancelAsync%2A> асинхронная операция; Таким образом некоторые загрузка может происходить до отмены операции.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWpfSchemaContext">
      <MemberSignature Language="C#" Value="public static System.Xaml.XamlSchemaContext GetWpfSchemaContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xaml.XamlSchemaContext GetWpfSchemaContext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.GetWpfSchemaContext" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetWpfSchemaContext () As XamlSchemaContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xaml::XamlSchemaContext ^ GetWpfSchemaContext();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlSchemaContext</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает объект <see cref="T:System.Xaml.XamlSchemaContext" />, который представляет параметры схемы контекста WPF для класса <see cref="T:System.Windows.Markup.XamlReader" />.</summary>
        <returns>Объект <see cref="T:System.Xaml.XamlSchemaContext" />, который представляет параметры контекста схемы WPF для класса <see cref="T:System.Windows.Markup.XamlReader" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Считывает входные данные XAML и возвращает корень соответствующего дерева объектов.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Load(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::IO::Stream ^ stream);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">XAML для загрузки в форме потока.</param>
        <summary>Считывает входные данные XAML в указанном пространстве имен <see cref="T:System.IO.Stream" /> и возвращает корневой объект <see cref="T:System.Object" /> соответствующего дерева объектов.</summary>
        <returns>Объект в корне созданного дерева объектов.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере сохраняется <xref:System.Windows.Controls.Button> в <xref:System.IO.MemoryStream> с помощью <xref:System.Windows.Markup.XamlWriter> класса. Поток затем загружается обратно в <xref:System.Windows.Controls.Button> с помощью статического <xref:System.Windows.Markup.XamlReader.Load%2A> метод <xref:System.Windows.Markup.XamlReader> класса.  
  
 [!code-csharp[XamlReaderWriterSnippets#XamlReaderLoadXmlReader](~/samples/snippets/csharp/VS_Snippets_Wpf/XamlReaderWriterSnippets/CSharp/Window1.xaml.cs#xamlreaderloadxmlreader)]
 [!code-vb[XamlReaderWriterSnippets#XamlReaderLoadXmlReader](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XamlReaderWriterSnippets/visualbasic/window1.xaml.vb#xamlreaderloadxmlreader)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="stream" /> имеет значение <see langword="null" />.</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.Xaml.XamlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.Xaml.XamlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Load(System.Xaml.XamlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (reader As XamlReader) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::Xaml::XamlReader ^ reader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xaml.XamlReader" />
      </Parameters>
      <Docs>
        <param name="reader">Объект <see cref="T:System.Xaml.XamlReader" />. Ожидается, что он инициализируется входными данными XAML.</param>
        <summary>Считывает входные данные XAML через предоставленный класс <see cref="T:System.Xaml.XamlReader" /> и возвращает корневой объект соответствующего дерева объектов.</summary>
        <returns>Корневой объект созданного дерева объектов.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Входные данные <xref:System.Xaml.XamlReader> может быть <xref:System.Windows.Baml2006.Baml2006Reader>. Это способ загрузки BAML во время выполнения или для целей средства локализации.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="reader" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Load(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (reader As XmlReader) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::Xml::XmlReader ^ reader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">Класс <see cref="T:System.Xml.XmlReader" />, который уже загрузил входные данные XAML, чтобы загрузить в XML-форму.</param>
        <summary>Считывает входные данные XAML в указанном классе <see cref="T:System.Xml.XmlReader" /> и возвращает корневой объект соответствующего дерева объектов.</summary>
        <returns>Корневой объект созданного дерева объектов.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере выполняется преобразование <xref:System.Windows.Controls.Button> в строку с помощью <xref:System.Windows.Markup.XamlWriter> класса.  Строка затем загружается обратно в <xref:System.Windows.Controls.Button> с помощью статического <xref:System.Windows.Markup.XamlReader.Load%2A> метод <xref:System.Windows.Markup.XamlReader> класса.  
  
 [!code-csharp[XamlReaderWriterSnippets#XamlReaderLoadXmlReader](~/samples/snippets/csharp/VS_Snippets_Wpf/XamlReaderWriterSnippets/CSharp/Window1.xaml.cs#xamlreaderloadxmlreader)]
 [!code-vb[XamlReaderWriterSnippets#XamlReaderLoadXmlReader](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XamlReaderWriterSnippets/visualbasic/window1.xaml.vb#xamlreaderloadxmlreader)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="reader" /> имеет значение <see langword="null" />.</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.IO.Stream stream, System.Windows.Markup.ParserContext parserContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.IO.Stream stream, class System.Windows.Markup.ParserContext parserContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Load(System.IO.Stream,System.Windows.Markup.ParserContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::IO::Stream ^ stream, System::Windows::Markup::ParserContext ^ parserContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="parserContext" Type="System.Windows.Markup.ParserContext" />
      </Parameters>
      <Docs>
        <param name="stream">Поток, содержащий входные данные XAML для загрузки.</param>
        <param name="parserContext">Контекстная информация, используемая анализатором.</param>
        <summary>Считывает входные данные XAML в указанном классе <see cref="T:System.IO.Stream" /> и возвращает корневой объект соответствующего дерева объектов.</summary>
        <returns>Корневой объект созданного дерева объектов.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="stream" /> имеет значение <see langword="null" />.  
  
 - или -  
  
 Свойство <paramref name="parserContext" /> имеет значение <see langword="null" />.</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <MemberGroup MemberName="LoadAsync">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Считывает разметку XAML и возвращает объект, соответствующий корню указанной разметки.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public object LoadAsync (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object LoadAsync(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.LoadAsync(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ LoadAsync(System::IO::Stream ^ stream);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">Поток, содержащий загружаемые входные данные XAML.</param>
        <summary>Считывает входные данные XAML в указанном классе <see cref="T:System.IO.Stream" /> и возвращает корневой объект соответствующего дерева объектов.</summary>
        <returns>Корневой объект созданного дерева объектов.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Асинхронная операция загрузки XAML изначально возвращает объект, который является ограниченным исключительно корневого объекта. Асинхронно затем анализ XAML по-прежнему и заполняются все дочерние объекты в корневом каталоге. Это отличается от обычной обработка поведение и его взаимодействия с концепциями WPF во время существования объекта XAML WPF. Диалог типичные (синхронные) все свойства объекта, включая все дочерние коллекции заполняются перед возвратом элемента и отчетом о его загрузке. Это поведение соответствует снизу вверх методика создания дерева, где корневого объекта — последний объект станет доступным.  
  
 Обычно возвращаемый объект будет назначен в некоторое расположение в дереве объектов приложения WPF, с набором знаний, что содержимое может все еще поступать и вызывать периодические обновления макета, если все содержимое раскрывается как часть пользовательского интерфейса. По этой причине обычно изолировать или виртуализировать любой асинхронно загруженных объектов из XAML и использовать логику приложения или состояние приложения для уведомления при <xref:System.Windows.Markup.XamlReader.LoadCompleted> обрабатывается.  
  
 Чтобы <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> для загрузки асинхронно входные данные XAML, должен содержать корневой элемент в входные данные XAML, атрибут и значение `x:SynchronousMode="Async"`. Значения обрабатываются с учетом регистра. Если корень ввода XAML не содержит `x:SynchronousMode="Async"`, исключение не создается, и вызов обрабатывается как синхронный (см. <xref:System.Windows.Markup.XamlReader.Load%28System.IO.Stream%29>).  
  
 Только одна операция асинхронной загрузки на один экземпляр <xref:System.Windows.Markup.XamlReader> класса могут выполняться одновременно.  Если несколько асинхронных операций выполняется на том же экземпляре <xref:System.Windows.Markup.XamlReader> класса <xref:System.InvalidOperationException> создается исключение.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="stream" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Несколько операций загрузки с одним <see cref="T:System.Windows.Markup.XamlReader" /> параллельно поставлены в режим ожидания.</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public object LoadAsync (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object LoadAsync(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.LoadAsync(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadAsync (reader As XmlReader) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ LoadAsync(System::Xml::XmlReader ^ reader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">Существующий класс <see cref="T:System.Xml.XmlReader" />, который уже загрузил/прочитал входные данные XAML.</param>
        <summary>Считывает входные данные XAML в указанном классе <see cref="T:System.Xml.XmlReader" /> и возвращает корневой объект соответствующего дерева объектов.</summary>
        <returns>Корневой объект созданного дерева объектов.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Асинхронная операция загрузки XAML изначально возвращает объект, который является ограниченным исключительно корневого объекта. Асинхронно затем анализ XAML по-прежнему и заполняются все дочерние объекты в корневом каталоге. Это отличается от обычной обработка поведение и его взаимодействия с концепциями WPF во время существования объекта XAML WPF. Диалог типичные (синхронные) все свойства объекта, включая все дочерние коллекции заполняются перед возвратом элемента и отчетом о его загрузке. Это поведение соответствует снизу вверх методика создания дерева, где корневого объекта — последний объект станет доступным.  
  
 Обычно возвращаемый объект из будет назначен <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> в некоторое расположение в дереве объектов вашего приложения с учетом того, содержимое может по-прежнему поступать и вызывать периодические обновления макета, если все содержимое предоставляется как часть ПОЛЬЗОВАТЕЛЬСКИЙ ИНТЕРФЕЙС. По этой причине обычно изолировать или виртуализировать любой асинхронно загруженных объектов из XAML и использовать логику приложения или состояние приложения для уведомления при <xref:System.Windows.Markup.XamlReader.LoadCompleted> обрабатывается.  
  
 Чтобы <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> для загрузки асинхронно входные данные XAML, должен содержать корневой элемент в разметке XAML, атрибут и значение `x:SynchronousMode="Async"`. Значения обрабатываются с учетом регистра. Если корень разметки XAML не содержит `x:SynchronousMode="Async"`, исключение не создается, и вызов обрабатывается как синхронный (см. <xref:System.Windows.Markup.XamlReader.Load%28System.Xml.XmlReader%29>).  
  
 Только одна операция асинхронной загрузки на один экземпляр <xref:System.Windows.Markup.XamlReader> класса могут выполняться одновременно.  Если несколько асинхронных операций выполняется на том же экземпляре <xref:System.Windows.Markup.XamlReader> класса <xref:System.InvalidOperationException> создается исключение.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="reader" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Несколько операций загрузки параллельно выполняется с одним <see cref="T:System.Windows.Markup.XamlReader" />.</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public object LoadAsync (System.IO.Stream stream, System.Windows.Markup.ParserContext parserContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object LoadAsync(class System.IO.Stream stream, class System.Windows.Markup.ParserContext parserContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.LoadAsync(System.IO.Stream,System.Windows.Markup.ParserContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ LoadAsync(System::IO::Stream ^ stream, System::Windows::Markup::ParserContext ^ parserContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="parserContext" Type="System.Windows.Markup.ParserContext" />
      </Parameters>
      <Docs>
        <param name="stream">Поток, содержащий загружаемые входные данные XAML.</param>
        <param name="parserContext">Контекстная информация, используемая анализатором.</param>
        <summary>Считывает входные данные XAML в указанном классе <see cref="T:System.IO.Stream" /> и возвращает корневой объект соответствующего дерева объектов.</summary>
        <returns>Корневой объект созданного дерева объектов.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Асинхронная операция загрузки XAML изначально возвращает объект, который является ограниченным исключительно корневого объекта. Асинхронно затем анализ XAML по-прежнему и заполняются все дочерние объекты в корневом каталоге. Это отличается от обычной обработка поведение и его взаимодействия с концепциями WPF во время существования объекта XAML WPF. Диалог типичные (синхронные) все свойства объекта, включая все дочерние коллекции заполняются перед возвратом элемента и отчетом о его загрузке. Это поведение соответствует снизу вверх методика создания дерева, где корневого объекта — последний объект станет доступным.  
  
 Обычно возвращаемый объект будет назначен в некоторое расположение в дереве объектов вашего приложения, с набором знаний, что содержимое может все еще поступать и вызывать периодические обновления макета, если все содержимое раскрывается как часть пользовательского интерфейса. По этой причине обычно изолировать или виртуализировать любой асинхронно загруженных объектов из XAML и использовать логику приложения или состояние приложения для уведомления при <xref:System.Windows.Markup.XamlReader.LoadCompleted> обрабатывается.  
  
 Чтобы <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> для асинхронной загрузки разметки корневой элемент в разметке XAML должен содержать атрибут и значение `x:SynchronousMode="Async"`. Значения обрабатываются с учетом регистра. Если корень разметки XAML не содержит `x:SynchronousMode="Async"`, исключение не создается, и вызов обрабатывается как синхронный (см. <xref:System.Windows.Markup.XamlReader.Load%28System.IO.Stream%2CSystem.Windows.Markup.ParserContext%29>).  
  
 Только одна операция асинхронной загрузки на один экземпляр <xref:System.Windows.Markup.XamlReader> класса могут выполняться одновременно.  Если несколько асинхронных операций выполняется на том же экземпляре <xref:System.Windows.Markup.XamlReader> класса <xref:System.InvalidOperationException> создается исключение.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="stream" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Несколько операций загрузки параллельно выполняется с одним <see cref="T:System.Windows.Markup.XamlReader" />.</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="LoadCompleted">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.AsyncCompletedEventHandler LoadCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.AsyncCompletedEventHandler LoadCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Markup.XamlReader.LoadCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event LoadCompleted As AsyncCompletedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::ComponentModel::AsyncCompletedEventHandler ^ LoadCompleted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.AsyncCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит по завершении асинхронной операции загрузки.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Markup.XamlReader.LoadCompleted> также вызывается при отмене асинхронной операции загрузки.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.AsyncCompletedEventHandler" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Считывает разметку в указанной текстовой строке и возвращает объект, соответствующий корню указанной разметки.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static object Parse (string xamlText);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Parse(string xamlText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (xamlText As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Parse(System::String ^ xamlText);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xamlText">Введенное значение XAML как единственная текстовая строка.</param>
        <summary>Считывает входные данные XAML в указанной текстовой строке и возвращает объект, соответствующий корню указанной разметки.</summary>
        <returns>Корневой объект созданного дерева объектов.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Реализация вызывает <xref:System.Windows.Markup.XamlReader.Load%2A> внутренне после создания потока из строки. В разделе <xref:System.Windows.Markup.XamlReader.Load%2A> для получения дополнительных сведений, таких как возможных исключений.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static object Parse (string xamlText, System.Windows.Markup.ParserContext parserContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Parse(string xamlText, class System.Windows.Markup.ParserContext parserContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Parse(System.String,System.Windows.Markup.ParserContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Parse(System::String ^ xamlText, System::Windows::Markup::ParserContext ^ parserContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlText" Type="System.String" />
        <Parameter Name="parserContext" Type="System.Windows.Markup.ParserContext" />
      </Parameters>
      <Docs>
        <param name="xamlText">Введенное значение XAML как единственная текстовая строка.</param>
        <param name="parserContext">Контекстная информация, используемая анализатором.</param>
        <summary>Считывает разметку XAML в указанной текстовой строке (используя указанный класс <see cref="T:System.Windows.Markup.ParserContext" />) и возвращает объект, соответствующий корню указанной разметки.</summary>
        <returns>Корневой объект созданного дерева объектов.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Реализация вызывает <xref:System.Windows.Markup.XamlReader.Load%2A> внутренне после создания потока из строки. В разделе <xref:System.Windows.Markup.XamlReader.Load%2A> для получения дополнительных сведений, таких как возможных исключений.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>