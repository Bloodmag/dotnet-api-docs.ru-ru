<Type Name="Dispatcher" FullName="System.Windows.Threading.Dispatcher">
  <TypeSignature Language="C#" Value="public sealed class Dispatcher" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Dispatcher extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Threading.Dispatcher" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Dispatcher" />
  <TypeSignature Language="C++ CLI" Value="public ref class Dispatcher sealed" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="79961-101">Предоставляет службы для управления очередью рабочих элементов для потока.</span><span class="sxs-lookup"><span data-stu-id="79961-101">Provides services for managing the queue of work items for a thread.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="79961-102"><xref:System.Windows.Threading.Dispatcher> Поддерживает приоритетную очередь рабочих элементов для конкретного потока.</span><span class="sxs-lookup"><span data-stu-id="79961-102">The <xref:System.Windows.Threading.Dispatcher> maintains a prioritized queue of work items for a specific thread.</span></span>  
  
 <span data-ttu-id="79961-103">При <xref:System.Windows.Threading.Dispatcher> создается в потоке, который становится единственным <xref:System.Windows.Threading.Dispatcher> , могут быть связаны с потоком, даже если <xref:System.Windows.Threading.Dispatcher> завершает работу.</span><span class="sxs-lookup"><span data-stu-id="79961-103">When a <xref:System.Windows.Threading.Dispatcher> is created on a thread, it becomes the only <xref:System.Windows.Threading.Dispatcher> that can be associated with the thread, even if the <xref:System.Windows.Threading.Dispatcher> is shut down.</span></span>  
  
 <span data-ttu-id="79961-104">При попытке получить <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> для текущего потока и <xref:System.Windows.Threading.Dispatcher> не связан с потоком, <xref:System.Windows.Threading.Dispatcher> будет создан.</span><span class="sxs-lookup"><span data-stu-id="79961-104">If you attempt to get the <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> for the current thread and a <xref:System.Windows.Threading.Dispatcher> is not associated with the thread, a <xref:System.Windows.Threading.Dispatcher> will be created.</span></span> <span data-ttu-id="79961-105">Объект <xref:System.Windows.Threading.Dispatcher> также создается при создании <xref:System.Windows.Threading.DispatcherObject>.</span><span class="sxs-lookup"><span data-stu-id="79961-105">A <xref:System.Windows.Threading.Dispatcher> is also created when you create a <xref:System.Windows.Threading.DispatcherObject>.</span></span> <span data-ttu-id="79961-106">Если вы создаете <xref:System.Windows.Threading.Dispatcher> в фоновом потоке, не забудьте выключить диспетчер перед выходом из потока.</span><span class="sxs-lookup"><span data-stu-id="79961-106">If you create a <xref:System.Windows.Threading.Dispatcher> on a background thread, be sure to shut down the dispatcher before exiting the thread.</span></span>  
  
 <span data-ttu-id="79961-107">Если <xref:System.Windows.Threading.Dispatcher> завершает работу, его нельзя перезапустить.</span><span class="sxs-lookup"><span data-stu-id="79961-107">If a <xref:System.Windows.Threading.Dispatcher> is shut down, it cannot be restarted.</span></span>  
  
 <span data-ttu-id="79961-108">В [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], <xref:System.Windows.Threading.DispatcherObject> может осуществляться только по <xref:System.Windows.Threading.Dispatcher> связанного с ним.</span><span class="sxs-lookup"><span data-stu-id="79961-108">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], a <xref:System.Windows.Threading.DispatcherObject> can only be accessed by the <xref:System.Windows.Threading.Dispatcher> it is associated with.</span></span>  <span data-ttu-id="79961-109">Например, фоновый поток не может обновить содержимое <xref:System.Windows.Controls.Button> , связанный с <xref:System.Windows.Threading.Dispatcher> на [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] потока.</span><span class="sxs-lookup"><span data-stu-id="79961-109">For example, a background thread cannot update the contents of a <xref:System.Windows.Controls.Button> that is associated with the <xref:System.Windows.Threading.Dispatcher> on the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] thread.</span></span>  <span data-ttu-id="79961-110">Чтобы фоновый поток для доступа к <xref:System.Windows.Controls.ContentControl.Content%2A> свойство <xref:System.Windows.Controls.Button>, фоновый поток должны делегировать работу в <xref:System.Windows.Threading.Dispatcher> связанных с [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] потока.</span><span class="sxs-lookup"><span data-stu-id="79961-110">In order for the background thread to access the <xref:System.Windows.Controls.ContentControl.Content%2A> property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] thread.</span></span>  <span data-ttu-id="79961-111">Это достигается с помощью <xref:System.Windows.Threading.Dispatcher.Invoke%2A> или <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="79961-111">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="79961-112"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> является синхронным и <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> является асинхронным.</span><span class="sxs-lookup"><span data-stu-id="79961-112"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="79961-113">Операция добавляется в очередь <xref:System.Windows.Threading.Dispatcher> по указанному индексу <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="79961-113">The operation is added to the queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="79961-114">Если <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> будет вызван на <xref:System.Windows.Threading.Dispatcher> , ее работа была прекращена свойство status возвращаемого <xref:System.Windows.Threading.DispatcherOperation> равно <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span><span class="sxs-lookup"><span data-stu-id="79961-114">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 <span data-ttu-id="79961-115">Все методы в <xref:System.Windows.Threading.Dispatcher>, за исключением элемента <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A>, доступны из любого потока.</span><span class="sxs-lookup"><span data-stu-id="79961-115">All of the methods on <xref:System.Windows.Threading.Dispatcher>, with the exception of <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A>, are free-threaded.</span></span>  
  
 <span data-ttu-id="79961-116">Объекты, которые являются производными от <xref:System.Windows.Threading.DispatcherObject> поддерживают сходство потоков.</span><span class="sxs-lookup"><span data-stu-id="79961-116">Objects that derive from <xref:System.Windows.Threading.DispatcherObject> have thread affinity.</span></span>  
  
 <span data-ttu-id="79961-117">Объекты, которые являются производными от <xref:System.Windows.Freezable> являются свободнопоточный зафиксированный их.</span><span class="sxs-lookup"><span data-stu-id="79961-117">Objects that derive from <xref:System.Windows.Freezable> are free-threaded when they are frozen.</span></span>  <span data-ttu-id="79961-118">Дополнительные сведения см. в разделе [Общие сведения об объектах класса Freezable](~/docs/framework/wpf/advanced/freezable-objects-overview.md).</span><span class="sxs-lookup"><span data-stu-id="79961-118">For more information, see [Freezable Objects Overview](~/docs/framework/wpf/advanced/freezable-objects-overview.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="79961-119">Приведенный ниже показано, как выполнить операцию на <xref:System.Windows.Threading.Dispatcher>.</span><span class="sxs-lookup"><span data-stu-id="79961-119">The following example shows how to place an operation onto a <xref:System.Windows.Threading.Dispatcher>.</span></span>  <span data-ttu-id="79961-120">Полный исходный код этого примера см. в разделе [однопотокового приложения с образцом длительных вычислений](http://go.microsoft.com/fwlink/?LinkID=160038).</span><span class="sxs-lookup"><span data-stu-id="79961-120">For the full source code of this example, see [Single-Threaded Application with Long-Running Calculation Sample](http://go.microsoft.com/fwlink/?LinkID=160038).</span></span>  
  
 <span data-ttu-id="79961-121">Во-первых создается делегат, который не принимает аргументы.</span><span class="sxs-lookup"><span data-stu-id="79961-121">First, a delegate is created that accepts no arguments.</span></span>  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberinit)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberinit)]   
  
 <span data-ttu-id="79961-122">Далее, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> вызывается.</span><span class="sxs-lookup"><span data-stu-id="79961-122">Next, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> is called.</span></span>  <span data-ttu-id="79961-123">Этот вызов <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> принимает два параметра: приоритет, который имеет значение <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>и обратный вызов, который передается в экземпляр делегата `NextPrimeDelegate`.</span><span class="sxs-lookup"><span data-stu-id="79961-123">This call to <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> takes two parameters: the priority, which is set to <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>, and the callback, which is passed in through an instance of the delegate `NextPrimeDelegate`.</span></span>  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberbegininvoke)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberbegininvoke)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="BeginInvoke">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="79961-124">Выполняет делегат асинхронно, в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-124">Executes a delegate asynchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="79961-125">В [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], поток, создавший <xref:System.Windows.Threading.DispatcherObject> может получить доступ к этому объекту.</span><span class="sxs-lookup"><span data-stu-id="79961-125">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="79961-126">Например, фоновый поток, который выполнения от основного потока пользовательского интерфейса не может обновить содержимое <xref:System.Windows.Controls.Button> , созданного в потоке пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="79961-126">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="79961-127">Чтобы фоновый поток, получать доступ к свойству содержимого <xref:System.Windows.Controls.Button>, фоновый поток должны делегировать работу в <xref:System.Windows.Threading.Dispatcher> связанного с потоком пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="79961-127">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="79961-128">Это достигается с помощью <xref:System.Windows.Threading.Dispatcher.Invoke%2A> или <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="79961-128">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="79961-129"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> является синхронным и <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> является асинхронным.</span><span class="sxs-lookup"><span data-stu-id="79961-129"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="79961-130">Операция добавляется в очередь событий <xref:System.Windows.Threading.Dispatcher> по указанному индексу <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="79961-130">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="79961-131"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> является асинхронным; поэтому управление немедленно возвращается вызывающему объекту после его вызова.</span><span class="sxs-lookup"><span data-stu-id="79961-131"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="79961-132"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> Возвращает <xref:System.Windows.Threading.DispatcherOperation> объект, который может использоваться для взаимодействия с делегатом после делегата события очереди.</span><span class="sxs-lookup"><span data-stu-id="79961-132"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue.</span></span>  
  
 <span data-ttu-id="79961-133"><xref:System.Windows.Threading.DispatcherOperation> Объект, возвращаемый <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> может использоваться для взаимодействия с указанный делегат, такие как несколькими способами:</span><span class="sxs-lookup"><span data-stu-id="79961-133">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="79961-134">Изменение <xref:System.Windows.Threading.DispatcherPriority> делегата, как он находится в состоянии ожидания выполнения в очередь событий.</span><span class="sxs-lookup"><span data-stu-id="79961-134">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="79961-135">Удаление делегата из очереди событий.</span><span class="sxs-lookup"><span data-stu-id="79961-135">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="79961-136">Ожидание возврата из делегата.</span><span class="sxs-lookup"><span data-stu-id="79961-136">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="79961-137">Получение значения, возвращаемого делегатом после его выполнения.</span><span class="sxs-lookup"><span data-stu-id="79961-137">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="79961-138">При наличии нескольких <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> вызовов, выполняемых на том же <xref:System.Windows.Threading.DispatcherPriority>, они будут выполнены в порядке вызовов.</span><span class="sxs-lookup"><span data-stu-id="79961-138">If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made.</span></span>  
  
 <span data-ttu-id="79961-139">Если <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> будет вызван на <xref:System.Windows.Threading.Dispatcher> , ее работа была прекращена свойство status возвращаемого <xref:System.Windows.Threading.DispatcherOperation> равно <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span><span class="sxs-lookup"><span data-stu-id="79961-139">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (Delegate method, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (method As Delegate, ParamArray args As Object()) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(Delegate ^ method, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="79961-140">Делегат метода с параметрами, указанными в <c>args</c>, который помещен в очередь событий <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-140">The delegate to a method that takes parameters specified in <c>args</c>, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="args"><span data-ttu-id="79961-141">Массив объектов, передаваемых в качестве аргументов указанному методу.</span><span class="sxs-lookup"><span data-stu-id="79961-141">An array of objects to pass as arguments to the given method.</span></span> <span data-ttu-id="79961-142">Может принимать значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="79961-142">Can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="79961-143">Выполняет указанный делегат асинхронно с указанными аргументами в потоке, в котором был создан объект <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-143">Executes the specified delegate asynchronously with the specified arguments on the thread that the <see cref="T:System.Windows.Threading.Dispatcher" /> was created on.</span></span></summary>
        <returns><span data-ttu-id="79961-144">Объект, возвращаемый сразу после вызова <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />, используемый для взаимодействия с делегатом, ожидающим выполнения в очереди событий.</span><span class="sxs-lookup"><span data-stu-id="79961-144">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="79961-145"><xref:System.Windows.Threading.DispatcherOperation> Объект, возвращаемый <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> может использоваться для взаимодействия с указанный делегат, такие как несколькими способами:</span><span class="sxs-lookup"><span data-stu-id="79961-145">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="79961-146">Изменение <xref:System.Windows.Threading.DispatcherPriority> делегата, как он находится в состоянии ожидания выполнения в очередь событий.</span><span class="sxs-lookup"><span data-stu-id="79961-146">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="79961-147">Удаление делегата из очереди событий.</span><span class="sxs-lookup"><span data-stu-id="79961-147">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="79961-148">Ожидание возврата из делегата.</span><span class="sxs-lookup"><span data-stu-id="79961-148">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="79961-149">Получение значения, возвращаемого делегатом после его выполнения.</span><span class="sxs-lookup"><span data-stu-id="79961-149">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="79961-150"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> является асинхронным; поэтому управление немедленно возвращается вызывающему объекту после его вызова.</span><span class="sxs-lookup"><span data-stu-id="79961-150"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="79961-151">В [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], поток, создавший <xref:System.Windows.Threading.DispatcherObject> может получить доступ к этому объекту.</span><span class="sxs-lookup"><span data-stu-id="79961-151">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="79961-152">Например, фоновый поток, который выполнения от основного потока пользовательского интерфейса не может обновить содержимое <xref:System.Windows.Controls.Button> , созданного в потоке пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="79961-152">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="79961-153">Чтобы фоновый поток, получать доступ к свойству содержимого <xref:System.Windows.Controls.Button>, фоновый поток должны делегировать работу в <xref:System.Windows.Threading.Dispatcher> связанного с потоком пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="79961-153">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="79961-154">Это достигается с помощью <xref:System.Windows.Threading.Dispatcher.Invoke%2A> или <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="79961-154">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="79961-155"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> является синхронным и <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> является асинхронным.</span><span class="sxs-lookup"><span data-stu-id="79961-155"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="79961-156">Операция добавляется в очередь событий <xref:System.Windows.Threading.Dispatcher> по указанному индексу <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="79961-156">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="79961-157">Если <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> будет вызван на <xref:System.Windows.Threading.Dispatcher> , ее работа была прекращена свойство status возвращаемого <xref:System.Windows.Threading.DispatcherOperation> равно <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span><span class="sxs-lookup"><span data-stu-id="79961-157">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (System.Windows.Threading.DispatcherPriority priority, Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (priority As DispatcherPriority, method As Delegate) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="79961-158">Приоритет относительно других ожидающих выполнения операций в очереди событий <see cref="T:System.Windows.Threading.Dispatcher" />, с которым вызван заданный метод.</span><span class="sxs-lookup"><span data-stu-id="79961-158">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="79961-159">Делегат метода без аргументов, помещенный в очередь событий <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-159">The delegate to a method that takes no arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <summary><span data-ttu-id="79961-160">Выполняет указанный делегат асинхронно, с заданным приоритетом, в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-160">Executes the specified delegate asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="79961-161">Объект, возвращаемый сразу после вызова <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />, используемый для взаимодействия с делегатом, ожидающим выполнения в очереди событий.</span><span class="sxs-lookup"><span data-stu-id="79961-161">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="79961-162">При наличии нескольких <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> вызовов, выполняемых на том же <xref:System.Windows.Threading.DispatcherPriority>, они будут выполнены в порядке вызовов.</span><span class="sxs-lookup"><span data-stu-id="79961-162">If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made.</span></span>  
  
 <span data-ttu-id="79961-163"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> Возвращает <xref:System.Windows.Threading.DispatcherOperation> объект, который может использоваться для взаимодействия с делегатом после делегата события очереди.</span><span class="sxs-lookup"><span data-stu-id="79961-163"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue.</span></span>  
  
 <span data-ttu-id="79961-164"><xref:System.Windows.Threading.DispatcherOperation> Объект, возвращаемый <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> может использоваться для взаимодействия с указанный делегат, такие как несколькими способами:</span><span class="sxs-lookup"><span data-stu-id="79961-164">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="79961-165">Изменение <xref:System.Windows.Threading.DispatcherPriority> делегата, как он находится в состоянии ожидания выполнения в очередь событий.</span><span class="sxs-lookup"><span data-stu-id="79961-165">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="79961-166">Удаление делегата из очереди событий.</span><span class="sxs-lookup"><span data-stu-id="79961-166">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="79961-167">Ожидание возврата из делегата.</span><span class="sxs-lookup"><span data-stu-id="79961-167">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="79961-168">Получение значения, возвращаемого делегатом после его выполнения.</span><span class="sxs-lookup"><span data-stu-id="79961-168">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="79961-169"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> является асинхронным; поэтому управление немедленно возвращается вызывающему объекту после его вызова.</span><span class="sxs-lookup"><span data-stu-id="79961-169"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="79961-170">В [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], поток, создавший <xref:System.Windows.Threading.DispatcherObject> может получить доступ к этому объекту.</span><span class="sxs-lookup"><span data-stu-id="79961-170">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="79961-171">Например, фоновый поток, который выполнения от основного потока пользовательского интерфейса не может обновить содержимое <xref:System.Windows.Controls.Button> , созданного в потоке пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="79961-171">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="79961-172">Чтобы фоновый поток, получать доступ к свойству содержимого <xref:System.Windows.Controls.Button>, фоновый поток должны делегировать работу в <xref:System.Windows.Threading.Dispatcher> связанного с потоком пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="79961-172">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="79961-173">Это достигается с помощью <xref:System.Windows.Threading.Dispatcher.Invoke%2A> или <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="79961-173">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="79961-174"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> является синхронным и <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> является асинхронным.</span><span class="sxs-lookup"><span data-stu-id="79961-174"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="79961-175">Операция добавляется в очередь событий <xref:System.Windows.Threading.Dispatcher> по указанному индексу <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="79961-175">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="79961-176">Если <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> будет вызван на <xref:System.Windows.Threading.Dispatcher> , ее работа была прекращена свойство status возвращаемого <xref:System.Windows.Threading.DispatcherOperation> равно <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span><span class="sxs-lookup"><span data-stu-id="79961-176">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="79961-177">Приведенный ниже показано, как выполнить операцию на <xref:System.Windows.Threading.Dispatcher>.</span><span class="sxs-lookup"><span data-stu-id="79961-177">The following example shows how to place an operation onto a <xref:System.Windows.Threading.Dispatcher>.</span></span>  <span data-ttu-id="79961-178">Полный исходный код этого примера см. в разделе [однопотокового приложения с образцом длительных вычислений](http://go.microsoft.com/fwlink/?LinkID=160038).</span><span class="sxs-lookup"><span data-stu-id="79961-178">For the full source code of this example, see [Single-Threaded Application with Long-Running Calculation Sample](http://go.microsoft.com/fwlink/?LinkID=160038).</span></span>  
  
 <span data-ttu-id="79961-179">Во-первых создается делегат, который не принимает аргументы.</span><span class="sxs-lookup"><span data-stu-id="79961-179">First, a delegate is created that accepts no arguments.</span></span>  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberinit)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberinit)]   
  
 <span data-ttu-id="79961-180">Далее, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> вызывается.</span><span class="sxs-lookup"><span data-stu-id="79961-180">Next, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> is called.</span></span>  <span data-ttu-id="79961-181">Поскольку каждый <xref:System.Windows.Threading.DispatcherObject> имеет свойство, которое возвращает <xref:System.Windows.Threading.Dispatcher> она связана с, нужный <xref:System.Windows.Threading.Dispatcher> получить с помощью запроса <xref:System.Windows.Threading.DispatcherObject>в данном случае <xref:System.Windows.Controls.Button> с именем `startStopButton`.</span><span class="sxs-lookup"><span data-stu-id="79961-181">Because every <xref:System.Windows.Threading.DispatcherObject> has a property that returns the <xref:System.Windows.Threading.Dispatcher> it is associated with, the desired <xref:System.Windows.Threading.Dispatcher> is obtained by querying the <xref:System.Windows.Threading.DispatcherObject>, in this case a <xref:System.Windows.Controls.Button> named `startStopButton`.</span></span>   <span data-ttu-id="79961-182">Вызов <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> принимает два параметра: приоритет, который имеет значение <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>и обратный вызов, который передается в экземпляр делегата `NextPrimeDelegate`.</span><span class="sxs-lookup"><span data-stu-id="79961-182">The call to <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> takes two parameters: the priority, which is set to <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>, and the callback, which is passed in through an instance of the delegate `NextPrimeDelegate`.</span></span>  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberbegininvoke)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberbegininvoke)]   
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="79961-183">Свойство <paramref name="method" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="79961-183"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <span data-ttu-id="79961-184"><paramref name="priority" /> не является допустимым <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span><span class="sxs-lookup"><span data-stu-id="79961-184"><paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (Delegate method, System.Windows.Threading.DispatcherPriority priority, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(class System.Delegate method, valuetype System.Windows.Threading.DispatcherPriority priority, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (method As Delegate, priority As DispatcherPriority, ParamArray args As Object()) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(Delegate ^ method, System::Windows::Threading::DispatcherPriority priority, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="79961-185">Делегат метода с параметрами, указанными в <c>args</c>, который помещен в очередь событий <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-185">The delegate to a method that takes parameters specified in <c>args</c>, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="priority"><span data-ttu-id="79961-186">Приоритет относительно других ожидающих выполнения операций в очереди событий <see cref="T:System.Windows.Threading.Dispatcher" />, с которым вызван заданный метод.</span><span class="sxs-lookup"><span data-stu-id="79961-186">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="args"><span data-ttu-id="79961-187">Массив объектов, передаваемых в качестве аргументов указанному методу.</span><span class="sxs-lookup"><span data-stu-id="79961-187">An array of objects to pass as arguments to the given method.</span></span> <span data-ttu-id="79961-188">Может принимать значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="79961-188">Can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="79961-189">Выполняет указанный делегат асинхронно, с заданными приоритетом и аргументами, в потоке, в котором был создан объект <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-189">Executes the specified delegate asynchronously with the specified arguments, at the specified priority, on the thread that the <see cref="T:System.Windows.Threading.Dispatcher" /> was created on.</span></span></summary>
        <returns><span data-ttu-id="79961-190">Объект, возвращаемый сразу после вызова <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />, используемый для взаимодействия с делегатом, ожидающим выполнения в очереди событий.</span><span class="sxs-lookup"><span data-stu-id="79961-190">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="79961-191"><xref:System.Windows.Threading.DispatcherOperation> Объект, возвращаемый <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> может использоваться для взаимодействия с указанный делегат, такие как несколькими способами:</span><span class="sxs-lookup"><span data-stu-id="79961-191">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="79961-192">Изменение <xref:System.Windows.Threading.DispatcherPriority> делегата, как он находится в состоянии ожидания выполнения в очередь событий.</span><span class="sxs-lookup"><span data-stu-id="79961-192">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="79961-193">Удаление делегата из очереди событий.</span><span class="sxs-lookup"><span data-stu-id="79961-193">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="79961-194">Ожидание возврата из делегата.</span><span class="sxs-lookup"><span data-stu-id="79961-194">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="79961-195">Получение значения, возвращаемого делегатом после его выполнения.</span><span class="sxs-lookup"><span data-stu-id="79961-195">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="79961-196"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> является асинхронным; поэтому управление немедленно возвращается вызывающему объекту после его вызова.</span><span class="sxs-lookup"><span data-stu-id="79961-196"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="79961-197">В [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], поток, создавший <xref:System.Windows.Threading.DispatcherObject> может получить доступ к этому объекту.</span><span class="sxs-lookup"><span data-stu-id="79961-197">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="79961-198">Например, фоновый поток, который выполнения от основного потока пользовательского интерфейса не может обновить содержимое <xref:System.Windows.Controls.Button> , созданного в потоке пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="79961-198">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="79961-199">Чтобы фоновый поток, получать доступ к свойству содержимого <xref:System.Windows.Controls.Button>, фоновый поток должны делегировать работу в <xref:System.Windows.Threading.Dispatcher> связанного с потоком пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="79961-199">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="79961-200">Это достигается с помощью <xref:System.Windows.Threading.Dispatcher.Invoke%2A> или <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="79961-200">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="79961-201"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> является синхронным и <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> является асинхронным.</span><span class="sxs-lookup"><span data-stu-id="79961-201"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="79961-202">Операция добавляется в очередь событий <xref:System.Windows.Threading.Dispatcher> по указанному индексу <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="79961-202">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="79961-203">Если <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> будет вызван на <xref:System.Windows.Threading.Dispatcher> , ее работа была прекращена свойство status возвращаемого <xref:System.Windows.Threading.DispatcherOperation> равно <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span><span class="sxs-lookup"><span data-stu-id="79961-203">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (priority As DispatcherPriority, method As Delegate, arg As Object) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="79961-204">Приоритет относительно других ожидающих выполнения операций в очереди событий <see cref="T:System.Windows.Threading.Dispatcher" />, с которым вызван заданный метод.</span><span class="sxs-lookup"><span data-stu-id="79961-204">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="79961-205">Делегат метода с одним аргументом, помещенный в очередь событий <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-205">A delegate to a method that takes one argument, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="arg"><span data-ttu-id="79961-206">Объект, передаваемый в качестве аргумента указанному методу.</span><span class="sxs-lookup"><span data-stu-id="79961-206">The object to pass as an argument to the specified method.</span></span></param>
        <summary><span data-ttu-id="79961-207">Выполняет указанный делегат асинхронно, с заданными приоритетом и аргументом, в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-207">Executes the specified delegate asynchronously at the specified priority and with the specified argument on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="79961-208">Объект, возвращаемый сразу после вызова <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />, используемый для взаимодействия с делегатом, ожидающим выполнения в очереди событий.</span><span class="sxs-lookup"><span data-stu-id="79961-208">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="79961-209">`Arg` может быть `null` Если аргументы не требуются.</span><span class="sxs-lookup"><span data-stu-id="79961-209">`Arg` can be `null` if no arguments are needed.</span></span>  
  
 <span data-ttu-id="79961-210"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> Возвращает <xref:System.Windows.Threading.DispatcherOperation> объект, который может использоваться для взаимодействия с делегатом после делегата события очереди.</span><span class="sxs-lookup"><span data-stu-id="79961-210"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue.</span></span>  
  
 <span data-ttu-id="79961-211"><xref:System.Windows.Threading.DispatcherOperation> Объект, возвращаемый <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> может использоваться для взаимодействия с указанный делегат, такие как несколькими способами:</span><span class="sxs-lookup"><span data-stu-id="79961-211">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="79961-212">Изменение <xref:System.Windows.Threading.DispatcherPriority> делегата, как он находится в состоянии ожидания выполнения в очередь событий.</span><span class="sxs-lookup"><span data-stu-id="79961-212">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="79961-213">Удаление делегата из очереди событий.</span><span class="sxs-lookup"><span data-stu-id="79961-213">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="79961-214">Ожидание возврата из делегата.</span><span class="sxs-lookup"><span data-stu-id="79961-214">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="79961-215">Получение значения, возвращаемого делегатом после его выполнения.</span><span class="sxs-lookup"><span data-stu-id="79961-215">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="79961-216"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> является асинхронным; поэтому управление немедленно возвращается вызывающему объекту после его вызова.</span><span class="sxs-lookup"><span data-stu-id="79961-216"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="79961-217">В [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], поток, создавший <xref:System.Windows.Threading.DispatcherObject> может получить доступ к этому объекту.</span><span class="sxs-lookup"><span data-stu-id="79961-217">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="79961-218">Например, фоновый поток, который выполнения от основного потока пользовательского интерфейса не может обновить содержимое <xref:System.Windows.Controls.Button> , созданного в потоке пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="79961-218">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="79961-219">Чтобы фоновый поток, получать доступ к свойству содержимого <xref:System.Windows.Controls.Button>, фоновый поток должны делегировать работу в <xref:System.Windows.Threading.Dispatcher> связанного с потоком пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="79961-219">In order for the background thread to access the content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="79961-220">Это достигается с помощью <xref:System.Windows.Threading.Dispatcher.Invoke%2A> или <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="79961-220">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="79961-221"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> является синхронным и <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> является асинхронным.</span><span class="sxs-lookup"><span data-stu-id="79961-221"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="79961-222">Операция добавляется в очередь событий <xref:System.Windows.Threading.Dispatcher> по указанному индексу <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="79961-222">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="79961-223">При наличии нескольких <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> вызовов, выполняемых на том же <xref:System.Windows.Threading.DispatcherPriority>, они будут выполнены в порядке вызовов.</span><span class="sxs-lookup"><span data-stu-id="79961-223">If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made.</span></span>  
  
 <span data-ttu-id="79961-224">Если <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> будет вызван на <xref:System.Windows.Threading.Dispatcher> , ее работа была прекращена свойство status возвращаемого <xref:System.Windows.Threading.DispatcherOperation> равно <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span><span class="sxs-lookup"><span data-stu-id="79961-224">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="79961-225">Приведенный ниже показано, как выполнить операцию на <xref:System.Windows.Threading.Dispatcher>.</span><span class="sxs-lookup"><span data-stu-id="79961-225">The following example shows how to place an operation onto a <xref:System.Windows.Threading.Dispatcher>.</span></span>  
  
 <span data-ttu-id="79961-226">Во-первых создается делегат, принимающий один аргумент, в данном случае строку.</span><span class="sxs-lookup"><span data-stu-id="79961-226">First, a delegate is created that accepts one argument, in this case a string.</span></span>  
  
 [!code-csharp[ThreadingWeatherForecast#ThreadingWeatherDelegates](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingWeatherForecast/CSharp/Window1.xaml.cs#threadingweatherdelegates)]
 [!code-vb[ThreadingWeatherForecast#ThreadingWeatherDelegates](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingWeatherForecast/visualbasic/window1.xaml.vb#threadingweatherdelegates)]  
  
 <span data-ttu-id="79961-227">Далее, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29> вызывается.</span><span class="sxs-lookup"><span data-stu-id="79961-227">Next, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29> is called.</span></span>  <span data-ttu-id="79961-228">Поскольку каждый <xref:System.Windows.Threading.DispatcherObject> имеет свойство, которое возвращает <xref:System.Windows.Threading.Dispatcher> она связана с, нужный <xref:System.Windows.Threading.Dispatcher> получить с помощью запроса <xref:System.Windows.Threading.DispatcherObject>в данном случае <xref:System.Windows.Controls.Grid> с именем `tomorrowsWeather`.</span><span class="sxs-lookup"><span data-stu-id="79961-228">Because every <xref:System.Windows.Threading.DispatcherObject> has a property that returns the <xref:System.Windows.Threading.Dispatcher> it is associated with, the desired <xref:System.Windows.Threading.Dispatcher> is obtained by querying the <xref:System.Windows.Threading.DispatcherObject>, in this case a <xref:System.Windows.Controls.Grid> named `tomorrowsWeather`.</span></span> <span data-ttu-id="79961-229">Вызов <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29> принимает три параметра: приоритет, который имеет значение <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>; обратный вызов, который передается в экземпляр делегата `OneArgDelegate`; и строку с именем `weather`, которая является аргументом для обратного вызова.</span><span class="sxs-lookup"><span data-stu-id="79961-229">The call to <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29> takes three parameters: the priority, which is set to <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>; the callback, which is passed in through an instance of the delegate `OneArgDelegate`; and a string named `weather`, which is the argument for the callback.</span></span>  
  
 [!code-csharp[threadingweatherforecast#ThreadingWeatherDispatcherOneArge](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingWeatherForecast/CSharp/Window1.xaml.cs#threadingweatherdispatcheronearge)]
 [!code-vb[threadingweatherforecast#ThreadingWeatherDispatcherOneArge](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingWeatherForecast/visualbasic/window1.xaml.vb#threadingweatherdispatcheronearge)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="79961-230">Свойство <paramref name="method" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="79961-230"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <span data-ttu-id="79961-231"><paramref name="priority" /> не является допустимым <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span><span class="sxs-lookup"><span data-stu-id="79961-231"><paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (priority As DispatcherPriority, method As Delegate, arg As Object, ParamArray args As Object()) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="79961-232">Приоритет относительно других ожидающих выполнения операций в очереди событий <see cref="T:System.Windows.Threading.Dispatcher" />, с которым вызван заданный метод.</span><span class="sxs-lookup"><span data-stu-id="79961-232">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="79961-233">Делегат метода с несколькими аргументами, помещенный в очередь событий <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-233">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="arg"><span data-ttu-id="79961-234">Объект, передаваемый в качестве аргумента указанному методу.</span><span class="sxs-lookup"><span data-stu-id="79961-234">The object to pass as an argument to the specified method.</span></span></param>
        <param name="args"><span data-ttu-id="79961-235">Массив объектов, передаваемых в качестве аргументов указанному методу.</span><span class="sxs-lookup"><span data-stu-id="79961-235">An array of objects to pass as arguments to the specified method.</span></span></param>
        <summary><span data-ttu-id="79961-236">Выполняет указанный делегат асинхронно, с заданными приоритетом и массивом аргументов, в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-236">Executes the specified delegate asynchronously at the specified priority and with the specified array of arguments on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="79961-237">Объект, возвращаемый сразу после вызова <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />, используемый для взаимодействия с делегатом, ожидающим выполнения в очереди <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-237">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the <see cref="T:System.Windows.Threading.Dispatcher" /> queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="79961-238">`arg` Параметр может иметь `null` Если аргументы не требуются.</span><span class="sxs-lookup"><span data-stu-id="79961-238">The `arg` parameter can be `null` if no arguments are needed.</span></span>  
  
 <span data-ttu-id="79961-239"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> Возвращает <xref:System.Windows.Threading.DispatcherOperation> объект, который может использоваться для взаимодействия с делегатом после делегата события очереди.</span><span class="sxs-lookup"><span data-stu-id="79961-239"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue.</span></span>  
  
 <span data-ttu-id="79961-240"><xref:System.Windows.Threading.DispatcherOperation> Объект, возвращаемый <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> может использоваться для взаимодействия с указанный делегат, такие как несколькими способами:</span><span class="sxs-lookup"><span data-stu-id="79961-240">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="79961-241">Изменение <xref:System.Windows.Threading.DispatcherPriority> делегата, как он находится в состоянии ожидания выполнения в очередь событий.</span><span class="sxs-lookup"><span data-stu-id="79961-241">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="79961-242">Удаление делегата из очереди событий.</span><span class="sxs-lookup"><span data-stu-id="79961-242">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="79961-243">Ожидание возврата из делегата.</span><span class="sxs-lookup"><span data-stu-id="79961-243">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="79961-244">Получение значения, возвращаемого делегатом после его выполнения.</span><span class="sxs-lookup"><span data-stu-id="79961-244">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="79961-245"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> является асинхронным; поэтому управление немедленно возвращается вызывающему объекту после его вызова.</span><span class="sxs-lookup"><span data-stu-id="79961-245"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="79961-246">В [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], поток, создавший <xref:System.Windows.Threading.DispatcherObject> может получить доступ к этому объекту.</span><span class="sxs-lookup"><span data-stu-id="79961-246">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="79961-247">Например, фоновый поток, который выполнения от основного потока пользовательского интерфейса не может обновить содержимое <xref:System.Windows.Controls.Button> , созданного в потоке пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="79961-247">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="79961-248">Чтобы фоновый поток, получать доступ к свойству содержимого <xref:System.Windows.Controls.Button>, фоновый поток должны делегировать работу в <xref:System.Windows.Threading.Dispatcher> связанного с потоком пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="79961-248">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="79961-249">Это достигается с помощью <xref:System.Windows.Threading.Dispatcher.Invoke%2A> или <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="79961-249">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="79961-250"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> является синхронным и <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> является асинхронным.</span><span class="sxs-lookup"><span data-stu-id="79961-250"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="79961-251">Операция добавляется в очередь событий <xref:System.Windows.Threading.Dispatcher> по указанному индексу <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="79961-251">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="79961-252">При наличии нескольких <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> вызовов, выполняемых на том же <xref:System.Windows.Threading.DispatcherPriority>, они будут выполнены в порядке вызовов.</span><span class="sxs-lookup"><span data-stu-id="79961-252">If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made.</span></span>  
  
 <span data-ttu-id="79961-253">Если <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> будет вызван на <xref:System.Windows.Threading.Dispatcher> , ее работа была прекращена свойство status возвращаемого <xref:System.Windows.Threading.DispatcherOperation> равно <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span><span class="sxs-lookup"><span data-stu-id="79961-253">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="79961-254">Свойство <paramref name="method" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="79961-254"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <span data-ttu-id="79961-255"><see cref="T:System.Windows.Threading.DispatcherPriority" /> не является допустимым приоритетом.</span><span class="sxs-lookup"><span data-stu-id="79961-255"><see cref="T:System.Windows.Threading.DispatcherPriority" /> is not a valid priority.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BeginInvokeShutdown">
      <MemberSignature Language="C#" Value="public void BeginInvokeShutdown (System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginInvokeShutdown(valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginInvokeShutdown (priority As DispatcherPriority)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginInvokeShutdown(System::Windows::Threading::DispatcherPriority priority);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="79961-256">Приоритет, с которым начинается остановка диспетчера.</span><span class="sxs-lookup"><span data-stu-id="79961-256">The priority at which to begin shutting down the dispatcher.</span></span></param>
        <summary><span data-ttu-id="79961-257">Инициализирует асинхронную остановку <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-257">Initiates shutdown of the <see cref="T:System.Windows.Threading.Dispatcher" /> asynchronously.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="79961-258"><xref:System.Windows.Threading.Dispatcher.BeginInvokeShutdown%2A> требует неограниченного разрешения пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="79961-258"><xref:System.Windows.Threading.Dispatcher.BeginInvokeShutdown%2A> demands unrestricted UI Permissions.</span></span>  
  
 <span data-ttu-id="79961-259">Когда <xref:System.Windows.Threading.Dispatcher> начнет завершение работы, <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> события и <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> равно `true`.</span><span class="sxs-lookup"><span data-stu-id="79961-259">When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="79961-260"><xref:System.Windows.Threading.Dispatcher> Не полностью выключить пока освобождает очереди событий.</span><span class="sxs-lookup"><span data-stu-id="79961-260">The <xref:System.Windows.Threading.Dispatcher> does not shut down completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="79961-261">По завершении диспетчер завершает работу, <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> события и <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> свойству `true`.</span><span class="sxs-lookup"><span data-stu-id="79961-261">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="79961-262">После начала процесса завершения работы всех ожидающих рабочих элементов в очереди прерываются.</span><span class="sxs-lookup"><span data-stu-id="79961-262">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="79961-263">для остановки диспетчера.</span><span class="sxs-lookup"><span data-stu-id="79961-263">for shutting down the dispatcher.</span></span>  <span data-ttu-id="79961-264">Связанные перечисления:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="79961-264">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public bool CheckAccess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CheckAccess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.CheckAccess" />
      <MemberSignature Language="VB.NET" Value="Public Function CheckAccess () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CheckAccess();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="79961-265">Определяет, связан ли вызывающий поток с данным <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-265">Determines whether the calling thread is the thread associated with this <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></summary>
        <returns>
          <span data-ttu-id="79961-266">Значение <see langword="true" />, если вызывающий поток связан с данным <see cref="T:System.Windows.Threading.Dispatcher" />; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="79961-266"><see langword="true" /> if the calling thread is the thread associated with this <see cref="T:System.Windows.Threading.Dispatcher" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="79961-267">Только <xref:System.Windows.Threading.Dispatcher> , <xref:System.Windows.Threading.DispatcherObject> создается на может получить доступ к объекту.</span><span class="sxs-lookup"><span data-stu-id="79961-267">Only the <xref:System.Windows.Threading.Dispatcher> that a <xref:System.Windows.Threading.DispatcherObject> is created on may access the object.</span></span>  <span data-ttu-id="79961-268">Используйте <xref:System.Windows.Threading.Dispatcher.Invoke%2A> или <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> доступ к объекту из другого потока.</span><span class="sxs-lookup"><span data-stu-id="79961-268">Use <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> to access the object from a different thread.</span></span>  
  
 <span data-ttu-id="79961-269"><xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> может вызываться из любого потока.</span><span class="sxs-lookup"><span data-stu-id="79961-269"><xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> can be called from any thread.</span></span>  
  
 <span data-ttu-id="79961-270">Разница между <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> и <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> — <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> возвращает логическое значение, указывающее, имеет ли вызывающий поток доступ к <xref:System.Windows.Threading.Dispatcher> и <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> приводит к возникновению исключения.</span><span class="sxs-lookup"><span data-stu-id="79961-270">The difference between <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> is <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> returns a Boolean indicating whether the calling thread has access to the <xref:System.Windows.Threading.Dispatcher> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> throws an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="79961-271">В следующем примере используется <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> для определения, имеет ли поток доступ к <xref:System.Windows.Controls.Button>.</span><span class="sxs-lookup"><span data-stu-id="79961-271">The following example uses <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> to determine whether a thread has access to a <xref:System.Windows.Controls.Button>.</span></span>  <span data-ttu-id="79961-272"><xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> Метод <xref:System.Windows.Threading.Dispatcher> связанных с <xref:System.Windows.Controls.Button> вызывается, чтобы проверить доступ к потоку.</span><span class="sxs-lookup"><span data-stu-id="79961-272">The <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> method on the <xref:System.Windows.Threading.Dispatcher> associated with the <xref:System.Windows.Controls.Button> is called to verify access to the thread.</span></span>  <span data-ttu-id="79961-273">Если вызывающий поток имеет доступ к <xref:System.Windows.Threading.Dispatcher>, <xref:System.Windows.Controls.Button> обновляется при доступе к членам <xref:System.Windows.Controls.Button>; в противном случае делегата, который принимает <xref:System.Windows.Controls.Button> как аргумент, помещаются в <xref:System.Windows.Threading.Dispatcher>.</span><span class="sxs-lookup"><span data-stu-id="79961-273">If the calling thread has access to the <xref:System.Windows.Threading.Dispatcher>, the <xref:System.Windows.Controls.Button> is updated by accessing the members of the <xref:System.Windows.Controls.Button>; otherwise, a delegate, which accepts a <xref:System.Windows.Controls.Button> as an argument, is placed onto the <xref:System.Windows.Threading.Dispatcher>.</span></span>  <span data-ttu-id="79961-274"><xref:System.Windows.Threading.Dispatcher> Делегирует работу обновления <xref:System.Windows.Controls.Button>.</span><span class="sxs-lookup"><span data-stu-id="79961-274">The <xref:System.Windows.Threading.Dispatcher> will delegate the work of updating the <xref:System.Windows.Controls.Button>.</span></span>  
  
 [!code-csharp[DispatcherAccessSample#DispatcherAccessCheckAccess](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherAccessSample/CSharp/Window1.xaml.cs#dispatcheraccesscheckaccess)]
 [!code-vb[DispatcherAccessSample#DispatcherAccessCheckAccess](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherAccessSample/visualbasic/window1.xaml.vb#dispatcheraccesscheckaccess)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Threading.Dispatcher.VerifyAccess" />
      </Docs>
    </Member>
    <Member MemberName="CurrentDispatcher">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.Dispatcher CurrentDispatcher { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Threading.Dispatcher CurrentDispatcher" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.CurrentDispatcher" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentDispatcher As Dispatcher" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Threading::Dispatcher ^ CurrentDispatcher { System::Windows::Threading::Dispatcher ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.Dispatcher</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="79961-275">Возвращает <see cref="T:System.Windows.Threading.Dispatcher" /> для выполняющегося в данный момент потока и создает новый объект <see cref="T:System.Windows.Threading.Dispatcher" />, если с потоком еще не связан диспетчер.</span><span class="sxs-lookup"><span data-stu-id="79961-275">Gets the <see cref="T:System.Windows.Threading.Dispatcher" /> for the thread currently executing and creates a new <see cref="T:System.Windows.Threading.Dispatcher" /> if one is not already associated with the thread.</span></span></summary>
        <value><span data-ttu-id="79961-276">Диспетчер, связанный с текущим потоком.</span><span class="sxs-lookup"><span data-stu-id="79961-276">The dispatcher associated with the current thread.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="79961-277">Если <xref:System.Windows.Threading.Dispatcher> не связан с текущим потоком новый <xref:System.Windows.Threading.Dispatcher> будет создан.</span><span class="sxs-lookup"><span data-stu-id="79961-277">If a <xref:System.Windows.Threading.Dispatcher> is not associated with the current thread, a new <xref:System.Windows.Threading.Dispatcher> will be created.</span></span>  <span data-ttu-id="79961-278">В случае с методом <xref:System.Windows.Threading.Dispatcher.FromThread%2A> это не так.</span><span class="sxs-lookup"><span data-stu-id="79961-278">This is not the case with the <xref:System.Windows.Threading.Dispatcher.FromThread%2A> method.</span></span>  <span data-ttu-id="79961-279"><xref:System.Windows.Threading.Dispatcher.FromThread%2A> Возвращает `null` здесь не dispatcher, связанный с указанным потоком.</span><span class="sxs-lookup"><span data-stu-id="79961-279"><xref:System.Windows.Threading.Dispatcher.FromThread%2A> will return `null` if there is not a dispatcher associated with the specified thread.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisableProcessing">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherProcessingDisabled DisableProcessing ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Threading.DispatcherProcessingDisabled DisableProcessing() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.DisableProcessing" />
      <MemberSignature Language="VB.NET" Value="Public Function DisableProcessing () As DispatcherProcessingDisabled" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherProcessingDisabled DisableProcessing();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherProcessingDisabled</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="79961-280">Отменяет обработку очереди <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-280">Disables processing of the <see cref="T:System.Windows.Threading.Dispatcher" /> queue.</span></span></summary>
        <returns><span data-ttu-id="79961-281">Структура, используемая для повторного включения диспетчера.</span><span class="sxs-lookup"><span data-stu-id="79961-281">A structure used to re-enable dispatcher processing.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="79961-282">Отключение диспетчера является операцией, предназначено для устранения возможности ненужного повторного входа.</span><span class="sxs-lookup"><span data-stu-id="79961-282">Disabling dispatcher processing is an advanced method that is intended to eliminate the chance of unrelated reentrancy.</span></span>  
  
 <span data-ttu-id="79961-283">Последствия отключения обработки выглядят следующим образом:</span><span class="sxs-lookup"><span data-stu-id="79961-283">The effects of disabling processing are as follows:</span></span>  
  
-   <span data-ttu-id="79961-284">CLR блокировки не будут выдавать сообщения внутренним образом.</span><span class="sxs-lookup"><span data-stu-id="79961-284">CLR locks will not pump messages internally.</span></span>  
  
-   <span data-ttu-id="79961-285"><xref:System.Windows.Threading.DispatcherFrame> объекты недопустимы для распространения.</span><span class="sxs-lookup"><span data-stu-id="79961-285"><xref:System.Windows.Threading.DispatcherFrame> objects are not allowed to be pushed.</span></span>  
  
-   <span data-ttu-id="79961-286">Обработка сообщений не поддерживается.</span><span class="sxs-lookup"><span data-stu-id="79961-286">Message processing is not permitted.</span></span>  
  
 <span data-ttu-id="79961-287"><xref:System.Windows.Threading.DispatcherProcessingDisabled> Структуру, в которой <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> возвращает при вызове может использоваться для повторного включения.</span><span class="sxs-lookup"><span data-stu-id="79961-287">The <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure that <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> returns when it is called can be used to re-enable dispatcher processing.</span></span>  <span data-ttu-id="79961-288">Вызов <xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A> на <xref:System.Windows.Threading.DispatcherProcessingDisabled> структуры заново включает обработку.</span><span class="sxs-lookup"><span data-stu-id="79961-288">Calling <xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A> on the <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure re-enables processing.</span></span>  
  
 <span data-ttu-id="79961-289"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> может вызываться только в потоке <xref:System.Windows.Threading.Dispatcher> сопоставлен.</span><span class="sxs-lookup"><span data-stu-id="79961-289"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> can only be called on the thread the <xref:System.Windows.Threading.Dispatcher> is associated with.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="79961-290">В следующем примере показано, как отключить и снова ее включить.</span><span class="sxs-lookup"><span data-stu-id="79961-290">The following example shows how to disable dispatcher processing and re-enable dispatcher processing.</span></span>  <span data-ttu-id="79961-291"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> вызывается в **с помощью** инструкции.</span><span class="sxs-lookup"><span data-stu-id="79961-291"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> is called in a **using** statement.</span></span>  <span data-ttu-id="79961-292"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> Возвращает <xref:System.Windows.Threading.DispatcherProcessingDisabled> структуру, которая используется как объект будет удален при **с помощью** блок завершается.</span><span class="sxs-lookup"><span data-stu-id="79961-292"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> returns a <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure that is used as the object to be disposed when the **using** block finishes.</span></span>  <span data-ttu-id="79961-293">Когда <xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A> будет вызван на <xref:System.Windows.Threading.DispatcherProcessingDisabled> структуры, Работа диспетчера будет снова включен.</span><span class="sxs-lookup"><span data-stu-id="79961-293">When <xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A> is called on the <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure, dispatcher processing is re-enabled.</span></span>  
  
 [!code-csharp[DispatcherSnippets#DispatcherDisableProcessing](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherSnippets/CSharp/Window1.xaml.cs#dispatcherdisableprocessing)]
 [!code-vb[DispatcherSnippets#DispatcherDisableProcessing](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherSnippets/visualbasic/window1.xaml.vb#dispatcherdisableprocessing)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExitAllFrames">
      <MemberSignature Language="C#" Value="public static void ExitAllFrames ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ExitAllFrames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.ExitAllFrames" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ExitAllFrames ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ExitAllFrames();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="79961-294">Запрашивает выход для всех фреймов, включая вложенные.</span><span class="sxs-lookup"><span data-stu-id="79961-294">Requests that all frames exit, including nested frames.</span></span></summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="79961-295">для вызова этого метода.</span><span class="sxs-lookup"><span data-stu-id="79961-295">for calling this method.</span></span> <span data-ttu-id="79961-296">Связанные перечисления:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="79961-296">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span></span></permission>
        <altmember cref="M:System.Windows.Threading.Dispatcher.PushFrame(System.Windows.Threading.DispatcherFrame)" />
        <altmember cref="T:System.Windows.Threading.DispatcherFrame" />
      </Docs>
    </Member>
    <Member MemberName="FromThread">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.Dispatcher FromThread (System.Threading.Thread thread);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Threading.Dispatcher FromThread(class System.Threading.Thread thread) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.FromThread(System.Threading.Thread)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Threading::Dispatcher ^ FromThread(System::Threading::Thread ^ thread);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.Dispatcher</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="thread" Type="System.Threading.Thread" />
      </Parameters>
      <Docs>
        <param name="thread"><span data-ttu-id="79961-297">Поток, из которого нужно получить <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-297">The thread to obtain the <see cref="T:System.Windows.Threading.Dispatcher" /> from.</span></span></param>
        <summary><span data-ttu-id="79961-298">Возвращает <see cref="T:System.Windows.Threading.Dispatcher" /> для заданного потока.</span><span class="sxs-lookup"><span data-stu-id="79961-298">Gets the <see cref="T:System.Windows.Threading.Dispatcher" /> for the specified thread.</span></span></summary>
        <returns><span data-ttu-id="79961-299">Диспетчер для <paramref name="thread" />.</span><span class="sxs-lookup"><span data-stu-id="79961-299">The dispatcher for <paramref name="thread" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="79961-300">Если диспетчер недоступен для заданного потока `null` будут возвращены.</span><span class="sxs-lookup"><span data-stu-id="79961-300">If a dispatcher is not available for the specified thread, `null` will be returned.</span></span>  
  
 <span data-ttu-id="79961-301"><xref:System.Windows.Threading.Dispatcher.FromThread%2A> не создает <xref:System.Windows.Threading.Dispatcher> в потоке, который не имеет <xref:System.Windows.Threading.Dispatcher>.</span><span class="sxs-lookup"><span data-stu-id="79961-301"><xref:System.Windows.Threading.Dispatcher.FromThread%2A> does not create a <xref:System.Windows.Threading.Dispatcher> on a thread that does not have a <xref:System.Windows.Threading.Dispatcher>.</span></span>   <span data-ttu-id="79961-302">Новый <xref:System.Windows.Threading.Dispatcher> создается в потоке, который еще не содержит <xref:System.Windows.Threading.Dispatcher> при попытке получить <xref:System.Windows.Threading.Dispatcher> с помощью <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="79961-302">A new <xref:System.Windows.Threading.Dispatcher> is created on a thread that does not already have a <xref:System.Windows.Threading.Dispatcher> when attempting to get the <xref:System.Windows.Threading.Dispatcher> by using the <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasShutdownFinished">
      <MemberSignature Language="C#" Value="public bool HasShutdownFinished { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasShutdownFinished" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasShutdownFinished As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasShutdownFinished { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="79961-303">Определяет, завершил ли объект <see cref="T:System.Windows.Threading.Dispatcher" /> процесс остановки.</span><span class="sxs-lookup"><span data-stu-id="79961-303">Determines whether the <see cref="T:System.Windows.Threading.Dispatcher" /> has finished shutting down.</span></span></summary>
        <value>
          <span data-ttu-id="79961-304"><see langword="true" />, если диспетчер завершил процесс остановки; в противном случае — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="79961-304"><see langword="true" /> if the dispatcher has finished shutting down; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="79961-305">Когда <xref:System.Windows.Threading.Dispatcher> начнет завершение работы, <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> события и <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> равно `true`.</span><span class="sxs-lookup"><span data-stu-id="79961-305">When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="79961-306"><xref:System.Windows.Threading.Dispatcher> Не выполняет завершение полностью до освобождает очереди событий.</span><span class="sxs-lookup"><span data-stu-id="79961-306">The <xref:System.Windows.Threading.Dispatcher> does not shutdown completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="79961-307">По завершении диспетчер завершает работу, <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> события и <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> свойству `true`.</span><span class="sxs-lookup"><span data-stu-id="79961-307">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="79961-308">После начала процесса завершения работы всех ожидающих рабочих элементов в очереди прерываются.</span><span class="sxs-lookup"><span data-stu-id="79961-308">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasShutdownStarted">
      <MemberSignature Language="C#" Value="public bool HasShutdownStarted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasShutdownStarted" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.HasShutdownStarted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasShutdownStarted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasShutdownStarted { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="79961-309">Определяет, находится ли объект <see cref="T:System.Windows.Threading.Dispatcher" /> в процессе остановки.</span><span class="sxs-lookup"><span data-stu-id="79961-309">Determines whether the <see cref="T:System.Windows.Threading.Dispatcher" /> is shutting down.</span></span></summary>
        <value>
          <span data-ttu-id="79961-310"><see langword="true" />, если <see cref="T:System.Windows.Threading.Dispatcher" /> начал процесс остановки; в противном случае — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="79961-310"><see langword="true" /> if the <see cref="T:System.Windows.Threading.Dispatcher" /> has started shutting down; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="79961-311">Когда <xref:System.Windows.Threading.Dispatcher> начнет завершение работы, <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> события и <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> равно `true`.</span><span class="sxs-lookup"><span data-stu-id="79961-311">When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="79961-312"><xref:System.Windows.Threading.Dispatcher> Не полностью выключить пока освобождает очереди событий.</span><span class="sxs-lookup"><span data-stu-id="79961-312">The <xref:System.Windows.Threading.Dispatcher> does not shut down completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="79961-313">По завершении диспетчер завершает работу, <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> события и <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> свойству `true`.</span><span class="sxs-lookup"><span data-stu-id="79961-313">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="79961-314">После начала процесса завершения работы всех ожидающих рабочих элементов в очереди прерываются.</span><span class="sxs-lookup"><span data-stu-id="79961-314">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Hooks">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherHooks Hooks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Threading.DispatcherHooks Hooks" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.Hooks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Hooks As DispatcherHooks" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Threading::DispatcherHooks ^ Hooks { System::Windows::Threading::DispatcherHooks ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherHooks</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="79961-315">Возвращает коллекцию ловушек, предоставляющих дополнительную информацию о <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-315">Gets the collection of hooks that provide additional event information about the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></summary>
        <value><span data-ttu-id="79961-316">Ловушки, связанные с данным <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-316">The hooks associated with this <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="79961-317"><xref:System.Windows.Threading.DispatcherHooks> Класс предоставляет дополнительную информацию о <xref:System.Windows.Threading.Dispatcher>, например когда <xref:System.Windows.Threading.Dispatcher> неактивна или если операция завершена.</span><span class="sxs-lookup"><span data-stu-id="79961-317">The <xref:System.Windows.Threading.DispatcherHooks> class provides additional event information about the <xref:System.Windows.Threading.Dispatcher>, such as when the <xref:System.Windows.Threading.Dispatcher> is inactive or when an operation has competed.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="79961-318">Для получения этого свойства.</span><span class="sxs-lookup"><span data-stu-id="79961-318">for getting this property.</span></span>  <span data-ttu-id="79961-319">Связанные перечисления:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="79961-319">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span></span></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="Invoke">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="79961-320">Выполняет заданный делегат синхронно, в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-320">Executes the specified delegate synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="79961-321">В [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], поток, создавший <xref:System.Windows.Threading.DispatcherObject> может получить доступ к этому объекту.</span><span class="sxs-lookup"><span data-stu-id="79961-321">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="79961-322">Например, фоновый поток, который выполнения от основного потока пользовательского интерфейса не может обновить содержимое <xref:System.Windows.Controls.Button> , созданного в потоке пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="79961-322">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="79961-323">Чтобы фоновый поток, получать доступ к свойству содержимого <xref:System.Windows.Controls.Button>, фоновый поток должны делегировать работу в <xref:System.Windows.Threading.Dispatcher> связанного с потоком пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="79961-323">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="79961-324">Это достигается с помощью <xref:System.Windows.Threading.Dispatcher.Invoke%2A> или <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="79961-324">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="79961-325"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> является синхронным и <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> является асинхронным.</span><span class="sxs-lookup"><span data-stu-id="79961-325"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="79961-326">Операция добавляется в очередь событий <xref:System.Windows.Threading.Dispatcher> по указанному индексу <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="79961-326">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="79961-327"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> представляет собой синхронную операцию; Таким образом элемент управления не возвращает вызывающему объекту до после функция обратного вызова.</span><span class="sxs-lookup"><span data-stu-id="79961-327"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="79961-328">Следующий пример помещает делегат на <xref:System.Windows.Threading.Dispatcher> в <xref:System.Windows.Threading.DispatcherPriority.Normal> с помощью <xref:System.Windows.Threading.Dispatcher.Invoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="79961-328">The following example places a delegate onto a <xref:System.Windows.Threading.Dispatcher> at <xref:System.Windows.Threading.DispatcherPriority.Normal> using <xref:System.Windows.Threading.Dispatcher.Invoke%2A>.</span></span>  
  
 [!code-csharp[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/CSharp/Window1.xaml.cs#systemtimerdispatcherinvoke)]
 [!code-vb[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/visualbasic/window1.xaml.vb#systemtimerdispatcherinvoke)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invoke (callback As Action)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="79961-329">Делегат, вызываемый с помощью диспетчера.</span><span class="sxs-lookup"><span data-stu-id="79961-329">A delegate to invoke through the dispatcher.</span></span></param>
        <summary><span data-ttu-id="79961-330">Выполняет заданный объект <see cref="T:System.Action" /> синхронно в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-330">Executes the specified <see cref="T:System.Action" /> synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invoke (callback As Action, priority As DispatcherPriority)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="79961-331">Делегат, вызываемый с помощью диспетчера.</span><span class="sxs-lookup"><span data-stu-id="79961-331">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="79961-332">Приоритет, определяющий очередность вызова указанного метода обратного вызова по отношению к другим ожидающим операциям в объекте <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-332">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <summary><span data-ttu-id="79961-333">Выполняет указанный объект <see cref="T:System.Action" /> синхронно с заданным приоритетом в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-333">Executes the specified <see cref="T:System.Action" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="79961-334">Делегат метода с параметрами, указанными в <c>args</c>, который помещен в очередь событий <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-334">A delegate to a method that takes parameters specified in <c>args</c>, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="args"><span data-ttu-id="79961-335">Массив объектов, передаваемых в качестве аргументов указанному методу.</span><span class="sxs-lookup"><span data-stu-id="79961-335">An array of objects to pass as arguments to the given method.</span></span> <span data-ttu-id="79961-336">Может принимать значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="79961-336">Can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="79961-337">Выполняет указанный делегат синхронно с заданными аргументами в потоке, с которым связан объект <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-337">Executes the specified delegate with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="79961-338">Значение, возвращаемое вызываемым делегатом, или <see langword="null" />, если делегат не возвращает никакого значения.</span><span class="sxs-lookup"><span data-stu-id="79961-338">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="79961-339">В [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], поток, создавший <xref:System.Windows.Threading.DispatcherObject> может получить доступ к этому объекту.</span><span class="sxs-lookup"><span data-stu-id="79961-339">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="79961-340">Например, фоновый поток, который выполнения от основного потока пользовательского интерфейса не может обновить содержимое <xref:System.Windows.Controls.Button> , созданного в потоке пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="79961-340">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="79961-341">Чтобы фоновый поток, получать доступ к свойству содержимого <xref:System.Windows.Controls.Button>, фоновый поток должны делегировать работу в <xref:System.Windows.Threading.Dispatcher> связанного с потоком пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="79961-341">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="79961-342">Это достигается с помощью <xref:System.Windows.Threading.Dispatcher.Invoke%2A> или <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="79961-342">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="79961-343"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> является синхронным и <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> является асинхронным.</span><span class="sxs-lookup"><span data-stu-id="79961-343"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="79961-344">Операция добавляется в очередь событий <xref:System.Windows.Threading.Dispatcher> по указанному индексу <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="79961-344">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="79961-345"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> представляет собой синхронную операцию; Таким образом элемент управления не возвращает вызывающему объекту до после функция обратного вызова.</span><span class="sxs-lookup"><span data-stu-id="79961-345"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, method As Delegate) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="79961-346">Приоритет относительно других ожидающих выполнения операций в очереди событий <see cref="T:System.Windows.Threading.Dispatcher" />, с которым вызван заданный метод.</span><span class="sxs-lookup"><span data-stu-id="79961-346">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="79961-347">Делегат метода без аргументов, помещенный в очередь событий <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-347">A delegate to a method that takes no arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <summary><span data-ttu-id="79961-348">Выполняет указанный делегат синхронно, с заданным приоритетом, в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-348">Executes the specified delegate synchronously at the specified priority on the thread on which the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="79961-349">Значение, возвращаемое вызываемым делегатом, или <see langword="null" />, если делегат не возвращает никакого значения.</span><span class="sxs-lookup"><span data-stu-id="79961-349">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="79961-350">В [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], поток, создавший <xref:System.Windows.Threading.DispatcherObject> может получить доступ к этому объекту.</span><span class="sxs-lookup"><span data-stu-id="79961-350">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="79961-351">Например, фоновый поток, который выполнения от основного потока пользовательского интерфейса не может обновить содержимое <xref:System.Windows.Controls.Button> , созданного в потоке пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="79961-351">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="79961-352">Чтобы фоновый поток, получать доступ к свойству содержимого <xref:System.Windows.Controls.Button>, фоновый поток должны делегировать работу в <xref:System.Windows.Threading.Dispatcher> связанного с потоком пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="79961-352">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="79961-353">Это достигается с помощью <xref:System.Windows.Threading.Dispatcher.Invoke%2A> или <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="79961-353">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="79961-354"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> является синхронным и <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> является асинхронным.</span><span class="sxs-lookup"><span data-stu-id="79961-354"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="79961-355">Операция добавляется в очередь событий <xref:System.Windows.Threading.Dispatcher> по указанному индексу <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="79961-355">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="79961-356"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> представляет собой синхронную операцию; Таким образом элемент управления не возвращает вызывающему объекту до после функция обратного вызова.</span><span class="sxs-lookup"><span data-stu-id="79961-356"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="79961-357">Следующий пример помещает делегат на <xref:System.Windows.Threading.Dispatcher> в <xref:System.Windows.Threading.DispatcherPriority.Normal> с помощью <xref:System.Windows.Threading.Dispatcher.Invoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="79961-357">The following example places a delegate onto a <xref:System.Windows.Threading.Dispatcher> at <xref:System.Windows.Threading.DispatcherPriority.Normal> using <xref:System.Windows.Threading.Dispatcher.Invoke%2A>.</span></span>  
  
 [!code-csharp[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/CSharp/Window1.xaml.cs#systemtimerdispatcherinvoke)]
 [!code-vb[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/visualbasic/window1.xaml.vb#systemtimerdispatcherinvoke)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="79961-358"><paramref name="priority" /> равно <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span><span class="sxs-lookup"><span data-stu-id="79961-358"><paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <span data-ttu-id="79961-359"><paramref name="priority" /> не является допустимым приоритетом.</span><span class="sxs-lookup"><span data-stu-id="79961-359"><paramref name="priority" /> is not a valid priority.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="79961-360">Свойство <paramref name="method" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="79961-360"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="79961-361">Делегат, вызываемый с помощью диспетчера.</span><span class="sxs-lookup"><span data-stu-id="79961-361">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="79961-362">Приоритет, определяющий очередность вызова указанного метода обратного вызова по отношению к другим ожидающим операциям в объекте <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-362">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="79961-363">Объект, указывающий, следует ли отменить действие.</span><span class="sxs-lookup"><span data-stu-id="79961-363">An object that indicates whether to cancel the action.</span></span></param>
        <summary><span data-ttu-id="79961-364">Выполняет указанный объект <see cref="T:System.Action" /> синхронно с заданным приоритетом в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-364">Executes the specified <see cref="T:System.Action" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, TimeSpan timeout, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, valuetype System.TimeSpan timeout, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, timeout As TimeSpan, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, TimeSpan timeout, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="79961-365">Делегат метода с параметрами, указанными в <c>args</c>, который помещен в очередь событий <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-365">A delegate to a method that takes parameters specified in <c>args</c>, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="timeout"><span data-ttu-id="79961-366">Максимальное время ожидания завершения операции.</span><span class="sxs-lookup"><span data-stu-id="79961-366">The maximum amount of time to wait for the operation to complete.</span></span></param>
        <param name="args"><span data-ttu-id="79961-367">Массив объектов, передаваемых в качестве аргументов указанному методу.</span><span class="sxs-lookup"><span data-stu-id="79961-367">An array of objects to pass as arguments to the given method.</span></span> <span data-ttu-id="79961-368">Может принимать значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="79961-368">Can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="79961-369">Выполняет указанный делегат в течение заданного промежутка времени, синхронно, с заданными приоритетом и аргументами, в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-369">Executes the specified delegate within the designated time span at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="79961-370">Значение, возвращаемое вызываемым делегатом, или <see langword="null" />, если делегат не возвращает никакого значения.</span><span class="sxs-lookup"><span data-stu-id="79961-370">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="79961-371">В [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], поток, создавший <xref:System.Windows.Threading.DispatcherObject> может получить доступ к этому объекту.</span><span class="sxs-lookup"><span data-stu-id="79961-371">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="79961-372">Например, фоновый поток, который выполнения от основного потока пользовательского интерфейса не может обновить содержимое <xref:System.Windows.Controls.Button> , созданного в потоке пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="79961-372">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="79961-373">Чтобы фоновый поток, получать доступ к свойству содержимого <xref:System.Windows.Controls.Button>, фоновый поток должны делегировать работу в <xref:System.Windows.Threading.Dispatcher> связанного с потоком пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="79961-373">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="79961-374">Это достигается с помощью <xref:System.Windows.Threading.Dispatcher.Invoke%2A> или <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="79961-374">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="79961-375"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> является синхронным и <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> является асинхронным.</span><span class="sxs-lookup"><span data-stu-id="79961-375"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="79961-376">Операция добавляется в очередь событий <xref:System.Windows.Threading.Dispatcher> по указанному индексу <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="79961-376">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="79961-377"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> представляет собой синхронную операцию; Таким образом элемент управления не возвращает вызывающему объекту до после функция обратного вызова.</span><span class="sxs-lookup"><span data-stu-id="79961-377"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, System.Windows.Threading.DispatcherPriority priority, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, valuetype System.Windows.Threading.DispatcherPriority priority, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, priority As DispatcherPriority, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, System::Windows::Threading::DispatcherPriority priority, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="79961-378">Делегат метода с параметрами, указанными в <c>args</c>, который помещен в очередь событий <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-378">A delegate to a method that takes parameters specified in <c>args</c>, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="priority"><span data-ttu-id="79961-379">Приоритет относительно других ожидающих выполнения операций в очереди событий <see cref="T:System.Windows.Threading.Dispatcher" />, с которым вызван заданный метод.</span><span class="sxs-lookup"><span data-stu-id="79961-379">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="args"><span data-ttu-id="79961-380">Массив объектов, передаваемых в качестве аргументов указанному методу.</span><span class="sxs-lookup"><span data-stu-id="79961-380">An array of objects to pass as arguments to the given method.</span></span> <span data-ttu-id="79961-381">Может принимать значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="79961-381">Can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="79961-382">Выполняет указанный делегат синхронно, с заданными приоритетом и аргументами, в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-382">Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="79961-383">Значение, возвращаемое вызываемым делегатом, или <see langword="null" />, если делегат не возвращает никакого значения.</span><span class="sxs-lookup"><span data-stu-id="79961-383">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="79961-384">В [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], поток, создавший <xref:System.Windows.Threading.DispatcherObject> может получить доступ к этому объекту.</span><span class="sxs-lookup"><span data-stu-id="79961-384">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="79961-385">Например, фоновый поток, который выполнения от основного потока пользовательского интерфейса не может обновить содержимое <xref:System.Windows.Controls.Button> , созданного в потоке пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="79961-385">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="79961-386">Чтобы фоновый поток, получать доступ к свойству содержимого <xref:System.Windows.Controls.Button>, фоновый поток должны делегировать работу в <xref:System.Windows.Threading.Dispatcher> связанного с потоком пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="79961-386">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="79961-387">Это достигается с помощью <xref:System.Windows.Threading.Dispatcher.Invoke%2A> или <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="79961-387">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="79961-388"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> является синхронным и <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> является асинхронным.</span><span class="sxs-lookup"><span data-stu-id="79961-388"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="79961-389">Операция добавляется в очередь событий <xref:System.Windows.Threading.Dispatcher> по указанному индексу <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="79961-389">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="79961-390"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> представляет собой синхронную операцию; Таким образом элемент управления не возвращает вызывающему объекту до после функция обратного вызова.</span><span class="sxs-lookup"><span data-stu-id="79961-390"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, method As Delegate, arg As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="79961-391">Приоритет относительно других ожидающих выполнения операций в очереди событий <see cref="T:System.Windows.Threading.Dispatcher" />, с которым вызван заданный метод.</span><span class="sxs-lookup"><span data-stu-id="79961-391">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="79961-392">Делегат метода с одним аргументом, помещенный в очередь событий <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-392">A delegate to a method that takes one argument, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="arg"><span data-ttu-id="79961-393">Объект, передаваемый в качестве аргумента указанному методу.</span><span class="sxs-lookup"><span data-stu-id="79961-393">An object to pass as an argument to the given method.</span></span></param>
        <summary><span data-ttu-id="79961-394">Выполняет указанный делегат синхронно, с заданными приоритетом и аргументом, в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-394">Executes the specified delegate at the specified priority with the specified argument synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="79961-395">Значение, возвращаемое вызываемым делегатом, или <see langword="null" />, если делегат не возвращает никакого значения.</span><span class="sxs-lookup"><span data-stu-id="79961-395">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="79961-396">`Arg` может быть `null` Если аргумент не является обязательным</span><span class="sxs-lookup"><span data-stu-id="79961-396">`Arg` can be `null` if an argument is not needed</span></span>  
  
 <span data-ttu-id="79961-397">В [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], поток, создавший <xref:System.Windows.Threading.DispatcherObject> может получить доступ к этому объекту.</span><span class="sxs-lookup"><span data-stu-id="79961-397">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="79961-398">Например, фоновый поток, который выполнения от основного потока пользовательского интерфейса не может обновить содержимое <xref:System.Windows.Controls.Button> , созданного в потоке пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="79961-398">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="79961-399">Чтобы фоновый поток, получать доступ к свойству содержимого <xref:System.Windows.Controls.Button>, фоновый поток должны делегировать работу в <xref:System.Windows.Threading.Dispatcher> связанного с потоком пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="79961-399">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="79961-400">Это достигается с помощью <xref:System.Windows.Threading.Dispatcher.Invoke%2A> или <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="79961-400">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="79961-401"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> является синхронным и <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> является асинхронным.</span><span class="sxs-lookup"><span data-stu-id="79961-401"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="79961-402">Операция добавляется в очередь событий <xref:System.Windows.Threading.Dispatcher> по указанному индексу <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="79961-402">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="79961-403"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> представляет собой синхронную операцию; Таким образом элемент управления не возвращает вызывающему объекту до после функция обратного вызова.</span><span class="sxs-lookup"><span data-stu-id="79961-403"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="79961-404"><paramref name="priority" /> равно <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span><span class="sxs-lookup"><span data-stu-id="79961-404"><paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <span data-ttu-id="79961-405"><paramref name="priority" /> не является допустимым приоритетом.</span><span class="sxs-lookup"><span data-stu-id="79961-405"><paramref name="priority" /> is not a valid priority.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="79961-406">Свойство <paramref name="method" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="79961-406"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, TimeSpan timeout, Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.TimeSpan timeout, class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, timeout As TimeSpan, method As Delegate) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, TimeSpan timeout, Delegate ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="79961-407">Приоритет относительно других ожидающих выполнения операций в очереди событий <see cref="T:System.Windows.Threading.Dispatcher" />, с которым вызван заданный метод.</span><span class="sxs-lookup"><span data-stu-id="79961-407">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="timeout"><span data-ttu-id="79961-408">Максимальное время ожидания завершения операции.</span><span class="sxs-lookup"><span data-stu-id="79961-408">The maximum time to wait for the operation to finish.</span></span></param>
        <param name="method"><span data-ttu-id="79961-409">Делегат метода без аргументов, помещенный в очередь событий <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-409">The delegate to a method that takes no arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <summary><span data-ttu-id="79961-410">Выполняет указанный делегат асинхронно, с заданными приоритетом и значением таймаута, в потоке, в котором был создан объект <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-410">Executes the specified delegate synchronously at the specified priority and with the specified time-out value on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> was created.</span></span></summary>
        <returns><span data-ttu-id="79961-411">Значение, возвращаемое вызываемым делегатом, или <see langword="null" />, если делегат не возвращает никакого значения.</span><span class="sxs-lookup"><span data-stu-id="79961-411">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="79961-412">В [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], поток, создавший <xref:System.Windows.Threading.DispatcherObject> может получить доступ к этому объекту.</span><span class="sxs-lookup"><span data-stu-id="79961-412">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="79961-413">Например, фоновый поток, который выполнения от основного потока пользовательского интерфейса не может обновить содержимое <xref:System.Windows.Controls.Button> , созданного в потоке пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="79961-413">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="79961-414">Чтобы фоновый поток, получать доступ к свойству содержимого <xref:System.Windows.Controls.Button>, фоновый поток должны делегировать работу в <xref:System.Windows.Threading.Dispatcher> связанного с потоком пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="79961-414">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="79961-415">Это достигается с помощью <xref:System.Windows.Threading.Dispatcher.Invoke%2A> или <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="79961-415">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="79961-416"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> является синхронным и <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> является асинхронным.</span><span class="sxs-lookup"><span data-stu-id="79961-416"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="79961-417">Операция добавляется в очередь событий <xref:System.Windows.Threading.Dispatcher> по указанному индексу <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="79961-417">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="79961-418"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> представляет собой синхронную операцию; Таким образом элемент управления не возвращает вызывающему объекту до после функция обратного вызова.</span><span class="sxs-lookup"><span data-stu-id="79961-418"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="79961-419">Делегат, вызываемый с помощью диспетчера.</span><span class="sxs-lookup"><span data-stu-id="79961-419">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="79961-420">Приоритет, определяющий очередность вызова указанного метода обратного вызова по отношению к другим ожидающим операциям в объекте <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-420">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="79961-421">Объект, указывающий, следует ли отменить действие.</span><span class="sxs-lookup"><span data-stu-id="79961-421">An object that indicates whether to cancel the action.</span></span></param>
        <param name="timeout"><span data-ttu-id="79961-422">Минимальное время ожидания запуска операции.</span><span class="sxs-lookup"><span data-stu-id="79961-422">The minimum amount of time to wait for the operation to start.</span></span></param>
        <summary><span data-ttu-id="79961-423">Выполняет указанный объект <see cref="T:System.Action" /> синхронно с заданным приоритетом в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-423">Executes the specified <see cref="T:System.Action" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, TimeSpan timeout, System.Windows.Threading.DispatcherPriority priority, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, valuetype System.TimeSpan timeout, valuetype System.Windows.Threading.DispatcherPriority priority, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, timeout As TimeSpan, priority As DispatcherPriority, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, TimeSpan timeout, System::Windows::Threading::DispatcherPriority priority, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="79961-424">Делегат метода с параметрами, указанными в <c>args</c>, который помещен в очередь событий <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-424">A delegate to a method that takes parameters specified in <c>args</c>, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="timeout"><span data-ttu-id="79961-425">Максимальное время ожидания завершения операции.</span><span class="sxs-lookup"><span data-stu-id="79961-425">The maximum amount of time to wait for the operation to complete.</span></span></param>
        <param name="priority"><span data-ttu-id="79961-426">Приоритет относительно других ожидающих выполнения операций в очереди событий <see cref="T:System.Windows.Threading.Dispatcher" />, с которым вызван заданный метод.</span><span class="sxs-lookup"><span data-stu-id="79961-426">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="args"><span data-ttu-id="79961-427">Массив объектов, передаваемых в качестве аргументов указанному методу.</span><span class="sxs-lookup"><span data-stu-id="79961-427">An array of objects to pass as arguments to the given method.</span></span> <span data-ttu-id="79961-428">Может принимать значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="79961-428">Can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="79961-429">Выполняет указанный делегат в течение заданного промежутка времени, синхронно, с заданными приоритетом и аргументами, в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-429">Executes the specified delegate within the designated time span at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="79961-430">Значение, возвращаемое вызываемым делегатом, или <see langword="null" />, если делегат не возвращает никакого значения.</span><span class="sxs-lookup"><span data-stu-id="79961-430">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="79961-431">В [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], поток, создавший <xref:System.Windows.Threading.DispatcherObject> может получить доступ к этому объекту.</span><span class="sxs-lookup"><span data-stu-id="79961-431">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="79961-432">Например, фоновый поток, который выполнения от основного потока пользовательского интерфейса не может обновить содержимое <xref:System.Windows.Controls.Button> , созданного в потоке пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="79961-432">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="79961-433">Чтобы фоновый поток, получать доступ к свойству содержимого <xref:System.Windows.Controls.Button>, фоновый поток должны делегировать работу в <xref:System.Windows.Threading.Dispatcher> связанного с потоком пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="79961-433">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="79961-434">Это достигается с помощью <xref:System.Windows.Threading.Dispatcher.Invoke%2A> или <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="79961-434">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="79961-435"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> является синхронным и <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> является асинхронным.</span><span class="sxs-lookup"><span data-stu-id="79961-435"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="79961-436">Операция добавляется в очередь событий <xref:System.Windows.Threading.Dispatcher> по указанному индексу <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="79961-436">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="79961-437"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> представляет собой синхронную операцию; Таким образом элемент управления не возвращает вызывающему объекту до после функция обратного вызова.</span><span class="sxs-lookup"><span data-stu-id="79961-437"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, method As Delegate, arg As Object, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="79961-438">Приоритет относительно других ожидающих выполнения операций в очереди событий <see cref="T:System.Windows.Threading.Dispatcher" />, с которым вызван заданный метод.</span><span class="sxs-lookup"><span data-stu-id="79961-438">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="79961-439">Делегат метода с несколькими аргументами, помещенный в очередь событий <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-439">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="arg"><span data-ttu-id="79961-440">Объект, передаваемый в качестве аргумента указанному методу.</span><span class="sxs-lookup"><span data-stu-id="79961-440">An object to pass as an argument to the given method.</span></span></param>
        <param name="args"><span data-ttu-id="79961-441">Массив объектов, передаваемых в качестве аргументов указанному методу.</span><span class="sxs-lookup"><span data-stu-id="79961-441">An array of objects to pass as arguments to the given method.</span></span></param>
        <summary><span data-ttu-id="79961-442">Выполняет указанный делегат синхронно, с заданными приоритетом и аргументами, в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-442">Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="79961-443">Значение, возвращаемое вызываемым делегатом, или <see langword="null" />, если делегат не возвращает никакого значения.</span><span class="sxs-lookup"><span data-stu-id="79961-443">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="79961-444">`Arg` может быть `null` Если аргумент не является обязательным</span><span class="sxs-lookup"><span data-stu-id="79961-444">`Arg` can be `null` if an argument is not needed</span></span>  
  
 <span data-ttu-id="79961-445">В [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], поток, создавший <xref:System.Windows.Threading.DispatcherObject> может получить доступ к этому объекту.</span><span class="sxs-lookup"><span data-stu-id="79961-445">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="79961-446">Например, фоновый поток, который выполнения от основного потока пользовательского интерфейса не может обновить содержимое <xref:System.Windows.Controls.Button> , созданного в потоке пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="79961-446">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="79961-447">Чтобы фоновый поток, получать доступ к свойству содержимого <xref:System.Windows.Controls.Button>, фоновый поток должны делегировать работу в <xref:System.Windows.Threading.Dispatcher> связанного с потоком пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="79961-447">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="79961-448">Это достигается с помощью <xref:System.Windows.Threading.Dispatcher.Invoke%2A> или <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="79961-448">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="79961-449"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> является синхронным и <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> является асинхронным.</span><span class="sxs-lookup"><span data-stu-id="79961-449"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="79961-450">Операция добавляется в очередь событий <xref:System.Windows.Threading.Dispatcher> по указанному индексу <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="79961-450">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="79961-451"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> представляет собой синхронную операцию; Таким образом элемент управления не возвращает вызывающему объекту до после функция обратного вызова.</span><span class="sxs-lookup"><span data-stu-id="79961-451"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="79961-452"><paramref name="priority" /> равно <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span><span class="sxs-lookup"><span data-stu-id="79961-452"><paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <span data-ttu-id="79961-453"><paramref name="priority" /> не является допустимым приоритетом.</span><span class="sxs-lookup"><span data-stu-id="79961-453"><paramref name="priority" /> is not a valid priority.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="79961-454">Свойство <paramref name="method" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="79961-454"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, TimeSpan timeout, Delegate method, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.TimeSpan timeout, class System.Delegate method, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, timeout As TimeSpan, method As Delegate, arg As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, TimeSpan timeout, Delegate ^ method, System::Object ^ arg);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="79961-455">Приоритет относительно других ожидающих выполнения операций в очереди событий <see cref="T:System.Windows.Threading.Dispatcher" />, с которым вызван заданный метод.</span><span class="sxs-lookup"><span data-stu-id="79961-455">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="timeout"><span data-ttu-id="79961-456">Максимальное время ожидания завершения операции.</span><span class="sxs-lookup"><span data-stu-id="79961-456">The maximum time to wait for the operation to finish.</span></span></param>
        <param name="method"><span data-ttu-id="79961-457">Делегат метода с несколькими аргументами, помещенный в очередь событий <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-457">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="arg"><span data-ttu-id="79961-458">Объект, передаваемый в качестве аргумента указанному методу.</span><span class="sxs-lookup"><span data-stu-id="79961-458">An object to pass as an argument to the given method.</span></span> <span data-ttu-id="79961-459">Это может быть значение <see langword="null" />, если аргументы не требуются.</span><span class="sxs-lookup"><span data-stu-id="79961-459">This can be <see langword="null" /> if no arguments are needed.</span></span></param>
        <summary><span data-ttu-id="79961-460">Выполняет указанный делегат синхронно, с заданными приоритетом и аргументом, в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-460">Executes the specified delegate at the specified priority with the specified argument synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="79961-461">Значение, возвращаемое вызываемым делегатом, или <see langword="null" />, если делегат не возвращает никакого значения.</span><span class="sxs-lookup"><span data-stu-id="79961-461">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="79961-462">`Arg` может быть `null` Если аргумент не является обязательным</span><span class="sxs-lookup"><span data-stu-id="79961-462">`Arg` can be `null` if an argument is not needed</span></span>  
  
 <span data-ttu-id="79961-463">В [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], поток, создавший <xref:System.Windows.Threading.DispatcherObject> может получить доступ к этому объекту.</span><span class="sxs-lookup"><span data-stu-id="79961-463">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="79961-464">Например, фоновый поток, который выполнения от основного потока пользовательского интерфейса не может обновить содержимое <xref:System.Windows.Controls.Button> , созданного в потоке пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="79961-464">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="79961-465">Чтобы фоновый поток, получать доступ к свойству содержимого <xref:System.Windows.Controls.Button>, фоновый поток должны делегировать работу в <xref:System.Windows.Threading.Dispatcher> связанного с потоком пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="79961-465">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="79961-466">Это достигается с помощью <xref:System.Windows.Threading.Dispatcher.Invoke%2A> или <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="79961-466">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="79961-467"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> является синхронным и <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> является асинхронным.</span><span class="sxs-lookup"><span data-stu-id="79961-467"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="79961-468">Операция добавляется в очередь событий <xref:System.Windows.Threading.Dispatcher> по указанному индексу <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="79961-468">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="79961-469"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> представляет собой синхронную операцию; Таким образом элемент управления не возвращает вызывающему объекту до после функция обратного вызова.</span><span class="sxs-lookup"><span data-stu-id="79961-469"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="79961-470"><paramref name="priority" /> равно <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span><span class="sxs-lookup"><span data-stu-id="79961-470"><paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <span data-ttu-id="79961-471"><paramref name="priority" /> не является допустимым приоритетом.</span><span class="sxs-lookup"><span data-stu-id="79961-471"><paramref name="priority" /> is not a valid priority.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="79961-472">Свойство <paramref name="method" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="79961-472"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, TimeSpan timeout, Delegate method, object arg, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.TimeSpan timeout, class System.Delegate method, object arg, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, timeout As TimeSpan, method As Delegate, arg As Object, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, TimeSpan timeout, Delegate ^ method, System::Object ^ arg, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="79961-473">Приоритет относительно других ожидающих выполнения операций в очереди событий <see cref="T:System.Windows.Threading.Dispatcher" />, с которым вызван заданный метод.</span><span class="sxs-lookup"><span data-stu-id="79961-473">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="timeout"><span data-ttu-id="79961-474">Максимальное время ожидания завершения операции.</span><span class="sxs-lookup"><span data-stu-id="79961-474">The maximum time to wait for the operation to finish.</span></span></param>
        <param name="method"><span data-ttu-id="79961-475">Делегат метода с несколькими аргументами, помещенный в очередь событий <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-475">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="arg"><span data-ttu-id="79961-476">Объект, передаваемый в качестве аргумента указанному методу.</span><span class="sxs-lookup"><span data-stu-id="79961-476">An object to pass as an argument to the specified method.</span></span></param>
        <param name="args"><span data-ttu-id="79961-477">Массив объектов, передаваемых в качестве аргументов указанному методу.</span><span class="sxs-lookup"><span data-stu-id="79961-477">An array of objects to pass as arguments to the specified method.</span></span></param>
        <summary><span data-ttu-id="79961-478">Выполняет указанный делегат синхронно, с заданными приоритетом и аргументами, в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-478">Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="79961-479">Значение, возвращаемое вызываемым делегатом, или <see langword="null" />, если делегат не возвращает никакого значения.</span><span class="sxs-lookup"><span data-stu-id="79961-479">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="79961-480">`Arg` может быть `null` Если аргумент не требуется.</span><span class="sxs-lookup"><span data-stu-id="79961-480">`Arg` can be `null` if an argument is not needed.</span></span>  
  
 <span data-ttu-id="79961-481">В [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], поток, создавший <xref:System.Windows.Threading.DispatcherObject> может получить доступ к этому объекту.</span><span class="sxs-lookup"><span data-stu-id="79961-481">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="79961-482">Например, фоновый поток, который выполнения от основного потока пользовательского интерфейса не может обновить содержимое <xref:System.Windows.Controls.Button> , созданного в потоке пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="79961-482">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="79961-483">Чтобы фоновый поток, получать доступ к свойству содержимого <xref:System.Windows.Controls.Button>, фоновый поток должны делегировать работу в <xref:System.Windows.Threading.Dispatcher> связанного с потоком пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="79961-483">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="79961-484">Это достигается с помощью <xref:System.Windows.Threading.Dispatcher.Invoke%2A> или <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="79961-484">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="79961-485"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> является синхронным и <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> является асинхронным.</span><span class="sxs-lookup"><span data-stu-id="79961-485"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="79961-486">Операция добавляется в очередь событий <xref:System.Windows.Threading.Dispatcher> по указанному индексу <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="79961-486">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="79961-487"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> представляет собой синхронную операцию; Таким образом элемент управления не возвращает вызывающему объекту до после функция обратного вызова.</span><span class="sxs-lookup"><span data-stu-id="79961-487"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="79961-488"><paramref name="priority" /> равно <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span><span class="sxs-lookup"><span data-stu-id="79961-488"><paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <span data-ttu-id="79961-489"><paramref name="priority" /> не является допустимым <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span><span class="sxs-lookup"><span data-stu-id="79961-489"><paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="79961-490">Свойство <paramref name="method" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="79961-490"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke(Of TResult) (callback As Func(Of TResult)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="79961-491">Тип возвращаемого значения указанного делегата.</span><span class="sxs-lookup"><span data-stu-id="79961-491">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="79961-492">Делегат, вызываемый с помощью диспетчера.</span><span class="sxs-lookup"><span data-stu-id="79961-492">A delegate to invoke through the dispatcher.</span></span></param>
        <summary><span data-ttu-id="79961-493">Выполняет заданный объект <see cref="T:System.Func`1" /> синхронно в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-493">Executes the specified <see cref="T:System.Func`1" /> synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="79961-494">Значение, возвращаемое `callback`.</span><span class="sxs-lookup"><span data-stu-id="79961-494">The value returned by `callback`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke(Of TResult) (callback As Func(Of TResult), priority As DispatcherPriority) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="79961-495">Тип возвращаемого значения указанного делегата.</span><span class="sxs-lookup"><span data-stu-id="79961-495">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="79961-496">Делегат, вызываемый с помощью диспетчера.</span><span class="sxs-lookup"><span data-stu-id="79961-496">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="79961-497">Приоритет, определяющий очередность вызова указанного метода обратного вызова по отношению к другим ожидающим операциям в объекте <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-497">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <summary><span data-ttu-id="79961-498">Выполняет указанный объект <see cref="T:System.Func`1" /> синхронно с заданным приоритетом в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-498">Executes the specified <see cref="T:System.Func`1" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="79961-499">Значение, возвращаемое `callback`.</span><span class="sxs-lookup"><span data-stu-id="79961-499">The value returned by `callback`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="79961-500">Тип возвращаемого значения указанного делегата.</span><span class="sxs-lookup"><span data-stu-id="79961-500">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="79961-501">Делегат, вызываемый с помощью диспетчера.</span><span class="sxs-lookup"><span data-stu-id="79961-501">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="79961-502">Приоритет, определяющий очередность вызова указанного метода обратного вызова по отношению к другим ожидающим операциям в объекте <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-502">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="79961-503">Объект, указывающий, следует ли отменить операцию.</span><span class="sxs-lookup"><span data-stu-id="79961-503">An object that indicates whether to cancel the operation.</span></span></param>
        <summary><span data-ttu-id="79961-504">Выполняет указанный объект <see cref="T:System.Func`1" /> синхронно с заданным приоритетом в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-504">Executes the specified <see cref="T:System.Func`1" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="79961-505">Значение, возвращаемое `callback`.</span><span class="sxs-lookup"><span data-stu-id="79961-505">The value returned by `callback`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="79961-506">Тип возвращаемого значения указанного делегата.</span><span class="sxs-lookup"><span data-stu-id="79961-506">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="79961-507">Делегат, вызываемый с помощью диспетчера.</span><span class="sxs-lookup"><span data-stu-id="79961-507">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="79961-508">Приоритет, определяющий очередность вызова указанного метода обратного вызова по отношению к другим ожидающим операциям в объекте <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-508">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="79961-509">Объект, указывающий, следует ли отменить операцию.</span><span class="sxs-lookup"><span data-stu-id="79961-509">An object that indicates whether to cancel the operation.</span></span></param>
        <param name="timeout"><span data-ttu-id="79961-510">Минимальное время ожидания запуска операции.</span><span class="sxs-lookup"><span data-stu-id="79961-510">The minimum amount of time to wait for the operation to start.</span></span></param>
        <summary><span data-ttu-id="79961-511">Выполняет указанный объект <see cref="T:System.Func`1" /> синхронно с заданным приоритетом в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-511">Executes the specified <see cref="T:System.Func`1" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="79961-512">Значение, возвращаемое `callback`.</span><span class="sxs-lookup"><span data-stu-id="79961-512">The value returned by `callback`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeAsync">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="79961-513">Выполняет заданный делегат асинхронно в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-513">Executes the specified delegate asynchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation InvokeAsync (Action callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation InvokeAsync(class System.Action callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync (callback As Action) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ InvokeAsync(Action ^ callback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="79961-514">Делегат, вызываемый с помощью диспетчера.</span><span class="sxs-lookup"><span data-stu-id="79961-514">A delegate to invoke through the dispatcher.</span></span></param>
        <summary><span data-ttu-id="79961-515">Выполняет заданный объект <see cref="T:System.Action" /> асинхронно в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-515">Executes the specified <see cref="T:System.Action" /> asynchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="79961-516">Объект, возвращаемый сразу после вызова <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)" />, используемый для взаимодействия с делегатом, ожидающим выполнения в очереди событий.</span><span class="sxs-lookup"><span data-stu-id="79961-516">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation InvokeAsync (Action callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation InvokeAsync(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync (callback As Action, priority As DispatcherPriority) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ InvokeAsync(Action ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="79961-517">Делегат, вызываемый с помощью диспетчера.</span><span class="sxs-lookup"><span data-stu-id="79961-517">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="79961-518">Приоритет, определяющий очередность вызова указанного метода обратного вызова по отношению к другим ожидающим операциям в объекте <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-518">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <summary><span data-ttu-id="79961-519">Выполняет указанный объект <see cref="T:System.Action" /> асинхронно с заданным приоритетом в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-519">Executes the specified <see cref="T:System.Action" /> asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="79961-520">Объект, возвращаемый сразу после вызова <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)" />, используемый для взаимодействия с делегатом, ожидающим выполнения в очереди событий.</span><span class="sxs-lookup"><span data-stu-id="79961-520">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation InvokeAsync (Action callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation InvokeAsync(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ InvokeAsync(Action ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="79961-521">Делегат, вызываемый с помощью диспетчера.</span><span class="sxs-lookup"><span data-stu-id="79961-521">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="79961-522">Приоритет, определяющий очередность вызова указанного метода обратного вызова по отношению к другим ожидающим операциям в объекте <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-522">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="79961-523">Объект, указывающий, следует ли отменить действие.</span><span class="sxs-lookup"><span data-stu-id="79961-523">An object that indicates whether to cancel the action.</span></span></param>
        <summary><span data-ttu-id="79961-524">Выполняет указанный объект <see cref="T:System.Action" /> асинхронно с заданным приоритетом в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-524">Executes the specified <see cref="T:System.Action" /> asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="79961-525">Объект, возвращаемый сразу после вызова <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />, используемый для взаимодействия с делегатом, ожидающим выполнения в очереди событий.</span><span class="sxs-lookup"><span data-stu-id="79961-525">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation&lt;TResult&gt; InvokeAsync&lt;TResult&gt; (Func&lt;TResult&gt; callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation`1&lt;!!TResult&gt; InvokeAsync&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync(Of TResult) (callback As Func(Of TResult)) As DispatcherOperation(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Windows::Threading::DispatcherOperation&lt;TResult&gt; ^ InvokeAsync(Func&lt;TResult&gt; ^ callback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="79961-526">Тип возвращаемого значения указанного делегата.</span><span class="sxs-lookup"><span data-stu-id="79961-526">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="79961-527">Делегат, вызываемый с помощью диспетчера.</span><span class="sxs-lookup"><span data-stu-id="79961-527">A delegate to invoke through the dispatcher.</span></span></param>
        <summary><span data-ttu-id="79961-528">Выполняет заданный объект <see cref="T:System.Func`1" /> асинхронно в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-528">Executes the specified <see cref="T:System.Func`1" /> asynchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="79961-529">Объект, возвращаемый сразу после вызова <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})" />, используемый для взаимодействия с делегатом, ожидающим выполнения в очереди событий.</span><span class="sxs-lookup"><span data-stu-id="79961-529">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation&lt;TResult&gt; InvokeAsync&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation`1&lt;!!TResult&gt; InvokeAsync&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync(Of TResult) (callback As Func(Of TResult), priority As DispatcherPriority) As DispatcherOperation(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Windows::Threading::DispatcherOperation&lt;TResult&gt; ^ InvokeAsync(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="79961-530">Тип возвращаемого значения указанного делегата.</span><span class="sxs-lookup"><span data-stu-id="79961-530">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="79961-531">Делегат, вызываемый с помощью диспетчера.</span><span class="sxs-lookup"><span data-stu-id="79961-531">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="79961-532">Приоритет, определяющий очередность вызова указанного метода обратного вызова по отношению к другим ожидающим операциям в объекте <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-532">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <summary><span data-ttu-id="79961-533">Выполняет указанный объект <see cref="T:System.Func`1" /> асинхронно с заданным приоритетом в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-533">Executes the specified <see cref="T:System.Func`1" /> asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="79961-534">Объект, возвращаемый сразу после вызова <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" />, используемый для взаимодействия с делегатом, ожидающим выполнения в очереди событий.</span><span class="sxs-lookup"><span data-stu-id="79961-534">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation&lt;TResult&gt; InvokeAsync&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation`1&lt;!!TResult&gt; InvokeAsync&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Windows::Threading::DispatcherOperation&lt;TResult&gt; ^ InvokeAsync(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="79961-535">Тип возвращаемого значения указанного делегата.</span><span class="sxs-lookup"><span data-stu-id="79961-535">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="79961-536">Делегат, вызываемый с помощью диспетчера.</span><span class="sxs-lookup"><span data-stu-id="79961-536">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="79961-537">Приоритет, определяющий очередность вызова указанного метода обратного вызова по отношению к другим ожидающим операциям в объекте <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-537">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="79961-538">Объект, указывающий, следует ли отменить операцию.</span><span class="sxs-lookup"><span data-stu-id="79961-538">An object that indicates whether to cancel the operation.</span></span></param>
        <summary><span data-ttu-id="79961-539">Выполняет указанный объект <see cref="T:System.Func`1" /> синхронно с заданным приоритетом в потоке, с которым связан <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-539">Executes the specified <see cref="T:System.Func`1" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="79961-540">Объект, возвращаемый сразу после вызова <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />, используемый для взаимодействия с делегатом, ожидающим выполнения в очереди событий.</span><span class="sxs-lookup"><span data-stu-id="79961-540">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeShutdown">
      <MemberSignature Language="C#" Value="public void InvokeShutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeShutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeShutdown" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeShutdown ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeShutdown();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="79961-541">Инициирует синхронный процесс остановки <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-541">Initiates the shutdown process of the <see cref="T:System.Windows.Threading.Dispatcher" /> synchronously.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="79961-542"><xref:System.Windows.Threading.Dispatcher.InvokeShutdown%2A> требует неограниченного разрешения пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="79961-542"><xref:System.Windows.Threading.Dispatcher.InvokeShutdown%2A> demands unrestricted UI Permissions.</span></span>  
  
 <span data-ttu-id="79961-543">Когда <xref:System.Windows.Threading.Dispatcher> начнет завершение работы, <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> события и <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> равно `true`.</span><span class="sxs-lookup"><span data-stu-id="79961-543">When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="79961-544"><xref:System.Windows.Threading.Dispatcher> Не полностью выключить пока освобождает очереди событий.</span><span class="sxs-lookup"><span data-stu-id="79961-544">The <xref:System.Windows.Threading.Dispatcher> does not shut down completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="79961-545">По завершении диспетчер завершает работу, <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> события и <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> свойству `true`.</span><span class="sxs-lookup"><span data-stu-id="79961-545">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="79961-546">После начала процесса завершения работы всех ожидающих рабочих элементов в очереди прерываются.</span><span class="sxs-lookup"><span data-stu-id="79961-546">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="79961-547">для остановки диспетчера.</span><span class="sxs-lookup"><span data-stu-id="79961-547">for shutting down the dispatcher.</span></span>  <span data-ttu-id="79961-548">Связанные перечисления:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="79961-548">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="PushFrame">
      <MemberSignature Language="C#" Value="public static void PushFrame (System.Windows.Threading.DispatcherFrame frame);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PushFrame(class System.Windows.Threading.DispatcherFrame frame) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.PushFrame(System.Windows.Threading.DispatcherFrame)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub PushFrame (frame As DispatcherFrame)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PushFrame(System::Windows::Threading::DispatcherFrame ^ frame);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="frame" Type="System.Windows.Threading.DispatcherFrame" />
      </Parameters>
      <Docs>
        <param name="frame"><span data-ttu-id="79961-549">Фрейм для обработки диспетчером.</span><span class="sxs-lookup"><span data-stu-id="79961-549">The frame for the dispatcher to process.</span></span></param>
        <summary><span data-ttu-id="79961-550">Входит в цикл выполнения.</span><span class="sxs-lookup"><span data-stu-id="79961-550">Enters an execute loop.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="79961-551">Объект <xref:System.Windows.Threading.DispatcherFrame> представляет цикл, который обрабатывает ожидающих работ.</span><span class="sxs-lookup"><span data-stu-id="79961-551">A <xref:System.Windows.Threading.DispatcherFrame> represents a loop that processes pending work items.</span></span>  
  
 <span data-ttu-id="79961-552">Диспетчер обрабатывает очередь рабочих элементов в цикле.</span><span class="sxs-lookup"><span data-stu-id="79961-552">The Dispatcher processes the work item queue in a loop.</span></span>  <span data-ttu-id="79961-553">Цикл называется кадром.</span><span class="sxs-lookup"><span data-stu-id="79961-553">The loop is referred to as a frame.</span></span>  <span data-ttu-id="79961-554">Начальный цикла обычно инициируется приложением путем вызова метода <xref:System.Windows.Threading.Dispatcher.Run%2A>.</span><span class="sxs-lookup"><span data-stu-id="79961-554">The initial loop is typically initiated by the application by calling <xref:System.Windows.Threading.Dispatcher.Run%2A>.</span></span>  
  
 <span data-ttu-id="79961-555"><xref:System.Windows.Threading.Dispatcher.PushFrame%2A> входит в цикл, представленный параметром `frame`.</span><span class="sxs-lookup"><span data-stu-id="79961-555"><xref:System.Windows.Threading.Dispatcher.PushFrame%2A> enters a loop represented by the parameter `frame`.</span></span>  <span data-ttu-id="79961-556">В каждой итерации цикла <xref:System.Windows.Threading.Dispatcher> проверит <xref:System.Windows.Threading.DispatcherFrame.Continue%2A> свойство <xref:System.Windows.Threading.DispatcherFrame> класс, чтобы определить, следует ли продолжать цикла или если он не должен использоваться.</span><span class="sxs-lookup"><span data-stu-id="79961-556">At each iteration of the loop, the <xref:System.Windows.Threading.Dispatcher> will check the <xref:System.Windows.Threading.DispatcherFrame.Continue%2A> property on the <xref:System.Windows.Threading.DispatcherFrame> class to determine whether the loop should continue or if it should stop.</span></span>  
  
 <span data-ttu-id="79961-557"><xref:System.Windows.Threading.DispatcherFrame> позволяет <xref:System.Windows.Threading.DispatcherFrame.Continue%2A> должно быть задано явным образом свойство и его соблюдает <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> свойство <xref:System.Windows.Threading.Dispatcher>.</span><span class="sxs-lookup"><span data-stu-id="79961-557"><xref:System.Windows.Threading.DispatcherFrame> allows for the <xref:System.Windows.Threading.DispatcherFrame.Continue%2A> property to be set explicitly and it respects the <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> property on the <xref:System.Windows.Threading.Dispatcher>.</span></span>  <span data-ttu-id="79961-558">Это означает, что когда <xref:System.Windows.Threading.Dispatcher> начинает завершение работы, кадры, которые использует по умолчанию <xref:System.Windows.Threading.DispatcherFrame> реализацию завершит работу, которая разрешает всех вложенных кадров для выхода из.</span><span class="sxs-lookup"><span data-stu-id="79961-558">This means when the <xref:System.Windows.Threading.Dispatcher> starts to shut down, frames that use the default <xref:System.Windows.Threading.DispatcherFrame> implementation will exit, which enables all nested frames to exit.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="79961-559">В следующем примере показано, как использовать <xref:System.Windows.Threading.DispatcherFrame> для достижения подобных результатов как [!INCLUDE[TLA#tla_winforms](~/includes/tlasharptla-winforms-md.md)] <xref:System.Windows.Forms.Application.DoEvents%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="79961-559">The following example shows how to use a <xref:System.Windows.Threading.DispatcherFrame> to achieve similar results as the [!INCLUDE[TLA#tla_winforms](~/includes/tlasharptla-winforms-md.md)] <xref:System.Windows.Forms.Application.DoEvents%2A> method.</span></span>  
  
 [!code-csharp[dispatchersnippets#DispatcherDispatcherFrameDoEvents](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherSnippets/CSharp/Window1.xaml.cs#dispatcherdispatcherframedoevents)]
 [!code-vb[dispatchersnippets#DispatcherDispatcherFrameDoEvents](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherSnippets/visualbasic/window1.xaml.vb#dispatcherdispatcherframedoevents)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="79961-560">Свойство <paramref name="frame" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="79961-560"><paramref name="frame" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="79961-561"><see cref="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" /> равно <see langword="true" /></span><span class="sxs-lookup"><span data-stu-id="79961-561"><see cref="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" /> is <see langword="true" /></span></span>  
  
 <span data-ttu-id="79961-562">- или -</span><span class="sxs-lookup"><span data-stu-id="79961-562">-or-</span></span>  
  
 <span data-ttu-id="79961-563"><paramref name="frame" /> выполняется с другим <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-563"><paramref name="frame" /> is running on a different <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span>  
  
 <span data-ttu-id="79961-564">- или -</span><span class="sxs-lookup"><span data-stu-id="79961-564">-or-</span></span>  
  
 <span data-ttu-id="79961-565">Диспетчер отключен.</span><span class="sxs-lookup"><span data-stu-id="79961-565">Dispatcher processing has been disabled.</span></span></exception>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="79961-566">для помещения фрейма выполнения.</span><span class="sxs-lookup"><span data-stu-id="79961-566">for pushing an execution frame.</span></span>  <span data-ttu-id="79961-567">Связанные перечисления:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="79961-567">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span></span></permission>
        <altmember cref="M:System.Windows.Threading.Dispatcher.ExitAllFrames" />
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static void Run ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Run() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Run" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Run ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Run();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="79961-568">Помещает главный фрейм выполнения в очередь событий <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-568">Pushes the main execution frame on the event queue of the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="79961-569"><xref:System.Windows.Threading.Dispatcher> Обрабатывает очередь событий в цикле.</span><span class="sxs-lookup"><span data-stu-id="79961-569">The <xref:System.Windows.Threading.Dispatcher> processes the event queue in a loop.</span></span>  <span data-ttu-id="79961-570">Цикл называется кадром.</span><span class="sxs-lookup"><span data-stu-id="79961-570">The loop is referred to as a frame.</span></span>  <span data-ttu-id="79961-571">Начальный цикла обычно инициируется приложением путем вызова метода <xref:System.Windows.Threading.Dispatcher.Run%2A>.</span><span class="sxs-lookup"><span data-stu-id="79961-571">The initial loop is typically initiated by the application by calling <xref:System.Windows.Threading.Dispatcher.Run%2A>.</span></span>  
  
 <span data-ttu-id="79961-572">Кадр основное выполнение продолжится до <xref:System.Windows.Threading.Dispatcher> выключен.</span><span class="sxs-lookup"><span data-stu-id="79961-572">The main execution frame will continue until the <xref:System.Windows.Threading.Dispatcher> is shutdown.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShutdownFinished">
      <MemberSignature Language="C#" Value="public event EventHandler ShutdownFinished;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ShutdownFinished" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.ShutdownFinished" />
      <MemberSignature Language="VB.NET" Value="Public Event ShutdownFinished As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ShutdownFinished;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="79961-573">Происходит после остановки <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-573">Occurs when the <see cref="T:System.Windows.Threading.Dispatcher" /> finishes shutting down.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="79961-574">Когда процесс завершения работы <xref:System.Windows.Threading.Dispatcher> запускается, <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> события и <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> равно `true`.</span><span class="sxs-lookup"><span data-stu-id="79961-574">When the shutdown process of a <xref:System.Windows.Threading.Dispatcher> is started, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="79961-575"><xref:System.Windows.Threading.Dispatcher> Не выполняет завершение полностью до освобождает очереди событий.</span><span class="sxs-lookup"><span data-stu-id="79961-575">The <xref:System.Windows.Threading.Dispatcher> does not shutdown completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="79961-576">По завершении диспетчер завершает работу, <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> события и <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> свойству `true`.</span><span class="sxs-lookup"><span data-stu-id="79961-576">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="79961-577">После начала процесса завершения работы всех ожидающих рабочих элементов в очереди прерываются.</span><span class="sxs-lookup"><span data-stu-id="79961-577">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" />
        <altmember cref="P:System.Windows.Threading.Dispatcher.HasShutdownStarted" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.InvokeShutdown" />
      </Docs>
    </Member>
    <Member MemberName="ShutdownStarted">
      <MemberSignature Language="C#" Value="public event EventHandler ShutdownStarted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ShutdownStarted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.ShutdownStarted" />
      <MemberSignature Language="VB.NET" Value="Public Event ShutdownStarted As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ShutdownStarted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="79961-578">Происходит, когда начинается процесс остановки <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-578">Occurs when the <see cref="T:System.Windows.Threading.Dispatcher" /> begins to shut down.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="79961-579">Когда процесс завершения работы <xref:System.Windows.Threading.Dispatcher> запускается, <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> события и <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> равно `true`.</span><span class="sxs-lookup"><span data-stu-id="79961-579">When the shutdown process of a <xref:System.Windows.Threading.Dispatcher> is started, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="79961-580"><xref:System.Windows.Threading.Dispatcher> Не выполняет завершение полностью до освобождает очереди событий.</span><span class="sxs-lookup"><span data-stu-id="79961-580">The <xref:System.Windows.Threading.Dispatcher> does not shutdown completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="79961-581">По завершении диспетчер завершает работу, <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> события и <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> свойству `true`.</span><span class="sxs-lookup"><span data-stu-id="79961-581">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="79961-582">После начала процесса завершения работы всех ожидающих рабочих элементов в очереди прерываются.</span><span class="sxs-lookup"><span data-stu-id="79961-582">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Threading.Dispatcher.HasShutdownStarted" />
        <altmember cref="E:System.Windows.Threading.Dispatcher.ShutdownFinished" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.InvokeShutdown" />
      </Docs>
    </Member>
    <Member MemberName="Thread">
      <MemberSignature Language="C#" Value="public System.Threading.Thread Thread { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.Thread Thread" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.Thread" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Thread As Thread" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Thread ^ Thread { System::Threading::Thread ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Thread</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="79961-583">Возвращает поток, с которым связан данный <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-583">Gets the thread this <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <value><span data-ttu-id="79961-584">Поток.</span><span class="sxs-lookup"><span data-stu-id="79961-584">The thread.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnhandledException">
      <MemberSignature Language="C#" Value="public event System.Windows.Threading.DispatcherUnhandledExceptionEventHandler UnhandledException;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Threading.DispatcherUnhandledExceptionEventHandler UnhandledException" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.UnhandledException" />
      <MemberSignature Language="VB.NET" Value="Public Event UnhandledException As DispatcherUnhandledExceptionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Threading::DispatcherUnhandledExceptionEventHandler ^ UnhandledException;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherUnhandledExceptionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="79961-585">Происходит, когда выбрасывается и никаким кодом не перехватывается исключение потока при выполнении делегата с помощью <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> или <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />.</span><span class="sxs-lookup"><span data-stu-id="79961-585">Occurs when a thread exception is thrown and uncaught during execution of a delegate by way of <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> or <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="79961-586">Это событие возникает в том случае, если исключение, инициированное во время выполнения делегата посредством <xref:System.Windows.Threading.Dispatcher.Invoke%2A> или <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> — неперехваченных.</span><span class="sxs-lookup"><span data-stu-id="79961-586">This event is raised when an exception that was thrown during execution of a delegate by way of <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is uncaught.</span></span>  
  
 <span data-ttu-id="79961-587">Обработчик может пометить исключение как обработанное, что позволит блокировать внутреннего обработчика исключений вызывается.</span><span class="sxs-lookup"><span data-stu-id="79961-587">A handler can mark the exception as handled, which will prevent the internal exception handler from being called.</span></span>  
  
 <span data-ttu-id="79961-588">Обработчики событий для этого события должны записываться осторожно во избежание создания вторичных исключений и перехватывать те, что происходят.</span><span class="sxs-lookup"><span data-stu-id="79961-588">Event handlers for this event must be written with care to avoid creating secondary exceptions and to catch any that occur.</span></span> <span data-ttu-id="79961-589">Рекомендуется избегать выделения памяти или выполнения операций с большим объемом в обработчике.</span><span class="sxs-lookup"><span data-stu-id="79961-589">It is recommended to avoid allocating memory or doing any resource intensive operations in the handler.</span></span>  
  
 <span data-ttu-id="79961-590"><xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> Событий предоставляет средства для вызова не <xref:System.Windows.Threading.Dispatcher.UnhandledException> события.</span><span class="sxs-lookup"><span data-stu-id="79961-590">The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event provides a means to not raise the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event.</span></span>  <span data-ttu-id="79961-591"><xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> События во-первых и если <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> на <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> равно `false`, <xref:System.Windows.Threading.Dispatcher.UnhandledException> события не вызываются.</span><span class="sxs-lookup"><span data-stu-id="79961-591">The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event is raised first, and If <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> on the <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> is set to `false`, the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event will not be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionEventHandler" />
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="UnhandledExceptionFilter">
      <MemberSignature Language="C#" Value="public event System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler UnhandledExceptionFilter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler UnhandledExceptionFilter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event UnhandledExceptionFilter As DispatcherUnhandledExceptionFilterEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Threading::DispatcherUnhandledExceptionFilterEventHandler ^ UnhandledExceptionFilter;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>add: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>remove: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="79961-592">Происходит, когда выбрасывается и никаким кодом не перехватывается исключение потока при выполнении делегата с помощью <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> или <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> на стадии фильтра.</span><span class="sxs-lookup"><span data-stu-id="79961-592">Occurs when a thread exception is thrown and uncaught during execution of a delegate by way of <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> or <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> when in the filter stage.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="79961-593">Это событие возникает во время этапа фильтра для исключение, возникшее во время выполнения делегата посредством <xref:System.Windows.Threading.Dispatcher.Invoke%2A> или <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> и неперехваченных.</span><span class="sxs-lookup"><span data-stu-id="79961-593">This event is raised during the filter stage for an exception that is raised during execution of a delegate by way of <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> and is uncaught.</span></span>  
  
 <span data-ttu-id="79961-594">Стек вызовов не развернут на этом этапе (первичное исключение).</span><span class="sxs-lookup"><span data-stu-id="79961-594">The call stack is not unwound at this point (first-chance exception).</span></span>  
  
 <span data-ttu-id="79961-595">Обработчики событий для этого события должны записываться осторожно во избежание создания вторичных исключений и перехватывать те, что происходят.</span><span class="sxs-lookup"><span data-stu-id="79961-595">Event handlers for this event must be written with care to avoid creating secondary exceptions and to catch any that occur.</span></span>  <span data-ttu-id="79961-596">Рекомендуется избегать выделения памяти или выполнения операций с большим объемом в обработчике.</span><span class="sxs-lookup"><span data-stu-id="79961-596">It is recommended to avoid allocating memory or doing any resource intensive operations in the handler.</span></span>  
  
 <span data-ttu-id="79961-597"><xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> Событий предоставляет средства для вызова не <xref:System.Windows.Threading.Dispatcher.UnhandledException> события.</span><span class="sxs-lookup"><span data-stu-id="79961-597">The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event provides a means to not raise the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event.</span></span>  <span data-ttu-id="79961-598"><xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> События во-первых и если <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> на <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> равно `false`, <xref:System.Windows.Threading.Dispatcher.UnhandledException> события не вызываются.</span><span class="sxs-lookup"><span data-stu-id="79961-598">The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event is raised first, and If <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> on the <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> is set to `false`, the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event will not be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="79961-599">для добавления или удаления обработчика этого события.</span><span class="sxs-lookup"><span data-stu-id="79961-599">for adding or removing a handler for this event.</span></span>  <span data-ttu-id="79961-600">Связанные перечисления:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="79961-600">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span></span></permission>
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler" />
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="ValidatePriority">
      <MemberSignature Language="C#" Value="public static void ValidatePriority (System.Windows.Threading.DispatcherPriority priority, string parameterName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ValidatePriority(valuetype System.Windows.Threading.DispatcherPriority priority, string parameterName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.ValidatePriority(System.Windows.Threading.DispatcherPriority,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ValidatePriority (priority As DispatcherPriority, parameterName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ValidatePriority(System::Windows::Threading::DispatcherPriority priority, System::String ^ parameterName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="parameterName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="79961-601">Проверяемый приоритет.</span><span class="sxs-lookup"><span data-stu-id="79961-601">The priority to check.</span></span></param>
        <param name="parameterName"><span data-ttu-id="79961-602">Строка, которая будет возвращена исключением, которое будет сгенерировано, если приоритет окажется недействительным.</span><span class="sxs-lookup"><span data-stu-id="79961-602">A string that will be returned by the exception that occurs if the priority is invalid.</span></span></param>
        <summary><span data-ttu-id="79961-603">Определяет, является ли <see cref="T:System.Windows.Threading.DispatcherPriority" /> допустимым приоритетом.</span><span class="sxs-lookup"><span data-stu-id="79961-603">Determines whether the specified <see cref="T:System.Windows.Threading.DispatcherPriority" /> is a valid priority.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <span data-ttu-id="79961-604"><paramref name="priority" /> не является допустимым <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span><span class="sxs-lookup"><span data-stu-id="79961-604"><paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyAccess">
      <MemberSignature Language="C#" Value="public void VerifyAccess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void VerifyAccess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.VerifyAccess" />
      <MemberSignature Language="VB.NET" Value="Public Sub VerifyAccess ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void VerifyAccess();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="79961-605">Определяет, имеет ли вызывающий поток доступ к этому <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-605">Determines whether the calling thread has access to this <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="79961-606">Только поток <xref:System.Windows.Threading.Dispatcher> создается на может получать доступ к <xref:System.Windows.Threading.Dispatcher>.</span><span class="sxs-lookup"><span data-stu-id="79961-606">Only the thread the <xref:System.Windows.Threading.Dispatcher> is created on may access the <xref:System.Windows.Threading.Dispatcher>.</span></span>  
  
 <span data-ttu-id="79961-607">Этот метод является общим; Таким образом, любой поток может проверьте, имеет ли доступ к <xref:System.Windows.Threading.Dispatcher>.</span><span class="sxs-lookup"><span data-stu-id="79961-607">This method is public; therefore, any thread can check to see whether it has access to the <xref:System.Windows.Threading.Dispatcher>.</span></span>  
  
 <span data-ttu-id="79961-608">Разница между <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> и <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> — <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> возвращает логическое значение, если вызывающий поток не имеет доступа к <xref:System.Windows.Threading.Dispatcher> и <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> приводит к возникновению исключения.</span><span class="sxs-lookup"><span data-stu-id="79961-608">The difference between <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> is <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> returns a Boolean if the calling thread does not have access to the <xref:System.Windows.Threading.Dispatcher> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> throws an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="79961-609">В следующем примере используется <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> для определения, имеет ли поток доступ к потоку, <xref:System.Windows.Controls.Button> был создан.</span><span class="sxs-lookup"><span data-stu-id="79961-609">The following example uses <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> to determine whether a thread has access to the thread that a <xref:System.Windows.Controls.Button> was created on.</span></span>  <span data-ttu-id="79961-610">Метод принимает объект в качестве аргумента, который приводится к <xref:System.Windows.Controls.Button>.</span><span class="sxs-lookup"><span data-stu-id="79961-610">The method takes an object as an argument, which is cast to a <xref:System.Windows.Controls.Button>.</span></span>  <span data-ttu-id="79961-611"><xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> Метод <xref:System.Windows.Threading.Dispatcher> из <xref:System.Windows.Controls.Button> вызывается, чтобы проверить доступ к потоку.</span><span class="sxs-lookup"><span data-stu-id="79961-611">The <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> method on the <xref:System.Windows.Threading.Dispatcher> of the <xref:System.Windows.Controls.Button> is called to verify access to the thread.</span></span>  
  
 <span data-ttu-id="79961-612">Если вызывающий поток имеет доступ к <xref:System.Windows.Threading.Dispatcher>, <xref:System.Windows.Controls.Button> обновляется только доступ к членам <xref:System.Windows.Controls.Button>.</span><span class="sxs-lookup"><span data-stu-id="79961-612">If the calling thread has access to the <xref:System.Windows.Threading.Dispatcher>, the <xref:System.Windows.Controls.Button> is updated by just accessing the members of the <xref:System.Windows.Controls.Button>.</span></span>  
  
 <span data-ttu-id="79961-613">Если вызывающий поток не имеет доступа, <xref:System.InvalidOperationException> возникает исключение.</span><span class="sxs-lookup"><span data-stu-id="79961-613">If the calling thread does not have access, an <xref:System.InvalidOperationException> is thrown.</span></span>  <span data-ttu-id="79961-614">В этом примере перехватывается исключение и помещает делегата, который принимает <xref:System.Windows.Controls.Button> как аргумент, на <xref:System.Windows.Threading.Dispatcher> из <xref:System.Windows.Controls.Button>.</span><span class="sxs-lookup"><span data-stu-id="79961-614">This example catches the exception and pushes a delegate, which accepts a <xref:System.Windows.Controls.Button> as an argument, onto the <xref:System.Windows.Threading.Dispatcher> of the <xref:System.Windows.Controls.Button>.</span></span>  <span data-ttu-id="79961-615">Это <xref:System.Windows.Threading.Dispatcher> будет выполняют обновление <xref:System.Windows.Controls.Button>.</span><span class="sxs-lookup"><span data-stu-id="79961-615">This <xref:System.Windows.Threading.Dispatcher> will do the work of updating the <xref:System.Windows.Controls.Button>.</span></span>  
  
 [!code-csharp[DispatcherAccessSample#DispatcherAccessVerifyAccess](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherAccessSample/CSharp/Window1.xaml.cs#dispatcheraccessverifyaccess)]
 [!code-vb[DispatcherAccessSample#DispatcherAccessVerifyAccess](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherAccessSample/visualbasic/window1.xaml.vb#dispatcheraccessverifyaccess)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="79961-616">Вызывающий поток не имеет доступа к этому <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="79961-616">The calling thread does not have access to this <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></exception>
        <altmember cref="M:System.Windows.Threading.Dispatcher.CheckAccess" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Yield">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="79961-617">Создает объект типа awaitable, который асинхронно направляет элемент управления обратно текущему диспетчеру и предоставляет диспетчеру возможность обработки других событий.</span><span class="sxs-lookup"><span data-stu-id="79961-617">Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Yield">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.DispatcherPriorityAwaitable Yield ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Threading.DispatcherPriorityAwaitable Yield() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Yield" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Yield () As DispatcherPriorityAwaitable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Threading::DispatcherPriorityAwaitable Yield();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherPriorityAwaitable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="79961-618">Создает объект типа awaitable, который асинхронно направляет элемент управления обратно текущему диспетчеру и предоставляет диспетчеру возможность обработки других событий.</span><span class="sxs-lookup"><span data-stu-id="79961-618">Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span></span></summary>
        <returns><span data-ttu-id="79961-619">Объект типа awaitable, который асинхронно направляет элемент управления обратно текущему диспетчеру и предоставляет диспетчеру возможность обработки других событий.</span><span class="sxs-lookup"><span data-stu-id="79961-619">An awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="79961-620">Этот метод позволяет временно разблокировки выполнения для текущего dispatcher, он может выполнять другую работу, например обработки других событий.</span><span class="sxs-lookup"><span data-stu-id="79961-620">This method provides a way for you to temporarily release execution control to the current dispatcher so it can do other work, such as process other events.</span></span> <span data-ttu-id="79961-621">Используйте `await`, или `Await` в Visual Basic, оператор для возвращаемого значения, чтобы вернуть управление текущего dispatcher.</span><span class="sxs-lookup"><span data-stu-id="79961-621">Use the `await`, or `Await` in Visual Basic, operator on the return value to return control to the current dispatcher.</span></span> <span data-ttu-id="79961-622">Используйте этот метод, если требуется предоставить возможность обработки событий, пока приложение выполняет большой объем работы в потоке пользовательского интерфейса приложения.</span><span class="sxs-lookup"><span data-stu-id="79961-622">Use this method if want to give your app a chance to process events while you app is doing a lot of work on the UI thread.</span></span> <span data-ttu-id="79961-623">Например можно использовать этот метод в цикле длительное время, который обновляет элемент управления.</span><span class="sxs-lookup"><span data-stu-id="79961-623">For example, you can use this method in a long-running loop that updates a control.</span></span>  
  
 <span data-ttu-id="79961-624">Этот метод аналогичен вызову <xref:System.Windows.Threading.Dispatcher.Yield%28System.Windows.Threading.DispatcherPriority%29> метода и передачи <xref:System.Windows.Threading.DispatcherPriority.Background?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="79961-624">This method is equivalent to calling the <xref:System.Windows.Threading.Dispatcher.Yield%28System.Windows.Threading.DispatcherPriority%29> method and passing in <xref:System.Windows.Threading.DispatcherPriority.Background?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Yield">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.DispatcherPriorityAwaitable Yield (System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Threading.DispatcherPriorityAwaitable Yield(valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Yield(System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Yield (priority As DispatcherPriority) As DispatcherPriorityAwaitable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Threading::DispatcherPriorityAwaitable Yield(System::Windows::Threading::DispatcherPriority priority);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherPriorityAwaitable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="79961-625">Приоритет, с которым следует планировать продолжение.</span><span class="sxs-lookup"><span data-stu-id="79961-625">The priority at which to schedule the continuation.</span></span></param>
        <summary><span data-ttu-id="79961-626">Создает объект типа awaitable, который асинхронно направляет элемент управления обратно текущему диспетчеру и предоставляет диспетчеру возможность обработки других событий.</span><span class="sxs-lookup"><span data-stu-id="79961-626">Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span></span>  <span data-ttu-id="79961-627">Работа, происходящая, когда элемент управления возвращается к коду, ожидающему результата этого метода, запланирован с указанным приоритетом.</span><span class="sxs-lookup"><span data-stu-id="79961-627">The work that occurs when control returns to the code awaiting the result of this method is scheduled with the specified priority.</span></span></summary>
        <returns><span data-ttu-id="79961-628">Объект типа awaitable, который асинхронно направляет элемент управления обратно текущему диспетчеру и предоставляет диспетчеру возможность обработки других событий.</span><span class="sxs-lookup"><span data-stu-id="79961-628">An awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="79961-629">Этот метод позволяет временно разблокировки выполнения для текущего dispatcher, он может выполнять другую работу, например обработки других событий.</span><span class="sxs-lookup"><span data-stu-id="79961-629">This method provides a way for you to temporarily release execution control to the current dispatcher so it can do other work, such as process other events.</span></span> <span data-ttu-id="79961-630">Используйте `await`, или `Await` в Visual Basic, оператор для возвращаемого значения, чтобы вернуть управление текущего dispatcher.</span><span class="sxs-lookup"><span data-stu-id="79961-630">Use the `await`, or `Await` in Visual Basic, operator on the return value to return control to the current dispatcher.</span></span> <span data-ttu-id="79961-631">Используйте этот метод, если требуется предоставить возможность обработки событий, пока приложение выполняет большой объем работы в потоке пользовательского интерфейса приложения.</span><span class="sxs-lookup"><span data-stu-id="79961-631">Use this method if want to give your app a chance to process events while you app is doing a lot of work on the UI thread.</span></span> <span data-ttu-id="79961-632">Например можно использовать этот метод в цикле длительное время, который обновляет элемент управления.</span><span class="sxs-lookup"><span data-stu-id="79961-632">For example, you can use this method in a long-running loop that updates a control.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>