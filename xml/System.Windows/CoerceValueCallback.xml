<Type Name="CoerceValueCallback" FullName="System.Windows.CoerceValueCallback">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="edddfb39d197bb5c7d9ebb6e4c366a99eae21935" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate object CoerceValueCallback(DependencyObject d, object baseValue);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed CoerceValueCallback extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.CoerceValueCallback" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function CoerceValueCallback(d As DependencyObject, baseValue As Object) As Object " />
  <TypeSignature Language="C++ CLI" Value="public delegate System::Object ^ CoerceValueCallback(DependencyObject ^ d, System::Object ^ baseValue);" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="d" Type="System.Windows.DependencyObject" />
    <Parameter Name="baseValue" Type="System.Object" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Object</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="d">
      <span data-ttu-id="52468-101">Объект, содержащий свойство.</span>
      <span class="sxs-lookup">
        <span data-stu-id="52468-101">The object that the property exists on.</span>
      </span>
      <span data-ttu-id="52468-102">При вызове ответа, система свойств передает это значение.</span>
      <span class="sxs-lookup">
        <span data-stu-id="52468-102">When the callback is invoked, the property system will pass this value.</span>
      </span>
    </param>
    <param name="baseValue">
      <span data-ttu-id="52468-103">Новое значение свойства до применения операции запрета изменения значения.</span>
      <span class="sxs-lookup">
        <span data-stu-id="52468-103">The new value of the property, prior to any coercion attempt.</span>
      </span>
    </param>
    <summary>
      <span data-ttu-id="52468-104">Предоставляет шаблон для метода, вызываемого при оценке значения свойства зависимостей и запросе запрета изменения значения.</span>
      <span class="sxs-lookup">
        <span data-stu-id="52468-104">Provides a template for a method that is called whenever a dependency property value is being re-evaluated, or coercion is specifically requested.</span>
      </span>
    </summary>
    <returns>
      <span data-ttu-id="52468-105">Запрещенное значение (с соответствующим типом).</span>
      <span class="sxs-lookup">
        <span data-stu-id="52468-105">The coerced value (with appropriate type).</span>
      </span>
    </returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52468-106">На основе обратных вызовов <xref:System.Windows.CoerceValueCallback> можно назначить свойству зависимостей через несколькими способами.</span><span class="sxs-lookup"><span data-stu-id="52468-106">Callbacks based on <xref:System.Windows.CoerceValueCallback> can be assigned to a dependency property through several different techniques.</span></span> <span data-ttu-id="52468-107">Каждый из этих способов необходимо сначала создать объект метаданных свойств (<xref:System.Windows.PropertyMetadata>, или производного класса, такие как <xref:System.Windows.FrameworkPropertyMetadata>).</span><span class="sxs-lookup"><span data-stu-id="52468-107">Each of these techniques requires that you first create a new property metadata object (<xref:System.Windows.PropertyMetadata>, or a derived class such as <xref:System.Windows.FrameworkPropertyMetadata>).</span></span> <span data-ttu-id="52468-108">Создать объект метаданных, с помощью подписи конструктор, принимающий `coerceValueCallback` параметра и присвоить этому параметру обработчика ответа.</span><span class="sxs-lookup"><span data-stu-id="52468-108">Create the metadata object using a constructor signature that takes the `coerceValueCallback` parameter, and assign that parameter to your callback handler.</span></span> <span data-ttu-id="52468-109">Или создать метаданные любого подписями и набор <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> свойство до помещения метаданных используется.</span><span class="sxs-lookup"><span data-stu-id="52468-109">Or construct the metadata by any signature and set the <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> property prior to putting the metadata in use.</span></span>  
  
 <span data-ttu-id="52468-110">Если у вас есть эти метаданные, можно:</span><span class="sxs-lookup"><span data-stu-id="52468-110">When you have this metadata, you can:</span></span>  
  
-   <span data-ttu-id="52468-111">Определить новые свойства зависимостей для нового класса с помощью либо подпись <xref:System.Windows.DependencyProperty.Register%2A>, предоставляя метаданные как `typeMetadata` значение.</span><span class="sxs-lookup"><span data-stu-id="52468-111">Define a new dependency property on a new class, using either signature of  <xref:System.Windows.DependencyProperty.Register%2A>, giving the metadata as the `typeMetadata` value.</span></span>  
  
-   <span data-ttu-id="52468-112">Переопределить метаданные (вызов <xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29>) для существующего свойства зависимости, при наследовании от класса, которому принадлежит свойство зависимостей.</span><span class="sxs-lookup"><span data-stu-id="52468-112">Override the metadata (call <xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29>) for an existing dependency property, when you derive from the class that owns the dependency property.</span></span>  
  
-   <span data-ttu-id="52468-113">Добавление существующего свойства зависимостей в новую <xref:System.Windows.DependencyObject> класс с помощью новых метаданных путем вызова <xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29>.</span><span class="sxs-lookup"><span data-stu-id="52468-113">Add an existing dependency property to a new <xref:System.Windows.DependencyObject> class, using new metadata, by calling <xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29>.</span></span>  
  
 <span data-ttu-id="52468-114">Реализации данного ответа следует проверить значение `baseValue` и определить на основе значения или тип ли это значение, которое необходимо дополнительно привести.</span><span class="sxs-lookup"><span data-stu-id="52468-114">Implementations of this callback should check the value in `baseValue` and determine based on either the value or the type whether this is a value that needs to be further coerced.</span></span>  
  
 <span data-ttu-id="52468-115"><xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> Зависимость свойство вызывается каждый раз, когда в системе свойств или любой вызывающий объект вызывает <xref:System.Windows.DependencyObject.CoerceValue%2A> на <xref:System.Windows.DependencyObject> экземпляра с указанием идентификатора этого свойства как `dp`.</span><span class="sxs-lookup"><span data-stu-id="52468-115">The <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> for a dependency property is invoked any time that the property system or any other caller calls <xref:System.Windows.DependencyObject.CoerceValue%2A> on a <xref:System.Windows.DependencyObject> instance, specifying that property's identifier as the `dp`.</span></span>  
  
 <span data-ttu-id="52468-116">Изменения значения свойства может поступать любого из членов в системе свойств.</span><span class="sxs-lookup"><span data-stu-id="52468-116">Changes to the property value may have come from any possible participant in the property system.</span></span> <span data-ttu-id="52468-117">Это включает стили, изначальную, триггеры, наследование значения свойства и локальное значение параметра.</span><span class="sxs-lookup"><span data-stu-id="52468-117">This includes styles, generic invalidation, triggers, property value inheritance, and local value setting.</span></span>  
  
 <span data-ttu-id="52468-118">Обычно следует избегать, указание более одного <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> для любого заданного свойства зависимостей (переопределения или добавления с новыми метаданными для свойства зависимостей, уже <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>).</span><span class="sxs-lookup"><span data-stu-id="52468-118">Generally you should avoid specifying more than one <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> for any given dependency property (overriding or adding with new metadata for a dependency property that already had a <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>).</span></span> <span data-ttu-id="52468-119">Только одна из обратных вызовов будет действовать. Действующим ответом будет тем, которое было применено к наиболее производного класса в наследовании по сравнению с <xref:System.Windows.DependencyObject> вызывающего объекта.</span><span class="sxs-lookup"><span data-stu-id="52468-119">Only one of the callbacks will be able to act. The acting callback will be the one that was applied to the most derived class in the inheritance as compared to the <xref:System.Windows.DependencyObject> caller.</span></span> <span data-ttu-id="52468-120">При переопределении метаданных, заменяются других обратных вызовах, связанные с метаданными для свойства зависимостей, существовавшего выше в иерархии владельцев.</span><span class="sxs-lookup"><span data-stu-id="52468-120">Other callbacks as assigned to metadata for the dependency property as it existed higher in the owner hierarchy are replaced when the metadata is overridden.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="52468-121">Следующий пример содержит реализацию данного ответа для запрета хранимого значения свойства зависимостей, в зависимости от других входных данных, таких как значение другого свойства.</span><span class="sxs-lookup"><span data-stu-id="52468-121">The following example includes an implementation of this callback to coerce the stored value of a dependency property based on other inputs, such as another property's value.</span></span> <span data-ttu-id="52468-122">В этом случае проверяет обратный вызов ли `ShirtType` свойства соответствует типу элемента, содержащего кнопки; в этом случае он устанавливает начальный цвет по умолчанию для `ButtonColor`, если тип рубашка нет кнопок, приводит `ButtonColor` значение обратно в начальное значение, которое вызывает [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] (не показано) для удаления из эффективных выборов выпадающего меню.</span><span class="sxs-lookup"><span data-stu-id="52468-122">In this case, the callback checks to see whether the `ShirtType` property corresponds to a type of shirt that has buttons; if so it establishes a starting default color for the `ButtonColor`, if the shirt type has no buttons, it coerces the `ButtonColor` value back to a starting value, which causes the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] (not shown) to remove that dropdown from the effective choices.</span></span>  
  
 [!code-csharp[DPCustom#CoerceValueCallback](~/samples/snippets/csharp/VS_Snippets_Wpf/DPCustom/CSharp/default.xaml.cs#coercevaluecallback)]
 [!code-vb[DPCustom#CoerceValueCallback](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPCustom/visualbasic/default.xaml.vb#coercevaluecallback)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyProperty" />
  </Docs>
</Type>