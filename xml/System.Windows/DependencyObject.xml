<Type Name="DependencyObject" FullName="System.Windows.DependencyObject">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="93e067f8bf97d79f7e4525a57db08a4a8d5109c2" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30680318" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DependencyObject : System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DependencyObject extends System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DependencyObject" />
  <TypeSignature Language="VB.NET" Value="Public Class DependencyObject&#xA;Inherits DispatcherObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class DependencyObject : System::Windows::Threading::DispatcherObject" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Threading.DispatcherObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeDescriptionProvider(typeof(MS.Internal.ComponentModel.DependencyObjectProvider))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.NameScopeProperty("NameScope", typeof(System.Windows.NameScope))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="9a514-101">Представляет объект, участвующий в системе свойств зависимостей.</span>
      <span class="sxs-lookup">
        <span data-stu-id="9a514-101">Represents an object that participates in the dependency property system.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a514-102"><xref:System.Windows.DependencyObject> Класса включает [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] служб системы свойств на многие производные классы.</span><span class="sxs-lookup"><span data-stu-id="9a514-102">The <xref:System.Windows.DependencyObject> class enables [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] property system services on its many derived classes.</span></span>  
  
 <span data-ttu-id="9a514-103">Основной функцией системы свойств является вычисление значений свойств и Системное уведомление о значениях, которые были изменены.</span><span class="sxs-lookup"><span data-stu-id="9a514-103">The property system's primary function is to compute the values of properties, and to provide system notification about values that have changed.</span></span> <span data-ttu-id="9a514-104">Является другим классом ключа, который участвует в системе свойств <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="9a514-104">Another key class that participates in the property system is <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="9a514-105"><xref:System.Windows.DependencyProperty> включает регистрацию свойства зависимостей в системе свойств и обеспечивает идентификации и сведения о каждом свойстве зависимостей, а <xref:System.Windows.DependencyObject> как базовый класс позволяет объектам использовать свойства зависимостей.</span><span class="sxs-lookup"><span data-stu-id="9a514-105"><xref:System.Windows.DependencyProperty> enables the registration of dependency properties into the property system, and provides identification and information about each dependency property, whereas <xref:System.Windows.DependencyObject> as a base class enables objects to use the dependency properties.</span></span>  
  
 <span data-ttu-id="9a514-106"><xref:System.Windows.DependencyObject> службы и характеристики включают следующее:</span><span class="sxs-lookup"><span data-stu-id="9a514-106"><xref:System.Windows.DependencyObject> services and characteristics include the following:</span></span>  
  
-   <span data-ttu-id="9a514-107">Поддержка размещения свойств зависимостей.</span><span class="sxs-lookup"><span data-stu-id="9a514-107">Dependency property hosting support.</span></span> <span data-ttu-id="9a514-108">Зарегистрируйте свойство зависимостей, вызвав <xref:System.Windows.DependencyProperty.Register%2A> метод и сохранения возвращаемого значения метода как открытое статическое поле в классе.</span><span class="sxs-lookup"><span data-stu-id="9a514-108">You register a dependency property by calling the <xref:System.Windows.DependencyProperty.Register%2A> method, and storing the method's return value as a public static field in your class.</span></span>  
  
-   <span data-ttu-id="9a514-109">Поддержка размещения вложенных свойств.</span><span class="sxs-lookup"><span data-stu-id="9a514-109">Attached property hosting support.</span></span> <span data-ttu-id="9a514-110">Вложенное свойство зарегистрировать вызвав <xref:System.Windows.DependencyProperty.RegisterAttached%2A> метод и хранение возвращаемого значения метода в виде открытого статического поля только для чтения в классе.</span><span class="sxs-lookup"><span data-stu-id="9a514-110">You register an attached property by calling the <xref:System.Windows.DependencyProperty.RegisterAttached%2A> method, and storing the method's return value as a public static read-only field in your class.</span></span> <span data-ttu-id="9a514-111">(Также есть дополнительные требования к членам; Обратите внимание, что это значение представляет [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] реализации для вложенных свойств.</span><span class="sxs-lookup"><span data-stu-id="9a514-111">(There are also additional member requirements; note that this represents a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] specific implementation for attached properties.</span></span> <span data-ttu-id="9a514-112">Дополнительные сведения см. в разделе [зависимостей](~/docs/framework/wpf/advanced/attached-properties-overview.md).) Вложенное свойство затем может устанавливаться на любой класс, производный от <xref:System.Windows.DependencyObject>.</span><span class="sxs-lookup"><span data-stu-id="9a514-112">For details, see [Attached Properties Overview](~/docs/framework/wpf/advanced/attached-properties-overview.md).) Your attached property can then be set on any class that derives from <xref:System.Windows.DependencyObject>.</span></span>  
  
-   <span data-ttu-id="9a514-113">Get, set и очистить служебные методы для значения всех свойств зависимостей, которые существуют на <xref:System.Windows.DependencyObject>.</span><span class="sxs-lookup"><span data-stu-id="9a514-113">Get, set, and clear utility methods for values of any dependency properties that exist on the <xref:System.Windows.DependencyObject>.</span></span>  
  
-   <span data-ttu-id="9a514-114">Метаданные, приведение поддержка значения, изменения свойств уведомления и обратные вызовы переопределения для свойства зависимостей или присоединенного свойства.</span><span class="sxs-lookup"><span data-stu-id="9a514-114">Metadata, coerce value support, property changed notification, and override callbacks for  dependency properties or attached properties.</span></span> <span data-ttu-id="9a514-115">Кроме того <xref:System.Windows.DependencyObject> класс облегчает-владельцев метаданные свойства зависимостей.</span><span class="sxs-lookup"><span data-stu-id="9a514-115">Also, the <xref:System.Windows.DependencyObject> class facilitates the per-owner property metadata for a dependency property.</span></span>  
  
-   <span data-ttu-id="9a514-116">Общий базовый класс для классов, производных от <xref:System.Windows.ContentElement>, <xref:System.Windows.Freezable>, или <xref:System.Windows.Media.Visual>.</span><span class="sxs-lookup"><span data-stu-id="9a514-116">A common base class for classes derived from <xref:System.Windows.ContentElement>, <xref:System.Windows.Freezable>, or <xref:System.Windows.Media.Visual>.</span></span> <span data-ttu-id="9a514-117">(<xref:System.Windows.UIElement>, другой класс базового элемента содержит иерархию классов, которая включает <xref:System.Windows.Media.Visual>.)</span><span class="sxs-lookup"><span data-stu-id="9a514-117">(<xref:System.Windows.UIElement>, another base element class, has a class hierarchy that includes <xref:System.Windows.Media.Visual>.)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a514-118">Следующий пример является производным от <xref:System.Windows.DependencyObject> создать новый абстрактный класс.</span><span class="sxs-lookup"><span data-stu-id="9a514-118">The following example derives from <xref:System.Windows.DependencyObject> to create a new abstract class.</span></span> <span data-ttu-id="9a514-119">Затем класс регистрирует присоединенное свойство и включает в себя элементы поддержки для этого вложенного свойства.</span><span class="sxs-lookup"><span data-stu-id="9a514-119">The class then registers an attached property and includes support members for that attached property.</span></span>  
  
 [!code-csharp[WPFAquariumSln#DOMain](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#domain)]
 [!code-vb[WPFAquariumSln#DOMain](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#domain)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyProperty" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DependencyObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DependencyObject();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9a514-120">Инициализирует новый экземпляр класса <see cref="T:System.Windows.DependencyObject" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a514-120">Initializes a new instance of the <see cref="T:System.Windows.DependencyObject" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.DependencyProperty" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ClearValue">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9a514-121">Очищает локальное значение свойства.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a514-121">Clears the local value of a property.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ClearValue">
      <MemberSignature Language="C#" Value="public void ClearValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearValue (dp As DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="9a514-122">Очищаемое свойство зависимости, указанное объектной ссылкой <see cref="T:System.Windows.DependencyProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a514-122">The dependency property to be cleared, identified by a <see cref="T:System.Windows.DependencyProperty" /> object reference.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9a514-123">Очищает локальное значение свойства.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a514-123">Clears the local value of a property.</span>
          </span>
          <span data-ttu-id="9a514-124">Очищаемое свойство задается идентификатором <see cref="T:System.Windows.DependencyProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a514-124">The property to be cleared is specified by a <see cref="T:System.Windows.DependencyProperty" /> identifier.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a514-125">Очистка значения свойства путем вызова <xref:System.Windows.DependencyObject.ClearValue%2A> не дает обязательно свойства зависимостей значение по умолчанию, которая указана в метаданные свойства зависимостей.</span><span class="sxs-lookup"><span data-stu-id="9a514-125">Clearing the property value by calling <xref:System.Windows.DependencyObject.ClearValue%2A> does not necessarily give a dependency property the default value that is specified in the dependency property metadata.</span></span> <span data-ttu-id="9a514-126">Очистка свойства только очистку любого локального значения были применены.</span><span class="sxs-lookup"><span data-stu-id="9a514-126">Clearing the property only specifically clears whatever local value may have been applied.</span></span> <span data-ttu-id="9a514-127">Дополнительные сведения см. в разделе [Приоритет значений свойств зависимостей](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span><span class="sxs-lookup"><span data-stu-id="9a514-127">For more information, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a514-128">Следующий пример выполняет итерацию всех свойств, которые заданы локальные значения для объекта, затем вызывает метод <xref:System.Windows.DependencyObject.ClearValue%2A> удалить значения каждого из таких свойств.</span><span class="sxs-lookup"><span data-stu-id="9a514-128">The following example iterates all properties that have local values set on an object, then calls <xref:System.Windows.DependencyObject.ClearValue%2A> to clear the values of each such property.</span></span>  
  
 [!code-csharp[DPClearValue#IterateLocalValuesAndClear](~/samples/snippets/csharp/VS_Snippets_Wpf/DPClearValue/CSharp/default.xaml.cs#iteratelocalvaluesandclear)]
 [!code-vb[DPClearValue#IterateLocalValuesAndClear](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPClearValue/VisualBasic/default.xaml.vb#iteratelocalvaluesandclear)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="9a514-129">Пытается вызвать метод <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" /> для запечатанного <see cref="T:System.Windows.DependencyObject" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a514-129">Attempted to call <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" /> on a sealed <see cref="T:System.Windows.DependencyObject" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)" />
        <altmember cref="P:System.Windows.DependencyObject.IsSealed" />
        <altmember cref="T:System.Windows.DependencyProperty" />
      </Docs>
    </Member>
    <Member MemberName="ClearValue">
      <MemberSignature Language="C#" Value="public void ClearValue (System.Windows.DependencyPropertyKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearValue(class System.Windows.DependencyPropertyKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearValue (key As DependencyPropertyKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearValue(System::Windows::DependencyPropertyKey ^ key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Windows.DependencyPropertyKey" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="9a514-130">Ключ очищаемого свойства зависимостей.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a514-130">The key for the dependency property to be cleared.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9a514-131">Очищает локальное значение доступного только для чтения свойства.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a514-131">Clears the local value of a read-only property.</span>
          </span>
          <span data-ttu-id="9a514-132">Очищаемое свойство задается объектом <see cref="T:System.Windows.DependencyPropertyKey" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a514-132">The property to be cleared is specified by a <see cref="T:System.Windows.DependencyPropertyKey" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a514-133">Объект <xref:System.Windows.DependencyPropertyKey> идентифицирует свойство зависимостей только для чтения для операций системы свойств.</span><span class="sxs-lookup"><span data-stu-id="9a514-133">A <xref:System.Windows.DependencyPropertyKey> identifies a read-only dependency property for property system operations.</span></span> <span data-ttu-id="9a514-134">Классы, определяющие свойства зависимости только для чтения, не должны предоставлять этот ключ в открытый доступ.</span><span class="sxs-lookup"><span data-stu-id="9a514-134">Classes that define read-only dependency properties should not expose this key with public access.</span></span> <span data-ttu-id="9a514-135">Открытый ключ будет обеспечивают передачу открытого кода, инвертировано символов только для чтения свойства, если такие методы, как <xref:System.Windows.DependencyObject.ClearValue%2A> или <xref:System.Windows.DependencyObject.SetValue%2A> можно вызвать вне класса или сборки, ссылающиеся на ключ.</span><span class="sxs-lookup"><span data-stu-id="9a514-135">A publicly exposed key would provide a public code pathway that negated the read-only character of the property, if methods such as <xref:System.Windows.DependencyObject.ClearValue%2A> or <xref:System.Windows.DependencyObject.SetValue%2A> could be called outside the class or assembly, referencing the key.</span></span>  
  
 <span data-ttu-id="9a514-136">Очистка значения свойства путем вызова <xref:System.Windows.DependencyObject.ClearValue%2A> не дает обязательно свойства зависимостей значение по умолчанию, которая указана в метаданные свойства зависимостей.</span><span class="sxs-lookup"><span data-stu-id="9a514-136">Clearing the property value by calling <xref:System.Windows.DependencyObject.ClearValue%2A> does not necessarily give a dependency property the default value that is specified in the dependency property metadata.</span></span> <span data-ttu-id="9a514-137">Очистка значения только очистку любого локального значения были применены.</span><span class="sxs-lookup"><span data-stu-id="9a514-137">Clearing the value only specifically clears whatever local value may have been applied.</span></span> <span data-ttu-id="9a514-138">Дополнительные сведения см. в разделе [Приоритет значений свойств зависимостей](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span><span class="sxs-lookup"><span data-stu-id="9a514-138">For more information, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="9a514-139">Пытается вызвать метод <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" /> для запечатанного <see cref="T:System.Windows.DependencyObject" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a514-139">Attempted to call <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" /> on a sealed <see cref="T:System.Windows.DependencyObject" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)" />
        <altmember cref="T:System.Windows.DependencyPropertyKey" />
      </Docs>
    </Member>
    <Member MemberName="CoerceValue">
      <MemberSignature Language="C#" Value="public void CoerceValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CoerceValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CoerceValue (dp As DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CoerceValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="9a514-140">Идентификатор приводимого свойства зависимостей.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a514-140">The identifier for the dependency property to coerce.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9a514-141">Приводит значение указанного свойства зависимостей.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a514-141">Coerces the value of the specified dependency property.</span>
          </span>
          <span data-ttu-id="9a514-142">Это осуществляется путем вызова какой-либо функции <see cref="T:System.Windows.CoerceValueCallback" />, указанной в метаданных свойства зависимостей, которое существует в вызывающем объекте <see cref="T:System.Windows.DependencyObject" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a514-142">This is accomplished by invoking any <see cref="T:System.Windows.CoerceValueCallback" /> function specified in property metadata for the dependency property as it exists on the calling <see cref="T:System.Windows.DependencyObject" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a514-143">Помимо явно, вызываемому посредством вызова метода <xref:System.Windows.DependencyObject.CoerceValue%2A>, <xref:System.Windows.CoerceValueCallback> зависимости свойства также вызывается внутренне всякий раз, когда значение свойства зависимостей повторно вычисляется по [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] системы свойств.</span><span class="sxs-lookup"><span data-stu-id="9a514-143">In addition to being explicitly invoked through calling <xref:System.Windows.DependencyObject.CoerceValue%2A>, the <xref:System.Windows.CoerceValueCallback> for a dependency property is also invoked internally whenever the dependency property value is being re-evaluated by the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system.</span></span>  
  
 <span data-ttu-id="9a514-144">При вызове <xref:System.Windows.DependencyObject.CoerceValue%2A> метода, в конечном итоге вызываются принудительного обратного вызова значения для свойства, которое можно указать.</span><span class="sxs-lookup"><span data-stu-id="9a514-144">When you invoke the <xref:System.Windows.DependencyObject.CoerceValue%2A> method, you are ultimately invoking the coerce value callback for the property that you specify.</span></span> <span data-ttu-id="9a514-145">Обычно будет вызывать <xref:System.Windows.DependencyObject.CoerceValue%2A> только в том случае, если известно, что существует принудительного обратного вызова значения и если вы знаете критерии обратного вызова для приведения.</span><span class="sxs-lookup"><span data-stu-id="9a514-145">Typically you will invoke <xref:System.Windows.DependencyObject.CoerceValue%2A> only if you know that a coerce value callback exists, and if you know the callback's criteria for coercion.</span></span>  
  
 <span data-ttu-id="9a514-146">Наиболее распространенным сценарием для вызова <xref:System.Windows.DependencyObject.CoerceValue%2A> находится в пределах класса или свойства обработки изменений обратные вызовы из связанных свойств, которые влияют друг друга значения в виде зависимые.</span><span class="sxs-lookup"><span data-stu-id="9a514-146">The most common scenario for calling <xref:System.Windows.DependencyObject.CoerceValue%2A> is within class handling or property change callbacks of related properties that influence each other's values in a dependent way.</span></span> <span data-ttu-id="9a514-147">Дополнительные сведения см. в разделе [Проверка и обратные вызовы свойства зависимостей](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span><span class="sxs-lookup"><span data-stu-id="9a514-147">For more information, see [Dependency Property Callbacks and Validation](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a514-148">В следующем примере вызывается <xref:System.Windows.DependencyObject.CoerceValue%2A> в <xref:System.Windows.PropertyChangedCallback> реализацию, которая используется в качестве <xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A> для свойств различных зависимостей в том же классе.</span><span class="sxs-lookup"><span data-stu-id="9a514-148">The following example calls <xref:System.Windows.DependencyObject.CoerceValue%2A> within a <xref:System.Windows.PropertyChangedCallback> implementation that is used as the <xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A> for a different dependency properties on the same class.</span></span> <span data-ttu-id="9a514-149">Это распространенный подход для внедрения истинных зависимостей значений между свойствами зависимости.</span><span class="sxs-lookup"><span data-stu-id="9a514-149">This is a common pattern for introducing true value dependencies between dependency properties.</span></span>  
  
 [!code-csharp[DPCallbackOverride#OnPCCurrent](~/samples/snippets/csharp/VS_Snippets_Wpf/DPCallbackOverride/CSharp/SDKSampleLibrary/class1.cs#onpccurrent)]
 [!code-vb[DPCallbackOverride#OnPCCurrent](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPCallbackOverride/visualbasic/sdksamplelibrary/class1.vb#onpccurrent)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="9a514-150">Указанный параметр <paramref name="dp" /> или его значение недопустимы, или их не существует.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a514-150">The specified <paramref name="dp" /> or its value were invalid or do not exist.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.CoerceValueCallback" />
        <altmember cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="DependencyObjectType">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyObjectType DependencyObjectType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyObjectType DependencyObjectType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyObject.DependencyObjectType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DependencyObjectType As DependencyObjectType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyObjectType ^ DependencyObjectType { System::Windows::DependencyObjectType ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObjectType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a514-151">Возвращает <see cref="T:System.Windows.DependencyObjectType" />, который создает обертку для типа [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] данного экземпляра.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a514-151">Gets the <see cref="T:System.Windows.DependencyObjectType" /> that wraps the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] type of this instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9a514-152">
            <see cref="T:System.Windows.DependencyObjectType" />, который создает обертку для типа [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] данного экземпляра.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a514-152">A <see cref="T:System.Windows.DependencyObjectType" /> that wraps the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] type of this instance.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a514-153">Это свойство полезно, если объект, возвращаемый из метода имеет тип возвращаемого значения <xref:System.Windows.DependencyObject> и требуется для выполнения операций системы свойств определенного на нем в зависимости от его типа.</span><span class="sxs-lookup"><span data-stu-id="9a514-153">This property is useful if an object that is returned from a method has a return value type of <xref:System.Windows.DependencyObject> and you want to perform property system specific operations on it depending on its type.</span></span> <span data-ttu-id="9a514-154">Например эффективнее вызывать <xref:System.Windows.DependencyProperty.GetMetadata%28System.Windows.DependencyObjectType%29> с помощью <xref:System.Windows.DependencyObjectType> вместо [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] типа.</span><span class="sxs-lookup"><span data-stu-id="9a514-154">For example it is more efficient to call <xref:System.Windows.DependencyProperty.GetMetadata%28System.Windows.DependencyObjectType%29> using the <xref:System.Windows.DependencyObjectType> rather than the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] type.</span></span> <span data-ttu-id="9a514-155"><xref:System.Windows.DependencyObjectType> обеспечивает более быстрый поиск.</span><span class="sxs-lookup"><span data-stu-id="9a514-155"><xref:System.Windows.DependencyObjectType> facilitates faster lookup.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a514-156">В следующем примере псевдокода `MySubClass` можно предвидеть, что дополнительные производные классы могут изменить значение по умолчанию `MyCustom` свойства зависимостей.</span><span class="sxs-lookup"><span data-stu-id="9a514-156">In the following pseudocode example, `MySubClass` anticipates that additional derived classes might change the default value of the `MyCustom` dependency property.</span></span> <span data-ttu-id="9a514-157">Класс реализует конструктор по умолчанию, можно определить фактическое производного класса, используя преимущества полиморфизма <xref:System.Windows.DependencyObjectType> значение всякий раз, когда этот конструктор используется в качестве средства создания экземпляров производного класса.</span><span class="sxs-lookup"><span data-stu-id="9a514-157">The class implements a default constructor that can determine the actual derived class by taking advantage of polymorphism on the <xref:System.Windows.DependencyObjectType> value whenever that constructor is used as a derived class instantiator.</span></span>  
  
 `public DOClass() : base()`  
  
 `{`  
  
 `__customPropertyCache = (CustomDP)`  
  
 `CustomDPProperty.GetMetadata(DependencyObjectType).DefaultValue;`  
  
 `}`  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.GetMetadata(System.Type)" />
        <altmember cref="T:System.Windows.DependencyObjectType" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override sealed bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="9a514-158">
            <see cref="T:System.Windows.DependencyObject" /> для сравнения с текущим экземпляром.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a514-158">The <see cref="T:System.Windows.DependencyObject" /> to compare to the current instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9a514-159">Определяет, является ли указанный <see cref="T:System.Windows.DependencyObject" /> эквивалентом текущего <see cref="T:System.Windows.DependencyObject" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a514-159">Determines whether a provided <see cref="T:System.Windows.DependencyObject" /> is equivalent to the current <see cref="T:System.Windows.DependencyObject" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9a514-160">
            <see langword="true" />, если два экземпляра одинаковы; в противном случае — <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a514-160">
              <see langword="true" /> if the two instances are the same; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a514-161">Данная реализация учитывает только равенство ссылок и не пытается вычислить равенство свойств.</span><span class="sxs-lookup"><span data-stu-id="9a514-161">This implementation is reference equality only, and does not attempt to evaluate value equality of the contained properties.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="9a514-162">
              <see cref="T:System.Windows.DependencyObject" /> переопределяет и затем запечатывает два basic <see cref="T:System.Object" /> методы: <see cref="M:System.Windows.DependencyObject.Equals(System.Object)" /> и <see cref="M:System.Windows.DependencyObject.GetHashCode" />.</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a514-162">
                <see cref="T:System.Windows.DependencyObject" /> overrides and then seals two basic <see cref="T:System.Object" /> methods: <see cref="M:System.Windows.DependencyObject.Equals(System.Object)" /> and <see cref="M:System.Windows.DependencyObject.GetHashCode" />.</span>
            </span>
            <span data-ttu-id="9a514-163">Вызов переопределения <see cref="T:System.Object" /> реализаций, что приводит к поведению равенства объектов.</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a514-163">The overrides call the <see cref="T:System.Object" /> implementations, resulting in an object equality behavior.</span>
            </span>
            <span data-ttu-id="9a514-164">Эти намеренных переопределений предназначена для предотвращения попыток для определения равенства значений для производных классов <see cref="T:System.Windows.DependencyObject" />.</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a514-164">The purpose of these deliberate overrides is to prevent derived classes from trying to define a value equality for a <see cref="T:System.Windows.DependencyObject" />.</span>
            </span>
            <span data-ttu-id="9a514-165">Значение равенства для <see cref="T:System.Windows.DependencyObject" /> никогда не будут точными из-за исходному направлению свойство изменение значение возможности <see cref="T:System.Windows.DependencyObject" /> и его свойств зависимостей.</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a514-165">Value equalities for <see cref="T:System.Windows.DependencyObject" /> will never be accurate because of the innate property value-changing capabilities of a <see cref="T:System.Windows.DependencyObject" /> and its dependency properties.</span>
            </span>
            <span data-ttu-id="9a514-166">Сюда входят основные [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] функции, такие как привязка данных и [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] системы свойств.</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a514-166">This includes fundamental [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] features such as data binding and the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override sealed int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9a514-167">Возвращает хэш-код для данного объекта <see cref="T:System.Windows.DependencyObject" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a514-167">Gets a hash code for this <see cref="T:System.Windows.DependencyObject" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9a514-168">Подписанный хэш-код в виде 32-разрядного целого числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a514-168">A signed 32-bit integer hash code.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="9a514-169">
              <see cref="T:System.Windows.DependencyObject" /> переопределяет и затем запечатывает два <see cref="T:System.Object" /> методы: <see cref="M:System.Windows.DependencyObject.Equals(System.Object)" /> и <see cref="M:System.Windows.DependencyObject.GetHashCode" />.</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a514-169">
                <see cref="T:System.Windows.DependencyObject" /> overrides and then seals two <see cref="T:System.Object" /> methods: <see cref="M:System.Windows.DependencyObject.Equals(System.Object)" /> and <see cref="M:System.Windows.DependencyObject.GetHashCode" />.</span>
            </span>
            <span data-ttu-id="9a514-170">Вызов переопределения <see cref="T:System.Object" /> реализаций, что приводит к поведению равенства объектов.</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a514-170">The overrides call the <see cref="T:System.Object" /> implementations, resulting in an object equality behavior.</span>
            </span>
            <span data-ttu-id="9a514-171">Эти намеренных переопределений предназначена для предотвращения попыток для определения равенства значений для производных классов <see cref="T:System.Windows.DependencyObject" />.</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a514-171">The purpose of these deliberate overrides is to prevent derived classes from trying to define a value equality for a <see cref="T:System.Windows.DependencyObject" />.</span>
            </span>
            <span data-ttu-id="9a514-172">Значение равенства для <see cref="T:System.Windows.DependencyObject" /> никогда не будут точными из-за исходному направлению свойство изменение значение возможности <see cref="T:System.Windows.DependencyObject" /> и его свойств зависимостей.</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a514-172">Value equalities for <see cref="T:System.Windows.DependencyObject" /> will never be accurate because of the innate property value-changing capabilities of a <see cref="T:System.Windows.DependencyObject" /> and its dependency properties.</span>
            </span>
            <span data-ttu-id="9a514-173">Сюда входят основные [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] функции, такие как привязка данных и [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] системы свойств.</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a514-173">This includes fundamental [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] features such as data binding and the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetLocalValueEnumerator">
      <MemberSignature Language="C#" Value="public System.Windows.LocalValueEnumerator GetLocalValueEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.LocalValueEnumerator GetLocalValueEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.GetLocalValueEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLocalValueEnumerator () As LocalValueEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::LocalValueEnumerator GetLocalValueEnumerator();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.LocalValueEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9a514-174">Создает специализированный перечислитель для определения свойств зависимостей, которые локально установили значения для данного <see cref="T:System.Windows.DependencyObject" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a514-174">Creates a specialized enumerator for determining which dependency properties have locally set values on this <see cref="T:System.Windows.DependencyObject" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9a514-175">Специализированный перечислитель локальных значений.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a514-175">A specialized local value enumerator.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a514-176">Объект *локальное значение* имеет любое значение свойства зависимостей, заданное <xref:System.Windows.DependencyObject.SetValue%2A>, в отличие от других аспектов системы свойств.</span><span class="sxs-lookup"><span data-stu-id="9a514-176">A *local value* is any dependency property value that was set by <xref:System.Windows.DependencyObject.SetValue%2A>, as opposed to other aspects of the property system.</span></span>  
  
 <span data-ttu-id="9a514-177"><xref:System.Windows.LocalValueEnumerator> Получается вызовом <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> можно использовать для перечисления свойств, имеющих локально заданное значение в <xref:System.Windows.DependencyObject> экземпляра.</span><span class="sxs-lookup"><span data-stu-id="9a514-177">The <xref:System.Windows.LocalValueEnumerator> obtained by calling <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> can be used to enumerate properties that have a locally set value on a <xref:System.Windows.DependencyObject> instance.</span></span> <span data-ttu-id="9a514-178">Каждый из таких свойств представляется в перечислителе с циклом по <xref:System.Windows.LocalValueEntry> object, который содержит свойства, которые ссылаются на конкретные <xref:System.Windows.DependencyProperty> и его значения.</span><span class="sxs-lookup"><span data-stu-id="9a514-178">Each such property is represented in the enumerator by a <xref:System.Windows.LocalValueEntry> object, which has properties that reference the specific <xref:System.Windows.DependencyProperty> and its values.</span></span> <span data-ttu-id="9a514-179">Этот прием перечисления локально заданного значения могут использоваться для оптимизации или другой обработки локальных значений, например, чтобы определить, какие значения свойств <xref:System.Windows.DependencyObject> изменится, если они были очищены.</span><span class="sxs-lookup"><span data-stu-id="9a514-179">This technique of enumerating over the locally set values can be used for optimization or for other handling of local values, such as to determine which property values of a <xref:System.Windows.DependencyObject> would change if they were cleared.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9a514-180">Возвращенный <xref:System.Windows.LocalValueEnumerator> может содержать <xref:System.Windows.LocalValueEntry> записей для свойства зависимостей, которые доступны только для чтения или свойств зависимостей, где значения вычисляются системой свойств.</span><span class="sxs-lookup"><span data-stu-id="9a514-180">The returned <xref:System.Windows.LocalValueEnumerator> might contain <xref:System.Windows.LocalValueEntry> records for dependency properties that are read-only, or dependency properties where values are calculated by the property system.</span></span> <span data-ttu-id="9a514-181">Например, элемент visual framework, который имеет установленное ширину через макета будет сообщать локальное значение для <xref:System.Windows.FrameworkElement.ActualWidth%2A>.</span><span class="sxs-lookup"><span data-stu-id="9a514-181">For example, a visual framework element that has an established width through layout will report a local value for <xref:System.Windows.FrameworkElement.ActualWidth%2A>.</span></span> <span data-ttu-id="9a514-182">Если вы получаете локальных значений для сброса, проверьте <xref:System.Windows.DependencyProperty.ReadOnly%2A> значение свойства содержит идентификатор каждого <xref:System.Windows.LocalValueEntry> и убедитесь, что <xref:System.Windows.DependencyProperty> рассматриваемой не только для чтения.</span><span class="sxs-lookup"><span data-stu-id="9a514-182">If you are getting local values in order to reset them, check the <xref:System.Windows.DependencyProperty.ReadOnly%2A> value on the property identifier of each <xref:System.Windows.LocalValueEntry> to verify that the <xref:System.Windows.DependencyProperty> in question is not read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a514-183">Следующий пример выполняет итерацию всех свойств, которые заданы локальные значения для объекта, затем вызывает метод <xref:System.Windows.DependencyObject.ClearValue%2A> удалить значения каждого из таких свойств.</span><span class="sxs-lookup"><span data-stu-id="9a514-183">The following example iterates all properties that have local values set on an object, then calls <xref:System.Windows.DependencyObject.ClearValue%2A> to clear the values of each such property.</span></span>  
  
 [!code-csharp[DPClearValue#IterateLocalValuesAndClear](~/samples/snippets/csharp/VS_Snippets_Wpf/DPClearValue/CSharp/default.xaml.cs#iteratelocalvaluesandclear)]
 [!code-vb[DPClearValue#IterateLocalValuesAndClear](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPClearValue/VisualBasic/default.xaml.vb#iteratelocalvaluesandclear)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.LocalValueEntry" />
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public object GetValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetValue (dp As DependencyProperty) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="9a514-184">Идентификатор <see cref="T:System.Windows.DependencyProperty" /> свойства, из которого извлекается значение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a514-184">The <see cref="T:System.Windows.DependencyProperty" /> identifier of the property to retrieve the value for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9a514-185">Возвращает текущее действующее значение свойства зависимостей в этом экземпляре <see cref="T:System.Windows.DependencyObject" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a514-185">Returns the current effective value of a dependency property on this instance of a <see cref="T:System.Windows.DependencyObject" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9a514-186">Возвращает текущее действующее значение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a514-186">Returns the current effective value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a514-187">*Действительное значение* является значением свойства, которое возвращается системой свойств любому вызывающему объекту, запрашивающему значение.</span><span class="sxs-lookup"><span data-stu-id="9a514-187">The *effective value* is the value of the property that is returned by the property system to any caller that is requesting the value.</span></span> <span data-ttu-id="9a514-188">Действительное значение является результатом вычисления всех возможных входных значений, участвующих в приоритет значений свойств системы системой свойств.</span><span class="sxs-lookup"><span data-stu-id="9a514-188">The effective value is the result of the property system having evaluated all the possible inputs that participate in the property system value precedence.</span></span> <span data-ttu-id="9a514-189">Это включает приведение и анимация.</span><span class="sxs-lookup"><span data-stu-id="9a514-189">This includes coercion and animation.</span></span> <span data-ttu-id="9a514-190">Дополнительные сведения см. в разделе [Приоритет значений свойств зависимостей](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span><span class="sxs-lookup"><span data-stu-id="9a514-190">For more information, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
 <span data-ttu-id="9a514-191">Этот метод никогда не возвращает <xref:System.Windows.DependencyProperty.UnsetValue>.</span><span class="sxs-lookup"><span data-stu-id="9a514-191">This method will never return <xref:System.Windows.DependencyProperty.UnsetValue>.</span></span> <span data-ttu-id="9a514-192"><xref:System.Windows.DependencyProperty.UnsetValue> Является контрольного значения для системы свойств, который используется в различных емкости внутренне и иногда также предоставляются через обратные вызовы приведение.</span><span class="sxs-lookup"><span data-stu-id="9a514-192">The <xref:System.Windows.DependencyProperty.UnsetValue> is a sentinel value for the property system that is used in various capacities internally and occasionally also exposed through coercion callbacks.</span></span>  
  
 <span data-ttu-id="9a514-193">Если вы не уверены, тип свойства, которое должно быть, можно запросить идентификатор запрошенного свойства зависимостей, чтобы определить, является ли более конкретного <xref:System.Windows.DependencyProperty.PropertyType%2A> , возвращаемое значение преобразуется.</span><span class="sxs-lookup"><span data-stu-id="9a514-193">If you are not sure what the property's type should be, you can query the identifier of the requested dependency property to determine whether there is a more specific <xref:System.Windows.DependencyProperty.PropertyType%2A> that the return value can be converted to.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="9a514-194">Указанный параметр <paramref name="dp" /> или его значение были недопустимы, или указанного параметра <paramref name="dp" /> не существует.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a514-194">The specified <paramref name="dp" /> or its value was invalid, or the specified <paramref name="dp" /> does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)" />
        <altmember cref="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="InvalidateProperty">
      <MemberSignature Language="C#" Value="public void InvalidateProperty (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateProperty(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateProperty (dp As DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateProperty(System::Windows::DependencyProperty ^ dp);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="9a514-195">Идентификатор <see cref="T:System.Windows.DependencyProperty" /> свойства, которое следует сделать недействительным.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a514-195">The <see cref="T:System.Windows.DependencyProperty" /> identifier of the property to invalidate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9a514-196">Повторно вычисляет действующее значение для указанного свойства зависимостей</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a514-196">Re-evaluates the effective value for the specified dependency property</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a514-197">При вызове <xref:System.Windows.DependencyObject.InvalidateProperty%2A>, все связанные и является применимым <xref:System.Windows.CoerceValueCallback> или <xref:System.Windows.PropertyChangedCallback> функции, зарегистрированные для этого свойства зависимости может быть вызван.</span><span class="sxs-lookup"><span data-stu-id="9a514-197">When you call <xref:System.Windows.DependencyObject.InvalidateProperty%2A>, any associated and applicable <xref:System.Windows.CoerceValueCallback> or <xref:System.Windows.PropertyChangedCallback> functions registered for that dependency property might be invoked.</span></span>  
  
 <span data-ttu-id="9a514-198">Вызов <xref:System.Windows.DependencyObject.InvalidateProperty%2A> для свойства, которое у локального значение не будет действовать, так как локальное значение имеет приоритет над входных данных системы другие свойства, за исключением анимации.</span><span class="sxs-lookup"><span data-stu-id="9a514-198">Calling <xref:System.Windows.DependencyObject.InvalidateProperty%2A> on a property that has its local value set will have no effect, because the local value takes precedence over other property system inputs, except for animations.</span></span> <span data-ttu-id="9a514-199">Тем не менее, может вызвать <xref:System.Windows.DependencyObject.ClearValue%2A>, затем вызовите <xref:System.Windows.DependencyObject.InvalidateProperty%2A>.</span><span class="sxs-lookup"><span data-stu-id="9a514-199">However, you could call <xref:System.Windows.DependencyObject.ClearValue%2A>, then call <xref:System.Windows.DependencyObject.InvalidateProperty%2A>.</span></span> <span data-ttu-id="9a514-200">Дополнительные сведения см. в разделе [Приоритет значений свойств зависимостей](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span><span class="sxs-lookup"><span data-stu-id="9a514-200">For more information, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
 <span data-ttu-id="9a514-201">Вызов <xref:System.Windows.DependencyObject.InvalidateProperty%2A> может быть неприменимо для многих сценариев свойств зависимостей.</span><span class="sxs-lookup"><span data-stu-id="9a514-201">Calling <xref:System.Windows.DependencyObject.InvalidateProperty%2A> is not necessarily applicable for many dependency property scenarios.</span></span> <span data-ttu-id="9a514-202">Если свойство зависимостей станет недействительным из-за изменения значений в любом из компонентов, в системе свойств делает недействительными и повторно автоматически проверяет свойство зависимостей.</span><span class="sxs-lookup"><span data-stu-id="9a514-202">If a dependency property becomes invalidated because of value changes in any of the constituents, the property system invalidates and re-evaluates the dependency property automatically.</span></span> <span data-ttu-id="9a514-203">Тем не менее, все еще существуют некоторые подходящие сценарии где <xref:System.Windows.DependencyObject.InvalidateProperty%2A> полезно.</span><span class="sxs-lookup"><span data-stu-id="9a514-203">However, there are still some appropriate scenarios where <xref:System.Windows.DependencyObject.InvalidateProperty%2A> is useful.</span></span> <span data-ttu-id="9a514-204">В частности, можно использовать <xref:System.Windows.DependencyObject.InvalidateProperty%2A> внутри приведенное значение или свойство изменено обратного вызова для свойства зависимостей в другой.</span><span class="sxs-lookup"><span data-stu-id="9a514-204">In particular, you can use <xref:System.Windows.DependencyObject.InvalidateProperty%2A> inside the coerce value or property changed callback for a different dependency property.</span></span> <span data-ttu-id="9a514-205">Можно также использовать <xref:System.Windows.DependencyObject.InvalidateProperty%2A> для принудительного повторное вычисление привязки к источнику данных, который не может реализовать рекомендуемую <xref:System.ComponentModel.INotifyPropertyChanged> механизм уведомлений (возможно при использовании классов данных, не может быть производным от или где данными является статическим элемент).</span><span class="sxs-lookup"><span data-stu-id="9a514-205">You can also use <xref:System.Windows.DependencyObject.InvalidateProperty%2A> to force re-evaluation of a binding against a data source that is not able to implement the recommended <xref:System.ComponentModel.INotifyPropertyChanged> notification mechanism (perhaps if consuming data classes that cannot be derived from, or where the data is a static member).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a514-206">В следующем примере вызывается <xref:System.Windows.DependencyObject.InvalidateProperty%2A> на пользовательское свойство, каждый раз, когда свойства, которые участвуют в вычислениях недопустимое свойство изменить.</span><span class="sxs-lookup"><span data-stu-id="9a514-206">The following example calls <xref:System.Windows.DependencyObject.InvalidateProperty%2A> on a custom property, whenever properties that are involved in the invalidated property's calculations change.</span></span> <span data-ttu-id="9a514-207">Это альтернативный способ вызова <xref:System.Windows.DependencyObject.CoerceValue%2A> метод, так как делает недействительными свойство будет также вызвать любой зарегистрирован <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>.</span><span class="sxs-lookup"><span data-stu-id="9a514-207">This is an alternative technique to calling the <xref:System.Windows.DependencyObject.CoerceValue%2A> method, because invalidating the property will also call any registered <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#InvalidateProperty](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/SDKSampleLibrary/class1.cs#invalidateproperty)]
 [!code-vb[PropertySystemEsoterics#InvalidateProperty](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/sdksamplelibrary/class1.vb#invalidateproperty)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Windows.DependencyProperty.UnsetValue" />
      </Docs>
    </Member>
    <Member MemberName="IsSealed">
      <MemberSignature Language="C#" Value="public bool IsSealed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSealed" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyObject.IsSealed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSealed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSealed { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a514-208">Получает значение, указывающее, является ли этот экземпляр в данный момент запечатанным (доступным только для чтения).</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a514-208">Gets a value that indicates whether this instance is currently sealed (read-only).</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9a514-209">
            <see langword="true" />, если этот экземпляр запечатан; в противном случае — <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a514-209">
              <see langword="true" /> if this instance is sealed; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a514-210">Это значение внутренним образом.</span><span class="sxs-lookup"><span data-stu-id="9a514-210">This value is set internally.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.FrameworkElementFactory" />
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnPropertyChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPropertyChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPropertyChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPropertyChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="9a514-211">Данные события, в которых будет содержаться интересующий идентификатор свойства зависимостей, метаданные свойства для типа, а также старое и новое значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a514-211">Event data that will contain the dependency property identifier of interest, the property metadata for the type, and old and new values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9a514-212">Вызывается всякий раз при обновлении действующего значения какого-либо свойства зависимостей относительно данного элемента <see cref="T:System.Windows.DependencyObject" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a514-212">Invoked whenever the effective value of any dependency property on this <see cref="T:System.Windows.DependencyObject" /> has been updated.</span>
          </span>
          <span data-ttu-id="9a514-213">Конкретное измененное свойство зависимостей сообщается в данных события.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a514-213">The specific dependency property that changed is reported in the event data.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a514-214">Этот метод не предназначен для общего выявления изменений отдельных свойств или аннулирования свойств для каждого случая.</span><span class="sxs-lookup"><span data-stu-id="9a514-214">This method is not intended to generally detect individual property changes or perform invalidations of properties on a per-case basis.</span></span> <span data-ttu-id="9a514-215"><xref:System.Windows.DependencyObject.OnPropertyChanged%2A> Вместо него предназначено для изменения общего шаблона недействительности, если известна определенная информация о широких классификациях свойств.</span><span class="sxs-lookup"><span data-stu-id="9a514-215"><xref:System.Windows.DependencyObject.OnPropertyChanged%2A> is instead intended for modifications of the general invalidation pattern, if certain information is known about wide classifications of properties.</span></span> <span data-ttu-id="9a514-216">Например, изменения в <xref:System.Windows.Freezable> могут быть изменения в типы значений <xref:System.Windows.Freezable>, или могут быть вложенные свойства, в которых изменения в другие <xref:System.Windows.Freezable> ссылки.</span><span class="sxs-lookup"><span data-stu-id="9a514-216">For example, changes in a <xref:System.Windows.Freezable> might be changes in the value types of the <xref:System.Windows.Freezable>, or might be subproperties, where the changes are within other <xref:System.Windows.Freezable> references.</span></span> <span data-ttu-id="9a514-217"><xref:System.Windows.Freezable> Переопределить реализацию <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> использует внутренние сведения, чтобы определить, являются вложенными свойств и обеспечивает логику соответствующего базового класса для обоих случаях.</span><span class="sxs-lookup"><span data-stu-id="9a514-217">The <xref:System.Windows.Freezable> override implementation of <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> uses internal information to determine whether the properties are subproperties, and provides appropriate base class logic for either case.</span></span>  
  
 <span data-ttu-id="9a514-218"><xref:System.Windows.DependencyObject.OnPropertyChanged%2A> потенциально вызывается несколько раз за время существования объекта.</span><span class="sxs-lookup"><span data-stu-id="9a514-218"><xref:System.Windows.DependencyObject.OnPropertyChanged%2A> is potentially invoked many times during the life of an object.</span></span> <span data-ttu-id="9a514-219">Таким образом, можно улучшить производительность системы общее свойство, если переопределения метаданных свойств, а затем подключите <xref:System.Windows.CoerceValueCallback> или <xref:System.Windows.PropertyChangedCallback> функции для отдельных свойств.</span><span class="sxs-lookup"><span data-stu-id="9a514-219">Therefore, you can achieve better performance for the overall property system if you override the metadata of specific properties and then attach <xref:System.Windows.CoerceValueCallback> or <xref:System.Windows.PropertyChangedCallback> functions for individual properties.</span></span> <span data-ttu-id="9a514-220">Тем не менее, будет использовать этот метод, если <xref:System.Windows.DependencyObject> включает значительное количество свойств зависимостей с взаимосвязанными значениями, или если он содержит логику, например поведение отрисовки, необходимо повторно для нескольких связанных случаев недействительности свойств.</span><span class="sxs-lookup"><span data-stu-id="9a514-220">However, you would use this method if a <xref:System.Windows.DependencyObject> includes a significant number of value-interrelated dependency properties, or if it includes logic such as rendering behavior that must be rerun for several related cases of property invalidations.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="9a514-221">Всегда вызовите базовую реализацию.</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a514-221">Always call the base implementation.</span>
            </span>
            <span data-ttu-id="9a514-222">В противном случае значительно отключит всего [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] системы свойств, вызывая будут сообщены неверные значения.</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a514-222">Failure to do this will significantly disable the entire [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system, causing incorrect values to be reported.</span>
            </span>
          </para>
        </block>
        <altmember cref="T:System.Windows.FrameworkElement" />
      </Docs>
    </Member>
    <Member MemberName="ReadLocalValue">
      <MemberSignature Language="C#" Value="public object ReadLocalValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object ReadLocalValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadLocalValue (dp As DependencyProperty) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ ReadLocalValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="9a514-223">Идентификатор <see cref="T:System.Windows.DependencyProperty" /> свойства, из которого извлекается значение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a514-223">The <see cref="T:System.Windows.DependencyProperty" /> identifier of the property to retrieve the value for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9a514-224">Возвращает локальное значение свойства зависимостей, если оно существует.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a514-224">Returns the local value of a dependency property, if it exists.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9a514-225">Возвращает локальное значение, или значение-метку <see cref="F:System.Windows.DependencyProperty.UnsetValue" />, если локальное значение не задано.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a514-225">Returns the local value, or returns the sentinel value <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> if no local value is set.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a514-226">Следует использовать <xref:System.Windows.DependencyObject.GetValue%2A> для наиболее типичных операций «получить» для свойства зависимостей.</span><span class="sxs-lookup"><span data-stu-id="9a514-226">You should use <xref:System.Windows.DependencyObject.GetValue%2A> for most typical "get" operations for a dependency property.</span></span> <span data-ttu-id="9a514-227"><xref:System.Windows.DependencyObject.ReadLocalValue%2A> не возвращает действительное значение для различных ситуациях, где значение не было установлено локально.</span><span class="sxs-lookup"><span data-stu-id="9a514-227"><xref:System.Windows.DependencyObject.ReadLocalValue%2A> does not return the effective value for a variety of circumstances where the value was not locally set.</span></span>  
  
 <span data-ttu-id="9a514-228">Значения, заданные стили, темы, шаблоны, значение по умолчанию из метаданных или наследование значения свойства не считаются локальными.</span><span class="sxs-lookup"><span data-stu-id="9a514-228">Values that are set by styles, themes, templates, the default value from metadata, or property value inheritance are not considered to be local values.</span></span> <span data-ttu-id="9a514-229">Тем не менее привязки и другие выражения считаются локальными значениями, после их вычисления.</span><span class="sxs-lookup"><span data-stu-id="9a514-229">However, bindings and other expressions are considered to be local values, after they have been evaluated.</span></span>  
  
 <span data-ttu-id="9a514-230">Если локальное значение не задано, этот метод возвращает <xref:System.Windows.DependencyProperty.UnsetValue>.</span><span class="sxs-lookup"><span data-stu-id="9a514-230">When no local value is set, this method returns <xref:System.Windows.DependencyProperty.UnsetValue>.</span></span>  
  
 <span data-ttu-id="9a514-231">Если возвращаемое значение отличается от <xref:System.Windows.DependencyProperty.UnsetValue>, можно запросить метаданные запрошенного свойства зависимостей, чтобы определить, является ли более конкретный тип, возвращаемое значение преобразуется.</span><span class="sxs-lookup"><span data-stu-id="9a514-231">If the returned value is other than <xref:System.Windows.DependencyProperty.UnsetValue>, you can query the metadata of the requested dependency property to determine whether there is a more specific type that the return value can be converted to.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyObject.GetLocalValueEnumerator" />
        <altmember cref="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="SetCurrentValue">
      <MemberSignature Language="C#" Value="public void SetCurrentValue (System.Windows.DependencyProperty dp, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCurrentValue(class System.Windows.DependencyProperty dp, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCurrentValue (dp As DependencyProperty, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCurrentValue(System::Windows::DependencyProperty ^ dp, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="9a514-232">Идентификатор задаваемого свойства зависимостей.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a514-232">The identifier of the dependency property to set.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="9a514-233">Новое локальное значение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a514-233">The new local value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9a514-234">Задает значение свойства зависимостей, не изменяя источник значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a514-234">Sets the value of a dependency property without changing its value source.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a514-235">Этот метод используется компонентом, который программно задает значение одного из собственных свойств без отключения объявленного использование свойства приложения.</span><span class="sxs-lookup"><span data-stu-id="9a514-235">This method is used by a component that programmatically sets the value of one of its own properties without disabling an application's declared use of the property.</span></span> <span data-ttu-id="9a514-236"><xref:System.Windows.DependencyObject.SetCurrentValue%2A> Метод изменения действующего значения свойства, но существующие триггеры привязки данных и стили будут продолжать работать.</span><span class="sxs-lookup"><span data-stu-id="9a514-236">The <xref:System.Windows.DependencyObject.SetCurrentValue%2A> method changes the effective value of the property, but existing triggers, data bindings, and styles will continue to work.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="9a514-237">Попытка изменить доступное только для чтения свойство зависимостей, или свойство в запечатанном <see cref="T:System.Windows.DependencyObject" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a514-237">Attempted to modify a read-only dependency property, or a property on a sealed <see cref="T:System.Windows.DependencyObject" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9a514-238">
            <paramref name="value" /> не был корректным типом, зарегистрированным для свойства <paramref name="dp" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a514-238">
              <paramref name="value" /> was not the correct type as registered for the <paramref name="dp" /> property.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetValue">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9a514-239">Задает локальное значение свойства зависимостей, если оно существует.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a514-239">Sets the local value of a dependency property.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (System.Windows.DependencyProperty dp, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValue(class System.Windows.DependencyProperty dp, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (dp As DependencyProperty, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValue(System::Windows::DependencyProperty ^ dp, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="9a514-240">Идентификатор задаваемого свойства зависимостей.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a514-240">The identifier of the dependency property to set.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="9a514-241">Новое локальное значение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a514-241">The new local value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9a514-242">Задает локальное значение свойства зависимостей, определяемое идентификатором свойства зависимостей.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a514-242">Sets the local value of a dependency property, specified by its dependency property identifier.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a514-243">Если указанный тип не соответствует тип, объявленный для свойства зависимостей, как оно было изначально зарегистрировано, создается исключение.</span><span class="sxs-lookup"><span data-stu-id="9a514-243">If the provided type does not match the type that is declared for the dependency property as it was originally registered, an exception is thrown.</span></span> <span data-ttu-id="9a514-244">`value` Параметр всегда должны быть предоставлены как соответствующего типа.</span><span class="sxs-lookup"><span data-stu-id="9a514-244">The `value` parameter should always be provided as the appropriate type.</span></span>  
  
 <span data-ttu-id="9a514-245">Условия возникновения исключений потенциально влияет <xref:System.Windows.DependencyProperty.ValidateValueCallback%2A> обратный вызов, который существует на идентификатор свойства зависимостей устанавливаемое свойство зависимостей.</span><span class="sxs-lookup"><span data-stu-id="9a514-245">The exception conditions are potentially influenced by the <xref:System.Windows.DependencyProperty.ValidateValueCallback%2A> callback that exists on the dependency property identifier of the dependency property being set.</span></span> <span data-ttu-id="9a514-246">В противном случае указанное значение может не соответствовать Общие условия проверки типа (например, передача строки, когда собственный тип — Double).</span><span class="sxs-lookup"><span data-stu-id="9a514-246">Otherwise, the value provided might be failing general type-checking conditions (for example, passing a string when the native type is Double).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="9a514-247">Попытка изменить доступное только для чтения свойство зависимостей, или свойство в запечатанном <see cref="T:System.Windows.DependencyObject" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a514-247">Attempted to modify a read-only dependency property, or a property on a sealed <see cref="T:System.Windows.DependencyObject" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9a514-248">
            <paramref name="value" /> не был корректным типом, зарегистрированным для свойства <paramref name="dp" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a514-248">
              <paramref name="value" /> was not the correct type as registered for the <paramref name="dp" /> property.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (System.Windows.DependencyPropertyKey key, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValue(class System.Windows.DependencyPropertyKey key, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (key As DependencyPropertyKey, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValue(System::Windows::DependencyPropertyKey ^ key, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Windows.DependencyPropertyKey" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="9a514-249">Идентификатор <see cref="T:System.Windows.DependencyPropertyKey" /> задаваемого свойства.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a514-249">The <see cref="T:System.Windows.DependencyPropertyKey" /> identifier of the property to set.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="9a514-250">Новое локальное значение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a514-250">The new local value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9a514-251">Задает локальное значение свойства зависимости только для чтения, определяемое идентификатором <see cref="T:System.Windows.DependencyPropertyKey" /> свойства зависимостей.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a514-251">Sets the local value of a read-only dependency property, specified by the <see cref="T:System.Windows.DependencyPropertyKey" /> identifier of the dependency property.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a514-252">Эта подпись обычно используется при задании значений для свойства зависимостей только для чтения, которые определяются пользовательские классы.</span><span class="sxs-lookup"><span data-stu-id="9a514-252">This signature is generally used when you set values for read-only dependency properties that are defined by your custom classes.</span></span> <span data-ttu-id="9a514-253">Как правило <xref:System.Windows.DependencyObject.SetValue%2A> вызывается только из типа, которая зарегистрирована этого свойства зависимостей, который реализует внутренняя логика, которая предоставляет заданного значения для свойства зависимостей.</span><span class="sxs-lookup"><span data-stu-id="9a514-253">Generally, <xref:System.Windows.DependencyObject.SetValue%2A> is called only from the type that registered that dependency property, which implements the internal logic that provides the determined value for the dependency property.</span></span> <span data-ttu-id="9a514-254">Дополнительные сведения см. в разделе [Свойства зависимостей "только для чтения"](~/docs/framework/wpf/advanced/read-only-dependency-properties.md).</span><span class="sxs-lookup"><span data-stu-id="9a514-254">For more information, see [Read-Only Dependency Properties](~/docs/framework/wpf/advanced/read-only-dependency-properties.md).</span></span>  
  
 <span data-ttu-id="9a514-255">Если указанный тип не соответствует тип, объявленный для свойства зависимостей, как оно было изначально зарегистрировано, создается исключение.</span><span class="sxs-lookup"><span data-stu-id="9a514-255">If the provided type does not match the type that is declared for the dependency property as it was originally registered, an exception is thrown.</span></span> <span data-ttu-id="9a514-256">`value` Параметр всегда должны быть предоставлены как соответствующего типа.</span><span class="sxs-lookup"><span data-stu-id="9a514-256">The `value` parameter should always be provided as the appropriate type.</span></span> <span data-ttu-id="9a514-257">Условия возникновения исключений потенциально влияет <xref:System.Windows.DependencyProperty.ValidateValueCallback%2A> обратный вызов, который существует на идентификатор свойства зависимостей устанавливаемое свойство зависимостей.</span><span class="sxs-lookup"><span data-stu-id="9a514-257">The exception conditions are potentially influenced by the <xref:System.Windows.DependencyProperty.ValidateValueCallback%2A> callback that exists on the dependency property identifier of the dependency property being set.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a514-258">В следующем примере определяется свойство зависимостей только для чтения, вместе с `public static readonly` <xref:System.Windows.DependencyProperty> , предоставляющий необходимые уязвимость только для чтения к потребителям свойство и метод доступа get для [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] программы-оболочки.</span><span class="sxs-lookup"><span data-stu-id="9a514-258">The following example defines a read-only dependency property, along with a `public static readonly` <xref:System.Windows.DependencyProperty> that provides necessary read-only exposure to property consumers, and the get accessor for the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] wrapper.</span></span>  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeProperty">
      <MemberSignature Language="C#" Value="protected internal virtual bool ShouldSerializeProperty (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool ShouldSerializeProperty(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function ShouldSerializeProperty (dp As DependencyProperty) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual bool ShouldSerializeProperty(System::Windows::DependencyProperty ^ dp);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="9a514-259">Идентификатор для сериализуемого свойства зависимостей.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a514-259">The identifier for the dependency property that should be serialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9a514-260">Возвращает значение, указывающее, должны ли процессы сериализации сериализовать значение предоставленного свойства зависимостей.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a514-260">Returns a value that indicates whether serialization processes should serialize the value for the provided dependency property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9a514-261">
            <see langword="true" />, если значение переданного свойства зависимостей следует сериализовать; в противном случае — <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a514-261">
              <see langword="true" /> if the dependency property that is supplied should be value-serialized; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a514-262">Реализация по умолчанию возвращает `true` во всех случаях, когда свойство зависимостей было установлено на локальное значение <xref:System.Windows.DependencyObject>.</span><span class="sxs-lookup"><span data-stu-id="9a514-262">The default implementation returns `true` for all cases in which a dependency property had a local value established on the <xref:System.Windows.DependencyObject>.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="9a514-263">Переопределения этого метода могут по-разному обрабатывать особые свойства зависимостей.</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a514-263">Overrides for this method might handle specific dependency properties differently.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>