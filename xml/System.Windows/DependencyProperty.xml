<Type Name="DependencyProperty" FullName="System.Windows.DependencyProperty">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3e36dd257b906b7c94742536f4e333ac2cac8cd0" />
    <Meta Name="ms.sourcegitcommit" Value="058bfa0b75b777d3171411d35da8f11617fc06b0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="05/04/2018" />
    <Meta Name="ms.locfileid" Value="33660024" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class DependencyProperty" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DependencyProperty extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DependencyProperty" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DependencyProperty" />
  <TypeSignature Language="C++ CLI" Value="public ref class DependencyProperty sealed" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Markup.DependencyPropertyConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.ValueSerializer(typeof(System.Windows.DependencyPropertyValueSerializer))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="bdee9-101">Представляет свойство, которое можно задать с помощью методов, например стили, привязки данных, анимации и наследование.</span>
      <span class="sxs-lookup">
        <span data-stu-id="bdee9-101">Represents a property that can be set through methods such as, styling, data binding, animation, and inheritance.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bdee9-102">Объект <xref:System.Windows.DependencyProperty> поддерживает следующие возможности в [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]:</span><span class="sxs-lookup"><span data-stu-id="bdee9-102">A <xref:System.Windows.DependencyProperty> supports the following capabilities in [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]:</span></span>  
  
-   <span data-ttu-id="bdee9-103">Это свойство можно задать в style.</span><span class="sxs-lookup"><span data-stu-id="bdee9-103">The property can be set in a style.</span></span> <span data-ttu-id="bdee9-104">Более подробную информацию см. в разделе [Стилизация и использование шаблонов](~/docs/framework/wpf/controls/styling-and-templating.md).</span><span class="sxs-lookup"><span data-stu-id="bdee9-104">For more information, see [Styling and Templating](~/docs/framework/wpf/controls/styling-and-templating.md).</span></span>  
  
-   <span data-ttu-id="bdee9-105">Свойство может быть задано через привязку данных.</span><span class="sxs-lookup"><span data-stu-id="bdee9-105">The property can be set through data binding.</span></span> <span data-ttu-id="bdee9-106">Дополнительные сведения о привязке данных свойств зависимостей см. в разделе [как: привязки свойства из двух элементов управления](~/docs/framework/wpf/data/how-to-bind-the-properties-of-two-controls.md).</span><span class="sxs-lookup"><span data-stu-id="bdee9-106">For more information about data binding dependency properties, see [How to: Bind the Properties of Two Controls](~/docs/framework/wpf/data/how-to-bind-the-properties-of-two-controls.md).</span></span>  
  
-   <span data-ttu-id="bdee9-107">Свойство может быть задано со ссылкой на динамический ресурс.</span><span class="sxs-lookup"><span data-stu-id="bdee9-107">The property can be set with a dynamic resource reference.</span></span> <span data-ttu-id="bdee9-108">Дополнительные сведения см. в разделе [Ресурсы XAML](~/docs/framework/wpf/advanced/xaml-resources.md).</span><span class="sxs-lookup"><span data-stu-id="bdee9-108">For more information, see [XAML Resources](~/docs/framework/wpf/advanced/xaml-resources.md).</span></span>  
  
-   <span data-ttu-id="bdee9-109">Свойство может наследовать его значение автоматически от родительского элемента в дереве элементов.</span><span class="sxs-lookup"><span data-stu-id="bdee9-109">The property can inherit its value automatically from a parent element in the element tree.</span></span> <span data-ttu-id="bdee9-110">Дополнительные сведения см. в разделе [Наследование значения свойства](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span><span class="sxs-lookup"><span data-stu-id="bdee9-110">For more information, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span></span>  
  
-   <span data-ttu-id="bdee9-111">Свойства могут быть анимированы.</span><span class="sxs-lookup"><span data-stu-id="bdee9-111">The property can be animated.</span></span> <span data-ttu-id="bdee9-112">Более подробную информацию см. в разделе [Общие сведения об эффектах анимации](~/docs/framework/wpf/graphics-multimedia/animation-overview.md).</span><span class="sxs-lookup"><span data-stu-id="bdee9-112">For more information, see [Animation Overview](~/docs/framework/wpf/graphics-multimedia/animation-overview.md).</span></span>  
  
-   <span data-ttu-id="bdee9-113">Свойство может сообщать, когда предыдущее значение свойства было изменено и можно выполнить приведение значения свойства.</span><span class="sxs-lookup"><span data-stu-id="bdee9-113">The property can report when the previous value of the property has been changed and the property value can be coerced.</span></span> <span data-ttu-id="bdee9-114">Дополнительные сведения см. в разделе [Проверка и обратные вызовы свойства зависимостей](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span><span class="sxs-lookup"><span data-stu-id="bdee9-114">For more information, see [Dependency Property Callbacks and Validation](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span></span>  
  
-   <span data-ttu-id="bdee9-115">Свойство сообщает информацию для [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], такие как ли изменение значения свойства требуется системе макета, чтобы представлять визуализации элемента.</span><span class="sxs-lookup"><span data-stu-id="bdee9-115">The property reports information to [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], such as whether changing a property value should require the layout system to recompose the visuals for an element.</span></span>  
  
-   <span data-ttu-id="bdee9-116">Свойство получает поддержку в [!INCLUDE[wpfdesigner_current_long](~/includes/wpfdesigner-current-long-md.md)].</span><span class="sxs-lookup"><span data-stu-id="bdee9-116">The property receives support in the [!INCLUDE[wpfdesigner_current_long](~/includes/wpfdesigner-current-long-md.md)].</span></span>  <span data-ttu-id="bdee9-117">Например, можно изменить свойство в **свойства** окна.</span><span class="sxs-lookup"><span data-stu-id="bdee9-117">For example, the property can be edited in the **Properties** window.</span></span>  
  
 <span data-ttu-id="bdee9-118">Дополнительные сведения о свойствах зависимостей см. в разделе [Общие сведения о свойствах зависимостей](~/docs/framework/wpf/advanced/dependency-properties-overview.md).</span><span class="sxs-lookup"><span data-stu-id="bdee9-118">To learn more about dependency properties, see [Dependency Properties Overview](~/docs/framework/wpf/advanced/dependency-properties-overview.md).</span></span> <span data-ttu-id="bdee9-119">Если требуется свойства на пользовательских типов для поддержки возможностей в предыдущем списке, следует создать свойство зависимостей.</span><span class="sxs-lookup"><span data-stu-id="bdee9-119">If you want properties on your custom types to support the capabilities in the preceding list, you should create a dependency property.</span></span>  <span data-ttu-id="bdee9-120">Описание способов создания пользовательских свойств зависимостей, в разделе [пользовательских свойств зависимостей](~/docs/framework/wpf/advanced/custom-dependency-properties.md).</span><span class="sxs-lookup"><span data-stu-id="bdee9-120">To learn how to create custom dependency properties, see [Custom Dependency Properties](~/docs/framework/wpf/advanced/custom-dependency-properties.md).</span></span>  
  
 <span data-ttu-id="bdee9-121">Вложенное свойство является свойством, позволяющий любого объекта, для передачи сведений типа, который определяет вложенное свойство.</span><span class="sxs-lookup"><span data-stu-id="bdee9-121">An attached property is a property that enables any object to report information to the type that defines the attached property.</span></span> <span data-ttu-id="bdee9-122">В [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], любой тип, наследующий от <xref:System.Windows.DependencyObject> можно использовать вложенное свойство независимо от того, является ли тип наследует от типа, определяющего свойство.</span><span class="sxs-lookup"><span data-stu-id="bdee9-122">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], any type that inherits from <xref:System.Windows.DependencyObject> can use an attached property regardless of whether the type inherits from the type that defines the property.</span></span> <span data-ttu-id="bdee9-123">Вложенное свойство — это функция [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] языка.</span><span class="sxs-lookup"><span data-stu-id="bdee9-123">An attached property is a feature of the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language.</span></span>  <span data-ttu-id="bdee9-124">Чтобы задать присоединенное свойство в [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], используйте *ownerType*.* propertyName* синтаксиса.</span><span class="sxs-lookup"><span data-stu-id="bdee9-124">To set an attached property in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], use the *ownerType*.*propertyName* syntax.</span></span> <span data-ttu-id="bdee9-125">Является примером вложенное свойство <xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=nameWithType> свойство.</span><span class="sxs-lookup"><span data-stu-id="bdee9-125">An example of an attached property is the <xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="bdee9-126">Если вы хотите создать свойство, которое может использоваться для всех <xref:System.Windows.DependencyObject> типов, следует создать вложенное свойство.</span><span class="sxs-lookup"><span data-stu-id="bdee9-126">If you want to create a property that can be used on all <xref:System.Windows.DependencyObject> types, then you should create an attached property.</span></span> <span data-ttu-id="bdee9-127">Дополнительные сведения о вложенных свойств, включая создание, в разделе [зависимостей](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span><span class="sxs-lookup"><span data-stu-id="bdee9-127">To learn more about attached properties, including how to create them, see [Attached Properties Overview](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span></span>  
  
<a name="xamlAttributeUsage_DependencyProperty"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="bdee9-128">Использование атрибута XAML</span><span class="sxs-lookup"><span data-stu-id="bdee9-128">XAML Attribute Usage</span></span>  
  
```  
<object property="dependencyPropertyName"/>  
- or -  
<object property="ownerType.dependencyPropertyName"/>  
- or -  
<object property="attachedPropertyOwnerType.attachedPropertyName"/>  
```  
  
<a name="xamlValues_DependencyProperty"></a>   
## <a name="xaml-values"></a><span data-ttu-id="bdee9-129">Значения XAML</span><span class="sxs-lookup"><span data-stu-id="bdee9-129">XAML Values</span></span>  
 `dependencyPropertyName`  
 <span data-ttu-id="bdee9-130">Строка, указывающая <xref:System.Windows.DependencyProperty.Name%2A?displayProperty=nameWithType> свойства требуемой зависимостей.</span><span class="sxs-lookup"><span data-stu-id="bdee9-130">A string that specifies the <xref:System.Windows.DependencyProperty.Name%2A?displayProperty=nameWithType> of the desired dependency property.</span></span> <span data-ttu-id="bdee9-131">Это может предшествовать префикс пространства имен XML, если свойство не существует в пространстве имен XML по умолчанию (Дополнительные сведения см. в разделе [пространства имен XAML и сопоставление пространства имен WPF XAML](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md).)</span><span class="sxs-lookup"><span data-stu-id="bdee9-131">This can be preceded by an XML namespace prefix if the property is not in the default XML namespace (for details, see [XAML Namespaces and Namespace Mapping for WPF XAML](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md).)</span></span>  
  
 <span data-ttu-id="bdee9-132">`ownerType`.`dependencyPropertyName`</span><span class="sxs-lookup"><span data-stu-id="bdee9-132">`ownerType`.`dependencyPropertyName`</span></span>  
 <span data-ttu-id="bdee9-133">Строка, указывающая тип владельца свойства зависимостей, точка (.), то <xref:System.Windows.DependencyProperty.Name%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="bdee9-133">A string that specifies an owner type of a dependency property, a dot (.), then the <xref:System.Windows.DependencyProperty.Name%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="bdee9-134">`ownerType` Можно также предшествовать префикс пространства имен XML.</span><span class="sxs-lookup"><span data-stu-id="bdee9-134">`ownerType` can also be preceded by an XML namespace prefix.</span></span> <span data-ttu-id="bdee9-135">Для позднего связывания стили и шаблоны, где необходимо указать владельца свойства зависимостей для синтаксического анализа контекста, так как такое использование `TargetType` еще не известна.</span><span class="sxs-lookup"><span data-stu-id="bdee9-135">This usage is particular to late-bound styles and templates, where the owner of the dependency property must be specified for parsing context because the `TargetType` is not yet known.</span></span> <span data-ttu-id="bdee9-136">Более подробную информацию см. в разделе [Стилизация и использование шаблонов](~/docs/framework/wpf/controls/styling-and-templating.md).</span><span class="sxs-lookup"><span data-stu-id="bdee9-136">For more information, see [Styling and Templating](~/docs/framework/wpf/controls/styling-and-templating.md).</span></span>  
  
 <span data-ttu-id="bdee9-137">`attachedPropertyOwnerType` *.*</span><span class="sxs-lookup"><span data-stu-id="bdee9-137">`attachedPropertyOwnerType` *.*</span></span> `attachedPropertyName`  
 <span data-ttu-id="bdee9-138">Строка, задающая владельца вложенного свойства, точка (.), а затем имя вложенного свойства.</span><span class="sxs-lookup"><span data-stu-id="bdee9-138">A string that specifies  the owner of an attached property, a dot (.), then the attached property name.</span></span> <span data-ttu-id="bdee9-139">`attachedPropertyOwnerType` Можно также предшествовать префикс пространства имен XML.</span><span class="sxs-lookup"><span data-stu-id="bdee9-139">`attachedPropertyOwnerType` can also be preceded by an XML namespace prefix.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyObject" />
    <altmember cref="T:System.Windows.DependencyPropertyHelper" />
  </Docs>
  <Members>
    <MemberGroup MemberName="AddOwner">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="bdee9-140">Добавляет другой тип в качестве владельца свойства зависимостей, который уже был зарегистрирован для типа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-140">Adds another type as an owner of a dependency property that has already been registered to a type.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddOwner">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyProperty AddOwner (Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.DependencyProperty AddOwner(class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.AddOwner(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddOwner (ownerType As Type) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::DependencyProperty ^ AddOwner(Type ^ ownerType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="ownerType">
          <span data-ttu-id="bdee9-141">Тип для добавления в качестве владельца данного свойства зависимостей.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-141">The type to add as an owner of this dependency property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bdee9-142">Добавляет другой тип в качестве владельца свойства зависимостей, которое уже зарегистрировано.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-142">Adds another type as an owner of a dependency property that has already been registered.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bdee9-143">Ссылка на исходный идентификатор <see cref="T:System.Windows.DependencyProperty" />, который определяет свойство зависимостей.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-143">A reference to the original <see cref="T:System.Windows.DependencyProperty" /> identifier that identifies the dependency property.</span>
          </span>
          <span data-ttu-id="bdee9-144">Этот идентификатор должен быть представлен путем добавления класса в качестве поля <see langword="public static readonly" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-144">This identifier should be exposed by the adding class as a <see langword="public static readonly" /> field.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bdee9-145">Этот метод позволяет распознавать свойства зависимостей для типа, который изначально не зарегистрировала это конкретное свойство зависимостей в системе свойств.</span><span class="sxs-lookup"><span data-stu-id="bdee9-145">This method enables the property system to recognize a dependency property on a type that did not register that particular dependency property initially.</span></span>  
  
 <span data-ttu-id="bdee9-146">Как правило <xref:System.Windows.DependencyProperty.AddOwner%2A> используется для добавления свойств зависимостей в классы, которые еще не предоставляют это свойство зависимостей через наследование управляемого класса (наследование класса вызовет свойства оболочки должны наследоваться от базового класса и, следовательно, обеспечит общей таблице членов доступ к свойству зависимостей уже).</span><span class="sxs-lookup"><span data-stu-id="bdee9-146">Typically, <xref:System.Windows.DependencyProperty.AddOwner%2A> is used to add dependency properties to classes that do not already expose that dependency property through managed class inheritance (class inheritance would cause the wrapper properties to be inherited by the derived class, and thus would provide general members-table access to the dependency property already).</span></span> <span data-ttu-id="bdee9-147"><xref:System.Windows.DependencyProperty.AddOwner%2A> позволяет распознавать свойства зависимостей для типа, который изначально не зарегистрировала это свойство зависимостей в системе свойств.</span><span class="sxs-lookup"><span data-stu-id="bdee9-147"><xref:System.Windows.DependencyProperty.AddOwner%2A> enables the property system to recognize a dependency property on a type that did not register that dependency property initially.</span></span>  
  
 <span data-ttu-id="bdee9-148">Эта подпись не позволяет указывать метаданные.</span><span class="sxs-lookup"><span data-stu-id="bdee9-148">This signature does not allow for specifying metadata.</span></span>  <span data-ttu-id="bdee9-149">При использовании этого метода метаданные автоматически создается для нового <xref:System.Windows.DependencyProperty> и ее типа владельца.</span><span class="sxs-lookup"><span data-stu-id="bdee9-149">When you use this method, the metadata is automatically generated for the new <xref:System.Windows.DependencyProperty> and its owner type.</span></span> <span data-ttu-id="bdee9-150">Метаданные автоматически созданный является результатом объединения метаданных из всех базовых типов, для которых определено это свойство.</span><span class="sxs-lookup"><span data-stu-id="bdee9-150">The auto-generated metadata is the result of the merged metadata from all of the base types that have this property defined.</span></span> <span data-ttu-id="bdee9-151">Если нет объединенных метаданных нет, то используется метаданных по умолчанию для свойства.</span><span class="sxs-lookup"><span data-stu-id="bdee9-151">If no merged metadata is available, then the default metadata for the property is used.</span></span> <span data-ttu-id="bdee9-152">Если оно регистрируется с помощью <xref:System.Windows.DependencyProperty.RegisterAttached%2A> метод, то метаданные по умолчанию является таким же, как метаданные, создаваемой при <xref:System.Windows.DependencyProperty.RegisterAttached%2A> был вызван.</span><span class="sxs-lookup"><span data-stu-id="bdee9-152">If the property is registered by using the <xref:System.Windows.DependencyProperty.RegisterAttached%2A> method, then the default metadata is the same as the metadata that is created when <xref:System.Windows.DependencyProperty.RegisterAttached%2A> was called.</span></span> <span data-ttu-id="bdee9-153">В противном случае <xref:System.Windows.PropertyMetadata> создан объект с <xref:System.Windows.PropertyMetadata.DefaultValue%2A> свойства, значение по умолчанию тип свойства, а все остальные свойства <xref:System.Windows.PropertyMetadata> равно `null`.</span><span class="sxs-lookup"><span data-stu-id="bdee9-153">Otherwise, the <xref:System.Windows.PropertyMetadata> object is created with the <xref:System.Windows.PropertyMetadata.DefaultValue%2A> property set to the property type's default and all other properties of the <xref:System.Windows.PropertyMetadata> is set to `null`.</span></span> <span data-ttu-id="bdee9-154">Используйте <xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29> подпись, чтобы предоставлять метаданные для версии свойства зависимостей, по мере добавления в указанный тип.</span><span class="sxs-lookup"><span data-stu-id="bdee9-154">Use the <xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29> signature if you want to provide metadata for the version of the dependency property as added to the provided type.</span></span>  
  
 <span data-ttu-id="bdee9-155">Возвращаемое значение этого метода обычно используется для объявления и предоставления свойства зависимостей, сохраняя идентификатор свойства зависимостей.</span><span class="sxs-lookup"><span data-stu-id="bdee9-155">The return value of this method is typically used to declare and expose the dependency property by storing a dependency property identifier.</span></span> <span data-ttu-id="bdee9-156">Идентификатор предоставляет доступ к свойству зависимостей, если вы хотите вызвать системы свойств [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] к свойству зависимостей, особенно, когда существует на добавляемом классе владельца.</span><span class="sxs-lookup"><span data-stu-id="bdee9-156">The identifier provides access to the dependency property if you want to call property system [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] against the dependency property, particularly as it exists on the adding owner class.</span></span> <span data-ttu-id="bdee9-157">Одно и то же имя свойства для первоначального владельца и добавленного владельцев следует использовать, чтобы указать на схожую функциональность.</span><span class="sxs-lookup"><span data-stu-id="bdee9-157">The same property name for both original owner and added owner should be used to indicate the similar functionality.</span></span> <span data-ttu-id="bdee9-158">Следует использовать <xref:System.Windows.DependencyProperty> возвращаемое значение <xref:System.Windows.DependencyProperty.AddOwner%2A> метод для определения идентификатора свойства зависимости, а также для объявления [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] оболочки свойства для свойства зависимостей, которые добавляются с помощью типов <xref:System.Windows.DependencyProperty.AddOwner%2A>.</span><span class="sxs-lookup"><span data-stu-id="bdee9-158">You should use the <xref:System.Windows.DependencyProperty> return value of the <xref:System.Windows.DependencyProperty.AddOwner%2A> method to define the dependency property identifier, and also to declare [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] property wrappers, for dependency properties that are added to types using <xref:System.Windows.DependencyProperty.AddOwner%2A>.</span></span>  
  
 <span data-ttu-id="bdee9-159"><xref:System.Windows.DependencyProperty.AddOwner%2A> Методологии рекомендуется выше используется при создании свойства зависимости, которые объявлены внутри [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)].</span><span class="sxs-lookup"><span data-stu-id="bdee9-159">The <xref:System.Windows.DependencyProperty.AddOwner%2A> methodology recommended above is used when creating the dependency properties that are declared within [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)].</span></span> <span data-ttu-id="bdee9-160">Например, оба <xref:System.Windows.Controls.Border> и <xref:System.Windows.Controls.Control> определить `BorderBrush` свойства зависимостей, имеющих аналогичные функциональные возможности.</span><span class="sxs-lookup"><span data-stu-id="bdee9-160">For instance, both <xref:System.Windows.Controls.Border> and <xref:System.Windows.Controls.Control> define a `BorderBrush` dependency property, which have similar functionality.</span></span> <span data-ttu-id="bdee9-161"><xref:System.Windows.Controls.Control> определяет его `BorderBrush` свойства в системе свойств путем вызова <xref:System.Windows.DependencyProperty.AddOwner%2A> зависимости от первоначального владельца <xref:System.Windows.Controls.Border> и его зарегистрированные <xref:System.Windows.Controls.Border.BorderBrushProperty> идентификатор свойства зависимостей.</span><span class="sxs-lookup"><span data-stu-id="bdee9-161"><xref:System.Windows.Controls.Control> defines its `BorderBrush` property to the property system by calling <xref:System.Windows.DependencyProperty.AddOwner%2A> based on the original owner <xref:System.Windows.Controls.Border> and its registered <xref:System.Windows.Controls.Border.BorderBrushProperty> dependency property identifer.</span></span> <span data-ttu-id="bdee9-162"><xref:System.Windows.DependencyProperty.AddOwner%2A> Возвращают значение затем используется для установления новый статический <xref:System.Windows.DependencyProperty> поля (<xref:System.Windows.Controls.Control.BorderBrushProperty>) для этого свойства для добавленного владельцев и `BorderBrush` также объявляется свойство программы-оболочки.</span><span class="sxs-lookup"><span data-stu-id="bdee9-162">The <xref:System.Windows.DependencyProperty.AddOwner%2A> return value is then used to establish a new static <xref:System.Windows.DependencyProperty> field (<xref:System.Windows.Controls.Control.BorderBrushProperty>) for that property on the added owner, and a `BorderBrush` property wrapper is also declared.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddOwner">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyProperty AddOwner (Type ownerType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.DependencyProperty AddOwner(class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.AddOwner(System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddOwner (ownerType As Type, typeMetadata As PropertyMetadata) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::DependencyProperty ^ AddOwner(Type ^ ownerType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="ownerType">
          <span data-ttu-id="bdee9-163">Тип для добавления в качестве владельца данного свойства зависимостей.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-163">The type to add as owner of this dependency property.</span>
          </span>
        </param>
        <param name="typeMetadata">
          <span data-ttu-id="bdee9-164">Метаданные, квалифицирующие свойство зависимостей в том виде, в котором оно существует в указанном типе.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-164">The metadata that qualifies the dependency property as it exists on the provided type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bdee9-165">Добавляет другой тип в качестве владельца свойства зависимостей, который уже был зарегистрирован, предоставляя метаданные свойства зависимости для свойства зависимостей в том виде, в котором оно будет существовать в предоставленном типе владельца.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-165">Adds another type as an owner of a dependency property that has already been registered, providing dependency property metadata for the dependency property as it will exist on the provided owner type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bdee9-166">Ссылка на исходный идентификатор <see cref="T:System.Windows.DependencyProperty" />, который определяет свойство зависимостей.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-166">A reference to the original <see cref="T:System.Windows.DependencyProperty" /> identifier that identifies the dependency property.</span>
          </span>
          <span data-ttu-id="bdee9-167">Этот идентификатор должен быть представлен путем добавления класса в качестве поля <see langword="public static readonly" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-167">This identifier should be exposed by the adding class as a <see langword="public static readonly" /> field.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bdee9-168">Этот метод позволяет распознавать свойства зависимостей для типа, который изначально не зарегистрировала это конкретное свойство зависимостей в системе свойств.</span><span class="sxs-lookup"><span data-stu-id="bdee9-168">This method enables the property system to recognize a dependency property on a type that did not register that particular dependency property initially.</span></span>  
  
 <span data-ttu-id="bdee9-169">Возвращаемое значение этого метода используется для объявления и предоставления свойству зависимостей, особенно в том случае, как оно существует в добавляемом классе владельца.</span><span class="sxs-lookup"><span data-stu-id="bdee9-169">The return value of this method is used to declare and expose the dependency property, particularly as it exists on the adding owner class.</span></span> <span data-ttu-id="bdee9-170">Как правило то же имя свойства для первоначального владельца и добавленного владельцев следует использовать для указания на схожую функциональность.</span><span class="sxs-lookup"><span data-stu-id="bdee9-170">Generally, the same property name for both original owner and added owner should be used to indicate the similar functionality.</span></span> <span data-ttu-id="bdee9-171">Рекомендуется предоставлять идентификаторы, а также новые [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] оболочки свойства для свойства зависимостей, которые добавляются с помощью типов <xref:System.Windows.DependencyProperty.AddOwner%2A>.</span><span class="sxs-lookup"><span data-stu-id="bdee9-171">It is good practice to expose the identifiers, as well as new [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] property wrappers, for dependency properties that are added to types using <xref:System.Windows.DependencyProperty.AddOwner%2A>.</span></span>  
  
 <span data-ttu-id="bdee9-172"><xref:System.Windows.DependencyProperty.AddOwner%2A> Методологии рекомендуется выше используется при создании [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] объявленная внутри [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)].</span><span class="sxs-lookup"><span data-stu-id="bdee9-172">The <xref:System.Windows.DependencyProperty.AddOwner%2A> methodology recommended above is used when creating [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] declared within [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)].</span></span> <span data-ttu-id="bdee9-173">Например, оба <xref:System.Windows.Controls.Border> и <xref:System.Windows.Controls.Control> определить `BorderBrush` свойства зависимостей, имеющих аналогичные функциональные возможности.</span><span class="sxs-lookup"><span data-stu-id="bdee9-173">For instance, both <xref:System.Windows.Controls.Border> and <xref:System.Windows.Controls.Control> define a `BorderBrush` dependency property, which have similar functionality.</span></span> <span data-ttu-id="bdee9-174"><xref:System.Windows.Controls.Control> определяет его `BorderBrush` свойства в системе свойств путем вызова <xref:System.Windows.DependencyProperty.AddOwner%2A> на исходный владелец <xref:System.Windows.Controls.Border> и его зарегистрированные <xref:System.Windows.Controls.Border.BorderBrushProperty> идентификатор свойства зависимостей.</span><span class="sxs-lookup"><span data-stu-id="bdee9-174"><xref:System.Windows.Controls.Control> defines its `BorderBrush` property to the property system by calling <xref:System.Windows.DependencyProperty.AddOwner%2A> on original owner <xref:System.Windows.Controls.Border> and its registered <xref:System.Windows.Controls.Border.BorderBrushProperty> dependency property identifer.</span></span> <span data-ttu-id="bdee9-175"><xref:System.Windows.DependencyProperty.AddOwner%2A> Возвращают значение затем используется для установления статический <xref:System.Windows.DependencyProperty> поля (<xref:System.Windows.Controls.Control.BorderBrushProperty>) для этого свойства для добавленного владельцев и `BorderBrush` также объявляется свойство программы-оболочки.</span><span class="sxs-lookup"><span data-stu-id="bdee9-175">The <xref:System.Windows.DependencyProperty.AddOwner%2A> return value is then used to establish a static <xref:System.Windows.DependencyProperty> field (<xref:System.Windows.Controls.Control.BorderBrushProperty>)for that property on the added owner, and a `BorderBrush` property wrapper is also declared.</span></span>  
  
 <span data-ttu-id="bdee9-176">Идентификатор для свойства зависимостей добавленного владельцев должен использоваться для операций таких как <xref:System.Windows.DependencyObject.GetValue%2A>.</span><span class="sxs-lookup"><span data-stu-id="bdee9-176">The added owner's dependency property identifier should be used for operations such as <xref:System.Windows.DependencyObject.GetValue%2A>.</span></span> <span data-ttu-id="bdee9-177">Однако конкретного типа операций, включающих типов или экземпляров класса, который был добавлен как владелец с различные метаданные будут по-прежнему возвращать даже если ожидаемые результаты исходного (не добавлены владельца) указан идентификатор свойства зависимостей в вызовы методов, например <xref:System.Windows.DependencyObject.GetValue%2A> или <xref:System.Windows.DependencyProperty.GetMetadata%2A>.</span><span class="sxs-lookup"><span data-stu-id="bdee9-177">However, type-specific operations involving either types or instances of the class that was added as owner with different metadata will still return the expected results even if the original (not the added owner's) dependency property identifier is specified in calls to methods such as <xref:System.Windows.DependencyObject.GetValue%2A> or <xref:System.Windows.DependencyProperty.GetMetadata%2A>.</span></span> <span data-ttu-id="bdee9-178">Метаданные для добавленного владельцев сохраняются по <xref:System.Windows.DependencyProperty.AddOwner%2A> вызывает самого ссылается не обязательно исключительно поле идентификатора класса Добавление владельца.</span><span class="sxs-lookup"><span data-stu-id="bdee9-178">The metadata for the added owner is perpetuated by the <xref:System.Windows.DependencyProperty.AddOwner%2A> call itself, not necessarily referenced exclusively by the adding owner class identifier field.</span></span> <span data-ttu-id="bdee9-179">Тем не менее, рекомендуется для предоставления идентификатора, а также новые [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] оболочки свойства для свойства зависимостей, которые добавляются с помощью типов <xref:System.Windows.DependencyProperty.AddOwner%2A>, поскольку Несоблюдение этого различие между [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] и [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] представления свойств.</span><span class="sxs-lookup"><span data-stu-id="bdee9-179">Nevertheless, it is good practice to expose the  identifier, as well as new [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] property wrappers, for dependency properties that are added to types using <xref:System.Windows.DependencyProperty.AddOwner%2A>, because failing to do so creates disparity between the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] and [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] representations of your properties.</span></span>  
  
 <span data-ttu-id="bdee9-180">Предоставленных метаданных объединяется с метаданными для свойства зависимостей, которое существует в базовом владельце.</span><span class="sxs-lookup"><span data-stu-id="bdee9-180">The supplied metadata is merged with the property metadata for the dependency property as it exists on the base owner.</span></span> <span data-ttu-id="bdee9-181">Характеристики, которые были указаны в исходных базовых метаданных, сохранятся.</span><span class="sxs-lookup"><span data-stu-id="bdee9-181">Any characteristics that were specified in the original base metadata will persist.</span></span> <span data-ttu-id="bdee9-182">Только характеристики, специально измененные в новых метаданных, переопределят характеристики базовых метаданных.</span><span class="sxs-lookup"><span data-stu-id="bdee9-182">Only those characteristics that were specifically changed in the new metadata will override the characteristics of the base metadata.</span></span> <span data-ttu-id="bdee9-183">Некоторые характеристики, такие как <xref:System.Windows.PropertyMetadata.DefaultValue%2A>, заменяются в случае, если они указаны в новых метаданных.</span><span class="sxs-lookup"><span data-stu-id="bdee9-183">Some characteristics, such as <xref:System.Windows.PropertyMetadata.DefaultValue%2A>, are replaced if they are specified in the new metadata.</span></span> <span data-ttu-id="bdee9-184">Другие, такие как <xref:System.Windows.PropertyChangedCallback>, объединяются.</span><span class="sxs-lookup"><span data-stu-id="bdee9-184">Others, such as <xref:System.Windows.PropertyChangedCallback>, are combined.</span></span> <span data-ttu-id="bdee9-185">В конечном счете, поведение при объединении зависит от типа метаданных свойства используется для переопределения, поэтому для существующих классов метаданных свойств, используемых поведения, описанного здесь [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] свойств зависимостей.</span><span class="sxs-lookup"><span data-stu-id="bdee9-185">Ultimately, the merge behavior depends on the property metadata type being used for the override, so the behavior described here is for the existing property metadata classes used by [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] dependency properties.</span></span> <span data-ttu-id="bdee9-186">Дополнительные сведения см. в разделе [метаданные свойства зависимостей](~/docs/framework/wpf/advanced/dependency-property-metadata.md) и [метаданных свойств среды](~/docs/framework/wpf/advanced/framework-property-metadata.md).</span><span class="sxs-lookup"><span data-stu-id="bdee9-186">For details, see [Dependency Property Metadata](~/docs/framework/wpf/advanced/dependency-property-metadata.md) and [Framework Property Metadata](~/docs/framework/wpf/advanced/framework-property-metadata.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultMetadata">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyMetadata DefaultMetadata { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.PropertyMetadata DefaultMetadata" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.DefaultMetadata" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DefaultMetadata As PropertyMetadata" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::PropertyMetadata ^ DefaultMetadata { System::Windows::PropertyMetadata ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyMetadata</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="bdee9-187">Возвращает метаданные свойства зависимостей по умолчанию.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-187">Gets the default metadata of the dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="bdee9-188">Метаданные свойства зависимостей по умолчанию.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-188">The default metadata of the dependency property.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bdee9-189">По умолчанию метаданные, метаданные свойства, доступные для конкретного объекта или объекта производного типа, где альтернативные метаданные не был предоставлен явный <xref:System.Windows.DependencyProperty.Register%2A> или <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> вызова.</span><span class="sxs-lookup"><span data-stu-id="bdee9-189">The default metadata is the property metadata that is available to that particular object or an object of a derived type where no alternative metadata was supplied by an explicit <xref:System.Windows.DependencyProperty.Register%2A> or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> call.</span></span>  
  
 <span data-ttu-id="bdee9-190">Если владелец исходного метаданных применяется к первому <xref:System.Windows.DependencyProperty.Register%2A> вызов, установить свойству зависимостей, а затем эти метаданные возвращаются в виде <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>.</span><span class="sxs-lookup"><span data-stu-id="bdee9-190">If the original owner applied metadata to the first <xref:System.Windows.DependencyProperty.Register%2A> call that established the dependency property, then that metadata is returned as <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>.</span></span>  
  
 <span data-ttu-id="bdee9-191">Если метаданные не было применено в исходной коллекции <xref:System.Windows.DependencyProperty.Register%2A> вызвать, формируется с помощью метаданных по умолчанию <xref:System.Windows.DependencyProperty.Register%2A> вызова и это значение возвращается в виде <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>.</span><span class="sxs-lookup"><span data-stu-id="bdee9-191">If no metadata was applied in the original <xref:System.Windows.DependencyProperty.Register%2A> call, then default metadata is generated from within the <xref:System.Windows.DependencyProperty.Register%2A> call and this value is returned as the <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>.</span></span>  
  
 <span data-ttu-id="bdee9-192">Основным назначением которых по умолчанию метаданные, связанные с <xref:System.Windows.DependencyProperty> — предоставить значение по умолчанию для этого свойства для какого-либо <xref:System.Windows.DependencyObject> или производный тип.</span><span class="sxs-lookup"><span data-stu-id="bdee9-192">The main purpose of having default metadata associated with a <xref:System.Windows.DependencyProperty> is to supply a default value for this property on any <xref:System.Windows.DependencyObject> or a derived type.</span></span>  
  
 <span data-ttu-id="bdee9-193">Для невложенных свойств тип метаданных, возвращенный этим свойством нельзя привести к производные типы <xref:System.Windows.PropertyMetadata> тип, даже если свойство было изначально зарегистрировано с производным типом метаданных.</span><span class="sxs-lookup"><span data-stu-id="bdee9-193">For nonattached properties, the metadata type returned by this property cannot be cast to derived types of <xref:System.Windows.PropertyMetadata> type, even if the property was originally registered with a derived metadata type.</span></span> <span data-ttu-id="bdee9-194">Изначально зарегистрированных метаданных, включая его исходным типом возможно производные метаданные вызвать <xref:System.Windows.DependencyProperty.GetMetadata%28System.Type%29> вместо этого, передача исходной регистрации типу как параметр.</span><span class="sxs-lookup"><span data-stu-id="bdee9-194">If you want the originally registered metadata including its original possibly derived metadata type, call <xref:System.Windows.DependencyProperty.GetMetadata%28System.Type%29> instead, passing the original registering type as a parameter.</span></span>  
  
 <span data-ttu-id="bdee9-195">Для вложенных свойств тип метаданных, возвращенный этим свойством будет соответствовать типу, заданному в исходной <xref:System.Windows.DependencyProperty.RegisterAttached%2A> метод регистрации.</span><span class="sxs-lookup"><span data-stu-id="bdee9-195">For attached properties, the type of the metadata returned by this property will match the type given in the original <xref:System.Windows.DependencyProperty.RegisterAttached%2A> registration method.</span></span>  
  
   
  
## Examples  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#DPDefaultValue](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpdefaultvalue)]
[!code-vb[PropertySystemEsoterics#DPDefaultValue](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpdefaultvalue)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="bdee9-196">Возвращает хэш-код для объекта <see cref="T:System.Windows.DependencyProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-196">Returns a hash code for this <see cref="T:System.Windows.DependencyProperty" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bdee9-197">Хэш-код для этого экземпляра <see cref="T:System.Windows.DependencyProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-197">The hash code for this <see cref="T:System.Windows.DependencyProperty" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bdee9-198">В системе свойств использует свой собственный уникальный идентификатор <xref:System.Windows.DependencyProperty.GlobalIndex%2A>, и возвращается значение этого свойства <xref:System.Windows.DependencyProperty.GetHashCode%2A>.</span><span class="sxs-lookup"><span data-stu-id="bdee9-198">The property system uses its own unique identifier <xref:System.Windows.DependencyProperty.GlobalIndex%2A>, and the value of that property is returned by <xref:System.Windows.DependencyProperty.GetHashCode%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMetadata">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="bdee9-199">Возвращает метаданные, связанные с данным свойством зависимостей в том виде, в котором оно существует для конкретного типа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-199">Returns the metadata associated with this dependency property as it exists for a particular type.</span>
          </span>
          <span data-ttu-id="bdee9-200">Это может быть тип, в котором свойство зависимостей было изначально зарегистрировано, тип, к которому оно было добавлено позже, или тип, в котором свойство зависимостей было получено путем наследования, но метаданные были переопределены.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-200">This can be the type where the dependency property was first registered, one to which it was added subsequently, or a type where the dependency property was obtained through inheritance but the metadata was specifically overridden.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMetadata">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyMetadata GetMetadata (Type forType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.PropertyMetadata GetMetadata(class System.Type forType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.GetMetadata(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMetadata (forType As Type) As PropertyMetadata" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::PropertyMetadata ^ GetMetadata(Type ^ forType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyMetadata</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="forType">
          <span data-ttu-id="bdee9-201">Конкретный тип, из которого необходимо извлечь метаданные свойства зависимостей.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-201">The specific type from which to retrieve the dependency property metadata.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bdee9-202">Возвращает метаданные для этого свойства зависимостей в том виде, в котором оно представлено в указанном существующем типе.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-202">Returns the metadata for this dependency property as it exists on a specified existing type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bdee9-203">Объект метаданных свойств.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-203">A property metadata object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bdee9-204">Указание типа или ссылкой на объект для использования в качестве типа является обязательным, поскольку метаданные могут отличаться от исходной регистрации ввиду <xref:System.Windows.DependencyProperty.AddOwner%2A> или <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> вызовы, изменять метаданные свойства зависимостей, как оно существует в типе.</span><span class="sxs-lookup"><span data-stu-id="bdee9-204">Specifying either the type or an object reference to use as type is necessary because the metadata can vary from the original registration due either to <xref:System.Windows.DependencyProperty.AddOwner%2A> or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> calls that alter the metadata of the dependency property as it exists on a type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bdee9-205">Следующий пример возвращает метаданные для свойства зависимостей, в зависимости от его типа.</span><span class="sxs-lookup"><span data-stu-id="bdee9-205">The following example gets metadata for a dependency property based on its type.</span></span> <span data-ttu-id="bdee9-206">Тип осуществляется при помощи `typeof` оператор.</span><span class="sxs-lookup"><span data-stu-id="bdee9-206">The type is obtained by using a `typeof` operator.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#GetMetadataType](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/default.xaml.cs#getmetadatatype)]
 [!code-vb[PropertySystemEsoterics#GetMetadataType](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/default.xaml.vb#getmetadatatype)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMetadata">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyMetadata GetMetadata (System.Windows.DependencyObject dependencyObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.PropertyMetadata GetMetadata(class System.Windows.DependencyObject dependencyObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.GetMetadata(System.Windows.DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::PropertyMetadata ^ GetMetadata(System::Windows::DependencyObject ^ dependencyObject);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyMetadata</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dependencyObject" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="dependencyObject">
          <span data-ttu-id="bdee9-207">Объект зависимости, проверяемый на наличие типа, чтобы определить, из какой типозависимой версии свойства зависимости нужно использовать метаданные.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-207">A dependency object that is checked for type, to determine which type-specific version of the dependency property the metadata should come from.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bdee9-208">Возвращает метаданные для этого свойства зависимостей в том виде,в котором оно существует в указанном экземпляре объекта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-208">Returns the metadata for this dependency property as it exists on the specified object instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bdee9-209">Объект метаданных свойств.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-209">A property metadata object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bdee9-210">Указание типа или ссылкой на объект является необходимым, поскольку метаданные любое заданное свойство зависимостей может изменяться от исходной регистрации ввиду <xref:System.Windows.DependencyProperty.AddOwner%2A> или <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> вызовы, которые можно уточнить метаданные свойства, которое существует в тип.</span><span class="sxs-lookup"><span data-stu-id="bdee9-210">Specifying either the type or an object reference is necessary because the metadata of any given dependency property can vary from the original registration due either to <xref:System.Windows.DependencyProperty.AddOwner%2A> or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> calls that can refine the property metadata as it exists on a type.</span></span>  
  
 <span data-ttu-id="bdee9-211">При запросе метаданных свойства на основе экземпляра это просто передачи экземпляра, его тип может вычисляться внутренним образом.</span><span class="sxs-lookup"><span data-stu-id="bdee9-211">When you request property metadata based on an instance, you are really just passing the instance so that its type can be evaluated internally.</span></span> <span data-ttu-id="bdee9-212">Метаданные свойства зависимостей не зависит от конкретного экземпляра. всегда является согласованным для любой комбинации типа и свойства.</span><span class="sxs-lookup"><span data-stu-id="bdee9-212">Dependency property metadata does not vary per instance; it is always consistent for any given type-property combination.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bdee9-213">Следующий пример получает метаданные для свойства зависимостей, в зависимости от конкретного <xref:System.Windows.DependencyObject> экземпляра.</span><span class="sxs-lookup"><span data-stu-id="bdee9-213">The following example gets metadata for a dependency property based on a specific <xref:System.Windows.DependencyObject> instance.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#GetMetadataDOInstance](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/default.xaml.cs#getmetadatadoinstance)]
 [!code-vb[PropertySystemEsoterics#GetMetadataDOInstance](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/default.xaml.vb#getmetadatadoinstance)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMetadata">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyMetadata GetMetadata (System.Windows.DependencyObjectType dependencyObjectType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.PropertyMetadata GetMetadata(class System.Windows.DependencyObjectType dependencyObjectType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.GetMetadata(System.Windows.DependencyObjectType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::PropertyMetadata ^ GetMetadata(System::Windows::DependencyObjectType ^ dependencyObjectType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyMetadata</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dependencyObjectType" Type="System.Windows.DependencyObjectType" />
      </Parameters>
      <Docs>
        <param name="dependencyObjectType">
          <span data-ttu-id="bdee9-214">Специальный объект, который записывает тип объекта зависимости, из которого запрашиваются метаданные свойства зависимостей.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-214">A specific object that records the dependency object type from which the dependency property metadata is desired.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bdee9-215">Возвращает метаданные для этого свойства зависимостей в том виде, в каком они представлены в указанном типе.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-215">Returns the metadata for this dependency property as it exists on a specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bdee9-216">Объект метаданных свойств.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-216">A property metadata object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bdee9-217">Указание типа или ссылкой на объект является необходимым, поскольку метаданные любое заданное свойство зависимостей может изменяться от исходной регистрации ввиду <xref:System.Windows.DependencyProperty.AddOwner%2A> или <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> вызовы, которые можно уточнить метаданные свойства, которое существует в тип.</span><span class="sxs-lookup"><span data-stu-id="bdee9-217">Specifying either the type or an object reference is necessary because the metadata of any given dependency property can vary from the original registration due either to <xref:System.Windows.DependencyProperty.AddOwner%2A> or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> calls that can refine the property metadata as it exists on a type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bdee9-218">Следующий пример получает метаданные для свойства зависимостей на основе его <xref:System.Windows.DependencyObjectType>.</span><span class="sxs-lookup"><span data-stu-id="bdee9-218">The following example gets metadata for a dependency property based on its <xref:System.Windows.DependencyObjectType>.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#GetMetadataDOType](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/default.xaml.cs#getmetadatadotype)]
 [!code-vb[PropertySystemEsoterics#GetMetadataDOType](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/default.xaml.vb#getmetadatadotype)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GlobalIndex">
      <MemberSignature Language="C#" Value="public int GlobalIndex { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 GlobalIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.GlobalIndex" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GlobalIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int GlobalIndex { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="bdee9-219">Возвращает внутреннее сгенерированное значение, уникальным образом идентифицирующее свойство зависимостей.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-219">Gets an internally generated value that uniquely identifies the dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="bdee9-220">Уникальный числовой идентификатор.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-220">A unique numeric identifier.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bdee9-221">Это значение является целым числом, не глобальный уникальный идентификатор (GUID).</span><span class="sxs-lookup"><span data-stu-id="bdee9-221">This value is an integer, not a globally unique identifier (GUID).</span></span> <span data-ttu-id="bdee9-222">Как правило это значение индекса не требуется и нет индекса доступа к таблицам всех свойств зависимостей.</span><span class="sxs-lookup"><span data-stu-id="bdee9-222">Generally, using this index value is not required, and there is no index access to tables of all dependency properties.</span></span> <span data-ttu-id="bdee9-223">Свойства зависимостей вместо этого следует ссылаться их идентификатор поля.</span><span class="sxs-lookup"><span data-stu-id="bdee9-223">Dependency properties should instead be referenced by their identifier fields.</span></span>  
  
 <span data-ttu-id="bdee9-224"><xref:System.Windows.DependencyProperty.GlobalIndex%2A> используется внутренним образом для ускорения доступа к структурам данных, использующих <xref:System.Windows.DependencyProperty.GlobalIndex%2A> как массив, начинающийся с нуля индекс.</span><span class="sxs-lookup"><span data-stu-id="bdee9-224"><xref:System.Windows.DependencyProperty.GlobalIndex%2A> is used internally for faster access to data structures that use the <xref:System.Windows.DependencyProperty.GlobalIndex%2A> as a zero-based array index.</span></span> <span data-ttu-id="bdee9-225">Подобное использование может применяться для конструкторов или инструментов.</span><span class="sxs-lookup"><span data-stu-id="bdee9-225">A similar usage might have applications for designers or tools.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidType">
      <MemberSignature Language="C#" Value="public bool IsValidType (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsValidType(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.IsValidType(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsValidType (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsValidType(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="bdee9-226">Проверяемое значение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-226">The value to check.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bdee9-227">Определяет, приемлемо ли указанное значение для типа данного свойства зависимостей, проверяя его по типу свойства, указанного при исходной регистрации свойства зависимостей.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-227">Determines whether a specified value is acceptable for this dependency property's type, as checked against the property type provided in the original dependency property registration.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bdee9-228">
            <see langword="true" />, если указанное значение принадлежит к зарегистрированному типу свойства или приемлемому производному типу; в противном случае — <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-228">
              <see langword="true" /> if the specified value is the registered property type or an acceptable derived type; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bdee9-229">Значение `null` является допустимым типом для свойств зависимостей ссылочного типа или <xref:System.Nullable%601> свойства зависимостей и будет возвращать `true` для таких случаев.</span><span class="sxs-lookup"><span data-stu-id="bdee9-229">A value of `null` is a valid type for reference type dependency properties, or for a <xref:System.Nullable%601> dependency property, and would return `true` for these cases.</span></span> <span data-ttu-id="bdee9-230">В случаях, когда свойство зависимостей ни ссылку и не является <xref:System.Nullable%601> типа, <xref:System.Windows.DependencyProperty.IsValidType%2A> вернет `false` значение null, а не создавать исключение.</span><span class="sxs-lookup"><span data-stu-id="bdee9-230">In cases where the dependency property is neither a reference nor a <xref:System.Nullable%601> type, <xref:System.Windows.DependencyProperty.IsValidType%2A> will return `false` for a null value rather than raise an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bdee9-231">В следующем примере используется <xref:System.Windows.DependencyProperty.IsValidType%2A> проверку перед вызовом метода <xref:System.Windows.DependencyObject.SetValue%2A> для свойства зависимостей.</span><span class="sxs-lookup"><span data-stu-id="bdee9-231">The following example uses <xref:System.Windows.DependencyProperty.IsValidType%2A> as a check before calling <xref:System.Windows.DependencyObject.SetValue%2A> on the dependency property.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#TrySetValue](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#trysetvalue)]
 [!code-vb[PropertySystemEsoterics#TrySetValue](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#trysetvalue)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidValue">
      <MemberSignature Language="C#" Value="public bool IsValidValue (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsValidValue(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.IsValidValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsValidValue (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsValidValue(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="bdee9-232">Проверяемое значение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-232">The value to check.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bdee9-233">Определяет, приемлемо ли указанное значение для типа свойства, путем базовой проверки типа, а также, находится ли оно потенциально в пределах разрешенного диапазона значений для данного типа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-233">Determines whether the provided value is accepted for the type of property through basic type checking, and also potentially if it is within the allowed range of values for that type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bdee9-234">
            <see langword="true" />, если значение приемлемо и принадлежит к надлежащему или производному типу; в противном случае — <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-234">
              <see langword="true" /> if the value is acceptable and is of the correct type or a derived type; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bdee9-235">Для свойства зависимостей, можно указать разрешенный диапазон значений для этого типа с помощью <xref:System.Windows.ValidateValueCallback> , предоставляется при регистрации свойства зависимостей.</span><span class="sxs-lookup"><span data-stu-id="bdee9-235">For a dependency property, an allowed range of values for that type can be specified through a <xref:System.Windows.ValidateValueCallback> that is provided in the dependency property registration.</span></span>  
  
 <span data-ttu-id="bdee9-236">Этот метод вызывает метод <xref:System.Windows.DependencyProperty.IsValidType%2A> внутренним образом.</span><span class="sxs-lookup"><span data-stu-id="bdee9-236">This method calls <xref:System.Windows.DependencyProperty.IsValidType%2A> internally.</span></span> <span data-ttu-id="bdee9-237">Если свойство зависимостей в вопросе не имеет <xref:System.Windows.ValidateValueCallback>, то вызов этого метода, эффективно аналогичен вызову <xref:System.Windows.DependencyProperty.IsValidType%2A>.</span><span class="sxs-lookup"><span data-stu-id="bdee9-237">If the dependency property in question has no <xref:System.Windows.ValidateValueCallback>,then calling this method is effectively equivalent to calling <xref:System.Windows.DependencyProperty.IsValidType%2A>.</span></span> <span data-ttu-id="bdee9-238">Если свойство зависимости имеет <xref:System.Windows.ValidateValueCallback>и если <xref:System.Windows.DependencyProperty.IsValidType%2A> возвращала бы `true`, то возвращаемое значение будет иметь реализации обратного вызова.</span><span class="sxs-lookup"><span data-stu-id="bdee9-238">If the dependency property does have a <xref:System.Windows.ValidateValueCallback>, and if <xref:System.Windows.DependencyProperty.IsValidType%2A> would have returned `true`, then the value returned will be as implemented in the callback.</span></span>  
  
 <span data-ttu-id="bdee9-239">Значение null является допустимым значением для свойства зависимостей типа ссылки или <xref:System.Nullable%601> свойства зависимостей и будет возвращать `true` для таких случаев.</span><span class="sxs-lookup"><span data-stu-id="bdee9-239">A null value is a valid value for reference type dependency properties, or for a <xref:System.Nullable%601> dependency property, and would return `true` for these cases.</span></span> <span data-ttu-id="bdee9-240">В случаях, когда свойство зависимостей ни ссылку и не является <xref:System.Nullable%601> типа, <xref:System.Windows.DependencyProperty.IsValidType%2A> вернет `false` значение null, а не создавать исключение.</span><span class="sxs-lookup"><span data-stu-id="bdee9-240">In cases where the dependency property is neither a reference nor a <xref:System.Nullable%601> type, <xref:System.Windows.DependencyProperty.IsValidType%2A> will return `false` for a null value rather than raise an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bdee9-241">В следующем примере используется <xref:System.Windows.DependencyProperty.IsValidValue%2A> проверку перед вызовом метода <xref:System.Windows.DependencyObject.SetValue%2A> для свойства зависимостей.</span><span class="sxs-lookup"><span data-stu-id="bdee9-241">The following example uses <xref:System.Windows.DependencyProperty.IsValidValue%2A> as a check before calling <xref:System.Windows.DependencyObject.SetValue%2A> on the dependency property.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#TrySetValueWithValidate](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#trysetvaluewithvalidate)]
 [!code-vb[PropertySystemEsoterics#TrySetValueWithValidate](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#trysetvaluewithvalidate)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="bdee9-242">Возвращает имя свойства зависимостей.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-242">Gets the name of the dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="bdee9-243">Имя свойства.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-243">The name of the property.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bdee9-244">Это свойство получает имя, указанное как `name` параметр во время регистрации свойства зависимостей.</span><span class="sxs-lookup"><span data-stu-id="bdee9-244">This property gets the name provided as the `name` parameter during dependency property registration.</span></span> <span data-ttu-id="bdee9-245">Это имя является постоянным и не может быть `null` или является пустой строкой.</span><span class="sxs-lookup"><span data-stu-id="bdee9-245">This name is immutable, and cannot be `null` or an empty string.</span></span> <span data-ttu-id="bdee9-246">Повторяющееся имя регистрации на том же типе владельца не разрешены и возникает исключение при попытке зарегистрировать дубликат.</span><span class="sxs-lookup"><span data-stu-id="bdee9-246">Duplicate name registrations on the same owner type are not permitted, and will throw an exception when you attempt to register the duplicate.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="bdee9-247"><xref:System.Windows.DependencyProperty.Name%2A> Зависимости свойства должны соответствовать соглашению совпадающих имя его идентификатор для свойства зависимостей минус суффикс «Свойство».</span><span class="sxs-lookup"><span data-stu-id="bdee9-247">The <xref:System.Windows.DependencyProperty.Name%2A> of a dependency property must follow the convention of matching the name of its dependency property identifier minus the suffix "Property".</span></span> <span data-ttu-id="bdee9-248">Дополнительные сведения см. в разделе [Пользовательские свойства зависимостей](~/docs/framework/wpf/advanced/custom-dependency-properties.md).</span><span class="sxs-lookup"><span data-stu-id="bdee9-248">For details, see [Custom Dependency Properties](~/docs/framework/wpf/advanced/custom-dependency-properties.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bdee9-249">В следующем примере запрашивается различные характеристики идентификатор свойства зависимостей, включая <xref:System.Windows.DependencyProperty.Name%2A>.</span><span class="sxs-lookup"><span data-stu-id="bdee9-249">The following example queries various characteristics of a dependency property identifier, including the <xref:System.Windows.DependencyProperty.Name%2A>.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPProps](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpprops)]
 [!code-vb[PropertySystemEsoterics#DPProps](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpprops)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="OverrideMetadata">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="bdee9-250">Предоставляет альтернативные метаданные для этого свойства зависимостей, когда оно присутствует в экземплярах указанного типа по сравнению с метаданными, предоставленными регистрацией первоначального свойства зависимостей.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-250">Supplies alternate metadata for this dependency property when it is present on instances of a specified type, versus the metadata that was provided in the initial dependency property registration.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OverrideMetadata">
      <MemberSignature Language="C#" Value="public void OverrideMetadata (Type forType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OverrideMetadata(class System.Type forType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OverrideMetadata (forType As Type, typeMetadata As PropertyMetadata)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OverrideMetadata(Type ^ forType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="forType">
          <span data-ttu-id="bdee9-251">Тип, где это свойство зависимостей наследуется и где будут применены указанные альтернативные метаданные.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-251">The type where this dependency property is inherited and where the provided alternate metadata will be applied.</span>
          </span>
        </param>
        <param name="typeMetadata">
          <span data-ttu-id="bdee9-252">Метаданные для применения к свойству зависимостей в переопределяемом типе.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-252">The metadata to apply to the dependency property on the overriding type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bdee9-253">Задает альтернативные метаданные для этого свойства зависимостей, если оно присутствует в экземплярах указанного типа, переопределяя метаданные, которые существовали для данного свойства зависимостей в том виде, в котором оно было унаследовано от базовых типов.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-253">Specifies alternate metadata for this dependency property when it is present on instances of a specified type, overriding the metadata that existed for the dependency property as it was inherited from base types.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bdee9-254">В системе свойств использует свойства зависимостей, следует переопределить метаданные свойства зависимостей.</span><span class="sxs-lookup"><span data-stu-id="bdee9-254">Dependency property metadata should be overridden before the property system uses the dependency property.</span></span> <span data-ttu-id="bdee9-255">Это соответствует времени, определенные экземпляры создаются с помощью класса, регистрирующего свойство зависимостей.</span><span class="sxs-lookup"><span data-stu-id="bdee9-255">This equates to the time that specific instances are created using the class that registers the dependency property.</span></span> <span data-ttu-id="bdee9-256">Вызовы <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> следует выполнять только в статическом конструкторе типа, предоставляющего себя в качестве `forType` параметр этого метода, или с помощью аналогичные при создании экземпляра.</span><span class="sxs-lookup"><span data-stu-id="bdee9-256">Calls to <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> should only be performed within the static constructors of the type that provides itself as the `forType` parameter of this method, or through similar instantiation.</span></span> <span data-ttu-id="bdee9-257">Попытка изменить метаданные после экземпляров типа-владельца не возникнет исключения, но приведет к несогласованному поведению в системе свойств.</span><span class="sxs-lookup"><span data-stu-id="bdee9-257">Attempting to change metadata after instances of the owner type exist will not raise exceptions, but will result in inconsistent behaviors in the property system.</span></span>  
  
 <span data-ttu-id="bdee9-258">После установки с помощью этого метода метаданные для определенного производного класса переопределения последующие попытки переопределения метаданных на этом же производном классе вызывает исключение.</span><span class="sxs-lookup"><span data-stu-id="bdee9-258">After metadata for a particular derived class override is established with this method, subsequent attempts to override metadata on this same derived class will raise an exception.</span></span>  
  
 <span data-ttu-id="bdee9-259">Предоставленных метаданных объединяется с метаданными для свойства зависимостей, которое существует в базовом владельце.</span><span class="sxs-lookup"><span data-stu-id="bdee9-259">The supplied metadata is merged with the property metadata for the dependency property as it exists on the base owner.</span></span> <span data-ttu-id="bdee9-260">Характеристики, которые были указаны в исходных базовых метаданных будет сохранено; только характеристики, специально измененные в новых метаданных, переопределят характеристики базовых метаданных.</span><span class="sxs-lookup"><span data-stu-id="bdee9-260">Any characteristics that were specified in the original base metadata will persist; only those characteristics that were specifically changed in the new metadata will override the characteristics of the base metadata.</span></span> <span data-ttu-id="bdee9-261">Некоторые характеристики, такие как <xref:System.Windows.PropertyMetadata.DefaultValue%2A> заменяются, если он указан в новые метаданные.</span><span class="sxs-lookup"><span data-stu-id="bdee9-261">Some characteristics such as <xref:System.Windows.PropertyMetadata.DefaultValue%2A> are replaced if specified in the new metadata.</span></span> <span data-ttu-id="bdee9-262">Другие, такие как <xref:System.Windows.PropertyChangedCallback>, объединяются.</span><span class="sxs-lookup"><span data-stu-id="bdee9-262">Others, such as <xref:System.Windows.PropertyChangedCallback>, are combined.</span></span> <span data-ttu-id="bdee9-263">В конечном счете, поведение при объединении зависит от типа метаданных свойства используется для переопределения, поэтому для существующих классов метаданных свойств, используемых поведения, описанного здесь [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] свойств зависимостей.</span><span class="sxs-lookup"><span data-stu-id="bdee9-263">Ultimately, the merge behavior depends on the property metadata type being used for the override, so the behavior described here is for the existing property metadata classes used by [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] dependency properties.</span></span> <span data-ttu-id="bdee9-264">Дополнительные сведения см. в разделе [метаданные свойства зависимостей](~/docs/framework/wpf/advanced/dependency-property-metadata.md) и [метаданных свойств среды](~/docs/framework/wpf/advanced/framework-property-metadata.md).</span><span class="sxs-lookup"><span data-stu-id="bdee9-264">For details, see [Dependency Property Metadata](~/docs/framework/wpf/advanced/dependency-property-metadata.md) and [Framework Property Metadata](~/docs/framework/wpf/advanced/framework-property-metadata.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="bdee9-265">Была предпринята попытка переопределения метаданных в доступном только для чтения свойстве зависимости (операция не может быть выполнена с помощью данной сигнатуры).</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-265">An attempt was made to override metadata on a read-only dependency property (that operation cannot be done using this signature).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="bdee9-266">Метаданные уже были установлены для данного свойства зависимостей в том виде, в котором оно существует в предоставленном типе.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-266">Metadata was already established for the dependency property as it exists on the provided type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="OverrideMetadata">
      <MemberSignature Language="C#" Value="public void OverrideMetadata (Type forType, System.Windows.PropertyMetadata typeMetadata, System.Windows.DependencyPropertyKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OverrideMetadata(class System.Type forType, class System.Windows.PropertyMetadata typeMetadata, class System.Windows.DependencyPropertyKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata,System.Windows.DependencyPropertyKey)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OverrideMetadata (forType As Type, typeMetadata As PropertyMetadata, key As DependencyPropertyKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OverrideMetadata(Type ^ forType, System::Windows::PropertyMetadata ^ typeMetadata, System::Windows::DependencyPropertyKey ^ key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="key" Type="System.Windows.DependencyPropertyKey" />
      </Parameters>
      <Docs>
        <param name="forType">
          <span data-ttu-id="bdee9-267">Тип, где это свойство зависимостей наследуется и где будут применены указанные альтернативные метаданные.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-267">The type where this dependency property is inherited and where the provided alternate metadata will be applied.</span>
          </span>
        </param>
        <param name="typeMetadata">
          <span data-ttu-id="bdee9-268">Метаданные для применения к свойству зависимостей в переопределяемом типе.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-268">The metadata to apply to the dependency property on the overriding type.</span>
          </span>
        </param>
        <param name="key">
          <span data-ttu-id="bdee9-269">Ключ доступа для свойства зависимостей, доступного только для чтения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-269">The access key for a read-only dependency property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bdee9-270">Предоставляет альтернативные метаданные для свойства зависимостей, доступного только для чтения, когда оно присутствует в экземплярах указанного типа, переопределяя метаданные, предоставленные при первоначальной регистрации свойства зависимостей.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-270">Supplies alternate metadata for a read-only dependency property when it is present on instances of a specified type, overriding the metadata that was provided in the initial dependency property registration.</span>
          </span>
          <span data-ttu-id="bdee9-271">Для доступного только для чтения свойства зависимости необходимо передать <see cref="T:System.Windows.DependencyPropertyKey" />, чтобы избежать исключения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-271">You must pass the <see cref="T:System.Windows.DependencyPropertyKey" /> for the read-only dependency property to avoid raising an exception.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bdee9-272">Эта подпись предоставляет базовую реализацию для идентификатора свойства зависимости только для чтения (<xref:System.Windows.DependencyPropertyKey>) метод.</span><span class="sxs-lookup"><span data-stu-id="bdee9-272">This signature provides underlying implementation for a read-only dependency property identifier (<xref:System.Windows.DependencyPropertyKey>) method.</span></span> <span data-ttu-id="bdee9-273">Для переопределения метаданных для свойства зависимостей для чтения и записи, используйте <xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29>.</span><span class="sxs-lookup"><span data-stu-id="bdee9-273">If overriding metadata for a read-write dependency property, use <xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29>.</span></span>  
  
 <span data-ttu-id="bdee9-274">В системе свойств использует свойства зависимостей, следует переопределить метаданные свойства зависимостей.</span><span class="sxs-lookup"><span data-stu-id="bdee9-274">Dependency property metadata should be overridden before the property system uses the dependency property.</span></span> <span data-ttu-id="bdee9-275">Это равно времени создания конкретных объектов для класса, который регистрирует свойство зависимости.</span><span class="sxs-lookup"><span data-stu-id="bdee9-275">This equates to the time that specific objects are created for the class that registers the dependency property.</span></span> <span data-ttu-id="bdee9-276">Вызовы <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> следует выполнять только в статическом конструкторе типа, предоставляющего себя в качестве `forType` параметр этого метода, или с помощью аналогичные при создании экземпляра.</span><span class="sxs-lookup"><span data-stu-id="bdee9-276">Calls to <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> should only be performed within the static constructors of the type that provides itself as the `forType` parameter of this method, or through similar instantiation.</span></span> <span data-ttu-id="bdee9-277">Попытка изменить метаданные после экземпляров типа-владельца не возникнет исключения, но приведет к несогласованному поведению в системе свойств.</span><span class="sxs-lookup"><span data-stu-id="bdee9-277">Attempting to change metadata after instances of the owner type exist will not raise exceptions, but will result in inconsistent behaviors in the property system.</span></span>  
  
 <span data-ttu-id="bdee9-278">После установки с помощью этого метода метаданные для определенного производного класса переопределения последующие попытки переопределения метаданных на этом же производном классе вызывает исключение.</span><span class="sxs-lookup"><span data-stu-id="bdee9-278">After metadata for a particular derived class override is established with this method, subsequent attempts to override metadata on this same derived class will raise an exception.</span></span>  
  
 <span data-ttu-id="bdee9-279">Предоставленных метаданных объединяется с метаданными для свойства зависимостей, которое существует в базовом владельце.</span><span class="sxs-lookup"><span data-stu-id="bdee9-279">The supplied metadata is merged with the property metadata for the dependency property as it exists on the base owner.</span></span> <span data-ttu-id="bdee9-280">Характеристики, которые были указаны в исходных базовых метаданных будет сохранено; только характеристики, специально измененные в новых метаданных, переопределят характеристики базовых метаданных.</span><span class="sxs-lookup"><span data-stu-id="bdee9-280">Any characteristics that were specified in the original base metadata will persist; only those characteristics that were specifically changed in the new metadata will override the characteristics of the base metadata.</span></span> <span data-ttu-id="bdee9-281">Некоторые характеристики, такие как <xref:System.Windows.PropertyMetadata.DefaultValue%2A> заменяются, если он указан в новые метаданные.</span><span class="sxs-lookup"><span data-stu-id="bdee9-281">Some characteristics such as <xref:System.Windows.PropertyMetadata.DefaultValue%2A> are replaced if specified in the new metadata.</span></span> <span data-ttu-id="bdee9-282">Другие, такие как <xref:System.Windows.PropertyChangedCallback>, объединяются.</span><span class="sxs-lookup"><span data-stu-id="bdee9-282">Others, such as <xref:System.Windows.PropertyChangedCallback>, are combined.</span></span> <span data-ttu-id="bdee9-283">Поведение при объединении зависит от используемого для переопределения типа метаданных свойства.</span><span class="sxs-lookup"><span data-stu-id="bdee9-283">The merge behavior depends on the property metadata type being used for the override.</span></span> <span data-ttu-id="bdee9-284">Дополнительные сведения см. в разделе [метаданные свойства зависимостей](~/docs/framework/wpf/advanced/dependency-property-metadata.md) и [метаданных свойств среды](~/docs/framework/wpf/advanced/framework-property-metadata.md).</span><span class="sxs-lookup"><span data-stu-id="bdee9-284">For details, see [Dependency Property Metadata](~/docs/framework/wpf/advanced/dependency-property-metadata.md) and [Framework Property Metadata](~/docs/framework/wpf/advanced/framework-property-metadata.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnerType">
      <MemberSignature Language="C#" Value="public Type OwnerType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type OwnerType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.OwnerType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OwnerType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ OwnerType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="bdee9-285">Получает тип объекта, зарегистрировавшего свойство зависимостей в системе свойств или добавившего себя в качестве владельца свойства.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-285">Gets the type of the object that registered the dependency property with the property system, or added itself as owner of the property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="bdee9-286">Тип объекта, зарегистрировавшего свойство или добавившего себя в качестве владельца свойства.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-286">The type of the object that registered the property or added itself as owner of the property.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bdee9-287">Данное значение было указано во время регистрации свойства.</span><span class="sxs-lookup"><span data-stu-id="bdee9-287">This value was provided during property registration.</span></span> <span data-ttu-id="bdee9-288">Владельцем будет либо исходного регистрации типа в случае использования <xref:System.Windows.DependencyProperty> идентификатор, созданный из <xref:System.Windows.DependencyProperty.Register%2A> вызова или тип, добавившего себя в качестве владельца для <xref:System.Windows.DependencyProperty> идентификатор, созданный из <xref:System.Windows.DependencyProperty.AddOwner%2A> вызова.</span><span class="sxs-lookup"><span data-stu-id="bdee9-288">The owner will be either the original registering type in the case of a <xref:System.Windows.DependencyProperty> identifier generated from a <xref:System.Windows.DependencyProperty.Register%2A> call, or the type that added itself as owner in the case of a <xref:System.Windows.DependencyProperty> identifier generated from an <xref:System.Windows.DependencyProperty.AddOwner%2A> call.</span></span>  
  
 <span data-ttu-id="bdee9-289"><xref:System.Windows.DependencyProperty.OwnerType%2A> С заданным <xref:System.Windows.DependencyProperty> является постоянным и не может быть `null` в допустимое <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="bdee9-289">The <xref:System.Windows.DependencyProperty.OwnerType%2A> on any given <xref:System.Windows.DependencyProperty> is immutable, and cannot be `null` in a valid <xref:System.Windows.DependencyProperty>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bdee9-290">Следующий пример получает тип владельца, исходя из идентификатора свойства зависимости `dp`, а затем возвращает метаданные для типа владельца по тому же идентификатору.</span><span class="sxs-lookup"><span data-stu-id="bdee9-290">The following example gets the owner type based on a dependency property identifier `dp`, and then gets metadata on the owner type for that same identifier.</span></span> <span data-ttu-id="bdee9-291">Эта операция эквивалентно фактически получению <xref:System.Windows.DependencyProperty.DefaultMetadata%2A> на `dp`.</span><span class="sxs-lookup"><span data-stu-id="bdee9-291">This operation is actually equivalent to getting <xref:System.Windows.DependencyProperty.DefaultMetadata%2A> on `dp`.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyType">
      <MemberSignature Language="C#" Value="public Type PropertyType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type PropertyType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.PropertyType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PropertyType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ PropertyType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="bdee9-292">Возвращает тип, используемый свойством зависимостей для его значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-292">Gets the type that the dependency property uses for its value.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="bdee9-293">
            <see cref="T:System.Type" /> значения свойства.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-293">The <see cref="T:System.Type" /> of the property value.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bdee9-294">Это свойство сообщает тип значения свойства, объявленные в исходной регистрации свойства через `propertyType` параметра.</span><span class="sxs-lookup"><span data-stu-id="bdee9-294">This property reports the type of the property's value as declared by the original property registration, through the `propertyType` parameter.</span></span> <span data-ttu-id="bdee9-295">Аналогично <xref:System.Windows.DependencyProperty.Name%2A>, тип свойства для свойства зависимостей нельзя изменить после регистрации.</span><span class="sxs-lookup"><span data-stu-id="bdee9-295">Similar to the <xref:System.Windows.DependencyProperty.Name%2A>, the property type of a dependency property is immutable after registration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bdee9-296">В следующем примере запрашивается различные характеристики идентификатор свойства зависимостей, включая <xref:System.Windows.DependencyProperty.PropertyType%2A>.</span><span class="sxs-lookup"><span data-stu-id="bdee9-296">The following example queries various characteristics of a dependency property identifier, including the <xref:System.Windows.DependencyProperty.PropertyType%2A>.</span></span> <span data-ttu-id="bdee9-297">Строка имени типа <xref:System.Windows.DependencyProperty.PropertyType%2A> получается из возвращенного <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="bdee9-297">The type name string of the <xref:System.Windows.DependencyProperty.PropertyType%2A> is obtained from the returned <xref:System.Type>.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPProps](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpprops)]
 [!code-vb[PropertySystemEsoterics#DPProps](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpprops)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public bool ReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.ReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ReadOnly { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="bdee9-298">Возвращает значение, указывающее, является ли свойство зависимостей, идентифицируемое данным экземпляром <see cref="T:System.Windows.DependencyProperty" />, доступным только для чтения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-298">Gets a value that indicates whether the dependency property identified by this <see cref="T:System.Windows.DependencyProperty" /> instance is a read-only dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="bdee9-299">
            <see langword="true" />, если свойство зависимостей доступно только для чтения; в противном случае — <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-299">
              <see langword="true" /> if the dependency property is read-only; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bdee9-300">Свойства зависимости только для чтения зарегистрированного в системе свойств путем вызова метода <xref:System.Windows.DependencyProperty.RegisterReadOnly%2A> метода, в отличие от <xref:System.Windows.DependencyProperty.Register%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="bdee9-300">Read-only dependency properties are registered within the property system by calling the <xref:System.Windows.DependencyProperty.RegisterReadOnly%2A> method as opposed to the <xref:System.Windows.DependencyProperty.Register%2A> method.</span></span> <span data-ttu-id="bdee9-301">Вложенные свойства также можно зарегистрировать только для чтения; в разделе <xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A>.</span><span class="sxs-lookup"><span data-stu-id="bdee9-301">Attached properties can also be registered as read-only; see <xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A>.</span></span>  
  
 <span data-ttu-id="bdee9-302">Свойства зависимости только для чтения требуют <xref:System.Windows.DependencyPropertyKey> идентификатор, а не <xref:System.Windows.DependencyProperty> идентификатор для выполнения операций с метаданными, например переопределения метаданных или установка значения.</span><span class="sxs-lookup"><span data-stu-id="bdee9-302">Read-only dependency properties require a <xref:System.Windows.DependencyPropertyKey> identifier rather than a <xref:System.Windows.DependencyProperty> identifier to perform metadata operations such as overriding the metadata or setting the value.</span></span> <span data-ttu-id="bdee9-303">Если получить коллекцию <xref:System.Windows.DependencyProperty> идентификаторы посредством вызова <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> или другой [!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)] , предоставляющий идентификаторов, проверьте <xref:System.Windows.DependencyProperty.ReadOnly%2A> значение, прежде чем пытаться вызвать <xref:System.Windows.DependencyObject.SetValue%2A> или <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> , использование идентификатор для свойства зависимостей в качестве входного параметра, чтобы убедиться, что свойством зависимостей, которое представляет идентификатор не только для чтения.</span><span class="sxs-lookup"><span data-stu-id="bdee9-303">If you obtained a collection of <xref:System.Windows.DependencyProperty> identifiers through a call to <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> or another [!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)] that exposes identifiers, check the <xref:System.Windows.DependencyProperty.ReadOnly%2A> value before attempting to call <xref:System.Windows.DependencyObject.SetValue%2A> or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> using that dependency property identifier as an input parameter, to verify that the dependency property that the identifier represents is not read-only.</span></span> <span data-ttu-id="bdee9-304">Если значение <xref:System.Windows.DependencyProperty.ReadOnly%2A> — `true` для свойства зависимостей, нет возможности для получения ссылки на программный <xref:System.Windows.DependencyPropertyKey> идентификатора этого свойства зависимостей, из метаданных или <xref:System.Windows.DependencyProperty> идентификатор; идентификатор должен быть доступен как статическое поле для вызова <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29> для свойства зависимостей только для чтения.</span><span class="sxs-lookup"><span data-stu-id="bdee9-304">If the value of <xref:System.Windows.DependencyProperty.ReadOnly%2A> is `true` on a dependency property, there is no programmatic way to obtain a reference to the <xref:System.Windows.DependencyPropertyKey> identifier of that dependency property, from the metadata or from the <xref:System.Windows.DependencyProperty> identifier; the identifier must be available as a static field in order to call <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29> against a read-only dependency property.</span></span>  
  
 <span data-ttu-id="bdee9-305">При создании пользовательского свойства зависимостей и зарегистрируйте его только для чтения, следует определить только метод доступа get для [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] свойство программы-оболочки.</span><span class="sxs-lookup"><span data-stu-id="bdee9-305">When you create a custom dependency property, and register it as read-only, you should define only a get accessor for the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] wrapper property.</span></span> <span data-ttu-id="bdee9-306">В противном случае ваш класс будет иметь несогласованную объектную модель для обертки свойства, по сравнению с доступом к базовому свойству зависимостей.</span><span class="sxs-lookup"><span data-stu-id="bdee9-306">Otherwise, your class will have a confusing object model for the property wrapper as compared to the access to the backing dependency property.</span></span> <span data-ttu-id="bdee9-307">Дополнительные сведения см. в разделе [свойств зависимостей](~/docs/framework/wpf/advanced/custom-dependency-properties.md) или [свойства зависимости только для чтения](~/docs/framework/wpf/advanced/read-only-dependency-properties.md).</span><span class="sxs-lookup"><span data-stu-id="bdee9-307">For details, see [Custom Dependency Properties](~/docs/framework/wpf/advanced/custom-dependency-properties.md) or [Read-Only Dependency Properties](~/docs/framework/wpf/advanced/read-only-dependency-properties.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bdee9-308">В следующем примере получает метаданные по умолчанию и идентификатора свойства зависимостей из различных полей свойства зависимостей и использует сведения для заполнения таблицы и реализации «обозревателя метаданных».</span><span class="sxs-lookup"><span data-stu-id="bdee9-308">The following example obtains the default metadata and the dependency property identifier properties from various dependency property fields, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPProps](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpprops)]
 [!code-vb[PropertySystemEsoterics#DPProps](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpprops)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Register">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="bdee9-309">Регистрирует свойство зависимостей.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-309">Registers a dependency property.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty Register (string name, Type propertyType, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty Register(string name, class System.Type propertyType, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Register (name As String, propertyType As Type, ownerType As Type) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ Register(System::String ^ name, Type ^ propertyType, Type ^ ownerType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="bdee9-310">Имя регистрируемого свойства зависимостей.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-310">The name of the dependency property to register.</span>
          </span>
          <span data-ttu-id="bdee9-311">Имя должно быть уникальным в пределах пространства имен регистрации для типа владельца.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-311">The name must be unique within the registration namespace of the owner type.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="bdee9-312">Тип свойства.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-312">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="bdee9-313">Тип владельца, регистрирующий свойство зависимостей.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-313">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bdee9-314">Регистрирует свойство зависимостей с указанием имени свойства, типа свойства и типа владельца.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-314">Registers a dependency property with the specified property name, property type, and owner type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bdee9-315">Идентификатор свойства зависимостей, который следует использовать для задания значения поля <see langword="public static readonly" /> в классе.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-315">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span>
          </span>
          <span data-ttu-id="bdee9-316">Затем этот идентификатор используется для ссылки на свойство зависимостей для операций, например задания значения программным образом или получение метаданных.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-316">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bdee9-317">Дополнительные сведения о регистрации свойств зависимостей см. в разделе <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="bdee9-317">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
   
  
## Examples  
 [!code-csharp[WPFAquariumSln#Register3Param](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#register3param)]
 [!code-vb[WPFAquariumSln#Register3Param](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#register3param)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty Register (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty Register(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Register (name As String, propertyType As Type, ownerType As Type, typeMetadata As PropertyMetadata) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ Register(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="bdee9-318">Имя регистрируемого свойства зависимостей.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-318">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="bdee9-319">Тип свойства.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-319">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="bdee9-320">Тип владельца, регистрирующий свойство зависимостей.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-320">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <param name="typeMetadata">
          <span data-ttu-id="bdee9-321">Метаданные свойства зависимостей.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-321">Property metadata for the dependency property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bdee9-322">Регистрирует свойство зависимостей с указанным именем свойства, типом свойства, типом владельца и метаданными свойства.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-322">Registers a dependency property with the specified property name, property type, owner type, and property metadata.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bdee9-323">Идентификатор свойства зависимостей, который следует использовать для задания значения поля <see langword="public static readonly" /> в классе.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-323">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span>
          </span>
          <span data-ttu-id="bdee9-324">Затем этот идентификатор используется для ссылки на свойство зависимостей для операций, например задания значения программным образом или получение метаданных.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-324">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bdee9-325">Дополнительные сведения о регистрации свойств зависимостей см. в разделе <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="bdee9-325">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty Register (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata, System.Windows.ValidateValueCallback validateValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty Register(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata, class System.Windows.ValidateValueCallback validateValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ Register(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ typeMetadata, System::Windows::ValidateValueCallback ^ validateValueCallback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="validateValueCallback" Type="System.Windows.ValidateValueCallback" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="bdee9-326">Имя регистрируемого свойства зависимостей.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-326">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="bdee9-327">Тип свойства.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-327">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="bdee9-328">Тип владельца, регистрирующий свойство зависимостей.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-328">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <param name="typeMetadata">
          <span data-ttu-id="bdee9-329">Метаданные свойства зависимостей.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-329">Property metadata for the dependency property.</span>
          </span>
        </param>
        <param name="validateValueCallback">
          <span data-ttu-id="bdee9-330">Ссылка на обратный вызов, который должен выполнить пользовательскую проверку значения свойства зависимостей после обычной проверки типа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-330">A reference to a callback that should perform any custom validation of the dependency property value beyond typical type validation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bdee9-331">Регистрирует свойство зависимостей с указанным именем свойства, типом свойства, типом владельца, метаданными свойства и обратным вызовом проверки значения для свойства.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-331">Registers a dependency property with the specified property name, property type, owner type, property metadata, and a value validation callback for the property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bdee9-332">Идентификатор свойства зависимостей, который следует использовать для задания значения поля <see langword="public static readonly" /> в классе.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-332">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span>
          </span>
          <span data-ttu-id="bdee9-333">Затем этот идентификатор используется для ссылки на свойство зависимостей для операций, например задания значения программным образом или получение метаданных.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-333">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bdee9-334">Дополнительные сведения о регистрации свойств зависимостей см. в разделе <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="bdee9-334">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bdee9-335">В следующем примере регистрируется свойство зависимостей, включая обратный вызов проверки (определение обратного вызова не показано; Дополнительные сведения об определении обратного вызова см. в разделе <xref:System.Windows.ValidateValueCallback>).</span><span class="sxs-lookup"><span data-stu-id="bdee9-335">The following example registers a dependency property, including a validation callback (the callback definition is not shown; for details on the callback definition, see <xref:System.Windows.ValidateValueCallback>).</span></span>  
  
 [!code-csharp[DPCallbackOverride#CurrentDefinitionWithWrapper](~/samples/snippets/csharp/VS_Snippets_Wpf/DPCallbackOverride/CSharp/SDKSampleLibrary/class1.cs#currentdefinitionwithwrapper)]
 [!code-vb[DPCallbackOverride#CurrentDefinitionWithWrapper](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPCallbackOverride/visualbasic/sdksamplelibrary/class1.vb#currentdefinitionwithwrapper)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterAttached">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="bdee9-336">Регистрирует присоединенное свойство в системе свойств.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-336">Registers an attached property with the property system.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterAttached">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty RegisterAttached (string name, Type propertyType, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty RegisterAttached(string name, class System.Type propertyType, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterAttached (name As String, propertyType As Type, ownerType As Type) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ RegisterAttached(System::String ^ name, Type ^ propertyType, Type ^ ownerType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="bdee9-337">Имя регистрируемого свойства зависимостей.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-337">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="bdee9-338">Тип свойства.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-338">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="bdee9-339">Тип владельца, регистрирующий свойство зависимостей.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-339">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bdee9-340">Регистрирует присоединенное свойство с указанием имени свойства, типа свойства и типа владельца.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-340">Registers an attached property with the specified property name, property type, and owner type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bdee9-341">Идентификатор свойства зависимостей, который следует использовать для задания значения поля <see langword="public static readonly" /> в классе.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-341">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span>
          </span>
          <span data-ttu-id="bdee9-342">Затем этот идентификатор используется для ссылки на свойство зависимостей для операций, например задания значения программным образом или получение метаданных.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-342">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bdee9-343">Вложенное свойство является свойством понятием [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="bdee9-343">An attached property is a property concept defined by [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)].</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]<span data-ttu-id="bdee9-344"> реализует вложенные свойства как свойства зависимости.</span><span class="sxs-lookup"><span data-stu-id="bdee9-344"> implements attached properties as dependency properties.</span></span> <span data-ttu-id="bdee9-345">Поскольку [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] вложенные свойства являются свойствами зависимости, они могут быть применены метаданные, который может использоваться для операции, такие как сообщение о характеристиках структуры системой общих свойств.</span><span class="sxs-lookup"><span data-stu-id="bdee9-345">Because the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] attached properties are dependency properties, they can have metadata applied that can be used by the general property system for operations such as reporting layout characteristics.</span></span> <span data-ttu-id="bdee9-346">Дополнительные сведения см. в разделе [Общие сведения о вложенных свойствах](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span><span class="sxs-lookup"><span data-stu-id="bdee9-346">For more information, see [Attached Properties Overview](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span></span>  
  
 <span data-ttu-id="bdee9-347">Дополнительные сведения о регистрации свойств зависимостей см. в разделе <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="bdee9-347">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bdee9-348">В следующем примере регистрируется вложенное свойство для абстрактного класса с помощью этого <xref:System.Windows.DependencyProperty.RegisterAttached%2A> подписи.</span><span class="sxs-lookup"><span data-stu-id="bdee9-348">The following example registers an attached property on an abstract class using this <xref:System.Windows.DependencyProperty.RegisterAttached%2A> signature.</span></span>  
  
 [!code-csharp[WPFAquariumSln#RegisterAttachedBubbler2](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#registerattachedbubbler2)]
 [!code-vb[WPFAquariumSln#RegisterAttachedBubbler2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#registerattachedbubbler2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterAttached">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty RegisterAttached (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty RegisterAttached(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata defaultMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterAttached (name As String, propertyType As Type, ownerType As Type, defaultMetadata As PropertyMetadata) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ RegisterAttached(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ defaultMetadata);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="defaultMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="bdee9-349">Имя регистрируемого свойства зависимостей.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-349">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="bdee9-350">Тип свойства.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-350">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="bdee9-351">Тип владельца, регистрирующий свойство зависимостей.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-351">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <param name="defaultMetadata">
          <span data-ttu-id="bdee9-352">Метаданные свойства зависимостей.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-352">Property metadata for the dependency property.</span>
          </span>
          <span data-ttu-id="bdee9-353">Могут включать значение по умолчанию и другие характеристики.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-353">This can include the default value as well as other characteristics.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bdee9-354">Регистрирует присоединенное свойство с указанным именем и типом свойства, типом владельца и метаданными свойства.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-354">Registers an attached property with the specified property name, property type, owner type, and property metadata.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bdee9-355">Идентификатор свойства зависимостей, который следует использовать для задания значения поля <see langword="public static readonly" /> в классе.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-355">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span>
          </span>
          <span data-ttu-id="bdee9-356">Затем этот идентификатор используется для ссылки на свойство зависимостей для операций, например задания значения программным образом или получение метаданных.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-356">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bdee9-357">Вложенное свойство является свойством понятием [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="bdee9-357">An attached property is a property concept defined by [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)].</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]<span data-ttu-id="bdee9-358"> реализует вложенные свойства как свойства зависимости.</span><span class="sxs-lookup"><span data-stu-id="bdee9-358"> implements attached properties as dependency properties.</span></span> <span data-ttu-id="bdee9-359">Поскольку [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] вложенные свойства являются свойствами зависимости, они могут быть применены метаданные, который может использоваться для операции, такие как сообщение о характеристиках структуры системой общих свойств.</span><span class="sxs-lookup"><span data-stu-id="bdee9-359">Because the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] attached properties are dependency properties, they can have metadata applied that can be used by the general property system for operations such as reporting layout characteristics.</span></span> <span data-ttu-id="bdee9-360">Дополнительные сведения см. в разделе [Общие сведения о вложенных свойствах](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span><span class="sxs-lookup"><span data-stu-id="bdee9-360">For more information, see [Attached Properties Overview](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span></span>  
  
 <span data-ttu-id="bdee9-361">Дополнительные сведения о регистрации свойств зависимостей см. в разделе <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="bdee9-361">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
## <a name="use-registerattached-for-value-inheriting-dependency-properties"></a><span data-ttu-id="bdee9-362">Использование RegisterAttached для наследования значения свойств зависимостей</span><span class="sxs-lookup"><span data-stu-id="bdee9-362">Use RegisterAttached for Value-inheriting Dependency Properties</span></span>  
 <span data-ttu-id="bdee9-363">Один из сценариев для регистрации свойства зависимостей с <xref:System.Windows.DependencyProperty.RegisterAttached%2A> вместо <xref:System.Windows.DependencyProperty.Register%2A> предназначен для поддержки наследования значения свойства.</span><span class="sxs-lookup"><span data-stu-id="bdee9-363">One particular scenario for registering a dependency property with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> instead of <xref:System.Windows.DependencyProperty.Register%2A> is to support property value inheritance.</span></span> <span data-ttu-id="bdee9-364">Необходимо зарегистрировать наследование значения свойства зависимостей с <xref:System.Windows.DependencyProperty.RegisterAttached%2A> даже если класс определяет оболочку свойствам, которые предоставляют свойство зависимостей, и даже если не требуется предоставлять Get * и набор * статические методы для предоставления присоединенного значение true Поддержка доступа к свойствам.</span><span class="sxs-lookup"><span data-stu-id="bdee9-364">You should register value-inheriting dependency properties with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> even if the class defines property wrapper accessors that expose the dependency property, and even if you do not intend to expose Get* and Set* static methods to provide true attached property support accessors.</span></span>   <span data-ttu-id="bdee9-365">Несмотря на то, что наследование значения свойства могут быть выполнены для неприсоединенных свойств зависимости, поведение наследования для неприсоединенного свойства в определенных границах элемента в дереве среды выполнения не определено.</span><span class="sxs-lookup"><span data-stu-id="bdee9-365">Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain element boundaries in the runtime tree is undefined.</span></span> <span data-ttu-id="bdee9-366">Регистрация свойства как вложенного фактически делает вложенное свойство глобальным для системы свойств и гарантирует, что наследование значения свойства работает через все границы в дереве элементов.</span><span class="sxs-lookup"><span data-stu-id="bdee9-366">Registering the property as attached effectively makes the attached property a global property to the property system, and assures that property value inheritance works across all boundaries in an element tree.</span></span> <span data-ttu-id="bdee9-367">Всегда используйте <xref:System.Windows.DependencyProperty.RegisterAttached%2A> для регистрации свойства, где указываются <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> в метаданных.</span><span class="sxs-lookup"><span data-stu-id="bdee9-367">Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata.</span></span> <span data-ttu-id="bdee9-368">Дополнительные сведения см. в разделе [Наследование значения свойства](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span><span class="sxs-lookup"><span data-stu-id="bdee9-368">For more information, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterAttached">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty RegisterAttached (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata, System.Windows.ValidateValueCallback validateValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty RegisterAttached(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata defaultMetadata, class System.Windows.ValidateValueCallback validateValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ RegisterAttached(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ defaultMetadata, System::Windows::ValidateValueCallback ^ validateValueCallback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="defaultMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="validateValueCallback" Type="System.Windows.ValidateValueCallback" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="bdee9-369">Имя регистрируемого свойства зависимостей.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-369">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="bdee9-370">Тип свойства.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-370">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="bdee9-371">Тип владельца, регистрирующий свойство зависимостей.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-371">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <param name="defaultMetadata">
          <span data-ttu-id="bdee9-372">Метаданные свойства зависимостей.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-372">Property metadata for the dependency property.</span>
          </span>
          <span data-ttu-id="bdee9-373">Могут включать значение по умолчанию и другие характеристики.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-373">This can include the default value as well as other characteristics.</span>
          </span>
        </param>
        <param name="validateValueCallback">
          <span data-ttu-id="bdee9-374">Ссылка на обратный вызов, который должен выполнить пользовательскую проверку значения свойства зависимостей после обычной проверки типа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-374">A reference to a callback that should perform any custom validation of the dependency property value beyond typical type validation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bdee9-375">Регистрирует присоединенное свойство с указанным типом свойства, типом владельца, метаданными свойства и обратным вызовом для проверки значения свойства.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-375">Registers an attached property with the specified property type, owner type, property metadata, and value validation callback for the property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bdee9-376">Идентификатор свойства зависимостей, который следует использовать для задания значения поля <see langword="public static readonly" /> в классе.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-376">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span>
          </span>
          <span data-ttu-id="bdee9-377">Затем этот идентификатор используется для ссылки на свойство зависимостей для операций, например задания значения программным образом или получение метаданных.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-377">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bdee9-378">Вложенное свойство является свойством понятием [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="bdee9-378">An attached property is a property concept defined by [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)].</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]<span data-ttu-id="bdee9-379"> реализует вложенные свойства как свойства зависимости.</span><span class="sxs-lookup"><span data-stu-id="bdee9-379"> implements attached properties as dependency properties.</span></span> <span data-ttu-id="bdee9-380">Поскольку [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] вложенные свойства являются свойствами зависимости, они могут быть применены метаданные, который может использоваться для операции, такие как сообщение о характеристиках структуры системой общих свойств.</span><span class="sxs-lookup"><span data-stu-id="bdee9-380">Because the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] attached properties are dependency properties, they can have metadata applied that can be used by the general property system for operations such as reporting layout characteristics.</span></span> <span data-ttu-id="bdee9-381">Дополнительные сведения см. в разделе [Общие сведения о вложенных свойствах](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span><span class="sxs-lookup"><span data-stu-id="bdee9-381">For more information, see [Attached Properties Overview](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span></span>  
  
 <span data-ttu-id="bdee9-382">Дополнительные сведения о регистрации свойств зависимостей см. в разделе <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="bdee9-382">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
## <a name="use-registerattached-for-value-inheriting-dependency-properties"></a><span data-ttu-id="bdee9-383">Использование RegisterAttached для наследования значения свойств зависимостей</span><span class="sxs-lookup"><span data-stu-id="bdee9-383">Use RegisterAttached for Value-inheriting Dependency Properties</span></span>  
 <span data-ttu-id="bdee9-384">Один из сценариев для регистрации свойства зависимостей с <xref:System.Windows.DependencyProperty.RegisterAttached%2A> вместо <xref:System.Windows.DependencyProperty.Register%2A> предназначен для поддержки наследования значения свойства.</span><span class="sxs-lookup"><span data-stu-id="bdee9-384">One particular scenario for registering a dependency property with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> instead of <xref:System.Windows.DependencyProperty.Register%2A> is to support property value inheritance.</span></span> <span data-ttu-id="bdee9-385">Необходимо зарегистрировать наследование значения свойства зависимостей с <xref:System.Windows.DependencyProperty.RegisterAttached%2A> даже если класс определяет оболочку свойствам, которые предоставляют свойство зависимостей, и даже если не требуется предоставлять Get * и набор * статические методы для предоставления присоединенного значение true Поддержка доступа к свойствам.</span><span class="sxs-lookup"><span data-stu-id="bdee9-385">You should register value-inheriting dependency properties with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> even if the class defines property wrapper accessors that expose the dependency property, and even if you do not intend to expose Get* and Set* static methods to provide true attached property support accessors.</span></span>   <span data-ttu-id="bdee9-386">Несмотря на то, что наследование значения свойства могут быть выполнены для неприсоединенных свойств зависимости, поведение наследования для неприсоединенного свойства в определенных границах элемента в дереве среды выполнения не определено.</span><span class="sxs-lookup"><span data-stu-id="bdee9-386">Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain element boundaries in the runtime tree is undefined.</span></span> <span data-ttu-id="bdee9-387">Регистрация свойства как вложенного фактически делает вложенное свойство глобальным для системы свойств и гарантирует, что наследование значения свойства работает через все границы в дереве элементов.</span><span class="sxs-lookup"><span data-stu-id="bdee9-387">Registering the property as attached effectively makes the attached property a global property to the property system, and assures that property value inheritance works across all boundaries in an element tree.</span></span> <span data-ttu-id="bdee9-388">Всегда используйте <xref:System.Windows.DependencyProperty.RegisterAttached%2A> для регистрации свойства, где указываются <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> в метаданных.</span><span class="sxs-lookup"><span data-stu-id="bdee9-388">Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata.</span></span> <span data-ttu-id="bdee9-389">Дополнительные сведения см. в разделе [Наследование значения свойства](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span><span class="sxs-lookup"><span data-stu-id="bdee9-389">For more information, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bdee9-390">В следующем примере регистрируется вложенное свойство для абстрактного класса с помощью этого <xref:System.Windows.DependencyProperty.RegisterAttached%2A> подписи.</span><span class="sxs-lookup"><span data-stu-id="bdee9-390">The following example registers an attached property on an abstract class using this <xref:System.Windows.DependencyProperty.RegisterAttached%2A> signature.</span></span> <span data-ttu-id="bdee9-391">Это вложенное свойство является свойством типа перечисления и при регистрации добавляется обратный вызов проверки для проверки, предоставленное значение является значением перечисления.</span><span class="sxs-lookup"><span data-stu-id="bdee9-391">This attached property is an enumeration type property, and the registration adds a validation callback to verify that the provided value is a value of the enumeration.</span></span>  
  
 [!code-csharp[WPFAquariumSln#RegisterAttachedBubbler2](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#registerattachedbubbler2)]
 [!code-vb[WPFAquariumSln#RegisterAttachedBubbler2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#registerattachedbubbler2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterAttachedReadOnly">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="bdee9-392">Регистрирует присоединенное свойство зависимостей, предназначенное только для чтения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-392">Registers a read-only attached property.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterAttachedReadOnly">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyPropertyKey RegisterAttachedReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyPropertyKey RegisterAttachedReadOnly(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata defaultMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterAttachedReadOnly (name As String, propertyType As Type, ownerType As Type, defaultMetadata As PropertyMetadata) As DependencyPropertyKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyPropertyKey ^ RegisterAttachedReadOnly(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ defaultMetadata);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="defaultMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="bdee9-393">Имя регистрируемого свойства зависимостей.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-393">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="bdee9-394">Тип свойства.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-394">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="bdee9-395">Тип владельца, регистрирующий свойство зависимостей.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-395">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <param name="defaultMetadata">
          <span data-ttu-id="bdee9-396">Метаданные свойства зависимостей.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-396">Property metadata for the dependency property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bdee9-397">Регистрирует доступное только для чтения присоединенное свойство с указанным типом свойства, типом владельца и метаданными свойства.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-397">Registers a read-only attached property, with the specified property type, owner type, and property metadata.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bdee9-398">Ключ свойства зависимостей, который следует использовать для задания значения статического доступного только для чтения поля в вашем классе, которое затем используется для ссылки на свойство зависимостей.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-398">A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property later.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bdee9-399">Этот метод возвращает тип <xref:System.Windows.DependencyPropertyKey>, тогда как <xref:System.Windows.DependencyProperty.RegisterAttached%2A> возвращает тип <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="bdee9-399">This method returns the type <xref:System.Windows.DependencyPropertyKey>, whereas <xref:System.Windows.DependencyProperty.RegisterAttached%2A> returns the type <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="bdee9-400">Как правило, ключи, представляющие свойства только для чтения не становятся открытым, поскольку ключи можно использовать для задания значения свойства зависимостей, вызвав <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="bdee9-400">Typically, the keys that represent read-only properties are not made public, because the keys can be used to set the dependency property value by calling <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span></span> <span data-ttu-id="bdee9-401">Структура класса повлияет вашим требованиям, но обычно рекомендуется ограничить доступ и видимость любого <xref:System.Windows.DependencyPropertyKey> для только те части кода, которые необходимы для установки этого свойства зависимостей как часть логики класса или приложения.</span><span class="sxs-lookup"><span data-stu-id="bdee9-401">Your class design will affect your requirements, but it is generally recommended to limit the access and visibility of any <xref:System.Windows.DependencyPropertyKey> to only those parts of your code that are necessary to set that dependency property as part of class or application logic.</span></span> <span data-ttu-id="bdee9-402">Кроме того, рекомендуется предоставить идентификатор свойства зависимостей для свойства зависимостей только для чтения, обеспечивая значение <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> как `public static readonly` поля в вашем классе.</span><span class="sxs-lookup"><span data-stu-id="bdee9-402">It is also recommended that you expose a dependency property identifier for the read-only dependency property, by exposing the value of <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> as a `public static readonly` field on your class.</span></span>  
  
 <span data-ttu-id="bdee9-403">Вложенные свойства только для чтения используются редко, так как его использование в основной скрипт для вложенного свойства [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="bdee9-403">Read-only attached properties are a rare scenario, because the primary scenario for an attached property is its use in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span> <span data-ttu-id="bdee9-404">Без открытого переключателя невозможно задать присоединенное свойство в [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] синтаксиса.</span><span class="sxs-lookup"><span data-stu-id="bdee9-404">Without a public setter, an attached property cannot be set in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax.</span></span>  
  
 <span data-ttu-id="bdee9-405">Дополнительные сведения о регистрации свойств зависимостей см. в разделе <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="bdee9-405">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
## <a name="use-registerattached-for-value-inheriting-dependency-properties"></a><span data-ttu-id="bdee9-406">Использование RegisterAttached для наследования значения свойств зависимостей</span><span class="sxs-lookup"><span data-stu-id="bdee9-406">Use RegisterAttached for Value-inheriting Dependency Properties</span></span>  
 <span data-ttu-id="bdee9-407">Один из сценариев регистрации свойств зависимостей как вложенного заключается в поддержке наследования значения свойства.</span><span class="sxs-lookup"><span data-stu-id="bdee9-407">One particular scenario for registering a dependency property as attached is to support property value inheritance.</span></span> <span data-ttu-id="bdee9-408">Необходимо зарегистрировать наследование значения свойства зависимостей с <xref:System.Windows.DependencyProperty.RegisterAttached%2A> даже если класс определяет оболочку свойствам, которые предоставляют свойство зависимостей, и даже если не требуется предоставлять Get * и набор * статические методы для предоставления присоединенного значение true Поддержка доступа к свойствам.</span><span class="sxs-lookup"><span data-stu-id="bdee9-408">You should register value-inheriting dependency properties with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> even if the class defines property wrapper accessors that expose the dependency property, and even if you do not intend to expose Get* and Set* static methods to provide true attached property support accessors.</span></span>   <span data-ttu-id="bdee9-409">Несмотря на то, что наследование значения свойства могут быть выполнены для неприсоединенных свойств зависимости, поведение наследования для неприсоединенного свойства в определенных границах элемента в дереве среды выполнения не определено.</span><span class="sxs-lookup"><span data-stu-id="bdee9-409">Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain element boundaries in the runtime tree is undefined.</span></span> <span data-ttu-id="bdee9-410">Регистрация свойства как вложенного фактически делает вложенное свойство глобальным для системы свойств и гарантирует, что наследование значения свойства работает через все границы в дереве элементов.</span><span class="sxs-lookup"><span data-stu-id="bdee9-410">Registering the property as attached effectively makes the attached property a global property to the property system, and assures that property value inheritance works across all boundaries in an element tree.</span></span> <span data-ttu-id="bdee9-411">Всегда используйте <xref:System.Windows.DependencyProperty.RegisterAttached%2A> для регистрации свойства, где указываются <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> в метаданных.</span><span class="sxs-lookup"><span data-stu-id="bdee9-411">Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata.</span></span> <span data-ttu-id="bdee9-412">Дополнительные сведения см. в разделе [Наследование значения свойства](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span><span class="sxs-lookup"><span data-stu-id="bdee9-412">For more information, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterAttachedReadOnly">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyPropertyKey RegisterAttachedReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata, System.Windows.ValidateValueCallback validateValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyPropertyKey RegisterAttachedReadOnly(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata defaultMetadata, class System.Windows.ValidateValueCallback validateValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyPropertyKey ^ RegisterAttachedReadOnly(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ defaultMetadata, System::Windows::ValidateValueCallback ^ validateValueCallback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="defaultMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="validateValueCallback" Type="System.Windows.ValidateValueCallback" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="bdee9-413">Имя регистрируемого свойства зависимостей.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-413">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="bdee9-414">Тип свойства.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-414">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="bdee9-415">Тип владельца, регистрирующий свойство зависимостей.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-415">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <param name="defaultMetadata">
          <span data-ttu-id="bdee9-416">Метаданные свойства зависимостей.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-416">Property metadata for the dependency property.</span>
          </span>
        </param>
        <param name="validateValueCallback">
          <span data-ttu-id="bdee9-417">Ссылка на созданный пользователем обратный вызов, который должен выполнить пользовательскую проверку значения свойства зависимостей после обычной проверки типа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-417">A reference to a user-created callback that should perform any custom validation of the dependency property value beyond typical type validation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bdee9-418">Регистрирует доступное только для чтения присоединенное свойство с указанным типом свойства, типом владельца, метаданными свойства и обратным вызовом для проверки.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-418">Registers a read-only attached property, with the specified property type, owner type, property metadata, and a validation callback.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bdee9-419">Ключ свойства зависимостей, который следует использовать для задания значения статического доступного только для чтения поля в вашем классе, которое затем используется для ссылки на свойство зависимостей.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-419">A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bdee9-420">Этот метод возвращает тип <xref:System.Windows.DependencyPropertyKey>, тогда как <xref:System.Windows.DependencyProperty.RegisterAttached%2A> возвращает тип <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="bdee9-420">This method returns the type <xref:System.Windows.DependencyPropertyKey>, whereas <xref:System.Windows.DependencyProperty.RegisterAttached%2A> returns the type <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="bdee9-421">Как правило, ключи, представляющие тип <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="bdee9-421">Typically, the keys that represent the type <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="bdee9-422">Как правило, ключи, представляющие свойства только для чтения не становятся открытым, поскольку ключи можно использовать для задания значения свойства зависимостей, вызвав <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="bdee9-422">Typically, the keys that represent read-only properties are not made public, because the keys can be used to set the dependency property value by calling <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span></span> <span data-ttu-id="bdee9-423">Структура класса повлияет вашим требованиям, но обычно рекомендуется ограничить доступ и видимость любого <xref:System.Windows.DependencyPropertyKey> для только те части кода, которые необходимы для установки этого свойства зависимостей как часть логики класса или приложения.</span><span class="sxs-lookup"><span data-stu-id="bdee9-423">Your class design will affect your requirements, but it is generally recommended to limit the access and visibility of any <xref:System.Windows.DependencyPropertyKey> to only those parts of your code that are necessary to set that dependency property as part of class or application logic.</span></span> <span data-ttu-id="bdee9-424">Кроме того, рекомендуется предоставить идентификатор свойства зависимостей для свойства зависимостей только для чтения, обеспечивая значение <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> как `public static readonly` поля в вашем классе.</span><span class="sxs-lookup"><span data-stu-id="bdee9-424">It is also recommended that you expose a dependency property identifier for the read-only dependency property, by exposing the value of <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> as a `public static readonly` field on your class.</span></span>  
  
 <span data-ttu-id="bdee9-425">Вложенные свойства только для чтения используются редко, так как его использование в основной скрипт для вложенного свойства [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="bdee9-425">Read-only attached properties are a rare scenario, because the primary scenario for an attached property is its use in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span> <span data-ttu-id="bdee9-426">Без открытого переключателя невозможно задать присоединенное свойство в [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] синтаксиса.</span><span class="sxs-lookup"><span data-stu-id="bdee9-426">Without a public setter, an attached property cannot be set in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax.</span></span>  
  
 <span data-ttu-id="bdee9-427">Дополнительные сведения о регистрации свойств зависимостей см. в разделе <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="bdee9-427">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
## <a name="use-registerattached-for-value-inheriting-dependency-properties"></a><span data-ttu-id="bdee9-428">Использование RegisterAttached для наследования значения свойств зависимостей</span><span class="sxs-lookup"><span data-stu-id="bdee9-428">Use RegisterAttached for Value-inheriting Dependency Properties</span></span>  
 <span data-ttu-id="bdee9-429">Один из сценариев регистрации свойств зависимостей как подключенные вместо <xref:System.Windows.DependencyProperty.Register%2A> предназначен для поддержки наследования значения свойства.</span><span class="sxs-lookup"><span data-stu-id="bdee9-429">One particular scenario for registering a dependency property as attached instead of <xref:System.Windows.DependencyProperty.Register%2A> is to support property value inheritance.</span></span> <span data-ttu-id="bdee9-430">Необходимо зарегистрировать наследование значения свойства зависимостей с <xref:System.Windows.DependencyProperty.RegisterAttached%2A> даже если класс определяет оболочку свойствам, которые предоставляют свойство зависимостей, и даже если не требуется предоставлять Get * и набор * статические методы для предоставления присоединенного значение true Поддержка доступа к свойствам.</span><span class="sxs-lookup"><span data-stu-id="bdee9-430">You should register value-inheriting dependency properties with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> even if the class defines property wrapper accessors that expose the dependency property, and even if you do not intend to expose Get* and Set* static methods to provide true attached property support accessors.</span></span>   <span data-ttu-id="bdee9-431">Несмотря на то, что наследование значения свойства могут быть выполнены для неприсоединенных свойств зависимости, поведение наследования для неприсоединенного свойства в определенных границах элемента в дереве среды выполнения не определено.</span><span class="sxs-lookup"><span data-stu-id="bdee9-431">Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain element boundaries in the runtime tree is undefined.</span></span> <span data-ttu-id="bdee9-432">Регистрация свойства как вложенного фактически делает вложенное свойство глобальным для системы свойств и гарантирует, что наследование значения свойства работает через все границы в дереве элементов.</span><span class="sxs-lookup"><span data-stu-id="bdee9-432">Registering the property as attached effectively makes the attached property a global property to the property system, and assures that property value inheritance works across all boundaries in an element tree.</span></span> <span data-ttu-id="bdee9-433">Всегда используйте <xref:System.Windows.DependencyProperty.RegisterAttached%2A> для регистрации свойства, где указываются <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> в метаданных.</span><span class="sxs-lookup"><span data-stu-id="bdee9-433">Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata.</span></span> <span data-ttu-id="bdee9-434">Дополнительные сведения см. в разделе [Наследование значения свойства](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span><span class="sxs-lookup"><span data-stu-id="bdee9-434">For more information, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterReadOnly">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="bdee9-435">Регистрирует свойство зависимостей как свойство зависимостей только для чтения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-435">Registers a dependency property as a read-only dependency property.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterReadOnly">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyPropertyKey RegisterReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyPropertyKey RegisterReadOnly(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterReadOnly (name As String, propertyType As Type, ownerType As Type, typeMetadata As PropertyMetadata) As DependencyPropertyKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyPropertyKey ^ RegisterReadOnly(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="bdee9-436">Имя регистрируемого свойства зависимостей.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-436">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="bdee9-437">Тип свойства.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-437">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="bdee9-438">Тип владельца, регистрирующий свойство зависимостей.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-438">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <param name="typeMetadata">
          <span data-ttu-id="bdee9-439">Метаданные свойства зависимостей.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-439">Property metadata for the dependency property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bdee9-440">Регистрирует доступное только для чтения свойство зависимостей с указанным типом свойства, типом владельца и метаданными свойства.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-440">Registers a read-only dependency property, with the specified property type, owner type, and property metadata.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bdee9-441">Ключ свойства зависимостей, который следует использовать для задания значения статического доступного только для чтения поля в вашем классе, которое затем используется для ссылки на свойство зависимостей.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-441">A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bdee9-442">Этот метод возвращает тип <xref:System.Windows.DependencyPropertyKey>, тогда как <xref:System.Windows.DependencyProperty.RegisterAttached%2A> возвращает тип <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="bdee9-442">This method returns the type <xref:System.Windows.DependencyPropertyKey>, whereas <xref:System.Windows.DependencyProperty.RegisterAttached%2A> returns the type <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="bdee9-443">Как правило, ключи, представляющие свойства только для чтения не становятся открытым, поскольку ключи можно использовать для задания значения свойства зависимостей, вызвав <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="bdee9-443">Typically, the keys that represent read-only properties are not made public, because the keys can be used to set the dependency property value by calling <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span></span> <span data-ttu-id="bdee9-444">Структура класса повлияет вашим требованиям, но обычно рекомендуется ограничить доступ и видимость любого <xref:System.Windows.DependencyPropertyKey> для только те части кода, которые необходимы для установки этого свойства зависимостей как часть логики класса или приложения.</span><span class="sxs-lookup"><span data-stu-id="bdee9-444">Your class design will affect your requirements, but it is generally recommended to limit the access and visibility of any <xref:System.Windows.DependencyPropertyKey> to only those parts of your code that are necessary to set that dependency property as part of class or application logic.</span></span> <span data-ttu-id="bdee9-445">Кроме того, рекомендуется предоставить идентификатор свойства зависимостей для свойства зависимостей только для чтения, обеспечивая значение <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> как `public static readonly` поля в вашем классе.</span><span class="sxs-lookup"><span data-stu-id="bdee9-445">It is also recommended that you expose a dependency property identifier for the read-only dependency property, by exposing the value of <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> as a `public static readonly` field on your class.</span></span>  
  
 <span data-ttu-id="bdee9-446">Свойства зависимости только для чтения, это весьма распространенный сценарий как в существующем [!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)] и сценарии настройки, так как другие [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] функциям может требоваться свойство зависимостей, даже если это свойство не планируется сделать доступным для установки по вызывающие объекты.</span><span class="sxs-lookup"><span data-stu-id="bdee9-446">Read-only dependency properties are a fairly typical scenario both in the existing [!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)] and for customization scenarios, because other [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] features might require a dependency property even if that property is not intended to be settable by callers.</span></span> <span data-ttu-id="bdee9-447">Значение свойства зависимости только для чтения можно использовать как основу для других операций системы свойств, принимающих свойство зависимостей, например основан <xref:System.Windows.Trigger> для свойства зависимостей в стиле.</span><span class="sxs-lookup"><span data-stu-id="bdee9-447">You can use the value of a read-only dependency property as the basis for other property system operations that take a dependency property, such as basing a <xref:System.Windows.Trigger> on the dependency property in a style.</span></span>  
  
 <span data-ttu-id="bdee9-448">Дополнительные сведения о регистрации свойств зависимостей см. в разделе <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="bdee9-448">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bdee9-449">В следующем примере регистрируется `AquariumSize` свойство зависимостей только для чтения.</span><span class="sxs-lookup"><span data-stu-id="bdee9-449">The following example registers an `AquariumSize` dependency property as read-only.</span></span> <span data-ttu-id="bdee9-450">В примере определяется `AquariumSizeKey` как внутренний ключ (, чтобы другие классы в сборке могли переопределять метаданные) и предоставляет идентификатор свойства зависимостей на основе такого ключа как `AquariumSizeProperty`.</span><span class="sxs-lookup"><span data-stu-id="bdee9-450">The example defines `AquariumSizeKey` as an internal key (so that other classes in the assembly could override metadata) and exposes the dependency property identifier based on that key as `AquariumSizeProperty`.</span></span> <span data-ttu-id="bdee9-451">Кроме того, создается программа-оболочка для `AquariumSize`, с помощью только метод доступа get.</span><span class="sxs-lookup"><span data-stu-id="bdee9-451">Also, a wrapper is created for `AquariumSize`, with only a get accessor.</span></span>  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterReadOnly">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyPropertyKey RegisterReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata, System.Windows.ValidateValueCallback validateValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyPropertyKey RegisterReadOnly(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata, class System.Windows.ValidateValueCallback validateValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyPropertyKey ^ RegisterReadOnly(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ typeMetadata, System::Windows::ValidateValueCallback ^ validateValueCallback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="validateValueCallback" Type="System.Windows.ValidateValueCallback" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="bdee9-452">Имя регистрируемого свойства зависимостей.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-452">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="bdee9-453">Тип свойства.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-453">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="bdee9-454">Тип владельца, регистрирующий свойство зависимостей.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-454">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <param name="typeMetadata">
          <span data-ttu-id="bdee9-455">Метаданные свойства зависимостей.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-455">Property metadata for the dependency property.</span>
          </span>
        </param>
        <param name="validateValueCallback">
          <span data-ttu-id="bdee9-456">Ссылка на созданный пользователем обратный вызов, который должен выполнить пользовательскую проверку значения свойства зависимостей после обычной проверки типа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-456">A reference to a user-created callback that should perform any custom validation of the dependency property value beyond typical type validation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bdee9-457">Регистрирует доступное только для чтения свойство зависимостей с указанным типом свойства, типом владельца, метаданными свойства и обратным вызовом для проверки.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-457">Registers a read-only dependency property, with the specified property type, owner type, property metadata, and a validation callback.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bdee9-458">Ключ свойства зависимостей, который следует использовать для задания значения статического доступного только для чтения поля в вашем классе, которое затем используется для ссылки на свойство зависимостей.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-458">A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property later.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bdee9-459">Этот метод возвращает тип <xref:System.Windows.DependencyPropertyKey>, тогда как <xref:System.Windows.DependencyProperty.RegisterAttached%2A> возвращает тип <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="bdee9-459">This method returns the type <xref:System.Windows.DependencyPropertyKey>, whereas <xref:System.Windows.DependencyProperty.RegisterAttached%2A> returns the type <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="bdee9-460">Как правило, ключи, представляющие свойства только для чтения не становятся открытым, поскольку ключи можно использовать для задания значения свойства зависимостей, вызвав <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="bdee9-460">Typically, the keys that represent read-only properties are not made public, because the keys can be used to set the dependency property value by calling <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span></span> <span data-ttu-id="bdee9-461">Структура класса повлияет вашим требованиям, но обычно рекомендуется ограничить доступ и видимость любого <xref:System.Windows.DependencyPropertyKey> для только те части кода, которые необходимы для установки этого свойства зависимостей как часть логики класса или приложения.</span><span class="sxs-lookup"><span data-stu-id="bdee9-461">Your class design will affect your requirements, but it is generally recommended to limit the access and visibility of any <xref:System.Windows.DependencyPropertyKey> to only those parts of your code that are necessary to set that dependency property as part of class or application logic.</span></span> <span data-ttu-id="bdee9-462">Кроме того, рекомендуется предоставить идентификатор свойства зависимостей для свойства зависимостей только для чтения, обеспечивая значение <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> как `public static readonly` поля в вашем классе.</span><span class="sxs-lookup"><span data-stu-id="bdee9-462">It is also recommended that you expose a dependency property identifier for the read-only dependency property, by exposing the value of <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> as a `public static readonly` field on your class.</span></span>  
  
 <span data-ttu-id="bdee9-463">Свойства зависимости только для чтения — это весьма распространенный сценарий.</span><span class="sxs-lookup"><span data-stu-id="bdee9-463">Read-only dependency properties are a fairly typical scenario.</span></span> <span data-ttu-id="bdee9-464">Значение свойства зависимости только для чтения можно использовать как основу для других операций системы свойств, принимающих свойство зависимостей, например основан <xref:System.Windows.Trigger> для свойства зависимостей в стиле.</span><span class="sxs-lookup"><span data-stu-id="bdee9-464">You can use the value of a read-only dependency property as the basis for other property system operations that take a dependency property, such as basing a <xref:System.Windows.Trigger> on the dependency property in a style.</span></span>  
  
 <span data-ttu-id="bdee9-465">Дополнительные сведения о регистрации свойств зависимостей см. в разделе <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="bdee9-465">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
 <span data-ttu-id="bdee9-466">Проверка на доступное только для чтения свойство зависимостей может быть менее важна.</span><span class="sxs-lookup"><span data-stu-id="bdee9-466">Validation on a read-only dependency property might be less important.</span></span> <span data-ttu-id="bdee9-467">Уровень доступа к закрытым, заданный для ключа снижает вероятность произвольного недопустимого ввода.</span><span class="sxs-lookup"><span data-stu-id="bdee9-467">The nonpublic access level you specify for the key reduces the likelihood for arbitrary invalid input.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="bdee9-468">Возвращает строковое представление свойства зависимостей.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-468">Returns the string representation of the dependency property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bdee9-469">Строковое представление свойства зависимостей.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-469">The string representation of the dependency property.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bdee9-470">Эта реализация возвращает <xref:System.Windows.DependencyProperty.Name%2A> значение свойства.</span><span class="sxs-lookup"><span data-stu-id="bdee9-470">This implementation returns the <xref:System.Windows.DependencyProperty.Name%2A> property value.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.DependencyProperty.Name" />
      </Docs>
    </Member>
    <Member MemberName="UnsetValue">
      <MemberSignature Language="C#" Value="public static readonly object UnsetValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly object UnsetValue" />
      <MemberSignature Language="DocId" Value="F:System.Windows.DependencyProperty.UnsetValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UnsetValue As Object " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Object ^ UnsetValue;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="bdee9-471">Задает статическое значение, используемое системой свойств [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] вместо <see langword="null" /> для указания того, что свойство существует, но его значение не задано системой свойств.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-471">Specifies a static value that is used by the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system rather than <see langword="null" /> to indicate that the property exists, but does not have its value set by the property system.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bdee9-472"><xref:System.Windows.DependencyProperty.UnsetValue> имеет значение-метку, который используется для сценариев, где [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] системы свойств не может определить запрошенный <xref:System.Windows.DependencyProperty> значение.</span><span class="sxs-lookup"><span data-stu-id="bdee9-472"><xref:System.Windows.DependencyProperty.UnsetValue> is a sentinel value that is used for scenarios where the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system is unable to determine a requested <xref:System.Windows.DependencyProperty> value.</span></span> <span data-ttu-id="bdee9-473"><xref:System.Windows.DependencyProperty.UnsetValue> используется вместо `null`, так как `null` может быть является допустимым значением свойства, а также является допустимым (и часто используемые) <xref:System.Windows.PropertyMetadata.DefaultValue%2A>.</span><span class="sxs-lookup"><span data-stu-id="bdee9-473"><xref:System.Windows.DependencyProperty.UnsetValue> is used rather than `null`, because `null` could be a valid property value, as well as a valid (and frequently used) <xref:System.Windows.PropertyMetadata.DefaultValue%2A>.</span></span>  
  
 <span data-ttu-id="bdee9-474"><xref:System.Windows.DependencyProperty.UnsetValue> никогда не возвращается из <xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="bdee9-474"><xref:System.Windows.DependencyProperty.UnsetValue> is never returned out of <xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="bdee9-475">При вызове <xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=nameWithType> для свойства зависимостей на <xref:System.Windows.DependencyObject> применяется экземпляр, одно из следующих:</span><span class="sxs-lookup"><span data-stu-id="bdee9-475">When you call <xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=nameWithType> on a dependency property on a <xref:System.Windows.DependencyObject> instance, one of the following applies:</span></span>  
  
-   <span data-ttu-id="bdee9-476">Свойство зависимости имеет значение по умолчанию, установленное в метаданных и возвращается это значение.</span><span class="sxs-lookup"><span data-stu-id="bdee9-476">A dependency property has a default value established in metadata and that value is returned.</span></span> <span data-ttu-id="bdee9-477">Это значение может быть получено из <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>.</span><span class="sxs-lookup"><span data-stu-id="bdee9-477">This value might come from <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>.</span></span>  
  
-   <span data-ttu-id="bdee9-478">Системой свойств установлено другое значение и значение по умолчанию больше не нужны.</span><span class="sxs-lookup"><span data-stu-id="bdee9-478">Some other value was established by the property system, and the default value is no longer relevant.</span></span> <span data-ttu-id="bdee9-479">Дополнительные сведения см. в разделе [Приоритет значений свойств зависимостей](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span><span class="sxs-lookup"><span data-stu-id="bdee9-479">For details, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
 <span data-ttu-id="bdee9-480">Установка <xref:System.Windows.PropertyMetadata.DefaultValue%2A> из <xref:System.Windows.DependencyProperty.UnsetValue> специально не разрешено.</span><span class="sxs-lookup"><span data-stu-id="bdee9-480">Setting a <xref:System.Windows.PropertyMetadata.DefaultValue%2A> of <xref:System.Windows.DependencyProperty.UnsetValue> is specifically disallowed.</span></span>  
  
 <span data-ttu-id="bdee9-481"><xref:System.Windows.DependencyObject.ReadLocalValue%2A?displayProperty=nameWithType> Возвращает <xref:System.Windows.DependencyProperty.UnsetValue> Если запрошенное свойство не задано локально.</span><span class="sxs-lookup"><span data-stu-id="bdee9-481"><xref:System.Windows.DependencyObject.ReadLocalValue%2A?displayProperty=nameWithType> returns <xref:System.Windows.DependencyProperty.UnsetValue> when the requested property has not been locally set.</span></span>  
  
 <span data-ttu-id="bdee9-482"><xref:System.Windows.DependencyProperty.UnsetValue> имеет особое значение при использовании в качестве возвращаемого значения <xref:System.Windows.CoerceValueCallback>.</span><span class="sxs-lookup"><span data-stu-id="bdee9-482"><xref:System.Windows.DependencyProperty.UnsetValue> has a special meaning when used as the return value of a <xref:System.Windows.CoerceValueCallback>.</span></span> <span data-ttu-id="bdee9-483">Дополнительные сведения см. в разделе [обратных вызовах свойства зависимости и проверки](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span><span class="sxs-lookup"><span data-stu-id="bdee9-483">For details, see [Dependency Property Callbacks and Validation](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span></span>  
  
 <span data-ttu-id="bdee9-484">При привязке к базе данных, обратите внимание, что <xref:System.Windows.DependencyProperty.UnsetValue> не эквивалентен <xref:System.DBNull.Value>, аналогично тому, как <xref:System.DBNull.Value> не соответствует параметру значение true, значение null.</span><span class="sxs-lookup"><span data-stu-id="bdee9-484">If you are binding to a database, note that <xref:System.Windows.DependencyProperty.UnsetValue> is not equivalent to <xref:System.DBNull.Value>, in a similar way to how <xref:System.DBNull.Value> is not equivalent to a true null.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateValueCallback">
      <MemberSignature Language="C#" Value="public System.Windows.ValidateValueCallback ValidateValueCallback { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.ValidateValueCallback ValidateValueCallback" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.ValidateValueCallback" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ValidateValueCallback As ValidateValueCallback" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::ValidateValueCallback ^ ValidateValueCallback { System::Windows::ValidateValueCallback ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.ValidateValueCallback</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="bdee9-485">Возвращает обратный вызов для проверки значения свойства зависимостей.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-485">Gets the value validation callback for the dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="bdee9-486">Обратный вызов для проверки значения данного свойства зависимостей, указанный параметром <paramref name="validateValueCallback" /> при изначальной регистрации свойства зависимостей.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bdee9-486">The value validation callback for this dependency property, as provided for the <paramref name="validateValueCallback" /> parameter in the original dependency property registration.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bdee9-487">Это свойство будет содержать `null` для любого свойства зависимостей без зарегистрированного обратного вызова проверки.</span><span class="sxs-lookup"><span data-stu-id="bdee9-487">This property will contain `null` for any dependency property with no registered validation callback.</span></span>  
  
 <span data-ttu-id="bdee9-488">Проверить значение обратные вызовы должны действовать статически: проверка, применяемая через <xref:System.Windows.ValidateValueCallback> не может определить, является ли указанное значение допустимым для какой-либо экземпляр.</span><span class="sxs-lookup"><span data-stu-id="bdee9-488">Validate value callbacks must act in a static sense: validation applied through the <xref:System.Windows.ValidateValueCallback> cannot determine whether the provided value is valid for any particular instance.</span></span> <span data-ttu-id="bdee9-489">Обратный вызов может только определить, следует ли все объекты, которые обладают свойством зависимостей, или не должен принимать указанное значение как допустимое.</span><span class="sxs-lookup"><span data-stu-id="bdee9-489">The callback can only determine whether all objects that possess the dependency property should or should not accept the provided value as valid.</span></span> <span data-ttu-id="bdee9-490">Если необходимо выполнять проверку, полагаясь на знание значений других свойств зависимостей в определенном экземпляре, используйте <xref:System.Windows.CoerceValueCallback> вместо него.</span><span class="sxs-lookup"><span data-stu-id="bdee9-490">If you need to perform validation that relies on knowing the values of other dependency properties on a particular instance, use a <xref:System.Windows.CoerceValueCallback> instead.</span></span> <span data-ttu-id="bdee9-491"><xref:System.Windows.CoerceValueCallback> Зарегистрирован как часть метаданных свойства зависимостей, а не непосредственно в идентификатор свойства зависимостей.</span><span class="sxs-lookup"><span data-stu-id="bdee9-491">The <xref:System.Windows.CoerceValueCallback> is registered as part of dependency property metadata, rather than directly within the dependency property identifier.</span></span> <span data-ttu-id="bdee9-492">Дополнительные сведения см. в разделе [обратных вызовах свойства зависимости и проверки](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span><span class="sxs-lookup"><span data-stu-id="bdee9-492">For details, see [Dependency Property Callbacks and Validation](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.ValidateValueCallback" />
      </Docs>
    </Member>
  </Members>
</Type>