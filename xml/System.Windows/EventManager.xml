<Type Name="EventManager" FullName="System.Windows.EventManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c77ae0f0dbeb2878102af1c07c306ec83ccf92c4" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30678568" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class EventManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit EventManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.EventManager" />
  <TypeSignature Language="VB.NET" Value="Public Class EventManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventManager abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Предоставляет связанные с событиями служебные методы, регистрирующие маршрутизируемые события для владельцев класса и добавляющие обработчики класса.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот класс обычно используется для регистрации новое маршрутизируемое событие с <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.  
  
 Второй чаще всего [!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)] использование <xref:System.Windows.EventManager.RegisterClassHandler%2A>. Используйте этот метод, чтобы включить обработку класса для перенаправленного события в классе или вложенное событие. Дополнительные сведения см. в разделе [как Handled и обработка класса](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md).  
  
   
  
## Examples  
 В следующем примере показано, как этот класс используется для регистрации новое маршрутизируемое событие в качестве члена класса, а также перенаправленное событие «программу-оболочку» метод переопределения добавления и удаления реализации [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] событий.  
  
 [!code-csharp[DPCustom#EventManagerClass](~/samples/snippets/csharp/VS_Snippets_Wpf/DPCustom/CSharp/default.xaml.cs#eventmanagerclass)]
 [!code-vb[DPCustom#EventManagerClass](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPCustom/visualbasic/default.xaml.vb#eventmanagerclass)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetRoutedEvents">
      <MemberSignature Language="C#" Value="public static System.Windows.RoutedEvent[] GetRoutedEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.RoutedEvent[] GetRoutedEvents() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.GetRoutedEvents" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRoutedEvents () As RoutedEvent()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Windows::RoutedEvent ^&gt; ^ GetRoutedEvents();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает идентификаторы для маршрутизируемых событий, зарегистрированных на системе событий.</summary>
        <returns>Массив типа <see cref="T:System.Windows.RoutedEvent" />, содержащий зарегистрированные объекты.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Дополнительные <xref:System.Windows.RoutedEvent> объекты могут быть зарегистрированы в более поздней версии. Этот метод возвращает моментальный снимок и коллекции маршрутизируемые события для записи во всей жизни приложения. Коллекция, возвращаемая может быть достаточно большим. Даже просто подсчета событий, которые являются частью [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)], коллекция не содержит сотни высокого уровня.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRoutedEventsForOwner">
      <MemberSignature Language="C#" Value="public static System.Windows.RoutedEvent[] GetRoutedEventsForOwner (Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.RoutedEvent[] GetRoutedEventsForOwner(class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.GetRoutedEventsForOwner(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRoutedEventsForOwner (ownerType As Type) As RoutedEvent()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Windows::RoutedEvent ^&gt; ^ GetRoutedEventsForOwner(Type ^ ownerType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="ownerType">Тип, с которого следует начать поиск. Базовые классы включены в поиск.</param>
        <summary>Находит все идентификаторы маршрутизируемого события для событий, зарегистрированных с предоставленным типом владельца.</summary>
        <returns>Массив соответствующих идентификаторов маршрутизируемого события (при обнаружении); в противном случае — <see langword="null" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterClassHandler">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Регистрирует обработчик класса для определенного маршрутизируемого события.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterClassHandler">
      <MemberSignature Language="C#" Value="public static void RegisterClassHandler (Type classType, System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClassHandler(class System.Type classType, class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClassHandler(Type ^ classType, System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="classType" Type="System.Type" />
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="classType">Тип класса, объявляющего обработку класса.</param>
        <param name="routedEvent">Идентификатор маршрутизируемого события для обработки.</param>
        <param name="handler">Ссылка на реализацию обработчика класса.</param>
        <summary>Регистрирует обработчик класса для определенного маршрутизируемого события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обработку класса — это функция, которая доступна для маршрутизируемых событий, включая вложенные события, реализуемые с резервированием маршрутизируемого события. Обработчик класса аналогично статическому обработчику для всех экземпляров класса. Поскольку обработчик является статическим, нельзя изменить свойства экземпляра непосредственно с помощью обработчика класса, но можно получить доступ к экземпляров через `sender` параметр и/или данные о событии.  
  
 Обработчики класса вызываются до обработчиков экземпляра. Вы можете реализовать обработчик класса с поведением пометить событие как обработанное. Таким образом обработчиками для события обработки класса не вызываются до регистрации обработчиков экземпляра для обработанных событий.  
  
 Многие [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] базового элемента события предоставляют виртуальные методы обработки класса. Путем переопределения этих методов в классах, наследующих базовых классов, можно реализовать обработку без вызова класса <xref:System.Windows.EventManager.RegisterClassHandler%2A> в статических конструкторов. Как правило, эти методы обработки класса используются для входных событий и имеют имена, начинающиеся с «On» и заканчиваться имя события, который обрабатывается классом.  
  
 Дополнительные сведения об обработке класса см. в разделе [как Handled и обработка класса](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md).  
  
 С помощью данной сигнатуры, обработчики класса будут зарегистрированы для вызова только в ответ на необработанные события. Можно также зарегистрировать обработчики класса для вызова, даже если аргументы события помечены как обработанные, с помощью <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> подписи, с `handledEventsToo` значение `true`.  
  
   
  
## Examples  
 В следующем примере добавляется обработчик <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>, вызов <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 [!code-csharp[ClassHandling#StaticAndRegisterClassHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/ClassHandling/CSharp/SDKSampleLibrary/class1.cs#staticandregisterclasshandler)]
 [!code-vb[ClassHandling#StaticAndRegisterClassHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ClassHandling/visualbasic/sdksamplelibrary/class1.vb#staticandregisterclasshandler)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterClassHandler">
      <MemberSignature Language="C#" Value="public static void RegisterClassHandler (Type classType, System.Windows.RoutedEvent routedEvent, Delegate handler, bool handledEventsToo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClassHandler(class System.Type classType, class System.Windows.RoutedEvent routedEvent, class System.Delegate handler, bool handledEventsToo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClassHandler(Type ^ classType, System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler, bool handledEventsToo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="classType" Type="System.Type" />
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
        <Parameter Name="handledEventsToo" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="classType">Тип класса, объявляющего обработку класса.</param>
        <param name="routedEvent">Идентификатор маршрутизируемого события для обработки.</param>
        <param name="handler">Ссылка на реализацию обработчика класса.</param>
        <param name="handledEventsToo">
          Значение <see langword="true" /> для вызова данного обработчика класса даже если аргументы маршрутизируемого события отмечены как обработанные; значение <see langword="false" /> для сохранения метода действия по умолчанию (обработчик не будет вызываться для событий, отмеченных как обработанные).</param>
        <summary>Регистрирует обработчик класса для определенного маршрутизируемого события с возможностью обработки событий, данные событий в которых уже отмечены как обработанные.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обработку класса — это функция, которая доступна для маршрутизируемых событий, включая вложенные события, реализуемые с резервированием маршрутизируемого события. Обработчик класса аналогично статическому обработчику для всех экземпляров класса. Поскольку обработчик является статическим, нельзя изменить свойства экземпляра непосредственно с помощью обработчика класса, но можно получить доступ к экземпляров через `sender` параметр и/или данные о событии.  
  
 Обработчики класса вызываются до обработчиков экземпляра. Вы можете реализовать обработчик класса с поведением пометить событие как обработанное. Таким образом обработчиками для события обработки класса не вызываются до регистрации обработчиков экземпляра для обработанных событий.  
  
 Многие [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] базового элемента события предоставляют виртуальные методы обработки класса. Путем переопределения этих методов в классах, наследующих базовых классов, можно реализовать обработку без вызова класса <xref:System.Windows.EventManager.RegisterClassHandler%2A> в статических конструкторов. Как правило, эти методы обработки класса используются для входных событий и имеют имена, начинающиеся с «On» и заканчиваться имя события, который обрабатывается классом.  
  
 Дополнительные сведения об обработке класса см. в разделе [как Handled и обработка класса](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md).  
  
 С помощью данной сигнатуры, обработчики класса могут быть зарегистрированы для вызова при обработанных событиях, задав `handledEventsToo` значение `true`. Как правило следует этого только в том случае, если имеется проблема с обработкой, которую вы пытаетесь решить, такие как системная обработка ввода с клавиатуры или мыши события.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterRoutedEvent">
      <MemberSignature Language="C#" Value="public static System.Windows.RoutedEvent RegisterRoutedEvent (string name, System.Windows.RoutingStrategy routingStrategy, Type handlerType, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.RoutedEvent RegisterRoutedEvent(string name, valuetype System.Windows.RoutingStrategy routingStrategy, class System.Type handlerType, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::RoutedEvent ^ RegisterRoutedEvent(System::String ^ name, System::Windows::RoutingStrategy routingStrategy, Type ^ handlerType, Type ^ ownerType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="routingStrategy" Type="System.Windows.RoutingStrategy" />
        <Parameter Name="handlerType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">Имя маршрутизируемого события. Имя должно быть уникальным для данного типа владельца и не может быть пустой строкой или иметь значение <see langword="null" />.</param>
        <param name="routingStrategy">Стратегия маршрутизации события как значения перечисления.</param>
        <param name="handlerType">Тип обработчика событий. Должен быть типом делегата. Не может иметь значение <see langword="null" />.</param>
        <param name="ownerType">Тип класса владельца маршрутизируемого события. Он не может иметь значение <see langword="null" />.</param>
        <summary>Регистрирует новое маршрутизируемое событие в системе событий [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)].</summary>
        <returns>Идентификатор вновь зарегистрированного маршрутизируемого события. Этот объект-идентификатор теперь может храниться в виде статического поля в классе и использоваться в качестве параметра для методов, присоединяющих обработчики событий к событиям. Идентификатор маршрутизируемого события также используется для других систем событий [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)].</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 С помощью возвращаемого значения этого метода для создания статического объявления для уникального <xref:System.Windows.RoutedEvent> поле идентификатора. Это поле должно храниться в типе владельца.  
  
 Имеется значительное количество условных обозначений и рекомендации, связанные с маршрутизируемых событий следует с именем, зарегистрированные и предоставляется в классе. Дополнительные сведения см. в разделе [направлено Общие сведения о событиях](~/docs/framework/wpf/advanced/routed-events-overview.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>