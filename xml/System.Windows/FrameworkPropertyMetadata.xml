<Type Name="FrameworkPropertyMetadata" FullName="System.Windows.FrameworkPropertyMetadata">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="50e37bc8286c8ba1961d7a1c298161a3c9e3100c" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37492942" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class FrameworkPropertyMetadata : System.Windows.UIPropertyMetadata" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FrameworkPropertyMetadata extends System.Windows.UIPropertyMetadata" />
  <TypeSignature Language="DocId" Value="T:System.Windows.FrameworkPropertyMetadata" />
  <TypeSignature Language="VB.NET" Value="Public Class FrameworkPropertyMetadata&#xA;Inherits UIPropertyMetadata" />
  <TypeSignature Language="C++ CLI" Value="public ref class FrameworkPropertyMetadata : System::Windows::UIPropertyMetadata" />
  <TypeSignature Language="F#" Value="type FrameworkPropertyMetadata = class&#xA;    inherit UIPropertyMetadata" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.UIPropertyMetadata</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="012af-101">Сообщает или применяет метаданные для свойства зависимостей, добавляя характеристики системы свойств, специфичные для платформы.</span>
      <span class="sxs-lookup">
        <span data-stu-id="012af-101">Reports or applies metadata for a dependency property, specifically adding framework-specific property system characteristics.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="012af-102">Этот класс является производным от <xref:System.Windows.PropertyMetadata> (через <xref:System.Windows.UIPropertyMetadata>).</span><span class="sxs-lookup"><span data-stu-id="012af-102">This class derives from <xref:System.Windows.PropertyMetadata> (through <xref:System.Windows.UIPropertyMetadata>) .</span></span> <span data-ttu-id="012af-103">Для большинства целей разработки приложений уровня платформы WPF <xref:System.Windows.FrameworkPropertyMetadata> тип, используемый для метаданных свойства зависимости, а не типы базовых метаданных <xref:System.Windows.PropertyMetadata> или <xref:System.Windows.UIPropertyMetadata>.</span><span class="sxs-lookup"><span data-stu-id="012af-103">For most WPF framework-level application development purposes, <xref:System.Windows.FrameworkPropertyMetadata> is the type used for dependency property metadata, rather than the base metadata types <xref:System.Windows.PropertyMetadata> or <xref:System.Windows.UIPropertyMetadata>.</span></span> <span data-ttu-id="012af-104">Это справедливо как для существующих свойств зависимостей, так и для большинства настраиваемых сценариев свойств зависимостей.</span><span class="sxs-lookup"><span data-stu-id="012af-104">This is true both for existing dependency properties and for most custom dependency property scenarios.</span></span>  
  
 <span data-ttu-id="012af-105">Члены, объявленные в данном классе, дополнительный компонент <xref:System.Windows.PropertyMetadata> базового класса включают множество логических свойств, задающих или поведение системы свойств уровня среды WPF, например наследование свойств, привязка данных и макета отчета.</span><span class="sxs-lookup"><span data-stu-id="012af-105">The members declared by this class that supplement the <xref:System.Windows.PropertyMetadata> base class include various Boolean properties that specify or report WPF framework-level property system behavior such as property inheritance, data binding, and layout.</span></span>  
  
 <span data-ttu-id="012af-106">Несколько сигнатур конструкторов для создания <xref:System.Windows.FrameworkPropertyMetadata> принимают экземпляр <xref:System.Windows.FrameworkPropertyMetadataOptions> параметра.</span><span class="sxs-lookup"><span data-stu-id="012af-106">Several constructor signatures for creating a <xref:System.Windows.FrameworkPropertyMetadata> instance take a <xref:System.Windows.FrameworkPropertyMetadataOptions> parameter.</span></span> <span data-ttu-id="012af-107"><xref:System.Windows.FrameworkPropertyMetadataOptions> Перечисления используется только для указания начальной поведения в конструкторе и после не предоставляется <xref:System.Windows.FrameworkPropertyMetadata> создается.</span><span class="sxs-lookup"><span data-stu-id="012af-107">The <xref:System.Windows.FrameworkPropertyMetadataOptions> enumeration is used only to specify initial behavior in the constructor, and is not otherwise exposed after <xref:System.Windows.FrameworkPropertyMetadata> is constructed.</span></span> <span data-ttu-id="012af-108">Созданного экземпляра можно получить или задать соответствующую информацию через различные свойства, которые имеют имена из значений перечисления, используемые в вызове конструктора.</span><span class="sxs-lookup"><span data-stu-id="012af-108">From a constructed instance, you can get or set the corresponding information through various properties that share the name of the enumeration values used in the constructor call.</span></span>  
  
<a name="xamlTextUsage_FrameworkPropertyMetadata"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="012af-109">Использование текста XAML</span><span class="sxs-lookup"><span data-stu-id="012af-109">XAML Text Usage</span></span>  
 <span data-ttu-id="012af-110">Этот класс обычно не используется в [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="012af-110">This class is not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="012af-111">В следующем примере возвращаются метаданные для свойства зависимостей для определенного владельца как начальный базовый <xref:System.Windows.PropertyMetadata> типа.</span><span class="sxs-lookup"><span data-stu-id="012af-111">The following example gets metadata for a dependency property on a particular owner as the initial base <xref:System.Windows.PropertyMetadata> type.</span></span> <span data-ttu-id="012af-112">Эти метаданные приводится к <xref:System.Windows.FrameworkPropertyMetadata>.</span><span class="sxs-lookup"><span data-stu-id="012af-112">That metadata is cast to <xref:System.Windows.FrameworkPropertyMetadata>.</span></span> <span data-ttu-id="012af-113">Если приведения возвращаемых является допустимым <xref:System.Windows.FrameworkPropertyMetadata>, а затем различные <xref:System.Windows.FrameworkPropertyMetadata> значения свойств передаются через простой пользовательский Интерфейс (не показано).</span><span class="sxs-lookup"><span data-stu-id="012af-113">If the cast returned a valid <xref:System.Windows.FrameworkPropertyMetadata>, then various <xref:System.Windows.FrameworkPropertyMetadata> property values are reported through a simple UI (not shown).</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.PropertyMetadata" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="012af-114">Инициализирует новый экземпляр класса <see cref="T:System.Windows.FrameworkPropertyMetadata" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-114">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class.</span>
          </span>
        </summary>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="012af-115">Инициализирует новый экземпляр класса <see cref="T:System.Windows.FrameworkPropertyMetadata" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-115">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="012af-116">Эта подпись инициализирует все значения <xref:System.Windows.FrameworkPropertyMetadata.%23ctor%2A> по умолчанию свойства.</span><span class="sxs-lookup"><span data-stu-id="012af-116">This signature initializes all values of <xref:System.Windows.FrameworkPropertyMetadata.%23ctor%2A> to their property defaults.</span></span> <span data-ttu-id="012af-117"><xref:System.Windows.PropertyMetadata.DefaultValue%2A> будет `null`и различных <xref:System.Windows.FrameworkPropertyMetadata> логическое свойства будут `false`.</span><span class="sxs-lookup"><span data-stu-id="012af-117"><xref:System.Windows.PropertyMetadata.DefaultValue%2A> will be `null`, and the various <xref:System.Windows.FrameworkPropertyMetadata> Boolean properties will be `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (defaultValue As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata defaultValue" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="defaultValue">
          <span data-ttu-id="012af-118">Как правило, значение по умолчанию свойства зависимостей представляет собой значение определенного типа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-118">The default value of the dependency property, usually provided as a value of a specific type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="012af-119">Выполняет инициализацию нового экземпляра класса <see cref="T:System.Windows.FrameworkPropertyMetadata" /> с заданным по умолчанию значением.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-119">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the specified default value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="012af-120">Тип значения, заданного для `defaultValue` должно соответствовать или относиться к типу, указанному в исходной регистрации свойства зависимостей, которые применяются эти метаданные.</span><span class="sxs-lookup"><span data-stu-id="012af-120">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="012af-121">Несоответствия между тип значения метаданных по умолчанию и типом свойства зависимостей, к которому он применяется к может быть трудно отлаживаемыми, поскольку рассогласования не удается обнаружить во время компиляции.</span><span class="sxs-lookup"><span data-stu-id="012af-121">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="012af-122">Система свойств не оценивает значение свойства до времени выполнения, поэтому результат несоответствие типов типа или свойства значение по умолчанию — ошибка времени выполнения.</span><span class="sxs-lookup"><span data-stu-id="012af-122">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="012af-123">Значение <xref:System.Windows.DependencyProperty.UnsetValue> имеет особое значение в системе свойств и не может использоваться как значение по умолчанию свойства зависимостей.</span><span class="sxs-lookup"><span data-stu-id="012af-123">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="012af-124">В следующем примере вызывается эта сигнатура конструктора:</span><span class="sxs-lookup"><span data-stu-id="012af-124">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor1param](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor1param)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="012af-125">Параметру <paramref name="defaultValue" /> задается значение <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-125">
              <paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (System.Windows.PropertyChangedCallback propertyChangedCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.PropertyChangedCallback propertyChangedCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Windows::PropertyChangedCallback ^ propertyChangedCallback);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : System.Windows.PropertyChangedCallback -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata propertyChangedCallback" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
      </Parameters>
      <Docs>
        <param name="propertyChangedCallback">
          <span data-ttu-id="012af-126">Ссылка на реализацию обработчика, который система управления свойствами будет вызывать при изменении значения этого свойства.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-126">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="012af-127">Инициализирует новый экземпляр класса <see cref="T:System.Windows.FrameworkPropertyMetadata" /> с указанным ответом <see cref="T:System.Windows.PropertyChangedCallback" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-127">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the specified <see cref="T:System.Windows.PropertyChangedCallback" /> callback.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="012af-128">В следующем примере вызывается эта сигнатура конструктора:</span><span class="sxs-lookup"><span data-stu-id="012af-128">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor1paramcallback](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor1paramcallback)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, valuetype System.Windows.FrameworkPropertyMetadataOptions flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (defaultValue As Object, flags As FrameworkPropertyMetadataOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::FrameworkPropertyMetadataOptions flags);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj * System.Windows.FrameworkPropertyMetadataOptions -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (defaultValue, flags)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="flags" Type="System.Windows.FrameworkPropertyMetadataOptions" />
      </Parameters>
      <Docs>
        <param name="defaultValue">
          <span data-ttu-id="012af-129">Как правило, значение по умолчанию свойства зависимостей представляет собой значение определенного типа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-129">The default value of the dependency property, usually provided as a value of a specific type.</span>
          </span>
        </param>
        <param name="flags">
          <span data-ttu-id="012af-130">Параметры флагов метаданных (комбинация значений <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-130">The metadata option flags (a combination of <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> values).</span>
          </span>
          <span data-ttu-id="012af-131">Данные параметры определяют характеристики свойства зависимостей, взаимодействующего с системой, такие как структура и привязка данных.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-131">These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="012af-132">Инициализирует новый экземпляр класса <see cref="T:System.Windows.FrameworkPropertyMetadata" /> с указанным значением по умолчанию и параметрами метаданных уровня платформы.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-132">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and framework-level metadata options.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="012af-133">Тип значения, заданного для `defaultValue` должно соответствовать или относиться к типу, указанному в исходной регистрации свойства зависимостей, которые применяются эти метаданные.</span><span class="sxs-lookup"><span data-stu-id="012af-133">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="012af-134">Несоответствия между тип значения метаданных по умолчанию и типом свойства зависимостей, к которому он применяется к может быть трудно отлаживаемыми, поскольку рассогласования не удается обнаружить во время компиляции.</span><span class="sxs-lookup"><span data-stu-id="012af-134">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="012af-135">Система свойств не оценивает значение свойства до времени выполнения, поэтому результат несоответствие типов типа или свойства значение по умолчанию — ошибка времени выполнения.</span><span class="sxs-lookup"><span data-stu-id="012af-135">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="012af-136">Значение <xref:System.Windows.DependencyProperty.UnsetValue> имеет особое значение в системе свойств и не может использоваться как значение по умолчанию свойства зависимостей.</span><span class="sxs-lookup"><span data-stu-id="012af-136">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
 <span data-ttu-id="012af-137">Значения с пометкой флаги, заданные в `flags` параметр задает логическое значение <xref:System.Windows.FrameworkPropertyMetadata> свойства, которые соответствуют <xref:System.Windows.FrameworkPropertyMetadataOptions> имя флага, чтобы `true`.</span><span class="sxs-lookup"><span data-stu-id="012af-137">Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`.</span></span> <span data-ttu-id="012af-138">Впоследствии можно изменить значения свойств в метаданных, до тех пор, пока метаданные не были применены к определенной операции системы.</span><span class="sxs-lookup"><span data-stu-id="012af-138">You can subsequently change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="012af-139">В следующем примере вызывается эта сигнатура конструктора:</span><span class="sxs-lookup"><span data-stu-id="012af-139">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor_DV_FPMO](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_dv_fpmo)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="012af-140">Параметру <paramref name="defaultValue" /> задается значение <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-140">
              <paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, class System.Windows.PropertyChangedCallback propertyChangedCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::PropertyChangedCallback ^ propertyChangedCallback);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj * System.Windows.PropertyChangedCallback -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (defaultValue, propertyChangedCallback)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
      </Parameters>
      <Docs>
        <param name="defaultValue">
          <span data-ttu-id="012af-141">Как правило, значение по умолчанию свойства зависимостей представляет собой значение определенного типа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-141">The default value of the dependency property, usually provided as a value of a specific type.</span>
          </span>
        </param>
        <param name="propertyChangedCallback">
          <span data-ttu-id="012af-142">Ссылка на реализацию обработчика, который система управления свойствами будет вызывать при изменении значения этого свойства.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-142">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="012af-143">Инициализирует новый экземпляр класса <see cref="T:System.Windows.FrameworkPropertyMetadata" /> с заданными значением по умолчанию и ответом <see cref="T:System.Windows.PropertyChangedCallback" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-143">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and specified <see cref="T:System.Windows.PropertyChangedCallback" /> callback.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="012af-144">Тип значения, заданного для `defaultValue` должно соответствовать или относиться к типу, указанному в исходной регистрации свойства зависимостей, которые применяются эти метаданные.</span><span class="sxs-lookup"><span data-stu-id="012af-144">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="012af-145">Несоответствия между тип значения метаданных по умолчанию и типом свойства зависимостей, к которому он применяется к может быть трудно отлаживаемыми, поскольку рассогласования не удается обнаружить во время компиляции.</span><span class="sxs-lookup"><span data-stu-id="012af-145">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="012af-146">Система свойств не оценивает значение свойства до времени выполнения, поэтому результат несоответствие типов типа или свойства значение по умолчанию — ошибка времени выполнения.</span><span class="sxs-lookup"><span data-stu-id="012af-146">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="012af-147">Значение <xref:System.Windows.DependencyProperty.UnsetValue> имеет особое значение в системе свойств и не может использоваться как значение по умолчанию свойства зависимостей.</span><span class="sxs-lookup"><span data-stu-id="012af-147">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="012af-148">В следующем примере вызывается эта сигнатура конструктора:</span><span class="sxs-lookup"><span data-stu-id="012af-148">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor2param](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor2param)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="012af-149">Параметру <paramref name="defaultValue" /> задается значение <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-149">
              <paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.PropertyChangedCallback propertyChangedCallback, class System.Windows.CoerceValueCallback coerceValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Windows::PropertyChangedCallback ^ propertyChangedCallback, System::Windows::CoerceValueCallback ^ coerceValueCallback);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : System.Windows.PropertyChangedCallback * System.Windows.CoerceValueCallback -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (propertyChangedCallback, coerceValueCallback)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
        <Parameter Name="coerceValueCallback" Type="System.Windows.CoerceValueCallback" />
      </Parameters>
      <Docs>
        <param name="propertyChangedCallback">
          <span data-ttu-id="012af-150">Ссылка на реализацию обработчика, который система управления свойствами будет вызывать при изменении значения этого свойства.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-150">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span>
          </span>
        </param>
        <param name="coerceValueCallback">
          <span data-ttu-id="012af-151">Ссылка на реализацию обработчика вызывается системой управления свойствами при каждом вызове <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> для данного свойства.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-151">A reference to a handler implementation will be called whenever the property system calls <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> for this dependency property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="012af-152">Инициализирует новый экземпляр класса <see cref="T:System.Windows.FrameworkPropertyMetadata" /> с указанными ответами.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-152">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the specified callbacks.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="012af-153">Эта реализация вызывает базовый инициализатор, а затем добавляет `coerceValueCallback` , задав свойство в базовом экземпляре.</span><span class="sxs-lookup"><span data-stu-id="012af-153">This implementation calls a base initializer and then adds the `coerceValueCallback` by setting the property on the base instance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="012af-154">В следующем примере вызывается эта сигнатура конструктора:</span><span class="sxs-lookup"><span data-stu-id="012af-154">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor_PCC_CVC](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_pcc_cvc)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags, System.Windows.PropertyChangedCallback propertyChangedCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, valuetype System.Windows.FrameworkPropertyMetadataOptions flags, class System.Windows.PropertyChangedCallback propertyChangedCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::FrameworkPropertyMetadataOptions flags, System::Windows::PropertyChangedCallback ^ propertyChangedCallback);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj * System.Windows.FrameworkPropertyMetadataOptions * System.Windows.PropertyChangedCallback -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (defaultValue, flags, propertyChangedCallback)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="flags" Type="System.Windows.FrameworkPropertyMetadataOptions" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
      </Parameters>
      <Docs>
        <param name="defaultValue">
          <span data-ttu-id="012af-155">Как правило, значение по умолчанию свойства зависимостей представляет собой значение определенного типа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-155">The default value of the dependency property, usually provided as a value of a specific type.</span>
          </span>
        </param>
        <param name="flags">
          <span data-ttu-id="012af-156">Параметры флагов метаданных (комбинация значений <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-156">The metadata option flags (a combination of <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> values).</span>
          </span>
          <span data-ttu-id="012af-157">Данные параметры определяют характеристики свойства зависимостей, взаимодействующего с системой, такие как структура и привязка данных.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-157">These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</span>
          </span>
        </param>
        <param name="propertyChangedCallback">
          <span data-ttu-id="012af-158">Ссылка на реализацию обработчика, который система управления свойствами будет вызывать при изменении значения этого свойства.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-158">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="012af-159">Инициализирует новый экземпляр класса <see cref="T:System.Windows.FrameworkPropertyMetadata" /> с указанным значением по умолчанию, параметрами метаданных платформы и ответами <see cref="T:System.Windows.PropertyChangedCallback" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-159">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and framework metadata options, and specified <see cref="T:System.Windows.PropertyChangedCallback" /> callback.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="012af-160">Тип значения, заданного для `defaultValue` должно соответствовать или относиться к типу, указанному в исходной регистрации свойства зависимостей, которые применяются эти метаданные.</span><span class="sxs-lookup"><span data-stu-id="012af-160">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="012af-161">Несоответствия между тип значения метаданных по умолчанию и типом свойства зависимостей, к которому он применяется к может быть трудно отлаживаемыми, поскольку рассогласования не удается обнаружить во время компиляции.</span><span class="sxs-lookup"><span data-stu-id="012af-161">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="012af-162">Система свойств не оценивает значение свойства до времени выполнения, поэтому результат несоответствие типов типа или свойства значение по умолчанию — ошибка времени выполнения.</span><span class="sxs-lookup"><span data-stu-id="012af-162">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="012af-163">Значение <xref:System.Windows.DependencyProperty.UnsetValue> имеет особое значение в системе свойств и не может использоваться как значение по умолчанию свойства зависимостей.</span><span class="sxs-lookup"><span data-stu-id="012af-163">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
 <span data-ttu-id="012af-164">Значения с пометкой флаги, заданные в `flags` параметр задает логическое значение <xref:System.Windows.FrameworkPropertyMetadata> свойства, которые соответствуют <xref:System.Windows.FrameworkPropertyMetadataOptions> имя флага, чтобы `true`.</span><span class="sxs-lookup"><span data-stu-id="012af-164">Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`.</span></span> <span data-ttu-id="012af-165">По-прежнему можно изменить значения свойств в метаданных, до тех пор, пока метаданные не были применены к определенной операции системы.</span><span class="sxs-lookup"><span data-stu-id="012af-165">You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="012af-166">В следующем примере вызывается эта сигнатура конструктора:</span><span class="sxs-lookup"><span data-stu-id="012af-166">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor_DV_FPMO_PCC](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_dv_fpmo_pcc)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="012af-167">Параметру <paramref name="defaultValue" /> задается значение <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-167">
              <paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, class System.Windows.PropertyChangedCallback propertyChangedCallback, class System.Windows.CoerceValueCallback coerceValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::PropertyChangedCallback ^ propertyChangedCallback, System::Windows::CoerceValueCallback ^ coerceValueCallback);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj * System.Windows.PropertyChangedCallback * System.Windows.CoerceValueCallback -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (defaultValue, propertyChangedCallback, coerceValueCallback)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
        <Parameter Name="coerceValueCallback" Type="System.Windows.CoerceValueCallback" />
      </Parameters>
      <Docs>
        <param name="defaultValue">
          <span data-ttu-id="012af-168">Как правило, значение по умолчанию свойства зависимостей представляет собой определенный тип.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-168">The default value of the dependency property, usually provided as a specific type.</span>
          </span>
        </param>
        <param name="propertyChangedCallback">
          <span data-ttu-id="012af-169">Ссылка на реализацию обработчика, который система управления свойствами будет вызывать при изменении значения этого свойства.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-169">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span>
          </span>
        </param>
        <param name="coerceValueCallback">
          <span data-ttu-id="012af-170">Ссылка на реализацию обработчика вызывается системой управления свойствами при каждом вызове <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> для данного свойства.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-170">A reference to a handler implementation that will be called whenever the property system calls <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> for this dependency property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="012af-171">Инициализирует новый экземпляр класса <see cref="T:System.Windows.FrameworkPropertyMetadata" /> с заданными значением по умолчанию и ответами.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-171">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and specified callbacks.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="012af-172">Тип значения, заданного для `defaultValue` должно соответствовать или относиться к типу, указанному в исходной регистрации свойства зависимостей, которые применяются эти метаданные.</span><span class="sxs-lookup"><span data-stu-id="012af-172">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="012af-173">Несоответствия между тип значения метаданных по умолчанию и типом свойства зависимостей, к которому он применяется к может быть трудно отлаживаемыми, поскольку рассогласования не удается обнаружить во время компиляции.</span><span class="sxs-lookup"><span data-stu-id="012af-173">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="012af-174">Система свойств не оценивает значение свойства до времени выполнения, поэтому результат несоответствие типов типа или свойства значение по умолчанию — ошибка времени выполнения.</span><span class="sxs-lookup"><span data-stu-id="012af-174">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="012af-175">Значение <xref:System.Windows.DependencyProperty.UnsetValue> имеет особое значение в системе свойств и не может использоваться как значение по умолчанию свойства зависимостей.</span><span class="sxs-lookup"><span data-stu-id="012af-175">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="012af-176">В следующем примере вызывается эта сигнатура конструктора:</span><span class="sxs-lookup"><span data-stu-id="012af-176">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor3param](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor3param)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="012af-177">Параметру <paramref name="defaultValue" /> задается значение <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-177">
              <paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, valuetype System.Windows.FrameworkPropertyMetadataOptions flags, class System.Windows.PropertyChangedCallback propertyChangedCallback, class System.Windows.CoerceValueCallback coerceValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::FrameworkPropertyMetadataOptions flags, System::Windows::PropertyChangedCallback ^ propertyChangedCallback, System::Windows::CoerceValueCallback ^ coerceValueCallback);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj * System.Windows.FrameworkPropertyMetadataOptions * System.Windows.PropertyChangedCallback * System.Windows.CoerceValueCallback -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (defaultValue, flags, propertyChangedCallback, coerceValueCallback)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="flags" Type="System.Windows.FrameworkPropertyMetadataOptions" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
        <Parameter Name="coerceValueCallback" Type="System.Windows.CoerceValueCallback" />
      </Parameters>
      <Docs>
        <param name="defaultValue">
          <span data-ttu-id="012af-178">Как правило, значение по умолчанию свойства зависимостей представляет собой определенный тип.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-178">The default value of the dependency property, usually provided as a specific type.</span>
          </span>
        </param>
        <param name="flags">
          <span data-ttu-id="012af-179">Параметры флагов метаданных (комбинация значений <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-179">The metadata option flags (a combination of <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> values).</span>
          </span>
          <span data-ttu-id="012af-180">Данные параметры определяют характеристики свойства зависимостей, взаимодействующего с системой, такие как структура и привязка данных.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-180">These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</span>
          </span>
        </param>
        <param name="propertyChangedCallback">
          <span data-ttu-id="012af-181">Ссылка на реализацию обработчика, который система управления свойствами будет вызывать при изменении значения этого свойства.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-181">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span>
          </span>
        </param>
        <param name="coerceValueCallback">
          <span data-ttu-id="012af-182">Ссылка на реализацию обработчика вызывается системой управления свойствами при каждом вызове <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> против данного свойства.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-182">A reference to a handler implementation that will be called whenever the property system calls <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> against this property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="012af-183">Инициализирует новый экземпляр класса <see cref="T:System.Windows.FrameworkPropertyMetadata" /> с указанным значением по умолчанию, параметрами метаданных платформы и ответами.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-183">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and framework metadata options, and specified callbacks.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="012af-184">Тип значения, заданного для `defaultValue` должно соответствовать или относиться к типу, указанному в исходной регистрации свойства зависимостей, которые применяются эти метаданные.</span><span class="sxs-lookup"><span data-stu-id="012af-184">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="012af-185">Несоответствия между тип значения метаданных по умолчанию и типом свойства зависимостей, к которому он применяется к может быть трудно отлаживаемыми, поскольку рассогласования не удается обнаружить во время компиляции.</span><span class="sxs-lookup"><span data-stu-id="012af-185">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="012af-186">Система свойств не оценивает значение свойства до времени выполнения, поэтому результат несоответствие типов типа или свойства значение по умолчанию — ошибка времени выполнения.</span><span class="sxs-lookup"><span data-stu-id="012af-186">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="012af-187">Значение <xref:System.Windows.DependencyProperty.UnsetValue> имеет особое значение в системе свойств и не может использоваться как значение по умолчанию свойства зависимостей.</span><span class="sxs-lookup"><span data-stu-id="012af-187">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
 <span data-ttu-id="012af-188">Значения с пометкой флаги, заданные в `flags` параметр задает логическое значение <xref:System.Windows.FrameworkPropertyMetadata> свойства, которые соответствуют <xref:System.Windows.FrameworkPropertyMetadataOptions> имя флага, чтобы `true`.</span><span class="sxs-lookup"><span data-stu-id="012af-188">Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`.</span></span> <span data-ttu-id="012af-189">По-прежнему можно изменить значения свойств в метаданных, до тех пор, пока метаданные не были применены к определенной операции системы.</span><span class="sxs-lookup"><span data-stu-id="012af-189">You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="012af-190">В следующем примере вызывается эта сигнатура конструктора:</span><span class="sxs-lookup"><span data-stu-id="012af-190">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor_DV_FPMO_PCC_CVC](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_dv_fpmo_pcc_cvc)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="012af-191">Параметру <paramref name="defaultValue" /> задается значение <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-191">
              <paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback, bool isAnimationProhibited);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, valuetype System.Windows.FrameworkPropertyMetadataOptions flags, class System.Windows.PropertyChangedCallback propertyChangedCallback, class System.Windows.CoerceValueCallback coerceValueCallback, bool isAnimationProhibited) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::FrameworkPropertyMetadataOptions flags, System::Windows::PropertyChangedCallback ^ propertyChangedCallback, System::Windows::CoerceValueCallback ^ coerceValueCallback, bool isAnimationProhibited);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj * System.Windows.FrameworkPropertyMetadataOptions * System.Windows.PropertyChangedCallback * System.Windows.CoerceValueCallback * bool -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (defaultValue, flags, propertyChangedCallback, coerceValueCallback, isAnimationProhibited)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="flags" Type="System.Windows.FrameworkPropertyMetadataOptions" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
        <Parameter Name="coerceValueCallback" Type="System.Windows.CoerceValueCallback" />
        <Parameter Name="isAnimationProhibited" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="defaultValue">
          <span data-ttu-id="012af-192">Как правило, значение по умолчанию свойства зависимостей представляет собой определенный тип.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-192">The default value of the dependency property, usually provided as a specific type.</span>
          </span>
        </param>
        <param name="flags">
          <span data-ttu-id="012af-193">Параметры флагов метаданных (комбинация значений <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-193">The metadata option flags (a combination of <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> values).</span>
          </span>
          <span data-ttu-id="012af-194">Данные параметры определяют характеристики свойства зависимостей, взаимодействующего с системой, такие как структура и привязка данных.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-194">These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</span>
          </span>
        </param>
        <param name="propertyChangedCallback">
          <span data-ttu-id="012af-195">Ссылка на реализацию обработчика, который система управления свойствами будет вызывать при изменении значения этого свойства.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-195">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span>
          </span>
        </param>
        <param name="coerceValueCallback">
          <span data-ttu-id="012af-196">Ссылка на реализацию обработчика вызывается системой управления свойствами при каждом вызове <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> данного свойства.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-196">A reference to a handler implementation that will be called whenever the property system calls <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> on this dependency property.</span>
          </span>
        </param>
        <param name="isAnimationProhibited">
          <span data-ttu-id="012af-197">Чтобы запретить системе управления свойствами воспроизводить анимацию для свойства, относящегося к данным метаданным, установите <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-197">
              <see langword="true" /> to prevent the property system from animating the property that this metadata is applied to.</span>
          </span>
          <span data-ttu-id="012af-198">Подобные свойства вызывают исключения во время выполнения, проистекающие из системы управления свойствами при попытке применения к ним анимаций.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-198">Such properties will raise a run-time exception originating from the property system if animations of them are attempted.</span>
          </span>
          <span data-ttu-id="012af-199">Для разрешения анимации свойства следует установить значение <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-199">
              <see langword="false" /> to permit animating the property.</span>
          </span>
          <span data-ttu-id="012af-200">Значение по умолчанию: <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-200">The default is <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="012af-201">Инициализирует новый экземпляр класса <see cref="T:System.Windows.FrameworkPropertyMetadata" /> с указанным значением по умолчанию и установками метаданных платформы, указанными ответами и логическим значением, которое может быть использовано для предотвращения анимации свойства.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-201">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and framework metadata options, specified callbacks, and a Boolean that can be used to prevent animation of the property.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="012af-202">Тип значения, заданного для `defaultValue` должно соответствовать или относиться к типу, указанному в исходной регистрации свойства зависимостей, которые применяются эти метаданные.</span><span class="sxs-lookup"><span data-stu-id="012af-202">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="012af-203">Несоответствия между тип значения метаданных по умолчанию и типом свойства зависимостей, к которому он применяется к может быть трудно отлаживаемыми, поскольку рассогласования не удается обнаружить во время компиляции.</span><span class="sxs-lookup"><span data-stu-id="012af-203">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="012af-204">Система свойств не оценивает значение свойства до времени выполнения, поэтому результат несоответствие типов типа или свойства значение по умолчанию — ошибка времени выполнения.</span><span class="sxs-lookup"><span data-stu-id="012af-204">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="012af-205">Значение <xref:System.Windows.DependencyProperty.UnsetValue> имеет особое значение в системе свойств и не может использоваться как значение по умолчанию свойства зависимостей.</span><span class="sxs-lookup"><span data-stu-id="012af-205">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
 <span data-ttu-id="012af-206">`isAnimationProhibited` Параметр задает начальное значение <xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A> свойство объявлено с помощью интерпретации базового <xref:System.Windows.UIPropertyMetadata> класса.</span><span class="sxs-lookup"><span data-stu-id="012af-206">The `isAnimationProhibited` parameter sets the initial value of the <xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A> property declared by the immediate base <xref:System.Windows.UIPropertyMetadata> class.</span></span>  
  
 <span data-ttu-id="012af-207">Значения с пометкой флаги, заданные в `flags` параметр задает логическое значение <xref:System.Windows.FrameworkPropertyMetadata> свойства, которые соответствуют <xref:System.Windows.FrameworkPropertyMetadataOptions> имя флага, чтобы `true`.</span><span class="sxs-lookup"><span data-stu-id="012af-207">Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`.</span></span> <span data-ttu-id="012af-208">По-прежнему можно изменить значения свойств в метаданных, до тех пор, пока метаданные не были применены к определенной операции системы.</span><span class="sxs-lookup"><span data-stu-id="012af-208">You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="012af-209">В следующем примере вызывается эта сигнатура конструктора:</span><span class="sxs-lookup"><span data-stu-id="012af-209">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor_DV_FPMO_PCC_CVC_IAP](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_dv_fpmo_pcc_cvc_iap)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="012af-210">Параметру <paramref name="defaultValue" /> задается значение <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-210">
              <paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback, bool isAnimationProhibited, System.Windows.Data.UpdateSourceTrigger defaultUpdateSourceTrigger);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, valuetype System.Windows.FrameworkPropertyMetadataOptions flags, class System.Windows.PropertyChangedCallback propertyChangedCallback, class System.Windows.CoerceValueCallback coerceValueCallback, bool isAnimationProhibited, valuetype System.Windows.Data.UpdateSourceTrigger defaultUpdateSourceTrigger) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback,System.Boolean,System.Windows.Data.UpdateSourceTrigger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::FrameworkPropertyMetadataOptions flags, System::Windows::PropertyChangedCallback ^ propertyChangedCallback, System::Windows::CoerceValueCallback ^ coerceValueCallback, bool isAnimationProhibited, System::Windows::Data::UpdateSourceTrigger defaultUpdateSourceTrigger);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj * System.Windows.FrameworkPropertyMetadataOptions * System.Windows.PropertyChangedCallback * System.Windows.CoerceValueCallback * bool * System.Windows.Data.UpdateSourceTrigger -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (defaultValue, flags, propertyChangedCallback, coerceValueCallback, isAnimationProhibited, defaultUpdateSourceTrigger)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="flags" Type="System.Windows.FrameworkPropertyMetadataOptions" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
        <Parameter Name="coerceValueCallback" Type="System.Windows.CoerceValueCallback" />
        <Parameter Name="isAnimationProhibited" Type="System.Boolean" />
        <Parameter Name="defaultUpdateSourceTrigger" Type="System.Windows.Data.UpdateSourceTrigger" />
      </Parameters>
      <Docs>
        <param name="defaultValue">
          <span data-ttu-id="012af-211">Как правило, значение по умолчанию свойства зависимостей представляет собой определенный тип.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-211">The default value of the dependency property, usually provided as a specific type.</span>
          </span>
        </param>
        <param name="flags">
          <span data-ttu-id="012af-212">Параметры флагов метаданных (комбинация значений <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-212">The metadata option flags (a combination of <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> values).</span>
          </span>
          <span data-ttu-id="012af-213">Данные параметры определяют характеристики свойства зависимостей, взаимодействующего с системой, такие как структура и привязка данных.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-213">These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</span>
          </span>
        </param>
        <param name="propertyChangedCallback">
          <span data-ttu-id="012af-214">Ссылка на реализацию обработчика, который система управления свойствами будет вызывать при изменении значения этого свойства.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-214">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span>
          </span>
        </param>
        <param name="coerceValueCallback">
          <span data-ttu-id="012af-215">Ссылка на реализацию обработчика вызывается системой управления свойствами при каждом вызове <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> против данного свойства.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-215">A reference to a handler implementation that will be called whenever the property system calls <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> against this property.</span>
          </span>
        </param>
        <param name="isAnimationProhibited">
          <span data-ttu-id="012af-216">Чтобы запретить системе управления свойствами воспроизводить анимацию для свойства, относящегося к данным метаданным, установите <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-216">
              <see langword="true" /> to prevent the property system from animating the property that this metadata is applied to.</span>
          </span>
          <span data-ttu-id="012af-217">Подобные свойства вызывают исключения во время выполнения, проистекающие из системы управления свойствами при попытке применения к ним анимаций.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-217">Such properties will raise a run-time exception originating from the property system if animations of them are attempted.</span>
          </span>
          <span data-ttu-id="012af-218">Значение по умолчанию: <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-218">The default is <see langword="false" />.</span>
          </span>
        </param>
        <param name="defaultUpdateSourceTrigger">
          <span data-ttu-id="012af-219">
            <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> для использования, когда привязки, примененные к данному свойству имеют <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> со значением <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-219">The <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> to use when bindings for this property are applied that have their <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> set to <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="012af-220">Инициализирует новый экземпляр класса <see cref="T:System.Windows.FrameworkPropertyMetadata" /> с указанным значением по умолчанию и установками метаданных платформы, указанными ответами, логическим значением, которое может быть использовано для предотвращения анимации свойства и триггером обновления привязки данных по умолчанию.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-220">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and framework metadata options, specified callbacks, a Boolean that can be used to prevent animation of the property, and a data-binding update trigger default.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="012af-221">Тип значения, заданного для `defaultValue` должно соответствовать или относиться к типу, указанному в исходной регистрации свойства зависимостей, которые применяются эти метаданные.</span><span class="sxs-lookup"><span data-stu-id="012af-221">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="012af-222">Несоответствия между тип значения метаданных по умолчанию и типом свойства зависимостей, к которому он применяется к может быть трудно отлаживаемыми, поскольку рассогласования не удается обнаружить во время компиляции.</span><span class="sxs-lookup"><span data-stu-id="012af-222">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="012af-223">Система свойств не оценивает значение свойства до времени выполнения, поэтому результат несоответствие типов типа или свойства значение по умолчанию — ошибка времени выполнения.</span><span class="sxs-lookup"><span data-stu-id="012af-223">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="012af-224">Значение <xref:System.Windows.DependencyProperty.UnsetValue> имеет особое значение в системе свойств и не может использоваться как значение по умолчанию свойства зависимостей.</span><span class="sxs-lookup"><span data-stu-id="012af-224">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
 <span data-ttu-id="012af-225">`isAnimationProhibited` Параметр задает начальное значение <xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A> свойство объявлено с помощью интерпретации базового <xref:System.Windows.UIPropertyMetadata> класса.</span><span class="sxs-lookup"><span data-stu-id="012af-225">The `isAnimationProhibited` parameter sets the initial value of the <xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A> property declared by the immediate base <xref:System.Windows.UIPropertyMetadata> class.</span></span>  
  
 <span data-ttu-id="012af-226">Дополнительные сведения об обновлении поведения источника привязки, см. в разделе [Общие сведения о привязке данных](~/docs/framework/wpf/data/data-binding-overview.md).</span><span class="sxs-lookup"><span data-stu-id="012af-226">For more information about the update source behavior for bindings, see [Data Binding Overview](~/docs/framework/wpf/data/data-binding-overview.md).</span></span>  
  
 <span data-ttu-id="012af-227">Значения с пометкой флаги, заданные в `flags` параметр задает логическое значение <xref:System.Windows.FrameworkPropertyMetadata> свойства, которые соответствуют <xref:System.Windows.FrameworkPropertyMetadataOptions> имя флага, чтобы `true`.</span><span class="sxs-lookup"><span data-stu-id="012af-227">Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`.</span></span> <span data-ttu-id="012af-228">По-прежнему можно изменить значения свойств в метаданных, до тех пор, пока метаданные не были применены к определенной операции системы.</span><span class="sxs-lookup"><span data-stu-id="012af-228">You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</span></span>  
  
   
  
## Examples  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor_DV_FPMO_PCC_CVC_IAP_DUST](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_dv_fpmo_pcc_cvc_iap_dust)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="012af-229">Параметру <paramref name="defaultValue" /> задается значение <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-229">
              <paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName="AffectsArrange">
      <MemberSignature Language="C#" Value="public bool AffectsArrange { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AffectsArrange" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.AffectsArrange" />
      <MemberSignature Language="VB.NET" Value="Public Property AffectsArrange As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AffectsArrange { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AffectsArrange : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.AffectsArrange" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="012af-230">Получает или задает значение, указывающее, может ли свойство зависимостей влиять на порядок размещения во время операций обработчика макета.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-230">Gets or sets a value that indicates whether a dependency property potentially affects the arrange pass during layout engine operations.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="012af-231">Значение <see langword="true" />, если свойство зависимостей, в котором существуют эти метаданные, может влиять на порядок размещения; в противном случае — значение <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-231">
              <see langword="true" /> if the dependency property on which this metadata exists potentially affects the arrange pass; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="012af-232">Значение по умолчанию: <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-232">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="012af-233"><xref:System.Windows.FrameworkElement> и <xref:System.Windows.FrameworkContentElement> включает реализацию <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> , отслеживает изменения действующего значения ко всем свойствам зависимостей, существующих в элементе.</span><span class="sxs-lookup"><span data-stu-id="012af-233"><xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element.</span></span> <span data-ttu-id="012af-234">Как часть этой логики, значение свойства зависимостей, которые изменяют вступают в силу и иметь метаданные с <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> присвоено `true` будет инициировать запрос отложенного недействительным визуальные элементы для этого элемента (вызов <xref:System.Windows.UIElement.InvalidateArrange%2A>).</span><span class="sxs-lookup"><span data-stu-id="012af-234">As part of that logic, dependency properties that change effective value and have metadata with <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> set to `true` will initiate a deferred request to invalidate the visuals for that element (a call to <xref:System.Windows.UIElement.InvalidateArrange%2A>).</span></span> <span data-ttu-id="012af-235">Поскольку эта реализация уровня инфраструктуры WPF уже находится в месте, обычно не нужно искать свойств зависимостей с помощью <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> Если значительно замены или изменения поведения макетов уровня среды WPF.</span><span class="sxs-lookup"><span data-stu-id="012af-235">Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> unless you are substantially replacing or modifying the WPF framework-level layout behavior.</span></span>  
  
 <span data-ttu-id="012af-236">Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> выбрать реализаций аналогичное поведение для изменения свойств зависимостей где <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> является `true`.</span><span class="sxs-lookup"><span data-stu-id="012af-236">Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> is `true`.</span></span>  
  
 <span data-ttu-id="012af-237">Свойства классов, производных от <xref:System.Windows.PropertyMetadata> обычно определяются в модели объектов чтения и записи.</span><span class="sxs-lookup"><span data-stu-id="012af-237">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="012af-238">Это, поэтому их можно изменить после инициализации экземпляра.</span><span class="sxs-lookup"><span data-stu-id="012af-238">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="012af-239">Однако после метаданных используется как часть вызова <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, или <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, система свойств будет запечатать этот экземпляр метаданных и свойств, которые передают особенности метаданные теперь считаются неизменяемыми.</span><span class="sxs-lookup"><span data-stu-id="012af-239">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="012af-240">Попытка задать это свойство после <xref:System.Windows.PropertyMetadata.IsSealed%2A> является `true` на эти метаданные экземпляра будет выдано исключение.</span><span class="sxs-lookup"><span data-stu-id="012af-240">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_AffectsArrange"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="012af-241">Использование текста XAML</span><span class="sxs-lookup"><span data-stu-id="012af-241">XAML Text Usage</span></span>  
 <span data-ttu-id="012af-242">Члены этого класса обычно не используются в [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="012af-242">Members of this class are either not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="012af-243">Следующий пример получает метаданные по умолчанию из различных зависимостей поля свойств, значения различных <xref:System.Windows.FrameworkPropertyMetadata> свойства и использует эти сведения для заполнения таблицы и реализации «обозревателя метаданных».</span><span class="sxs-lookup"><span data-stu-id="012af-243">The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="012af-244">Метаданные уже применены к операции свойства зависимостей. Поэтому метаданные запечатаны, а их свойства нельзя задать.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-244">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="AffectsMeasure">
      <MemberSignature Language="C#" Value="public bool AffectsMeasure { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AffectsMeasure" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.AffectsMeasure" />
      <MemberSignature Language="VB.NET" Value="Public Property AffectsMeasure As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AffectsMeasure { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AffectsMeasure : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.AffectsMeasure" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="012af-245">Получает или задает значение, указывающее, может ли свойство зависимостей влиять на передачу измерения во время операций обработчика макета.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-245">Gets or sets a value that indicates whether a dependency property potentially affects the measure pass during layout engine operations.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="012af-246">Значение <see langword="true" />, если свойство зависимостей, в котором существуют эти метаданные, может влиять на передачу измерения; в противном случае — значение <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-246">
              <see langword="true" /> if the dependency property on which this metadata exists potentially affects the measure pass; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="012af-247">Значение по умолчанию: <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-247">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="012af-248"><xref:System.Windows.FrameworkElement> и <xref:System.Windows.FrameworkContentElement> включает реализацию <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> , отслеживает изменения действующего значения ко всем свойствам зависимостей, существующих в элементе.</span><span class="sxs-lookup"><span data-stu-id="012af-248"><xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element.</span></span> <span data-ttu-id="012af-249">Как часть этой логики, значение свойства зависимостей, которые изменяют вступают в силу и иметь метаданные с <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> значение `true` будет инициировать запрос отложенного недействительным визуальные элементы для этого элемента.</span><span class="sxs-lookup"><span data-stu-id="012af-249">As part of that logic, dependency properties that change effective value and have metadata with <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> set to `true` will initiate a deferred request to invalidate the visuals for that element.</span></span> <span data-ttu-id="012af-250">Поскольку эта реализация уровня инфраструктуры WPF уже находится в месте, обычно не нужно искать свойств зависимостей с помощью <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> Если значительно замены или изменения поведения макетов уровня среды WPF.</span><span class="sxs-lookup"><span data-stu-id="012af-250">Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> unless you are substantially replacing or modifying the WPF framework-level layout behavior.</span></span>  
  
 <span data-ttu-id="012af-251">Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> выбрать реализаций аналогичное поведение для изменения свойств зависимостей где <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> является `true`.</span><span class="sxs-lookup"><span data-stu-id="012af-251">Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> is `true`.</span></span>  
  
 <span data-ttu-id="012af-252">Свойства классов, производных от <xref:System.Windows.PropertyMetadata> обычно определяются в модели объектов чтения и записи.</span><span class="sxs-lookup"><span data-stu-id="012af-252">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="012af-253">Это, поэтому их можно изменить после инициализации экземпляра.</span><span class="sxs-lookup"><span data-stu-id="012af-253">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="012af-254">Однако после метаданных используется как часть вызова <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, или <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, система свойств будет запечатать этот экземпляр метаданных и свойств, которые передают особенности метаданные теперь считаются неизменяемыми.</span><span class="sxs-lookup"><span data-stu-id="012af-254">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="012af-255">Попытка задать это свойство после <xref:System.Windows.PropertyMetadata.IsSealed%2A> является `true` на эти метаданные экземпляра будет выдано исключение.</span><span class="sxs-lookup"><span data-stu-id="012af-255">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_AffectsMeasure"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="012af-256">Использование текста XAML</span><span class="sxs-lookup"><span data-stu-id="012af-256">XAML Text Usage</span></span>  
 <span data-ttu-id="012af-257">Члены этого класса обычно не используются в [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="012af-257">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="012af-258">Следующий пример получает метаданные по умолчанию из различных зависимостей поля свойств, значения различных <xref:System.Windows.FrameworkPropertyMetadata> свойства и использует эти сведения для заполнения таблицы и реализации «обозревателя метаданных».</span><span class="sxs-lookup"><span data-stu-id="012af-258">The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="012af-259">Метаданные уже применены к операции свойства зависимостей. Поэтому метаданные запечатаны, а их свойства нельзя задать.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-259">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
        <altmember cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="AffectsParentArrange">
      <MemberSignature Language="C#" Value="public bool AffectsParentArrange { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AffectsParentArrange" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange" />
      <MemberSignature Language="VB.NET" Value="Public Property AffectsParentArrange As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AffectsParentArrange { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AffectsParentArrange : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.AffectsParentArrange" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="012af-260">Получает или задает значение, указывающее, может ли свойство зависимостей влиять на передачу размещения разметки родительского элемента во время операций обработчика разметки.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-260">Gets or sets a value that indicates whether a dependency property potentially affects the arrange pass of its parent element's layout during layout engine operations.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="012af-261">Значение <see langword="true" />, если свойство зависимостей, в котором существуют метаданные, влияет на передачу размещения непосредственно в родительском элементе; в противном случае — значение <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-261">
              <see langword="true" /> if the dependency property on which this metadata exists potentially affects the arrange pass specifically on its parent element; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="012af-262">Значение по умолчанию: <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-262">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="012af-263"><xref:System.Windows.FrameworkElement> и <xref:System.Windows.FrameworkContentElement> включает реализацию <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> , отслеживает изменения действующего значения ко всем свойствам зависимостей, существующих в элементе.</span><span class="sxs-lookup"><span data-stu-id="012af-263"><xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element.</span></span> <span data-ttu-id="012af-264">Как часть этой логики, значение свойства зависимостей, которые изменяют вступают в силу и иметь метаданные с <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> значение `true` будет инициировать запрос отложенного недействительным визуальные элементы для родительского элемента.</span><span class="sxs-lookup"><span data-stu-id="012af-264">As part of that logic, dependency properties that change effective value and have metadata with <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> set to `true` will initiate a deferred request to invalidate the visuals for the parent element.</span></span>  
  
 <span data-ttu-id="012af-265">Как правило, вы не требуется для отчета об изменениях из <xref:System.Windows.FrameworkElement> свойство в родительский элемент с помощью <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> так, как сам элемент должен уже иметь свой собственный <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> как `true`.</span><span class="sxs-lookup"><span data-stu-id="012af-265">Generally, you do not need to report changes of a <xref:System.Windows.FrameworkElement> property to a parent element using <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> because the element itself would already have its own <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> as `true`.</span></span> <span data-ttu-id="012af-266">Обычно достаточно, поскольку изменения в дочернем элементе инициируют в родительском, когда это необходимо.</span><span class="sxs-lookup"><span data-stu-id="012af-266">That is usually sufficient, because changes in the child element generally initiate a parent arrange when appropriate.</span></span> <span data-ttu-id="012af-267"><xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> Иногда используется для <xref:System.Windows.FrameworkContentElement> производного класса.</span><span class="sxs-lookup"><span data-stu-id="012af-267"><xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> is sometimes used for a <xref:System.Windows.FrameworkContentElement> derived class.</span></span> <span data-ttu-id="012af-268">В данном случае элемент дочерние наборы свойство, в отличие от <xref:System.Windows.FrameworkContentElement> производного класса не контролирует собственные визуализации.</span><span class="sxs-lookup"><span data-stu-id="012af-268">In this case, the child element sets a property, but a <xref:System.Windows.FrameworkContentElement> derived class does not control its own rendering.</span></span> <span data-ttu-id="012af-269">Отрисовка обрабатывается <xref:System.Windows.FrameworkElement> родительского элемента, который служит в качестве узла содержимого.</span><span class="sxs-lookup"><span data-stu-id="012af-269">The rendering is handled by a <xref:System.Windows.FrameworkElement> parent element that serves as the content host.</span></span> <span data-ttu-id="012af-270">Например, изменение значения <xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=nameWithType> присоединенное свойство, дочерний элемент делает недействительным упорядочить родительского элемента, так как необходимо изменить позицию дочернего элемента в родительском объекте.</span><span class="sxs-lookup"><span data-stu-id="012af-270">For instance, a change to the value of the <xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=nameWithType> attached property by a child element invalidates arrange of the parent, because the position of the child in the parent must be changed.</span></span> <span data-ttu-id="012af-271">Таким образом <xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=nameWithType> присоединенное свойство имеет метаданные где <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> является `true`.</span><span class="sxs-lookup"><span data-stu-id="012af-271">Therefore, the <xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=nameWithType> attached property has metadata where <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> is `true`.</span></span> <span data-ttu-id="012af-272">Другой пример — <xref:System.Windows.Controls.Control.Padding%2A>; при этом изменения свойств родительского может изменить позицию дочернего элемента, в зависимости от доступного пространства.</span><span class="sxs-lookup"><span data-stu-id="012af-272">Another example is <xref:System.Windows.Controls.Control.Padding%2A>; when this property changes, the parent might change the positioning of the child, depending on available space.</span></span>  
  
 <span data-ttu-id="012af-273">Поскольку эта реализация уровня инфраструктуры WPF уже находится в месте, обычно не нужно искать свойств зависимостей с помощью <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> Если значительно замены или изменения поведения макетов уровня среды WPF.</span><span class="sxs-lookup"><span data-stu-id="012af-273">Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> unless you are substantially replacing or modifying the WPF framework-level layout behavior.</span></span>  
  
 <span data-ttu-id="012af-274">Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> выбрать реализаций аналогичное поведение для изменения свойств зависимостей где <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> является `true`.</span><span class="sxs-lookup"><span data-stu-id="012af-274">Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> is `true`.</span></span>  
  
 <span data-ttu-id="012af-275">Свойства для какого-либо классы, унаследованные от <xref:System.Windows.PropertyMetadata> обычно определяются в модели объектов чтения и записи.</span><span class="sxs-lookup"><span data-stu-id="012af-275">Properties on any derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="012af-276">Это, поэтому их можно изменить после инициализации экземпляра.</span><span class="sxs-lookup"><span data-stu-id="012af-276">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="012af-277">Однако после метаданных используется как часть вызова <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, или <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, система свойств будет запечатать этот экземпляр метаданных и свойств, которые передают особенности метаданные теперь считаются неизменяемыми.</span><span class="sxs-lookup"><span data-stu-id="012af-277">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="012af-278">Попытка задать это свойство после <xref:System.Windows.PropertyMetadata.IsSealed%2A> является `true` на эти метаданные экземпляра будет выдано исключение.</span><span class="sxs-lookup"><span data-stu-id="012af-278">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_AffectsParentArrange"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="012af-279">Использование текста XAML</span><span class="sxs-lookup"><span data-stu-id="012af-279">XAML Text Usage</span></span>  
 <span data-ttu-id="012af-280">Члены этого класса обычно не используются в [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="012af-280">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="012af-281">Метаданные уже применены к операции свойства зависимостей. Поэтому метаданные запечатаны, а их свойства нельзя задать.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-281">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="AffectsParentMeasure">
      <MemberSignature Language="C#" Value="public bool AffectsParentMeasure { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AffectsParentMeasure" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure" />
      <MemberSignature Language="VB.NET" Value="Public Property AffectsParentMeasure As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AffectsParentMeasure { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AffectsParentMeasure : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="012af-282">Возвращает или задает значение, указывающее, может ли свойство зависимостей потенциально влиять на передачу показателей разметки родительского элемента во время операций обработчика разметки.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-282">Gets or sets a value that indicates whether a dependency property potentially affects the measure pass of its parent element's layout during layout engine operations.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="012af-283">Значение <see langword="true" />, если свойство зависимостей, в котором существуют метаданные, влияет на передачу измерений непосредственно на родительском элементе; в противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-283">
              <see langword="true" /> if the dependency property on which this metadata exists potentially affects the measure pass specifically on its parent element; otherwise, <see langword="false" />.The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="012af-284"><xref:System.Windows.FrameworkElement> и <xref:System.Windows.FrameworkContentElement> включает реализацию <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> , отслеживает изменения действующего значения ко всем свойствам зависимостей, существующих в элементе.</span><span class="sxs-lookup"><span data-stu-id="012af-284"><xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element.</span></span> <span data-ttu-id="012af-285">Как часть этой логики, значение свойства зависимостей, которые изменяют вступают в силу и иметь метаданные с <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> значение `true` будет инициировать запрос отложенного недействительным визуальные элементы для родительского элемента.</span><span class="sxs-lookup"><span data-stu-id="012af-285">As part of that logic, dependency properties that change effective value and have metadata with <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> set to `true` will initiate a deferred request to invalidate the visuals for the parent element.</span></span> <span data-ttu-id="012af-286">Поскольку эта реализация уровня инфраструктуры WPF уже находится в месте, обычно не нужно искать свойств зависимостей с помощью <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> Если значительно замены или изменения поведения макетов уровня среды WPF.</span><span class="sxs-lookup"><span data-stu-id="012af-286">Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> unless you are substantially replacing or modifying the WPF framework-level layout behavior.</span></span>  
  
 <span data-ttu-id="012af-287">Как правило, вы не требуется для отчета об изменениях из <xref:System.Windows.FrameworkElement> свойство в родительский элемент с помощью <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> так, как сам элемент должен уже иметь свой собственный <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> как `true`.</span><span class="sxs-lookup"><span data-stu-id="012af-287">Generally, you do not need to report changes of a <xref:System.Windows.FrameworkElement> property to a parent element using <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> because the element itself would already have its own <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> as `true`.</span></span> <span data-ttu-id="012af-288">Это обычно достаточно, поскольку изменения в дочернем элементе инициируют передача мер родительского при необходимости.</span><span class="sxs-lookup"><span data-stu-id="012af-288">That is usually sufficient, because changes in the child element generally initiate a parent measure pass when appropriate.</span></span> <span data-ttu-id="012af-289"><xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> Иногда используется для <xref:System.Windows.FrameworkContentElement> производного класса.</span><span class="sxs-lookup"><span data-stu-id="012af-289"><xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> is sometimes used for a <xref:System.Windows.FrameworkContentElement> derived class.</span></span> <span data-ttu-id="012af-290">В данном случае элемент дочерние наборы свойство, в отличие от <xref:System.Windows.FrameworkContentElement> производного класса не контролирует собственные визуализации.</span><span class="sxs-lookup"><span data-stu-id="012af-290">In this case, the child element sets a property, but a <xref:System.Windows.FrameworkContentElement> derived class does not control its own rendering.</span></span> <span data-ttu-id="012af-291">Отрисовка обрабатывается <xref:System.Windows.FrameworkElement> родительского элемента, который служит в качестве узла содержимого.</span><span class="sxs-lookup"><span data-stu-id="012af-291">The rendering is handled by a <xref:System.Windows.FrameworkElement> parent element that serves as the content host.</span></span> <span data-ttu-id="012af-292">Например, изменение значения <xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=nameWithType> свойство дочерним элементом делает недействительным мер родительского элемента, так как относительное расстояние абзацев может изменять и может увеличить или уменьшить размер содержимого узла.</span><span class="sxs-lookup"><span data-stu-id="012af-292">For instance, a change to the value of the <xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=nameWithType> property by a child element invalidates measure of the parent, because the relative spacing of paragraphs might change and might increase or decrease the content host size.</span></span> <span data-ttu-id="012af-293">Таким образом <xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=nameWithType> свойство имеет метаданные где <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> является `true`.</span><span class="sxs-lookup"><span data-stu-id="012af-293">Therefore, the <xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=nameWithType> property has metadata where <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> is `true`.</span></span>  
  
 <span data-ttu-id="012af-294">Элементы содержимого узла также часто проверяйте наличие изменений в свойства зависимостей где <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> является `true`, как часть логики отрисовки содержимого узла.</span><span class="sxs-lookup"><span data-stu-id="012af-294">Content host elements also frequently look for changes in dependency properties where <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> is `true`, as part of content host rendering logic.</span></span> <span data-ttu-id="012af-295">Например <xref:System.Windows.Controls.TextBox> элемент должен отвечать на определенных изменений в текст, который может оказаться необходимым, ограничивающего прямоугольника <xref:System.Windows.Controls.TextBox> изменить сам.</span><span class="sxs-lookup"><span data-stu-id="012af-295">For instance, the <xref:System.Windows.Controls.TextBox> element must respond to certain changes within text that might require that the bounding box of the <xref:System.Windows.Controls.TextBox> itself be changed.</span></span>  
  
 <span data-ttu-id="012af-296">Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> выбрать реализаций аналогичное поведение для изменения свойств зависимостей где <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> является `true`.</span><span class="sxs-lookup"><span data-stu-id="012af-296">Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> is `true`.</span></span>  
  
 <span data-ttu-id="012af-297">Свойства для какого-либо классы, унаследованные от <xref:System.Windows.PropertyMetadata> обычно определяются в модели объектов чтения и записи.</span><span class="sxs-lookup"><span data-stu-id="012af-297">Properties on any derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="012af-298">Это, поэтому их можно изменить после инициализации экземпляра.</span><span class="sxs-lookup"><span data-stu-id="012af-298">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="012af-299">Однако после метаданных используется как часть вызова <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, или <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, система свойств будет запечатать этот экземпляр метаданных и свойств, которые передают особенности метаданные теперь считаются неизменяемыми.</span><span class="sxs-lookup"><span data-stu-id="012af-299">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="012af-300">Попытка задать это свойство после <xref:System.Windows.PropertyMetadata.IsSealed%2A> является `true` на эти метаданные экземпляра будет выдано исключение.</span><span class="sxs-lookup"><span data-stu-id="012af-300">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_AffectsParentMeasure"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="012af-301">Использование текста XAML</span><span class="sxs-lookup"><span data-stu-id="012af-301">XAML Text Usage</span></span>  
 <span data-ttu-id="012af-302">Члены этого класса обычно не используются в [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="012af-302">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="012af-303">Метаданные уже применены к операции свойства зависимостей. Поэтому метаданные запечатаны, а их свойства нельзя задать.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-303">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="AffectsRender">
      <MemberSignature Language="C#" Value="public bool AffectsRender { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AffectsRender" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.AffectsRender" />
      <MemberSignature Language="VB.NET" Value="Public Property AffectsRender As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AffectsRender { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AffectsRender : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.AffectsRender" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="012af-304">Получает или задает значение, указывающее, может ли свойство зависимостей влиять на общий макет таким способом, который не оказывает специального воздействия на расположение или размеры, но требует перерисовку.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-304">Gets or sets a value that indicates whether a dependency property potentially affects the general layout in some way that does not specifically influence arrangement or measurement, but would require a redraw.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="012af-305">
            <see langword="true" /> если свойство зависимостей, содержащие эти метаданные, влияет на отрисовку; иначе — <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-305">
              <see langword="true" /> if the dependency property on which this metadata exists affects rendering; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="012af-306">Значение по умолчанию: <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-306">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="012af-307"><xref:System.Windows.FrameworkElement> и <xref:System.Windows.FrameworkContentElement> включает реализацию <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> , отслеживает изменения действующего значения ко всем свойствам зависимостей, существующих в элементе.</span><span class="sxs-lookup"><span data-stu-id="012af-307"><xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element.</span></span> <span data-ttu-id="012af-308">Как часть этой логики, значение свойства зависимостей, которые изменяют вступают в силу и иметь метаданные с <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> значение `true` будет инициировать запрос отложенного недействительным визуальные элементы для этого элемента.</span><span class="sxs-lookup"><span data-stu-id="012af-308">As part of that logic, dependency properties that change effective value and have metadata with <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> set to `true` will initiate a deferred request to invalidate the visuals for that element.</span></span> <span data-ttu-id="012af-309">Поскольку эта реализация уровня инфраструктуры WPF уже находится в месте, обычно не нужно искать свойств зависимостей с помощью <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> Если значительно замены или изменения поведения макетов уровня среды WPF.</span><span class="sxs-lookup"><span data-stu-id="012af-309">Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> unless you are substantially replacing or modifying the WPF framework-level layout behavior.</span></span>  
  
 <span data-ttu-id="012af-310">Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> выбрать реализаций аналогичное поведение для изменения свойств зависимостей где <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> является `true`.</span><span class="sxs-lookup"><span data-stu-id="012af-310">Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> is `true`.</span></span>  
  
 <span data-ttu-id="012af-311">Свойства для какого-либо классы, унаследованные от <xref:System.Windows.PropertyMetadata> обычно определяются в модели объектов чтения и записи.</span><span class="sxs-lookup"><span data-stu-id="012af-311">Properties on any derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="012af-312">Это, поэтому их можно изменить после инициализации экземпляра.</span><span class="sxs-lookup"><span data-stu-id="012af-312">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="012af-313">Однако после метаданных используется как часть вызова <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, или <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, система свойств будет запечатать этот экземпляр метаданных и свойств, которые передают особенности метаданные теперь считаются неизменяемыми.</span><span class="sxs-lookup"><span data-stu-id="012af-313">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="012af-314">Попытка задать это свойство после <xref:System.Windows.PropertyMetadata.IsSealed%2A> является `true` на эти метаданные экземпляра будет выдано исключение.</span><span class="sxs-lookup"><span data-stu-id="012af-314">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_AffectsRender"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="012af-315">Использование текста XAML</span><span class="sxs-lookup"><span data-stu-id="012af-315">XAML Text Usage</span></span>  
 <span data-ttu-id="012af-316">Члены этого класса обычно не используются в [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="012af-316">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="012af-317">Следующий пример получает метаданные по умолчанию из различных зависимостей поля свойств, значения различных <xref:System.Windows.FrameworkPropertyMetadata> свойства и использует эти сведения для заполнения таблицы и реализации «обозревателя метаданных».</span><span class="sxs-lookup"><span data-stu-id="012af-317">The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="012af-318">Метаданные уже применены к операции свойства зависимостей. Поэтому метаданные запечатаны, а их свойства нельзя задать.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-318">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="BindsTwoWayByDefault">
      <MemberSignature Language="C#" Value="public bool BindsTwoWayByDefault { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool BindsTwoWayByDefault" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault" />
      <MemberSignature Language="VB.NET" Value="Public Property BindsTwoWayByDefault As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool BindsTwoWayByDefault { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.BindsTwoWayByDefault : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="012af-319">Получает или задает значение, указывающее, создает ли свойство двухсторонние привязки по умолчанию.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-319">Gets or sets a value that indicates whether the property binds two-way by default.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="012af-320">
            <see langword="true" /> Если свойство зависимостей, в котором существуют эти метаданные двойную привязку по умолчанию; в противном случае <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-320">
              <see langword="true" /> if the dependency property on which this metadata exists binds two-way by default; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="012af-321">Значение по умолчанию: <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-321">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="012af-322">В отсутствие этой из свойства `true`, обновления привязки являются односторонними по умолчанию, в зависимости от поведение по умолчанию <xref:System.Windows.Data.Binding> конструкторы или аналогичной [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] синтаксис.</span><span class="sxs-lookup"><span data-stu-id="012af-322">In absence of this property being `true`, binding updates are one-way by default, based on the default behavior of the <xref:System.Windows.Data.Binding> constructors or equivalent [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax.</span></span>  
  
 <span data-ttu-id="012af-323">В существующих элементов, обычно можно найти это свойство установлено в `true` в метаданных для свойств зависимостей и сообщить о состоянии и можно изменять путем действий пользователя, например <xref:System.Windows.Controls.Primitives.Selector.IsSelected%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="012af-323">In existing elements, you will usually find this property set to `true` in metadata for dependency properties that both report state and are modifiable by user action, for example <xref:System.Windows.Controls.Primitives.Selector.IsSelected%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="012af-324">Это свойство сообщает только характеристики обновления привязки по умолчанию свойства зависимостей в целом.</span><span class="sxs-lookup"><span data-stu-id="012af-324">This property only reports the default binding update characteristics of the dependency property in general.</span></span> <span data-ttu-id="012af-325">Любую привязку, задайте этому свойству экземпляра можно локально задать <xref:System.Windows.Data.Binding.Mode%2A> свойства привязки и изменить это значение по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="012af-325">Any binding set to this property on an instance can locally set the <xref:System.Windows.Data.Binding.Mode%2A> property of the binding and change this default.</span></span>  
  
 <span data-ttu-id="012af-326">Свойства для какого-либо классы, унаследованные от <xref:System.Windows.PropertyMetadata> обычно определяются в модели объектов чтения и записи.</span><span class="sxs-lookup"><span data-stu-id="012af-326">Properties on any derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="012af-327">Это, поэтому их можно изменить после инициализации экземпляра.</span><span class="sxs-lookup"><span data-stu-id="012af-327">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="012af-328">Однако после метаданных используется как часть вызова <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, или <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, система свойств будет запечатать этот экземпляр метаданных и свойств, которые передают особенности метаданные теперь считаются неизменяемыми.</span><span class="sxs-lookup"><span data-stu-id="012af-328">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="012af-329">Попытка задать это свойство после <xref:System.Windows.PropertyMetadata.IsSealed%2A> является `true` на эти метаданные экземпляра будет выдано исключение.</span><span class="sxs-lookup"><span data-stu-id="012af-329">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_BindsTwoWayByDefault"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="012af-330">Использование текста XAML</span><span class="sxs-lookup"><span data-stu-id="012af-330">XAML Text Usage</span></span>  
 <span data-ttu-id="012af-331">Члены этого класса обычно не используются в [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="012af-331">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="012af-332">Следующий пример получает метаданные по умолчанию из различных зависимостей поля свойств, значения различных <xref:System.Windows.FrameworkPropertyMetadata> свойства и использует эти сведения для заполнения таблицы и реализации «обозревателя метаданных».</span><span class="sxs-lookup"><span data-stu-id="012af-332">The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="012af-333">Метаданные уже применены к операции свойства зависимостей. Поэтому метаданные запечатаны, а их свойства нельзя задать.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-333">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="DefaultUpdateSourceTrigger">
      <MemberSignature Language="C#" Value="public System.Windows.Data.UpdateSourceTrigger DefaultUpdateSourceTrigger { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Data.UpdateSourceTrigger DefaultUpdateSourceTrigger" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultUpdateSourceTrigger As UpdateSourceTrigger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Data::UpdateSourceTrigger DefaultUpdateSourceTrigger { System::Windows::Data::UpdateSourceTrigger get(); void set(System::Windows::Data::UpdateSourceTrigger value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultUpdateSourceTrigger : System.Windows.Data.UpdateSourceTrigger with get, set" Usage="System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.UpdateSourceTrigger</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="012af-334">Получает или задает значение по умолчанию для <see cref="T:System.Windows.Data.UpdateSourceTrigger" />, который используется при привязке свойства к которому применены данные метаданные, с <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> имеющими значение <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-334">Gets or sets the default for <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> to use when bindings for the property with this metadata are applied, which have their <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> set to <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="012af-335">Значение перечисления, кроме как <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-335">A value of the enumeration, other than <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="012af-336">Свойства классов, производных от <xref:System.Windows.PropertyMetadata> обычно определяются в модели объектов чтения и записи.</span><span class="sxs-lookup"><span data-stu-id="012af-336">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="012af-337">Это, поэтому их можно изменить после инициализации экземпляра.</span><span class="sxs-lookup"><span data-stu-id="012af-337">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="012af-338">Однако после метаданных используется как часть вызова <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, или <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, система свойств будет запечатать этот экземпляр метаданных и свойств, которые передают особенности метаданные теперь считаются неизменяемыми.</span><span class="sxs-lookup"><span data-stu-id="012af-338">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="012af-339">Попытка задать это свойство после <xref:System.Windows.PropertyMetadata.IsSealed%2A> является `true` на эти метаданные экземпляра будет выдано исключение.</span><span class="sxs-lookup"><span data-stu-id="012af-339">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_DefaultUpdateSourceTrigger"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="012af-340">Использование текста XAML</span><span class="sxs-lookup"><span data-stu-id="012af-340">XAML Text Usage</span></span>  
 <span data-ttu-id="012af-341">Члены этого класса обычно не используются в [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="012af-341">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="012af-342">Данному свойству присвоено значение <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />; указанное значение будет считаться значением по умолчанию при получении запросов от привязок.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-342">This property is set to <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />; the value you set is supposed to become the default when requested by bindings.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="012af-343">Метаданные уже применены к операции свойства зависимостей. Поэтому метаданные запечатаны, а их свойства нельзя задать.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-343">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Inherits">
      <MemberSignature Language="C#" Value="public bool Inherits { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Inherits" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.Inherits" />
      <MemberSignature Language="VB.NET" Value="Public Property Inherits As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Inherits { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Inherits : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.Inherits" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="012af-344">Получает или задает значение, которое указывает, наследуется ли значение свойства зависимостей.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-344">Gets or sets a value that indicates whether the value of the dependency property is inheritable.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="012af-345">Значение <see langword="true" />, если значение свойства может быть унаследовано; в противном случае — <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-345">
              <see langword="true" /> if the property value is inheritable; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="012af-346">Значение по умолчанию: <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-346">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="012af-347">Наследование значения свойства — это функция [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] системой свойств на уровне платформы WPF, при котором некоторые свойства зависимостей можно локально задать в элементе близка к корню [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] элемент дерева и затем их значений, наследуются все элементы в логическом дереве дочерних элементов, которые также обладают этим свойством.</span><span class="sxs-lookup"><span data-stu-id="012af-347">Property value inheritance is a feature of the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system at the WPF framework level, whereby certain dependency properties can be locally set on an element at or near the root of a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] element tree and then have their value inherited by all elements within the logical tree of child elements that also possess that property.</span></span> <span data-ttu-id="012af-348">Наследование значения свойства не включена по умолчанию, и его подключение имеет некоторые последствия для производительности.</span><span class="sxs-lookup"><span data-stu-id="012af-348">Property value inheritance is not enabled by default, and enabling it does have some performance implications.</span></span> <span data-ttu-id="012af-349">Подробнее см. в разделе [Наследование значения свойства](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span><span class="sxs-lookup"><span data-stu-id="012af-349">For details, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="012af-350">Несмотря на то, что наследование значения свойства могут быть выполнены для неприсоединенных свойств зависимостей, поведение наследования для таких свойств через определенные разделениях в дереве среды выполнения не определено.</span><span class="sxs-lookup"><span data-stu-id="012af-350">Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain object-object divisions in the runtime tree is undefined.</span></span> <span data-ttu-id="012af-351">Всегда используйте <xref:System.Windows.DependencyProperty.RegisterAttached%2A> для регистрации вы зададите свойства <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> в метаданных.</span><span class="sxs-lookup"><span data-stu-id="012af-351">Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata.</span></span>  
  
 <span data-ttu-id="012af-352">Свойства классов, производных от <xref:System.Windows.PropertyMetadata> обычно определяются в модели объектов чтения и записи.</span><span class="sxs-lookup"><span data-stu-id="012af-352">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="012af-353">Это, поэтому их можно изменить после инициализации экземпляра.</span><span class="sxs-lookup"><span data-stu-id="012af-353">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="012af-354">Однако после метаданных используется как часть вызова <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, или <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, система свойств будет запечатать этот экземпляр метаданных и свойств, которые передают особенности метаданные теперь считаются неизменяемыми.</span><span class="sxs-lookup"><span data-stu-id="012af-354">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="012af-355">Попытка задать это свойство после <xref:System.Windows.PropertyMetadata.IsSealed%2A> является `true` на эти метаданные экземпляра будет выдано исключение.</span><span class="sxs-lookup"><span data-stu-id="012af-355">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_Inherits"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="012af-356">Использование текста XAML</span><span class="sxs-lookup"><span data-stu-id="012af-356">XAML Text Usage</span></span>  
 <span data-ttu-id="012af-357">Члены этого класса обычно не используются в [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="012af-357">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="012af-358">Следующий пример получает метаданные по умолчанию из различных зависимостей поля свойств, значения различных <xref:System.Windows.FrameworkPropertyMetadata> свойства и использует эти сведения для заполнения таблицы и реализации «обозревателя метаданных».</span><span class="sxs-lookup"><span data-stu-id="012af-358">The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="012af-359">Метаданные уже применены к операции свойства зависимостей. Поэтому метаданные запечатаны, а их свойства нельзя задать.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-359">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="IsDataBindingAllowed">
      <MemberSignature Language="C#" Value="public bool IsDataBindingAllowed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDataBindingAllowed" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDataBindingAllowed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDataBindingAllowed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDataBindingAllowed : bool" Usage="System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="012af-360">Возвращает значение, указывающее, поддерживается ли привязка данных для свойства зависимостей.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-360">Gets a value that indicates whether data binding is supported for the dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="012af-361">
            <see langword="true" /> если привязка данных поддерживается для свойства зависимостей, к которому применяются эти метаданные; иначе — <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-361">
              <see langword="true" /> if data binding is supported on the dependency property to which this metadata applies; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="012af-362">Значение по умолчанию: <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-362">The default is <see langword="true" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="012af-363">Это свойство сообщает `false` для одного из двух возможных условий: привязка данных к свойству зависимостей не допускается, так как свойство зависимостей только для чтения (как указано в идентификатор свойства зависимостей, а не метаданных), или значение еще одно свойство метаданных, <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>, имеет значение `true` в этих метаданных.</span><span class="sxs-lookup"><span data-stu-id="012af-363">This property reports `false` for one of two possible conditions: either data binding to a dependency property is not allowed because the dependency property is read-only (as reported in the dependency property identifier, not the metadata), or the value of another metadata property, <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>, is set to `true` in this metadata.</span></span> <span data-ttu-id="012af-364">Это свойство предоставляется для удобства, чтобы вызывающие объекты не нужно проверять оба <xref:System.Windows.DependencyProperty.ReadOnly%2A> и <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>.</span><span class="sxs-lookup"><span data-stu-id="012af-364">This property is exposed as a convenience so that callers do not have to check both <xref:System.Windows.DependencyProperty.ReadOnly%2A> and <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>.</span></span>  
  
 <span data-ttu-id="012af-365">Если вы пытаетесь создать метаданные, указывающее, что свойство для чтения и записи, которое в противном случае следует поддерживает привязку данных, укажите флаг <xref:System.Windows.FrameworkPropertyMetadataOptions.NotDataBindable> (Обратите внимание, небольшая разница соглашение об именовании и <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>).</span><span class="sxs-lookup"><span data-stu-id="012af-365">If you are attempting to create metadata that specifies that an otherwise read/write property should not support data binding, specify the flag <xref:System.Windows.FrameworkPropertyMetadataOptions.NotDataBindable> (note the slight naming convention difference versus <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>).</span></span>  
  
<a name="xamlTextUsage_IsDataBindingAllowed"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="012af-366">Использование текста XAML</span><span class="sxs-lookup"><span data-stu-id="012af-366">XAML Text Usage</span></span>  
 <span data-ttu-id="012af-367">Члены этого класса обычно не используются в [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="012af-367">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="012af-368">Следующий пример получает метаданные по умолчанию из различных зависимостей поля свойств, значения различных <xref:System.Windows.FrameworkPropertyMetadata> свойства и использует эти сведения для заполнения таблицы и реализации «обозревателя метаданных».</span><span class="sxs-lookup"><span data-stu-id="012af-368">The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="IsNotDataBindable">
      <MemberSignature Language="C#" Value="public bool IsNotDataBindable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNotDataBindable" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable" />
      <MemberSignature Language="VB.NET" Value="Public Property IsNotDataBindable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNotDataBindable { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsNotDataBindable : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.IsNotDataBindable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="012af-369">Получает или задает значение, которое указывает, поддерживает ли свойство зависимостей привязку данных.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-369">Gets or sets a value that indicates whether the dependency property supports data binding.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="012af-370">Значение <see langword="true" />, если свойство поддерживает привязку данных; в противном случае — <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-370">
              <see langword="true" /> if the property does not support data binding; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="012af-371">Значение по умолчанию: <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-371">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="012af-372">Обратите внимание, что это свойство метаданных присваивается `true` для свойств, которые не должны поддерживать привязку данных, вне зависимости от свойств чтения и записи.</span><span class="sxs-lookup"><span data-stu-id="012af-372">Note that this metadata property is set to `true` specifically for properties that should not support data binding, despite being read-write properties.</span></span> <span data-ttu-id="012af-373">Ожидается, что в большинстве случаев, где объявлен свойством зависимостей, привязка данных требуется, так как привязка данных является одним из основных сценариев, где полезно свойства зависимостей.</span><span class="sxs-lookup"><span data-stu-id="012af-373">The expectation is that in most cases where a dependency property is declared, data binding is desired, because data binding is one of the key scenarios where a dependency property is useful.</span></span> <span data-ttu-id="012af-374">В отличие от <xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A>, при этом не изменяется просто значение по умолчанию, можно изменить позже на определенной привязки.</span><span class="sxs-lookup"><span data-stu-id="012af-374">Unlike <xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A>, this does not merely change a default that can later be changed on a specific binding.</span></span> <span data-ttu-id="012af-375">Задание этого свойства `true` в метаданных для свойства зависимостей метаданные отключит все привязки применение значений с помощью выражений для этого свойства зависимостей.</span><span class="sxs-lookup"><span data-stu-id="012af-375">Setting this property `true` in the metadata for a dependency property metadata will disable all bindings from applying their values through expressions to that dependency property.</span></span>  
  
 <span data-ttu-id="012af-376">Свойства зависимостей только для чтения не поддерживают привязку данных (из-за наличия не метод задания, который можно применить измененные значения), но отчет будет по-прежнему `false` для <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>.</span><span class="sxs-lookup"><span data-stu-id="012af-376">Read-only dependency properties do not support data binding (because they have no setter that can apply changed values), but will still report `false` for <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>.</span></span> <span data-ttu-id="012af-377">Это обусловлено тем, свойства, которые соответствуют <xref:System.Windows.FrameworkPropertyMetadataOptions> значения сообщит о четности с помощью как метаданные были фактически установлены, вместо того, чтобы всегда reporting результирующем поведении, именование свойства может подразумеваться.</span><span class="sxs-lookup"><span data-stu-id="012af-377">This is because properties that correspond to a <xref:System.Windows.FrameworkPropertyMetadataOptions> values will report parity with how the metadata was actually established, rather than always reporting the end result behavior that the naming of the property might imply.</span></span> <span data-ttu-id="012af-378">Чтобы определить, разрешает ли указанному свойству зависимостей привязки данных, обычно следует проверить <xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A> вместо этого.</span><span class="sxs-lookup"><span data-stu-id="012af-378">To determine whether a given dependency property permits data binding, you should usually check <xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A> instead.</span></span> <span data-ttu-id="012af-379"><xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A> — Это удобный инструмент для проверки оба <xref:System.Windows.DependencyProperty.ReadOnly%2A> и <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A> как одна операция, давая ожидаемый результат.</span><span class="sxs-lookup"><span data-stu-id="012af-379"><xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A> is a convenience for checking both <xref:System.Windows.DependencyProperty.ReadOnly%2A> and <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A> as a single operation, yielding the expected result.</span></span>  
  
 <span data-ttu-id="012af-380">Свойства классов, производных от <xref:System.Windows.PropertyMetadata> обычно определяются в модели объектов чтения и записи.</span><span class="sxs-lookup"><span data-stu-id="012af-380">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="012af-381">Это, поэтому их можно изменить после инициализации экземпляра.</span><span class="sxs-lookup"><span data-stu-id="012af-381">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="012af-382">Однако после метаданных используется как часть вызова <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, или <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, система свойств будет запечатать этот экземпляр метаданных и свойств, которые передают особенности метаданные теперь считаются неизменяемыми.</span><span class="sxs-lookup"><span data-stu-id="012af-382">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="012af-383">Попытка задать это свойство после <xref:System.Windows.PropertyMetadata.IsSealed%2A> является `true` на эти метаданные экземпляра будет выдано исключение.</span><span class="sxs-lookup"><span data-stu-id="012af-383">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_IsNotDataBindable"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="012af-384">Использование текста XAML</span><span class="sxs-lookup"><span data-stu-id="012af-384">XAML Text Usage</span></span>  
 <span data-ttu-id="012af-385">Члены этого класса обычно не используются в [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="012af-385">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="012af-386">Метаданные уже применены к операции свойства зависимостей. Поэтому метаданные запечатаны, а их свойства нельзя задать.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-386">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
        <altmember cref="P:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed" />
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="Journal">
      <MemberSignature Language="C#" Value="public bool Journal { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Journal" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.Journal" />
      <MemberSignature Language="VB.NET" Value="Public Property Journal As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Journal { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Journal : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.Journal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="012af-387">Получает или задает значение, указывающее, содержит ли это свойство сведения о ведении журнала, которые приложения могут или должны хранить как часть реализации процесса ведения журнала.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-387">Gets or sets a value that indicates whether this property contains journaling information that applications can or should store as part of a journaling implementation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="012af-388">
            <see langword="true" /> Если ведение журнала необходимо для свойства зависимостей, к которому применены эти метаданные в противном случае <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-388">
              <see langword="true" /> if journaling should be performed on the dependency property that this metadata is applied to; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="012af-389">Значение по умолчанию: <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-389">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="012af-390">Свойства классов, производных от <xref:System.Windows.PropertyMetadata> обычно определяются в модели объектов чтения и записи.</span><span class="sxs-lookup"><span data-stu-id="012af-390">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="012af-391">Это, поэтому их можно изменить после инициализации экземпляра.</span><span class="sxs-lookup"><span data-stu-id="012af-391">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="012af-392">Однако после метаданных используется как часть вызова <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, или <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, система свойств будет запечатать этот экземпляр метаданных и свойств, которые передают особенности метаданные теперь считаются неизменяемыми.</span><span class="sxs-lookup"><span data-stu-id="012af-392">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="012af-393">Попытка задать это свойство после <xref:System.Windows.PropertyMetadata.IsSealed%2A> является `true` на эти метаданные экземпляра будет выдано исключение.</span><span class="sxs-lookup"><span data-stu-id="012af-393">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_Journal"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="012af-394">Использование текста XAML</span><span class="sxs-lookup"><span data-stu-id="012af-394">XAML Text Usage</span></span>  
 <span data-ttu-id="012af-395">Члены этого класса обычно не используются в [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="012af-395">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="012af-396">Метаданные уже применены к операции свойства зависимостей. Поэтому метаданные запечатаны, а их свойства нельзя задать.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-396">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
        <altmember cref="T:System.Windows.Navigation.JournalEntry" />
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="protected override void Merge (System.Windows.PropertyMetadata baseMetadata, System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Merge(class System.Windows.PropertyMetadata baseMetadata, class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Merge (baseMetadata As PropertyMetadata, dp As DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Merge(System::Windows::PropertyMetadata ^ baseMetadata, System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="abstract member Merge : System.Windows.PropertyMetadata * System.Windows.DependencyProperty -&gt; unit&#xA;override this.Merge : System.Windows.PropertyMetadata * System.Windows.DependencyProperty -&gt; unit" Usage="frameworkPropertyMetadata.Merge (baseMetadata, dp)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="baseMetadata">
          <span data-ttu-id="012af-397">Базовые метаданные для слияния.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-397">The base metadata to merge.</span>
          </span>
        </param>
        <param name="dp">
          <span data-ttu-id="012af-398">Свойство зависимостей, к которому применяются эти метаданные.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-398">The dependency property this metadata is being applied to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="012af-399">Обеспечивает слияние исходных метаданных с базовыми.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-399">Enables a merge of the source metadata with base metadata.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="012af-400">Этот метод используется внутренне, при переопределении метаданных.</span><span class="sxs-lookup"><span data-stu-id="012af-400">This method is used internally when metadata is being overridden.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="012af-401">
            <para>Классы, производные от <see cref="T:System.Windows.PropertyMetadata" /> (или данный класс в особенности) должны переопределять этот метод, чтобы учесть все свойства метаданных, добавленных в их реализации. Например, реализация может добавлять новое значение флагового перечисления и <see cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" /> реализации затем должны иметь возможность правильно объединить эти флаги.  Всегда вызовите базовую реализацию до собственную реализацию, так как базовая реализация берет на себя все свойства, уже определенные в предыдущих типов в иерархии.  Поведение, добавленные <see cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" /> реализации в <see cref="T:System.Windows.FrameworkPropertyMetadata" /> является то, что определенные свойства уровня среды WPF в метаданные, такие как <see cref="P:System.Windows.FrameworkPropertyMetadata.AffectsRender" /> объединяются в побитовой операции или.  <see cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" /> Поведение также реализует поведение, при переопределении метаданных свойства для существующего свойства зависимостей путем вызова <see cref="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)" />., с помощью переопределения метаданных, <see cref="T:System.Windows.FrameworkPropertyMetadata" />.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-401">
              <para>Classes that derive from <see cref="T:System.Windows.PropertyMetadata" /> (or this class particularly) should override this method to account for any metadata properties they have added in their implementations. For instance, your implementation might have added a new flagwise enumeration value, and the <see cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" /> implementation should then be able to combine those flags correctly.  Always call the base implementation prior to your own implementation, because the base implementation takes care of merging all the properties already defined on previous types in the hierarchy.  The behavior added by the <see cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" /> implementation in <see cref="T:System.Windows.FrameworkPropertyMetadata" /> is that specific WPF framework-level properties in the metadata such as <see cref="P:System.Windows.FrameworkPropertyMetadata.AffectsRender" /> are combined in a bitwise or operation.  The <see cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" /> behavior also implements the behavior when you override the property metadata on an existing dependency property by calling <see cref="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)" />., using override metadata that is <see cref="T:System.Windows.FrameworkPropertyMetadata" />.</para>
            </span>
          </span>
        </block>
        <altmember cref="M:System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" />
        <altmember cref="P:System.Windows.PropertyMetadata.IsSealed" />
        <altmember cref="M:System.Windows.FrameworkPropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="OnApply">
      <MemberSignature Language="C#" Value="protected override void OnApply (System.Windows.DependencyProperty dp, Type targetType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnApply(class System.Windows.DependencyProperty dp, class System.Type targetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnApply (dp As DependencyProperty, targetType As Type)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnApply(System::Windows::DependencyProperty ^ dp, Type ^ targetType);" />
      <MemberSignature Language="F#" Value="abstract member OnApply : System.Windows.DependencyProperty * Type -&gt; unit&#xA;override this.OnApply : System.Windows.DependencyProperty * Type -&gt; unit" Usage="frameworkPropertyMetadata.OnApply (dp, targetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="targetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="012af-402">Свойство зависимостей, к которому были применены эти метаданные.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-402">The dependency property to which the metadata has been applied.</span>
          </span>
        </param>
        <param name="targetType">
          <span data-ttu-id="012af-403">Тип, связанный с этими метаданными, если это метаданные зависящие от типа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-403">The type associated with this metadata if this is type-specific metadata.</span>
          </span>
          <span data-ttu-id="012af-404">В случае с метаданными по умолчанию, значение может быть <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-404">If this is default metadata, this value can be <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="012af-405">Вызывается после применения данных метаданных к свойству, указывая на запечатывание метаданных.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-405">Called when this metadata has been applied to a property, which indicates that the metadata is being sealed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="012af-406">Все изменения структуры данных <xref:System.Windows.FrameworkPropertyMetadata> экземпляр должен быть помечен как к неизменяемым при вызове этого метода.</span><span class="sxs-lookup"><span data-stu-id="012af-406">Any mutability of the data structure of a <xref:System.Windows.FrameworkPropertyMetadata> instance should be marked as immutable when this method is invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="012af-407">
            <para>
              <see cref="T:System.Windows.FrameworkPropertyMetadata" /> Реализация этого метода не выполняет никаких действий за вызов базовой реализации.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-407">
              <para>The <see cref="T:System.Windows.FrameworkPropertyMetadata" /> implementation of this method does nothing beyond calling the base implementation.</para>
            </span>
          </span>
        </block>
        <altmember cref="M:System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)" />
        <altmember cref="P:System.Windows.PropertyMetadata.IsSealed" />
        <altmember cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="OverridesInheritanceBehavior">
      <MemberSignature Language="C#" Value="public bool OverridesInheritanceBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool OverridesInheritanceBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior" />
      <MemberSignature Language="VB.NET" Value="Public Property OverridesInheritanceBehavior As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool OverridesInheritanceBehavior { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.OverridesInheritanceBehavior : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="012af-408">Возвращает или задает значение, указывающее, должно ли вычисление наследования значения свойства охватывать определенные границы содержимого в логическом дереве элементов.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-408">Gets or sets a value that indicates whether the property value inheritance evaluation should span across certain content boundaries in the logical tree of elements.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="012af-409">
            <see langword="true" /> если наследование значения свойства распространяться по определенным вместителям содержимого; иначе — <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-409">
              <see langword="true" /> if the property value inheritance should span across certain content boundaries; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="012af-410">Значение по умолчанию: <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-410">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="012af-411">Эти метаданные сообщает редких изменениях, чтобы наследование значений свойств через границы элемента специальный родительский-дочерний элемент.</span><span class="sxs-lookup"><span data-stu-id="012af-411">This metadata reports a seldom-applied modification to property value inheritance behavior across special parent element-child element boundaries.</span></span> <span data-ttu-id="012af-412">Каноническим примером таких пределах представляет собой содержание <xref:System.Windows.Controls.Frame>, где <xref:System.Windows.Controls.Frame> содержимое может получить перезагружен независимо от существования <xref:System.Windows.Controls.Frame>.</span><span class="sxs-lookup"><span data-stu-id="012af-412">The canonical example of such a boundary is the contents of a <xref:System.Windows.Controls.Frame>, where the <xref:System.Windows.Controls.Frame> content might get reloaded independently of the existence of the <xref:System.Windows.Controls.Frame>.</span></span> <span data-ttu-id="012af-413">Поведение системы требуемого свойства — что наследование значения свойства не должны проходить в содержимое <xref:System.Windows.Controls.Frame>, так как им могут быть элементы, которые приложению не владеете или управляете.</span><span class="sxs-lookup"><span data-stu-id="012af-413">The desired property system behavior is that property value inheritance should not traverse into the contents of the <xref:System.Windows.Controls.Frame>, because these contents might be elements that the application hosting the frame does not own or control.</span></span> <span data-ttu-id="012af-414">Указание метаданных с <xref:System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior%2A> присвоено `true`, а также как указание <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> как `true`, вызовет свойство, к которому применяется метаданные к наследуемому даже в <xref:System.Windows.Controls.Frame> границ или аналогичные границ.</span><span class="sxs-lookup"><span data-stu-id="012af-414">Specifying metadata with <xref:System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior%2A> set to `true`, as well as specifying <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> as `true`, will cause the property on which the metadata is applied to be inheritable even across the <xref:System.Windows.Controls.Frame> boundary or similar boundaries.</span></span>  
  
 <span data-ttu-id="012af-415">Свойства классов, производных от <xref:System.Windows.PropertyMetadata> обычно определяются в модели объектов чтения и записи.</span><span class="sxs-lookup"><span data-stu-id="012af-415">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="012af-416">Это, поэтому их можно изменить после инициализации экземпляра.</span><span class="sxs-lookup"><span data-stu-id="012af-416">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="012af-417">Однако после метаданных используется как часть вызова <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, или <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, система свойств будет запечатать этот экземпляр метаданных и свойств, которые передают особенности метаданные теперь считаются неизменяемыми.</span><span class="sxs-lookup"><span data-stu-id="012af-417">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="012af-418">Попытка задать это свойство после <xref:System.Windows.PropertyMetadata.IsSealed%2A> является `true` на эти метаданные экземпляра будет выдано исключение.</span><span class="sxs-lookup"><span data-stu-id="012af-418">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_OverridesInheritanceBehavior"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="012af-419">Использование текста XAML</span><span class="sxs-lookup"><span data-stu-id="012af-419">XAML Text Usage</span></span>  
 <span data-ttu-id="012af-420">Члены этого класса обычно не используются в [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="012af-420">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="012af-421">Метаданные уже применены к операции свойства зависимостей. Поэтому метаданные запечатаны, а их свойства нельзя задать.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-421">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="SubPropertiesDoNotAffectRender">
      <MemberSignature Language="C#" Value="public bool SubPropertiesDoNotAffectRender { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SubPropertiesDoNotAffectRender" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender" />
      <MemberSignature Language="VB.NET" Value="Public Property SubPropertiesDoNotAffectRender As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SubPropertiesDoNotAffectRender { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SubPropertiesDoNotAffectRender : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="012af-422">Возвращает или задает значение, указывающее, влияют ли подсвойства свойства зависимостей на отрисовку вмещающего объекта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-422">Gets or sets a value that indicates whether sub-properties of the dependency property do not affect the rendering of the containing object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="012af-423">
            <see langword="true" /> в случае, если изменения в подсвойствах не влияют на отрисовку; иначе — <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-423">
              <see langword="true" /> if changes to sub-property values do not affect rendering if changed; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="012af-424">Значение по умолчанию: <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-424">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="012af-425">Этот параметр метаданные относятся к свойствам зависимостей, которые являются ссылочными типами, где тип имеет собственные значения свойства.</span><span class="sxs-lookup"><span data-stu-id="012af-425">This metadata option is pertinent for dependency properties that are reference types, where that type has property values of its own.</span></span> <span data-ttu-id="012af-426">Как правило логика системы макета — предполагается, что любое свойство зависимостей с подсвойства, влияет на макет, так как проверка всех подсвойств для изменения занимает больше времени чем другой прохода отрисовки.</span><span class="sxs-lookup"><span data-stu-id="012af-426">Typically, the layout system logic is to assume that any dependency property with sub-properties potentially will affect layout, because checking all sub-properties for changes is more time consuming than actually running another render pass.</span></span> <span data-ttu-id="012af-427">Установка данного параметра равным `true` позволяет оптимизировать производительность реализация системы уровня макета WPF.</span><span class="sxs-lookup"><span data-stu-id="012af-427">Setting this option to `true` is useful for optimizing performance of the WPF framework level layout system implementation.</span></span>  
  
 <span data-ttu-id="012af-428">Свойства классов, производных от <xref:System.Windows.PropertyMetadata> обычно определяются в модели объектов чтения и записи.</span><span class="sxs-lookup"><span data-stu-id="012af-428">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="012af-429">Это, поэтому их можно изменить после инициализации экземпляра.</span><span class="sxs-lookup"><span data-stu-id="012af-429">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="012af-430">Однако после исчерпания метаданные как часть вызова <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, или <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, система свойств будет запечатать этот экземпляр метаданных и свойств, которые передают особенности метаданные теперь считаются неизменяемыми.</span><span class="sxs-lookup"><span data-stu-id="012af-430">However, once the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="012af-431">Попытка задать это свойство после <xref:System.Windows.PropertyMetadata.IsSealed%2A> является `true` на эти метаданные экземпляра будет выдано исключение.</span><span class="sxs-lookup"><span data-stu-id="012af-431">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_SubPropertiesDoNotAffectRender"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="012af-432">Использование текста XAML</span><span class="sxs-lookup"><span data-stu-id="012af-432">XAML Text Usage</span></span>  
 <span data-ttu-id="012af-433">Члены этого класса обычно не используются в [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="012af-433">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="012af-434">Метаданные уже применены к операции свойства зависимостей. Поэтому метаданные запечатаны, а их свойства нельзя задать.</span>
          <span class="sxs-lookup">
            <span data-stu-id="012af-434">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.Freezable" />
      </Docs>
    </Member>
  </Members>
</Type>