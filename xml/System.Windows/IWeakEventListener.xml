<Type Name="IWeakEventListener" FullName="System.Windows.IWeakEventListener">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3a1bf86fcc21c642d34254ee3721d50b914beee5" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30676108" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IWeakEventListener" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IWeakEventListener" />
  <TypeSignature Language="DocId" Value="T:System.Windows.IWeakEventListener" />
  <TypeSignature Language="VB.NET" Value="Public Interface IWeakEventListener" />
  <TypeSignature Language="C++ CLI" Value="public interface class IWeakEventListener" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Предоставляет поддержку прослушивания событий для классов, ожидающих получения событий через шаблон WeakEvent и <see cref="T:System.Windows.WeakEventManager" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.WeakEventManager> (Диспетчера) перенаправляет события путем вызова <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> метод в классах, которые реализуют этот интерфейс и которые были добавлены в качестве прослушивателей путем вызова <xref:System.Windows.WeakEventManager> методы заранее.  
  
 Основная причина для следующего шаблона WeakEvent — источник событий имеет время существования объекта, потенциально независимого от прослушивателей событий. С помощью централизованной диспетчеризации событий <xref:System.Windows.WeakEventManager> включает обработчики прослушивателей сборщику мусора собранные (или ручной очистке) даже если источник объекта превышает время существования прослушивателей. Напротив подключение завершается обычные события с помощью `+=` или синтаксис эквивалентного события языка приводит потенциально постоянного подключенного источника для хранения строгую ссылку для обработчиков. В этом случае ссылки на прослушиватели от сборщика мусора в течение отведенного времени.  
  
 Одна из распространенных ситуаций, где связи между источниками и прослушивателями предполагают использование этого шаблона, является обработка событий обновления, поступающих из источников для привязок данных.  
  
 Шаблон WeakEvent можно использовать для прослушивания событий, которые являются внешними для вашего приложения. Необходимо определить <xref:System.Windows.WeakEventManager> , обеспечить прослушивания поведение в <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A>и использовать <xref:System.Windows.WeakEventManager> присоединить обработчик ссылающегося вместо `+=`.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.WeakEventManager" />
  </Docs>
  <Members>
    <Member MemberName="ReceiveWeakEvent">
      <MemberSignature Language="C#" Value="public bool ReceiveWeakEvent (Type managerType, object sender, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReceiveWeakEvent(class System.Type managerType, object sender, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveWeakEvent (managerType As Type, sender As Object, e As EventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ReceiveWeakEvent(Type ^ managerType, System::Object ^ sender, EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managerType" Type="System.Type" />
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="managerType">Тип объекта <see cref="T:System.Windows.WeakEventManager" />, который вызывает этот метод.</param>
        <param name="sender">Объект, в котором произошло событие.</param>
        <param name="e">Данные события.</param>
        <summary>Получает события от централизованного диспетчера событий.</summary>
        <returns>
          <see langword="true" />, если прослушиватель обработал событие. При обработке диспетчером <see cref="T:System.Windows.WeakEventManager" /> в [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] регистрация прослушивателя для события, которое он не обрабатывает, считается ошибкой. Вне зависимости от этого, метод должен вернуть <see langword="false" /> в случае получения события, которое он не может распознать или обработать.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере реализуется <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> для обеспечения поддержки шаблон WeakEvent двух гипотетических событий `ClockwiseSpin` и `CounterclockwiseSpin` , имеющих выделенную <xref:System.Windows.WeakEventManager> (не показано). Эта реализация вызывает заглушки обработчиков класса для каждого поддерживаемого события, приводя данные события (в этом случае два события совместно использовать тот же тип данных `SpinEventArgs`). Реализация возвращает `false` Если полученное событие не ожидается.  
  
 [!code-csharp[CorePseudocode#IWeakEventListener](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#iweakeventlistener)]
 [!code-vb[CorePseudocode#IWeakEventListener](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#iweakeventlistener)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Этот метод предназначен для получения всех возможных событий, получатель которых находится в списке прослушивателей. Особенно в том случае, если реализации класса, прослушивающего более одного события, необходимо проверить тип входящего <paramref name="managerType" /> соответствующий параметр, чтобы узнать, какому событию вызова. Именно поэтому каждого события, которые будут входить в состав шаблона должен иметь выделенную <see cref="T:System.Windows.WeakEventManager" />. Кроме того <paramref name="e" /> параметр типизируется как обычные <see cref="T:System.EventArgs" />. Таким образом, для получения свойств из данных события, реализации нужно будет приведен к типу данных определенного события.  
  
 Как правило, после проверки того, для идентификации событий, на основе <see cref="T:System.Windows.WeakEventManager" /> типа, реализация должна вызывать обработчик закрытый класс. Обработчик класса предположительно может быть тот же обработчик класса, используемый для обработки данного события для прослушивателей, добавляемых через стандартный шаблон добавления <see langword="+=" /> событие на стороне отправителя. В приведенном ниже разделе предоставляет примерный шаблон реализации.</para>
        </block>
        <altmember cref="T:System.Windows.WeakEventManager" />
      </Docs>
    </Member>
  </Members>
</Type>