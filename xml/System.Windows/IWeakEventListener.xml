<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IWeakEventListener.xml" source-language="en-US" target-language="ru-RU">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac53a1bf86fcc21c642d34254ee3721d50b914beee5.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3a1bf86fcc21c642d34254ee3721d50b914beee5</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.IWeakEventListener">
          <source>Provides event listening support for classes that expect to receive events through the WeakEvent pattern and a <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph>.</source>
          <target state="translated">Предоставляет поддержку прослушивания событий для классов, ожидающих получения событий через шаблон WeakEvent и <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.IWeakEventListener">
          <source>The <ph id="ph1">&lt;xref:System.Windows.WeakEventManager&gt;</ph> (a dispatcher) forwards an event by calling the <ph id="ph2">&lt;xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A&gt;</ph> method on classes that implement this interface, and that have been added as listeners by calling <ph id="ph3">&lt;xref:System.Windows.WeakEventManager&gt;</ph> methods beforehand.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.WeakEventManager&gt;</ph> (Диспетчера) перенаправляет события путем вызова <ph id="ph2">&lt;xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A&gt;</ph> метод в классах, которые реализуют этот интерфейс и которые были добавлены в качестве прослушивателей путем вызова <ph id="ph3">&lt;xref:System.Windows.WeakEventManager&gt;</ph> методы заранее.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.IWeakEventListener">
          <source>The principal reason for following the WeakEvent pattern is when the event source has an object lifetime that is potentially independent of the event listeners.</source>
          <target state="translated">Основная причина для следующего шаблона WeakEvent — источник событий имеет время существования объекта, потенциально независимого от прослушивателей событий.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.IWeakEventListener">
          <source>Using the central event dispatching of a <ph id="ph1">&lt;xref:System.Windows.WeakEventManager&gt;</ph> enables the handlers for listeners to be garbage collected (or manually purged) even if the source object lifetime extends beyond the listeners.</source>
          <target state="translated">С помощью централизованной диспетчеризации событий <ph id="ph1">&lt;xref:System.Windows.WeakEventManager&gt;</ph> включает обработчики прослушивателей сборщику мусора собранные (или ручной очистке) даже если источник объекта превышает время существования прослушивателей.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.IWeakEventListener">
          <source>By contrast, a normal event hookup using <ph id="ph1">`+=`</ph> or equivalent language-specific event syntax causes the potentially still-connected source to hold a strong reference to the handlers.</source>
          <target state="translated">Напротив подключение завершается обычные события с помощью <ph id="ph1">`+=`</ph> или синтаксис эквивалентного события языка приводит потенциально постоянного подключенного источника для хранения строгую ссылку для обработчиков.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.IWeakEventListener">
          <source>This keeps the listener references from being garbage collected in a timely fashion.</source>
          <target state="translated">В этом случае ссылки на прослушиватели от сборщика мусора в течение отведенного времени.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.IWeakEventListener">
          <source>One common situation where the relationships between sources and listeners suggests the use of this pattern is the handling of update events coming from sources for data bindings.</source>
          <target state="translated">Одна из распространенных ситуаций, где связи между источниками и прослушивателями предполагают использование этого шаблона, является обработка событий обновления, поступающих из источников для привязок данных.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.IWeakEventListener">
          <source>You can use the WeakEvent pattern to listen for events that are external to your application.</source>
          <target state="translated">Шаблон WeakEvent можно использовать для прослушивания событий, которые являются внешними для вашего приложения.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.IWeakEventListener">
          <source>You only need to define a <ph id="ph1">&lt;xref:System.Windows.WeakEventManager&gt;</ph> for it, provide listening behavior in <ph id="ph2">&lt;xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A&gt;</ph>, and use the <ph id="ph3">&lt;xref:System.Windows.WeakEventManager&gt;</ph> to attach the handler references rather than <ph id="ph4">`+=`</ph>.</source>
          <target state="translated">Необходимо определить <ph id="ph1">&lt;xref:System.Windows.WeakEventManager&gt;</ph> , обеспечить прослушивания поведение в <ph id="ph2">&lt;xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A&gt;</ph>и использовать <ph id="ph3">&lt;xref:System.Windows.WeakEventManager&gt;</ph> присоединить обработчик ссылающегося вместо <ph id="ph4">`+=`</ph>.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source>The type of the <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph> calling this method.</source>
          <target state="translated">Тип объекта <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph>, который вызывает этот метод.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source>Object that originated the event.</source>
          <target state="translated">Объект, в котором произошло событие.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source>Event data.</source>
          <target state="translated">Данные события.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source>Receives events from the centralized event manager.</source>
          <target state="translated">Получает события от централизованного диспетчера событий.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the listener handled the event.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, если прослушиватель обработал событие.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source>It is considered an error by the <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph> handling in <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> to register a listener for an event that the listener does not handle.</source>
          <target state="translated">При обработке диспетчером <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph> в <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> регистрация прослушивателя для события, которое он не обрабатывает, считается ошибкой.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source>Regardless, the method should return <ph id="ph1">&lt;see langword="false" /&gt;</ph> if it receives an event that it does not recognize or handle.</source>
          <target state="translated">Вне зависимости от этого, метод должен вернуть <ph id="ph1">&lt;see langword="false" /&gt;</ph> в случае получения события, которое он не может распознать или обработать.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source>The following example implements <ph id="ph1">&lt;xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A&gt;</ph> to provide WeakEvent pattern support for two hypothetical events <ph id="ph2">`ClockwiseSpin`</ph> and <ph id="ph3">`CounterclockwiseSpin`</ph> that each have a dedicated <ph id="ph4">&lt;xref:System.Windows.WeakEventManager&gt;</ph> (not shown).</source>
          <target state="translated">В следующем примере реализуется <ph id="ph1">&lt;xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A&gt;</ph> для обеспечения поддержки шаблон WeakEvent двух гипотетических событий <ph id="ph2">`ClockwiseSpin`</ph> и <ph id="ph3">`CounterclockwiseSpin`</ph> , имеющих выделенную <ph id="ph4">&lt;xref:System.Windows.WeakEventManager&gt;</ph> (не показано).</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source>This implementation calls class handler stubs for each supported event, casting the event data (in this case the two events share an event data type <ph id="ph1">`SpinEventArgs`</ph>).</source>
          <target state="translated">Эта реализация вызывает заглушки обработчиков класса для каждого поддерживаемого события, приводя данные события (в этом случае два события совместно использовать тот же тип данных <ph id="ph1">`SpinEventArgs`</ph>).</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source>The implementation returns <ph id="ph1">`false`</ph> if the event received is not one that is expected.</source>
          <target state="translated">Реализация возвращает <ph id="ph1">`false`</ph> Если полученное событие не ожидается.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source>This method is intended to receive all possible events where the receiver is in a listener list.</source>
          <target state="translated">Этот метод предназначен для получения всех возможных событий, получатель которых находится в списке прослушивателей.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source>Particularly if implementing for a class that is listening for more than one event, you must check the type of the incoming <ph id="ph1">&lt;paramref name="managerType" /&gt;</ph> parameter in order to know which event the call corresponds to.</source>
          <target state="translated">Особенно в том случае, если реализации класса, прослушивающего более одного события, необходимо проверить тип входящего <ph id="ph1">&lt;paramref name="managerType" /&gt;</ph> соответствующий параметр, чтобы узнать, какому событию вызова.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source>This is why each event that is to be part of the pattern must have a dedicated <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph>.</source>
          <target state="translated">Именно поэтому каждого события, которые будут входить в состав шаблона должен иметь выделенную <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source>Also, the <ph id="ph1">&lt;paramref name="e" /&gt;</ph> parameter is typed as the general <ph id="ph2">&lt;see cref="T:System.EventArgs" /&gt;</ph>.</source>
          <target state="translated">Кроме того <ph id="ph1">&lt;paramref name="e" /&gt;</ph> параметр типизируется как обычные <ph id="ph2">&lt;see cref="T:System.EventArgs" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source>Therefore, in order get any specific properties out of the event data, your implementation will need to cast to the specific event data type.</source>
          <target state="translated">Таким образом, для получения свойств из данных события, реализации нужно будет приведен к типу данных определенного события.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source>Typically, after checking for the identity of the event based on the <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph> type, your implementation should call a private class handler.</source>
          <target state="translated">Как правило, после проверки того, для идентификации событий, на основе <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph> типа, реализация должна вызывать обработчик закрытый класс.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source>Your class handler could conceivably be the very same class handler that is used to handle that event for listeners that are added through the conventional event pattern of adding via <ph id="ph1">&lt;see langword="+=" /&gt;</ph> to the event on the sender.</source>
          <target state="translated">Обработчик класса предположительно может быть тот же обработчик класса, используемый для обработки данного события для прослушивателей, добавляемых через стандартный шаблон добавления <ph id="ph1">&lt;see langword="+=" /&gt;</ph> событие на стороне отправителя.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source>The following example section provides a rough implementation template.</source>
          <target state="translated">В приведенном ниже разделе предоставляет примерный шаблон реализации.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>