<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="PropertyMetadata.xml" source-language="en-US" target-language="ru-RU">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac55c5dfef7a02e9b858a22854c1ef79b198ef1d9bc.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5c5dfef7a02e9b858a22854c1ef79b198ef1d9bc</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.PropertyMetadata">
          <source>Defines certain behavior aspects of a dependency property as it is applied to a specific type, including conditions it was registered with.</source>
          <target state="translated">Определяет некоторые аспекты поведения свойства зависимостей применительно к определенному типу, включая условия, в которых оно было зарегистрировано.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.PropertyMetadata">
          <source>Property metadata can be defined and used during dependency property registration when calling the <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;</ph> method (or variations for attached properties or read-only dependency properties), or after original owner registration when calling the <ph id="ph2">&lt;xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A&gt;</ph> method.</source>
          <target state="translated">Метаданные свойства могут быть определены и используется во время регистрации свойства зависимостей, при вызове <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;</ph> метод (или вариантов для присоединенных свойств или свойств зависимостей только для чтения) или после исходной регистрации владельца при вызове <ph id="ph2">&lt;xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A&gt;</ph> метод.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.PropertyMetadata">
          <source><ph id="ph1">&lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;</ph> also takes property metadata.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;</ph> Кроме того, принимает метаданные свойства.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.PropertyMetadata">
          <source>This class is a concrete base class that can be used in each of these calls.</source>
          <target state="translated">Этот класс является конкретного базового класса, который может использоваться в каждом из этих вызовов.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.PropertyMetadata">
          <source>However, it is very common to specify metadata using one of the derived classes such as <ph id="ph1">&lt;xref:System.Windows.FrameworkPropertyMetadata&gt;</ph>.</source>
          <target state="translated">Однако это очень часто, чтобы указать метаданные с помощью одного из производных классов, например <ph id="ph1">&lt;xref:System.Windows.FrameworkPropertyMetadata&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.PropertyMetadata">
          <source>These derived classes support more detailed metadata carried as Boolean property values, which are useful for either detecting or enabling some property system and layout behaviors that are only implemented at the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> framework level.</source>
          <target state="translated">Эти производные классы поддерживают более подробные метаданные, передающиеся как логические значения свойств, которые полезны для определения или некоторые свойства системы и макет поведения, реализованных в <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> уровня структуры.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.PropertyMetadata">
          <source>Several properties of this class are read-write to the object model, but can only be written prior to the instance being used in a property system operation such as <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A&gt;</ph>.</source>
          <target state="translated">Некоторые свойства этого класса, чтения и записи к объектной модели, но можно записать только до экземпляра, используемых в операции системы свойств, таких как <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;</ph> или <ph id="ph2">&lt;xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.PropertyMetadata">
          <source>Each of these properties could also have been set by the constructor but are exposed so that <ph id="ph1">&lt;xref:System.Windows.PropertyMetadata.Merge%2A&gt;</ph> method implementations can set them.</source>
          <target state="translated">Каждое из этих свойств может также быть заданы с помощью конструктора, а предоставляются, чтобы <ph id="ph1">&lt;xref:System.Windows.PropertyMetadata.Merge%2A&gt;</ph> реализации методов можно задать их.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.PropertyMetadata">
          <source>XAML Text Usage</source>
          <target state="translated">Использование текста XAML</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.PropertyMetadata">
          <source>This type, and members of this type, are not typically used in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
          <target state="translated">Данный тип и его члены этого типа обычно не используются в <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="T:System.Windows.PropertyMetadata">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.PropertyMetadata" /&gt;</ph> class.</source>
          <target state="translated">Инициализирует новый экземпляр класса <ph id="ph1">&lt;see cref="T:System.Windows.PropertyMetadata" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Windows.PropertyMetadata.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.PropertyMetadata" /&gt;</ph> class.</source>
          <target state="translated">Инициализирует новый экземпляр класса <ph id="ph1">&lt;see cref="T:System.Windows.PropertyMetadata" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Windows.PropertyMetadata.#ctor(System.Object)">
          <source>The default value to specify for a dependency property, usually provided as a value of some specific type.</source>
          <target state="translated">Как правило, значение по умолчанию, указанное для свойства зависимостей, представляет собой значение определенного типа.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Windows.PropertyMetadata.#ctor(System.Object)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.PropertyMetadata" /&gt;</ph> class with a specified default value for the dependency property that this metadata will be applied to.</source>
          <target state="translated">Инициализирует новый экземпляр класса <ph id="ph1">&lt;see cref="T:System.Windows.PropertyMetadata" /&gt;</ph> с указанным значением по умолчанию для свойства зависимостей, к которому будут применены метаданные.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.PropertyMetadata.#ctor(System.Object)">
          <source>The type of the value provided for <ph id="ph1">`defaultValue`</ph> must be match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</source>
          <target state="translated">Тип значения, заданного для <ph id="ph1">`defaultValue`</ph> должен соответствовать или относиться к типу, заданному в исходной регистрации применяются эти метаданные свойства зависимостей.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.PropertyMetadata.#ctor(System.Object)">
          <source>Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation (the mismatch will raise a run-time exception).</source>
          <target state="translated">Несоответствие между типом значений метаданных по умолчанию и типом свойства зависимостей, к которому он применяется к может быть трудно отлаживать, из-за рассогласования не удается обнаружить во время компиляции (несовпадение вызовет исключение во время выполнения).</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.PropertyMetadata.#ctor(System.Object)">
          <source>Although it is the default per the parameterless constructor, a <ph id="ph1">`defaultValue`</ph> of <ph id="ph2">&lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;</ph> cannot be specified.</source>
          <target state="translated">Несмотря на то, что он подразумевается по умолчанию на конструктор без параметров, <ph id="ph1">`defaultValue`</ph> из <ph id="ph2">&lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;</ph> не может быть указан.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.PropertyMetadata.#ctor(System.Object)">
          <source>Attempting to do so will raise an exception.</source>
          <target state="translated">Попытка выполнить такую операцию вызовет исключение.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Windows.PropertyMetadata.#ctor(System.Object)">
          <source><ph id="ph1">&lt;paramref name="defaultValue" /&gt;</ph> cannot be set to the value <ph id="ph2">&lt;see cref="F:System.Windows.DependencyProperty.UnsetValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="defaultValue" /&gt;</ph> не может иметь значение <ph id="ph2">&lt;see cref="F:System.Windows.DependencyProperty.UnsetValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Windows.PropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)">
          <source>Reference to a handler implementation that is to be called by the property system whenever the effective value of the property changes.</source>
          <target state="translated">Ссылка на реализацию обработчика вызывается системой управления свойствами при каждом изменении значения свойства.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Windows.PropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.PropertyMetadata" /&gt;</ph> class with the specified <ph id="ph2">&lt;see cref="T:System.Windows.PropertyChangedCallback" /&gt;</ph> implementation reference.</source>
          <target state="translated">Инициализирует новый экземпляр класса <ph id="ph1">&lt;see cref="T:System.Windows.PropertyMetadata" /&gt;</ph> с указанной ссылкой реализации <ph id="ph2">&lt;see cref="T:System.Windows.PropertyChangedCallback" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)">
          <source>The default value of the dependency property, usually provided as a value of some specific type.</source>
          <target state="translated">Как правило, значение по умолчанию свойства зависимостей представляет собой значение определенного типа.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)">
          <source>Reference to a handler implementation that is to be called by the property system whenever the effective value of the property changes.</source>
          <target state="translated">Ссылка на реализацию обработчика вызывается системой управления свойствами при каждом изменении значения свойства.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.PropertyMetadata" /&gt;</ph> class with the specified default value and <ph id="ph2">&lt;see cref="T:System.Windows.PropertyChangedCallback" /&gt;</ph> implementation reference.</source>
          <target state="translated">Инициализирует новый экземпляр класса <ph id="ph1">&lt;see cref="T:System.Windows.PropertyMetadata" /&gt;</ph> с указанным значением по умолчанию и ссылкой на реализацию <ph id="ph2">&lt;see cref="T:System.Windows.PropertyChangedCallback" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)">
          <source>The type of the value provided <ph id="ph1">`defaultValue`</ph> must be match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</source>
          <target state="translated">Тип значения, заданного <ph id="ph1">`defaultValue`</ph> должен соответствовать или относиться к типу, заданному в исходной регистрации применяются эти метаданные свойства зависимостей.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)">
          <source>Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation (the mismatch will raise a run-time exception).</source>
          <target state="translated">Несоответствие между типом значений метаданных по умолчанию и типом свойства зависимостей, к которому он применяется к может быть трудно отлаживать, из-за рассогласования не удается обнаружить во время компиляции (несовпадение вызовет исключение во время выполнения).</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)">
          <source>Although it is the default per the parameterless constructor, a <ph id="ph1">`defaultValue`</ph> of <ph id="ph2">&lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;</ph> cannot be specified.</source>
          <target state="translated">Несмотря на то, что он подразумевается по умолчанию на конструктор без параметров, <ph id="ph1">`defaultValue`</ph> из <ph id="ph2">&lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;</ph> не может быть указан.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)">
          <source>Attempting to do so will raise an exception.</source>
          <target state="translated">Попытка выполнить такую операцию вызовет исключение.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)">
          <source><ph id="ph1">&lt;paramref name="defaultValue" /&gt;</ph> cannot be set to the value <ph id="ph2">&lt;see cref="F:System.Windows.DependencyProperty.UnsetValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="defaultValue" /&gt;</ph> не может иметь значение <ph id="ph2">&lt;see cref="F:System.Windows.DependencyProperty.UnsetValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)">
          <source>The default value of the dependency property, usually provided as a value of some specific type.</source>
          <target state="translated">Как правило, значение по умолчанию свойства зависимостей представляет собой значение определенного типа.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)">
          <source>Reference to a handler implementation that is to be called by the property system whenever the effective value of the property changes.</source>
          <target state="translated">Ссылка на реализацию обработчика вызывается системой управления свойствами при каждом изменении значения свойства.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)">
          <source>Reference to a handler implementation that is to be called whenever the property system calls <ph id="ph1">&lt;see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /&gt;</ph> against this property.</source>
          <target state="translated">Ссылка на реализацию обработчика вызывается системой управления свойствами при каждом вызове <ph id="ph1">&lt;see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /&gt;</ph> против данного свойства.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.PropertyMetadata" /&gt;</ph> class with the specified default value and callbacks.</source>
          <target state="translated">Инициализирует новый экземпляр <ph id="ph1">&lt;see cref="T:System.Windows.PropertyMetadata" /&gt;</ph> класса с заданными значением по умолчанию и ответами.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)">
          <source>If you want to specify a <ph id="ph1">&lt;xref:System.Windows.CoerceValueCallback&gt;</ph> but not a <ph id="ph2">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph>, you can pass <ph id="ph3">`null`</ph> for the <ph id="ph4">`propertyChangedCallback`</ph> parameter.</source>
          <target state="translated">Если вы хотите указать <ph id="ph1">&lt;xref:System.Windows.CoerceValueCallback&gt;</ph> , но не <ph id="ph2">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph>, можно передать <ph id="ph3">`null`</ph> для <ph id="ph4">`propertyChangedCallback`</ph> параметра.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)">
          <source>The type of the value provided for <ph id="ph1">`defaultValue`</ph> must be match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</source>
          <target state="translated">Тип значения, заданного для <ph id="ph1">`defaultValue`</ph> должен соответствовать или относиться к типу, заданному в исходной регистрации применяются эти метаданные свойства зависимостей.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)">
          <source>Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation (the mismatch will raise a run-time exception).</source>
          <target state="translated">Несоответствие между типом значений метаданных по умолчанию и типом свойства зависимостей, к которому он применяется к может быть трудно отлаживать, из-за рассогласования не удается обнаружить во время компиляции (несовпадение вызовет исключение во время выполнения).</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)">
          <source>Although it is the default per the parameterless constructor, a <ph id="ph1">`defaultValue`</ph> of <ph id="ph2">&lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;</ph> cannot be specified.</source>
          <target state="translated">Несмотря на то, что он подразумевается по умолчанию на конструктор без параметров, <ph id="ph1">`defaultValue`</ph> из <ph id="ph2">&lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;</ph> не может быть указан.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)">
          <source>Attempting to do so will raise an exception.</source>
          <target state="translated">Попытка выполнить такую операцию вызовет исключение.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)">
          <source><ph id="ph1">&lt;paramref name="defaultValue" /&gt;</ph> cannot be set to the value <ph id="ph2">&lt;see cref="F:System.Windows.DependencyProperty.UnsetValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="defaultValue" /&gt;</ph> не может иметь значение <ph id="ph2">&lt;see cref="F:System.Windows.DependencyProperty.UnsetValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="P:System.Windows.PropertyMetadata.CoerceValueCallback">
          <source>Gets or sets a reference to a <ph id="ph1">&lt;see cref="T:System.Windows.CoerceValueCallback" /&gt;</ph> implementation specified in this metadata.</source>
          <target state="translated">Возвращает или задает ссылку на реализацию <ph id="ph1">&lt;see cref="T:System.Windows.CoerceValueCallback" /&gt;</ph> указанную в этих метаданных.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyMetadata.CoerceValueCallback">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.CoerceValueCallback" /&gt;</ph> implementation reference.</source>
          <target state="translated">Ссылка реализации <ph id="ph1">&lt;see cref="T:System.Windows.CoerceValueCallback" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyMetadata.CoerceValueCallback">
          <source>The callbacks in property metadata are not typically public members on the containing type, so the value of this property is not important for most scenarios that just consume an existing dependency property's metadata.</source>
          <target state="translated">Ответы свойства метаданных не являются обычно открытых членов в содержащем типе, поэтому значение этого свойства не является важным для большинства сценариев, которые просто поглощают метаданные существующего свойства зависимостей.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyMetadata.CoerceValueCallback">
          <source>One reason this property is exposed is so that metadata subclasses can perform their desired merge logic if both base metadata and overriding/adding metadata specify a <ph id="ph1">&lt;xref:System.Windows.CoerceValueCallback&gt;</ph>.</source>
          <target state="translated">Является одной из причин этого свойства предоставляется, чтобы подклассы метаданных могут осуществлять необходимую логику совмещения, если основные метаданные и переопределение Добавление метаданные указывают <ph id="ph1">&lt;xref:System.Windows.CoerceValueCallback&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyMetadata.CoerceValueCallback">
          <source>However, the default merge logic for a <ph id="ph1">&lt;xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt;</ph> is to replace the previous one.</source>
          <target state="translated">Тем не менее, значение по умолчанию слияния логику для <ph id="ph1">&lt;xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt;</ph> замените предыдущий.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyMetadata.CoerceValueCallback">
          <source><ph id="ph1">&lt;xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt;</ph> is defined in the object model as read-write.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt;</ph> определяется в объектной модели для чтения записи.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyMetadata.CoerceValueCallback">
          <source>This is so <ph id="ph1">&lt;xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt;</ph> can be adjusted after initialization of the <ph id="ph2">&lt;xref:System.Windows.PropertyMetadata&gt;</ph> object itself.</source>
          <target state="translated">Да <ph id="ph1">&lt;xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt;</ph> можно изменить после инициализации <ph id="ph2">&lt;xref:System.Windows.PropertyMetadata&gt;</ph> сам объект.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyMetadata.CoerceValueCallback">
          <source>However, once the metadata is consumed as part of a call to <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;</ph>, or <ph id="ph3">&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;</ph>, the property system will seal that metadata instance and the properties are now considered immutable.</source>
          <target state="translated">Тем не менее когда метаданные используются как часть вызова <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;</ph>, или <ph id="ph3">&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;</ph>, в системе свойств будет запечатать этот экземпляр метаданных и свойств теперь считаются неизменяемыми.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyMetadata.CoerceValueCallback">
          <source>Attempting to set <ph id="ph1">&lt;xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt;</ph> once <ph id="ph2">&lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;</ph> is <ph id="ph3">`true`</ph> on this metadata instance will raise an exception.</source>
          <target state="translated">Попытка задать <ph id="ph1">&lt;xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt;</ph> после <ph id="ph2">&lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;</ph> — <ph id="ph3">`true`</ph> на эти метаданные экземпляра вызовет исключение.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="P:System.Windows.PropertyMetadata.CoerceValueCallback">
          <source>Cannot set a metadata property once it is applied to a dependency property operation.</source>
          <target state="translated">Невозможно задать свойство метаданных после того, как оно применено к ориентации свойства зависимостей.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="P:System.Windows.PropertyMetadata.DefaultValue">
          <source>Gets or sets the default value of the dependency property.</source>
          <target state="translated">Возвращает или задает значение по умолчанию свойства зависимостей.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyMetadata.DefaultValue">
          <source>The default value of the property.</source>
          <target state="translated">Значение свойства по умолчанию.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyMetadata.DefaultValue">
          <source>The default value on a <ph id="ph1">&lt;see cref="T:System.Windows.PropertyMetadata" /&gt;</ph> instance created with the parameterless constructor will be <ph id="ph2">&lt;see cref="F:System.Windows.DependencyProperty.UnsetValue" /&gt;</ph>.</source>
          <target state="translated">Значение по умолчанию <ph id="ph1">&lt;see cref="T:System.Windows.PropertyMetadata" /&gt;</ph> экземпляр, созданный с помощью конструктора без параметров будет <ph id="ph2">&lt;see cref="F:System.Windows.DependencyProperty.UnsetValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyMetadata.DefaultValue">
          <source><ph id="ph1">&lt;xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt;</ph> is defined in the object model as read-write.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt;</ph> определяется в объектной модели для чтения записи.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyMetadata.DefaultValue">
          <source>This is so <ph id="ph1">&lt;xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt;</ph> can be adjusted after initialization of the <ph id="ph2">&lt;xref:System.Windows.PropertyMetadata&gt;</ph> object itself.</source>
          <target state="translated">Да <ph id="ph1">&lt;xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt;</ph> можно изменить после инициализации <ph id="ph2">&lt;xref:System.Windows.PropertyMetadata&gt;</ph> сам объект.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyMetadata.DefaultValue">
          <source>However, once the metadata is consumed as part of a call to <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;</ph>, or <ph id="ph3">&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;</ph>, the property system will seal that metadata instance and the properties are now considered immutable.</source>
          <target state="translated">Тем не менее когда метаданные используются как часть вызова <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;</ph>, или <ph id="ph3">&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;</ph>, в системе свойств будет запечатать этот экземпляр метаданных и свойств теперь считаются неизменяемыми.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyMetadata.DefaultValue">
          <source>Attempting to set <ph id="ph1">&lt;xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt;</ph> once <ph id="ph2">&lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;</ph> is <ph id="ph3">`true`</ph> on this metadata instance will raise an exception.</source>
          <target state="translated">Попытка задать <ph id="ph1">&lt;xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt;</ph> после <ph id="ph2">&lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;</ph> — <ph id="ph3">`true`</ph> на эти метаданные экземпляра вызовет исключение.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyMetadata.DefaultValue">
          <source>Although it is the default per the parameterless constructor, a <ph id="ph1">`defaultValue`</ph> of <ph id="ph2">&lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;</ph> cannot be set using either <ph id="ph3">&lt;xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt;</ph> or the constructor.</source>
          <target state="translated">Несмотря на то, что он подразумевается по умолчанию на конструктор без параметров, <ph id="ph1">`defaultValue`</ph> из <ph id="ph2">&lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;</ph> нельзя задать с помощью <ph id="ph3">&lt;xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt;</ph> или конструктора.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyMetadata.DefaultValue">
          <source>Attempting to do so will raise an exception.</source>
          <target state="translated">Попытка выполнить такую операцию вызовет исключение.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyMetadata.DefaultValue">
          <source>XAML Text Usage</source>
          <target state="translated">Использование текста XAML</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyMetadata.DefaultValue">
          <source>Members of this type are not typically used in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
          <target state="translated">Члены этого типа обычно не используются в <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="P:System.Windows.PropertyMetadata.DefaultValue">
          <source>Cannot be set to the value <ph id="ph1">&lt;see cref="F:System.Windows.DependencyProperty.UnsetValue" /&gt;</ph> once created.</source>
          <target state="translated">Невозможно задать значение <ph id="ph1">&lt;see cref="F:System.Windows.DependencyProperty.UnsetValue" /&gt;</ph> после создания.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="P:System.Windows.PropertyMetadata.DefaultValue">
          <source>Cannot set a metadata property once it is applied to a dependency property operation.</source>
          <target state="translated">Невозможно задать свойство метаданных после того, как оно применено к ориентации свойства зависимостей.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="P:System.Windows.PropertyMetadata.IsSealed">
          <source>Gets a value that determines whether the metadata has been applied to a property in some way, resulting in the immutable state of that metadata instance.</source>
          <target state="translated">Возвращает значение, определяющее, были ли применены метаданные к свойству, что привело к запрету изменений экземпляра метаданных.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyMetadata.IsSealed">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the metadata instance is immutable; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, если экземпляр метаданных не подлежит изменениям; в противном случае — <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyMetadata.IsSealed">
          <source>Various properties of <ph id="ph1">&lt;xref:System.Windows.PropertyMetadata&gt;</ph>, such as <ph id="ph2">&lt;xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt;</ph>, are defined in the object model as read-write.</source>
          <target state="translated">Различные свойства <ph id="ph1">&lt;xref:System.Windows.PropertyMetadata&gt;</ph>, такие как <ph id="ph2">&lt;xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt;</ph>, определенных в модели объектов чтения и записи.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyMetadata.IsSealed">
          <source>This is so those properties can be adjusted after initialization of the <ph id="ph1">&lt;xref:System.Windows.PropertyMetadata&gt;</ph> object itself.</source>
          <target state="translated">Поэтому эти свойства можно изменить после инициализации <ph id="ph1">&lt;xref:System.Windows.PropertyMetadata&gt;</ph> сам объект.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyMetadata.IsSealed">
          <source>However, once the metadata is applied to a dependency property as part of a call to <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;</ph>, or <ph id="ph3">&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;</ph>, the property system will seal that metadata instance and the properties are now considered immutable.</source>
          <target state="translated">Тем не менее после применения метаданные свойства зависимостей в рамках вызова <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;</ph>, или <ph id="ph3">&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;</ph>, в системе свойств будет запечатать этот экземпляр метаданных и свойств теперь считаются неизменяемыми.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyMetadata.IsSealed">
          <source>At the time of one of these calls, <ph id="ph1">&lt;xref:System.Windows.PropertyMetadata.OnApply%2A&gt;</ph> is called, and the value of this property is set to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Во время этих вызовов <ph id="ph1">&lt;xref:System.Windows.PropertyMetadata.OnApply%2A&gt;</ph> вызывается, и значение этого свойства равно <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyMetadata.IsSealed">
          <source>The following example  checks <ph id="ph1">&lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;</ph> prior to a set operation of a custom metadata property.</source>
          <target state="translated">В следующем примере проверяется <ph id="ph1">&lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;</ph> до операции задания пользовательских метаданных свойства.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)">
          <source>The base metadata to merge with this instance's values.</source>
          <target state="translated">Основные метаданные, с которыми следует совместить значения экземпляра.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)">
          <source>The dependency property to which this metadata is being applied.</source>
          <target state="translated">Свойство зависимостей, к которому применяются данные метаданные.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)">
          <source>Merges this metadata with the base metadata.</source>
          <target state="translated">Совмещает эти метаданные с основными.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)">
          <source>This method is used internally when metadata is being overridden (<ph id="ph1">&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;</ph> method).</source>
          <target state="translated">Этот метод используется внутренне при переопределении метаданных (<ph id="ph1">&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;</ph> метода).</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)">
          <source>The following example implements a merge for a custom metadata type that adds an additional property to the property metadata.</source>
          <target state="translated">В следующем примере реализуется слияния для типа пользовательских метаданных, который добавляет дополнительное свойство в метаданных свойства.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)">
          <source>Class implementations that derive from <ph id="ph1">&lt;see cref="T:System.Windows.PropertyMetadata" /&gt;</ph> should override this method to account for any metadata properties they have added in their implementations.</source>
          <target state="translated">Класс реализации, которые являются производными от <ph id="ph1">&lt;see cref="T:System.Windows.PropertyMetadata" /&gt;</ph> следует переопределить этот метод для учетной записи для всех свойств метаданных, добавленных в их реализации.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)">
          <source>For instance, your implementation might have added a new flagwise enumeration value, and the <ph id="ph1">&lt;see cref="M:System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" /&gt;</ph> implementation should then be able to combine those flags correctly.</source>
          <target state="translated">Например, для реализации могут быть добавлены новое значение флагового перечисления и <ph id="ph1">&lt;see cref="M:System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" /&gt;</ph> реализации должна быть возможность правильно объединить эти флаги.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)">
          <source>Always call the base implementation prior to your implementation code, because the base implementation takes care of merging all the properties already defined on the <ph id="ph1">&lt;see cref="T:System.Windows.PropertyMetadata" /&gt;</ph> type.</source>
          <target state="translated">Всегда вызывать базовую реализацию до код реализации, так как базовая реализация берет на себя все свойства, которые уже определены на <ph id="ph1">&lt;see cref="T:System.Windows.PropertyMetadata" /&gt;</ph> типа.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)">
          <source>The exact behavior of the merge is up to you.</source>
          <target state="translated">Точное поведение объединения возлагается.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)">
          <source>You could choose to have values combined, revert to base value if the derived metadata were left at the default, or many other behaviors based on the types of properties you have added to your particular metadata class, and their meanings.</source>
          <target state="translated">Можно иметь объединенные значения, возвращаются к базовое значение, если производные метаданные не были удалены на значение по умолчанию или многие другие поведения, основанное на типах свойств, которые вы добавили в класс метаданных и их значения.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)">
          <source>The dependency property to which the metadata has been applied.</source>
          <target state="translated">Свойство зависимостей, к которому были применены эти метаданные.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)">
          <source>The type associated with this metadata if this is type-specific metadata.</source>
          <target state="translated">Тип, связанный с этими метаданными, если это метаданные зависящие от типа.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)">
          <source>If this is default metadata, this value is a null reference.</source>
          <target state="translated">Если это метаданные по умолчанию, значением будет нулевая ссылка.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)">
          <source>Called when this metadata has been applied to a property, which indicates that the metadata is being sealed.</source>
          <target state="translated">Вызывается после применения данных метаданных к свойству, указывая на запечатывание метаданных.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)">
          <source>Subclasses should assure that any mutability of the data structure of a <ph id="ph1">&lt;xref:System.Windows.PropertyMetadata&gt;</ph> subclass should be marked as immutable once <ph id="ph2">&lt;xref:System.Windows.PropertyMetadata.OnApply%2A&gt;</ph> is called.</source>
          <target state="translated">Подклассы должны убедиться, что все изменения структуры данных <ph id="ph1">&lt;xref:System.Windows.PropertyMetadata&gt;</ph> подкласс должен быть помечен как неизменяемое один раз <ph id="ph2">&lt;xref:System.Windows.PropertyMetadata.OnApply%2A&gt;</ph> вызывается.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)">
          <source>This will be called once the metadata is applied to a property system operation (register, add owner, override metadata).</source>
          <target state="translated">Вызывается после применения метаданных операции системы свойств (регистрация, добавление владельца, переопределения метаданных).</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="P:System.Windows.PropertyMetadata.PropertyChangedCallback">
          <source>Gets or sets a reference to a <ph id="ph1">&lt;see cref="T:System.Windows.PropertyChangedCallback" /&gt;</ph> implementation specified in this metadata.</source>
          <target state="translated">Возвращает или задает ссылку на реализацию <ph id="ph1">&lt;see cref="T:System.Windows.PropertyChangedCallback" /&gt;</ph> указанную в этих метаданных.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyMetadata.PropertyChangedCallback">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.PropertyChangedCallback" /&gt;</ph> implementation reference.</source>
          <target state="translated">Ссылка реализации <ph id="ph1">&lt;see cref="T:System.Windows.PropertyChangedCallback" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyMetadata.PropertyChangedCallback">
          <source>The callbacks in property metadata are not typically public members on the defining type, so the value of this property is not important for most scenarios that just consume an existing dependency property's metadata.</source>
          <target state="translated">Обратные вызовы свойства метаданных не обычно открытых членов, определяющего типа, поэтому значение этого свойства не является важным для большинства сценариев, которые просто поглощают метаданные существующего свойства зависимостей.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyMetadata.PropertyChangedCallback">
          <source>One reason this property is exposed is so that metadata classes can perform their desired merge logic if both base metadata and overriding/adding metadata specify a <ph id="ph1">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph>.</source>
          <target state="translated">Является одной из причин этого свойства предоставляется, чтобы классы метаданных могут осуществлять необходимую логику совмещения, если основные метаданные и переопределение Добавление метаданные указывают <ph id="ph1">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyMetadata.PropertyChangedCallback">
          <source>The default merge logic for is to maintain all <ph id="ph1">&lt;xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A&gt;</ph> implementations in a table and call each of them, with callbacks established by the deepest class in hierarchy running first.</source>
          <target state="translated">Логика слияния по умолчанию является поддержание всех <ph id="ph1">&lt;xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A&gt;</ph> реализации таблицы и вызовите метод из них с глубокой классом в иерархии, запуск первого установления обратных вызовов.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyMetadata.PropertyChangedCallback">
          <source><ph id="ph1">&lt;xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A&gt;</ph> is defined in the object model as read-write.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A&gt;</ph> определяется в объектной модели для чтения записи.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyMetadata.PropertyChangedCallback">
          <source>This is so <ph id="ph1">&lt;xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A&gt;</ph> can be adjusted after initialization of the <ph id="ph2">&lt;xref:System.Windows.PropertyMetadata&gt;</ph> object itself.</source>
          <target state="translated">Да <ph id="ph1">&lt;xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A&gt;</ph> можно изменить после инициализации <ph id="ph2">&lt;xref:System.Windows.PropertyMetadata&gt;</ph> сам объект.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyMetadata.PropertyChangedCallback">
          <source>However, once the metadata is consumed as part of a call to <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;</ph>, or <ph id="ph3">&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;</ph>, the property system will seal that metadata instance and the properties are now considered immutable.</source>
          <target state="translated">Тем не менее когда метаданные используются как часть вызова <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;</ph>, или <ph id="ph3">&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;</ph>, в системе свойств будет запечатать этот экземпляр метаданных и свойств теперь считаются неизменяемыми.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyMetadata.PropertyChangedCallback">
          <source>Attempting to set <ph id="ph1">&lt;xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A&gt;</ph> once <ph id="ph2">&lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;</ph> is <ph id="ph3">`true`</ph> on this metadata instance will raise an exception.</source>
          <target state="translated">Попытка задать <ph id="ph1">&lt;xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A&gt;</ph> после <ph id="ph2">&lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;</ph> — <ph id="ph3">`true`</ph> на эти метаданные экземпляра вызовет исключение.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="P:System.Windows.PropertyMetadata.PropertyChangedCallback">
          <source>Cannot set a metadata property once it is applied to a dependency property operation.</source>
          <target state="translated">Невозможно задать свойство метаданных после того, как оно применено к ориентации свойства зависимостей.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>