<Type Name="PropertyPath" FullName="System.Windows.PropertyPath">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8557652b4b165aa49213450463eba1ffb0a2f7de" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30679798" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class PropertyPath" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit PropertyPath extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.PropertyPath" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class PropertyPath" />
  <TypeSignature Language="C++ CLI" Value="public ref class PropertyPath sealed" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.PropertyPathConverter))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Реализует структуру данных для описания свойства как пути под другим свойством или под типом-владельцем. Пути свойств используются в привязках данных к объектам, а также в раскадровках и временных шкалах для анимации.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот класс содержит строку <xref:System.Windows.PropertyPath.Path%2A>и список свойств зависимостей, которые являются <xref:System.Windows.PropertyPath.PathParameters%2A> в строку <xref:System.Windows.PropertyPath.Path%2A>.  
  
 <xref:System.Windows.PropertyPath> поддерживает два режима работы:  
  
 **Режим источника** описывает путь к свойству, используемый в качестве источника для другой операции. Этот режим используется по <xref:System.Windows.Data.Binding> класс для поддержки привязки данных.  
  
 **Режим целевого** описывает путь к свойству, будет установлен в качестве целевого свойства. Этот режим используется для поддержки раскадровки и временная шкала задания.  
  
 Например `Background.Opacity` представляет собой двухэтапный путь. Этот путь подразумевает: во-первых, найти `Background` свойство объекта, получается значение, `Background` свойство имеет значение, а затем получить значение `Opacity` свойства для этого объекта.  
  
<a name="xamlAttributeUsage_PropertyPath"></a>   
## <a name="xaml-attribute-usage"></a>Использование атрибута XAML  
  
```  
<object property="propertyPath" .../>  
```  
  
<a name="xamlValues_PropertyPath"></a>   
## <a name="xaml-values"></a>Значения XAML  
 *propertyPath*  
 Строка, вычисляемое для быть путем простого или сложного свойства. Синтаксис параметра <xref:System.Windows.PropertyPath> в [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] является универсальным, но сложные и рассматривается в отдельном разделе [XAML синтаксическая конструкция PropertyPath](~/docs/framework/wpf/advanced/propertypath-xaml-syntax.md).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Windows.PropertyPath" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertyPath (object parameter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.PropertyPath.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (parameter As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PropertyPath(System::Object ^ parameter);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="parameter">Путь свойства, описывающий путь к свойству [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)], или же единому свойству зависимостей.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Windows.PropertyPath" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот конструктор имеет два разных применения в зависимости от того, является ли он используется для пути свойства режим источника привязки, или режим целевого пути свойства для раскадровки цели.  
  
 Если с помощью этого <xref:System.Windows.PropertyPath> в режиме исходного кода для привязки и `parameter` является строка, представляющая имя свойства, или может быть строка, описывающая «промежуточный» путь к свойству в [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] объектной модели объекта, который используется в качестве источника для привязки. Для привязки пути свойства символ, «шаг», точка (.). Также поддерживаются ссылки индексаторов (включая множественные индексаторы и разграничение типа). Дополнительные сведения о синтаксисе строки, используемые особо <xref:System.Windows.Data.Binding> см. в разделе <xref:System.Windows.Data.Binding.Path%2A?displayProperty=nameWithType>. Свойство, используемое как источник привязки не должны быть свойством зависимостей. Если привязка, ссылочное свойство, заданное необходимо чтения и записи. Также Обратите внимание, что целевой объект привязки для свойства зависимостей. Дополнительные сведения см. в разделе [Общие сведения о привязке данных](~/docs/framework/wpf/data/data-binding-overview.md).  
  
 Если с помощью этого <xref:System.Windows.PropertyPath> в целевом режиме один шаг пути для раскадровки цели `parameter` обычно предоставляется в качестве типа <xref:System.Windows.DependencyProperty>. Можно также указать строку, являющуюся <xref:System.Windows.DependencyProperty.Name%2A>. Любой из этих иметь тот же результат, так как он внутренне хранятся в виде строки. Предоставленный <xref:System.Windows.DependencyProperty> преобразуется в строке с помощью <xref:System.Windows.Markup.DependencyPropertyConverter>. <xref:System.Windows.Markup.DependencyPropertyConverter> Поддерживает формат полного имени для свойства зависимостей, поэтому можно указать *typeName*.* propertyName* полное имя строки зависимостей свойства <xref:System.Windows.PropertyPath.%23ctor%2A?displayProperty=nameWithType> конструктор в коде. Полный путь для идентификатора свойства зависимости имеет отношения от сложного пути. Комплексное path <xref:System.Windows.PropertyPath> вместо должна быть создана с <xref:System.Windows.PropertyPath.%23ctor%2A?displayProperty=nameWithType> конструктор.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Data.Binding" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertyPath (string path, params object[] pathParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, object[] pathParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.PropertyPath.#ctor(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, ParamArray pathParameters As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PropertyPath(System::String ^ path, ... cli::array &lt;System::Object ^&gt; ^ pathParameters);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="pathParameters" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="path">Строка, указывающая <see cref="P:System.Windows.PropertyPath.Path" />, в размеченном формате.</param>
        <param name="pathParameters">Массив объектов, задающий <see cref="P:System.Windows.PropertyPath.PathParameters" />.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Windows.PropertyPath" /> с заданной строкой пути и внутренним и параметрами.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Эта подпись обычно используется только для режима целевой <xref:System.Windows.PropertyPath> использования сложных путями.  
  
 Этот конструктор поддерживает `params` для `pathParameters` аргумента конструктора. Таким образом можно задать содержимое `pathParameters` как ряд аргументов конструктора, разделенных запятыми, которые заполняют массив, а не вводить измерения массива и заполните его с `pathParameters` элементов. Каждый элемент в указании должен быть один из следующих типов: <xref:System.Windows.DependencyProperty>, <xref:System.Reflection.PropertyInfo>, <xref:System.ComponentModel.PropertyDescriptor>.  
  
 Дополнительные сведения о требованиях к параметров см. в разделе <xref:System.Windows.PropertyPath.Path%2A> и <xref:System.Windows.PropertyPath.PathParameters%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Path">
      <MemberSignature Language="C#" Value="public string Path { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Path" />
      <MemberSignature Language="DocId" Value="P:System.Windows.PropertyPath.Path" />
      <MemberSignature Language="VB.NET" Value="Public Property Path As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Path { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает строку, описывающую путь.</summary>
        <value>Строка, описывающая путь.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Строка, содержащаяся в это свойство имеет три абсолютно разные значения в зависимости от того, следует ли <xref:System.Windows.PropertyPath> используется для пути свойства режим источника для привязки, режим целевого пути свойства для раскадровки цели или сложным путь для раскадровки цели.  
  
 Если с помощью этого <xref:System.Windows.PropertyPath> в режиме исходного кода для привязки и <xref:System.Windows.PropertyPath.Path%2A> является строка, представляющая имя свойства, или может быть строка, описывающая «промежуточный» путь к свойству в [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] объектной модели объекта, который используется в качестве источника для привязки. Для привязки пути свойства символ, «шаг», точка (.). Также поддерживаются ссылки индексаторов (включая множественные индексаторы и разграничение типа). Дополнительные сведения о синтаксисе строки, используемые особо <xref:System.Windows.Data.Binding> см. в разделе <xref:System.Windows.Data.Binding.Path%2A?displayProperty=nameWithType>. Свойство, используемое как источник привязки не должны быть свойством зависимостей. Двойной привязке источником свойства требуется ли чтения и записи. Также Обратите внимание, что целевой объект привязки для свойства зависимостей. Дополнительные сведения см. в разделе [Общие сведения о привязке данных](~/docs/framework/wpf/data/data-binding-overview.md).  
  
 Если с помощью этого <xref:System.Windows.PropertyPath> в целевом режиме один шаг пути для раскадровки цели <xref:System.Windows.PropertyPath> является строкой, которая является *typeName*.* propertyName* указанием строки имя свойства зависимостей.  
  
 Если с помощью этого <xref:System.Windows.PropertyPath> сложного пути для раскадровки цели <xref:System.Windows.PropertyPath.Path%2A> является токенами строковый формат, который описывает связи для различных объектов, приведенные в <xref:System.Windows.PropertyPath.PathParameters%2A>.  
  
-   Каждый элемент в массиве задается в формате индекса массива для элемента, заключенный в круглые скобки. Например, для указания первого элемента в массиве, из маркера строки является `(0)`.  
  
-   Отношения между элементами («действия» в пути) указываются через точку (.). Свойство точки является первым шагом в пути, свойство после является вторым шагом и т. д (можно указать помимо двух шагов). Последний шаг в цепочке всегда представляет анимируемого свойства.  
  
-   Свойствам коллекции осуществляется с помощью синтаксиса индексатора, с указанием индекса в квадратных скобках ([и]). Индексатор находится прибавляется к символу, представляющий свойство. Например, ниже приведен два пути, с комбинацией символов в первом шаге, указывая второй элемент из коллекции этого свойства: `(0)[1].(1)` . Нельзя использовать индексатор в последнее свойство в цепочке; не удается анимировать позицию фактической коллекции, необходимо анимировать свойство для этого объекта.  
  
 Строка пути для <xref:System.Windows.PropertyPath> обычно устанавливается посредством конструкторы: <xref:System.Windows.PropertyPath.%23ctor%28System.Object%29> подпись для привязки или цели storyboard один шаг <xref:System.Windows.PropertyPath.%23ctor%28System.String%2CSystem.Object%5B%5D%29> подписи многоэтапной раскадровки целей.  
  
 **XAML:** при использовании <xref:System.Windows.PropertyPath> для описания ссылка на свойство в [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], как строка, которую вы укажите значение атрибута, сначала обрабатывается преобразователя типов (<xref:System.Windows.PropertyPathConverter>). Этот преобразователь типов, затем обрабатывает строку и на основе ее синтаксиса вызывается один из <xref:System.Windows.PropertyPath> сигнатур конструкторов. Это косвенное обращение через преобразователь типов, обработки значения атрибута обычно является использование <xref:System.Windows.PropertyPath> в [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], вместо того чтобы объявление <xref:System.Windows.PropertyPath> объекта элемента, а затем применяются определенные значения для атрибутов такие как <xref:System.Windows.PropertyPath.Path%2A> и <xref:System.Windows.PropertyPath.PathParameters%2A>. Дополнительные сведения см. в разделе [XAML синтаксическая конструкция PropertyPath](~/docs/framework/wpf/advanced/propertypath-xaml-syntax.md).  
  
<a name="xamlTextUsage_Path"></a>   
## <a name="xaml-text-usage"></a>Использование текста XAML  
 Члены <xref:System.Windows.PropertyPath> типа обычно не заданы в прямой [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] синтаксиса. См. заметки.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PathParameters">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;object&gt; PathParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;object&gt; PathParameters" />
      <MemberSignature Language="DocId" Value="P:System.Windows.PropertyPath.PathParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PathParameters As Collection(Of Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;System::Object ^&gt; ^ PathParameters { System::Collections::ObjectModel::Collection&lt;System::Object ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает список параметров для использования, когда путь относится к индексированным параметрам.</summary>
        <value>Список параметров.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Свойства <xref:System.Windows.PropertyPath> обычно устанавливается посредством конструкторов. Для параметра <xref:System.Windows.PropertyPath.PathParameters%2A>, <xref:System.Windows.PropertyPath.%23ctor%2A> конструктор особенно удобно, так как `pathParameters` используется в качестве аргумента конструктора `params`, то есть не требуется для создания или измерения массива для построения. Просто укажите каждый элемент массива как дополнительный параметр.  
  
 Если последнее свойство, которое является целевым <xref:System.Windows.Freezable> тип, что значение будет клонирован. Дополнительные сведения см. в разделе [Общие](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md).  
  
 Само вычисление цепочки свойств выполняет раскадровки для анимации. В <xref:System.Windows.PropertyPath> уровня, проверка не выполняется для убедитесь, что все подключения действия пути. Например, можно создать путь к свойству, которое имеет <xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=nameWithType> в качестве первого шага и <xref:System.Windows.FrameworkElement.FlowDirectionProperty?displayProperty=nameWithType> на втором этапе. Путь свойства будет выполнен, если фактического применения в качестве целевого объекта, так как тип кисти, заливки, но <xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=nameWithType> не имеет <xref:System.Windows.FrameworkElement.FlowDirection%2A?displayProperty=nameWithType> свойства. Недопустимые пути свойств не без вмешательства пользователя. Дополнительные сведения см. в разделе [Общие сведения о Storyboard](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md).  
  
 **XAML:** при использовании <xref:System.Windows.PropertyPath> для описания ссылка на свойство в [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], как строка, которую вы укажите значение атрибута, сначала обрабатывается преобразователя типов (<xref:System.Windows.PropertyPathConverter>). Этот преобразователь типов, затем обрабатывает строку и на основе ее синтаксиса вызывается один из <xref:System.Windows.PropertyPath> сигнатур конструкторов. Это косвенное обращение через преобразователь типов, обработки значения атрибута обычно является использование <xref:System.Windows.PropertyPath> в [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], вместо того чтобы объявление <xref:System.Windows.PropertyPath> объекта элемента, а затем применяются определенные значения для атрибутов такие как <xref:System.Windows.PropertyPath.Path%2A> и <xref:System.Windows.PropertyPath.PathParameters%2A>. Дополнительные сведения см. в разделе [XAML синтаксическая конструкция PropertyPath](~/docs/framework/wpf/advanced/propertypath-xaml-syntax.md).  
  
<a name="xamlTextUsage_PathParameters"></a>   
## <a name="xaml-text-usage"></a>Использование текста XAML  
 Члены <xref:System.Windows.PropertyPath> типа обычно не заданы в прямой [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] синтаксиса. См. заметки.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>