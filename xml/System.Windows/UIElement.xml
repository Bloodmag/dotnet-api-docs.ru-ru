<Type Name="UIElement" FullName="System.Windows.UIElement">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3108d80804c11f9fc73349a26d55755b88a3cf5f" />
    <Meta Name="ms.sourcegitcommit" Value="4b4804968da1dfdf71c501075a5b66957b54f2e8" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/27/2018" />
    <Meta Name="ms.locfileid" Value="32039959" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class UIElement : System.Windows.Media.Visual, System.Windows.IInputElement, System.Windows.Media.Animation.IAnimatable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi UIElement extends System.Windows.Media.Visual implements class System.Windows.IInputElement, class System.Windows.Media.Animation.IAnimatable" />
  <TypeSignature Language="DocId" Value="T:System.Windows.UIElement" />
  <TypeSignature Language="VB.NET" Value="Public Class UIElement&#xA;Inherits Visual&#xA;Implements IAnimatable, IInputElement" />
  <TypeSignature Language="C++ CLI" Value="public ref class UIElement : System::Windows::Media::Visual, System::Windows::IInputElement, System::Windows::Media::Animation::IAnimatable" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Media.Visual</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.IInputElement</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Media.Animation.IAnimatable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Markup.UidProperty("Uid")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <see cref="T:System.Windows.UIElement" /> — это базовый класс для реализаций уровня ядра WPF, которые основаны на элементах Windows Presentation Foundation (WPF) и базовых характеристиках представления.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement> служит отправной точкой для характеристик структуры элементов, а также представляет виртуальные методы, которые производные классы могут переопределять, влияющие макета, визуализации поведение элемента и его дочерних элементов.  
  
 Большая часть входных данных и установка фокуса действия с элементами в целом также определяется в <xref:System.Windows.UIElement> класса. Сюда входят события клавиатуры, мыши и ввод от пера и свойства связанных состояния. Многие из этих событий перенаправленные события, а многие события ввода обоих восходящей маршрутизацией версии, а также туннелирования версию события. Такие парные события обычно представляют наибольший интерес для разработчиков элементов управления.  
  
 <xref:System.Windows.UIElement> также включает [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] , которые связаны с [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] модель событий, включая методы, которые могут вызывать указанные перенаправленных событий, которые получают данные из экземпляра элемента.  
  
 С точки зрения архитектуры <xref:System.Windows.UIElement> можно считать приблизительно эквивалентен дескриптора окна в [!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)] программирования или на элемент [!INCLUDE[TLA#tla_dhtml](~/includes/tlasharptla-dhtml-md.md)] программирования. <xref:System.Windows.UIElement> — Это базовый элемент на уровне ядра WPF.  
  
 Объект <xref:System.Windows.UIElement> имеет следующие возможности, в частности, определяются <xref:System.Windows.UIElement> класса:  
  
-   Могут отображаться в виде дочернего элемента (<xref:System.Windows.UIElement> является производным от <xref:System.Windows.Media.Visual>, высокий уровень графики класс)  
  
-   Содержит логику, используемую с размером и расположением возможные дочерние элементы <xref:System.Windows.UIElement> (при интерпретации системой структуры)  
  
-   Может отвечать на действия пользователя (в том числе управлять где ввода направляются посредством обработки маршрутизации событий или маршрутизации команд)  
  
-   Может инициировать перенаправленные события, которые перемещаются по логическому дереву элементов  
  
-   Поддерживает некоторые аспекты системы анимации  
  
 <xref:System.Windows.FrameworkElement> класс реализации уровня платформы WPF, основан на <xref:System.Windows.UIElement>и добавляет конкретных взаимодействий с уровня структуры WPF. <xref:System.Windows.FrameworkElement> Добавляет и определяет следующие возможности:  
  
-   Характеристики дополнительные структуры для конкретной среды  
  
-   Поддержка обширные возможности отчетности метаданных по свойствам  
  
-   Реализация данного класса определенных входных базовых классов и их присоединенных свойств или вложенные события  
  
-   Поддержка стилей  
  
-   Расширенная поддержка анимации  
  
 Еще один связанный класс <xref:System.Windows.ContentElement>. <xref:System.Windows.ContentElement> Класс реализует большинство тех же членов, что <xref:System.Windows.UIElement>; различие между этими двумя классами приходится им месте в общей модели содержимого. Объект <xref:System.Windows.UIElement> производный класс обычно определяет относительно жесткую модель содержимого, это означает, что существуют ограничения на какие элементы могут быть дочерние элементы в разметке. Может существовать возможность принимать менее строгий дочернее содержимое <xref:System.Windows.UIElement>, но в этом емкости обычно централизуются в выделенных свойствах содержимого. Объект <xref:System.Windows.ContentElement> производного класса обычно не накладывает содержимого для поддержки сценариев, таких как документы формата потока.  
  
> [!IMPORTANT]
>  <xref:System.Windows.UIElement.Visibility%2A> состояние влияет на все входные данные, обработка этого элемента. Элементы, которые не видны не участвуют в проверке нажатия и не принимают события ввода, даже если указатель мыши находится на границах, где бы элемент Если были видны.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UIElement();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Windows.UIElement" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Создание нового экземпляра, который имеет тип <xref:System.Windows.UIElement> обычно не в коде приложения, так как <xref:System.Windows.UIElement> является базовым элементом. В разделе [базовые элементы Обзор](~/docs/framework/wpf/advanced/base-elements-overview.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddHandler">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Добавляет обработчик перенаправленного события для указанного маршрутизируемого события, помещая этот обработчик в коллекцию обработчиков текущего элемента.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="routedEvent">Идентификатор для обрабатываемого маршрутизируемого события.</param>
        <param name="handler">Ссылка на реализацию обработчика.</param>
        <summary>Добавляет обработчик перенаправленного события для указанного маршрутизируемого события, помещая этот обработчик в коллекцию обработчиков текущего элемента.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Можно добавить один и тот же обработчик для того же события несколько раз, не вызывая исключение. Тем не менее обработчик вызывается несколько раз, когда событие обрабатывается. Таким образом рассмотрим, как это поведение может иметь побочные эффекты, которые должны быть учтены в вашу реализацию обработчика.  
  
 Этот метод обычно используется для реализации метода доступа «добавить» для [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] шаблона доступа события пользовательского маршрутизируемого события.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler, bool handledEventsToo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler, bool handledEventsToo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler, bool handledEventsToo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
        <Parameter Name="handledEventsToo" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="routedEvent">Идентификатор для обрабатываемого маршрутизируемого события.</param>
        <param name="handler">Ссылка на реализацию обработчика.</param>
        <param name="handledEventsToo">
          Значение <see langword="true" /> для регистрации обработчика, чтобы он вызывался даже в том случае, если перенаправленное событие помечено как обработанное в его данных события. Значение <see langword="false" /> для регистрации обработчика с условием по умолчанию, что он не будет вызываться, если перенаправленное событие уже помечено как обработанное.  
  
 Значение по умолчанию: <see langword="false" />.  
  
 Не следует постоянно прибегать к повторной обработке перенаправленного события.</param>
        <summary>Добавляет обработчик перенаправленного события для указанного маршрутизируемого события, помещая этот обработчик в коллекцию обработчиков текущего элемента. Укажите <paramref name="handledEventsToo" /> как <see langword="true" />, чтобы предоставленный обработчик вызывался для перенаправленного события, которое уже было отмечено как обработанное другим элементом на маршруте события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обработка событий низкоуровневого ввода практическая является сложной задачей. Многие элементы управления реализуют поведение, определенное событие помечено как обработанное куда заменяется более интуитивным событием. Как правило элемент управления только отметит событие ввода платформы как обработанное при наличии намеренной таким образом. В некоторых сценариях желаемого возможно способа обработки входных событий. Он предназначен для этих сценариев, Регистрация обработчиков с `handledEventsToo` как `true` подходит. Однако не следует это регулярно. Вызов обработчиков в ответ на все события, даже в случае обработки усложнит собственную логику обработки событий в приложении. Снижение производительности могут появиться, если логику обработки является существенным. Необходимо зарезервировать использование присоединения обработчиков для уже обработанных событий для ситуаций, где были обнаружены в процессе разработки, некоторые элементы управления обработки событий, которые по-прежнему необходимо обработать с логикой приложения.  
  
 Предотвращение классов определенные сочетания элементов управления другим способом является использование события предварительного просмотра. Например если <xref:System.Windows.UIElement.MouseLeftButtonDown> помечено как обработанное обработкой классов, можно добавить обработчики для <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> вместо него.  
  
 Можно добавить один и тот же обработчик для того же события несколько раз, не вызывая исключение. Тем не менее обработчик вызывается несколько раз, когда событие обрабатывается. Таким образом рассмотрим, как это поведение может иметь побочные эффекты, которые должны быть учтены в вашу реализацию обработчика.  
  
 Этот метод обычно используется для реализации метода доступа «добавить» для [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] шаблона доступа события пользовательского маршрутизируемого события.  
  
   
  
## Examples  
 В следующем примере реализуется обработчик, вызванную <xref:System.Windows.FrameworkElement.Initialized> событий на странице, определенный обработчик присоединяется к один из именованных элементов на странице с помощью `handledEventsToo` `true`. Этот обработчик будет вызываться, даже если другим элементом на маршруте общие данные события как обработанные до достижения обрабатывающего элемента в маршруте.  
  
 [!code-csharp[EventOvwSupport#AddHandlerHandledToo](~/samples/snippets/csharp/VS_Snippets_Wpf/EventOvwSupport/CSharp/page2.xaml.cs#addhandlerhandledtoo)]
 [!code-vb[EventOvwSupport#AddHandlerHandledToo](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EventOvwSupport/visualbasic/page2.xaml.vb#addhandlerhandledtoo)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddToEventRoute">
      <MemberSignature Language="C#" Value="public void AddToEventRoute (System.Windows.EventRoute route, System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddToEventRoute(class System.Windows.EventRoute route, class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddToEventRoute (route As EventRoute, e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddToEventRoute(System::Windows::EventRoute ^ route, System::Windows::RoutedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="route" Type="System.Windows.EventRoute" />
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="route">Маршрут события, к которому добавляются обработчики.</param>
        <param name="e">Информация о событии, используемая для добавления обработчиков. Данный метод использует свойство <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> данных события для создания обработчиков.</param>
        <summary>Добавляет обработчики в указанный <see cref="T:System.Windows.EventRoute" /> для настоящего коллекции обработчиков событий <see cref="T:System.Windows.UIElement" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод может использоваться элементами содержимого узла (либо те, которые реализуют <xref:System.Windows.IContentHost> или без них) для добавления обработчиков для дочерних элементов, <xref:System.Windows.EventRoute>. Как правило, это не является обязательным для <xref:System.Windows.UIElement>, так как обработчики автоматически добавляются для всех элементов, найденных в завершенном логическом дереве. Однако в некоторых случаях где <xref:System.Windows.ContentElement> и <xref:System.Windows.UIElement> смешиваются в деревьях шаблонного промежуточные элементы, полученные из шаблона необходимость добавить маршрут. Оба <xref:System.Windows.ContentElement> и <xref:System.Windows.UIElement> поддерживает версию этого метода.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowDrop">
      <MemberSignature Language="C#" Value="public bool AllowDrop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowDrop" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.AllowDrop" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowDrop As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowDrop { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получение или установка значения, определяющего возможность использования элемента в качестве целевого объекта для операции перетаскивания.  Это свойство зависимостей.</summary>
        <value>
          Значение <see langword="true" />, если этот элемент можно использовать в качестве целевого объекта для операции перетаскивания; в противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Операции перетаскивания и вставки не включены по умолчанию и необходимо включить, установив намеренно <xref:System.Windows.UIElement.AllowDrop%2A> для `true`. Кроме данной базовой настройки, и перетащите поведение зависит от способа реализации и не определяется <xref:System.Windows.UIElement> или любым другим классом базового элемента. Некоторые элементы управления, например, <xref:System.Windows.Controls.RichTextBox>, есть ли у поведение по умолчанию. Дополнительные сведения об операции перетаскивания см. в разделе [Drop Обзор и перетащите](~/docs/framework/wpf/advanced/drag-and-drop-overview.md).  
  
 <xref:System.Windows.FrameworkElement> переопределяет метаданные для этого свойства зависимостей в своей реализации. В частности <xref:System.Windows.FrameworkElement> задает это свойство, чтобы разрешить наследование значения свойства (<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> — `true` в метаданных). Наследование значения свойства в данном контексте означает, что если существуют дочерние элементы и не имеет значения для <xref:System.Windows.UIElement.AllowDrop%2A> назначенного с помощью локальных значений или стилей, значение ближайшего родительского элемента с назначенным данным значением (опять же, либо в стилях, по умолчанию значения, или локальное значение), а затем будет присвоено значение из родительского элемента все ранее неназначенным дочерним элементам системой свойств. На практике это означает, что можно указать, следует ли разрешить операции удаления в корневом элементе, и это значение будет распространено на все дочерние элементы, имеющие не было специально назначенный его как `false`.  
  
<a name="dependencyPropertyInfo_AllowDrop"></a>   
## <a name="dependency-property-information"></a>Сведения о свойстве зависимостей  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.AllowDropProperty>|  
|Значение свойства метаданных `true`|Нет|  
  
   
  
## Examples  
 В следующем примере задается разметки <xref:System.Windows.UIElement.AllowDrop%2A> свойство `true` с помощью атрибута <xref:System.Windows.Controls.TextBox>, а параметр некоторые другие связанные свойства, которые в совокупности, включить также <xref:System.Windows.Controls.TextBox> целью многострочного текстового объекта данных при он перетаскивается. Полный пример см. в разделе [загрузить образец файла удалены](http://msdn.microsoft.com/library/be90d645-dd61-4f53-93bb-87902d086ef7).  
  
 [!code-xaml[DragDrop_DropOpenTextFile#UIElementAllowDrop](~/samples/snippets/csharp/VS_Snippets_Wpf/DragDrop_DropOpenTextFile/CS/window1.xaml#uielementallowdrop)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowDropProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AllowDropProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AllowDropProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.AllowDropProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AllowDropProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AllowDropProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует свойство зависимостей <see cref="P:System.Windows.UIElement.AllowDrop" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ApplyAnimationClock">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Применяет анимацию к указанному свойству зависимостей в этом элементе.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Данный метод запечатан и не может быть переопределен.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="ApplyAnimationClock">
      <MemberSignature Language="C#" Value="public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyAnimationClock(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationClock clock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ApplyAnimationClock (dp As DependencyProperty, clock As AnimationClock)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ApplyAnimationClock(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationClock ^ clock);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="clock" Type="System.Windows.Media.Animation.AnimationClock" />
      </Parameters>
      <Docs>
        <param name="dp">Идентификатор анимируемого свойства.</param>
        <param name="clock">Таймер анимации, контролирующий и объявляющий анимацию.</param>
        <summary>Применяет анимацию к указанному свойству зависимостей в этом элементе. Все существующие анимации останавливаются и заменяются новой анимацией.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Чтобы удалить анимацию из свойства, укажите идентификатор для свойства в качестве `dp` и укажите `clock` как `null`. Это действие удаляет анимацию и анимированное свойство имеет значение к базовому значению. Тем не менее счетчик анимации не останавливается. Любая другая назначенная этим часам анимация будет продолжать запуска.  
  
   
  
## Examples  
 В следующем примере <xref:System.Windows.Shapes.Rectangle> `myAnimatedRectangle` имеет анимации определенного времени, применяемый к нему путем вызова <xref:System.Windows.UIElement.ApplyAnimationClock%2A> .  
  
 [!code-csharp[timingbehaviors_procedural_snip#UIElementApplyAnimationClock](~/samples/snippets/csharp/VS_Snippets_Wpf/timingbehaviors_procedural_snip/CSharp/ClockControllerSpeedRatioExample.cs#uielementapplyanimationclock)]
 [!code-vb[timingbehaviors_procedural_snip#UIElementApplyAnimationClock](~/samples/snippets/visualbasic/VS_Snippets_Wpf/timingbehaviors_procedural_snip/visualbasic/clockcontrollerspeedratioexample.vb#uielementapplyanimationclock)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyAnimationClock">
      <MemberSignature Language="C#" Value="public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyAnimationClock(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationClock clock, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ApplyAnimationClock(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationClock ^ clock, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="clock" Type="System.Windows.Media.Animation.AnimationClock" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="dp">Анимируемое свойство.</param>
        <param name="clock">Таймер анимации, контролирующий и объявляющий анимацию.</param>
        <param name="handoffBehavior">Значение перечисления. Значение по умолчанию — <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" />, означающее остановку любой существующей анимации и ее замену новой.</param>
        <summary>Применяет анимацию к заданному свойству зависимостей этого элемента с возможностью указать, что должно происходить, если у свойства уже имеется запущенная анимация.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Чтобы удалить анимацию из свойства, укажите идентификатор для свойства в качестве `dp` и укажите `clock` как `null`. Это действие удаляет анимацию и анимированное свойство имеет значение к базовому значению. Тем не менее счетчик анимации не останавливается. Любая другая назначенная этим часам анимация будет продолжать запуска.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCaptured">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.AreAnyTouchesCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesCaptured { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, которое указывает, была ли хотя бы одна операция сенсорного ввода передана в данный элемент.</summary>
        <value>
          Значение <see langword="true" />, если хотя бы одна операция сенсорного ввода получена данным элементом; в противном случае — значение <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.AreAnyTouchesCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesCapturedProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует свойство зависимостей <see cref="P:System.Windows.UIElement.AreAnyTouchesCaptured" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedWithin">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesCapturedWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesCapturedWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.AreAnyTouchesCapturedWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesCapturedWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesCapturedWithin { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, была ли хотя бы одна операция сенсорного ввода передана в данный элемент или в какой-либо из его дочерних элементов в визуальном дереве.</summary>
        <value>
          Значение <see langword="true" />, если хотя бы одна операция сенсорного ввода получена данным элементом или каким-либо из его дочерних элементов в визуальном дереве; в противном случае — значение <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesCapturedWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.AreAnyTouchesCapturedWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesCapturedWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesCapturedWithinProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует свойство зависимостей <see cref="P:System.Windows.UIElement.AreAnyTouchesCapturedWithin" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesDirectlyOver">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.AreAnyTouchesDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesDirectlyOver { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, которое указывает, произошло ли хотя бы одно сенсорное нажатие данного элемента.</summary>
        <value>
          Значение <see langword="true" />, если произошло хотя бы одно сенсорное нажатие данного элемента; в противном случае — значение <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.AreAnyTouchesDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesDirectlyOverProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует свойство зависимостей <see cref="P:System.Windows.UIElement.AreAnyTouchesDirectlyOver" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesOver">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.AreAnyTouchesOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesOver { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, произошло ли хотя бы одно сенсорное нажатие данного элемента или какого-либо из его дочерних элементов в визуальном дереве.</summary>
        <value>
          Значение <see langword="true" />, если произошло хотя бы одно сенсорное нажатие данного элемента или какого-либо из его дочерних элементов в визуальном дереве; в противном случае — значение <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.AreAnyTouchesOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesOverProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует свойство зависимостей <see cref="P:System.Windows.UIElement.AreAnyTouchesOver" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Arrange">
      <MemberSignature Language="C#" Value="public void Arrange (System.Windows.Rect finalRect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Arrange(valuetype System.Windows.Rect finalRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Arrange (finalRect As Rect)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Arrange(System::Windows::Rect finalRect);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="finalRect" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="finalRect">Окончательный размер, вычисляемый родительским элементом для дочернего и предоставляемый как экземпляр <see cref="T:System.Windows.Rect" /> instance.</param>
        <summary>Позиционирует дочерние элементы и определяет размер для <see cref="T:System.Windows.UIElement" />. Родительские элементы вызывают этот метод из своей реализации <see cref="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)" /> (или эквивалента уровня инфраструктуры WPF) для формирования рекурсивного обновления макета. Этот метод образует второй проход обновления макета.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Для элемента уровня платформы WPF, сценариям, поведение для произведения <xref:System.Windows.UIElement.Arrange%2A> не следует и невозможно, если скрытии можно изменять. Вместо этого следует переопределить <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> реализацию в классе. Ваш <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> реализация вызывается внутренним образом <xref:System.Windows.UIElement.Arrange%2A> как часть операций структуры уровня платформы WPF по умолчанию. Ваш <xref:System.Windows.UIElement.ArrangeCore%2A> реализации должен также вызывать <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> для каждого дочернего элемента, если он содержит дочерние элементы.  
  
 Для элемента уровня ядра WPF, сценариям, поведение для произведения <xref:System.Windows.UIElement.Arrange%2A> не следует и невозможно, если скрытии можно изменять. Вместо этого следует переопределить <xref:System.Windows.UIElement.ArrangeCore%2A> в классе. Ваш <xref:System.Windows.UIElement.ArrangeCore%2A> реализация вызывается внутренним образом <xref:System.Windows.UIElement.Arrange%2A> как часть операций структуры уровня платформы WPF по умолчанию. Тем не менее, это предполагается, что макет уровня платформы WPF и его система макета, так как это часто не в случае, если элементы в WPF уровня ядра из специально наследовании <xref:System.Windows.UIElement> базовый класс элемента. Ваш <xref:System.Windows.UIElement.ArrangeCore%2A> реализации должен также вызывать <xref:System.Windows.UIElement.Arrange%2A> для каждого дочернего элемента, если он содержит дочерние элементы. Примечание сценария уровня ядра WPF подразумевает, что вы используете не <xref:System.Windows.FrameworkElement> производного класса, так как <xref:System.Windows.FrameworkElement> печати <xref:System.Windows.FrameworkElement.ArrangeCore%2A>.  
  
 Расположение макета уровня платформы WPF, в вычисление [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] состоит из <xref:System.Windows.UIElement.Measure%2A> вызова и <xref:System.Windows.UIElement.Arrange%2A> вызова. Во время <xref:System.Windows.UIElement.Measure%2A> вызов, система макета определяет требования к размеру элемента, используя предоставленную <xref:System.Windows.Size> (`availableSize`) аргумента. Во время <xref:System.Windows.UIElement.Arrange%2A> вызов, система макета завершает размер и положение элемента ограничивающего прямоугольника.  Дополнительные сведения см. в разделе [макета](~/docs/framework/wpf/advanced/layout.md).  
  
 `availableSize` может быть любое целое число от нуля до бесконечности. Элементы должны размещаться вернуть минимальное значение <xref:System.Windows.Size> ими через `availableSize` параметра.  
  
 При создании макета она всегда получает <xref:System.Windows.UIElement.Measure%2A> вызывать перед <xref:System.Windows.UIElement.Arrange%2A>. Однако после первого прохода разметки, он может появиться <xref:System.Windows.UIElement.Arrange%2A> вызывается без <xref:System.Windows.UIElement.Measure%2A>; это может произойти, если свойство, которое влияет только на <xref:System.Windows.UIElement.Arrange%2A> изменяется (например, выравнивание), или при получении родительского <xref:System.Windows.UIElement.Arrange%2A> без <xref:System.Windows.UIElement.Measure%2A>. Объект <xref:System.Windows.UIElement.Measure%2A> автоматически сделает вызов <xref:System.Windows.UIElement.Arrange%2A> вызова.  
  
 Обновления структуры обычно происходят асинхронно (во времени, определяемую системой макета). Элемент не может немедленно отражаются изменения свойств, которые влияют на изменение размера элемента (например, <xref:System.Windows.FrameworkElement.Width%2A>).  
  
> [!NOTE]
>  Обновления макета можно выполнить принудительно с помощью <xref:System.Windows.UIElement.UpdateLayout%2A> метода; тем не менее, вызов этой функции не рекомендуется, поскольку он обычно нет необходимости и может привести к снижению производительности. Во многих случаях, когда вызов <xref:System.Windows.UIElement.UpdateLayout%2A> может быть целесообразным, система макета, вероятно, уже быть обработки обновлений. Система макета может обрабатывать изменения структуры таким образом, можно оптимизировать все необходимые обновления как часть пакета.  
  
 Система макета отслеживает двух отдельных очередей недопустимый макетов, один для <xref:System.Windows.UIElement.Measure%2A> и один для <xref:System.Windows.UIElement.Arrange%2A>. Очередь структур сортируется порядок элементов в визуальном дереве. Элементы, расположенные выше в дереве находились вверху очереди, во избежание избыточного структурирования повторяющихся изменений в родительских объектов. Дублирующиеся записи автоматически удаляются из очереди, а элементы автоматически удаляются из очереди, если они уже являются допустимыми.  
  
 При обновлении макета, <xref:System.Windows.UIElement.Measure%2A> освобождения очереди во-первых, за которым следует <xref:System.Windows.UIElement.Arrange%2A> очереди. Элемент в <xref:System.Windows.UIElement.Arrange%2A> никогда не будут расположены очереди, если элемент в <xref:System.Windows.UIElement.Measure%2A> очереди.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrangeCore">
      <MemberSignature Language="C#" Value="protected virtual void ArrangeCore (System.Windows.Rect finalRect);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ArrangeCore(valuetype System.Windows.Rect finalRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ArrangeCore (finalRect As Rect)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ArrangeCore(System::Windows::Rect finalRect);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="finalRect" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="finalRect">Итоговая область в родительском элементе, которую элемент должен использовать для размещения себя и своих дочерних элементов.</param>
        <summary>Определяет шаблон для определения макета упорядочивания WPF уровня ядра.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Переопределение этого метода подходит только при наследовании на уровне ядра WPF, а не используется система макета уровня платформы WPF и <xref:System.Windows.FrameworkElement> производного класса, так как <xref:System.Windows.FrameworkElement> печати <xref:System.Windows.FrameworkElement.ArrangeCore%2A>. Если используется система макета уровня платформы WPF, соответствующий метод для переопределения для данного класса макета упорядочить поведение <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>.  
  
   
  
## Examples  
 <xref:System.Windows.UIElement.ArrangeCore%2A> реализации должны вызывать базовую реализацию для получения размера, затем вызовите <xref:System.Windows.UIElement.Arrange%2A> метод каждого элемента видимые дочерние и выверки размеры, возвращенных эти <xref:System.Windows.UIElement.Arrange%2A> вызовы с размером базовую реализацию. Логику для сверки аспектом <xref:System.Windows.UIElement.ArrangeCore%2A> реализации могут различаться в зависимости от характеристик макета элемента. В следующем примере шаблона `VisualChildren` гипотетической свойство, элемент может определить для помощи в перечислении его содержимого; <xref:System.Windows.UIElement> определяет коллекции содержимого на этом уровне Архитектура уровня платформы WPF откладывает поведение содержимого до производных элементов, например определенных элементов управления или базовых классов элементов управления.  
  
 [!code-csharp[CorePseudocode#UIElementArrangeOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#uielementarrangeoverride)]
 [!code-vb[CorePseudocode#UIElementArrangeOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#uielementarrangeoverride)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>При разработке элементы уровня ядра WPF, следует переопределить этот метод, чтобы предоставить уникальный элемент уровня ядра WPF упорядочить поведение макета или вносить правильную макета решения об элементах дочерних элементов. Переопределение может быть необходимо, если эти дочерние элементы не распознаются из заданному шаблону например <see cref="T:System.Windows.Controls.ItemCollection" />.  
  
 Родительский элемент должен вызвать данного класса <see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /> для каждого дочернего элемента, в противном случае эти дочерние элементы не отображаются.</para>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginAnimation">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Запускает анимацию для указанного свойства данного элемента, имеющего анимацию.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginAnimation">
      <MemberSignature Language="C#" Value="public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginAnimation(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationTimeline animation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginAnimation (dp As DependencyProperty, animation As AnimationTimeline)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginAnimation(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationTimeline ^ animation);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="animation" Type="System.Windows.Media.Animation.AnimationTimeline" />
      </Parameters>
      <Docs>
        <param name="dp">Свойство для анимации, указанное как идентификатор свойства зависимостей.</param>
        <param name="animation">График для анимации.</param>
        <summary>Запускает анимацию для указанного свойства данного элемента, имеющего анимацию.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При возвращении анимировано ли свойство, обратите внимание, что анимация начнется считаться анимации при отображении первый кадр отправной точкой, без анимации.  
  
 Если <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> для `animation` — `null`, любые текущие анимации будут удалены и удерживается текущее значение свойства.  
  
 Если вся `animation` значение `null`, все анимации будут удалены из свойства, и свойство возвращается к базовому значению. Однако график анимации не останавливается. Любая другая назначенная этой шкале анимация будет продолжать запуска.  
  
   
  
## Examples  
 Следующий пример создает анимацию, назначает ему и затем вызывает метод <xref:System.Windows.UIElement.BeginAnimation%2A> для его запуска.  
  
 [!code-csharp[timingbehaviors_procedural_snip#BeginAnimation](~/samples/snippets/csharp/VS_Snippets_Wpf/timingbehaviors_procedural_snip/CSharp/GetAnimationBaseValueExample.cs#beginanimation)]
 [!code-vb[timingbehaviors_procedural_snip#BeginAnimation](~/samples/snippets/visualbasic/VS_Snippets_Wpf/timingbehaviors_procedural_snip/visualbasic/getanimationbasevalueexample.vb#beginanimation)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginAnimation">
      <MemberSignature Language="C#" Value="public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginAnimation(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationTimeline animation, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginAnimation(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationTimeline ^ animation, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="animation" Type="System.Windows.Media.Animation.AnimationTimeline" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="dp">Свойство для анимации, указанное как идентификатор свойства зависимостей.</param>
        <param name="animation">График для анимации, которую следует применить.</param>
        <param name="handoffBehavior">Значение перечисления, которое указывает, как новая анимация должна взаимодействовать с любыми текущими анимациями, уже влияющими на значение свойства.</param>
        <summary>Запускает указанную анимацию для указанного анимированного свойства зависимостей этого элемента, с возможностью указания действий, которые следует предпринять при уже существующей анимации для данного свойства.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При возвращении анимировано ли свойство, обратите внимание, что анимация начнется считаться анимации при отображении первый кадр отправной точкой, без анимации.  
  
 Если <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> для `animation` — `null`, любые текущие анимации будут удалены и удерживается текущее значение свойства.  
  
 Если вся `animation` значение `null`, все анимации будут удалены из свойства, и свойство возвращается к базовому значению. Однако график анимации не останавливается. Любая другая назначенная этой шкале анимация будет продолжать запуска.  
  
   
  
## Examples  
 В следующем примере реализуется обработчик, который получает существующие анимации из ресурса, а затем вызывает <xref:System.Windows.UIElement.BeginAnimation%2A> с указанного поведения переадресации.  
  
 [!code-csharp[BrushesIntroduction#BeginAnimationHandoff](~/samples/snippets/csharp/VS_Snippets_Wpf/BrushesIntroduction/CSharp/SampleViewer.xaml.cs#beginanimationhandoff)]
 [!code-vb[BrushesIntroduction#BeginAnimationHandoff](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BrushesIntroduction/visualbasic/sampleviewer.xaml.vb#beginanimationhandoff)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BitmapEffect">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Effects.BitmapEffect BitmapEffect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Effects.BitmapEffect BitmapEffect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.BitmapEffect" />
      <MemberSignature Language="VB.NET" Value="Public Property BitmapEffect As BitmapEffect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Effects::BitmapEffect ^ BitmapEffect { System::Windows::Media::Effects::BitmapEffect ^ get(); void set(System::Windows::Media::Effects::BitmapEffect ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Effects.BitmapEffect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получение или установка эффекта для точечных рисунков, который применяется непосредственно к отображаемому содержимому этого элемента.  Это свойство зависимостей.</summary>
        <value>Применяемый эффект точечного рисунка.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Media.Effects.BitmapEffect> является абстрактным типом, поэтому [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] использования требуется реализованный класс, производный от <xref:System.Windows.Media.Effects.BitmapEffect>, такие как <xref:System.Windows.Media.Effects.OuterGlowBitmapEffect>. Обратите внимание, что один реализованный производной класс является типом коллекции, которая позволяет указать несколько последовательных <xref:System.Windows.Media.Effects.BitmapEffect>, используя синтаксис вложенных тегов.  
  
 Нет существующих производный класс от <xref:System.Windows.Media.Effects.BitmapEffect> поддерживает преобразователь типов, поэтому [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] синтаксиса, используемого для этого свойства обычно является синтаксис элемента свойства.  
  
<a name="dependencyPropertyInfo_BitmapEffect"></a>   
## <a name="dependency-property-information"></a>Сведения о свойстве зависимостей  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.BitmapEffectProperty>|  
|Значение свойства метаданных `true`|Нет|  
  
   
  
## Examples  
 В следующем примере задается растровое изображение в силу, с помощью <xref:System.Windows.Media.Effects.BlurBitmapEffect>.  
  
 [!code-csharp[EffectsGallery_snip#CodeBehindBlurCodeBehindExampleInline](~/samples/snippets/csharp/VS_Snippets_Wpf/EffectsGallery_snip/CSharp/blurcodebehindexample.xaml.cs#codebehindblurcodebehindexampleinline)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BitmapEffectInput">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Effects.BitmapEffectInput BitmapEffectInput { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Effects.BitmapEffectInput BitmapEffectInput" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.BitmapEffectInput" />
      <MemberSignature Language="VB.NET" Value="Public Property BitmapEffectInput As BitmapEffectInput" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Effects::BitmapEffectInput ^ BitmapEffectInput { System::Windows::Media::Effects::BitmapEffectInput ^ get(); void set(System::Windows::Media::Effects::BitmapEffectInput ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Effects.BitmapEffectInput</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получение или установка источника входных данных эффекта для точечных рисунков, который применяется непосредственно к отображаемому содержимому этого элемента.  Это свойство зависимостей.</summary>
        <value>Источник эффектов для точечных рисунков.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_BitmapEffectInput"></a>   
## <a name="dependency-property-information"></a>Сведения о свойстве зависимостей  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.BitmapEffectInputProperty>|  
|Значение свойства метаданных `true`|Нет|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BitmapEffectInputProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty BitmapEffectInputProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty BitmapEffectInputProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.BitmapEffectInputProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly BitmapEffectInputProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ BitmapEffectInputProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует свойство зависимостей <see cref="P:System.Windows.UIElement.BitmapEffectInput" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BitmapEffectProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty BitmapEffectProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty BitmapEffectProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.BitmapEffectProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly BitmapEffectProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ BitmapEffectProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует свойство зависимостей <see cref="P:System.Windows.UIElement.BitmapEffect" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CacheMode">
      <MemberSignature Language="C#" Value="public System.Windows.Media.CacheMode CacheMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.CacheMode CacheMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.CacheMode" />
      <MemberSignature Language="VB.NET" Value="Public Property CacheMode As CacheMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::CacheMode ^ CacheMode { System::Windows::Media::CacheMode ^ get(); void set(System::Windows::Media::CacheMode ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.CacheMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает кэшированное представление объекта <see cref="T:System.Windows.UIElement" />.</summary>
        <value>Объект <see cref="T:System.Windows.Media.CacheMode" />, содержащий кэшированное представление <see cref="T:System.Windows.UIElement" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Задать <xref:System.Windows.UIElement.CacheMode%2A> свойства при необходимости для повышения производительности для содержимого, которое занимает много времени для подготовки к просмотру. Дополнительные сведения см. в разделе <xref:System.Windows.Media.BitmapCache>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Media3D.Viewport2DVisual3D.CacheMode" />
        <altmember cref="T:System.Windows.Media.BitmapCache" />
        <altmember cref="T:System.Windows.Media.BitmapCacheBrush" />
      </Docs>
    </Member>
    <Member MemberName="CacheModeProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CacheModeProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CacheModeProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.CacheModeProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CacheModeProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CacheModeProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует свойство зависимостей <see cref="P:System.Windows.UIElement.CacheMode" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CaptureMouse">
      <MemberSignature Language="C#" Value="public bool CaptureMouse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CaptureMouse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.CaptureMouse" />
      <MemberSignature Language="VB.NET" Value="Public Function CaptureMouse () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CaptureMouse();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.CaptureMouse</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Пытается принудительно захватить мышь данным элементом.</summary>
        <returns>
          Значение <see langword="true" />, если мышь успешно захвачена, в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Для отслеживания, необходимо включить элемент. Проверьте ли <xref:System.Windows.UIElement.IsEnabled%2A> — `true` перед вызовом метода <xref:System.Windows.UIElement.CaptureMouse%2A>.  
  
 Если вызов <xref:System.Windows.UIElement.CaptureMouse%2A> возвращает `true`, затем <xref:System.Windows.UIElement.IsMouseCaptured%2A> также `true`.  
  
 Если вызов <xref:System.Windows.UIElement.CaptureMouse%2A> возвращает `true`, то <xref:System.Windows.UIElement.GotMouseCapture> и <xref:System.Windows.UIElement.IsMouseCapturedChanged> событий, с <xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=nameWithType> событий данные выводятся как элемент где <xref:System.Windows.UIElement.CaptureMouse%2A> вызывается метод. При попытке захвата, возможен конфликт с уже существующим захватом, особенно с относящимися к перетаскивания и вставки с помощью мыши.  
  
 Чтобы очистить захват мыши из всех элементов, вызовите <xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=nameWithType> с `element` указанный параметр как `null`.  
  
   
  
## Examples  
 Следующий пример реализует пару обработчиков для ввода сочетания клавиш и мыши, захват (и освобождение) мышь и включить специальный режим мыши для просмотра трехмерной модели.  
  
 [!code-csharp[CubeAnimation#UIElementMouseCapture](~/samples/snippets/csharp/VS_Snippets_Wpf/CubeAnimation/CSharp/Trackball.cs#uielementmousecapture)]
 [!code-vb[CubeAnimation#UIElementMouseCapture](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CubeAnimation/visualbasic/trackball.vb#uielementmousecapture)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsMouseCaptured" />
      </Docs>
    </Member>
    <Member MemberName="CaptureStylus">
      <MemberSignature Language="C#" Value="public bool CaptureStylus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CaptureStylus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.CaptureStylus" />
      <MemberSignature Language="VB.NET" Value="Public Function CaptureStylus () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CaptureStylus();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.CaptureStylus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Пытается принудительно захватить перо данным элементом.</summary>
        <returns>
          Значение <see langword="true" />, если перо успешно захвачено, в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Реализация по умолчанию, на основании основным устройством пера всегда возвращает `true`. Тем не менее при расширении устройств ввода, которые обеспечивают реализацию устройств для системы ввода, имеется возможность создать систему с альтернативной реализацией перьевого устройства, могут возвращать разные результаты.  
  
 При захвате пера элементом, он получает ввод от пера, даже если перо находится вне границ элемента. Перо обычно захватывается только во время операции перетаскивания и вставки.  
  
 Вызов этого метода вызывает статический базовая <xref:System.Windows.Input.Stylus> метод <xref:System.Windows.Input.Stylus.Capture%2A>. Поведение самого захвата реализуется с помощью реализации устройства пера active.  
  
 Для отслеживания, необходимо включить элемент. Проверьте ли <xref:System.Windows.UIElement.IsEnabled%2A> — `true` возвращают перед вызовом метода <xref:System.Windows.UIElement.CaptureStylus%2A>.  
  
 Если вызов <xref:System.Windows.UIElement.CaptureStylus%2A> возвращает `true`, <xref:System.Windows.UIElement.IsStylusCaptured%2A> также `true`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CaptureTouch">
      <MemberSignature Language="C#" Value="public bool CaptureTouch (System.Windows.Input.TouchDevice touchDevice);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CaptureTouch(class System.Windows.Input.TouchDevice touchDevice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.CaptureTouch(System.Windows.Input.TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CaptureTouch(System::Windows::Input::TouchDevice ^ touchDevice);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touchDevice" Type="System.Windows.Input.TouchDevice" />
      </Parameters>
      <Docs>
        <param name="touchDevice">Захватываемое устройство.</param>
        <summary>Предпринимает попытку принудительного получения операции сенсорного ввода данным элементом.</summary>
        <returns>
          Значение <see langword="true" />, если указанная операция сенсорного ввода была получена данным элементом; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.CaptureTouch%2A> Возвращает `false` Если <xref:System.Windows.Input.TouchDevice> записывается в настоящее время в другой элемент.  
  
 Если <xref:System.Windows.UIElement.CaptureTouch%2A> возвращает `true`, то <xref:System.Windows.UIElement.GotTouchCapture> события.  
  
 Чтобы освободить записи одним нажатием из этого элемента, используйте <xref:System.Windows.UIElement.ReleaseTouchCapture%2A> метод и указать устройство сенсорного ввода для освобождения. Чтобы освободить все изменения из этого элемента, используйте <xref:System.Windows.UIElement.ReleaseAllTouchCaptures%2A> метод.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="touchDevice" /> имеет значение <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Input.TouchDevice.Capture(System.Windows.IInputElement)" />
      </Docs>
    </Member>
    <Member MemberName="Clip">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Geometry Clip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Geometry Clip" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Clip" />
      <MemberSignature Language="VB.NET" Value="Public Property Clip As Geometry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Geometry ^ Clip { System::Windows::Media::Geometry ^ get(); void set(System::Windows::Media::Geometry ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Geometry</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает геометрию, используемую для определения контура содержимого элемента.  Это свойство зависимостей.</summary>
        <value>Геометрия, используемая для определения размеров области отсечения. Значение по умолчанию — <see cref="T:System.Windows.Media.Geometry" />, равное null.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Элементы за пределами геометрии визуально усекаются при отображении. Геометрия не обязательно должна быть прямоугольной.  
  
<a name="dependencyPropertyInfo_Clip"></a>   
## <a name="dependency-property-information"></a>Сведения о свойстве зависимостей  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.ClipProperty>|  
|Значение свойства метаданных `true`|Нет|  
  
   
  
## Examples  
 В этом примере показано, как определить элемент framework <xref:System.Windows.UIElement.Clip%2A> области. Чтобы определить клип, используйте <xref:System.Windows.Media.Geometry> (например, <xref:System.Windows.Media.EllipseGeometry> задать элемент <xref:System.Windows.UIElement.Clip%2A> свойство. Будет отображаться только область, которая находится в пределах области геометрического объекта.  
  
 В следующем примере показан <xref:System.Windows.Controls.Image> элемент без определенной областью обрезки. Поскольку область отсечения определяется, отображается все изображение.  
  
 [!code-xaml[ClipPathExample#2](~/samples/snippets/csharp/VS_Snippets_Wpf/ClipPathExample/CS/ClipExample.xaml#2)]  
  
 ![Объект перед применением области обрезки](~/add/media/mil-task-clip-region-noclip.png "объект перед применением области обрезки")  
Изображение без области отсечения  
  
 В следующем примере создается идентичное изображение, за исключением того, что он имеет определенной областью обрезки. Только часть изображения, которое находится в пределах области <xref:System.Windows.Media.EllipseGeometry> будет отображаться.  
  
 [!code-xaml[ClipPathExample#4](~/samples/snippets/csharp/VS_Snippets_Wpf/ClipPathExample/CS/ClipExample.xaml#4)]  
  
 ![Обрезанный объект](~/add/media/mil-task-clip-region-ellispe.PNG "Обрезанный объект")  
Изображение с эллиптической области отсечения  
  
 В следующем примере показано, как анимация элемента структуры <xref:System.Windows.UIElement.Clip%2A> области. В этом примере <xref:System.Windows.Media.EllipseGeometry> используется для определения эллиптической области отсечения для <xref:System.Windows.Controls.Image> элемента. Объект <xref:System.Windows.Media.Animation.PointAnimation> анимирует эллипс <xref:System.Windows.Media.EllipseGeometry.Center%2A> свойство из (0, 0) для (200, 150). Анимация воспроизводится После загрузки изображения и повторяется бесконечно.  
  
 [!code-xaml[ClipPathExample#5](~/samples/snippets/csharp/VS_Snippets_Wpf/ClipPathExample/CS/ClipExample.xaml#5)]  
  
 Полный пример см. в разделе [отсеченной области пример](http://msdn.microsoft.com/library/83043a0b-f824-445f-9675-103280c5ca67).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.ClipToBounds" />
      </Docs>
    </Member>
    <Member MemberName="ClipProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ClipProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ClipProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ClipProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ClipProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ClipProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует свойство зависимостей <see cref="P:System.Windows.UIElement.Clip" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClipToBounds">
      <MemberSignature Language="C#" Value="public bool ClipToBounds { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ClipToBounds" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.ClipToBounds" />
      <MemberSignature Language="VB.NET" Value="Public Property ClipToBounds As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ClipToBounds { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получение или установка значения, определяющего усечение содержимого этого элемента (или содержимого, поступающего из его дочерних элементов) в соответствии с размерами содержащего его элемента.   Это свойство зависимостей.</summary>
        <value>
          <see langword="true" /> если содержимое должно быть отсечено; в противном случае — <see langword="false" />. Значение по умолчанию — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Для дочерних элементов <xref:System.Windows.UIElement.ClipToBounds%2A> имеет другой эффект на макет поведения в зависимости от того, является ли высоты и ширины родительского элемента определяются <xref:System.Windows.FrameworkElement.Height%2A>  /  <xref:System.Windows.FrameworkElement.Width%2A> или <xref:System.Windows.FrameworkElement.MaxHeight%2A>  /  <xref:System.Windows.FrameworkElement.MaxWidth%2A>. <xref:System.Windows.FrameworkElement.MaxHeight%2A> / <xref:System.Windows.FrameworkElement.MaxWidth%2A> для родительского элемента, всегда учитывается независимо от значения <xref:System.Windows.UIElement.ClipToBounds%2A> и эффективных вырезку всегда изменяет содержимое в зависимости от этих. Родительского элемента <xref:System.Windows.FrameworkElement.Height%2A>  /  <xref:System.Windows.FrameworkElement.Width%2A> параметры не изменяет содержимое при <xref:System.Windows.UIElement.ClipToBounds%2A> — `false`, но изменяет содержимого if <xref:System.Windows.UIElement.ClipToBounds%2A> — `true`.  
  
 Обратите внимание, что по умолчанию принимается `false` является общее поведение, как осуществляется в <xref:System.Windows.UIElement> класса. Это возможно для любого заданного элемента, производного от <xref:System.Windows.UIElement> для переопределения метаданных свойства зависимостей для этого свойства в экземпляре по умолчанию `true` вместо него. Некоторые существующие производные классы переопределить эти метаданные и/или изменить значения по умолчанию для свойства зависимостей.  
  
 <xref:System.Windows.Controls.InkCanvas>, <xref:System.Windows.Controls.InkPresenter>, и <xref:System.Windows.Controls.Primitives.Popup> каждого переопределить это значение по умолчанию должно быть `true`.  
  
 <xref:System.Windows.FrameworkElement> переопределяет метаданные для этого свойства зависимостей. В частности <xref:System.Windows.FrameworkElement> задает это свойство, чтобы разрешить наследование значения свойства (<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> — `true` в метаданных). Наследование значения свойства в данном контексте означает, что если существуют дочерние элементы и не имеет значения для <xref:System.Windows.UIElement.ClipToBounds%2A> назначенного с помощью локальных значений или стилей, значение ближайшего родительского элемента с назначенным данным значением (опять же, либо в стилях, по умолчанию значения, или локального значения), а затем будет присвоено значение из родительского элемента Все неназначенные дочерним элементам системой свойств. На практике это означает, что можно указать, следует ли разрешить обрезать для границы в корневом элементе, и это значение будет распространено на все дочерние элементы, имеющие не было специально назначенный его как `false`.  
  
<a name="dependencyPropertyInfo_ClipToBounds"></a>   
## <a name="dependency-property-information"></a>Сведения о свойстве зависимостей  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.ClipToBoundsProperty>|  
|Значение свойства метаданных `true`|Нет|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.Clip" />
      </Docs>
    </Member>
    <Member MemberName="ClipToBoundsProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ClipToBoundsProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ClipToBoundsProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ClipToBoundsProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ClipToBoundsProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ClipToBoundsProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует свойство зависимостей <see cref="P:System.Windows.UIElement.ClipToBounds" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandBindings">
      <MemberSignature Language="C#" Value="public System.Windows.Input.CommandBindingCollection CommandBindings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.CommandBindingCollection CommandBindings" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.CommandBindings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CommandBindings As CommandBindingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::CommandBindingCollection ^ CommandBindings { System::Windows::Input::CommandBindingCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.CommandBindingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает коллекцию объектов <see cref="T:System.Windows.Input.CommandBinding" />, сопоставленных с этим элементом. Привязка <see cref="T:System.Windows.Input.CommandBinding" /> включает обработку команды для данного элемента и объявляет связь между командой, ее событиями и обработчиками, присоединенные данным элементом.</summary>
        <value>Коллекция всех объектов <see cref="T:System.Windows.Input.CommandBinding" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Другой способ заполнения <xref:System.Windows.UIElement.CommandBindings%2A> коллекции заключается в использовании <xref:System.Windows.Input.CommandManager> методы программными средствами.  
  
<a name="xamlPropertyElementUsage_CommandBindings"></a>   
## <a name="xaml-property-element-usage"></a>Использование элемента свойства XAML  
  
```  
<object>  
  <object.CommandBindings>  
    oneOrMoreCommandBindings  
  </object.CommandBindings>  
</object>  
```  
  
<a name="xamlValues_CommandBindings"></a>   
## <a name="xaml-values"></a>Значения XAML  
 *oneOrMoreCommandBindings*  
 Один или несколько <xref:System.Windows.Input.CommandBinding> элементов. Каждый из них должен иметь <xref:System.Windows.Input.CommandBinding.Command%2A> атрибуту присвоено известной командой, и набор атрибутов для <xref:System.Windows.Input.CommandBinding.CanExecute> и <xref:System.Windows.Input.CommandBinding.Executed> реализации обработчика. Дополнительные сведения см. в разделе <xref:System.Windows.Input.CommandBinding>.  
  
   
  
## Examples  
 В следующем примере добавляется <xref:System.Windows.Input.CommandBinding> окно, с помощью разметки. Обратите внимание, что в [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], <xref:System.Windows.Input.CommandBindingCollection> не объявлен в разметке в качестве элемента; объект коллекции определяется по типу, который принимает свойство и заполнить элемент свойства с одним или несколькими <xref:System.Windows.Input.CommandBinding> элементов:  
  
 [!code-xaml[commandWithHandler#CommandHandlerCommandBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml#commandhandlercommandbinding)]  
  
 Дополнительные сведения о [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] синтаксис для коллекций, в разделе [XAML Syntax In Detail](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md).  
  
 В следующем примере выполняется по сути то же самое в коде:  
  
 [!code-csharp[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandHandlerProcedural/CSharp/Window1.xaml.cs#commandhandlerbindinginit)]
 [!code-vb[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandHandlerProcedural/visualbasic/window1.xaml.vb#commandhandlerbindinginit)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
      </Docs>
    </Member>
    <Member MemberName="DesiredSize">
      <MemberSignature Language="C#" Value="public System.Windows.Size DesiredSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Size DesiredSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.DesiredSize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DesiredSize As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Size DesiredSize { System::Windows::Size get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает размер, вычисленный этим элементом на этапе измерения процесса компоновки.</summary>
        <value>Вычисленный размер, который становится предпочтительным размером на этапе упорядочения.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Значение, возвращаемое этим свойством только будет недопустимо, если значение <xref:System.Windows.UIElement.IsMeasureValid%2A> свойство `true`.  
  
 <xref:System.Windows.UIElement.DesiredSize%2A> Обычно проверяется как одним из факторов измерения при реализации поведения макета переопределяет, таких как <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>, <xref:System.Windows.FrameworkElement.MeasureOverride%2A>, или <xref:System.Windows.UIElement.OnRender%2A> (в <xref:System.Windows.UIElement.OnRender%2A> вариант, можно проверить <xref:System.Windows.UIElement.RenderSize%2A> вместо этого, но это зависит от вашей Реализация). В зависимости от сценария <xref:System.Windows.UIElement.DesiredSize%2A> может полностью соблюдать логику реализации ограничения на <xref:System.Windows.UIElement.DesiredSize%2A> , могут применяться, а такие ограничения также могут изменять другие характеристики родительского элемента или дочернего элемента. Например, элемент управления, который поддерживает прокручиваемые области (но не делает являются производными от управления уровня платформы WPF, которые уже позволяют прокручиваемые области) может сравнить доступный размер, чтобы <xref:System.Windows.UIElement.DesiredSize%2A>. Элемент управления может затем устанавливать внутреннего состояния, включающее в [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] для этого элемента управления. Или, <xref:System.Windows.UIElement.DesiredSize%2A> потенциально может также учитывается в некоторых сценариях.  
  
   
  
## Examples  
 В следующем примере показан <xref:System.Windows.UIElement.DesiredSize%2A> как часть <xref:System.Windows.FrameworkElement.MeasureOverride%2A> реализации. Обратите внимание как <xref:System.Windows.UIElement.Measure%2A> вызывается непосредственно перед получение <xref:System.Windows.UIElement.DesiredSize%2A>. Это гарантирует, что <xref:System.Windows.UIElement.DesiredSize%2A> содержит допустимое значение.  
  
 [!code-cpp[PlotPanel#2](~/samples/snippets/cpp/VS_Snippets_Wpf/PlotPanel/CPP/PlotPanel.cpp#2)]
 [!code-csharp[PlotPanel#2](~/samples/snippets/csharp/VS_Snippets_Wpf/PlotPanel/CSharp/PlotPanel.cs#2)]
 [!code-vb[PlotPanel#2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PlotPanel/VisualBasic/PlotPanel.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />
        <altmember cref="M:System.Windows.UIElement.Measure(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="DragEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.DragEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragEnter As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragEnter;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возникает, когда система ввода сообщает о соответствующем событии перетаскивания, имеющем в качестве источника перетаскивания этот элемент.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это событие создается псевдоним для <xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType> вложенное событие для этого класса, чтобы <xref:System.Windows.UIElement.DragEnter?displayProperty=nameWithType> входит в состав класса список членов, когда <xref:System.Windows.UIElement> наследуется от базового элемента. Обработчики событий, присоединенные к <xref:System.Windows.UIElement.DragEnter> событий присоединяются к базовому объекту <xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType> вложенное событие и получить тот же экземпляр данных события.  
  
<a name="routedEventInfo_DragEnter"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.DragEnterEvent>|  
|Стратегия маршрутизации|Вверх|  
|делегат|<xref:System.Windows.DragEventHandler>|  
  
-   Соответствующее событие нисходящей маршрутизации является <xref:System.Windows.UIElement.PreviewDragEnter>.  
  
-   Переопределить <xref:System.Windows.UIElement.OnDragEnter%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragLeave" />
        <altmember cref="E:System.Windows.UIElement.DragOver" />
      </Docs>
    </Member>
    <Member MemberName="DragEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.DragEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragEnterEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.DragEnter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.  
  
 Дополнительные сведения о регистрации маршрутизированных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Дополнительные сведения об использовании идентификаторов маршрутизируемых событий для добавления обработчиков класса см. в описании метода <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.DragLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragLeave As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragLeave;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возникает, когда система ввода сообщает о соответствующем событии перетаскивания, имеющем в качестве источника перетаскивания этот элемент.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это событие создается псевдоним для <xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType> вложенное событие для этого класса, чтобы <xref:System.Windows.UIElement.DragLeave?displayProperty=nameWithType> входит в состав класса список членов, когда <xref:System.Windows.UIElement> наследуется от базового элемента. Обработчики событий, присоединенные к <xref:System.Windows.UIElement.DragLeave> событий присоединяются к базовому объекту <xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType> вложенное событие и получить тот же экземпляр данных события.  
  
<a name="routedEventInfo_DragLeave"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.DragLeaveEvent>|  
|Стратегия маршрутизации|Вверх|  
|делегат|<xref:System.Windows.DragEventHandler>|  
  
-   Соответствующее событие нисходящей маршрутизации является <xref:System.Windows.DragDrop.PreviewDragLeave>.  
  
-   Переопределить <xref:System.Windows.UIElement.OnDragLeave%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragEnter" />
        <altmember cref="E:System.Windows.UIElement.DragOver" />
        <altmember cref="E:System.Windows.UIElement.GiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="DragLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.DragLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragLeaveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.DragLeave" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.  
  
 Дополнительные сведения о регистрации маршрутизированных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Дополнительные сведения об использовании идентификаторов маршрутизируемых событий для добавления обработчиков класса см. в описании метода <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragOver">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.DragOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragOver As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragOver;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит, когда подсистема ввода сообщает о соответствующем событии перетаскивания, имеющем в качестве потенциальной цели данный элемент.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это событие возникает, даже если источник перетаскивания находится в границах элемента. Если перетаскивание начинается за пределами границ, а затем перемещается, это событие также возникает, а также <xref:System.Windows.UIElement.DragEnter> и связанные события предварительного просмотра.  
  
 Это событие создается псевдоним для <xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType> вложенное событие для этого класса, чтобы <xref:System.Windows.UIElement.DragOver?displayProperty=nameWithType> входит в состав класса список членов, когда <xref:System.Windows.UIElement> наследуется от базового элемента. Обработчики событий, присоединенные к <xref:System.Windows.UIElement.DragOver> событий присоединяются к базовому объекту <xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType> вложенное событие и получить тот же экземпляр данных события.  
  
<a name="routedEventInfo_DragOver"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.DragOverEvent>|  
|Стратегия маршрутизации|Вверх|  
|делегат|<xref:System.Windows.DragEventHandler>|  
  
-   Соответствующее событие нисходящей маршрутизации является <xref:System.Windows.DragDrop.PreviewDragOver>.  
  
-   Переопределить <xref:System.Windows.UIElement.OnDragOver%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragEnter" />
        <altmember cref="E:System.Windows.UIElement.DragLeave" />
        <altmember cref="E:System.Windows.UIElement.Drop" />
      </Docs>
    </Member>
    <Member MemberName="DragOverEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragOverEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragOverEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.DragOverEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragOverEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragOverEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.DragOver" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.  
  
 Дополнительные сведения о регистрации маршрутизированных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Дополнительные сведения об использовании идентификаторов маршрутизируемых событий для добавления обработчиков класса см. в описании метода <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Drop">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler Drop;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler Drop" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.Drop" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Drop As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ Drop;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит, когда система ввода сообщает о базовом событии удаления с этим элементом в качестве цели удаления.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это событие создается псевдоним для <xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType> вложенное событие для этого класса, чтобы <xref:System.Windows.UIElement.Drop?displayProperty=nameWithType> входит в состав класса список членов, когда <xref:System.Windows.UIElement> наследуется от базового элемента. Обработчики событий, присоединенные к <xref:System.Windows.UIElement.Drop> событий присоединяются к базовому объекту <xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType> вложенное событие и получить тот же экземпляр данных события.  
  
<a name="routedEventInfo_Drop"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.DropEvent>|  
|Стратегия маршрутизации|Вверх|  
|делегат|<xref:System.Windows.DragEventHandler>|  
  
-   Соответствующее событие нисходящей маршрутизации является <xref:System.Windows.UIElement.PreviewDrop>.  
  
-   Переопределить <xref:System.Windows.UIElement.OnDrop%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragOver" />
        <altmember cref="E:System.Windows.UIElement.MouseLeftButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="DropEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DropEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DropEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.DropEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DropEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DropEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.Drop" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.  
  
 Дополнительные сведения о регистрации маршрутизированных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Дополнительные сведения об использовании идентификаторов маршрутизируемых событий для добавления обработчиков класса см. в описании метода <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Effect">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Effects.Effect Effect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Effects.Effect Effect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Effect" />
      <MemberSignature Language="VB.NET" Value="Public Property Effect As Effect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Effects::Effect ^ Effect { System::Windows::Media::Effects::Effect ^ get(); void set(System::Windows::Media::Effects::Effect ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Effects.Effect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает эффект растрового изображения, который применяется к объекту <see cref="T:System.Windows.UIElement" />. Это свойство зависимостей.</summary>
        <value>Объект <see cref="T:System.Windows.Media.Effects.Effect" />, представляющий эффект растрового изображения.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте <xref:System.Windows.UIElement.Effect%2A> свойства для применения эффекта для точечных рисунков для <xref:System.Windows.UIElement>.  
  
<a name="dependencyPropertyInfo_Effect"></a>   
## <a name="dependency-property-information"></a>Сведения о свойстве зависимостей  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.EffectProperty>|  
|Значение свойства метаданных `true`|Нет|  
  
   
  
## Examples  
 Приведенный ниже код XAML показано, как назначить пользовательское <xref:System.Windows.Media.Effects.ShaderEffect> для <xref:System.Windows.UIElement.Effect%2A> свойства.  
  
 [!code-xaml[System.Windows.Media.Effects.ShaderEffect#1000](~/samples/snippets/csharp/VS_Snippets_Wpf/System.Windows.Media.Effects.ShaderEffect/CS/Window1.xaml#1000)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Media.Effects.Effect" />
        <altmember cref="T:System.Windows.Media.Effects.ShaderEffect" />
      </Docs>
    </Member>
    <Member MemberName="EffectProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty EffectProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty EffectProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.EffectProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly EffectProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ EffectProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует свойство зависимостей <see cref="P:System.Windows.UIElement.Effect" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public bool Focus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Focus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.Focus" />
      <MemberSignature Language="VB.NET" Value="Public Function Focus () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Focus();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.Focus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Попытка задать фокус для данного элемента.</summary>
        <returns>
          Значение <see langword="true" />, если для данного элемента задан клавиатурный фокус и логический фокус; значение <see langword="false" />, если для данного элемента задан только логический фокус или если вызов данного метода не привел к изменению фокуса.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Необходимо получить фокус, <xref:System.Windows.UIElement.Focusable%2A> и <xref:System.Windows.UIElement.IsEnabled%2A> должны быть `true`.  
  
 Даже если элемент является обработка событий может иметь фокус и включена, в составе определенного дерева, (например, для составного элемента управления) может реагировать на события предварительного просмотра фокуса, не позволяя фокус, таким образом этот метод вернет `false`.  
  
 Фокус в общем случае характеризуется два разных понятия: фокус клавиатуры и логический фокус, которые не всегда совпадают.  Дополнительные сведения см. в разделе [фокус Обзор](~/docs/framework/wpf/advanced/focus-overview.md) или [фокусе](~/docs/framework/wpf/advanced/input-overview.md).  
  
 Если вызов <xref:System.Windows.UIElement.Focus%2A> возвращает `true`, <xref:System.Windows.UIElement.IsKeyboardFocused%2A> и <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> также `true`.  
  
 Если связанные свойства еще не `true`, при вызове <xref:System.Windows.UIElement.Focus%2A>, один или несколько из следующих событий вызываются в следующем порядке: <xref:System.Windows.UIElement.PreviewLostKeyboardFocus>, <xref:System.Windows.UIElement.PreviewGotKeyboardFocus> (источник — новый целевой фокус), <xref:System.Windows.UIElement.IsKeyboardFocusedChanged>, <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged>, <xref:System.Windows.UIElement.LostKeyboardFocus>, <xref:System.Windows.UIElement.GotKeyboardFocus> (источник — новый целевой фокус).  
  
 В порядке для этого вызова для успешной работы другого элемента в приложении должны быть уже установлен фокус.  
  
   
  
## Examples  
 Следующий пример устанавливает фокус на <xref:System.Windows.Controls.TextBox> ссылается <xref:System.Windows.FrameworkElement.Name%2A>и затем изменяет положение курсора в пределах <xref:System.Windows.Controls.TextBox>.  
  
 [!code-csharp[TextBox_CursorToEnd#UIElementFocus](~/samples/snippets/csharp/VS_Snippets_Wpf/TextBox_CursorToEnd/CSharp/Window1.xaml.cs#uielementfocus)]
 [!code-vb[TextBox_CursorToEnd#UIElementFocus](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextBox_CursorToEnd/VisualBasic/Window1.xaml.vb#uielementfocus)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Focusable">
      <MemberSignature Language="C#" Value="public bool Focusable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Focusable" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Focusable" />
      <MemberSignature Language="VB.NET" Value="Public Property Focusable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Focusable { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.Focusable</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получение или установка значения, определяющего возможность получения фокуса элементом.  Это свойство зависимостей.</summary>
        <value>
          <see langword="true" />, если элемент может получать фокус; в противном случае — <see langword="false" />. Значение по умолчанию: <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Получать только элемент фокус ввода с клавиатуры.  
  
 <xref:System.Windows.UIElement.Focusable%2A> — [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] доступа свойства для Какова на самом деле свойство зависимостей. Это свойство зависимостей конкретного довольно часто имеет значение «по умолчанию» по-разному в производных классах элементов, особенно в элементах управления. Это обычно происходит одним из двух способов:  
  
-   Свойство зависимостей наследуется от определенного производного класса, но производный класс переопределяет метаданные свойства зависимостей и изменяет значение свойства по умолчанию.  
  
-   Стиль или шаблон применяется к элементу, который устанавливает это значение свойства зависимостей по-разному.  
  
 Например, «по умолчанию» для <xref:System.Windows.UIElement.Focusable%2A> для <xref:System.Windows.Controls.Button> элемент управления будет `true`, даже если <xref:System.Windows.Controls.Button> наследует <xref:System.Windows.UIElement.Focusable%2A> как [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] свойство непосредственно из <xref:System.Windows.UIElement>. Это из-за примененного метаданных значение для <xref:System.Windows.UIElement.Focusable%2A> свойство зависимостей был переопределен в статическом конструкторе <xref:System.Windows.Controls.Control> базового класса, который располагается между <xref:System.Windows.Controls.Button> и <xref:System.Windows.UIElement> в иерархии классов.  
  
 Если наследуемые <xref:System.Windows.Controls.Control> или его производных классов <xref:System.Windows.Controls.Control> переопределяет значение по умолчанию этого свойства было `true`.  
  
 При наследуются <xref:System.Windows.Controls.Label> (который является <xref:System.Windows.Controls.Control> производного класса), значение по умолчанию снова переопределен, чтобы быть `false`.  
  
<a name="dependencyPropertyInfo_Focusable"></a>   
## <a name="dependency-property-information"></a>Сведения о свойстве зависимостей  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.FocusableProperty>|  
|Значение свойства метаданных `true`|Нет|  
  
   
  
## Examples  
 В следующем примере кода показан шаблон элемента управления для конкретного пользовательского элемента управления, который задает <xref:System.Windows.UIElement.Focusable%2A> `false` на один из элементов в шаблоне.  
  
 [!code-xaml[RichTextBox_NoScrollViewer#_ControlTemplate](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBox_NoScrollViewer/CS/window1.xaml#_controltemplate)]
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>При наследовании от <see cref="T:System.Windows.UIElement" /> напрямую (в отличие от из <see cref="T:System.Windows.Controls.Control" />), рассмотрите возможность, следует ли элемент должен иметь фокус, так как по умолчанию элемент не будет получать фокус ввода. При желании элемент может иметь фокус переопределите метаданные для этого свойства в статическом конструкторе этого типа следующим образом:  
  
 [!code-csharp[CorePseudocode#UIElementShortOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#uielementshortoverride)]
 [!code-vb[CorePseudocode#UIElementShortOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#uielementshortoverride)]  
  
 где <paramref name="myElement" /> должно быть именем класса, типа, который переопределяется значение метаданных.</para>
        </block>
        <altmember cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
        <altmember cref="E:System.Windows.UIElement.GotKeyboardFocus" />
        <altmember cref="E:System.Windows.UIElement.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="FocusableChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler FocusableChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler FocusableChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.FocusableChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event FocusableChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ FocusableChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при изменении значения свойства <see cref="P:System.Windows.UIElement.Focusable" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот член представляет [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] событий, не является маршрутизируемым.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.Focusable" />
      </Docs>
    </Member>
    <Member MemberName="FocusableProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FocusableProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FocusableProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.FocusableProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FocusableProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ FocusableProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует свойство зависимостей <see cref="P:System.Windows.UIElement.Focusable" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAnimationBaseValue">
      <MemberSignature Language="C#" Value="public object GetAnimationBaseValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetAnimationBaseValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.GetAnimationBaseValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAnimationBaseValue (dp As DependencyProperty) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetAnimationBaseValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.GetAnimationBaseValue(System.Windows.DependencyProperty)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">Проверяемое свойство зависимости.</param>
        <summary>Возвращает значение базового свойства для указанного свойства данного элемента без учета возможного анимированного значения из запущенной или остановленной анимации.</summary>
        <returns>Значение свойства, как если бы анимации не присоединялись к указанному свойству зависимостей.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если бы анимации не присоединялись к свойству, а затем <xref:System.Windows.UIElement.GetAnimationBaseValue%2A> возвращаемое значение всегда равно идентичен <xref:System.Windows.DependencyObject.GetValue%2A> возвращаемое значение. При наличии анимированные, затем все возможные производные значения, включая начальные и остановки, игнорируются, и значение свойства определяется в зависимости от всех других возможных входных значений. Дополнительные сведения см. в разделе [Приоритет значений свойств зависимостей](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).  
  
   
  
## Examples  
 В следующем примере реализуется обработчик, который сообщает к базовому значению анимируемого <xref:System.Windows.FrameworkElement.Width%2A> свойство <xref:System.Windows.Controls.Button>, а также преобразование к базовому значению.  
  
 [!code-csharp[timingbehaviors_procedural_snip#GetAnimationBaseValue](~/samples/snippets/csharp/VS_Snippets_Wpf/timingbehaviors_procedural_snip/CSharp/GetAnimationBaseValueExample.cs#getanimationbasevalue)]
 [!code-vb[timingbehaviors_procedural_snip#GetAnimationBaseValue](~/samples/snippets/visualbasic/VS_Snippets_Wpf/timingbehaviors_procedural_snip/visualbasic/getanimationbasevalueexample.vb#getanimationbasevalue)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="GetLayoutClip">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Media.Geometry GetLayoutClip (System.Windows.Size layoutSlotSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Media.Geometry GetLayoutClip(valuetype System.Windows.Size layoutSlotSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.GetLayoutClip(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetLayoutClip (layoutSlotSize As Size) As Geometry" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Media::Geometry ^ GetLayoutClip(System::Windows::Size layoutSlotSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Geometry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="layoutSlotSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="layoutSlotSize">Доступный размер, предоставляемый элементом.</param>
        <summary>Возвращает альтернативную геометрию отсечению, представляющую область, которая будет отсечена в случае задания для свойства <see cref="P:System.Windows.UIElement.ClipToBounds" /> значения <see langword="true" />.</summary>
        <returns>Потенциальная геометрия обрезки.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Реализация по умолчанию возвращает допустимое значение, но не использует `layoutSlotSize` параметр в вычислениях. Вместо этого он использует значение <xref:System.Windows.UIElement.RenderSize%2A>.  
  
 Большей части переопределить этот метод, немедленно производном <xref:System.Windows.FrameworkElement> класса и <xref:System.Windows.FrameworkElement> переопределение создает более сложное поведение для общих элементов уровня платформы WPF. Дополнительные сведения см. в разделе <xref:System.Windows.FrameworkElement.GetLayoutClip%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.GetLayoutClip(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="GetUIParentCore">
      <MemberSignature Language="C#" Value="protected internal virtual System.Windows.DependencyObject GetUIParentCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Windows.DependencyObject GetUIParentCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.GetUIParentCore" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function GetUIParentCore () As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Windows::DependencyObject ^ GetUIParentCore();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>При переопределении в производном классе возвращает альтернативный родительский элемент [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] при условии отсутствия видимого родительского элемента.</summary>
        <returns>Объект, если реализация производного класса сообщает об альтернативном родительском подключении.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Виртуальная реализация по умолчанию этот метод возвращает `null`. <xref:System.Windows.FrameworkElement> предоставляет практической реализации.  
  
 Альтернативные родительские используется для маршрутизации событий, в случаях, когда элемент создает альтернативную родительскую структуру, чтобы его события маршрутизируются в, изменяя стандартный шаблон маршрутизации вверх по визуальному дереву родительскому элементу, или вниз Предварительный просмотр стратегию маршрутизации.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GiveFeedback">
      <MemberSignature Language="C#" Value="public event System.Windows.GiveFeedbackEventHandler GiveFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.GiveFeedbackEventHandler GiveFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GiveFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GiveFeedback As GiveFeedbackEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::GiveFeedbackEventHandler ^ GiveFeedback;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.GiveFeedbackEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит, когда подсистема ввода сообщает о соответствующем событии перетаскивания, в котором участвует данный элемент.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.GiveFeedback> Событие позволяет источнику события перетаскивания изменять внешний вид указателя мыши, чтобы дать пользователю визуальную обратную связь во время операции перетаскивания и вставки. Визуальную обратную связь для более глубокого, операции перетаскивания и вставки находится в процессе.  
  
 Это событие создается псевдоним для <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType> вложенное событие для этого класса, чтобы <xref:System.Windows.UIElement.GiveFeedback> входит в состав класса список членов, когда <xref:System.Windows.UIElement> наследуется от базового элемента. Обработчики событий, присоединенные к <xref:System.Windows.UIElement.GiveFeedback> событий присоединяются к базовому объекту <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType> вложенное событие и получить тот же экземпляр данных события.  
  
<a name="routedEventInfo_GiveFeedback"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.GiveFeedbackEvent>|  
|Стратегия маршрутизации|Вверх|  
|делегат|<xref:System.Windows.GiveFeedbackEventHandler>|  
  
-   Соответствующее событие нисходящей маршрутизации является <xref:System.Windows.UIElement.PreviewGiveFeedback>.  
  
-   Переопределить <xref:System.Windows.UIElement.OnGiveFeedback%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragLeave" />
      </Docs>
    </Member>
    <Member MemberName="GiveFeedbackEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GiveFeedbackEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GiveFeedbackEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GiveFeedbackEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GiveFeedbackEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GiveFeedbackEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.GiveFeedback" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.  
  
 Дополнительные сведения о регистрации маршрутизированных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Дополнительные сведения об использовании идентификаторов маршрутизируемых событий для добавления обработчиков класса см. в описании метода <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler GotFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler GotFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GotFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotFocus As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ GotFocus;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при получении данным элементом логического фокуса.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Логический фокус отличается от фокуса, если он является результатом вызова метода, в на другом уровне существует предыдущий фокус клавиатуры. В этом случае фокус остается там, где это и элемент где <xref:System.Windows.UIElement.Focus%2A> вызывается метод по-прежнему возвращает логический фокус.  
  
 Точнее интерпретацию этого события является что он вызывается, когда значение <xref:System.Windows.UIElement.IsFocused%2A> свойства элемента в маршруте изменяется с `false` для `true`.  
  
 Вследствие этого события восходящей маршрутизации, элемент, который получает фокус, может быть дочерний элемент, а не элемента, которому фактически присоединен обработчик событий. Проверьте <xref:System.Windows.RoutedEventArgs.Source%2A> в данных события, чтобы определить фактический элемент, полученные фокус.  
  
<a name="routedEventInfo_GotFocus"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.GotFocusEvent>|  
|Стратегия маршрутизации|Вверх|  
|делегат|<xref:System.Windows.RoutedEventHandler>|  
  
-   Нет соответствующего туннелирования события.  
  
-   Переопределить <xref:System.Windows.UIElement.OnGotFocus%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GotKeyboardFocus" />
        <altmember cref="M:System.Windows.UIElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="GotFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GotFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotFocusEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.GotFocus" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.  
  
 Дополнительные сведения о регистрации маршрутизированных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Дополнительные сведения об использовании идентификаторов маршрутизируемых событий для добавления обработчиков класса см. в описании метода <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler GotKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler GotKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GotKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ GotKeyboardFocus;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при получении данным элементом фокуса ввода с клавиатуры.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.IsKeyboardFocusedChanged> аналогичные событие, которое отслеживает изменения состояния в свойство, которое поддерживает состояния фокуса для элемента; <xref:System.Windows.UIElement.GotKeyboardFocus> событие возникает в тех же условиях.  
  
 Вследствие этого события восходящей маршрутизации, элемент, имеющий фокус ввода может быть дочерний элемент, а не элемента, которому фактически присоединен обработчик событий. Проверьте <xref:System.Windows.RoutedEventArgs.Source%2A> в данных события, чтобы определить фактический элемент, имеющий фокус.  
  
 Это событие создается псевдоним для <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType> вложенное событие для этого класса, чтобы <xref:System.Windows.UIElement.GotKeyboardFocus> входит в состав класса список членов, когда <xref:System.Windows.UIElement> наследуется от базового элемента. Обработчики событий, присоединенные к <xref:System.Windows.UIElement.GotKeyboardFocus> событий присоединяются к базовому объекту <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType> вложенное событие и получить тот же экземпляр данных события.  
  
<a name="routedEventInfo_GotKeyboardFocus"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.GotKeyboardFocusEvent>|  
|Стратегия маршрутизации|Вверх|  
|делегат|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   Соответствующее событие нисходящей маршрутизации является <xref:System.Windows.UIElement.PreviewGotKeyboardFocus>.  
  
-   Переопределить <xref:System.Windows.UIElement.OnGotKeyboardFocus%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="GotKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GotKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotKeyboardFocusEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.GotKeyboardFocus" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.  
  
 Дополнительные сведения о регистрации маршрутизированных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Дополнительные сведения об использовании идентификаторов маршрутизируемых событий для добавления обработчиков класса см. в описании метода <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotMouseCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler GotMouseCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler GotMouseCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GotMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotMouseCapture As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ GotMouseCapture;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при захвате мыши данным элементом.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При захвате мыши элементом, он получает ввод от мыши, даже если указатель мыши находится вне границ элемента. Мышь обычно захватывается только во время операции перетаскивания и вставки и остается захваченной, пока не произойдет действие операции перетаскивания и вставки.  
  
 Вследствие этого события восходящей маршрутизации, элемент, захвативший может быть дочерний элемент, а не элемента, которому фактически присоединен обработчик событий. Проверьте <xref:System.Windows.RoutedEventArgs.Source%2A> событий системы отслеживания измененных данных, чтобы определить фактический элемент, имеющий мыши.  
  
 Это событие создается псевдоним для <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType> вложенное событие для этого класса, чтобы <xref:System.Windows.UIElement.GotMouseCapture> входит в состав класса список членов, когда <xref:System.Windows.UIElement> наследуется от базового элемента. Обработчики событий, присоединенные к <xref:System.Windows.UIElement.GotMouseCapture> событий присоединяются к базовому объекту <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType> вложенное событие и получить тот же экземпляр данных события.  
  
<a name="routedEventInfo_GotMouseCapture"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.GotMouseCaptureEvent>|  
|Стратегия маршрутизации|Вверх|  
|делегат|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   Нет определенного события, соответствующие туннелирования.  
  
-   Переопределить <xref:System.Windows.UIElement.OnGotMouseCapture%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.CaptureMouse" />
      </Docs>
    </Member>
    <Member MemberName="GotMouseCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotMouseCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotMouseCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GotMouseCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotMouseCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotMouseCaptureEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.GotMouseCapture" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.  
  
 Дополнительные сведения о регистрации маршрутизированных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Дополнительные сведения об использовании идентификаторов маршрутизируемых событий для добавления обработчиков класса см. в описании метода <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotStylusCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler GotStylusCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler GotStylusCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GotStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotStylusCapture As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ GotStylusCapture;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при захвате пера данным элементом.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При захвате пера элементом, он получает ввод от пера, даже если указатель находится вне границ элемента. Перо обычно захватывается только во время операции перетаскивания и вставки и сохраняет захват, пока не произойдет действие операции перетаскивания и вставки.  
  
 Вследствие этого события восходящей маршрутизации, элемент, захвативший может быть дочерний элемент, а не элемента, которому фактически присоединен обработчик событий. Проверьте <xref:System.Windows.RoutedEventArgs.Source%2A> в данных события, чтобы определить фактический элемент, захвативший.  
  
 Это событие создается псевдоним для вложенного события для этого класса, чтобы <xref:System.Windows.UIElement.GotStylusCapture> входит в состав класса список членов, когда <xref:System.Windows.UIElement> наследуется от базового элемента. Обработчики событий, присоединенные к <xref:System.Windows.UIElement.GotStylusCapture> событий присоединяются к базовому объекту <xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=nameWithType> вложенное событие и получить тот же экземпляр данных события.  
  
<a name="routedEventInfo_GotStylusCapture"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.GotStylusCaptureEvent>|  
|Стратегия маршрутизации|Вверх|  
|делегат|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Нет определенного события, соответствующие туннелирования.  
  
-   Переопределить <xref:System.Windows.UIElement.OnGotStylusCapture%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotStylusCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotStylusCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotStylusCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GotStylusCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotStylusCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotStylusCaptureEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.GotStylusCapture" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.  
  
 Дополнительные сведения о регистрации маршрутизированных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Дополнительные сведения об использовании идентификаторов маршрутизируемых событий для добавления обработчиков класса см. в описании метода <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotTouchCapture">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; GotTouchCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; GotTouchCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GotTouchCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotTouchCapture As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ GotTouchCapture;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при получении данным элементом операции сенсорного ввода.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_GotTouchCapture"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.GotTouchCaptureEvent>|  
|Стратегия маршрутизации|Вверх|  
|делегат|<xref:System.EventHandler%601> имеет тип данных <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Переопределить <xref:System.Windows.UIElement.OnGotTouchCapture%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotTouchCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotTouchCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotTouchCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GotTouchCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotTouchCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotTouchCaptureEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.GotTouchCapture" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasAnimatedProperties">
      <MemberSignature Language="C#" Value="public bool HasAnimatedProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasAnimatedProperties" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.HasAnimatedProperties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasAnimatedProperties As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasAnimatedProperties { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Media.Animation.IAnimatable.HasAnimatedProperties</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, указывающее, имеет ли данный элемент какие-либо анимированные свойства.</summary>
        <value>
          <see langword="true" />, если элемент имеет анимированные свойства; иначе, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это свойство возвращает `true` для постоянных анимаций (без часов, всегда запущенной) или для анимаций, имеющих определенный график.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasEffectiveKeyboardFocus">
      <MemberSignature Language="C#" Value="protected internal virtual bool HasEffectiveKeyboardFocus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasEffectiveKeyboardFocus" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.HasEffectiveKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable ReadOnly Property HasEffectiveKeyboardFocus As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual property bool HasEffectiveKeyboardFocus { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, информирующее о фокусе <see cref="T:System.Windows.UIElement" />.</summary>
        <value>
          <see langword="true" />, если у <see cref="T:System.Windows.UIElement" /> есть фокус. В противном случае — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Подклассы могут переопределить это свойство, чтобы указать, когда элемент имеет фокус клавиатуры.  Это полезно, когда ваш <xref:System.Windows.UIElement> содержит элементы, которые могут иметь фокус клавиатуры и нужно вашего элемента отчета, который он имеет фокус.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="HitTestCore">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Реализует метод <see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.GeometryHitTestParameters)" />, обеспечивая поведение проверки местонахождения пера для базового элемента.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="HitTestCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Media.GeometryHitTestResult HitTestCore (System.Windows.Media.GeometryHitTestParameters hitTestParameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Media.GeometryHitTestResult HitTestCore(class System.Windows.Media.GeometryHitTestParameters hitTestParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.HitTestCore(System.Windows.Media.GeometryHitTestParameters)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function HitTestCore (hitTestParameters As GeometryHitTestParameters) As GeometryHitTestResult" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Media::GeometryHitTestResult ^ HitTestCore(System::Windows::Media::GeometryHitTestParameters ^ hitTestParameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.GeometryHitTestResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hitTestParameters" Type="System.Windows.Media.GeometryHitTestParameters" />
      </Parameters>
      <Docs>
        <param name="hitTestParameters">Описывает выполняемую проверку нажатия, включая начальную точку нажатия.</param>
        <summary>Реализует метод <see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.GeometryHitTestParameters)" /> для обеспечения поведения проверки нажатия для базового элемента (возвращая <see cref="T:System.Windows.Media.GeometryHitTestResult" />).</summary>
        <returns>Результаты теста, включая вычисленную геометрию.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 См. исходный виртуальный метод <xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=nameWithType> для сведения о переопределении этого метода в дальнейшей производных классов. Обратите внимание, что некоторых элементов управления (<xref:System.Windows.Controls.TextBlock>, например) имеются разные реализации, которые переопределяют эту.  
  
 Этот метод не предназначен для непосредственного вызова из кода приложения. Этот метод поддерживает внутренние поведения проверки местонахождения пера, предоставляемые различными аспектами системы ввода (ли указатель мыши находится над элементом, например).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HitTestCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Media.HitTestResult HitTestCore (System.Windows.Media.PointHitTestParameters hitTestParameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Media.HitTestResult HitTestCore(class System.Windows.Media.PointHitTestParameters hitTestParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.HitTestCore(System.Windows.Media.PointHitTestParameters)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function HitTestCore (hitTestParameters As PointHitTestParameters) As HitTestResult" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Media::HitTestResult ^ HitTestCore(System::Windows::Media::PointHitTestParameters ^ hitTestParameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.HitTestResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hitTestParameters" Type="System.Windows.Media.PointHitTestParameters" />
      </Parameters>
      <Docs>
        <param name="hitTestParameters">Описывает выполняемую проверку нажатия, включая начальную точку нажатия.</param>
        <summary>Реализует метод <see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.PointHitTestParameters)" /> для обеспечения поведения проверки нажатия для базового элемента (возвращая <see cref="T:System.Windows.Media.HitTestResult" />).</summary>
        <returns>Результаты теста, включая вычисленную точку.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 См. исходный виртуальный метод <xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=nameWithType> для сведения о переопределении этого метода в дальнейшей производных классов. Обратите внимание, что некоторых элементов управления (<xref:System.Windows.Controls.TextBlock>, например) имеются разные реализации, которые переопределяют <xref:System.Windows.UIElement.HitTestCore%2A> в соответствии с определением <xref:System.Windows.UIElement>.  
  
 Этот метод не предназначен для непосредственного вызова из кода приложения. Этот метод поддерживает внутренние поведения проверки местонахождения пера, предоставляемые различными аспектами системы ввода (ли указатель мыши находится над элементом, например).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InputBindings">
      <MemberSignature Language="C#" Value="public System.Windows.Input.InputBindingCollection InputBindings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputBindingCollection InputBindings" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.InputBindings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InputBindings As InputBindingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::InputBindingCollection ^ InputBindings { System::Windows::Input::InputBindingCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputBindingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получение коллекции привязок ввода, связанных с этим элементом.</summary>
        <value>Коллекция привязок ввода.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Привязки ввода поддерживают привязку команд к устройствам ввода. Например <xref:System.Windows.Input.MouseBinding> реализует входных привязок, которые включают свойства, которые связаны с конкретными устройствами мыши.  
  
 Коллекция привязок ввода включает как привязки ввода, относящиеся к типу так и привязки ввода, объявленные в экземпляре.  
  
 Связанное свойство <xref:System.Windows.UIElement.CommandBindings%2A>, поддерживает коллекцию привязок команд. Они отличаются от привязок ввода, в том, что они представляют следующего уровня вниз обработки команд - действий, привязанных к известным командам.  
  
<a name="xamlPropertyElementUsage_InputBindings"></a>   
## <a name="xaml-property-element-usage"></a>Использование элемента свойства XAML  
  
```  
<object>  
  <object.InputBindings>  
    oneOrMoreInputBindings  
  </object.InputBindings>  
</object>  
```  
  
<a name="xamlValues_InputBindings"></a>   
## <a name="xaml-values"></a>Значения XAML  
 *oneOrMoreInputBindings*  
 Один или несколько <xref:System.Windows.Input.InputBinding> элементов (обычно <xref:System.Windows.Input.KeyBinding> или <xref:System.Windows.Input.MouseBinding> производных классах). Каждый из них должен иметь <xref:System.Windows.Input.InputBinding.Command%2A> и <xref:System.Windows.Input.InputBinding.Gesture%2A> набором атрибутов.  
  
   
  
## Examples  
 В следующем примере это свойство заполняется на <xref:System.Windows.Window>, с одним <xref:System.Windows.Input.KeyBinding>.  
  
 [!code-xaml[CommandingOverviewSnippets#CommandingOverviewXAMLKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml#commandingoverviewxamlkeybinding)]  
  
 Дополнительные сведения о [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] синтаксис для коллекций, в разделе [XAML Syntax In Detail](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
      </Docs>
    </Member>
    <Member MemberName="InputHitTest">
      <MemberSignature Language="C#" Value="public System.Windows.IInputElement InputHitTest (System.Windows.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.IInputElement InputHitTest(valuetype System.Windows.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.InputHitTest(System.Windows.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::IInputElement ^ InputHitTest(System::Windows::Point point);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.IInputElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Windows.Point" />
      </Parameters>
      <Docs>
        <param name="point">Координаты смещения в пределах данного элемента.</param>
        <summary>Возвращает элемент ввода, расположенный внутри текущего элемента по указанным координатам относительно начала координат текущего элемента.</summary>
        <returns>Дочерний элемент, расположенный в заданной позиции.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.IInputElement> возвращается как тип возвращаемого значения, так как этот тип является общий интерфейс для обоих <xref:System.Windows.UIElement> и <xref:System.Windows.ContentElement>. Затем можно привести тип, возвращаемый соответствующим образом или использовать экземпляр интерфейса для определенных элементов, определяемых <xref:System.Windows.IInputElement> интерфейса.  
  
 Этот метод обычно не вызывается из кода приложения. Вызов этого метода подходит только в случае, если вы собираетесь повторно реализовать значительный объем низкоуровневых функций ввода, которые уже присутствуют, например воссоздание логики устройства мыши.  
  
 <xref:System.Windows.IContentHost> контракты <xref:System.Windows.IContentHost.InputHitTest%2A> метод с такой же сигнатурой, что выбрать некоторые элементы, чтобы явно реализовать.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateArrange">
      <MemberSignature Language="C#" Value="public void InvalidateArrange ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateArrange() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.InvalidateArrange" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateArrange ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateArrange();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Делает недействительным состояние компоновки (структуру) элемента. После этого структура элемента будет обновлена, что произойдет асинхронно, если не сделать это принудительно методом <see cref="M:System.Windows.UIElement.UpdateLayout" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Часто использовать вызовы <xref:System.Windows.UIElement.InvalidateArrange%2A> или, в частности для <xref:System.Windows.UIElement.UpdateLayout%2A> приводит к увеличению производительности последствиям. Поэтому следует избегать вызова этого метода, если не требуется абсолютная точность состояния структуры для последующих вызовов других [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] в коде. Расширенный сценарий, где можно вызвать <xref:System.Windows.UIElement.InvalidateArrange%2A> — при создании <xref:System.Windows.PropertyChangedCallback> для свойства зависимостей, не принадлежащем <xref:System.Windows.Freezable> или <xref:System.Windows.FrameworkElement> производный класс, по-прежнему влияет на передачу размещения разметки при его изменении.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateMeasure">
      <MemberSignature Language="C#" Value="public void InvalidateMeasure ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateMeasure() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.InvalidateMeasure" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateMeasure ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateMeasure();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Делает недействительным состояние измерения (структуру) элемента.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вызывающий этот метод также вызывает <xref:System.Windows.UIElement.InvalidateArrange%2A> внутренним образом, нет необходимости вызывать <xref:System.Windows.UIElement.InvalidateMeasure%2A> и <xref:System.Windows.UIElement.InvalidateArrange%2A> в течение промежутка времени. После недействительной, элемент будет иметь в макете обновлены, что произойдет асинхронно, если не <xref:System.Windows.UIElement.UpdateLayout%2A> вызывается для принудительного изменения синхронной макета.  
  
 Система макета уровня платформы WPF выполняет собственную обработку изменений в визуальном дереве элемента, и в наиболее распространенных случаев недействительности система структуры вызывает эквивалент этого метода, при необходимости. Этот метод следует вызывать только при создании полной реализации структуры, которой прямая обработка дерева элементов или подобные сложных сценариях. Один таких сложных скриптов: при создании <xref:System.Windows.PropertyChangedCallback> для свойства зависимостей, не принадлежащем <xref:System.Windows.Freezable> или <xref:System.Windows.FrameworkElement> производный класс, по-прежнему влияет на передачу показателей разметки при его изменении.  
  
 Часто использовать вызовы <xref:System.Windows.UIElement.InvalidateMeasure%2A> или, в частности для <xref:System.Windows.UIElement.UpdateLayout%2A> приводит к увеличению производительности последствиям. Поэтому следует избегать вызова этого метода, если не требуется абсолютная точность состояния структуры для последующих вызовов других [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] в коде.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateVisual">
      <MemberSignature Language="C#" Value="public void InvalidateVisual ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateVisual() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.InvalidateVisual" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateVisual ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateVisual();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Делает недействительной отрисовку элемента и принудительно вызывает новый полный этап разметки. По завершении цикла макета вызывается метод <see cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод вызывает метод <xref:System.Windows.UIElement.InvalidateArrange%2A> внутренним образом.  
  
 Этот метод обычно не вызывается из кода приложения. Система макета уровня платформы WPF выполняет собственную обработку изменений в визуальном дереве элемента и будет вызывать эквивалент данного метода, при необходимости уже. Вызов этого метода необходим только в сложных сценариях. Один таких сложных скриптов: при создании <xref:System.Windows.PropertyChangedCallback> для свойства зависимостей, не принадлежащем <xref:System.Windows.Freezable> или <xref:System.Windows.FrameworkElement> производный класс, по-прежнему влияет на макет при его изменении.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.InvalidateArrange" />
      </Docs>
    </Member>
    <Member MemberName="IsArrangeValid">
      <MemberSignature Language="C#" Value="public bool IsArrangeValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsArrangeValid" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsArrangeValid" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsArrangeValid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsArrangeValid { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, указывающее, являются ли действительными вычисленные размер и позиция дочерних элементов в структуре данного элемента.</summary>
        <value>
          <see langword="true" />, если размер и позиция структуры действительны; в противном случае — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Можно принудительно выполнить компоновку недействительными, вызвав <xref:System.Windows.UIElement.InvalidateArrange%2A> для этого элемента (или его родительских объектов). Это помечает структуру для рекомпозиции в тех пор, определяется системой структуры. В качестве альтернативы немедленный вызов метода <xref:System.Windows.UIElement.UpdateLayout%2A> может быть выполнено, но это следует делать только если известно, что без дальнейшей недействительности, ожидающих выполнения (большое число излишних принудительных обновлений окажет влияние на производительность).  
  
 <xref:System.Windows.UIElement.IsArrangeValid%2A> не может быть `true` Если <xref:System.Windows.UIElement.IsMeasureValid%2A> также `true` (в процессе разметки расположение не может быть допустимым без измерения, сначала являются допустимыми).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.InvalidateArrange" />
        <altmember cref="P:System.Windows.UIElement.IsMeasureValid" />
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public bool IsEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEnabled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает значение, указывающее, активирован ли этот элемент в [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].  Это свойство зависимостей.</summary>
        <value>
          Значение <see langword="true" />, если элемент включен; в противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обратите внимание, что это свойство зависит от реализации данного класса <xref:System.Windows.UIElement.IsEnabledCore%2A> на отдельных элементов, часто во время выполнения. Таким образом значение по умолчанию, перечисленных здесь не иногда действует. Например <xref:System.Windows.Controls.Primitives.ScrollBar> будет <xref:System.Windows.UIElement.IsEnabled%2A> `false` каждый раз, когда выясняется, что нет необходимости поддерживать полосы прокрутки. Попытка задать это значение будет также может быть переопределено значения, возвращенного <xref:System.Windows.UIElement.IsEnabledCore%2A>.  
  
 Элементы, которые не включены не участвуют в проверке нажатия или фокусе и таким образом, не могут быть источниками входных событий.  
  
<a name="dependencyPropertyInfo_IsEnabled"></a>   
## <a name="dependency-property-information"></a>Сведения о свойстве зависимостей  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.IsEnabledProperty>|  
|Значение свойства метаданных `true`|Нет|  
  
   
  
## Examples  
 В следующем примере показано обработчик на одну кнопку, при выполненных установит <xref:System.Windows.UIElement.IsEnabled%2A> `false` на другую кнопку именованный `b1`.  
  
 [!code-csharp[RoutedEventAddRemoveHandler#Handler](~/samples/snippets/csharp/VS_Snippets_Wpf/RoutedEventAddRemoveHandler/CSharp/default.xaml.cs#handler)]
 [!code-vb[RoutedEventAddRemoveHandler#Handler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RoutedEventAddRemoveHandler/VisualBasic/default.xaml.vb#handler)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.IsEnabledChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsEnabledChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsEnabledChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsEnabledChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsEnabledChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsEnabledChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsEnabledChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при изменении значения свойства <see cref="P:System.Windows.UIElement.IsEnabled" /> данного элемента.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот член представляет [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] событий, не является маршрутизируемым.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabledCore">
      <MemberSignature Language="C#" Value="protected virtual bool IsEnabledCore { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabledCore" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsEnabledCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property IsEnabledCore As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool IsEnabledCore { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, которое становится возвращаемым значением свойства <see cref="P:System.Windows.UIElement.IsEnabled" /> в производных классах.</summary>
        <value>
          Значение <see langword="true" />, если элемент включен; в противном случае — значение <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>Реализация по умолчанию этого свойства кэширует значение, а также определяет, включен ли родительский элемент этого элемента. (Если родительский не включен, дочерний элемент не может быть успешно активирован в Практическое применение [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].) Если вы решите переопределить эту реализацию, убедитесь, что можно вызвать базовую реализацию для сохранения этого поведения.  
  
 <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> Класс предоставляет реализацию переопределения этого свойства. Это переопределение определяет, является ли содержимое в области презентации содержимого за пределы доступной области. Если содержимое больше области, включена в части полосы прокрутки. В противном случае полоса прокрутки не включен.</para>
        </block>
        <altmember cref="E:System.Windows.UIElement.IsEnabledChanged" />
        <altmember cref="P:System.Windows.UIElement.IsEnabled" />
      </Docs>
    </Member>
    <Member MemberName="IsEnabledProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsEnabledProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsEnabledProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsEnabledProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsEnabledProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsEnabledProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует свойство зависимостей <see cref="P:System.Windows.UIElement.IsEnabled" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFocused">
      <MemberSignature Language="C#" Value="public bool IsFocused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFocused" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsFocused" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFocused As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFocused { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, определяющее, имеет ли элемент логический фокус.  Это свойство зависимостей.</summary>
        <value>
          Значение <see langword="true" />, если этот элемент имеет логический фокус; в противном случае — значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Логический фокус могут отличаться от фокус клавиатуры, если приложение имеет несколько фокусных секций, например между содержанием меню и остальной частью приложения. В этом случае фокус клавиатуры можно только на одном элементе пользовательского интерфейса приложения, но некоторые элементы в других разделах фокуса могут сохранять логический фокус. Дополнительные сведения о логическом фокусе см [фокус Обзор](~/docs/framework/wpf/advanced/focus-overview.md).  
  
 Не устанавливайте фокус, присвоив этому свойству (это только для чтения). Обычно это свойство используется для использования в качестве свойства зависимостей для <xref:System.Windows.Setter> или <xref:System.Windows.EventTrigger>. Чтобы задать фокус программным путем, вызовите <xref:System.Windows.UIElement.Focus%2A>. Также можно установить фокус, действием пользователя или реализацией управления, которые могут включать поведение захвата мыши.  
  
<a name="dependencyPropertyInfo_IsFocused"></a>   
## <a name="dependency-property-information"></a>Сведения о свойстве зависимостей  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.IsFocusedProperty>|  
|Значение свойства метаданных `true`|Нет|  
  
   
  
## Examples  
 Ниже приведен код обработчика, изменяющий фон элемента управления при получении им фокуса.  
  
 [!code-csharp[PopupSimple#IsFocused](~/samples/snippets/csharp/VS_Snippets_Wpf/PopupSimple/CSharp/Window1.xaml.cs#isfocused)]  
  
 Другой распространенный способ добиться этого же эффекта — разместить <xref:System.Windows.Trigger> в <xref:System.Windows.Style> элемента управления; этот подход не требует обработки конкретных событий в коде программной части и позволяет разработчикам более широкий доступ к интерактивной и графической характер [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]. Пример см. в разделе [как: создать внешнее эффекта свечения](http://msdn.microsoft.com/library/a2ccf19a-d0dc-4e3c-88e3-95d7f7d765b1).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.Focusable" />
        <altmember cref="M:System.Windows.UIElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="IsFocusedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsFocusedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsFocusedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsFocusedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsFocusedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsFocusedProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует свойство зависимостей <see cref="P:System.Windows.UIElement.IsFocused" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHitTestVisible">
      <MemberSignature Language="C#" Value="public bool IsHitTestVisible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHitTestVisible" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsHitTestVisible" />
      <MemberSignature Language="VB.NET" Value="Public Property IsHitTestVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsHitTestVisible { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получение или установка значения, определяющего возможность возврата этого элемента в качестве результата проверки нажатия в какой-либо части его отображаемого содержимого. Это свойство зависимостей.</summary>
        <value>
          <see langword="true" />, если данный элемент мог быть возвращен в качестве результата проверки нажатия; в противном случае — <see langword="false" />. Значение по умолчанию — <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Действительное значение данного свойства зависит от относительные позиции поддерживающих проверку нажатия элементов в логическом дереве. Для экземпляра, если элемент является дочерним для элемента элемент, который является не нажатия видимым, действительное значение свойства для дочернего элемента останется `false`, даже если при попытке задать это значение локально. По этой причине важно не задавать <xref:System.Windows.UIElement.IsHitTestVisible%2A> для `false` в составном элементе управления, если только не требуется никаких входных данных и попадания для данного элемента управления. Дополнительные сведения о проверке нажатия см. в разделе [Проверка нажатия на визуальном уровне](~/docs/framework/wpf/graphics-multimedia/hit-testing-in-the-visual-layer.md).  
  
<a name="dependencyPropertyInfo_IsHitTestVisible"></a>   
## <a name="dependency-property-information"></a>Сведения о свойстве зависимостей  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.IsHitTestVisibleProperty>|  
|Значение свойства метаданных `true`|Нет|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.IsHitTestVisibleChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsHitTestVisibleChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsHitTestVisibleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsHitTestVisibleChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsHitTestVisibleChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsHitTestVisibleChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsHitTestVisibleChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при изменении значения свойства зависимостей <see cref="P:System.Windows.UIElement.IsHitTestVisible" /> данного элемента.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот член представляет [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] событий, не является маршрутизируемым.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHitTestVisibleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsHitTestVisibleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsHitTestVisibleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsHitTestVisibleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsHitTestVisibleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsHitTestVisibleProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует свойство зависимостей <see cref="P:System.Windows.UIElement.IsHitTestVisible" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInputMethodEnabled">
      <MemberSignature Language="C#" Value="public bool IsInputMethodEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInputMethodEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsInputMethodEnabled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInputMethodEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInputMethodEnabled { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, указывающее, включена ли обработка входящих данных в этот элемент в системе метода ввода, например [!INCLUDE[TLA#tla_ime](~/includes/tlasharptla-ime-md.md)].</summary>
        <value>
          Значение <see langword="true" />, если метод ввода активен; в обратном случае — значение <see langword="false" />. Значение по умолчанию базового прикрепленного свойства — <see langword="true;" /> тем не менее, это повлияет фактическое состояние методов ввода во время выполнения.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это свойство возвращает значение, которое возвращается вложенное свойство <xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=nameWithType> для в настоящий момент разрешенные методы ввода (клавиатуры, речи и других устройств ввода).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocused">
      <MemberSignature Language="C#" Value="public bool IsKeyboardFocused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsKeyboardFocused" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsKeyboardFocused" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsKeyboardFocused As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsKeyboardFocused { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsKeyboardFocused</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, имеет ли данный элемент фокус ввода с клавиатуры.  Это свойство зависимостей.</summary>
        <value>
          <see langword="true" />, если на данном элементе установлен клавиатурный фокус; в противном случае — <see langword="false" />. Значение по умолчанию: <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Изменения на определенное значение этого свойства может сопровождаться события, связанные с фокусом.  
  
 <xref:System.Windows.UIElement.IsKeyboardFocused%2A> и <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> часто используются обработчиков событий класса для других событий, например чтобы определить элемент уже имеет фокус клавиатуры, или делать решения при мыши события и события клавиатуры возникают вместе.  
  
<a name="dependencyPropertyInfo_IsKeyboardFocused"></a>   
## <a name="dependency-property-information"></a>Сведения о свойстве зависимостей  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.IsKeyboardFocusedProperty>|  
|Значение свойства метаданных `true`|Нет|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GotFocus" />
        <altmember cref="E:System.Windows.UIElement.LostFocus" />
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsKeyboardFocusedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsKeyboardFocusedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsKeyboardFocusedChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при изменении значения свойства <see cref="P:System.Windows.UIElement.IsKeyboardFocused" /> данного элемента.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот член представляет [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] событий, не является маршрутизируемым.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsKeyboardFocusedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsKeyboardFocusedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsKeyboardFocusedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsKeyboardFocusedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsKeyboardFocusedProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует свойство зависимостей <see cref="P:System.Windows.UIElement.IsKeyboardFocused" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithin">
      <MemberSignature Language="C#" Value="public bool IsKeyboardFocusWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsKeyboardFocusWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsKeyboardFocusWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsKeyboardFocusWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsKeyboardFocusWithin { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsKeyboardFocusWithin</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, находится ли фокус клавиатуры где-либо в элементе или в его дочерних элементах визуального дерева.  Это свойство зависимостей.</summary>
        <value>
          <see langword="true" />, если клавиатурный фокус установлен на элементе или его дочерних элементах; в противном случае — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Изменения значения этого свойства обычно вызывают <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> событие, если производный класс не переопределяет <xref:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged%2A> отключение события.  
  
 Это свойство не задано непосредственно, но можно перевести фокус на элемент, вызвав <xref:System.Windows.UIElement.Focus%2A>, или путем создания <xref:System.Windows.UIElement.MoveFocus%2A> запроса. Одно из этих вызовов метода может изменить значение этого свойства.  
  
 <xref:System.Windows.UIElement.IsKeyboardFocused%2A> и <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> обычно используются обработчиков событий класса для других событий, например чтобы определить элемент уже имеет фокус клавиатуры, или делать решения при мыши события и события клавиатуры возникают вместе.  
  
<a name="dependencyPropertyInfo_IsKeyboardFocusWithin"></a>   
## <a name="dependency-property-information"></a>Сведения о свойстве зависимостей  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.IsKeyboardFocusWithinProperty>|  
|Значение свойства метаданных `true`|Нет|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsKeyboardFocusWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsKeyboardFocusWithinChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при изменении значения свойства <see cref="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged" /> данного элемента.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот член представляет [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] событий, не является маршрутизируемым.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.IsKeyboardFocusedChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsKeyboardFocusWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsKeyboardFocusWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsKeyboardFocusWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsKeyboardFocusWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsKeyboardFocusWithinProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует свойство зависимостей <see cref="P:System.Windows.UIElement.IsKeyboardFocusWithin" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsManipulationEnabled">
      <MemberSignature Language="C#" Value="public bool IsManipulationEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsManipulationEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsManipulationEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsManipulationEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsManipulationEnabled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает значение, которое определяет, включены ли события манипулирования для данного элемента <see cref="T:System.Windows.UIElement" />.</summary>
        <value>
          Значение <see langword="true" />, если для данного элемента <see cref="T:System.Windows.UIElement" /> включены события манипулирования; в противном случае — значение <see langword="false" />. Значение по умолчанию: <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если установлено значение true, если вы хотите <xref:System.Windows.UIElement> получать <xref:System.Windows.UIElement.ManipulationStarting>, <xref:System.Windows.UIElement.ManipulationStarted>, <xref:System.Windows.UIElement.ManipulationDelta>, <xref:System.Windows.UIElement.ManipulationInertiaStarting>, <xref:System.Windows.UIElement.ManipulationBoundaryFeedback>, и <xref:System.Windows.UIElement.ManipulationCompleted> события. Дополнительные сведения о манипуляциях см. в разделе [фокусе](~/docs/framework/wpf/advanced/input-overview.md).  Пример приложения, который реагирует на манипуляции см. в разделе [Пошаговое руководство: создание первого Touch приложения](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
   
  
## Examples  
 В следующем примере создается приложение, имеющее красный прямоугольник.  <xref:System.Windows.UIElement.IsManipulationEnabled%2A> Прямоугольника задано значение true, а приложения окно подписывается на <xref:System.Windows.UIElement.ManipulationStarting>, <xref:System.Windows.UIElement.ManipulationDelta>, и <xref:System.Windows.UIElement.ManipulationInertiaStarting> события. Данный пример является частью большего примера, в [Пошаговое руководство: создание первого Touch приложения](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
 [!code-xaml[BasicManipulation#UI](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml#ui)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsManipulationEnabledProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsManipulationEnabledProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsManipulationEnabledProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsManipulationEnabledProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsManipulationEnabledProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsManipulationEnabledProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует свойство зависимостей <see cref="P:System.Windows.UIElement.IsManipulationEnabled" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMeasureValid">
      <MemberSignature Language="C#" Value="public bool IsMeasureValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMeasureValid" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsMeasureValid" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMeasureValid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMeasureValid { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, указывающее, действителен ли текущий размер, возвращенный измерением структуры.</summary>
        <value>
          <see langword="true" />, если проход измерения структуры вернул действительное и текущее значение; в противном случае — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Можно принудительно измерение и компоновку недействительными, вызвав метод <xref:System.Windows.UIElement.InvalidateMeasure%2A> для этого элемента (или любого родительского элемента вверх по визуальному дереву). Это назначает структуру для рекомпозиции асинхронно, происходящих во время, определяемое системой макета. Кроме того, можно внести непосредственный вызов <xref:System.Windows.UIElement.UpdateLayout%2A>. Тем не менее, следует вызывать только <xref:System.Windows.UIElement.UpdateLayout%2A> Если весьма вероятно, что без дальнейшей недействительности, ожидающих выполнения (большое число излишних принудительных обновлений будет иметь влияние на производительность).  
  
 Если <xref:System.Windows.UIElement.IsMeasureValid%2A> — `false`, <xref:System.Windows.UIElement.IsArrangeValid%2A> также должен быть `false` (логикой принудительно процесса компоновки, расположение не может быть допустимым без измерения, сначала являются допустимыми).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.UpdateLayout" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptured">
      <MemberSignature Language="C#" Value="public bool IsMouseCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsMouseCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseCaptured { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseCaptured</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает значение, указывающее, была ли мышь захвачена элементом управления.  Это свойство зависимостей.</summary>
        <value>
          <see langword="true" />, если на элементе установлен захват мыши; в противном случае — <see langword="false" />. Значение по умолчанию: <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Состояние захвата мыши соотносится с операции перетаскивания и вставки в процессе.  
  
<a name="dependencyPropertyInfo_IsMouseCaptured"></a>   
## <a name="dependency-property-information"></a>Сведения о свойстве зависимостей  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.IsMouseCapturedProperty>|  
|Значение свойства метаданных `true`|Нет|  
  
   
  
## Examples  
 В следующем примере производится состояние захвата мыши или отключение основании уже захват мыши для элемента.  
  
 Если захват мыши находится в другом месте, к этому элементу задано захват мыши. Если элемент имеет захват мыши, то оно очищается путем вызова <xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=nameWithType> null входом.  
  
 [!code-csharp[MouseSnippetSample#IsMouseCaptured](~/samples/snippets/csharp/VS_Snippets_Wpf/MouseSnippetSample/CSharp/Window1.xaml.cs#ismousecaptured)]
 [!code-vb[MouseSnippetSample#IsMouseCaptured](~/samples/snippets/visualbasic/VS_Snippets_Wpf/MouseSnippetSample/visualbasic/window1.xaml.vb#ismousecaptured)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.CaptureMouse" />
        <altmember cref="E:System.Windows.UIElement.GotMouseCapture" />
        <altmember cref="E:System.Windows.UIElement.LostMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseCapturedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCapturedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseCapturedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsMouseCapturedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseCapturedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseCapturedChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при изменении значения свойства <see cref="P:System.Windows.UIElement.IsMouseCaptured" /> данного элемента.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот член представляет [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] событий, не является маршрутизируемым.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsMouseCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseCapturedProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует свойство зависимостей <see cref="P:System.Windows.UIElement.IsMouseCaptured" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithin">
      <MemberSignature Language="C#" Value="public bool IsMouseCaptureWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseCaptureWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsMouseCaptureWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseCaptureWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseCaptureWithin { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, определяющее, удерживается ли захват мыши данным элементом или дочерними элементами его визуального дерева. Это свойство зависимостей.</summary>
        <value>
          Значение <see langword="true" />, если этот элемент или содержащийся в нем элемент удерживают захват мыши; в противном случае — значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_IsMouseCaptureWithin"></a>   
## <a name="dependency-property-information"></a>Сведения о свойстве зависимостей  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.IsMouseCaptureWithinProperty>|  
|Значение свойства метаданных `true`|Нет|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsMouseCaptured" />
        <altmember cref="M:System.Windows.UIElement.CaptureMouse" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCaptureWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseCaptureWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseCaptureWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseCaptureWithinChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при изменении значения поля <see cref="F:System.Windows.UIElement.IsMouseCaptureWithinProperty" /> данного элемента.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот член представляет [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] событий, не является маршрутизируемым.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseCaptureWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseCaptureWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsMouseCaptureWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseCaptureWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseCaptureWithinProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует свойство зависимостей <see cref="P:System.Windows.UIElement.IsMouseCaptureWithin" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOver">
      <MemberSignature Language="C#" Value="public bool IsMouseDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsMouseDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseDirectlyOver { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseDirectlyOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, указывающее, соответствует ли позиция указателя мыши результатам проверки нажатия, при которой учитывается компоновка элемента.  Это свойство зависимостей.</summary>
        <value>
          <see langword="true" /> Если указатель мыши находится над тем же элементом проверки нажатия; в противном случае <see langword="false" />. Значение по умолчанию: <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В отличие от <xref:System.Windows.UIElement.IsMouseOver%2A>, это свойство доступно только `true` если указатель мыши находится над элементом литерал, как и для проверки нажатия. Если указатель мыши находится над дочерним элементом, в частности по элементам, которые являются частью глубокого шаблона элемента и его композиции, это свойство будет `false`. Если вы не знаете как составного элемента управления (например, используется это свойство в пользовательский шаблон элемента управления для элемента управления, можно определить), это свойство может возвращать непредвиденные результаты. В большинстве сценариев, где вы не создаете элементы управления, использовать <xref:System.Windows.UIElement.IsMouseOver%2A> вместо него.  
  
 Если мышь захвачена элементом, и это свойство является `true` во время записи, это свойство будет продолжать возвращать `true` пока захват мыши не будет потерян и указатель не выйдет за границы элемента.  
  
<a name="dependencyPropertyInfo_IsMouseDirectlyOver"></a>   
## <a name="dependency-property-information"></a>Сведения о свойстве зависимостей  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.IsMouseDirectlyOverProperty>|  
|Значение свойства метаданных `true`|Нет|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseEnter" />
        <altmember cref="E:System.Windows.UIElement.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOverChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseDirectlyOverChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseDirectlyOverChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsMouseDirectlyOverChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseDirectlyOverChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseDirectlyOverChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при изменении значения свойства <see cref="P:System.Windows.UIElement.IsMouseDirectlyOver" /> данного элемента.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот член представляет [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] событий, не является маршрутизируемым.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsMouseDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseDirectlyOverProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует свойство зависимостей <see cref="P:System.Windows.UIElement.IsMouseDirectlyOver" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Windows.UIElement.IsMouseDirectlyOverChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseOver">
      <MemberSignature Language="C#" Value="public bool IsMouseOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsMouseOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseOver { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, находится ли указатель мыши над данным элементом (включая дочерние элементы в визуальном дереве).  Это свойство зависимостей.</summary>
        <value>
          Значение <see langword="true" />, если указатель мыши находится на элементе или его дочерних элементах; в противном случае — значение <see langword="false" />. Значение по умолчанию: <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Как правило элементы управления составляются таким образом, что различные элементы внутри элемента управления (визуальное дерево) сообщают состояние мыши для вмещающего элемента управления. Например <xref:System.Windows.Controls.ListBox> сообщит о стиле элемента управления <xref:System.Windows.UIElement.IsMouseOver%2A> как `true` если указатель мыши в любом месте за геометрического объекта, включая все <xref:System.Windows.Controls.ListBoxItem>.  
  
 Несмотря на то, что аналогичные события «IsMouseOverChanged» не существует, выполните несколько схожих событий. Например, можно обработать <xref:System.Windows.UIElement.MouseEnter>, <xref:System.Windows.UIElement.MouseMove>, и <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged>.  
  
 При захвате мыши данным элементом, это свойство остается `true` пока захват мыши не будет потерян и указатель мыши покидает границы элемента.  
  
 Некоторые элементы управления произвольно захватывают мышь на определенные действия, которые не затрагивают мышь напрямую. Это может привести к <xref:System.Windows.UIElement.IsMouseOver%2A> , `true` несмотря на то, что мышь перемещена не очевидно.  
  
<a name="dependencyPropertyInfo_IsMouseOver"></a>   
## <a name="dependency-property-information"></a>Сведения о свойстве зависимостей  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.IsMouseOverProperty>|  
|Значение свойства метаданных `true`|Нет|  
  
   
  
## Examples  
 Следующий пример ссылается на это свойство как тип свойства объекта <xref:System.Windows.Trigger>, а \<Style.Triggers > блока. Если указатель мыши находится над элементом управления, текст элемента управления становится синим, а курсор примет форму руки.  
  
 [!code-xaml[ListViewChkBox#Trigger](~/samples/snippets/csharp/VS_Snippets_Wpf/ListViewChkBox/CS/window1.xaml#trigger)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsMouseOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseOverProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует свойство зависимостей <see cref="P:System.Windows.UIElement.IsMouseOver" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptured">
      <MemberSignature Language="C#" Value="public bool IsStylusCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsStylusCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusCaptured { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusCaptured</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, захвачено ли перо эти элементом.  Это свойство зависимостей.</summary>
        <value>
          <see langword="true" />, если элемент получил захват пера; в противном случае — <see langword="false" />. Значение по умолчанию: <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [фокусе](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="dependencyPropertyInfo_IsStylusCaptured"></a>   
## <a name="dependency-property-information"></a>Сведения о свойстве зависимостей  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.IsStylusCapturedProperty>|  
|Значение свойства метаданных `true`|Нет|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.CaptureStylus" />
        <altmember cref="E:System.Windows.UIElement.GotStylusCapture" />
        <altmember cref="E:System.Windows.UIElement.LostStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusCapturedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCapturedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusCapturedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsStylusCapturedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusCapturedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusCapturedChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при изменении значения свойства <see cref="P:System.Windows.UIElement.IsStylusCaptured" /> данного элемента.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот член представляет [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] событий, не является маршрутизируемым.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsStylusCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusCapturedProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует свойство зависимостей <see cref="P:System.Windows.UIElement.IsStylusCaptured" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithin">
      <MemberSignature Language="C#" Value="public bool IsStylusCaptureWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusCaptureWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsStylusCaptureWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusCaptureWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusCaptureWithin { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, определяющее, удерживается ли захват пера данным элементом или элементом в пределах его границ и визуального дерева. Это свойство зависимостей.</summary>
        <value>
          <see langword="true" />, если данный или содержимый элемент произвели захват пера; иначе — <see langword="false" />. Значение по умолчанию: <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [Touch поддержки входных данных в Windows Vista](http://msdn.microsoft.com/library/63f1d71f-03d8-4d83-a174-e3dc7c57bad0) и [фокусе](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="dependencyPropertyInfo_IsStylusCaptureWithin"></a>   
## <a name="dependency-property-information"></a>Сведения о свойстве зависимостей  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.IsStylusCaptureWithinProperty>|  
|Значение свойства метаданных `true`|Нет|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.CaptureStylus" />
        <altmember cref="P:System.Windows.UIElement.IsStylusCaptured" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCaptureWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusCaptureWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsStylusCaptureWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusCaptureWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusCaptureWithinChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при изменении значения свойства <see cref="P:System.Windows.UIElement.IsStylusCaptureWithin" /> данного элемента.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] события, не является маршрутизируемым.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusCaptureWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusCaptureWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsStylusCaptureWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusCaptureWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusCaptureWithinProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует свойство зависимостей <see cref="P:System.Windows.UIElement.IsStylusCaptureWithin" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Windows.UIElement.IsStylusCaptureWithinChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOver">
      <MemberSignature Language="C#" Value="public bool IsStylusDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsStylusDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusDirectlyOver { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusDirectlyOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, указывающее, соответствует ли позиция пера результатам проверки нажатия, при которой учитывается компоновка элемента.  Это свойство зависимостей.</summary>
        <value>
          Значение <see langword="true" />, если указатель пера находится над тем же элементом, что и при проверке нажатия; в противном случае —значение <see langword="false" />. Значение по умолчанию: <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В отличие от <xref:System.Windows.UIElement.IsStylusOver%2A>, это свойство доступно только `true` если перо находится над элементом. Если перо находится над дочерним элементом или над элементами, которые являются частью глубокой композиции элемента (визуальное дерево), это свойство будет `false`.  
  
 Если вы не знаете как составного элемента управления (например, используется это свойство в пользовательский шаблон элемента управления для элемента управления, можно определить), это свойство может возвращать непредвиденные результаты. В большинстве сценариев, где вы не создаете элементы управления, использовать <xref:System.Windows.UIElement.IsStylusOver%2A> вместо него.  
  
 Если этот элемент имеет захват пера, и это свойство является `true` во время записи, это свойство остается `true` пока не будет освобождено и перо не выйдет за границы элемента.  
  
 Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [фокусе](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="dependencyPropertyInfo_IsStylusDirectlyOver"></a>   
## <a name="dependency-property-information"></a>Сведения о свойстве зависимостей  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.IsStylusDirectlyOverProperty>|  
|Значение свойства метаданных `true`|Нет|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsMouseDirectlyOver" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOverChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusDirectlyOverChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusDirectlyOverChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsStylusDirectlyOverChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusDirectlyOverChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusDirectlyOverChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при изменении значения свойства <see cref="P:System.Windows.UIElement.IsStylusDirectlyOver" /> данного элемента.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот член представляет [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] событий, не является маршрутизируемым.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsStylusDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusDirectlyOverProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует свойство зависимостей <see cref="P:System.Windows.UIElement.IsStylusDirectlyOver" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusOver">
      <MemberSignature Language="C#" Value="public bool IsStylusOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsStylusOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusOver { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, указывающее, наведен ли курсор пера на этот элемент (включая визуальные дочерние элементы).  Это свойство зависимостей.</summary>
        <value>
          <see langword="true" />, если курсор пера находится на элементе или его дочерних элементах; иначе — <see langword="false" />. Значение по умолчанию: <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если этот элемент имеет захват пера, это свойство будет продолжать возвращать `true` пока не будет освобождено и указатель мыши выходит за его границы.  
  
 Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [фокусе](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="dependencyPropertyInfo_IsStylusOver"></a>   
## <a name="dependency-property-information"></a>Сведения о свойстве зависимостей  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.IsStylusOverProperty>|  
|Значение свойства метаданных `true`|Нет|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsStylusOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusOverProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует свойство зависимостей <see cref="P:System.Windows.UIElement.IsStylusOver" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVisible" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsVisible" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsVisible { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, определяющее, видим ли этот элемент в [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].  Это свойство зависимостей.</summary>
        <value>
          Значение <see langword="true" />, если элемент видим; в противном случае — значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Определение <xref:System.Windows.UIElement.IsVisible%2A> значение учитывает все факторы макета. Напротив <xref:System.Windows.UIElement.Visibility%2A>, являющееся задаваемое свойство только указывает на намерение программно сделать элемент видимым или невидимым.  
  
 Элементы где <xref:System.Windows.UIElement.IsVisible%2A> — `false` не участвуют в событиях ввода (или командах), не влияют на проход измерения или компоновки структуры, не получают фокус, не входящие в последовательность перехода и не будут включаться в проверки нажатия. В отличие от этого, элементы которой <xref:System.Windows.UIElement.IsEnabled%2A> — `false` по-прежнему будет участвовать в события и команды и попадания, хотя и не может иметь фокус.  
  
<a name="dependencyPropertyInfo_IsVisible"></a>   
## <a name="dependency-property-information"></a>Сведения о свойстве зависимостей  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.IsVisibleProperty>|  
|Значение свойства метаданных `true`|Нет|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisibleChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsVisibleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsVisibleChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsVisibleChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsVisibleChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsVisibleChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при изменении значения свойства <see cref="P:System.Windows.UIElement.IsVisible" /> данного элемента.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это событие не происходит, если элемент не визуализируется системой структуры по причинам, отличным от значения <xref:System.Windows.UIElement.IsVisible%2A> свойство. Например элемент не может иметь связан визуальный.  
  
 Этот член представляет [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] событий, не является маршрутизируемым.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisibleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsVisibleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsVisibleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsVisibleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsVisibleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsVisibleProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует свойство зависимостей <see cref="P:System.Windows.UIElement.IsVisible" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler KeyDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler KeyDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.KeyDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyDown As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ KeyDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.KeyDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возникает при нажатии клавиши, если фокус установлен на данном элементе.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обработка клавиш взаимодействует с другими функциями платформы, такие как выполнение команд и композиция текста. <xref:System.Windows.UIElement.KeyDown> Событие является событием входной текст нижнего уровня, могут работать некорректно, в некоторых элементах управления. Это так, как некоторые элементы управления имеют композиции элементов управления или обработку ввода обработку класса, который предоставляет более высокого уровня версия текста, а также связанные события.  
  
 Это событие создается псевдоним для <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType> вложенное событие для этого класса, чтобы <xref:System.Windows.UIElement.KeyDown> входит в состав класса список членов, когда <xref:System.Windows.UIElement> наследуется от базового элемента. Обработчики событий, присоединенные к <xref:System.Windows.UIElement.KeyDown> событий присоединяются к базовому объекту <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType> вложенное событие и получить тот же экземпляр данных события.  
  
<a name="routedEventInfo_KeyDown"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.KeyDownEvent>|  
|Стратегия маршрутизации|Вверх|  
|делегат|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   Соответствующее событие нисходящей маршрутизации является <xref:System.Windows.UIElement.PreviewKeyDown>.  
  
-   Переопределить <xref:System.Windows.UIElement.OnKeyDown%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.KeyUp" />
      </Docs>
    </Member>
    <Member MemberName="KeyDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent KeyDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent KeyDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.KeyDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly KeyDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ KeyDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.KeyDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.  
  
 Дополнительные сведения о регистрации маршрутизированных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Дополнительные сведения об использовании идентификаторов маршрутизируемых событий для добавления обработчиков класса см. в описании метода <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler KeyUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler KeyUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.KeyUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyUp As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ KeyUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.KeyUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при отпускании клавиши, если фокус находится на этом элементе.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это событие создается псевдоним для <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType> вложенное событие для этого класса, чтобы <xref:System.Windows.UIElement.KeyUp> входит в состав класса список членов, когда <xref:System.Windows.UIElement> наследуется от базового элемента. Обработчики событий, присоединенные к <xref:System.Windows.UIElement.KeyUp> событий присоединяются к базовому объекту <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType> вложенное событие и получить тот же экземпляр данных события.  
  
<a name="routedEventInfo_KeyUp"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.KeyUpEvent>|  
|Стратегия маршрутизации|Вверх|  
|делегат|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   Соответствующее событие нисходящей маршрутизации является <xref:System.Windows.UIElement.PreviewKeyUp>.  
  
-   Переопределить <xref:System.Windows.UIElement.OnKeyUp%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.KeyDown" />
      </Docs>
    </Member>
    <Member MemberName="KeyUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent KeyUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent KeyUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.KeyUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly KeyUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ KeyUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.KeyUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.  
  
 Дополнительные сведения о регистрации маршрутизированных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Дополнительные сведения об использовании идентификаторов маршрутизируемых событий для добавления обработчиков класса см. в описании метода <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutUpdated">
      <MemberSignature Language="C#" Value="public event EventHandler LayoutUpdated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler LayoutUpdated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LayoutUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LayoutUpdated As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ LayoutUpdated;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при изменении структуры различных визуальных элементов, связанных с текущим <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обновление структуры может произойти в результате изменения свойства, изменения размеров окна или по явному запросу пользователя.  
  
 Этот член представляет [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] событий, не является маршрутизируемым.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler LostFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler LostFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LostFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostFocus As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ LostFocus;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при потере данным элементом логического фокуса.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Логический фокус отличается от фокуса ввода, если фокус был намеренно вытеснен посредством вызова метода, но на другом уровне существует предыдущий фокус ввода. В этом сценарии, остается фокус клавиатуры, там, где это и элемент где <xref:System.Windows.UIElement.Focus%2A> вызывается метод по-прежнему возвращает логический фокус.  
  
 Точнее интерпретацию этого события является что он вызывается, когда значение <xref:System.Windows.UIElement.IsFocused%2A> изменяет свойства элемента в маршруте с `true` для `false`.  
  
 Вследствие этого события восходящей маршрутизации, элемент, который теряет фокус может быть дочерний элемент, а не элемента, которому фактически присоединен обработчик событий. Проверьте <xref:System.Windows.RoutedEventArgs.Source%2A> в данных события, чтобы определить фактический элемент, полученные фокус.  
  
<a name="routedEventInfo_LostFocus"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.LostFocusEvent>|  
|Стратегия маршрутизации|Вверх|  
|делегат|<xref:System.Windows.RoutedEventHandler>|  
  
-   Нет соответствующего туннелирования события.  
  
-   Переопределить <xref:System.Windows.UIElement.OnLostFocus%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostKeyboardFocus" />
        <altmember cref="M:System.Windows.UIElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="LostFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.LostFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostFocusEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.LostFocus" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.  
  
 Дополнительные сведения о регистрации маршрутизированных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Дополнительные сведения об использовании идентификаторов маршрутизируемых событий для добавления обработчиков класса см. в описании метода <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler LostKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler LostKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LostKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ LostKeyboardFocus;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при потере данным элементом фокуса клавиатуры.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вследствие этого события восходящей маршрутизации, элемент, который потерял фокус ввода может быть дочерний элемент, а не элемента, которому фактически присоединен обработчик событий. Проверьте <xref:System.Windows.RoutedEventArgs.Source%2A> в данных события, чтобы определить фактический элемент, который теряет фокус.  
  
 Это событие создается псевдоним для <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType> вложенное событие для этого класса, чтобы <xref:System.Windows.UIElement.LostKeyboardFocus> входит в состав класса список членов, когда <xref:System.Windows.UIElement> наследуется от базового элемента. Обработчики событий, присоединенные к <xref:System.Windows.UIElement.LostKeyboardFocus> событий присоединяются к базовому объекту <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType> вложенное событие и получить тот же экземпляр данных события.  
  
<a name="routedEventInfo_LostKeyboardFocus"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.LostKeyboardFocusEvent>|  
|Стратегия маршрутизации|Вверх|  
|делегат|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   Соответствующее событие нисходящей маршрутизации является <xref:System.Windows.UIElement.PreviewLostKeyboardFocus>.  
  
-   Переопределить <xref:System.Windows.UIElement.OnLostKeyboardFocus%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.LostKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostKeyboardFocusEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.LostKeyboardFocus" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.  
  
 Дополнительные сведения о регистрации маршрутизированных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Дополнительные сведения об использовании идентификаторов маршрутизируемых событий для добавления обработчиков класса см. в описании метода <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostMouseCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler LostMouseCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler LostMouseCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LostMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostMouseCapture As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ LostMouseCapture;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при потере элементом захвата мыши.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При захвате мыши элементом, он получает ввод от мыши, даже если указатель находится вне границ элемента. Мышь обычно захватывается только во время операции перетаскивания и вставки.  
  
 Вследствие этого события восходящей маршрутизации, элемент, который теряет захват может быть дочерний элемент, а не элемента, которому фактически присоединен обработчик событий. Проверьте <xref:System.Windows.RoutedEventArgs.Source%2A> в данных события, чтобы определить фактический элемент, который потерял отслеживания.  
  
 Это событие создается псевдоним для <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType> вложенное событие для этого класса, чтобы <xref:System.Windows.UIElement.LostMouseCapture> входит в состав класса список членов, когда <xref:System.Windows.UIElement> наследуется от базового элемента. Обработчики событий, присоединенные к <xref:System.Windows.UIElement.LostMouseCapture> событий присоединяются к базовому объекту <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType> вложенное событие и получить тот же экземпляр данных события.  
  
<a name="routedEventInfo_LostMouseCapture"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.LostMouseCaptureEvent>|  
|Стратегия маршрутизации|Вверх|  
|делегат|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   Нет определенного события, соответствующие туннелирования.  
  
-   Переопределить <xref:System.Windows.UIElement.OnLostMouseCapture%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostMouseCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostMouseCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostMouseCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.LostMouseCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostMouseCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostMouseCaptureEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.LostMouseCapture" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.  
  
 Дополнительные сведения о регистрации маршрутизированных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Дополнительные сведения об использовании идентификаторов маршрутизируемых событий для добавления обработчиков класса см. в описании метода <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostStylusCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler LostStylusCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler LostStylusCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LostStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostStylusCapture As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ LostStylusCapture;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при потере элементом захвата пера.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При захвате пера элементом, он получает ввод от пера, даже если указатель находится вне границ элемента. Перо обычно захватывается только во время операции перетаскивания и вставки.  
  
 Вследствие этого события восходящей маршрутизации, элемент, который теряет фокус может быть дочерний элемент, а не элемента, которому фактически присоединен обработчик событий. Проверьте <xref:System.Windows.RoutedEventArgs.Source%2A> в данных события, чтобы определить фактический элемент, который теряет фокус.  
  
 Это событие создается псевдоним для <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType> вложенное событие для этого класса, чтобы <xref:System.Windows.UIElement.LostStylusCapture> входит в состав класса список членов, когда <xref:System.Windows.UIElement> наследуется от базового элемента. Обработчики событий, присоединенные к <xref:System.Windows.UIElement.LostStylusCapture> событий присоединяются к базовому объекту <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType> вложенное событие и получить тот же экземпляр данных события.  
  
<a name="routedEventInfo_LostStylusCapture"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.LostStylusCaptureEvent>|  
|Стратегия маршрутизации|Вверх|  
|делегат|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Нет определенного события, соответствующие туннелирования.  
  
-   Переопределить <xref:System.Windows.UIElement.OnLostStylusCapture%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostStylusCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostStylusCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostStylusCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.LostStylusCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostStylusCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostStylusCaptureEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.LostStylusCapture" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.  
  
 Дополнительные сведения о регистрации маршрутизированных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Дополнительные сведения об использовании идентификаторов маршрутизируемых событий для добавления обработчиков класса см. в описании метода <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostTouchCapture">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; LostTouchCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; LostTouchCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LostTouchCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostTouchCapture As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ LostTouchCapture;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит, когда элемент теряет касание.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_LostTouchCapture"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.LostTouchCaptureEvent>|  
|Стратегия маршрутизации|Вверх|  
|делегат|<xref:System.EventHandler%601> имеет тип данных <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Переопределить <xref:System.Windows.UIElement.OnLostTouchCapture%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostTouchCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostTouchCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostTouchCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.LostTouchCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostTouchCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostTouchCaptureEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.LostTouchCapture" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationBoundaryFeedback">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationBoundaryFeedbackEventArgs&gt; ManipulationBoundaryFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationBoundaryFeedbackEventArgs&gt; ManipulationBoundaryFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationBoundaryFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationBoundaryFeedback As EventHandler(Of ManipulationBoundaryFeedbackEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationBoundaryFeedbackEventArgs ^&gt; ^ ManipulationBoundaryFeedback;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationBoundaryFeedbackEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит, когда манипуляция сталкивается с границей.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_ManipulationBoundaryFeedback"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.ManipulationBoundaryFeedbackEvent>|  
|Стратегия маршрутизации|Вверх|  
|делегат|<xref:System.EventHandler%601> имеет тип данных <xref:System.Windows.Input.ManipulationBoundaryFeedbackEventArgs>.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationBoundaryFeedbackEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationBoundaryFeedbackEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationBoundaryFeedbackEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationBoundaryFeedbackEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationBoundaryFeedbackEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationBoundaryFeedbackEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует событие <see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationCompletedEventArgs&gt; ManipulationCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationCompletedEventArgs&gt; ManipulationCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationCompleted As EventHandler(Of ManipulationCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationCompletedEventArgs ^&gt; ^ ManipulationCompleted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит, когда манипуляция над объектом <see cref="T:System.Windows.UIElement" /> и инерция завершены.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это событие можно использовать для получения сведений о манипуляции после ее завершения.  Например, можно использовать <xref:System.Windows.Input.ManipulationCompletedEventArgs.TotalManipulation%2A?displayProperty=nameWithType> изменить свойство для определения общей суммы позиции манипуляции.  
  
 Дополнительные сведения о манипуляциях см. в разделе [фокусе](~/docs/framework/wpf/advanced/input-overview.md).  Пример приложения, который реагирует на манипуляции см. в разделе [Пошаговое руководство: создание первого Touch приложения](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
<a name="routedEventInfo_ManipulationCompleted"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.ManipulationCompletedEvent>|  
|Стратегия маршрутизации|Вверх|  
|делегат|<xref:System.EventHandler%601> имеет тип данных <xref:System.Windows.Input.ManipulationCompletedEventArgs>.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationCompletedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationCompletedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationCompletedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationCompletedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationCompletedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationCompletedEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.ManipulationCompleted" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationDelta">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationDeltaEventArgs&gt; ManipulationDelta;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationDeltaEventArgs&gt; ManipulationDelta" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationDelta" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationDelta As EventHandler(Of ManipulationDeltaEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationDeltaEventArgs ^&gt; ^ ManipulationDelta;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationDeltaEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит, когда устройство ввода меняет положение в процессе манипуляции.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.ManipulationDelta> Событие возникает несколько раз, когда пользователь перетаскивает пальца по экрану во время обработки и при инерции.  Можно использовать <xref:System.Windows.Input.ManipulationDeltaEventArgs.IsInertial%2A> свойство, чтобы проверить, является ли событие происходит во время инерции.  
  
 На элемент с <xref:System.Windows.UIElement.ManipulationDelta> не влияет на каким-либо образом это событие возникает событие.  Необходимо предоставить логику для элемента, должны обрабатываться.  <xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A> И <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> свойства, которые относятся к типу <xref:System.Windows.Input.ManipulationDelta>, содержат данные о изменение позиции манипуляций и интерпретируются как перемещение, изменение размера или поворот объекта.  Эти сведения применяются для элемента, должны обрабатываться.  
  
 Дополнительные сведения о манипуляциях см. в разделе [фокусе](~/docs/framework/wpf/advanced/input-overview.md).  Пример приложения, который реагирует на манипуляции см. в разделе [Пошаговое руководство: создание первого Touch приложения](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
<a name="routedEventInfo_ManipulationDelta"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.ManipulationDeltaEvent>|  
|Стратегия маршрутизации|Вверх|  
|делегат|<xref:System.EventHandler%601> имеет тип данных <xref:System.Windows.Input.ManipulationDeltaEventArgs>.|  
  
   
  
## Examples  
 В примере показан обработчик событий для <xref:System.Windows.UIElement.ManipulationDelta> события. В этом примере <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> свойство для перемещения, изменения размера и поворота <xref:System.Windows.Shapes.Rectangle>.  В примере также проверяется, является ли <xref:System.Windows.UIElement.ManipulationDelta> событие произошло инерции и касается ли прямоугольник края окна.  Если эти случаи верны, приложение останавливает обработку, чтобы прямоугольник покинул видимую область приложения. Данный пример является частью большего примера, в [Пошаговое руководство: создание первого Touch приложения](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
 [!code-csharp[BasicManipulation#ManipulationDelta](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationdelta)]
 [!code-vb[BasicManipulation#ManipulationDelta](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationdelta)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationDeltaEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationDeltaEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationDeltaEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationDeltaEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationDeltaEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationDeltaEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.ManipulationDelta" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationInertiaStarting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationInertiaStartingEventArgs&gt; ManipulationInertiaStarting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationInertiaStartingEventArgs&gt; ManipulationInertiaStarting" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationInertiaStarting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationInertiaStarting As EventHandler(Of ManipulationInertiaStartingEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationInertiaStartingEventArgs ^&gt; ^ ManipulationInertiaStarting;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationInertiaStartingEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит, когда устройство ввода теряет контакт с объектом <see cref="T:System.Windows.UIElement" /> в процессе манипуляции и начинается инерция.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.ManipulationInertiaStarting> Событие происходит, когда пользователь отрывает все пальцев на экране во время обработки. Например, если пользователь «вызывает» <xref:System.Windows.UIElement> по поверхности, пользователь будет затронуто <xref:System.Windows.UIElement> чтобы начать действие, переместите пальца по экрану для короткое расстояние, а затем отпустите <xref:System.Windows.UIElement>. Когда пользователь отпускает элемент, инерции начинается и <xref:System.Windows.UIElement.ManipulationInertiaStarting> событием.  <xref:System.Windows.UIElement> Продолжает получать <xref:System.Windows.UIElement.ManipulationDelta> события, чтобы указать, что происходит в элементе инерции.  
  
 Это событие можно использовать для указания поведения инерции.  Например можно задать начальную скорость, которая используется, когда начинается инерция.  Можно также указать величину инерции, задав требуемое замедление или установив нужное размещение.  Можно задать эти значения для каждого типа манипуляции (трансляции, расширения или вращения) независимо друг от друга.  Дополнительные сведения см. в разделе <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs>.  
  
 Дополнительные сведения о манипуляциях см. в разделе [фокусе](~/docs/framework/wpf/advanced/input-overview.md).  Пример приложения, который реагирует на манипуляции см. в разделе [Пошаговое руководство: создание первого Touch приложения](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
<a name="routedEventInfo_ManipulationInertiaStarting"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.ManipulationInertiaStartingEvent>|  
|Стратегия маршрутизации|Вверх|  
|делегат|<xref:System.EventHandler%601> имеет тип данных <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs>.|  
  
   
  
## Examples  
 В следующем примере показан <xref:System.Windows.UIElement.ManipulationInertiaStarting> обработчик событий и задает требуемое замедление для преобразования, расширения и поворота, который используется во время инерции. Данный пример является частью большего примера, в [Пошаговое руководство: создание первого Touch приложения](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
 [!code-csharp[BasicManipulation#ManipulationInertiaStarting](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationinertiastarting)]
 [!code-vb[BasicManipulation#ManipulationInertiaStarting](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationinertiastarting)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationInertiaStartingEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationInertiaStartingEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationInertiaStartingEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationInertiaStartingEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationInertiaStartingEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationInertiaStartingEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.ManipulationInertiaStarting" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationStarted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationStartedEventArgs&gt; ManipulationStarted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationStartedEventArgs&gt; ManipulationStarted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationStarted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationStarted As EventHandler(Of ManipulationStartedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationStartedEventArgs ^&gt; ^ ManipulationStarted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationStartedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит, когда устройство ввода начинает совершать манипуляцию над объектом <see cref="T:System.Windows.UIElement" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.ManipulationStarted> Событие возникает после <xref:System.Windows.UIElement.ManipulationStarting> событий.  Действия с <xref:System.Windows.Input.ManipulationStartedEventArgs>:  
  
-   Получить элемент, позиция манипуляции относительно, используя <xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationContainer%2A> свойство.  
  
-   Получить начало координат манипуляции с помощью <xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationOrigin%2A> свойство.  
  
-   Отменить обработку путем вызова <xref:System.Windows.Input.ManipulationStartedEventArgs.Complete%2A> метод.  
  
 Дополнительные сведения о манипуляциях см. в разделе [фокусе](~/docs/framework/wpf/advanced/input-overview.md).  Пример приложения, который реагирует на манипуляции см. в разделе [Пошаговое руководство: создание первого Touch приложения](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
<a name="routedEventInfo_ManipulationStarted"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.ManipulationStartedEvent>|  
|Стратегия маршрутизации|Вверх|  
|делегат|<xref:System.EventHandler%601> имеет тип данных <xref:System.Windows.Input.ManipulationStartedEventArgs>.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationStartedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationStartedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationStartedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationStartedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationStartedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationStartedEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.ManipulationStarted" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationStarting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationStartingEventArgs&gt; ManipulationStarting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationStartingEventArgs&gt; ManipulationStarting" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationStarting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationStarting As EventHandler(Of ManipulationStartingEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationStartingEventArgs ^&gt; ^ ManipulationStarting;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationStartingEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при первоначальном создании процессора манипулирования.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.ManipulationStarting> Событие происходит на элемент, имеющий <xref:System.Windows.UIElement.IsManipulationEnabled%2A> свойство `true` когда пользователь помещает палец на нем. По умолчанию события манипуляции последующих отчетов позиции манипуляции относительно элемента, который имеет <xref:System.Windows.UIElement.IsManipulationEnabled%2A> значение `true`.  Можно указать, что значение должно быть относительно другого элемента, задав <xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A> свойство. Например можно сделать обработки относительно родительского элемента.  
  
 Можно также выполнять следующие в обработчик событий для <xref:System.Windows.UIElement.ManipulationStarting>:  
  
-   Укажите, должна ли пользователь более чем одним пальцем для манипуляций, задав <xref:System.Windows.Input.ManipulationStartingEventArgs.IsSingleTouchEnabled%2A?displayProperty=nameWithType> свойство.  
  
-   Укажите, какие типы обработки включены, задав <xref:System.Windows.Input.ManipulationStartingEventArgs.Mode%2A?displayProperty=nameWithType> свойства <xref:System.Windows.Input.ManipulationModes> перечисления.  
  
-   Укажите центр вращения касания одним пальцем, задав <xref:System.Windows.Input.ManipulationStartingEventArgs.Pivot%2A?displayProperty=nameWithType> свойство.  
  
-   Отменить обработку путем вызова <xref:System.Windows.Input.ManipulationStartingEventArgs.Cancel%2A?displayProperty=nameWithType> метод.  
  
 Дополнительные сведения о манипуляциях см. в разделе [фокусе](~/docs/framework/wpf/advanced/input-overview.md).  Пример приложения, который реагирует на манипуляции см. в разделе [Пошаговое руководство: создание первого Touch приложения](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
<a name="routedEventInfo_ManipulationStarting"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.ManipulationStartingEvent>|  
|Стратегия маршрутизации|Вверх|  
|делегат|<xref:System.EventHandler%601> имеет тип данных <xref:System.Windows.Input.ManipulationStartingEventArgs>.|  
  
   
  
## Examples  
 В примере показан обработчик событий для <xref:System.Windows.UIElement.ManipulationStarting> событий и наборы <xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A> к родительскому элементу, который получает события обработки, чтобы манипуляции координаты указываются относительно родительского элемента.  Данный пример является частью большего примера, в [Пошаговое руководство: создание первого Touch приложения](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
 [!code-csharp[BasicManipulation#ManipulationStarting](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationstarting)]
 [!code-vb[BasicManipulation#ManipulationStarting](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationstarting)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationStartingEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationStartingEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationStartingEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationStartingEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationStartingEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationStartingEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.ManipulationStarting" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Measure">
      <MemberSignature Language="C#" Value="public void Measure (System.Windows.Size availableSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Measure(valuetype System.Windows.Size availableSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.Measure(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Measure (availableSize As Size)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Measure(System::Windows::Size availableSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="availableSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="availableSize">Доступное пространство, которое родительский элемент может выделить дочернему элементу. Дочерний элемент может запросить больше пространства, чем доступно; указанный размер может быть размещен, если для текущего элемента в модели содержимого возможна прокрутка.</param>
        <summary>Обновляет свойство <see cref="P:System.Windows.UIElement.DesiredSize" /> объекта <see cref="T:System.Windows.UIElement" />. Родительские элементы вызывают данный метод из своих реализаций метода <see cref="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)" />, формируя рекурсивное обновление структуры. Вызов этого метода составляет первый проход (проход "Мера") обновления макета.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Расположение макета в вычислении [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] состоит из <xref:System.Windows.UIElement.Measure%2A> вызова и <xref:System.Windows.UIElement.Arrange%2A> вызова. Во время <xref:System.Windows.UIElement.Measure%2A> вызов элемент определяет требования к резервному размер с помощью `availableSize` ввода. Во время <xref:System.Windows.UIElement.Arrange%2A> завершения вызова, размер элемента.  
  
 `availableSize` может быть любое целое число от нуля до бесконечности. Элементы, которые участвуют в макете должен вернуть минимальное значение <xref:System.Windows.Size> им требуется для данной `availableSize`.  
  
 При создании макета она всегда получает <xref:System.Windows.UIElement.Measure%2A> вызывать перед <xref:System.Windows.UIElement.Arrange%2A>. Однако после первого прохода разметки, он может появиться <xref:System.Windows.UIElement.Arrange%2A> вызывается без <xref:System.Windows.UIElement.Measure%2A>; это может произойти, если свойство, которое влияет только на <xref:System.Windows.UIElement.Arrange%2A> изменяется (например, выравнивание), или при получении родительского <xref:System.Windows.UIElement.Arrange%2A> без <xref:System.Windows.UIElement.Measure%2A>. Объект <xref:System.Windows.UIElement.Measure%2A> автоматически сделает вызов <xref:System.Windows.UIElement.Arrange%2A> вызова.  
  
 Обновления макета выполняется асинхронно, таким образом, чтобы главный поток не ожидает каждого из возможных изменений структуры. Запрос элемента посредством проверки значений свойств кода может не сразу отражать изменения свойств, которые взаимодействуют с характеристиками размера или структуры ( <xref:System.Windows.FrameworkElement.Width%2A> свойства, например).  
  
> [!NOTE]
>  Обновления макета можно выполнить принудительно с помощью <xref:System.Windows.UIElement.UpdateLayout%2A> метод. Тем не менее вызов этого метода обычно нет необходимости и может привести к снижению производительности.  
  
 Система макета отслеживает двух отдельных очередей недопустимый макетов, один для <xref:System.Windows.UIElement.Measure%2A> и один для <xref:System.Windows.UIElement.Arrange%2A>. Очередь структур сортируется порядок элементов в визуальном дереве структурирования элементов; в верхней части очереди, во избежание избыточного структурирования повторяющихся изменений в родительских элементов, элементы, расположенные выше в дереве. Дублирующиеся записи автоматически удаляются из очереди, а элементы автоматически удаляются из очереди, если они уже проверены макета.  
  
 При обновлении макета, <xref:System.Windows.UIElement.Measure%2A> освобождения очереди во-первых, за которым следует <xref:System.Windows.UIElement.Arrange%2A> очереди. Элемент в <xref:System.Windows.UIElement.Arrange%2A> никогда не будут расположены очереди, если элемент в <xref:System.Windows.UIElement.Measure%2A> очереди.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MeasureCore">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Size MeasureCore (System.Windows.Size availableSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Windows.Size MeasureCore(valuetype System.Windows.Size availableSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function MeasureCore (availableSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Size MeasureCore(System::Windows::Size availableSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="availableSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="availableSize">Доступный размер, который может быть выделен родительским элементом для дочернего.</param>
        <summary>При переопределении в производном классе предоставляет логику измерений для правильного определения размеров данного элемента, с учетом размера каждого из содержащихся в нем дочерних элементов.</summary>
        <returns>Желательный размер этого элемента в макете.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Чаще всего для получения элемента из <xref:System.Windows.FrameworkElement> вместо <xref:System.Windows.UIElement>. При наследовании от <xref:System.Windows.FrameworkElement>, обратите внимание, что переопределение <xref:System.Windows.UIElement.MeasureCore%2A> на <xref:System.Windows.FrameworkElement> печати <xref:System.Windows.UIElement.MeasureCore%2A> метод. Таким образом, можно переопределять только <xref:System.Windows.UIElement.MeasureCore%2A> позволяет изменить характеристики структуры измерения, если можно создать производный от <xref:System.Windows.UIElement> через наследование, который не поддерживает <xref:System.Windows.FrameworkElement>. Это может случиться, если вы пытаетесь использовать собственную реализацию [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] уровня ядра. В противном случае, если вы создаете производные типы от <xref:System.Windows.FrameworkElement>, шаблон реализации мер поведение является <xref:System.Windows.FrameworkElement> реализация.<xref:System.Windows.FrameworkElement.MeasureOverride%2A>.  
  
 Родительский элемент, содержащий дочерние элементы должны вызывать <xref:System.Windows.UIElement.Measure%2A> на каждый дочерний элемент, в противном случае эти дочерние элементы не размера или упорядочены и эффективно исчезнет из макета.  
  
   
  
## Examples  
 Типичные переопределение <xref:System.Windows.UIElement.MeasureCore%2A> приблизительное шаблону (не вызывается встроенный набор `VisualChildren`; `VisualChildren` — заполнитель, представляющий ту коллекцию дочерних поддерживает данный элемент).  
  
 [!code-csharp[CorePseudocode#UIElementMeasureOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#uielementmeasureoverride)]
 [!code-vb[CorePseudocode#UIElementMeasureOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#uielementmeasureoverride)]  
  
-   Необходимо вызвать метод <xref:System.Windows.UIElement.Measure%2A> для каждого дочернего элемента.  
  
-   Как правило, реализация должна кэшировать сведения измерения между <xref:System.Windows.UIElement.MeasureCore%2A> и <xref:System.Windows.UIElement.ArrangeCore%2A> вызовы методов в том же элементе.  
  
-   Вызов базовой реализации <xref:System.Windows.UIElement.MeasureCore%2A> не является обязательным, но может быть целесообразным, если базовая реализация предоставляет возможность нужную структуру.  
  
-   Вызовы <xref:System.Windows.UIElement.Measure%2A> на дочерние элементы следует передавать того же `availableSize` как родительский, или подмножества области, в зависимости от типа разметки родительского элемента поддерживает. Например будет допустимо удалить область границы конкретного элемента или заполнение, полоса прокрутки или пользовательского элемента управления.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Реализации должен иметь возможность обрабатывать значение, указанное для <paramref name="availableSize" /> , бесконечна. Бесконечное значение означает отсутствие запрошенных ограничений и фактически откладывает Выбор измерений родительского элемента, посредством рекурсивных вызовов метода Measure.  
  
 Реализации могут учитывать значение, указанное для <paramref name="availableSize" /> быть мягкое ограничение. Дочерний элемент может указать больший размер, даже если другие аспекты кода приложения были может определить текущий фактический размер родительского элемента. Запрос большого размера — это соглашение, указывающее, что дочерний элемент запрашивает, поддерживает ли родительский элемент прокрутку содержимого в пределах области отображения содержимого.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="MouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ MouseDown;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при нажатии любой кнопки мыши в тот момент, когда указатель мыши находится над данным элементом.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это событие создается псевдоним для <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> вложенное событие для этого класса, чтобы <xref:System.Windows.UIElement.MouseDown> входит в состав класса список членов, когда <xref:System.Windows.UIElement> наследуется от базового элемента. Обработчики событий, присоединенные к <xref:System.Windows.UIElement.MouseDown> событий присоединяются к базовому объекту <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> вложенное событие и получить тот же экземпляр данных события.  
  
 <xref:System.Windows.UIElement.MouseDown> Событие часто возникает вместе с либо <xref:System.Windows.UIElement.MouseLeftButtonDown> или <xref:System.Windows.UIElement.MouseRightButtonDown>, которые соответствуют нажмите одну из двух кнопок мыши стандартные. <xref:System.Windows.UIElement.MouseLeftButtonDown> и <xref:System.Windows.UIElement.MouseRightButtonDown> также перенаправленные события, но они являются прямой перенаправленные события, и возникает соответствующее событие кнопками при <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> событий достигает этого элемента на маршруте события. См. заметки для <xref:System.Windows.UIElement.MouseLeftButtonDown> или <xref:System.Windows.UIElement.MouseRightButtonDown>.  
  
> [!IMPORTANT]
>  Некоторые элементы управления могут иметь внутреннюю обработку классов для событий кнопок мыши. Событие нажатия кнопки мыши является наиболее вероятным событием с обработкой классов в элементе управления. Обработчик часто класса помечает базовый <xref:System.Windows.Input.Mouse> класс событие как обработанное. Когда событие помечено как обработанное, другие обработчики экземпляра, присоединенные к данному элементу, не инициируются. Любые другие обработчики класса или экземпляра, присоединенные к элементам в восходящем направлении к корню дерева пользовательского интерфейса, также обычно не инициируются.  
  
 Можно устранить проблему, описанную в Важном и по-прежнему получать <xref:System.Windows.UIElement.MouseDown> событий для кнопки мыши в производном классе с обработкой класса с помощью любого из следующих решений:  
  
-   Присоединение обработчиков для <xref:System.Windows.UIElement.PreviewMouseDown> события, который не помечен как обработанное в элементах управления. Обратите внимание, что это события предварительного просмотра, маршрут начинается с корневого элемента следует к элементу управления.  
  
-   Зарегистрируйте обработчик в элементе управления с помощью процедур, вызвав <xref:System.Windows.UIElement.AddHandler%2A> и выбрав параметр подписи, который позволяет обработчикам прослушивать события, даже если они помечены как обработанное в данные о событии.  
  
<a name="routedEventInfo_MouseDown"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.MouseDownEvent>|  
|Стратегия маршрутизации|Вверх|  
|делегат|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Соответствующее событие нисходящей маршрутизации является <xref:System.Windows.UIElement.PreviewMouseDown>.  
  
-   Переопределить <xref:System.Windows.UIElement.OnMouseDown%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.MouseDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.  
  
 Дополнительные сведения о регистрации маршрутизированных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Дополнительные сведения об использовании идентификаторов маршрутизируемых событий для добавления обработчиков класса см. в описании метода <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseEnter As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseEnter;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseEnter</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит, когда указатель мыши попадает внутрь границ данного элемента.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.MouseEnter> Представляет объект, который использует прямой обработки стратегия маршрутизации события. Прямые перенаправленные события не вызываются по маршруту; Вместо этого они обрабатываются в том же элементе где они возникли. Тем не менее они включают другие аспекты поведения маршрутизируемых событий, например триггеры событий в стилях.  
  
 Несмотря на то что <xref:System.Windows.UIElement.MouseEnter> отслеживает момент, когда указатель мыши попадает внутрь границ элемента, это событие больше о том, что буквально <xref:System.Windows.UIElement.IsMouseOver%2A> значение свойства было изменено с `false` для `true` для этого элемента.  
  
 Это событие создается псевдоним для <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType> вложенное событие для этого класса, чтобы <xref:System.Windows.UIElement.MouseEnter> входит в состав класса список членов, когда <xref:System.Windows.UIElement> наследуется от базового элемента. Обработчики событий, присоединенные к <xref:System.Windows.UIElement.MouseEnter> событий присоединяются к базовому объекту <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType> вложенное событие и получить тот же экземпляр данных события.  
  
 Объект <xref:System.Windows.Controls.Button> (или любой <xref:System.Windows.Controls.Primitives.ButtonBase> производный класс) имеет собственную обработку для <xref:System.Windows.UIElement.KeyDown> событие, когда кнопка имеет фокус, нажатую клавишу ПРОБЕЛ. Вызывает обработчики <xref:System.Windows.Controls.Primitives.ButtonBase.Click> событий с помощью кнопки, как источник, а также захватывает мышь, даже если для перемещения указателя мыши отображается. В результате захвата мыши <xref:System.Windows.UIElement.MouseEnter> событие также создается с помощью кнопки в качестве источника. В общем, если элемент управления захватил мышь, затем <xref:System.Windows.UIElement.MouseEnter> происходит событие, а также <xref:System.Windows.UIElement.GotMouseCapture> и возможно другие события элемента управления.  
  
<a name="routedEventInfo_MouseEnter"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.MouseEnterEvent>|  
|Стратегия маршрутизации|Direct|  
|делегат|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   Переопределить <xref:System.Windows.UIElement.OnMouseEnter%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseEnterEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.MouseEnter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.  
  
 Дополнительные сведения о регистрации маршрутизированных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Дополнительные сведения об использовании идентификаторов маршрутизируемых событий для добавления обработчиков класса см. в описании метода <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeave As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseLeave;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeave</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит, когда указатель мыши покидает границы данного элемента.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.MouseLeave> Представляет объект, который использует прямой обработки стратегия маршрутизации события. Прямые перенаправленные события не вызываются по маршруту; Вместо этого они обрабатываются в том же элементе где они возникли. Тем не менее они включают другие аспекты поведения маршрутизируемых событий, например триггеры событий в стилях.  
  
 Несмотря на то что <xref:System.Windows.UIElement.MouseLeave> отслеживает момент, когда указатель мыши покидает элемент, это событие больше о том, что буквально <xref:System.Windows.UIElement.IsMouseOver%2A> значение свойства было изменено с `true` для `false` для этого элемента.  
  
 Это событие создается псевдоним для <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType> вложенное событие для этого класса, чтобы <xref:System.Windows.UIElement.MouseLeave> входит в состав класса список членов, когда <xref:System.Windows.UIElement> наследуется от базового элемента. Обработчики событий, присоединенные к <xref:System.Windows.UIElement.MouseLeave> событий присоединяются к базовому объекту <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType> вложенное событие и получить тот же экземпляр данных события.  
  
<a name="routedEventInfo_MouseLeave"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.MouseLeaveEvent>|  
|Стратегия маршрутизации|Direct|  
|делегат|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   Переопределить <xref:System.Windows.UIElement.OnMouseLeave%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeaveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.MouseLeave" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.  
  
 Дополнительные сведения о регистрации маршрутизированных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Дополнительные сведения об использовании идентификаторов маршрутизируемых событий для добавления обработчиков класса см. в описании метода <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseLeftButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseLeftButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeftButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseLeftButtonDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeftButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при нажатии левой кнопки мыши в тот момент, когда указатель мыши находится над данным элементом.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Несмотря на то, что это кажется маршруту через дерево элементов, фактически является прямой перенаправленного события, которое возникает и восходящему на дереве элементов каждым <xref:System.Windows.UIElement>.  
  
 Это событие является одним из нескольких связанных событий, сообщающих кнопки мыши базовая <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> события, который является вложенным событием, которое обрабатывается каждым элементом на маршруте событий.  
  
 Данные события данного события предоставляет данные события базового <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> событий. Если это событие помечено как обработанное на маршруте события, по-прежнему возникают определенные события кнопки мыши; Тем не менее, необходимо добавить обработчики событий кнопки мыши путем явного вызова <xref:System.Windows.UIElement.AddHandler%2A>, с помощью параметра для обработки событий, которые уже помечено как обработанное, чтобы быть прослушивателей события. Если пометить <xref:System.Windows.UIElement.MouseLeftButtonDown> обрабатывается, вы, по существу помечаете <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> обрабатываются для всех последующих прослушивателей на маршруте и на всех связанных событий. Это возможно содержит созданный класс обработчика события такие как <xref:System.Windows.Controls.Control.MouseDoubleClick>.  
  
 С концептуальной точки зрения это событие (и другие события кнопки мыши <xref:System.Windows.UIElement>) быть мыши «служба» (с помощью определения службы, предоставляемые <xref:System.Windows.Input.Mouse> класса). Событие добавляет удобство нет необходимости проверять состояние кнопок мыши (слева направо, вверх вниз) исходного события мыши в данных события. Для более сложных сценариев, таких как проверка состояния стандартным кнопок может потребоваться использовать [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] на <xref:System.Windows.Input.Mouse> класса вместо тех, на <xref:System.Windows.UIElement>.  
  
> [!IMPORTANT]
>  Некоторые классы элементов управления могут иметь внутреннюю обработку классов для событий кнопок мыши. Событие нажатия кнопки мыши является наиболее вероятным событием с обработкой классов в элементе управления. Обработчик часто класса помечает базовый <xref:System.Windows.Input.Mouse> класс событие как обработанное. Когда событие помечено как обработанное, другие обработчики экземпляра, присоединенные к данному элементу, не инициируются. Любые другие обработчики класса или экземпляра, присоединенные к элементам в восходящем направлении к корню дерева пользовательского интерфейса, также обычно не инициируются.  
  
 Можно устранить проблему, описанную в Важном и по-прежнему получать <xref:System.Windows.UIElement.MouseLeftButtonDown> событий для кнопки мыши в производном классе с обработкой класса с помощью любого из следующих решений:  
  
-   Присоединение обработчиков для <xref:System.Windows.UIElement.PreviewMouseDown> события, который не помечен как обработанное в элементах управления. Обратите внимание, что это события предварительного просмотра, маршрут начинается с корневого элемента следует к элементу управления.  
  
-   Зарегистрируйте обработчик в элементе управления с помощью процедур, вызвав <xref:System.Windows.UIElement.AddHandler%2A> и выбрав параметр подписи, который позволяет обработчикам прослушивать события, даже если они помечены как обработанное в данные о событии.  
  
<a name="routedEventInfo_MouseLeftButtonDown"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.MouseLeftButtonDownEvent>|  
|Стратегия маршрутизации|Direct|  
|делегат|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Переопределить <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeftButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeftButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseLeftButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeftButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeftButtonDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.  
  
 Дополнительные сведения о регистрации маршрутизированных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Дополнительные сведения об использовании идентификаторов маршрутизируемых событий для добавления обработчиков класса см. в описании метода <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseLeftButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseLeftButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeftButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseLeftButtonUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeftButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при отпускании левой кнопки мыши в тот момент, когда указатель мыши находится над данным элементом.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Несмотря на то, что это кажется маршруту через дерево элементов, фактически является прямой перенаправленного события, которое возникает и восходящему на дереве элементов каждым <xref:System.Windows.UIElement>.  
  
 Это событие является одним из нескольких связанных событий, сообщающих кнопки мыши базовая <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> события, который является вложенным событием, которое обрабатывается каждым элементом на маршруте событий.  
  
 Данные события данного события предоставляет данные события базового <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> событий. Если это событие помечено как обработанное на маршруте события, по-прежнему возникают определенные события кнопки мыши; Тем не менее, необходимо добавить обработчики событий кнопки мыши путем явного вызова <xref:System.Windows.UIElement.AddHandler%2A>, с помощью параметра для обработки событий, которые уже помечено как обработанное, чтобы быть прослушивателей события. Если пометить <xref:System.Windows.UIElement.MouseLeftButtonUp> обрабатывается, вы, по существу помечаете <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> обрабатываются для всех последующих прослушивателей на маршруте и на всех связанных событий.  
  
 С концептуальной точки зрения это событие (и другие события кнопки мыши <xref:System.Windows.UIElement>) быть мыши «служба» (с помощью определения службы, предоставляемые <xref:System.Windows.Input.Mouse> класса). Событие добавляет удобство нет необходимости проверять состояние кнопок мыши (слева направо, вверх вниз) исходного события мыши в данных события. Для более сложных сценариев, таких как проверка состояния стандартным кнопок может потребоваться использовать [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] на <xref:System.Windows.Input.Mouse> класса вместо тех, на <xref:System.Windows.UIElement>.  
  
<a name="routedEventInfo_MouseLeftButtonUp"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.MouseLeftButtonUpEvent>|  
|Стратегия маршрутизации|Direct|  
|делегат|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Переопределить <xref:System.Windows.UIElement.OnMouseLeftButtonUp%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeftButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeftButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseLeftButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeftButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeftButtonUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.  
  
 Дополнительные сведения о регистрации маршрутизированных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Дополнительные сведения об использовании идентификаторов маршрутизируемых событий для добавления обработчиков класса см. в описании метода <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseMove As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseMove;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при перемещении указателя мыши над данным элементом.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это событие создается псевдоним для <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType> вложенное событие для этого класса, чтобы <xref:System.Windows.UIElement.MouseMove> входит в состав класса список членов, когда <xref:System.Windows.UIElement> наследуется от базового элемента. Обработчики событий, присоединенные к <xref:System.Windows.UIElement.MouseMove> событий присоединяются к базовому объекту <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType> вложенное событие и получить тот же экземпляр данных события.  
  
<a name="routedEventInfo_MouseMove"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.MouseMoveEvent>|  
|Стратегия маршрутизации|Вверх|  
|делегат|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   Соответствующее событие нисходящей маршрутизации является <xref:System.Windows.UIElement.PreviewMouseMove>.  
  
-   Переопределить <xref:System.Windows.UIElement.OnMouseMove%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseEnter" />
        <altmember cref="E:System.Windows.UIElement.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="MouseMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseMoveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.MouseMove" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.  
  
 Дополнительные сведения о регистрации маршрутизированных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Дополнительные сведения об использовании идентификаторов маршрутизируемых событий для добавления обработчиков класса см. в описании метода <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseRightButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseRightButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseRightButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseRightButtonDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseRightButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при нажатии правой кнопки мыши в тот момент, когда указатель мыши находится над данным элементом.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Несмотря на то, что это кажется маршруту через дерево элементов, фактически является прямой перенаправленного события, которое возникает и восходящему на дереве элементов каждым <xref:System.Windows.UIElement>.  
  
 Это событие является одним из нескольких связанных событий, сообщающих кнопки мыши базовая <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> события, который является вложенным событием, которое обрабатывается каждым элементом на маршруте событий.  
  
 Данные события данного события предоставляет данные события базового <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> событий. Если это событие помечено как обработанное на маршруте события, по-прежнему возникают определенные события кнопки мыши; Тем не менее, необходимо добавить обработчики событий кнопки мыши путем явного вызова <xref:System.Windows.UIElement.AddHandler%2A>, с помощью параметра для обработки событий, которые уже помечено как обработанное, чтобы быть прослушивателей события. Если пометить <xref:System.Windows.UIElement.MouseRightButtonDown> обрабатывается, вы, по существу помечаете <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> обрабатываются для всех последующих прослушивателей на маршруте и на всех связанных событий. Это возможно содержит созданный класс обработчика события такие как <xref:System.Windows.Controls.Control.MouseDoubleClick>.  
  
 С концептуальной точки зрения это событие (и другие события кнопки мыши <xref:System.Windows.UIElement>) быть мыши «служба» (с помощью определения службы, предоставляемые <xref:System.Windows.Input.Mouse> класса). Событие добавляет удобство нет необходимости проверять состояние кнопок мыши (слева направо, вверх вниз) исходного события мыши в данных события. Для более сложных сценариев, таких как проверка состояния стандартным кнопок может потребоваться использовать [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] на <xref:System.Windows.Input.Mouse> класса вместо тех, на <xref:System.Windows.UIElement>.  
  
 Часто сценарии приложений имеют обработчики для событий правой кнопки мыши. Например правой кнопкой мыши вниз может отображаться контекстное меню. В разделе [Обзор ContextMenu](~/docs/framework/wpf/controls/contextmenu-overview.md).  
  
<a name="routedEventInfo_MouseRightButtonDown"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.MouseRightButtonDownEvent>|  
|Стратегия маршрутизации|Direct|  
|делегат|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Переопределить <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseRightButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseRightButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseRightButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseRightButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseRightButtonDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.MouseRightButtonDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.  
  
 Дополнительные сведения о регистрации маршрутизированных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Дополнительные сведения об использовании идентификаторов маршрутизируемых событий для добавления обработчиков класса см. в описании метода <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseRightButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseRightButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseRightButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseRightButtonUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseRightButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при отпускании правой кнопки мыши в тот момент, когда указатель мыши находится над данным элементом.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Несмотря на то, что это кажется маршруту через дерево элементов, фактически является прямой перенаправленного события, которое возникает и восходящему на дереве элементов каждым <xref:System.Windows.UIElement>.  
  
 Это событие является одним из нескольких связанных событий, сообщающих кнопки мыши базовая <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> события, который является вложенным событием, которое обрабатывается каждым элементом на маршруте событий.  
  
 Данные события данного события предоставляет данные события базового <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> событий. Если это событие помечено как обработанное на маршруте события, по-прежнему возникают определенные события кнопки мыши; Тем не менее, необходимо добавить обработчики событий кнопки мыши путем явного вызова <xref:System.Windows.UIElement.AddHandler%2A>, с помощью параметра для обработки событий, которые уже помечено как обработанное, чтобы быть прослушивателей события. Если пометить <xref:System.Windows.UIElement.MouseRightButtonUp> обрабатывается, вы, по существу помечаете <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> обрабатываются для всех последующих прослушивателей на маршруте и на всех связанных событий.  
  
 С концептуальной точки зрения это событие (и другие события кнопки мыши <xref:System.Windows.UIElement>) быть мыши «служба» (с помощью определения службы, предоставляемые <xref:System.Windows.Input.Mouse> класса). Событие добавляет удобство нет необходимости проверять состояние кнопок мыши (слева направо, вверх вниз) исходного события мыши в данных события. Для более сложных сценариев, таких как проверка состояния стандартным кнопок может потребоваться использовать [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] на <xref:System.Windows.Input.Mouse> класса вместо тех, на <xref:System.Windows.UIElement>.  
  
<a name="routedEventInfo_MouseRightButtonUp"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.MouseRightButtonUpEvent>|  
|Стратегия маршрутизации|Direct|  
|делегат|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Переопределить <xref:System.Windows.UIElement.OnMouseRightButtonUp%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseRightButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseRightButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseRightButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseRightButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseRightButtonUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.MouseRightButtonUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.  
  
 Дополнительные сведения о регистрации маршрутизированных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Дополнительные сведения об использовании идентификаторов маршрутизируемых событий для добавления обработчиков класса см. в описании метода <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ MouseUp;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при отпускании любой кнопки мыши в тот момент, когда указатель мыши находится над данным элементом.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это событие создается псевдоним для <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> вложенное событие для этого класса, чтобы <xref:System.Windows.UIElement.MouseUp> входит в состав класса список членов, когда <xref:System.Windows.UIElement> наследуется от базового элемента. Обработчики событий, присоединенные к <xref:System.Windows.UIElement.MouseUp> событий присоединяются к базовому объекту <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> вложенное событие и получить тот же экземпляр данных события.  
  
 <xref:System.Windows.UIElement.MouseUp> Событие часто возникает вместе с либо <xref:System.Windows.UIElement.MouseLeftButtonUp> или <xref:System.Windows.UIElement.MouseRightButtonUp>, которые соответствуют выпуск одну из двух кнопок стандартных действий мыши. <xref:System.Windows.UIElement.MouseLeftButtonUp> и <xref:System.Windows.UIElement.MouseRightButtonUp> также перенаправленные события, но они являются прямой перенаправленные события, и возникает соответствующее событие кнопками при <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> событий достигает этого элемента на маршруте события. См. заметки для <xref:System.Windows.UIElement.MouseLeftButtonUp> или <xref:System.Windows.UIElement.MouseRightButtonUp>.  
  
<a name="routedEventInfo_MouseUp"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.MouseUpEvent>|  
|Стратегия маршрутизации|Вверх|  
|делегат|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Соответствующее событие нисходящей маршрутизации является <xref:System.Windows.UIElement.PreviewMouseUp>.  
  
-   Переопределить <xref:System.Windows.UIElement.OnMouseUp%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.MouseUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.  
  
 Дополнительные сведения о регистрации маршрутизированных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Дополнительные сведения об использовании идентификаторов маршрутизируемых событий для добавления обработчиков класса см. в описании метода <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseWheel">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseWheelEventHandler MouseWheel;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseWheelEventHandler MouseWheel" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseWheel" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseWheel As MouseWheelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseWheelEventHandler ^ MouseWheel;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseWheel</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseWheelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при вращении колесика мыши в тот момент, когда указатель мыши находится над данным элементом.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Фокус или захват мыши имеют приоритет над которого указатель мыши; Таким образом при получении <xref:System.Windows.UIElement.MouseWheel> события из элемента или получившего указатель мыши может фактически находиться над другим элементом.  
  
 Это событие создается псевдоним для <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType> вложенное событие для этого класса, чтобы <xref:System.Windows.UIElement.MouseWheel> входит в состав класса список членов, когда <xref:System.Windows.UIElement> наследуется от базового элемента. Обработчики событий, присоединенные к <xref:System.Windows.UIElement.MouseWheel> событий присоединяются к базовому объекту <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType> вложенное событие и получить тот же экземпляр данных события.  
  
<a name="routedEventInfo_MouseWheel"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.MouseWheelEvent>|  
|Стратегия маршрутизации|Вверх|  
|делегат|<xref:System.Windows.Input.MouseWheelEventHandler>|  
  
-   Соответствующее событие нисходящей маршрутизации является <xref:System.Windows.UIElement.PreviewMouseWheel>.  
  
-   Переопределить <xref:System.Windows.UIElement.OnMouseWheel%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseWheelEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseWheelEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseWheelEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseWheelEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseWheelEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseWheelEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.MouseWheel" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.  
  
 Дополнительные сведения о регистрации маршрутизированных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Дополнительные сведения об использовании идентификаторов маршрутизируемых событий для добавления обработчиков класса см. в описании метода <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveFocus">
      <MemberSignature Language="C#" Value="public virtual bool MoveFocus (System.Windows.Input.TraversalRequest request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveFocus(class System.Windows.Input.TraversalRequest request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MoveFocus (request As TraversalRequest) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveFocus(System::Windows::Input::TraversalRequest ^ request);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Windows.Input.TraversalRequest" />
      </Parameters>
      <Docs>
        <param name="request">Запрос перемещения, содержащий свойство, которое определяет способ перемещения в соответствующем порядке по вкладкам, или направление для визуального перемещения.</param>
        <summary>Предпринимает попытки переместить фокус с данного элемента на иной. Направления для перемещения фокуса задается указанием направления, которое обрабатывается внутри видимого родительского элемента данного элемента.</summary>
        <returns>
          <see langword="true" />, если запрос на перемещение выполнен; иначе, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Убедитесь, что проверяйте возвращаемое значение этого метода. Возвращаемое значение `false` может быть возвращено, если затребована остановки вкладку и запрос обхода не запрашивали программы-оболочки.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="OnAccessKey">
      <MemberSignature Language="C#" Value="protected virtual void OnAccessKey (System.Windows.Input.AccessKeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAccessKey(class System.Windows.Input.AccessKeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAccessKey (e As AccessKeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAccessKey(System::Windows::Input::AccessKeyEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.AccessKeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Данные события для события клавиши доступа. Данные события сообщают о вызываемой клавише и указывают, передал ли объект <see cref="T:System.Windows.Input.AccessKeyManager" />, управляющий передачей данных событий, вызов данной клавиши доступа на другие элементы.</param>
        <summary>Предоставляет обработку класса при вызове клавиши доступа, имеющей значение для данного элемента.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Нет фактического события AccessKey в <xref:System.Windows.UIElement> класса или в другом месте, которого можно инициировать или присоединения обработчиков. Вместо этого событие инициируется посредством выделенного класса диспетчера, <xref:System.Windows.Input.AccessKeyManager>, после которого обрабатывает все входные данные для поиска клавиш доступа, применимых ко всей модели ввода.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Реализация по умолчанию этого метода в <see cref="T:System.Windows.UIElement" /> наборов фокус в данный элемент (путем вызова <see cref="M:System.Windows.UIElement.Focus" />). Реализации должны сохранять это поведение, если они могут получить фокус, так как это ожидаемое поведение для сценариев специальных возможностей. Обратите внимание, что базовая реализация не выполняет никаких действий с переданными данными события вызывает не дальнейшие события; она просто устанавливает фокус.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnChildDesiredSizeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnChildDesiredSizeChanged (System.Windows.UIElement child);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnChildDesiredSizeChanged(class System.Windows.UIElement child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnChildDesiredSizeChanged (child As UIElement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnChildDesiredSizeChanged(System::Windows::UIElement ^ child);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Windows.UIElement" />
      </Parameters>
      <Docs>
        <param name="child">Дочерний элемент, размер которого изменяется.</param>
        <summary>Поддерживает поведение структуры при изменении размеров дочернего элемента.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод обычно не вызывается кодом приложения. Он предоставляется этот производный элемент, которую классы могут выполнять дальнейшие проверки для состояния возможно недействительного макета. Классы могут также пытаться выполнять оптимизацию, чтобы минимизировать время обработки прохода структуры на основе изменений размера дочерних элементов. Пример производного класса элемента, который реализует <xref:System.Windows.UIElement.OnChildDesiredSizeChanged%2A> — <xref:System.Windows.Controls.Grid> элемента управления.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see cref="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)" /> Метод имеет реализацию по умолчанию вызова <see cref="M:System.Windows.UIElement.InvalidateMeasure" /> с самим собой. Типичная реализация будет: выполнить все оптимизации собственного элемента поддерживает, а затем обычно вызвать базовый <see cref="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)" /> по крайней мере один из ветвей кода (то, которое указано «грязных» состояние каждого мерой логике кэширования).  
  
 Этот метод вызывается только в обработке структуры, если сам дочернего элемента, создавшего изменения размера. В противном случае, если родительский элемент инициирует <see cref="M:System.Windows.UIElement.Measure(System.Windows.Size)" /> передается, в соответствии с правилами системы структуры, родительский пересчет макет уже. Система макета обрабатывает структуру в порядке дочернего для родительского, не возвращается для изменения размера родительского элемента из вызовов структуры дочернего элемента не требуется.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnCreateAutomationPeer">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnCreateAutomationPeer" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnCreateAutomationPeer () As AutomationPeer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Automation::Peers::AutomationPeer ^ OnCreateAutomationPeer();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Peers.AutomationPeer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает определяющиеся классом <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> реализации для [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] инфраструктуры.</summary>
        <returns>Реализация <see cref="T:System.Windows.Automation.Peers.AutomationPeer" />, зависящая от конкретного типа.</returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>Обычно является реализация этого метода для вызова конкретного конструктора <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> реализации и возвращает его в качестве возвращаемого значения.  
  
 Все <see cref="T:System.Windows.UIElement" /> производные классы должны реализовать этот метод, чтобы обеспечить собственные определенного <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> реализации [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] инфраструктуры. Дополнительные сведения о реализации данного шаблона см. в разделе <see cref="T:System.Windows.Automation.Peers.AutomationPeer" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnDragEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnDragEnter (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragEnter(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnDragEnter(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDragEnter (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDragEnter(System::Windows::DragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект класса <see cref="T:System.Windows.DragEventArgs" />, содержащий данные о событии.</param>
        <summary>Вызывается, когда необработанное вложенное событие <see cref="E:System.Windows.DragDrop.DragEnter" /> встречает на своем маршруте элемент, производный от этого класса. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации.  
  
 Этот метод аналогичен [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] шаблона On * методы: этот метод предоставляет средства для обработки соответствующего события из производных классов с помощью обработчика класса вместо обработчика экземпляра. В этом случае соответствующее событие является маршрутизируемым. Шаблон реализации методов On * отличается для перенаправленных событий, поскольку перенаправленное событие может генерироваться дочерним элементом, который не обязательно является элемент, который будет вызывать обработчики. Таким образом реализации необходимо изучить исходные свойства данных события. Чтобы повторно инициировать событие в большинстве случаев не рекомендуется.  
  
 Путем переопределения этого метода или путем регистрации класса обработчиков с <xref:System.Windows.EventManager.RegisterClassHandler%2A>, классы, унаследованные от <xref:System.Windows.UIElement> может вызывать методы обработчика закрытый класс, при получении события на маршруте события. Один сценарий, где обработка класса является управление данными события и пометить перенаправленное событие как обработанное.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnDragLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnDragLeave (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragLeave(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnDragLeave(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDragLeave (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDragLeave(System::Windows::DragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект класса <see cref="T:System.Windows.DragEventArgs" />, содержащий данные о событии.</param>
        <summary>Вызывается, когда необработанное вложенное событие <see cref="E:System.Windows.DragDrop.DragLeave" /> встречает на своем маршруте элемент, производный от этого класса. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации.  
  
 Этот метод аналогичен [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] шаблона On * методы: этот метод предоставляет средства для обработки соответствующего события из производных классов с помощью обработчика класса вместо обработчика экземпляра. В этом случае соответствующее событие является маршрутизируемым. Шаблон реализации методов On * отличается для перенаправленных событий, поскольку перенаправленное событие может генерироваться дочерним элементом, который не обязательно является элемент, который будет вызывать обработчики. Таким образом реализации необходимо изучить исходные свойства данных события. Чтобы повторно инициировать событие в большинстве случаев не рекомендуется.  
  
 Путем переопределения этого метода или путем регистрации класса обработчиков с <xref:System.Windows.EventManager.RegisterClassHandler%2A>, классы, унаследованные от <xref:System.Windows.UIElement> может вызывать методы обработчика закрытый класс, при получении события на маршруте события. Один сценарий, где обработка класса является управление данными события и пометить перенаправленное событие как обработанное.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnDragOver">
      <MemberSignature Language="C#" Value="protected virtual void OnDragOver (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragOver(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnDragOver(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDragOver (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDragOver(System::Windows::DragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект класса <see cref="T:System.Windows.DragEventArgs" />, содержащий данные о событии.</param>
        <summary>Вызывается, когда необработанное вложенное событие <see cref="E:System.Windows.DragDrop.DragOver" /> встречает на своем маршруте элемент, производный от этого класса. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации.  
  
 Этот метод аналогичен [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] шаблона On * методы: этот метод предоставляет средства для обработки соответствующего события из производных классов с помощью обработчика класса вместо обработчика экземпляра. В этом случае соответствующее событие является маршрутизируемым. Шаблон реализации методов On * отличается для перенаправленных событий, поскольку перенаправленное событие может генерироваться дочерним элементом, который не обязательно является элемент, который будет вызывать обработчики. Таким образом реализации необходимо изучить исходные свойства данных события. Чтобы повторно инициировать событие в большинстве случаев не рекомендуется.  
  
 Путем переопределения этого метода или путем регистрации класса обработчиков с <xref:System.Windows.EventManager.RegisterClassHandler%2A>, классы, унаследованные от <xref:System.Windows.UIElement> может вызывать методы обработчика закрытый класс, при получении события на маршруте события. Один сценарий, где обработка класса является управление данными события и пометить перенаправленное событие как обработанное.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragOver" />
      </Docs>
    </Member>
    <Member MemberName="OnDrop">
      <MemberSignature Language="C#" Value="protected virtual void OnDrop (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDrop(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnDrop(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDrop (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDrop(System::Windows::DragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект класса <see cref="T:System.Windows.DragEventArgs" />, содержащий данные о событии.</param>
        <summary>Вызывается, когда необработанное вложенное событие <see cref="E:System.Windows.DragDrop.DragEnter" /> встречает на своем маршруте элемент, производный от этого класса. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации.  
  
 Этот метод аналогичен [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] шаблона On * методы: этот метод предоставляет средства для обработки соответствующего события из производных классов с помощью обработчика класса вместо обработчика экземпляра. В этом случае соответствующее событие является маршрутизируемым. Шаблон реализации методов On * отличается для перенаправленных событий, поскольку перенаправленное событие может генерироваться дочерним элементом, который не обязательно является элемент, который будет вызывать обработчики. Таким образом реализации необходимо изучить исходные свойства данных события. Чтобы повторно инициировать событие в большинстве случаев не рекомендуется.  
  
 Путем переопределения этого метода или путем регистрации класса обработчиков с <xref:System.Windows.EventManager.RegisterClassHandler%2A>, классы, унаследованные от <xref:System.Windows.UIElement> может вызывать методы обработчика закрытый класс, при получении события на маршруте события. Один сценарий, где обработка класса является управление данными события и пометить перенаправленное событие как обработанное.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.Drop" />
      </Docs>
    </Member>
    <Member MemberName="OnGiveFeedback">
      <MemberSignature Language="C#" Value="protected virtual void OnGiveFeedback (System.Windows.GiveFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGiveFeedback(class System.Windows.GiveFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGiveFeedback (e As GiveFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGiveFeedback(System::Windows::GiveFeedbackEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.GiveFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект класса <see cref="T:System.Windows.GiveFeedbackEventArgs" />, содержащий данные о событии.</param>
        <summary>Вызывается, когда необработанное вложенное событие <see cref="E:System.Windows.DragDrop.GiveFeedback" /> встречает на своем маршруте элемент, производный от этого класса. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации.  
  
 Этот метод аналогичен [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] шаблона On * методы: этот метод предоставляет средства для обработки соответствующего события из производных классов с помощью обработчика класса вместо обработчика экземпляра. В этом случае соответствующее событие является маршрутизируемым. Шаблон реализации методов On * отличается для перенаправленных событий, поскольку перенаправленное событие может генерироваться дочерним элементом, который не обязательно является элемент, который будет вызывать обработчики. Таким образом реализации необходимо изучить исходные свойства данных события. Чтобы повторно инициировать событие в большинстве случаев не рекомендуется.  
  
 Путем переопределения этого метода или путем регистрации класса обработчиков с <xref:System.Windows.EventManager.RegisterClassHandler%2A>, классы, унаследованные от <xref:System.Windows.UIElement> может вызывать методы обработчика закрытый класс, при получении события на маршруте события. Один сценарий, где обработка класса является управление данными события и пометить перенаправленное событие как обработанное.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="OnGotFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnGotFocus (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotFocus(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGotFocus(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotFocus (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotFocus(System::Windows::RoutedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект <see cref="T:System.Windows.RoutedEventArgs" />, содержащий данные события. Данные о событии должны содержать идентификатор для события <see cref="E:System.Windows.UIElement.GotFocus" />.</param>
        <summary>Вызывает перенаправленное событие <see cref="E:System.Windows.UIElement.GotFocus" /> с помощью предоставленных данных события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод, хотя виртуальным, имеет реализацию по умолчанию, который инициирует событие.  
  
 Это на * реализации метода предназначен для вызова события, и эта же реализация вызывается внутренне для инициирования события при <xref:System.Windows.UIElement.IsFocused%2A> изменении значения свойства. <xref:System.Windows.UIElement.OnGotFocus%2A> Реализация отличается от некоторых других [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] на * реализации, которые только предоставляют удобный способ добавить обработчик класса для этого события.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>При отсутствии тщательного следует инициирует события фокуса, убедитесь, что ваша реализация вызывает базовую реализацию. В противном случае <see cref="E:System.Windows.UIElement.GotFocus" /> событие не происходит при выполнении операций типичные действия пользователя, которые обычно устанавливают фокус в данный элемент. Если элемент должен иметь фокус не требуется, вы может помешать элемент может иметь фокус, задав <see cref="P:System.Windows.UIElement.Focusable" /> для <see langword="false" />.</para>
        </block>
        <altmember cref="P:System.Windows.UIElement.Focusable" />
        <altmember cref="E:System.Windows.UIElement.GotFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnGotKeyboardFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект класса <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" />, содержащий данные о событии.</param>
        <summary>Вызывается, когда необработанное вложенное событие <see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /> встречает на своем маршруте элемент, производный от этого класса. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации.  
  
 Этот метод аналогичен [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] шаблона On * методы: этот метод предоставляет средства для обработки соответствующего события из производных классов с помощью обработчика класса вместо обработчика экземпляра. В этом случае соответствующее событие является маршрутизируемым. Шаблон реализации методов On * отличается для перенаправленных событий, поскольку перенаправленное событие может генерироваться дочерним элементом, который не обязательно является элемент, который будет вызывать обработчики. Таким образом реализации необходимо изучить исходные свойства данных события. Чтобы повторно инициировать событие в большинстве случаев не рекомендуется.  
  
 Путем переопределения этого метода или путем регистрации класса обработчиков с <xref:System.Windows.EventManager.RegisterClassHandler%2A>, классы, унаследованные от <xref:System.Windows.UIElement> может вызывать методы обработчика закрытый класс, при получении события на маршруте события. Один сценарий, где обработка класса является управление данными события и пометить перенаправленное событие как обработанное.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnGotMouseCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnGotMouseCapture (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotMouseCapture(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotMouseCapture (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotMouseCapture(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект класса <see cref="T:System.Windows.Input.MouseEventArgs" />, содержащий данные о событии.</param>
        <summary>Вызывается, когда необработанное вложенное событие <see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /> встречает на своем маршруте элемент, производный от этого класса. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации.  
  
 Этот метод аналогичен [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] шаблона On * методы: этот метод предоставляет средства для обработки соответствующего события из производных классов с помощью обработчика класса вместо обработчика экземпляра. В этом случае соответствующее событие является маршрутизируемым. Шаблон реализации методов On * отличается для перенаправленных событий, поскольку перенаправленное событие может генерироваться дочерним элементом, который не обязательно является элемент, который будет вызывать обработчики. Таким образом реализации необходимо изучить исходные свойства данных события. Чтобы повторно инициировать событие в большинстве случаев не рекомендуется.  
  
 Путем переопределения этого метода или путем регистрации класса обработчиков с <xref:System.Windows.EventManager.RegisterClassHandler%2A>, классы, унаследованные от <xref:System.Windows.UIElement> может вызывать методы обработчика закрытый класс, при получении события на маршруте события. Один сценарий, где обработка класса является управление данными события и пометить перенаправленное событие как обработанное.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GotMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnGotStylusCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnGotStylusCapture (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotStylusCapture(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotStylusCapture (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotStylusCapture(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект класса <see cref="T:System.Windows.Input.StylusEventArgs" />, содержащий данные о событии.</param>
        <summary>Вызывается, когда необработанное вложенное событие <see cref="E:System.Windows.Input.Stylus.GotStylusCapture" /> встречает на своем маршруте элемент, производный от этого класса. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации.  
  
 Этот метод аналогичен [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] шаблона On * методы: этот метод предоставляет средства для обработки соответствующего события из производных классов с помощью обработчика класса вместо обработчика экземпляра. В этом случае соответствующее событие является маршрутизируемым. Шаблон реализации методов On * отличается для перенаправленных событий, поскольку перенаправленное событие может генерироваться дочерним элементом, который не обязательно является элемент, который будет вызывать обработчики. Таким образом реализации необходимо изучить исходные свойства данных события. Чтобы повторно инициировать событие в большинстве случаев не рекомендуется.  
  
 Путем переопределения этого метода или путем регистрации класса обработчиков с <xref:System.Windows.EventManager.RegisterClassHandler%2A>, классы, унаследованные от <xref:System.Windows.UIElement> может вызывать методы обработчика закрытый класс, при получении события на маршруте события. Один сценарий, где обработка класса является управление данными события и пометить перенаправленное событие как обработанное.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GotStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnGotTouchCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnGotTouchCapture (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotTouchCapture(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotTouchCapture (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotTouchCapture(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект <see cref="T:System.Windows.Input.TouchEventArgs" />, содержащий данные события.</param>
        <summary>Предоставляет обработку класса для перенаправленного события <see cref="E:System.Windows.UIElement.GotTouchCapture" />, которое происходит при захвате сенсорного ввода данным элементом.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.OnGotTouchCapture%2A> У метода нет реализации по умолчанию. Переопределить <xref:System.Windows.UIElement.OnGotTouchCapture%2A> в производном классе позволяет обработать <xref:System.Windows.UIElement.GotTouchCapture> событий. Необходимо вызвать метод базового класса <xref:System.Windows.UIElement.OnGotTouchCapture%2A> метод, базовые классы получили событие.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsKeyboardFocusedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsKeyboardFocusedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsKeyboardFocusedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsKeyboardFocusedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsKeyboardFocusedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект класса <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />, содержащий данные о событии.</param>
        <summary>Вызывается, когда в данном элементе инициируется необработанное событие <see cref="E:System.Windows.UIElement.IsKeyboardFocusedChanged" />. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот виртуальный метод вызывается при значение <xref:System.Windows.UIElement.IsKeyboardFocused%2A> изменения свойств зависимостей. Виртуальный метод вызывается первым и может использовать данные события, при необходимости. Затем <xref:System.Windows.UIElement.IsKeyboardFocusedChanged> события с этого же экземпляра данных события. Обратите внимание, что <xref:System.Windows.UIElement.IsKeyboardFocusedChanged> событие не является маршрутизируемым. Поэтому его нельзя пометить как обработанное в обработчике класса.  
  
 У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации. Вызов базовой реализации можно до или после специальной обработки, в зависимости от требований.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsKeyboardFocusWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsKeyboardFocusWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsKeyboardFocusWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsKeyboardFocusWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsKeyboardFocusWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />, содержащий данные события.</param>
        <summary>Вызывается непосредственно перед генерацией данным элементом события <see cref="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged" />. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот виртуальный метод вызывается при значение <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> изменения свойств зависимостей. Виртуальный метод вызывается первым и может использовать данные события, при необходимости. Затем <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> события с этого же экземпляра данных события. Обратите внимание, что <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> событие не является маршрутизируемым. Поэтому его нельзя пометить как обработанное в обработчике класса.  
  
 У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации. Вызов базовой реализации можно до или после специальной обработки, в зависимости от требований.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseCapturedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseCapturedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseCapturedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseCapturedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект класса <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />, содержащий данные о событии.</param>
        <summary>Вызывается, когда в данном элементе инициируется необработанное событие <see cref="E:System.Windows.UIElement.IsMouseCapturedChanged" />. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот виртуальный метод вызывается при значение <xref:System.Windows.UIElement.IsMouseCaptured%2A> свойств зависимостей изменяется значение. Виртуальный метод вызывается первым и может использовать данные события, при необходимости. Затем <xref:System.Windows.UIElement.IsMouseCapturedChanged> события с этого же экземпляра данных события. Обратите внимание, что <xref:System.Windows.UIElement.IsMouseCapturedChanged> событие не является маршрутизируемым; Поэтому его нельзя пометить как обработанное в обработчике класса.  
  
 У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации. Вызов базовой реализации можно до или после специальной обработки, в зависимости от требований.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseCaptureWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseCaptureWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseCaptureWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseCaptureWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />, содержащий данные события.</param>
        <summary>Вызывается, когда в данном элементе инициируется необработанное событие <see cref="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" />. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>Этот виртуальный метод вызывается при значение <see cref="P:System.Windows.UIElement.IsMouseCaptureWithin" /> свойств зависимостей изменяется значение. Виртуальный метод вызывается первым и может использовать данные события, при необходимости. Затем <see cref="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" /> события с этого же экземпляра данных события. Обратите внимание, что событие не является маршрутизируемым; Поэтому его нельзя пометить как обработанное в обработчике класса.  
  
 У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации. Вызов базовой реализации можно до или после специальной обработки, в зависимости от требований.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseDirectlyOverChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseDirectlyOverChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseDirectlyOverChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseDirectlyOverChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект класса <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />, содержащий данные о событии.</param>
        <summary>Вызывается, когда в данном элементе инициируется необработанное событие <see cref="E:System.Windows.UIElement.IsMouseDirectlyOverChanged" />. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот виртуальный метод вызывается при значение <xref:System.Windows.UIElement.IsMouseDirectlyOver%2A> свойств зависимостей изменяется значение. Виртуальный метод вызывается первым и может использовать данные события, при необходимости. Затем <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged> события с этого же экземпляра данных события. Обратите внимание, что <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged> событие не является маршрутизируемым. Поэтому его нельзя пометить как обработанное в обработчике класса.  
  
 У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации. Вызов базовой реализации можно до или после специальной обработки, в зависимости от требований.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusCapturedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusCapturedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusCapturedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusCapturedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />, содержащий данные события.</param>
        <summary>Вызывается, когда в данном элементе инициируется необработанное событие <see cref="E:System.Windows.UIElement.IsStylusCapturedChanged" />. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот виртуальный метод вызывается при значение <xref:System.Windows.UIElement.IsStylusCaptured%2A> свойств зависимостей изменяется значение. Виртуальный метод вызывается первым и может использовать данные события, при необходимости. Затем <xref:System.Windows.UIElement.IsStylusCapturedChanged> события с этого же экземпляра данных события. Обратите внимание, что событие не является маршрутизируемым. Поэтому его нельзя пометить как обработанное в обработчике класса.  
  
 У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации. Вызов базовой реализации можно до или после специальной обработки, в зависимости от требований.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusCaptureWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusCaptureWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusCaptureWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusCaptureWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект класса <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />, содержащий данные о событии.</param>
        <summary>Вызывается, когда в данном элементе инициируется необработанное событие <see cref="E:System.Windows.UIElement.IsStylusCaptureWithinChanged" />. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот виртуальный метод вызывается при значение <xref:System.Windows.UIElement.IsStylusCaptureWithin%2A> свойств зависимостей изменяется значение. Виртуальный метод вызывается первым и может использовать данные события, при необходимости. Затем <xref:System.Windows.UIElement.IsStylusCaptureWithinChanged> события с этого же экземпляра данных события. Обратите внимание, что событие не является маршрутизируемым. Поэтому его нельзя пометить как обработанное в обработчике класса.  
  
 У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации. Вызов базовой реализации можно до или после специальной обработки, в зависимости от требований.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusDirectlyOverChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusDirectlyOverChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusDirectlyOverChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusDirectlyOverChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект класса <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />, содержащий данные о событии.</param>
        <summary>Вызывается, когда в данном элементе инициируется необработанное событие <see cref="E:System.Windows.UIElement.IsStylusDirectlyOverChanged" />. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот виртуальный метод вызывается при значение <xref:System.Windows.UIElement.IsStylusDirectlyOver%2A> свойств зависимостей изменяется значение. Виртуальный метод вызывается первым и может использовать данные события, при необходимости. Затем <xref:System.Windows.UIElement.IsStylusDirectlyOverChanged> события с этого же экземпляра данных события. Обратите внимание, что событие не является маршрутизируемым. Поэтому его нельзя пометить как обработанное в обработчике класса.  
  
 У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации. Вызов базовой реализации можно до или после специальной обработки, в зависимости от требований.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnKeyDown">
      <MemberSignature Language="C#" Value="protected virtual void OnKeyDown (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnKeyDown(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnKeyDown(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект класса <see cref="T:System.Windows.Input.KeyEventArgs" />, содержащий данные о событии.</param>
        <summary>Вызывается, когда необработанное вложенное событие <see cref="E:System.Windows.Input.Keyboard.KeyDown" /> встречает на своем маршруте элемент, производный от этого класса. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Нажатия клавиш обрабатываются выделенным диспетчером ввода. Другие программные функции, зависящие от нажатия клавиш, например, ввод и привязка команд, могут обрабатывать нажатие клавиши, прежде чем оно будет представлено как обычное нажатие клавиши. Если эти входные функции системы пометить событие как обработанное, затем <xref:System.Windows.UIElement.OnKeyDown%2A> не вызывается.  
  
 У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации.  
  
 Этот метод аналогичен [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] шаблона On * методы: этот метод предоставляет средства для обработки соответствующего события из производных классов с помощью обработчика класса вместо обработчика экземпляра. В этом случае соответствующее событие является маршрутизируемым. Шаблон реализации методов On * отличается для перенаправленных событий, поскольку перенаправленное событие может генерироваться дочерним элементом, который не обязательно является элемент, который будет вызывать обработчики. Таким образом реализации необходимо изучить исходные свойства данных события. Чтобы повторно инициировать событие в большинстве случаев не рекомендуется.  
  
 Путем переопределения этого метода или путем регистрации класса обработчиков с <xref:System.Windows.EventManager.RegisterClassHandler%2A>, классы, унаследованные от <xref:System.Windows.UIElement> может вызывать методы обработчика закрытый класс, при получении события на маршруте события. Один сценарий, где обработка класса является управление данными события и пометить перенаправленное событие как обработанное.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.KeyDown" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyUp">
      <MemberSignature Language="C#" Value="protected virtual void OnKeyUp (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnKeyUp(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnKeyUp(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект класса <see cref="T:System.Windows.Input.KeyEventArgs" />, содержащий данные о событии.</param>
        <summary>Вызывается, когда необработанное вложенное событие <see cref="E:System.Windows.Input.Keyboard.KeyUp" /> встречает на своем маршруте элемент, производный от этого класса. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Нажатия клавиш обрабатываются выделенным диспетчером ввода. Другие программные функции, зависящие от нажатия клавиш, например, ввод и привязка команд, могут обрабатывать нажатие клавиши, прежде чем оно будет представлено как обычное нажатие клавиши. Если эти входные функции системы пометить событие как обработанное, затем <xref:System.Windows.UIElement.OnKeyUp%2A> не вызывается.  
  
 У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации.  
  
 Этот метод аналогичен [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] шаблона On * методы: этот метод предоставляет средства для обработки соответствующего события из производных классов с помощью обработчика класса вместо обработчика экземпляра. В этом случае соответствующее событие является маршрутизируемым. Шаблон реализации методов On * отличается для перенаправленных событий, поскольку перенаправленное событие может генерироваться дочерним элементом, который не обязательно является элемент, который будет вызывать обработчики. Таким образом реализации необходимо изучить исходные свойства данных события. Чтобы повторно инициировать событие в большинстве случаев не рекомендуется.  
  
 Путем переопределения этого метода или путем регистрации класса обработчиков с <xref:System.Windows.EventManager.RegisterClassHandler%2A>, классы, унаследованные от <xref:System.Windows.UIElement> может вызывать методы обработчика закрытый класс, при получении события на маршруте события. Один сценарий, где обработка класса является управление данными события и пометить перенаправленное событие как обработанное.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.KeyUp" />
      </Docs>
    </Member>
    <Member MemberName="OnLostFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnLostFocus (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostFocus(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnLostFocus(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostFocus (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostFocus(System::Windows::RoutedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект <see cref="T:System.Windows.RoutedEventArgs" />, содержащий данные события. Данные о событии должны содержать идентификатор для события <see cref="E:System.Windows.UIElement.LostFocus" />.</param>
        <summary>Вызывает перенаправленное событие <see cref="E:System.Windows.UIElement.LostFocus" /> с помощью предоставленных данных о событии.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод, хотя виртуальным, имеет реализацию по умолчанию, который инициирует событие.  
  
 Это на * реализации метода предназначен для вызова события, и эта же реализация вызывается внутренне для инициирования события при <xref:System.Windows.UIElement.IsFocused%2A> изменении значения свойства. Эта реализация отличается от некоторых других [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] на * реализации, которые только предоставляют удобный способ добавить обработчик класса для этого события.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>При отсутствии тщательного следует инициирует события фокуса, убедитесь, что ваша реализация вызывает базовую реализацию. В противном случае <see cref="E:System.Windows.UIElement.LostFocus" /> событие не происходит при выполнении операций типичные действия пользователя, которые обычно устанавливают фокус в данный элемент. Если элемент должен иметь фокус не требуется, вы может помешать элемент может иметь фокус, задав <see cref="P:System.Windows.UIElement.Focusable" /> для <see langword="false" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnLostKeyboardFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" />, который содержит данные события.</param>
        <summary>Вызывается, когда необработанное вложенное событие <see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /> встречает на своем маршруте элемент, производный от этого класса. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации.  
  
 Этот метод аналогичен [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] шаблона On * методы: этот метод предоставляет средства для обработки соответствующего события из производных классов с помощью обработчика класса вместо обработчика экземпляра. В этом случае соответствующее событие является маршрутизируемым. Шаблон реализации методов On * отличается для перенаправленных событий, поскольку перенаправленное событие может генерироваться дочерним элементом, который не обязательно является элемент, который будет вызывать обработчики. Таким образом реализации необходимо изучить исходные свойства данных события. Чтобы повторно инициировать событие в большинстве случаев не рекомендуется.  
  
 Путем переопределения этого метода или путем регистрации класса обработчиков с <xref:System.Windows.EventManager.RegisterClassHandler%2A>, классы, унаследованные от <xref:System.Windows.UIElement> может вызывать методы обработчика закрытый класс, при получении события на маршруте события. Один сценарий, где обработка класса является управление данными события и пометить перенаправленное событие как обработанное.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnLostMouseCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnLostMouseCapture (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostMouseCapture(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostMouseCapture (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostMouseCapture(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект <see cref="T:System.Windows.Input.MouseEventArgs" />, который содержит данные события.</param>
        <summary>Вызывается, когда необработанное вложенное событие <see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /> встречает на своем маршруте элемент, производный от этого класса. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации.  
  
 Этот метод аналогичен [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] шаблона On * методы: этот метод предоставляет средства для обработки соответствующего события из производных классов с помощью обработчика класса вместо обработчика экземпляра. В этом случае соответствующее событие является маршрутизируемым. Шаблон реализации методов On * отличается для перенаправленных событий, поскольку перенаправленное событие может генерироваться дочерним элементом, который не обязательно является элемент, который будет вызывать обработчики. Таким образом реализации необходимо изучить исходные свойства данных события. Чтобы повторно инициировать событие в большинстве случаев не рекомендуется.  
  
 Путем переопределения этого метода или путем регистрации класса обработчиков с <xref:System.Windows.EventManager.RegisterClassHandler%2A>, классы, унаследованные от <xref:System.Windows.UIElement> может вызывать методы обработчика закрытый класс, при получении события на маршруте события. Один сценарий, где обработка класса является управление данными события и пометить перенаправленное событие как обработанное.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnLostStylusCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnLostStylusCapture (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostStylusCapture(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostStylusCapture (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostStylusCapture(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект <see cref="T:System.Windows.Input.StylusEventArgs" />, который содержит данные события.</param>
        <summary>Вызывается, когда необработанное вложенное событие <see cref="E:System.Windows.Input.Stylus.LostStylusCapture" /> встречает на своем маршруте элемент, производный от этого класса. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации.  
  
 Этот метод аналогичен [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] шаблона On * методы: этот метод предоставляет средства для обработки соответствующего события из производных классов с помощью обработчика класса вместо обработчика экземпляра. В этом случае соответствующее событие является маршрутизируемым. Шаблон реализации методов On * отличается для перенаправленных событий, поскольку перенаправленное событие может генерироваться дочерним элементом, который не обязательно является элемент, который будет вызывать обработчики. Таким образом реализации необходимо изучить исходные свойства данных события. Чтобы повторно инициировать событие в большинстве случаев не рекомендуется.  
  
 Путем переопределения этого метода или путем регистрации класса обработчиков с <xref:System.Windows.EventManager.RegisterClassHandler%2A>, классы, унаследованные от <xref:System.Windows.UIElement> может вызывать методы обработчика закрытый класс, при получении события на маршруте события. Один сценарий, где обработка класса является управление данными события и пометить перенаправленное событие как обработанное.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnLostTouchCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnLostTouchCapture (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostTouchCapture(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostTouchCapture (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostTouchCapture(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект <see cref="T:System.Windows.Input.TouchEventArgs" />, содержащий данные события.</param>
        <summary>Предоставляет обработку класса для перенаправленного события <see cref="E:System.Windows.UIElement.LostTouchCapture" />, которое происходит при потере захвата сенсорного ввода данным элементом.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.OnLostTouchCapture%2A> У метода нет реализации по умолчанию. Переопределить <xref:System.Windows.UIElement.OnLostTouchCapture%2A> в производном классе позволяет обработать <xref:System.Windows.UIElement.LostTouchCapture> событий. Необходимо вызвать метод базового класса <xref:System.Windows.UIElement.OnLostTouchCapture%2A> метод, базовые классы получили событие.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationBoundaryFeedback">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationBoundaryFeedback (System.Windows.Input.ManipulationBoundaryFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationBoundaryFeedback(class System.Windows.Input.ManipulationBoundaryFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationBoundaryFeedback (e As ManipulationBoundaryFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationBoundaryFeedback(System::Windows::Input::ManipulationBoundaryFeedbackEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationBoundaryFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Данные для события.</param>
        <summary>Вызывается, когда происходит событие <see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A> У метода нет реализации по умолчанию. Переопределить <xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A> в производном классе позволяет обработать <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> событий. Необходимо вызвать метод <xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A> метод базового класса, который базовые классы получили событие.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationCompleted (System.Windows.Input.ManipulationCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationCompleted(class System.Windows.Input.ManipulationCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationCompleted(System.Windows.Input.ManipulationCompletedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationCompleted (e As ManipulationCompletedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationCompleted(System::Windows::Input::ManipulationCompletedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Данные для события.</param>
        <summary>Вызывается, когда происходит событие <see cref="E:System.Windows.UIElement.ManipulationCompleted" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.OnManipulationCompleted%2A> У метода нет реализации по умолчанию. Переопределить <xref:System.Windows.UIElement.OnManipulationCompleted%2A> в производном классе позволяет обработать <xref:System.Windows.UIElement.ManipulationCompleted> событий. Необходимо вызвать метод <xref:System.Windows.UIElement.OnManipulationCompleted%2A> метод базового класса, который базовые классы получили событие.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationDelta">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationDelta (System.Windows.Input.ManipulationDeltaEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationDelta(class System.Windows.Input.ManipulationDeltaEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationDelta(System.Windows.Input.ManipulationDeltaEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationDelta (e As ManipulationDeltaEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationDelta(System::Windows::Input::ManipulationDeltaEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationDeltaEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Данные для события.</param>
        <summary>Вызывается, когда происходит событие <see cref="E:System.Windows.UIElement.ManipulationDelta" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.OnManipulationDelta%2A> У метода нет реализации по умолчанию. Переопределить <xref:System.Windows.UIElement.OnManipulationDelta%2A> в производном классе позволяет обработать <xref:System.Windows.UIElement.ManipulationDelta> событий. Необходимо вызвать метод <xref:System.Windows.UIElement.OnManipulationDelta%2A> метод базового класса, который базовые классы получили событие.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationInertiaStarting">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationInertiaStarting (System.Windows.Input.ManipulationInertiaStartingEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationInertiaStarting(class System.Windows.Input.ManipulationInertiaStartingEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationInertiaStarting(System.Windows.Input.ManipulationInertiaStartingEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationInertiaStarting (e As ManipulationInertiaStartingEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationInertiaStarting(System::Windows::Input::ManipulationInertiaStartingEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationInertiaStartingEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Данные для события.</param>
        <summary>Вызывается, когда происходит событие <see cref="E:System.Windows.UIElement.ManipulationInertiaStarting" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A> У метода нет реализации по умолчанию. Переопределить <xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A> в производном классе позволяет обработать <xref:System.Windows.UIElement.ManipulationInertiaStarting> событий. Необходимо вызвать метод <xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A> метод базового класса, который базовые классы получили событие.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationStarted">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationStarted (System.Windows.Input.ManipulationStartedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationStarted(class System.Windows.Input.ManipulationStartedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationStarted(System.Windows.Input.ManipulationStartedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationStarted (e As ManipulationStartedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationStarted(System::Windows::Input::ManipulationStartedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationStartedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Данные для события.</param>
        <summary>Вызывается, когда происходит событие <see cref="E:System.Windows.UIElement.ManipulationStarted" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.OnManipulationStarted%2A> У метода нет реализации по умолчанию. Переопределить <xref:System.Windows.UIElement.OnManipulationStarted%2A> в производном классе позволяет обработать <xref:System.Windows.UIElement.ManipulationStarted> событий. Необходимо вызвать метод <xref:System.Windows.UIElement.OnManipulationStarted%2A> метод базового класса, который базовые классы получили событие.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationStarting">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationStarting (System.Windows.Input.ManipulationStartingEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationStarting(class System.Windows.Input.ManipulationStartingEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationStarting(System.Windows.Input.ManipulationStartingEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationStarting (e As ManipulationStartingEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationStarting(System::Windows::Input::ManipulationStartingEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationStartingEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект <see cref="T:System.Windows.Input.ManipulationStartingEventArgs" />, содержащий данные события.</param>
        <summary>Обеспечивает обработку класса для перенаправленного события <see cref="E:System.Windows.UIElement.ManipulationStarting" />, происходящего при первоначальном создании процессора манипулирования.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.OnManipulationStarting%2A> У метода нет реализации по умолчанию. Переопределить <xref:System.Windows.UIElement.OnManipulationStarting%2A> в производном классе позволяет обработать <xref:System.Windows.UIElement.ManipulationStarting> событий. Необходимо вызвать метод базового класса <xref:System.Windows.UIElement.OnManipulationStarting%2A> метод, базовые классы получили событие.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseDown">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект класса <see cref="T:System.Windows.Input.MouseButtonEventArgs" />, содержащий данные о событии. Данные этого события содержат сведения о нажатой кнопке мыши и состоянии обработки.</param>
        <summary>Вызывается, когда необработанное вложенное событие <see cref="E:System.Windows.Input.Mouse.MouseDown" /> встречает на своем маршруте элемент, производный от этого класса. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Действия кнопок мыши также обрабатываются выделенным диспетчером ввода. Другие программные функции, зависит от действия кнопок мыши, такие как входные данные и привязки команд, могут вызывать обработчики для действия, прежде чем оно будет представлено как общее действие кнопки мыши. Если эти входные знак компоненты системы <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> событие как обработанное, <xref:System.Windows.UIElement.OnMouseDown%2A> не вызывается.  
  
 При использовании этого класса обработчика пометить событие как обработанное потенциально повлияет на следующие события: <xref:System.Windows.UIElement.MouseLeftButtonDown> и <xref:System.Windows.UIElement.MouseRightButtonDown>. Одно из этих событий могут возникать на принимающей элемент при <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> принимается.  
  
 Если пометить это событие как обработанное в обработке класса, вложенные события все равно инициируются; Однако они передают состояние обработки в данных события. Если событие обрабатывается в обработку класса, обработчиками для под не вызываются до явно использовать <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> с `handledEventsToo` `true` для присоединения обработчиков. Обработчики класса также не вызываются до этих обработчиков классов были зарегистрированы с <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> подпись с `handledEventsToo` `true`. При обработке <xref:System.Windows.UIElement.OnMouseDown%2A>, подразумевая учета на обработку класса для всех нажатия кнопки мыши возможные действия. Это поведение может быть нежелательным; Поэтому необходимо соблюдайте осторожность при использовании данного виртуального метода для пометки события как обработанное.  
  
 Каждое из событий прямой кнопками имеется виртуальный * метода. Рассмотрите возможность ли переопределение этих обработчиков класса может оказаться более подходящей.  
  
 У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации.  
  
 Этот метод аналогичен [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] шаблона On * методы: этот метод предоставляет средства для обработки соответствующего события из производных классов с помощью обработчика класса вместо обработчика экземпляра. В этом случае соответствующее событие является маршрутизируемым. Шаблон реализации методов On * отличается для перенаправленных событий, поскольку перенаправленное событие может генерироваться дочерним элементом, который не обязательно является элемент, который будет вызывать обработчики. Таким образом реализации необходимо изучить исходные свойства данных события. Чтобы повторно инициировать событие в большинстве случаев не рекомендуется.  
  
 Путем переопределения этого метода или путем регистрации класса обработчиков с <xref:System.Windows.EventManager.RegisterClassHandler%2A>, классы, унаследованные от <xref:System.Windows.UIElement> может вызывать методы обработчика закрытый класс, при получении события на маршруте события. Один сценарий, где обработка класса является управление данными события и пометить перенаправленное событие как обработанное.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseDown" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseEnter (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseEnter(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseEnter (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseEnter(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект класса <see cref="T:System.Windows.Input.MouseEventArgs" />, содержащий данные о событии.</param>
        <summary>Вызывается, когда необработанное присоединенное событие <see cref="E:System.Windows.Input.Mouse.MouseEnter" /> возникает для этого элемента. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации. Вызов базовой реализации можно до или после специальной обработки, в зависимости от требований.  
  
 Этот метод аналогичен [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] шаблона On * методы: этот метод предоставляет средства для обработки соответствующего события из производных классов с помощью обработчика класса вместо обработчика экземпляра. В этом случае соответствующее событие является маршрутизируемым, с прямой стратегией маршрутизации. Пометка события обрабатываются по-прежнему полезно для предотвращения обработчиками (для которых не указан `handledEventsToo`) вызов.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseLeave (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseLeave(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseLeave (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseLeave(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект класса <see cref="T:System.Windows.Input.MouseEventArgs" />, содержащий данные о событии.</param>
        <summary>Вызывается, когда необработанное присоединенное событие <see cref="E:System.Windows.Input.Mouse.MouseLeave" /> возникает для этого элемента. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации. Вызов базовой реализации можно до или после специальной обработки, в зависимости от требований.  
  
 Этот метод аналогичен [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] шаблона On * методы: этот метод предоставляет средства для обработки соответствующего события из производных классов с помощью обработчика класса вместо обработчика экземпляра. В этом случае соответствующее событие является маршрутизируемым, с прямой стратегией маршрутизации. Пометка события обрабатываются по-прежнему полезно для предотвращения обработчиками (для которых не указан `handledEventsToo`) вызов.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseLeftButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseLeftButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseLeftButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект класса <see cref="T:System.Windows.Input.MouseButtonEventArgs" />, содержащий данные о событии. В данных события сообщается о том, что была нажата левая кнопка мыши.</param>
        <summary>Вызывается, когда необработанное перенаправленное событие <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> возникает для этого элемента. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.MouseLeftButtonDown> Событие отображается передавать маршруту, но фактически перемещается Косвенным способом. <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> является базовой событие, которое пузырьков маршрутизации и каждый <xref:System.Windows.UIElement> вдоль событие маршрута идентичные обработка используется для прямого перенаправленное событие <xref:System.Windows.UIElement.MouseLeftButtonDown>. Несмотря на то, что вы можете пометить <xref:System.Windows.UIElement.MouseLeftButtonDown> событие как обработанное в целях данного элемента, состояние обработки выполнения не является постоянным для остальных элементов на маршруте события. Тем не менее, может потребоваться пометить событие как обработанное, чтобы предотвратить общих обработчиков экземпляра (те, которые не указывает `handledEventsToo`) вызов.  
  
 Реализация по умолчанию для общих мыши обработка событий в <xref:System.Windows.UIElement> прослушивает <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> и преобразует его в соответствующий локального события. Если вы хотите переопределить данную логику, необходимо создать производный класс. В статическом конструкторе производного класса, регистрация обработчика альтернативных класса для <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>. Невозможно изменить поведение обработки мыши <xref:System.Windows.UIElement> путем переопределения <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A>.  
  
 Кроме того можно переопределить этот метод, чтобы изменить обработку события для конкретного состояния мыши. Вы можете отказаться от вызвать базовую реализацию зависит от сценария. Если не вызывается базовый отключает обработку ввода по умолчанию для этого события мыши в классах предка, которые также предполагается, что для вызова <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A>. Например, можно получить из <xref:System.Windows.Controls.Button> и Переопределите <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A> в производном классе без вызова базовой реализации; Однако это переопределение отключает <xref:System.Windows.Controls.Primitives.ButtonBase.Click> событий.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseLeftButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseLeftButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseLeftButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект класса <see cref="T:System.Windows.Input.MouseButtonEventArgs" />, содержащий данные о событии. Данные о событии информируют об отжатии левой кнопки мыши.</param>
        <summary>Вызывается, когда необработанное перенаправленное событие <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> встречает на своем маршруте элемент, производный от этого класса. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.MouseLeftButtonUp> Событие отображается передавать маршруту, но фактически перемещается Косвенным способом. <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> является базовой событие, которое пузырьков маршрутизации и каждый <xref:System.Windows.UIElement> вдоль событие маршрута идентичные обработка используется для прямого перенаправленное событие <xref:System.Windows.UIElement.MouseLeftButtonUp>. Несмотря на то, что вы можете пометить <xref:System.Windows.UIElement.MouseLeftButtonUp> событие как обработанное в целях данного элемента, состояние обработки выполнения не является постоянным для остальных элементов на маршруте события. Тем не менее, может потребоваться пометить событие как обработанное, чтобы предотвратить общих обработчиков экземпляра (те, которые не указывает `handledEventsToo`) вызов.  
  
 Реализация по умолчанию для общих мыши обработка событий в <xref:System.Windows.UIElement> прослушивает <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> и преобразует его в соответствующий локального события. Если вы хотите переопределить данную логику, необходимо создать производный класс. В статическом конструкторе производного класса, регистрация обработчика альтернативных класса для <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>. Невозможно изменить поведение обработки мыши <xref:System.Windows.UIElement> путем переопределения <xref:System.Windows.UIElement.OnMouseLeftButtonUp%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseMove">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseMove (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseMove(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseMove(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseMove (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseMove(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект класса <see cref="T:System.Windows.Input.MouseEventArgs" />, содержащий данные о событии.</param>
        <summary>Вызывается, когда необработанное вложенное событие <see cref="E:System.Windows.Input.Mouse.MouseMove" /> встречает на своем маршруте элемент, производный от этого класса. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации.  
  
 Этот метод аналогичен [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] шаблона On * методы: этот метод предоставляет средства для обработки соответствующего события из производных классов с помощью обработчика класса вместо обработчика экземпляра. В этом случае соответствующее событие является маршрутизируемым. Шаблон реализации методов On * отличается для перенаправленных событий, поскольку перенаправленное событие может генерироваться дочерним элементом, который не обязательно является элемент, который будет вызывать обработчики. Таким образом реализации необходимо изучить исходные свойства данных события. Чтобы повторно инициировать событие в большинстве случаев не рекомендуется.  
  
 Путем переопределения этого метода или путем регистрации класса обработчиков с <xref:System.Windows.EventManager.RegisterClassHandler%2A>, классы, унаследованные от <xref:System.Windows.UIElement> может вызывать методы обработчика закрытый класс, при получении события на маршруте события. Один сценарий, где обработка класса является управление данными события и пометить перенаправленное событие как обработанное.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseMove" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseRightButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseRightButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseRightButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseRightButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект класса <see cref="T:System.Windows.Input.MouseButtonEventArgs" />, содержащий данные о событии. Данные о событии информируют о нажатии правой кнопки мыши.</param>
        <summary>Вызывается, когда необработанное перенаправленное событие <see cref="E:System.Windows.UIElement.MouseRightButtonDown" /> встречает на своем маршруте элемент, производный от этого класса. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.MouseRightButtonDown> Событие отображается передавать маршруту, но фактически перемещается Косвенным способом. <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> является базовой событие, которое пузырьков маршрутизации и каждый <xref:System.Windows.UIElement> вдоль событие маршрута идентичные обработка используется для прямого перенаправленное событие <xref:System.Windows.UIElement.MouseRightButtonDown>. Несмотря на то, что вы можете пометить <xref:System.Windows.UIElement.MouseRightButtonDown> событие как обработанное в целях данного элемента, состояние обработки выполнения не является постоянным для остальных элементов на маршруте события. Тем не менее, может потребоваться пометить событие как обработанное, чтобы предотвратить общих обработчиков экземпляра (те, которые не указывает `handledEventsToo`) вызов.  
  
 Реализация по умолчанию для общих мыши обработка событий в <xref:System.Windows.UIElement> прослушивает <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> и преобразует его в соответствующий локального события. Если вы хотите переопределить данную логику, необходимо создать производный класс. В статическом конструкторе производного класса, регистрация обработчика альтернативных класса для <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>. Невозможно изменить поведение обработки мыши <xref:System.Windows.UIElement> путем переопределения <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A>.  
  
 Кроме того можно переопределить этот метод, чтобы изменить обработку события для конкретного состояния мыши. Вы можете отказаться от вызвать базовую реализацию зависит от сценария. Если не вызывается базовый отключает обработку ввода по умолчанию для этого события мыши в классах предка, которые также предполагается, что для вызова <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A>. Например, можно получить из <xref:System.Windows.Controls.Control> и Переопределите <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A> в производном классе без вызова базового; Однако это переопределение отключает службы меню контекста на элементе управления, которые входят в состав из <xref:System.Windows.Controls.Control> поведение по умолчанию.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseRightButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseRightButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseRightButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseRightButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект класса <see cref="T:System.Windows.Input.MouseButtonEventArgs" />, содержащий данные о событии. Данные о событии информируют об отпускании правой кнопки мыши.</param>
        <summary>Вызывается, когда необработанное перенаправленное событие <see cref="E:System.Windows.UIElement.MouseRightButtonUp" /> встречает на своем маршруте элемент, производный от этого класса. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.MouseRightButtonUp> Событие отображается передавать маршруту, но фактически перемещается Косвенным способом. <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> является базовой событие, которое пузырьков маршрутизации и каждый <xref:System.Windows.UIElement> вдоль событие маршрута идентичные обработка используется для прямого перенаправленное событие <xref:System.Windows.UIElement.MouseRightButtonUp>. Несмотря на то, что вы можете пометить <xref:System.Windows.UIElement.MouseRightButtonUp> событие как обработанное в целях данного элемента, состояние обработки выполнения не является постоянным для остальных элементов на маршруте события. Тем не менее, может потребоваться пометить событие как обработанное, чтобы предотвратить общих обработчиков экземпляра (те, которые не указывает `handledEventsToo`) вызов.  
  
 Реализация по умолчанию для общих мыши обработка событий в <xref:System.Windows.UIElement> прослушивает <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> и преобразует его в соответствующий локального события. Если вы хотите переопределить данную логику, необходимо создать производный класс. В статическом конструкторе производного класса, регистрация обработчика альтернативных класса для <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>. Невозможно изменить поведение обработки мыши <xref:System.Windows.UIElement> путем переопределения <xref:System.Windows.UIElement.OnMouseRightButtonUp%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseUp">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект класса <see cref="T:System.Windows.Input.MouseButtonEventArgs" />, содержащий данные о событии. Данные о событии информируют об отжатии кнопки мыши.</param>
        <summary>Вызывается, когда необработанное перенаправленное событие <see cref="E:System.Windows.Input.Mouse.MouseUp" /> встречает на своем маршруте элемент, производный от этого класса. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Действия кнопок мыши также обрабатываются выделенным диспетчером ввода. Другие программные функции, зависит от действия кнопок мыши, такие как входные данные и привязки команд, могут вызывать обработчики для действия, прежде чем оно будет представлено как общее действие кнопки мыши. Если эти входные знак компоненты системы <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> событие как обработанное, <xref:System.Windows.UIElement.OnMouseUp%2A> не вызывается.  
  
 При использовании этого класса обработчика пометить событие как обработанное потенциально повлияет на следующие события: <xref:System.Windows.UIElement.MouseLeftButtonUp> и <xref:System.Windows.UIElement.MouseRightButtonUp>. Одно из этих событий может быть вызвано в элементе принимающей при <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> принимается.  
  
 Если пометить это событие как обработанное в обработке класса, вложенные события все равно инициируются; Однако они передают состояние обработки в данных события. Если событие обрабатывается в обработку класса, обработчиками для под не вызываются до явно использовать <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> с `handledEventsToo` `true` для присоединения обработчиков. Обработчики класса также не вызываются до этих обработчиков классов были зарегистрированы с <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> подпись с `handledEventsToo` `true`. При обработке <xref:System.Windows.UIElement.OnMouseUp%2A>, подразумевая учета на обработку класса для всех возможных отпускания кнопки мыши действия. Это поведение может быть нежелательным; Поэтому необходимо соблюдайте осторожность при использовании данного виртуального метода для пометки события как обработанное.  
  
 Каждое из событий прямой кнопками имеется виртуальный * метода. Рассмотрите возможность ли переопределение этих обработчиков класса может оказаться более подходящей.  
  
 У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации.  
  
 Этот метод аналогичен [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] шаблона On * методы: этот метод предоставляет средства для обработки соответствующего события из производных классов с помощью обработчика класса вместо обработчика экземпляра. В этом случае соответствующее событие является маршрутизируемым. Шаблон реализации методов On * отличается для перенаправленных событий, поскольку перенаправленное событие может генерироваться дочерним элементом, который не обязательно является элемент, который будет вызывать обработчики. Таким образом реализации необходимо изучить исходные свойства данных события. Чтобы повторно инициировать событие в большинстве случаев не рекомендуется.  
  
 Путем переопределения этого метода или путем регистрации класса обработчиков с <xref:System.Windows.EventManager.RegisterClassHandler%2A>, классы, унаследованные от <xref:System.Windows.UIElement> может вызывать методы обработчика закрытый класс, при получении события на маршруте события. Один сценарий, где обработка класса является управление данными события и пометить перенаправленное событие как обработанное.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseWheel">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseWheel (System.Windows.Input.MouseWheelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseWheel(class System.Windows.Input.MouseWheelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseWheel (e As MouseWheelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseWheel(System::Windows::Input::MouseWheelEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseWheelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект класса <see cref="T:System.Windows.Input.MouseWheelEventArgs" />, содержащий данные о событии.</param>
        <summary>Вызывается, когда необработанное вложенное событие <see cref="E:System.Windows.Input.Mouse.MouseWheel" /> встречает на своем маршруте элемент, производный от этого класса. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации.  
  
 Этот метод аналогичен [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] шаблона On * методы: этот метод предоставляет средства для обработки соответствующего события из производных классов с помощью обработчика класса вместо обработчика экземпляра. В этом случае соответствующее событие является маршрутизируемым. Шаблон реализации методов On * отличается для перенаправленных событий, поскольку перенаправленное событие может генерироваться дочерним элементом, который не обязательно является элемент, который будет вызывать обработчики. Таким образом реализации необходимо изучить исходные свойства данных события. Чтобы повторно инициировать событие в большинстве случаев не рекомендуется.  
  
 Путем переопределения этого метода или путем регистрации класса обработчиков с <xref:System.Windows.EventManager.RegisterClassHandler%2A>, классы, унаследованные от <xref:System.Windows.UIElement> может вызывать методы обработчика закрытый класс, при получении события на маршруте события. Один сценарий, где обработка класса является управление данными события и пометить перенаправленное событие как обработанное.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseWheel" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewDragEnter (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewDragEnter(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewDragEnter(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewDragEnter (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewDragEnter(System::Windows::DragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект класса <see cref="T:System.Windows.DragEventArgs" />, содержащий данные о событии.</param>
        <summary>Вызывается, когда необработанное вложенное событие <see cref="E:System.Windows.DragDrop.PreviewDragEnter" /> встречает на своем маршруте элемент, производный от этого класса. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации.  
  
 Этот метод аналогичен [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] шаблона On * методы: этот метод предоставляет средства для обработки соответствующего события из производных классов с помощью обработчика класса вместо обработчика экземпляра. В этом случае соответствующее событие является маршрутизируемым. Шаблон реализации методов On * отличается для перенаправленных событий, поскольку перенаправленное событие может генерироваться дочерним элементом, который не обязательно является элемент, который будет вызывать обработчики. Таким образом реализации необходимо изучить исходные свойства данных события. Чтобы повторно инициировать событие в большинстве случаев не рекомендуется.  
  
 Путем переопределения этого метода или путем регистрации класса обработчиков с <xref:System.Windows.EventManager.RegisterClassHandler%2A>, классы, унаследованные от <xref:System.Windows.UIElement> может вызывать методы обработчика закрытый класс, при получении события на маршруте события. Один сценарий, где обработка класса является управление данными события и пометить перенаправленное событие как обработанное. Еще один сценарий, в частности для предварительного просмотра событий: пометить их как обрабатываемые, чтобы соответствующие восходящие обработчики класса не вызываются.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewDragEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewDragLeave (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewDragLeave(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewDragLeave(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewDragLeave (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewDragLeave(System::Windows::DragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект класса <see cref="T:System.Windows.DragEventArgs" />, содержащий данные о событии.</param>
        <summary>Вызывается, когда необработанное вложенное событие <see cref="E:System.Windows.DragDrop.PreviewDragLeave" /> встречает на своем маршруте элемент, производный от этого класса. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации.  
  
 Этот метод аналогичен [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] шаблона On * методы: этот метод предоставляет средства для обработки соответствующего события из производных классов с помощью обработчика класса вместо обработчика экземпляра. В этом случае соответствующее событие является маршрутизируемым. Шаблон реализации методов On * отличается для перенаправленных событий, поскольку перенаправленное событие может генерироваться дочерним элементом, который не обязательно является элемент, который будет вызывать обработчики. Таким образом реализации необходимо изучить исходные свойства данных события. Чтобы повторно инициировать событие в большинстве случаев не рекомендуется.  
  
 Путем переопределения этого метода или путем регистрации класса обработчиков с <xref:System.Windows.EventManager.RegisterClassHandler%2A>, классы, унаследованные от <xref:System.Windows.UIElement> может вызывать методы обработчика закрытый класс, при получении события на маршруте события. Один сценарий, где обработка класса является управление данными события и пометить перенаправленное событие как обработанное. Еще один сценарий, в частности для предварительного просмотра событий: пометить их как обрабатываемые, чтобы соответствующие восходящие обработчики класса не вызываются.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewDragLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragOver">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewDragOver (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewDragOver(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewDragOver(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewDragOver (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewDragOver(System::Windows::DragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект класса <see cref="T:System.Windows.DragEventArgs" />, содержащий данные о событии.</param>
        <summary>Вызывается, когда необработанное вложенное событие <see cref="E:System.Windows.DragDrop.PreviewDragOver" /> встречает на своем маршруте элемент, производный от этого класса. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации.  
  
 Этот метод аналогичен [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] шаблона On * методы: этот метод предоставляет средства для обработки соответствующего события из производных классов с помощью обработчика класса вместо обработчика экземпляра. В этом случае соответствующее событие является маршрутизируемым. Шаблон реализации методов On * отличается для перенаправленных событий, поскольку перенаправленное событие может генерироваться дочерним элементом, который не обязательно является элемент, который будет вызывать обработчики. Таким образом реализации необходимо изучить исходные свойства данных события. Чтобы повторно инициировать событие в большинстве случаев не рекомендуется.  
  
 Путем переопределения этого метода или путем регистрации класса обработчиков с <xref:System.Windows.EventManager.RegisterClassHandler%2A>, классы, унаследованные от <xref:System.Windows.UIElement> может вызывать методы обработчика закрытый класс, при получении события на маршруте события. Один сценарий, где обработка класса является управление данными события и пометить перенаправленное событие как обработанное. Еще один сценарий, в частности для предварительного просмотра событий: пометить их как обрабатываемые, чтобы соответствующие восходящие обработчики класса не вызываются.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewDragOver" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDrop">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewDrop (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewDrop(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewDrop(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewDrop (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewDrop(System::Windows::DragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект класса <see cref="T:System.Windows.DragEventArgs" />, содержащий данные о событии.</param>
        <summary>Вызывается, когда необработанное вложенное событие <see cref="E:System.Windows.DragDrop.PreviewDrop" /> встречает на своем маршруте элемент, производный от этого класса. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации.  
  
 Этот метод аналогичен [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] шаблона On * методы: этот метод предоставляет средства для обработки соответствующего события из производных классов с помощью обработчика класса вместо обработчика экземпляра. В этом случае соответствующее событие является маршрутизируемым. Шаблон реализации методов On * отличается для перенаправленных событий, поскольку перенаправленное событие может генерироваться дочерним элементом, который не обязательно является элемент, который будет вызывать обработчики. Таким образом реализации необходимо изучить исходные свойства данных события. Чтобы повторно инициировать событие в большинстве случаев не рекомендуется.  
  
 Путем переопределения этого метода или путем регистрации класса обработчиков с <xref:System.Windows.EventManager.RegisterClassHandler%2A>, классы, унаследованные от <xref:System.Windows.UIElement> может вызывать методы обработчика закрытый класс, при получении события на маршруте события. Один сценарий, где обработка класса является управление данными события и пометить перенаправленное событие как обработанное. Еще один сценарий, в частности для предварительного просмотра событий: пометить их как обрабатываемые, чтобы соответствующие восходящие обработчики класса не вызываются.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewDrop" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewGiveFeedback">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewGiveFeedback (System.Windows.GiveFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewGiveFeedback(class System.Windows.GiveFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewGiveFeedback (e As GiveFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewGiveFeedback(System::Windows::GiveFeedbackEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.GiveFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект класса <see cref="T:System.Windows.GiveFeedbackEventArgs" />, содержащий данные о событии.</param>
        <summary>Вызывается, когда необработанное вложенное событие <see cref="E:System.Windows.DragDrop.PreviewGiveFeedback" /> встречает на своем маршруте элемент, производный от этого класса. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации.  
  
 Этот метод аналогичен [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] шаблона On * методы: этот метод предоставляет средства для обработки соответствующего события из производных классов с помощью обработчика класса вместо обработчика экземпляра. В этом случае соответствующее событие является маршрутизируемым. Шаблон реализации методов On * отличается для перенаправленных событий, поскольку перенаправленное событие может генерироваться дочерним элементом, который не обязательно является элемент, который будет вызывать обработчики. Таким образом реализации необходимо изучить исходные свойства данных события. Чтобы повторно инициировать событие в большинстве случаев не рекомендуется.  
  
 Путем переопределения этого метода или путем регистрации класса обработчиков с <xref:System.Windows.EventManager.RegisterClassHandler%2A>, классы, унаследованные от <xref:System.Windows.UIElement> может вызывать методы обработчика закрытый класс, при получении события на маршруте события. Один сценарий, где обработка класса является управление данными события и пометить перенаправленное событие как обработанное. Еще один сценарий, в частности для предварительного просмотра событий: пометить их как обрабатываемые, чтобы соответствующие восходящие обработчики класса не вызываются.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewGiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewGotKeyboardFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewGotKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewGotKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewGotKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект класса <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" />, содержащий данные о событии.</param>
        <summary>Вызывается, когда необработанное вложенное событие <see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /> встречает на своем маршруте элемент, производный от этого класса. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации.  
  
 Этот метод аналогичен [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] шаблона On * методы: этот метод предоставляет средства для обработки соответствующего события из производных классов с помощью обработчика класса вместо обработчика экземпляра. В этом случае соответствующее событие является маршрутизируемым. Шаблон реализации методов On * отличается для перенаправленных событий, поскольку перенаправленное событие может генерироваться дочерним элементом, который не обязательно является элемент, который будет вызывать обработчики. Таким образом реализации необходимо изучить исходные свойства данных события. Чтобы повторно инициировать событие в большинстве случаев не рекомендуется.  
  
 Путем переопределения этого метода или путем регистрации класса обработчиков с <xref:System.Windows.EventManager.RegisterClassHandler%2A>, классы, унаследованные от <xref:System.Windows.UIElement> может вызывать методы обработчика закрытый класс, при получении события на маршруте события. Один сценарий, где обработка класса является управление данными события и пометить перенаправленное событие как обработанное. Еще один сценарий, в частности для предварительного просмотра событий: пометить их как обрабатываемые, чтобы соответствующие восходящие обработчики класса не вызываются.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewGotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewKeyDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewKeyDown (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewKeyDown(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewKeyDown(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект класса <see cref="T:System.Windows.Input.KeyEventArgs" />, содержащий данные о событии.</param>
        <summary>Вызывается, когда необработанное вложенное событие <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> встречает на своем маршруте элемент, производный от этого класса. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации.  
  
 Этот метод аналогичен [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] шаблона On * методы: этот метод предоставляет средства для обработки соответствующего события из производных классов с помощью обработчика класса вместо обработчика экземпляра. В этом случае соответствующее событие является маршрутизируемым. Шаблон реализации методов On * отличается для перенаправленных событий, поскольку перенаправленное событие может генерироваться дочерним элементом, который не обязательно является элемент, который будет вызывать обработчики. Таким образом реализации необходимо изучить исходные свойства данных события. Чтобы повторно инициировать событие в большинстве случаев не рекомендуется.  
  
 Путем переопределения этого метода или путем регистрации класса обработчиков с <xref:System.Windows.EventManager.RegisterClassHandler%2A>, классы, унаследованные от <xref:System.Windows.UIElement> может вызывать методы обработчика закрытый класс, при получении события на маршруте события. Один сценарий, где обработка класса является управление данными события и пометить перенаправленное событие как обработанное. Еще один сценарий, в частности для предварительного просмотра событий: пометить их как обрабатываемые, чтобы соответствующие восходящие обработчики класса не вызываются.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewKeyDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewKeyUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewKeyUp (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewKeyUp(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewKeyUp(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект класса <see cref="T:System.Windows.Input.KeyEventArgs" />, содержащий данные о событии.</param>
        <summary>Вызывается, когда необработанное вложенное событие <see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /> встречает на своем маршруте элемент, производный от этого класса. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации.  
  
 Этот метод аналогичен [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] шаблона On * методы: этот метод предоставляет средства для обработки соответствующего события из производных классов с помощью обработчика класса вместо обработчика экземпляра. В этом случае соответствующее событие является маршрутизируемым. Шаблон реализации методов On * отличается для перенаправленных событий, поскольку перенаправленное событие может генерироваться дочерним элементом, который не обязательно является элемент, который будет вызывать обработчики. Таким образом реализации необходимо изучить исходные свойства данных события. Чтобы повторно инициировать событие в большинстве случаев не рекомендуется.  
  
 Путем переопределения этого метода или путем регистрации класса обработчиков с <xref:System.Windows.EventManager.RegisterClassHandler%2A>, классы, унаследованные от <xref:System.Windows.UIElement> может вызывать методы обработчика закрытый класс, при получении события на маршруте события. Один сценарий, где обработка класса является управление данными события и пометить перенаправленное событие как обработанное. Еще один сценарий, в частности для предварительного просмотра событий: пометить их как обрабатываемые, чтобы соответствующие восходящие обработчики класса не вызываются.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewKeyUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewLostKeyboardFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewLostKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewLostKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewLostKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект класса <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" />, содержащий данные о событии.</param>
        <summary>Вызывается, когда необработанное вложенное событие <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> встречает на своем маршруте элемент, производный от этого класса. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации.  
  
 Этот метод аналогичен [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] шаблона On * методы: этот метод предоставляет средства для обработки соответствующего события из производных классов с помощью обработчика класса вместо обработчика экземпляра. В этом случае соответствующее событие является маршрутизируемым. Шаблон реализации методов On * отличается для перенаправленных событий, поскольку перенаправленное событие может генерироваться дочерним элементом, который не обязательно является элемент, который будет вызывать обработчики. Таким образом реализации необходимо изучить исходные свойства данных события. Чтобы повторно инициировать событие в большинстве случаев не рекомендуется.  
  
 Путем переопределения этого метода или путем регистрации класса обработчиков с <xref:System.Windows.EventManager.RegisterClassHandler%2A>, классы, унаследованные от <xref:System.Windows.UIElement> может вызывать методы обработчика закрытый класс, при получении события на маршруте события. Один сценарий, где обработка класса является управление данными события и пометить перенаправленное событие как обработанное. Еще один сценарий, в частности для предварительного просмотра событий: пометить их как обрабатываемые, чтобы соответствующие восходящие обработчики класса не вызываются.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewLostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект класса <see cref="T:System.Windows.Input.MouseButtonEventArgs" />, содержащий данные о событии. Данные о событии информируют о нажатии одной или нескольких кнопок мыши.</param>
        <summary>Вызывается, когда необработанное присоединенное перенаправленное событие <see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /> встречает на своем маршруте элемент, производный от этого класса. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Действия кнопок мыши также обрабатываются выделенным диспетчером ввода. Другие программные функции, зависит от действия кнопок мыши, такие как входные данные и привязки команд, могут вызывать обработчики для действия, прежде чем оно будет представлено как общее действие кнопки мыши. Если эти входные знак компоненты системы <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> событие как обработанное, <xref:System.Windows.UIElement.OnPreviewMouseDown%2A> не вызывается.  
  
 При использовании этого класса обработчика пометить событие как обработанное потенциально повлияет на следующие события: <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> и <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>. Одно из этих событий могут возникать на принимающей элемент при <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> принимается.  
  
 Если пометить это событие как обработанное в обработке класса, вложенные события все равно инициируются; Однако они передают состояние обработки в данных события. Если событие обрабатывается в обработку класса, обработчиками для под не вызываются до явно использовать <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> с `handledEventsToo` `true` для присоединения обработчиков. Обработчики класса также не вызываются до этих обработчиков классов были зарегистрированы с <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> подпись с `handledEventsToo` `true`. При обработке <xref:System.Windows.UIElement.OnPreviewMouseDown%2A>, подразумевая учета на обработку класса для всех нажатия кнопки мыши возможные действия. Это поведение может быть нежелательным; Поэтому необходимо соблюдайте осторожность при использовании данного виртуального метода для пометки события как обработанное.  
  
 Каждое из событий прямой кнопками имеется виртуальный * метода. Рассмотрите возможность ли переопределение этих обработчиков класса может оказаться более подходящей.  
  
 У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации.  
  
 Этот метод аналогичен [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] шаблона On * методы: этот метод предоставляет средства для обработки соответствующего события из производных классов с помощью обработчика класса вместо обработчика экземпляра. В этом случае соответствующее событие является маршрутизируемым. Шаблон реализации методов On * отличается для перенаправленных событий, поскольку перенаправленное событие может генерироваться дочерним элементом, который не обязательно является элемент, который будет вызывать обработчики. Таким образом реализации необходимо изучить исходные свойства данных события. Чтобы повторно инициировать событие в большинстве случаев не рекомендуется.  
  
 Путем переопределения этого метода или путем регистрации класса обработчиков с <xref:System.Windows.EventManager.RegisterClassHandler%2A>, классы, унаследованные от <xref:System.Windows.UIElement> может вызывать методы обработчика закрытый класс, при получении события на маршруте события. Один сценарий, где обработка класса является управление данными события и пометить перенаправленное событие как обработанное. Еще один сценарий, в частности для предварительного просмотра событий: пометить их как обрабатываемые, чтобы соответствующие восходящие обработчики класса не вызываются.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseLeftButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseLeftButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseLeftButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект класса <see cref="T:System.Windows.Input.MouseButtonEventArgs" />, содержащий данные о событии. В данных события сообщается о том, что была нажата левая кнопка мыши.</param>
        <summary>Вызывается, когда необработанное перенаправленное событие <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" /> встречает на своем маршруте элемент, производный от этого класса. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> Событие отображается передавать нисходящую, но фактически перемещается Косвенным способом. <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> является базовой событие, которое направлено туннель, при этом каждая <xref:System.Windows.UIElement> вдоль событие маршрута идентичные обработка используется для прямого перенаправленное событие <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>. Несмотря на то, что вы можете пометить <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> событие как обработанное в целях данного элемента, состояние обработки выполнения не является постоянным для остальных элементов на маршруте события. Тем не менее, может потребоваться пометить событие как обработанное, чтобы предотвратить общих обработчиков экземпляра (те, которые не указывает `handledEventsToo`) вызов.  
  
 Реализация по умолчанию для общих мыши обработка событий в <xref:System.Windows.UIElement> прослушивает <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> и преобразует его в соответствующий локального события. Если вы хотите переопределить данную логику, необходимо создать производный класс. В статическом конструкторе производного класса, регистрация обработчика альтернативных класса для <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>. Невозможно изменить поведение обработки мыши <xref:System.Windows.UIElement> путем переопределения <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A>.  
  
 Кроме того можно переопределить этот метод, чтобы изменить обработку события для конкретного состояния мыши. Вы можете отказаться от вызвать базовую реализацию зависит от сценария. Если не вызывается базовый отключает обработку ввода по умолчанию для этого события мыши в классах предка, которые также предполагается, что для вызова <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A>. Например, можно получить из <xref:System.Windows.Controls.Button> и Переопределите <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A> в производном классе без вызова базовой реализации; Однако это переопределение отключает <xref:System.Windows.Controls.Primitives.ButtonBase.Click> событий.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseLeftButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseLeftButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseLeftButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект класса <see cref="T:System.Windows.Input.MouseButtonEventArgs" />, содержащий данные о событии. Данные о событии информируют об отжатии левой кнопки мыши.</param>
        <summary>Вызывается, когда необработанное перенаправленное событие <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" /> встречает на своем маршруте элемент, производный от этого класса. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> Событие отображается передавать нисходящую, но фактически перемещается Косвенным способом. <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> является базовой событие, которое направлено туннель, при этом каждая <xref:System.Windows.UIElement> вдоль событие маршрута идентичные обработка используется для прямого перенаправленное событие <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp>. Несмотря на то, что вы можете пометить <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> событие как обработанное в целях данного элемента, состояние обработки выполнения не является постоянным для остальных элементов на маршруте события. Тем не менее, может потребоваться пометить событие как обработанное, чтобы предотвратить общих обработчиков экземпляра (те, которые не указывает `handledEventsToo`) вызов.  
  
 Реализация по умолчанию для общих мыши обработка событий в <xref:System.Windows.UIElement> прослушивает <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> и преобразует его в соответствующий локального события. Если вы хотите переопределить данную логику, необходимо создать производный класс. В статическом конструкторе производного класса, регистрация обработчика альтернативных класса для <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>. Невозможно изменить поведение обработки мыши <xref:System.Windows.UIElement> путем переопределения <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonUp%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseMove">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseMove (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseMove(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseMove (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseMove(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект класса <see cref="T:System.Windows.Input.MouseEventArgs" />, содержащий данные о событии.</param>
        <summary>Вызывается, когда необработанное вложенное событие <see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /> встречает на своем маршруте элемент, производный от этого класса. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации.  
  
 Этот метод аналогичен [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] шаблона On * методы: этот метод предоставляет средства для обработки соответствующего события из производных классов с помощью обработчика класса вместо обработчика экземпляра. В этом случае соответствующее событие является маршрутизируемым. Шаблон реализации методов On * отличается для перенаправленных событий, поскольку перенаправленное событие может генерироваться дочерним элементом, который не обязательно является элемент, который будет вызывать обработчики. Таким образом реализации необходимо изучить исходные свойства данных события. Чтобы повторно инициировать событие в большинстве случаев не рекомендуется.  
  
 Путем переопределения этого метода или путем регистрации класса обработчиков с <xref:System.Windows.EventManager.RegisterClassHandler%2A>, классы, унаследованные от <xref:System.Windows.UIElement> может вызывать методы обработчика закрытый класс, при получении события на маршруте события. Один сценарий, где обработка класса является управление данными события и пометить перенаправленное событие как обработанное. Еще один сценарий, в частности для предварительного просмотра событий: пометить их как обрабатываемые, чтобы соответствующие восходящие обработчики класса не вызываются.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseRightButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseRightButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseRightButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseRightButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект класса <see cref="T:System.Windows.Input.MouseButtonEventArgs" />, содержащий данные о событии. Данные о событии информируют о нажатии правой кнопки мыши.</param>
        <summary>Вызывается, когда необработанное перенаправленное событие <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" /> встречает на своем маршруте элемент, производный от этого класса. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> Событие отображается передавать нисходящую, но фактически перемещается Косвенным способом. <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> является базовой событие, которое направлено туннель, при этом каждая <xref:System.Windows.UIElement> вдоль событие маршрута идентичные обработка используется для прямого перенаправленное событие <xref:System.Windows.UIElement.MouseRightButtonDown>. Несмотря на то, что вы можете пометить <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> событие как обработанное в целях данного элемента, состояние обработки выполнения не является постоянным для остальных элементов на маршруте события. Тем не менее, может потребоваться пометить событие как обработанное, чтобы предотвратить общих обработчиков экземпляра (те, которые не указывает `handledEventsToo`) вызов.  
  
 Реализация по умолчанию для общих мыши обработка событий в <xref:System.Windows.UIElement> прослушивает <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> и преобразует его в соответствующий локального события. Если вы хотите переопределить данную логику, необходимо создать производный класс. В статическом конструкторе производного класса, регистрация обработчика альтернативных класса для <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>. Невозможно изменить поведение обработки мыши <xref:System.Windows.UIElement> путем переопределения <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A>.  
  
 Кроме того можно переопределить этот метод, чтобы изменить обработку события для конкретного состояния мыши. Вы можете отказаться от вызвать базовую реализацию зависит от сценария. Если не вызывается базовый отключает обработку ввода по умолчанию для этого события мыши в классах предка, которые также предполагается, что для вызова <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A>. Например, можно получить из <xref:System.Windows.Controls.Control> и Переопределите <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A> в производном классе без вызова базового; Однако это переопределение отключает службы меню контекста на элементе управления, которые входят в состав из <xref:System.Windows.Controls.Control> поведение по умолчанию.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseRightButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseRightButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseRightButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseRightButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект класса <see cref="T:System.Windows.Input.MouseButtonEventArgs" />, содержащий данные о событии. Данные о событии информируют об отпускании правой кнопки мыши.</param>
        <summary>Вызывается, когда необработанное перенаправленное событие <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp" /> встречает на своем маршруте элемент, производный от этого класса. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> Событие отображается передавать нисходящую, но фактически перемещается Косвенным способом. <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> является базовой событие, которое направлено туннель, при этом каждая <xref:System.Windows.UIElement> вдоль событие маршрута идентичные обработка используется для прямого перенаправленное событие <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>. Несмотря на то, что вы можете пометить <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> событие как обработанное в целях данного элемента, состояние обработки выполнения не является постоянным для остальных элементов на маршруте события. Тем не менее, может потребоваться пометить событие как обработанное, чтобы предотвратить общих обработчиков экземпляра (те, которые не указывает `handledEventsToo`) вызов.  
  
 Реализация по умолчанию для общих мыши обработка событий в <xref:System.Windows.UIElement> прослушивает <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> и преобразует его в соответствующий локального события. Если вы хотите переопределить данную логику, необходимо создать производный класс. В статическом конструкторе производного класса, регистрация обработчика альтернативных класса для <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>. Невозможно изменить поведение обработки мыши <xref:System.Windows.UIElement> путем переопределения <xref:System.Windows.UIElement.OnPreviewMouseRightButtonUp%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект класса <see cref="T:System.Windows.Input.MouseButtonEventArgs" />, содержащий данные о событии. Данные о событии информируют об отжатии одной или нескольких кнопок мыши.</param>
        <summary>Вызывается, когда необработанное вложенное событие <see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /> встречает на своем маршруте элемент, производный от этого класса. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Действия кнопок мыши также обрабатываются выделенным диспетчером ввода. Другие программные функции, зависит от действия кнопок мыши, такие как входные данные и привязки команд, могут вызывать обработчики для действия, прежде чем оно будет представлено как общее действие кнопки мыши. Если эти входные знак компоненты системы <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> событие как обработанное, <xref:System.Windows.UIElement.OnPreviewMouseUp%2A> не вызывается.  
  
 При использовании этого класса обработчика пометить событие как обработанное потенциально повлияет на следующие события: <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> и <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>. Одно из этих событий может быть вызвано в элементе принимающей при <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> принимается.  
  
 Если пометить это событие как обработанное в обработке класса, вложенные события все равно инициируются; Однако они передают состояние обработки в данных события. Если событие обрабатывается в обработку класса, обработчиками для под не вызываются до явно использовать <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> с `handledEventsToo` `true` для присоединения обработчиков. Обработчики класса также не вызываются до этих обработчиков классов были зарегистрированы с <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> подпись с `handledEventsToo` `true`. При обработке <xref:System.Windows.UIElement.OnPreviewMouseUp%2A>, подразумевая учета на обработку класса для всех возможных отпускания кнопки мыши действия. Это поведение может быть нежелательным; Поэтому необходимо соблюдайте осторожность при использовании данного виртуального метода для пометки события как обработанное.  
  
 Каждое из событий прямой кнопками имеется виртуальный * метода. Рассмотрите возможность ли переопределение этих обработчиков класса может оказаться более подходящей.  
  
 У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации.  
  
 Этот метод аналогичен [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] шаблона On * методы: этот метод предоставляет средства для обработки соответствующего события из производных классов с помощью обработчика класса вместо обработчика экземпляра. В этом случае соответствующее событие является маршрутизируемым. Шаблон реализации методов On * отличается для перенаправленных событий, поскольку перенаправленное событие может генерироваться дочерним элементом, который не обязательно является элемент, который будет вызывать обработчики. Таким образом реализации необходимо изучить исходные свойства данных события. Чтобы повторно инициировать событие в большинстве случаев не рекомендуется.  
  
 Путем переопределения этого метода или путем регистрации класса обработчиков с <xref:System.Windows.EventManager.RegisterClassHandler%2A>, классы, унаследованные от <xref:System.Windows.UIElement> может вызывать методы обработчика закрытый класс, при получении события на маршруте события. Один сценарий, где обработка класса является управление данными события и пометить перенаправленное событие как обработанное.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseWheel">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseWheel (System.Windows.Input.MouseWheelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseWheel(class System.Windows.Input.MouseWheelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseWheel (e As MouseWheelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseWheel(System::Windows::Input::MouseWheelEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseWheelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект класса <see cref="T:System.Windows.Input.MouseWheelEventArgs" />, содержащий данные о событии.</param>
        <summary>Вызывается, когда необработанное вложенное событие <see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /> встречает на своем маршруте элемент, производный от этого класса. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации.  
  
 Этот метод аналогичен [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] шаблона On * методы: этот метод предоставляет средства для обработки соответствующего события из производных классов с помощью обработчика класса вместо обработчика экземпляра. В этом случае соответствующее событие является маршрутизируемым. Шаблон реализации методов On * отличается для перенаправленных событий, поскольку перенаправленное событие может генерироваться дочерним элементом, который не обязательно является элемент, который будет вызывать обработчики. Таким образом реализации необходимо изучить исходные свойства данных события. Чтобы повторно инициировать событие в большинстве случаев не рекомендуется.  
  
 Путем переопределения этого метода или путем регистрации класса обработчиков с <xref:System.Windows.EventManager.RegisterClassHandler%2A>, классы, унаследованные от <xref:System.Windows.UIElement> может вызывать методы обработчика закрытый класс, при получении события на маршруте события. Один сценарий, где обработка класса является управление данными события и пометить перенаправленное событие как обработанное. Еще один сценарий, в частности для предварительного просмотра событий: пометить их как обрабатываемые, чтобы соответствующие восходящие обработчики класса не вызываются.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseWheel" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewQueryContinueDrag">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewQueryContinueDrag(class System.Windows.QueryContinueDragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewQueryContinueDrag (e As QueryContinueDragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewQueryContinueDrag(System::Windows::QueryContinueDragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.QueryContinueDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект класса <see cref="T:System.Windows.QueryContinueDragEventArgs" />, содержащий данные о событии.</param>
        <summary>Вызывается, когда необработанное вложенное событие <see cref="E:System.Windows.DragDrop.PreviewQueryContinueDrag" /> встречает на своем маршруте элемент, производный от этого класса. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации.  
  
 Этот метод аналогичен [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] шаблона On * методы: этот метод предоставляет средства для обработки соответствующего события из производных классов с помощью обработчика класса вместо обработчика экземпляра. В этом случае соответствующее событие является маршрутизируемым. Шаблон реализации методов On * отличается для перенаправленных событий, поскольку перенаправленное событие может генерироваться дочерним элементом, который не обязательно является элемент, который будет вызывать обработчики. Таким образом реализации необходимо изучить исходные свойства данных события. Чтобы повторно инициировать событие в большинстве случаев не рекомендуется.  
  
 Путем переопределения этого метода или путем регистрации класса обработчиков с <xref:System.Windows.EventManager.RegisterClassHandler%2A>, классы, унаследованные от <xref:System.Windows.UIElement> может вызывать методы обработчика закрытый класс, при получении события на маршруте события. Один сценарий, где обработка класса является управление данными события и пометить перенаправленное событие как обработанное. Еще один сценарий, в частности для предварительного просмотра событий: пометить их как обрабатываемые, чтобы соответствующие восходящие обработчики класса не вызываются.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewQueryContinueDrag" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusButtonDown(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusButtonDown (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusButtonDown(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект класса <see cref="T:System.Windows.Input.StylusButtonEventArgs" />, содержащий данные о событии.</param>
        <summary>Вызывается, когда необработанное вложенное событие <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonDown" /> встречает на своем маршруте элемент, производный от этого класса. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации.  
  
 Этот метод аналогичен [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] шаблона On * методы: этот метод предоставляет средства для обработки соответствующего события из производных классов с помощью обработчика класса вместо обработчика экземпляра. В этом случае соответствующее событие является маршрутизируемым. Шаблон реализации методов On * отличается для перенаправленных событий, поскольку перенаправленное событие может генерироваться дочерним элементом, который не обязательно является элемент, который будет вызывать обработчики. Таким образом реализации необходимо изучить исходные свойства данных события. Чтобы повторно инициировать событие в большинстве случаев не рекомендуется.  
  
 Путем переопределения этого метода или путем регистрации класса обработчиков с <xref:System.Windows.EventManager.RegisterClassHandler%2A>, классы, унаследованные от <xref:System.Windows.UIElement> может вызывать методы обработчика закрытый класс, при получении события на маршруте события. Один сценарий, где обработка класса является управление данными события и пометить перенаправленное событие как обработанное. Еще один сценарий, в частности для предварительного просмотра событий: пометить их как обрабатываемые, чтобы соответствующие восходящие обработчики класса не вызываются.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusButtonUp(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusButtonUp (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusButtonUp(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект класса <see cref="T:System.Windows.Input.StylusButtonEventArgs" />, содержащий данные о событии.</param>
        <summary>Вызывается, когда необработанное вложенное событие <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonUp" /> встречает на своем маршруте элемент, производный от этого класса. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации.  
  
 Этот метод аналогичен [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] шаблона On * методы: этот метод предоставляет средства для обработки соответствующего события из производных классов с помощью обработчика класса вместо обработчика экземпляра. В этом случае соответствующее событие является маршрутизируемым. Шаблон реализации методов On * отличается для перенаправленных событий, поскольку перенаправленное событие может генерироваться дочерним элементом, который не обязательно является элемент, который будет вызывать обработчики. Таким образом реализации необходимо изучить исходные свойства данных события. Чтобы повторно инициировать событие в большинстве случаев не рекомендуется.  
  
 Путем переопределения этого метода или путем регистрации класса обработчиков с <xref:System.Windows.EventManager.RegisterClassHandler%2A>, классы, унаследованные от <xref:System.Windows.UIElement> может вызывать методы обработчика закрытый класс, при получении события на маршруте события. Один сценарий, где обработка класса является управление данными события и пометить перенаправленное событие как обработанное. Еще один сценарий, в частности для предварительного просмотра событий: пометить их как обрабатываемые, чтобы соответствующие восходящие обработчики класса не вызываются.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusDown (System.Windows.Input.StylusDownEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusDown(class System.Windows.Input.StylusDownEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusDown (e As StylusDownEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusDown(System::Windows::Input::StylusDownEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusDownEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект класса <see cref="T:System.Windows.Input.StylusDownEventArgs" />, содержащий данные о событии.</param>
        <summary>Вызывается, когда необработанное вложенное событие <see cref="E:System.Windows.Input.Stylus.PreviewStylusDown" /> встречает на своем маршруте элемент, производный от этого класса. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации.  
  
 Этот метод аналогичен [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] шаблона On * методы: этот метод предоставляет средства для обработки соответствующего события из производных классов с помощью обработчика класса вместо обработчика экземпляра. В этом случае соответствующее событие является маршрутизируемым. Шаблон реализации методов On * отличается для перенаправленных событий, поскольку перенаправленное событие может генерироваться дочерним элементом, который не обязательно является элемент, который будет вызывать обработчики. Таким образом реализации необходимо изучить исходные свойства данных события. Чтобы повторно инициировать событие в большинстве случаев не рекомендуется.  
  
 Путем переопределения этого метода или путем регистрации класса обработчиков с <xref:System.Windows.EventManager.RegisterClassHandler%2A>, классы, унаследованные от <xref:System.Windows.UIElement> может вызывать методы обработчика закрытый класс, при получении события на маршруте события. Один сценарий, где обработка класса является управление данными события и пометить перенаправленное событие как обработанное. Еще один сценарий, в частности для предварительного просмотра событий: пометить их как обрабатываемые, чтобы соответствующие восходящие обработчики класса не вызываются.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusInAirMove">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusInAirMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusInAirMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusInAirMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusInAirMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект класса <see cref="T:System.Windows.Input.StylusEventArgs" />, содержащий данные о событии.</param>
        <summary>Вызывается, когда необработанное вложенное событие <see cref="E:System.Windows.Input.Stylus.PreviewStylusInAirMove" /> встречает на своем маршруте элемент, производный от этого класса. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации.  
  
 Этот метод аналогичен [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] шаблона On * методы: этот метод предоставляет средства для обработки соответствующего события из производных классов с помощью обработчика класса вместо обработчика экземпляра. В этом случае соответствующее событие является маршрутизируемым. Шаблон реализации методов On * отличается для перенаправленных событий, поскольку перенаправленное событие может генерироваться дочерним элементом, который не обязательно является элемент, который будет вызывать обработчики. Таким образом реализации необходимо изучить исходные свойства данных события. Чтобы повторно инициировать событие в большинстве случаев не рекомендуется.  
  
 Путем переопределения этого метода или путем регистрации класса обработчиков с <xref:System.Windows.EventManager.RegisterClassHandler%2A>, классы, унаследованные от <xref:System.Windows.UIElement> может вызывать методы обработчика закрытый класс, при получении события на маршруте события. Один сценарий, где обработка класса является управление данными события и пометить перенаправленное событие как обработанное. Еще один сценарий, в частности для предварительного просмотра событий: пометить их как обрабатываемые, чтобы соответствующие восходящие обработчики класса не вызываются.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusInAirMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusInRange">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusInRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusInRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusInRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusInRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект класса <see cref="T:System.Windows.Input.StylusEventArgs" />, содержащий данные о событии.</param>
        <summary>Вызывается, когда необработанное вложенное событие <see cref="E:System.Windows.Input.Stylus.PreviewStylusInRange" /> встречает на своем маршруте элемент, производный от этого класса. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации.  
  
 Этот метод аналогичен [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] шаблона On * методы: этот метод предоставляет средства для обработки соответствующего события из производных классов с помощью обработчика класса вместо обработчика экземпляра. В этом случае соответствующее событие является маршрутизируемым. Шаблон реализации методов On * отличается для перенаправленных событий, поскольку перенаправленное событие может генерироваться дочерним элементом, который не обязательно является элемент, который будет вызывать обработчики. Таким образом реализации необходимо изучить исходные свойства данных события. Чтобы повторно инициировать событие в большинстве случаев не рекомендуется.  
  
 Путем переопределения этого метода или путем регистрации класса обработчиков с <xref:System.Windows.EventManager.RegisterClassHandler%2A>, классы, унаследованные от <xref:System.Windows.UIElement> может вызывать методы обработчика закрытый класс, при получении события на маршруте события. Один сценарий, где обработка класса является управление данными события и пометить перенаправленное событие как обработанное. Еще один сценарий, в частности для предварительного просмотра событий: пометить их как обрабатываемые, чтобы соответствующие восходящие обработчики класса не вызываются.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusInRange" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusMove">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект класса <see cref="T:System.Windows.Input.StylusEventArgs" />, содержащий данные о событии.</param>
        <summary>Вызывается, когда необработанное вложенное событие <see cref="E:System.Windows.Input.Stylus.PreviewStylusMove" /> встречает на своем маршруте элемент, производный от этого класса. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации.  
  
 Этот метод аналогичен [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] шаблона On * методы: этот метод предоставляет средства для обработки соответствующего события из производных классов с помощью обработчика класса вместо обработчика экземпляра. В этом случае соответствующее событие является маршрутизируемым. Шаблон реализации методов On * отличается для перенаправленных событий, поскольку перенаправленное событие может генерироваться дочерним элементом, который не обязательно является элемент, который будет вызывать обработчики. Таким образом реализации необходимо изучить исходные свойства данных события. Чтобы повторно инициировать событие в большинстве случаев не рекомендуется.  
  
 Путем переопределения этого метода или путем регистрации класса обработчиков с <xref:System.Windows.EventManager.RegisterClassHandler%2A>, классы, унаследованные от <xref:System.Windows.UIElement> может вызывать методы обработчика закрытый класс, при получении события на маршруте события. Один сценарий, где обработка класса является управление данными события и пометить перенаправленное событие как обработанное. Еще один сценарий, в частности для предварительного просмотра событий: пометить их как обрабатываемые, чтобы соответствующие восходящие обработчики класса не вызываются.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusOutOfRange">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusOutOfRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusOutOfRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusOutOfRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusOutOfRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект класса <see cref="T:System.Windows.Input.StylusEventArgs" />, содержащий данные о событии.</param>
        <summary>Вызывается, когда необработанное вложенное событие <see cref="E:System.Windows.Input.Stylus.PreviewStylusOutOfRange" /> встречает на своем маршруте элемент, производный от этого класса. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации.  
  
 Этот метод аналогичен [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] шаблона On * методы: этот метод предоставляет средства для обработки соответствующего события из производных классов с помощью обработчика класса вместо обработчика экземпляра. В этом случае соответствующее событие является маршрутизируемым. Шаблон реализации методов On * отличается для перенаправленных событий, поскольку перенаправленное событие может генерироваться дочерним элементом, который не обязательно является элемент, который будет вызывать обработчики. Таким образом реализации необходимо изучить исходные свойства данных события. Чтобы повторно инициировать событие в большинстве случаев не рекомендуется.  
  
 Путем переопределения этого метода или путем регистрации класса обработчиков с <xref:System.Windows.EventManager.RegisterClassHandler%2A>, классы, унаследованные от <xref:System.Windows.UIElement> может вызывать методы обработчика закрытый класс, при получении события на маршруте события. Один сценарий, где обработка класса является управление данными события и пометить перенаправленное событие как обработанное. Еще один сценарий, в частности для предварительного просмотра событий: пометить их как обрабатываемые, чтобы соответствующие восходящие обработчики класса не вызываются.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusOutOfRange" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusSystemGesture">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusSystemGesture(class System.Windows.Input.StylusSystemGestureEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusSystemGesture (e As StylusSystemGestureEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusSystemGesture(System::Windows::Input::StylusSystemGestureEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusSystemGestureEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект класса <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" />, содержащий данные о событии.</param>
        <summary>Вызывается, когда необработанное вложенное событие <see cref="E:System.Windows.Input.Stylus.PreviewStylusSystemGesture" /> встречает на своем маршруте элемент, производный от этого класса. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации.  
  
 Этот метод аналогичен [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] шаблона On * методы: этот метод предоставляет средства для обработки соответствующего события из производных классов с помощью обработчика класса вместо обработчика экземпляра. В этом случае соответствующее событие является маршрутизируемым. Шаблон реализации методов On * отличается для перенаправленных событий, поскольку перенаправленное событие может генерироваться дочерним элементом, который не обязательно является элемент, который будет вызывать обработчики. Таким образом реализации необходимо изучить исходные свойства данных события. Чтобы повторно инициировать событие в большинстве случаев не рекомендуется.  
  
 Путем переопределения этого метода или путем регистрации класса обработчиков с <xref:System.Windows.EventManager.RegisterClassHandler%2A>, классы, унаследованные от <xref:System.Windows.UIElement> может вызывать методы обработчика закрытый класс, при получении события на маршруте события. Один сценарий, где обработка класса является управление данными события и пометить перенаправленное событие как обработанное. Еще один сценарий, в частности для предварительного просмотра событий: пометить их как обрабатываемые, чтобы соответствующие восходящие обработчики класса не вызываются.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusSystemGesture" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusUp (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusUp(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusUp (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusUp(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект класса <see cref="T:System.Windows.Input.StylusEventArgs" />, содержащий данные о событии.</param>
        <summary>Вызывается, когда необработанное вложенное событие <see cref="E:System.Windows.Input.Stylus.PreviewStylusUp" /> встречает на своем маршруте элемент, производный от этого класса. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации.  
  
 Этот метод аналогичен [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] шаблона On * методы: этот метод предоставляет средства для обработки соответствующего события из производных классов с помощью обработчика класса вместо обработчика экземпляра. В этом случае соответствующее событие является маршрутизируемым. Шаблон реализации методов On * отличается для перенаправленных событий, поскольку перенаправленное событие может генерироваться дочерним элементом, который не обязательно является элемент, который будет вызывать обработчики. Таким образом реализации необходимо изучить исходные свойства данных события. Чтобы повторно инициировать событие в большинстве случаев не рекомендуется.  
  
 Путем переопределения этого метода или путем регистрации класса обработчиков с <xref:System.Windows.EventManager.RegisterClassHandler%2A>, классы, унаследованные от <xref:System.Windows.UIElement> может вызывать методы обработчика закрытый класс, при получении события на маршруте события. Один сценарий, где обработка класса является управление данными события и пометить перенаправленное событие как обработанное. Еще один сценарий, в частности для предварительного просмотра событий: пометить их как обрабатываемые, чтобы соответствующие восходящие обработчики класса не вызываются.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTextInput">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewTextInput (System.Windows.Input.TextCompositionEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewTextInput(class System.Windows.Input.TextCompositionEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewTextInput (e As TextCompositionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewTextInput(System::Windows::Input::TextCompositionEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TextCompositionEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект класса <see cref="T:System.Windows.Input.TextCompositionEventArgs" />, содержащий данные о событии.</param>
        <summary>Вызывается, когда необработанное вложенное событие <see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInput" /> встречает на своем маршруте элемент, производный от этого класса. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации.  
  
 Этот метод аналогичен [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] шаблона On * методы: этот метод предоставляет средства для обработки соответствующего события из производных классов с помощью обработчика класса вместо обработчика экземпляра. В этом случае соответствующее событие является маршрутизируемым. Шаблон реализации методов On * отличается для перенаправленных событий, поскольку перенаправленное событие может генерироваться дочерним элементом, который не обязательно является элемент, который будет вызывать обработчики. Таким образом реализации необходимо изучить исходные свойства данных события. Чтобы повторно инициировать событие в большинстве случаев не рекомендуется.  
  
 Путем переопределения этого метода или путем регистрации класса обработчиков с <xref:System.Windows.EventManager.RegisterClassHandler%2A>, классы, унаследованные от <xref:System.Windows.UIElement> может вызывать методы обработчика закрытый класс, при получении события на маршруте события. Один сценарий, где обработка класса является управление данными события и пометить перенаправленное событие как обработанное. Еще один сценарий, в частности для предварительного просмотра событий: пометить их как обрабатываемые, чтобы соответствующие восходящие обработчики класса не вызываются.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)" />
        <altmember cref="E:System.Windows.UIElement.PreviewTextInput" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewTouchDown (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewTouchDown(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewTouchDown (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewTouchDown(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект <see cref="T:System.Windows.Input.TouchEventArgs" />, содержащий данные события.</param>
        <summary>Предоставляет обработку класса для перенаправленного события <see cref="E:System.Windows.UIElement.PreviewTouchDown" />, которое происходит при сенсорном нажатии данного элемента.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> У метода нет реализации по умолчанию. Переопределить <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> в производном классе позволяет обработать <xref:System.Windows.UIElement.PreviewTouchDown> событий. Необходимо вызвать метод базового класса <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> метод, базовые классы получили событие.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchMove">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewTouchMove (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewTouchMove(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewTouchMove (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewTouchMove(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект <see cref="T:System.Windows.Input.TouchEventArgs" />, содержащий данные события.</param>
        <summary>Предоставляет обработку класса для маршрутизируемого события <see cref="E:System.Windows.UIElement.PreviewTouchMove" />, которое происходит при перемещении касания внутри этого элемента.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> У метода нет реализации по умолчанию. Переопределить <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> в производном классе позволяет обработать <xref:System.Windows.UIElement.PreviewTouchMove> событий. Необходимо вызвать метод базового класса <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> метод, базовые классы получили событие.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewTouchUp (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewTouchUp(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewTouchUp (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewTouchUp(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект <see cref="T:System.Windows.Input.TouchEventArgs" />, содержащий данные события.</param>
        <summary>Предоставляет обработку класса для перенаправленного события <see cref="E:System.Windows.UIElement.PreviewTouchUp" />, которое происходит при прекращении сенсорного нажатия внутри элемента.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> У метода нет реализации по умолчанию. Переопределить <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> в производном классе позволяет обработать <xref:System.Windows.UIElement.PreviewTouchUp> событий. Необходимо вызвать метод базового класса <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> метод, базовые классы получили событие.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnQueryContinueDrag">
      <MemberSignature Language="C#" Value="protected virtual void OnQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnQueryContinueDrag(class System.Windows.QueryContinueDragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnQueryContinueDrag (e As QueryContinueDragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnQueryContinueDrag(System::Windows::QueryContinueDragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.QueryContinueDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект класса <see cref="T:System.Windows.QueryContinueDragEventArgs" />, содержащий данные о событии.</param>
        <summary>Вызывается, когда необработанное вложенное событие <see cref="E:System.Windows.DragDrop.QueryContinueDrag" /> встречает на своем маршруте элемент, производный от этого класса. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации.  
  
 Этот метод аналогичен [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] шаблона On * методы: этот метод предоставляет средства для обработки соответствующего события из производных классов с помощью обработчика класса вместо обработчика экземпляра. В этом случае соответствующее событие является маршрутизируемым. Шаблон реализации методов On * отличается для перенаправленных событий, поскольку перенаправленное событие может генерироваться дочерним элементом, который не обязательно является элемент, который будет вызывать обработчики. Таким образом реализации необходимо изучить исходные свойства данных события. Чтобы повторно инициировать событие в большинстве случаев не рекомендуется.  
  
 Путем переопределения этого метода или путем регистрации класса обработчиков с <xref:System.Windows.EventManager.RegisterClassHandler%2A>, классы, унаследованные от <xref:System.Windows.UIElement> может вызывать методы обработчика закрытый класс, при получении события на маршруте события. Один сценарий, где обработка класса является управление данными события и пометить перенаправленное событие как обработанное.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.QueryContinueDrag" />
      </Docs>
    </Member>
    <Member MemberName="OnQueryCursor">
      <MemberSignature Language="C#" Value="protected virtual void OnQueryCursor (System.Windows.Input.QueryCursorEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnQueryCursor(class System.Windows.Input.QueryCursorEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnQueryCursor (e As QueryCursorEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnQueryCursor(System::Windows::Input::QueryCursorEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.QueryCursorEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект класса <see cref="T:System.Windows.Input.QueryCursorEventArgs" />, содержащий данные о событии.</param>
        <summary>Вызывается, когда необработанное вложенное событие <see cref="E:System.Windows.Input.Mouse.QueryCursor" /> встречает на своем маршруте элемент, производный от этого класса. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации.  
  
 Этот метод аналогичен [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] шаблона On * методы: этот метод предоставляет средства для обработки соответствующего события из производных классов с помощью обработчика класса вместо обработчика экземпляра. В этом случае соответствующее событие является маршрутизируемым. Шаблон реализации методов On * отличается для перенаправленных событий, поскольку перенаправленное событие может генерироваться дочерним элементом, который не обязательно является элемент, который будет вызывать обработчики. Таким образом реализации необходимо изучить исходные свойства данных события. Чтобы повторно инициировать событие в большинстве случаев не рекомендуется.  
  
 Путем переопределения этого метода или путем регистрации класса обработчиков с <xref:System.Windows.EventManager.RegisterClassHandler%2A>, классы, унаследованные от <xref:System.Windows.UIElement> может вызывать методы обработчика закрытый класс, при получении события на маршруте события. Один сценарий, где обработка класса является управление данными события и пометить перенаправленное событие как обработанное.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.QueryCursor" />
      </Docs>
    </Member>
    <Member MemberName="OnRender">
      <MemberSignature Language="C#" Value="protected virtual void OnRender (System.Windows.Media.DrawingContext drawingContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRender(class System.Windows.Media.DrawingContext drawingContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRender(System::Windows::Media::DrawingContext ^ drawingContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="drawingContext" Type="System.Windows.Media.DrawingContext" />
      </Parameters>
      <Docs>
        <param name="drawingContext">Инструкции по рисованию конкретного элемента. Данный контекст предоставляется системе структуры.</param>
        <summary>При переопределении в производном классе участвует в операциях отрисовки, направляемых системой макета. Инструкции отрисовки для данного элемента не используются непосредственно при вызове данного метода, а вместо этого сохраняются для последующего асинхронного использования при структурировании и рисовании.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 У этого метода нет реализации по умолчанию <xref:System.Windows.UIElement> класса.  
  
   
  
## Examples  
 В следующем примере кода показана возможная реализация для производного класса панели.  
  
 [!code-csharp[LightWeightCustomPanel#1](~/samples/snippets/csharp/VS_Snippets_Wpf/LightWeightCustomPanel/CSharp/OffsetPanel.cs#1)]
 [!code-vb[LightWeightCustomPanel#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/LightWeightCustomPanel/visualbasic/offsetpanel.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" /> Метод может быть переопределен для обеспечения дополнительной графические элементы (раньше не были определены в логическом дереве) для отображаемого элемента, например эффекты или графические элементы. Объект <see cref="T:System.Windows.Media.DrawingContext" /> объект передается как аргумент, который предоставляет методы для рисования фигур, текст, изображения или видео.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnRenderSizeChanged">
      <MemberSignature Language="C#" Value="protected internal virtual void OnRenderSizeChanged (System.Windows.SizeChangedInfo info);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnRenderSizeChanged(class System.Windows.SizeChangedInfo info) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnRenderSizeChanged (info As SizeChangedInfo)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnRenderSizeChanged(System::Windows::SizeChangedInfo ^ info);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Windows.SizeChangedInfo" />
      </Parameters>
      <Docs>
        <param name="info">Упакованные параметры (<see cref="T:System.Windows.SizeChangedInfo" />), в том числе старые и новые размеры и величина, которая фактически изменилась.</param>
        <summary>При переопределении в производном классе участвует в операциях отрисовки, направляемых системой макета. Данный метод вызывается после обновления структуры и перед отрисовкой, если свойство <see cref="P:System.Windows.UIElement.RenderSize" /> элемента было изменено в результате обновления структуры.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 У этого метода нет реализации по умолчанию. Обычный элемент уровня платформы WPF использует реализации переопределения из <xref:System.Windows.FrameworkElement>. <xref:System.Windows.FrameworkElement> Делает недействительными реализацию <xref:System.Windows.FrameworkElement.Width%2A> и <xref:System.Windows.FrameworkElement.Height%2A> свойств и дескрипторы основы изменяют макет. Переопределение <xref:System.Windows.UIElement.OnRenderSizeChanged%2A> в <xref:System.Windows.UIElement> уровень означает, что элемент реализации намеренно не используется реализация уровня инфраструктуры WPF, и поэтому элемент должен обрабатывать логику макета напрямую, обычно путем написания система макета замены.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnStylusButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusButtonDown(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusButtonDown (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusButtonDown(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект класса <see cref="T:System.Windows.Input.StylusButtonEventArgs" />, содержащий данные о событии.</param>
        <summary>Вызывается, когда необработанное вложенное событие <see cref="E:System.Windows.Input.Stylus.StylusButtonDown" /> встречает на своем маршруте элемент, производный от этого класса. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации.  
  
 Этот метод аналогичен [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] шаблона On * методы: этот метод предоставляет средства для обработки соответствующего события из производных классов с помощью обработчика класса вместо обработчика экземпляра. В этом случае соответствующее событие является маршрутизируемым. Шаблон реализации методов On * отличается для перенаправленных событий, поскольку перенаправленное событие может генерироваться дочерним элементом, который не обязательно является элемент, который будет вызывать обработчики. Таким образом реализации необходимо изучить исходные свойства данных события. Чтобы повторно инициировать событие в большинстве случаев не рекомендуется.  
  
 Путем переопределения этого метода или путем регистрации класса обработчиков с <xref:System.Windows.EventManager.RegisterClassHandler%2A>, классы, унаследованные от <xref:System.Windows.UIElement> может вызывать методы обработчика закрытый класс, при получении события на маршруте события. Один сценарий, где обработка класса является управление данными события и пометить перенаправленное событие как обработанное.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusButtonUp(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusButtonUp (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusButtonUp(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект класса <see cref="T:System.Windows.Input.StylusButtonEventArgs" />, содержащий данные о событии.</param>
        <summary>Вызывается, когда необработанное вложенное событие <see cref="E:System.Windows.Input.Stylus.StylusButtonUp" /> встречает на своем маршруте элемент, производный от этого класса. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации.  
  
 Этот метод аналогичен [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] шаблона On * методы: этот метод предоставляет средства для обработки соответствующего события из производных классов с помощью обработчика класса вместо обработчика экземпляра. В этом случае соответствующее событие является маршрутизируемым. Шаблон реализации методов On * отличается для перенаправленных событий, поскольку перенаправленное событие может генерироваться дочерним элементом, который не обязательно является элемент, который будет вызывать обработчики. Таким образом реализации необходимо изучить исходные свойства данных события. Чтобы повторно инициировать событие в большинстве случаев не рекомендуется.  
  
 Путем переопределения этого метода или путем регистрации класса обработчиков с <xref:System.Windows.EventManager.RegisterClassHandler%2A>, классы, унаследованные от <xref:System.Windows.UIElement> может вызывать методы обработчика закрытый класс, при получении события на маршруте события. Один сценарий, где обработка класса является управление данными события и пометить перенаправленное событие как обработанное.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusDown">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusDown (System.Windows.Input.StylusDownEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusDown(class System.Windows.Input.StylusDownEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusDown (e As StylusDownEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusDown(System::Windows::Input::StylusDownEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusDownEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект класса <see cref="T:System.Windows.Input.StylusDownEventArgs" />, содержащий данные о событии.</param>
        <summary>Вызывается, когда необработанное вложенное событие <see cref="E:System.Windows.Input.Stylus.StylusDown" /> встречает на своем маршруте элемент, производный от этого класса. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации.  
  
 Этот метод аналогичен [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] шаблона On * методы: этот метод предоставляет средства для обработки соответствующего события из производных классов с помощью обработчика класса вместо обработчика экземпляра. В этом случае соответствующее событие является маршрутизируемым. Шаблон реализации методов On * отличается для перенаправленных событий, поскольку перенаправленное событие может генерироваться дочерним элементом, который не обязательно является элемент, который будет вызывать обработчики. Таким образом реализации необходимо изучить исходные свойства данных события. Чтобы повторно инициировать событие в большинстве случаев не рекомендуется.  
  
 Путем переопределения этого метода или путем регистрации класса обработчиков с <xref:System.Windows.EventManager.RegisterClassHandler%2A>, классы, унаследованные от <xref:System.Windows.UIElement> может вызывать методы обработчика закрытый класс, при получении события на маршруте события. Один сценарий, где обработка класса является управление данными события и пометить перенаправленное событие как обработанное.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusDown" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusEnter (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusEnter(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusEnter (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusEnter(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект класса <see cref="T:System.Windows.Input.StylusEventArgs" />, содержащий данные о событии.</param>
        <summary>Вызывается, когда необработанное вложенное событие <see cref="E:System.Windows.Input.Stylus.StylusEnter" /> вызывается этим элементом. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации. Вызов базовой реализации можно до или после специальной обработки, в зависимости от требований.  
  
 Этот метод аналогичен [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] шаблона On * методы: этот метод предоставляет средства для обработки соответствующего события из производных классов с помощью обработчика класса вместо обработчика экземпляра. В этом случае соответствующее событие является маршрутизируемым. Пометка события обрабатываются по-прежнему полезно для предотвращения обработчиками (для которых не указан `handledEventsToo`) вызов.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusInAirMove">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusInAirMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusInAirMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusInAirMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusInAirMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект класса <see cref="T:System.Windows.Input.StylusEventArgs" />, содержащий данные о событии.</param>
        <summary>Вызывается, когда необработанное вложенное событие <see cref="E:System.Windows.Input.Stylus.StylusInAirMove" /> встречает на своем маршруте элемент, производный от этого класса. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации.  
  
 Этот метод аналогичен [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] шаблона On * методы: этот метод предоставляет средства для обработки соответствующего события из производных классов с помощью обработчика класса вместо обработчика экземпляра. В этом случае соответствующее событие является маршрутизируемым. Шаблон реализации методов On * отличается для перенаправленных событий, поскольку перенаправленное событие может генерироваться дочерним элементом, который не обязательно является элемент, который будет вызывать обработчики. Таким образом реализации необходимо изучить исходные свойства данных события. Чтобы повторно инициировать событие в большинстве случаев не рекомендуется.  
  
 Путем переопределения этого метода или путем регистрации класса обработчиков с <xref:System.Windows.EventManager.RegisterClassHandler%2A>, классы, унаследованные от <xref:System.Windows.UIElement> может вызывать методы обработчика закрытый класс, при получении события на маршруте события. Один сценарий, где обработка класса является управление данными события и пометить перенаправленное событие как обработанное.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusInAirMove" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusInRange">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusInRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusInRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusInRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusInRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект класса <see cref="T:System.Windows.Input.StylusEventArgs" />, содержащий данные о событии.</param>
        <summary>Вызывается, когда необработанное вложенное событие <see cref="E:System.Windows.Input.Stylus.StylusInRange" /> встречает на своем маршруте элемент, производный от этого класса. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации.  
  
 Этот метод аналогичен [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] шаблона On * методы: этот метод предоставляет средства для обработки соответствующего события из производных классов с помощью обработчика класса вместо обработчика экземпляра. В этом случае соответствующее событие является маршрутизируемым. Шаблон реализации методов On * отличается для перенаправленных событий, поскольку перенаправленное событие может генерироваться дочерним элементом, который не обязательно является элемент, который будет вызывать обработчики. Таким образом реализации необходимо изучить исходные свойства данных события. Чтобы повторно инициировать событие в большинстве случаев не рекомендуется.  
  
 Путем переопределения этого метода или путем регистрации класса обработчиков с <xref:System.Windows.EventManager.RegisterClassHandler%2A>, классы, унаследованные от <xref:System.Windows.UIElement> может вызывать методы обработчика закрытый класс, при получении события на маршруте события. Один сценарий, где обработка класса является управление данными события и пометить перенаправленное событие как обработанное.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusInRange" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusLeave (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusLeave(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusLeave (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusLeave(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект класса <see cref="T:System.Windows.Input.StylusEventArgs" />, содержащий данные о событии.</param>
        <summary>Вызывается, когда необработанное вложенное событие <see cref="E:System.Windows.Input.Stylus.StylusLeave" /> вызывается этим элементом. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации. Вызов базовой реализации можно до или после специальной обработки, в зависимости от требований.  
  
 Этот метод аналогичен [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] шаблона On * методы: этот метод предоставляет средства для обработки соответствующего события из производных классов с помощью обработчика класса вместо обработчика экземпляра. В этом случае соответствующее событие является маршрутизируемым. Пометка события обрабатываются по-прежнему полезно для предотвращения обработчиками (для которых не указан `handledEventsToo`) вызов.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusMove">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект класса <see cref="T:System.Windows.Input.StylusEventArgs" />, содержащий данные о событии.</param>
        <summary>Вызывается, когда необработанное вложенное событие <see cref="E:System.Windows.Input.Stylus.StylusMove" /> встречает на своем маршруте элемент, производный от этого класса. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации.  
  
 Этот метод аналогичен [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] шаблона On * методы: этот метод предоставляет средства для обработки соответствующего события из производных классов с помощью обработчика класса вместо обработчика экземпляра. В этом случае соответствующее событие является маршрутизируемым. Шаблон реализации методов On * отличается для перенаправленных событий, поскольку перенаправленное событие может генерироваться дочерним элементом, который не обязательно является элемент, который будет вызывать обработчики. Таким образом реализации необходимо изучить исходные свойства данных события. Чтобы повторно инициировать событие в большинстве случаев не рекомендуется.  
  
 Путем переопределения этого метода или путем регистрации класса обработчиков с <xref:System.Windows.EventManager.RegisterClassHandler%2A>, классы, унаследованные от <xref:System.Windows.UIElement> может вызывать методы обработчика закрытый класс, при получении события на маршруте события. Один сценарий, где обработка класса является управление данными события и пометить перенаправленное событие как обработанное.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusMove" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusOutOfRange">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusOutOfRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusOutOfRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusOutOfRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusOutOfRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект класса <see cref="T:System.Windows.Input.StylusEventArgs" />, содержащий данные о событии.</param>
        <summary>Вызывается, когда необработанное вложенное событие <see cref="E:System.Windows.Input.Stylus.StylusOutOfRange" /> встречает на своем маршруте элемент, производный от этого класса. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации.  
  
 Этот метод аналогичен [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] шаблона On * методы: этот метод предоставляет средства для обработки соответствующего события из производных классов с помощью обработчика класса вместо обработчика экземпляра. В этом случае соответствующее событие является маршрутизируемым. Шаблон реализации методов On * отличается для перенаправленных событий, поскольку перенаправленное событие может генерироваться дочерним элементом, который не обязательно является элемент, который будет вызывать обработчики. Таким образом реализации необходимо изучить исходные свойства данных события. Чтобы повторно инициировать событие в большинстве случаев не рекомендуется.  
  
 Путем переопределения этого метода или путем регистрации класса обработчиков с <xref:System.Windows.EventManager.RegisterClassHandler%2A>, классы, унаследованные от <xref:System.Windows.UIElement> может вызывать методы обработчика закрытый класс, при получении события на маршруте события. Один сценарий, где обработка класса является управление данными события и пометить перенаправленное событие как обработанное.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusOutOfRange" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusSystemGesture">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusSystemGesture(class System.Windows.Input.StylusSystemGestureEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusSystemGesture (e As StylusSystemGestureEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusSystemGesture(System::Windows::Input::StylusSystemGestureEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusSystemGestureEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект класса <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" />, содержащий данные о событии.</param>
        <summary>Вызывается, когда необработанное вложенное событие <see cref="E:System.Windows.Input.Stylus.StylusSystemGesture" /> встречает на своем маршруте элемент, производный от этого класса. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации.  
  
 Этот метод аналогичен [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] шаблона On * методы: этот метод предоставляет средства для обработки соответствующего события из производных классов с помощью обработчика класса вместо обработчика экземпляра. В этом случае соответствующее событие является маршрутизируемым. Шаблон реализации методов On * отличается для перенаправленных событий, поскольку перенаправленное событие может генерироваться дочерним элементом, который не обязательно является элемент, который будет вызывать обработчики. Таким образом реализации необходимо изучить исходные свойства данных события. Чтобы повторно инициировать событие в большинстве случаев не рекомендуется.  
  
 Путем переопределения этого метода или путем регистрации класса обработчиков с <xref:System.Windows.EventManager.RegisterClassHandler%2A>, классы, унаследованные от <xref:System.Windows.UIElement> может вызывать методы обработчика закрытый класс, при получении события на маршруте события. Один сценарий, где обработка класса является управление данными события и пометить перенаправленное событие как обработанное.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusSystemGesture" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusUp">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusUp (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusUp(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusUp(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusUp (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusUp(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект класса <see cref="T:System.Windows.Input.StylusEventArgs" />, содержащий данные о событии.</param>
        <summary>Вызывается, когда необработанное вложенное событие <see cref="E:System.Windows.Input.Stylus.StylusUp" /> встречает на своем маршруте элемент, производный от этого класса. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации.  
  
 Этот метод аналогичен [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] шаблона On * методы: этот метод предоставляет средства для обработки соответствующего события из производных классов с помощью обработчика класса вместо обработчика экземпляра. В этом случае соответствующее событие является маршрутизируемым. Шаблон реализации методов On * отличается для перенаправленных событий, поскольку перенаправленное событие может генерироваться дочерним элементом, который не обязательно является элемент, который будет вызывать обработчики. Таким образом реализации необходимо изучить исходные свойства данных события. Чтобы повторно инициировать событие в большинстве случаев не рекомендуется.  
  
 Путем переопределения этого метода или путем регистрации класса обработчиков с <xref:System.Windows.EventManager.RegisterClassHandler%2A>, классы, унаследованные от <xref:System.Windows.UIElement> может вызывать методы обработчика закрытый класс, при получении события на маршруте события. Один сценарий, где обработка класса является управление данными события и пометить перенаправленное событие как обработанное.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusUp" />
      </Docs>
    </Member>
    <Member MemberName="OnTextInput">
      <MemberSignature Language="C#" Value="protected virtual void OnTextInput (System.Windows.Input.TextCompositionEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTextInput(class System.Windows.Input.TextCompositionEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTextInput (e As TextCompositionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTextInput(System::Windows::Input::TextCompositionEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TextCompositionEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект класса <see cref="T:System.Windows.Input.TextCompositionEventArgs" />, содержащий данные о событии.</param>
        <summary>Вызывается, когда необработанное вложенное событие <see cref="E:System.Windows.Input.TextCompositionManager.TextInput" /> встречает на своем маршруте элемент, производный от этого класса. Реализуйте этот метод, чтобы добавить для класса обработчик данного события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации.  
  
 Этот метод аналогичен [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] шаблона On * методы: этот метод предоставляет средства для обработки соответствующего события из производных классов с помощью обработчика класса вместо обработчика экземпляра. В этом случае соответствующее событие является маршрутизируемым. Шаблон реализации методов On * отличается для перенаправленных событий, поскольку перенаправленное событие может генерироваться дочерним элементом, который не обязательно является элемент, который будет вызывать обработчики. Таким образом реализации необходимо изучить исходные свойства данных события. Чтобы повторно инициировать событие в большинстве случаев не рекомендуется.  
  
 Путем переопределения этого метода или путем регистрации класса обработчиков с <xref:System.Windows.EventManager.RegisterClassHandler%2A>, классы, унаследованные от <xref:System.Windows.UIElement> может вызывать методы обработчика закрытый класс, при получении события на маршруте события. Один сценарий, где обработка класса является управление данными события и пометить перенаправленное событие как обработанное.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.TextInput" />
      </Docs>
    </Member>
    <Member MemberName="OnTouchDown">
      <MemberSignature Language="C#" Value="protected virtual void OnTouchDown (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouchDown(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTouchDown(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTouchDown (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTouchDown(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект <see cref="T:System.Windows.Input.TouchEventArgs" />, содержащий данные события.</param>
        <summary>Предоставляет обработку класса для перенаправленного события <see cref="E:System.Windows.UIElement.TouchDown" />, которое происходит при сенсорном нажатии внутри данного элемента.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.OnTouchDown%2A> У метода нет реализации по умолчанию. Переопределить <xref:System.Windows.UIElement.OnTouchDown%2A> в производном классе позволяет обработать <xref:System.Windows.UIElement.TouchDown> событий. Необходимо вызвать метод базового класса <xref:System.Windows.UIElement.OnTouchDown%2A> метод, базовые классы получили событие.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnTouchEnter (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouchEnter(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTouchEnter (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTouchEnter(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект <see cref="T:System.Windows.Input.TouchEventArgs" />, содержащий данные события.</param>
        <summary>Предоставляет обработку класса для перенаправленного события <see cref="E:System.Windows.UIElement.TouchEnter" />, которое происходит при сенсорном перемещении внутрь данного элемента.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.OnTouchEnter%2A> У метода нет реализации по умолчанию. Переопределить <xref:System.Windows.UIElement.OnTouchEnter%2A> в производном классе позволяет обработать <xref:System.Windows.UIElement.TouchEnter> событий. Необходимо вызвать метод базового класса <xref:System.Windows.UIElement.OnTouchEnter%2A> метод, базовые классы получили событие.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnTouchLeave (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouchLeave(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTouchLeave (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTouchLeave(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект <see cref="T:System.Windows.Input.TouchEventArgs" />, содержащий данные события.</param>
        <summary>Предоставляет обработку класса для перенаправленного события <see cref="E:System.Windows.UIElement.TouchLeave" />, которое происходит при сенсорном перемещении из данного элемента <see cref="T:System.Windows.UIElement" /> за его пределы.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.OnTouchLeave%2A> У метода нет реализации по умолчанию. Переопределить <xref:System.Windows.UIElement.OnTouchLeave%2A> в производном классе позволяет обработать <xref:System.Windows.UIElement.TouchLeave> событий. Необходимо вызвать метод базового класса <xref:System.Windows.UIElement.OnTouchLeave%2A> метод, базовые классы получили событие.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchMove">
      <MemberSignature Language="C#" Value="protected virtual void OnTouchMove (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouchMove(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTouchMove(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTouchMove (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTouchMove(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект <see cref="T:System.Windows.Input.TouchEventArgs" />, содержащий данные события.</param>
        <summary>Предоставляет обработку класса для маршрутизируемого события <see cref="E:System.Windows.UIElement.TouchMove" />, которое происходит при перемещении касания внутри этого элемента.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.OnTouchMove%2A> У метода нет реализации по умолчанию. Переопределить <xref:System.Windows.UIElement.OnTouchMove%2A> в производном классе позволяет обработать <xref:System.Windows.UIElement.TouchMove> событий. Необходимо вызвать метод базового класса <xref:System.Windows.UIElement.OnTouchMove%2A> метод, базовые классы получили событие.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchUp">
      <MemberSignature Language="C#" Value="protected virtual void OnTouchUp (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouchUp(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTouchUp(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTouchUp (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTouchUp(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект <see cref="T:System.Windows.Input.TouchEventArgs" />, содержащий данные события.</param>
        <summary>Предоставляет обработку класса для перенаправленного события <see cref="E:System.Windows.UIElement.TouchUp" />, которое происходит при прекращении сенсорного нажатия внутри элемента.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.OnTouchUp%2A> У метода нет реализации по умолчанию. Переопределить <xref:System.Windows.UIElement.OnTouchUp%2A> в производном классе позволяет обработать <xref:System.Windows.UIElement.TouchUp> событий. Необходимо вызвать метод базового класса <xref:System.Windows.UIElement.OnTouchUp%2A> метод, базовые классы получили событие.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnVisualParentChanged">
      <MemberSignature Language="C#" Value="protected internal override void OnVisualParentChanged (System.Windows.DependencyObject oldParent);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnVisualParentChanged(class System.Windows.DependencyObject oldParent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnVisualParentChanged (oldParent As DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnVisualParentChanged(System::Windows::DependencyObject ^ oldParent);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldParent" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="oldParent">Предыдущий родительский элемент. Может быть предоставлен в качестве <see langword="null" />, если <see cref="T:System.Windows.DependencyObject" /> не имел родительский элемент ранее.</param>
        <summary>Вызывается, когда родительский элемент данного <see cref="T:System.Windows.UIElement" /> сообщает об изменении в его базовом визуальном родителе.</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>При переопределении этого метода следует всегда вызовите базовую реализацию. Базовая реализация по умолчанию выполняет внутреннее обслуживание состояния свойства с обратным наследованием. Невозможность вызвать базовую реализацию сделает это состояние.  
  
 Этот метод переопределяет метод <see cref="M:System.Windows.Media.Visual.OnVisualParentChanged(System.Windows.DependencyObject)" />. <see cref="T:System.Windows.FrameworkElement" /> и <see cref="T:System.Windows.Window" /> также переопределяется <see cref="T:System.Windows.UIElement" /> реализация <see cref="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)" />, и <see cref="T:System.Windows.Window" /> запечатывает его.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Opacity">
      <MemberSignature Language="C#" Value="public double Opacity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Opacity" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Opacity" />
      <MemberSignature Language="VB.NET" Value="Public Property Opacity As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Opacity { double get(); void set(double value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает коэффициент непрозрачности, применяемый ко всему <see cref="T:System.Windows.UIElement" /> при его отрисовке в [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].  Это свойство зависимостей.</summary>
        <value>Коэффициент непрозрачности. По умолчанию непрозрачность равна 1,0. Ожидаемые значения должны находиться в диапазоне от 0,0 до 1,0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 1.0 по умолчанию используется значение по умолчанию, предоставляемые исходных метаданных этого свойства зависимостей на <xref:System.Windows.UIElement> класса. Другие производные классы потенциально может изменить это значение по умолчанию, переопределяя метаданные в своем конструкторе класса.  
  
 Значение <xref:System.Windows.UIElement.Opacity%2A> не будет применяться к фактическая структура, если элемент видим также (<xref:System.Windows.UIElement.IsVisible%2A> — `true`).  
  
 <xref:System.Windows.UIElement.Opacity%2A> применяется от родительских элементов на вниз по дереву элементов к дочерним элементам, но видимые эффекты непрозрачности вложенных параметров не указано в значении свойства отдельных дочерних элементов. Например, если список имеет прозрачность 50% (0,5) и один из его элементов есть собственная прозрачность 20% (0.2), чистая видимая прозрачность элемента списка отображается как если бы он был 10% (0,1) значения свойства элемента списка, кроме <xref:System.Windows.UIElement.Opacity%2A> свойство по-прежнему будет  0,2 при запросе.  
  
 Даже если объявленной или вычисленной прозрачности равно 0, элемент по-прежнему участвует в событиях ввода и командах и потенциально может получить фокус. Этот аспект может быть полезно, если для экземпляра можно использовать объект непрозрачности нуля (например, фигуры) для маскировки базовых объектов прозрачными элементами. Непрозрачность нулевой объект затем можно обработать все события ввода, обработки для базовой области. Тем не менее `Background` или `Fill` фигуры или объекта должно быть присвоено значение, даже если это <xref:System.Windows.Media.Brushes.Transparent%2A>, в противном случае попадания не включен, и события не принимаются.  
  
<a name="dependencyPropertyInfo_Opacity"></a>   
## <a name="dependency-property-information"></a>Сведения о свойстве зависимостей  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.OpacityProperty>|  
|Значение свойства метаданных `true`|Нет|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.OpacityMask" />
      </Docs>
    </Member>
    <Member MemberName="OpacityMask">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Brush OpacityMask { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Brush OpacityMask" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.OpacityMask" />
      <MemberSignature Language="VB.NET" Value="Public Property OpacityMask As Brush" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Brush ^ OpacityMask { System::Windows::Media::Brush ^ get(); void set(System::Windows::Media::Brush ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Brush</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает маску прозрачности как реализацию <see cref="T:System.Windows.Media.Brush" />, которая применяется к любой маскировке альфа-канала для отрисовываемого содержимого данного элемента.  Это свойство зависимостей.</summary>
        <value>Кисть для маски непрозрачности.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это свойство используется только любое значение альфа-канала — для предоставленного <xref:System.Windows.Media.Brush>. Другие каналы <xref:System.Windows.Media.Brush>отображенное содержимое (красный, зеленый или синий) игнорируются.  
  
 Наиболее распространенными <xref:System.Windows.Media.Brush> для этой цели <xref:System.Windows.Media.ImageBrush>, который может использоваться для различных маскировки методы, такие как виньетирования фото. Но любые определенные <xref:System.Windows.Media.Brush> (такие как <xref:System.Windows.Media.LinearGradientBrush>) может использоваться.  
  
 В [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)], значение этого свойства можно использовать встроенный синтаксис, относящиеся к каждой реализации <xref:System.Windows.Media.Brush> абстрактного класса. Дополнительные сведения см. в разделе [Рисование с сплошные цвета и градиенты Обзор](~/docs/framework/wpf/graphics-multimedia/painting-with-solid-colors-and-gradients-overview.md).  
  
<a name="dependencyPropertyInfo_OpacityMask"></a>   
## <a name="dependency-property-information"></a>Сведения о свойстве зависимостей  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.OpacityMaskProperty>|  
|Значение свойства метаданных `true`|Нет|  
  
   
  
## Examples  
 В следующем примере разметки показан <xref:System.Windows.Media.ImageBrush> маской непрозрачности, применяется к другому <xref:System.Windows.Controls.Image>.  
  
 [!code-xaml[OpacityMasksSnippet#UIElementOpacityMask](~/samples/snippets/csharp/VS_Snippets_Wpf/OpacityMasksSnippet/CS/ImageBrushExample.xaml#uielementopacitymask)]   
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.Opacity" />
      </Docs>
    </Member>
    <Member MemberName="OpacityMaskProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty OpacityMaskProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty OpacityMaskProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.OpacityMaskProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly OpacityMaskProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ OpacityMaskProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует свойство зависимостей <see cref="P:System.Windows.UIElement.OpacityMask" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OpacityProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty OpacityProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty OpacityProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.OpacityProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly OpacityProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ OpacityProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует свойство зависимостей <see cref="P:System.Windows.UIElement.Opacity" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PersistId">
      <MemberSignature Language="C#" Value="public int PersistId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PersistId" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.PersistId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PersistId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PersistId { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("PersistId is an obsolete property and may be removed in a future release.  The value of this property is not defined.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, уникальным образом идентифицирующее данный элемент.</summary>
        <value>Уникальный идентификатор данного элемента.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.PersistId%2A> уникально идентифицирует каждый элемент. Элемент отслеживает же <xref:System.Windows.UIElement.PersistId%2A> каждый раз же [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] загружается (включая двоичные представления). Этот идентификатор используется для внутренней загрузки, синтаксического анализа и сериализации требований. Он не предназначен для использования в коде приложения.  
  
 Это свойство не имеет отношения к <xref:System.Object.GetHashCode%2A> результат для любого данного экземпляра.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PredictFocus">
      <MemberSignature Language="C#" Value="public virtual System.Windows.DependencyObject PredictFocus (System.Windows.Input.FocusNavigationDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.DependencyObject PredictFocus(valuetype System.Windows.Input.FocusNavigationDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PredictFocus (direction As FocusNavigationDirection) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::DependencyObject ^ PredictFocus(System::Windows::Input::FocusNavigationDirection direction);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Input.FocusNavigationDirection" />
      </Parameters>
      <Docs>
        <param name="direction">Главное направление запроса на перемещение фокуса.</param>
        <summary>При переопределении в производном классе возвращает элемент, который должен получить фокус для указанного направления перемещения фокуса без перемещения фокуса на этот элемент.</summary>
        <returns>Элемент, который мог получить фокус при фактическом вызове <see cref="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Реализация по умолчанию этого метода в данном классе является неполной и всегда возвращает `null`.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      </Docs>
    </Member>
    <Member MemberName="PreviewDragEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewDragEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragEnter As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragEnter;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возникает, когда система ввода сообщает о соответствующем событии перетаскивания, имеющем в качестве источника перетаскивания этот элемент.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это событие создается псевдоним для <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType> вложенное событие для этого класса, чтобы <xref:System.Windows.UIElement.PreviewDragEnter> входит в состав класса список членов, когда <xref:System.Windows.UIElement> наследуется от базового элемента. Обработчики событий, присоединенные к <xref:System.Windows.UIElement.PreviewDragEnter> событий присоединяются к базовому объекту <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType> вложенное событие и получить тот же экземпляр данных события.  
  
<a name="routedEventInfo_PreviewDragEnter"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.PreviewDragEnterEvent>|  
|Стратегия маршрутизации|Туннелирование|  
|делегат|<xref:System.Windows.DragEventHandler>|  
  
-   Соответствующий восходящей событие <xref:System.Windows.UIElement.DragEnter>.  
  
-   Переопределить <xref:System.Windows.UIElement.OnPreviewDragEnter%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewDragEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragEnterEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.PreviewDragEnter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.  
  
 Дополнительные сведения о регистрации маршрутизированных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Дополнительные сведения об использовании идентификаторов маршрутизируемых событий для добавления обработчиков класса см. в описании метода <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewDragLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragLeave As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragLeave;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возникает, когда система ввода сообщает о соответствующем событии перетаскивания, имеющем в качестве источника перетаскивания этот элемент.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это событие создается псевдоним для <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType> вложенное событие для этого класса, чтобы <xref:System.Windows.UIElement.PreviewDragLeave> входит в состав класса список членов, когда <xref:System.Windows.UIElement> наследуется от базового элемента. Обработчики событий, присоединенные к <xref:System.Windows.UIElement.PreviewDragLeave> событий присоединяются к базовому объекту <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType> вложенное событие и получить тот же экземпляр данных события.  
  
<a name="routedEventInfo_PreviewDragLeave"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.PreviewDragLeaveEvent>|  
|Стратегия маршрутизации|Туннелирование|  
|делегат|<xref:System.Windows.DragEventHandler>|  
  
-   Соответствующий восходящей событие <xref:System.Windows.UIElement.DragLeave>.  
  
-   Переопределить <xref:System.Windows.UIElement.OnPreviewDragLeave%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewDragLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragLeaveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.PreviewDragLeave" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.  
  
 Дополнительные сведения о регистрации маршрутизированных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Дополнительные сведения об использовании идентификаторов маршрутизируемых событий для добавления обработчиков класса см. в описании метода <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragOver">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewDragOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragOver As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragOver;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит, когда подсистема ввода сообщает о соответствующем событии перетаскивания, имеющем в качестве потенциальной цели данный элемент.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это событие создается псевдоним для <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType> вложенное событие для этого класса, чтобы <xref:System.Windows.UIElement.PreviewDragOver> входит в состав класса список членов, когда <xref:System.Windows.UIElement> наследуется от базового элемента. Обработчики событий, присоединенные к <xref:System.Windows.UIElement.PreviewDragOver> событий присоединяются к базовому объекту <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType> вложенное событие и получить тот же экземпляр данных события.  
  
<a name="routedEventInfo_PreviewDragOver"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.PreviewDragOverEvent>|  
|Стратегия маршрутизации|Туннелирование|  
|делегат|<xref:System.Windows.DragEventHandler>|  
  
-   Соответствующий восходящей событие <xref:System.Windows.UIElement.DragOver>.  
  
-   Переопределить <xref:System.Windows.UIElement.OnPreviewDragOver%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragOverEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragOverEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragOverEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewDragOverEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragOverEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragOverEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.PreviewDragOver" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.  
  
 Дополнительные сведения о регистрации маршрутизированных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Дополнительные сведения об использовании идентификаторов маршрутизируемых событий для добавления обработчиков класса см. в описании метода <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDrop">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDrop;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDrop" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewDrop" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDrop As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDrop;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит, когда система ввода сообщает о базовом событии удаления с этим элементом в качестве цели удаления.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это событие создается псевдоним для <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType> вложенное событие для этого класса, чтобы <xref:System.Windows.UIElement.PreviewDrop> входит в состав класса список членов, когда <xref:System.Windows.UIElement> наследуется от базового элемента. Обработчики событий, присоединенные к <xref:System.Windows.UIElement.PreviewDrop> событий присоединяются к базовому объекту <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType> вложенное событие и получить тот же экземпляр данных события.  
  
<a name="routedEventInfo_PreviewDrop"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.PreviewDropEvent>|  
|Стратегия маршрутизации|Туннелирование|  
|делегат|<xref:System.Windows.DragEventHandler>|  
  
-   Соответствующий восходящей событие <xref:System.Windows.UIElement.Drop>.  
  
-   Переопределить <xref:System.Windows.UIElement.OnPreviewDrop%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDropEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDropEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDropEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewDropEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDropEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDropEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.PreviewDrop" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.  
  
 Дополнительные сведения о регистрации маршрутизированных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Дополнительные сведения об использовании идентификаторов маршрутизируемых событий для добавления обработчиков класса см. в описании метода <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGiveFeedback">
      <MemberSignature Language="C#" Value="public event System.Windows.GiveFeedbackEventHandler PreviewGiveFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.GiveFeedbackEventHandler PreviewGiveFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewGiveFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewGiveFeedback As GiveFeedbackEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::GiveFeedbackEventHandler ^ PreviewGiveFeedback;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.GiveFeedbackEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при начале операции перетаскивания.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.PreviewGiveFeedback> Событий позволяет источнику события перетаскивания изменять внешний вид указателя мыши, чтобы дать пользователю визуальную обратную связь во время операции перетаскивания и вставки.  
  
 Это событие создается псевдоним для <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType> вложенное событие для этого класса, чтобы <xref:System.Windows.UIElement.PreviewGiveFeedback> входит в состав класса список членов, когда <xref:System.Windows.UIElement> наследуется от базового элемента. Обработчики событий, присоединенные к <xref:System.Windows.UIElement.PreviewGiveFeedback> событий присоединяются к базовому объекту <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType> вложенное событие и получить тот же экземпляр данных события.  
  
<a name="routedEventInfo_PreviewGiveFeedback"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.PreviewGiveFeedbackEvent>|  
|Стратегия маршрутизации|Туннелирование|  
|делегат|<xref:System.Windows.GiveFeedbackEventHandler>|  
  
-   Соответствующий восходящей событие <xref:System.Windows.UIElement.GiveFeedback>.  
  
-   Переопределить <xref:System.Windows.UIElement.OnPreviewGiveFeedback%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGiveFeedbackEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewGiveFeedbackEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewGiveFeedbackEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewGiveFeedbackEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewGiveFeedbackEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewGiveFeedbackEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.PreviewGiveFeedback" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.  
  
 Дополнительные сведения о регистрации маршрутизированных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Дополнительные сведения об использовании идентификаторов маршрутизируемых событий для добавления обработчиков класса см. в описании метода <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGotKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewGotKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewGotKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ PreviewGotKeyboardFocus;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewGotKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при получении данным элементом фокуса ввода с клавиатуры.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Так как это событие нисходящей маршрутизации элемент, имеющий фокус может быть дочерний элемент, а не элемента, которому фактически присоединен обработчик событий. Проверьте <xref:System.Windows.RoutedEventArgs.Source%2A> в данных события, чтобы определить фактический элемент, имеющий фокус.  
  
 Это событие создается псевдоним для <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType> вложенное событие для этого класса, чтобы <xref:System.Windows.UIElement.PreviewGotKeyboardFocus> входит в состав класса список членов, когда <xref:System.Windows.UIElement> наследуется от базового элемента. Обработчики событий, присоединенные к <xref:System.Windows.UIElement.PreviewGotKeyboardFocus> событий присоединяются к базовому объекту <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType> вложенное событие и получить тот же экземпляр данных события.  
  
<a name="routedEventInfo_PreviewGotKeyboardFocus"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.PreviewGotKeyboardFocusEvent>|  
|Стратегия маршрутизации|Туннелирование|  
|делегат|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   Соответствующий восходящей событие <xref:System.Windows.UIElement.GotKeyboardFocus>.  
  
-   Переопределить <xref:System.Windows.UIElement.OnPreviewGotKeyboardFocus%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewLostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="PreviewGotKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewGotKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewGotKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewGotKeyboardFocusEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.PreviewGotKeyboardFocus" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.  
  
 Дополнительные сведения о регистрации маршрутизированных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Дополнительные сведения об использовании идентификаторов маршрутизируемых событий для добавления обработчиков класса см. в описании метода <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler PreviewKeyDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler PreviewKeyDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewKeyDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewKeyDown As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ PreviewKeyDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewKeyDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возникает при нажатии клавиши, если фокус установлен на данном элементе.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обработка клавиш взаимодействует с другими функциями платформы, такие как выполнение команд и композиция текста. <xref:System.Windows.UIElement.KeyDown> Событие является событием входной текст нижнего уровня, могут работать некорректно, в некоторых элементах управления. Это так, как некоторые элементы управления имеют композиции элементов управления или обработку ввода обработку класса, который предоставляет более высокого уровня версия текста, а также связанные события.  
  
 Это событие создается псевдоним для <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType> вложенное событие для этого класса, чтобы <xref:System.Windows.UIElement.PreviewKeyDown> входит в состав класса список членов, когда <xref:System.Windows.UIElement> наследуется от базового элемента. Обработчики событий, присоединенные к <xref:System.Windows.UIElement.PreviewKeyDown> событий присоединяются к базовому объекту <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType> вложенное событие и получить тот же экземпляр данных события.  
  
<a name="routedEventInfo_PreviewKeyDown"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.PreviewKeyDownEvent>|  
|Стратегия маршрутизации|Туннелирование|  
|делегат|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   Соответствующий восходящей событие <xref:System.Windows.UIElement.KeyDown>.  
  
-   Переопределить <xref:System.Windows.UIElement.OnPreviewKeyDown%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewKeyUp" />
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewKeyDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewKeyDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewKeyDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewKeyDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewKeyDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.PreviewKeyDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.  
  
 Дополнительные сведения о регистрации маршрутизированных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Дополнительные сведения об использовании идентификаторов маршрутизируемых событий для добавления обработчиков класса см. в описании метода <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler PreviewKeyUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler PreviewKeyUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewKeyUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewKeyUp As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ PreviewKeyUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewKeyUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при отпускании клавиши, если фокус находится на этом элементе.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обработка клавиш взаимодействует с другими функциями платформы, такие как выполнение команд и композиция текста. <xref:System.Windows.UIElement.KeyUp> Событие является событием входной текст нижнего уровня, могут работать некорректно, в некоторых элементах управления. Это так, как некоторые элементы управления имеют композиции элементов управления или обработку ввода обработку класса, который предоставляет более высокого уровня версия текста, а также связанные события. Дополнительные сведения обратитесь к документации для отдельных элементов управления.  
  
 Это событие создается псевдоним для <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType> вложенное событие для этого класса, чтобы <xref:System.Windows.UIElement.PreviewKeyUp> входит в состав класса список членов, когда <xref:System.Windows.UIElement> наследуется от базового элемента. Обработчики событий, присоединенные к <xref:System.Windows.UIElement.PreviewKeyUp> событий присоединяются к базовому объекту <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType> вложенное событие и получить тот же экземпляр данных события.  
  
<a name="routedEventInfo_PreviewKeyUp"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.PreviewKeyUpEvent>|  
|Стратегия маршрутизации|Туннелирование|  
|делегат|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   Соответствующий восходящей событие <xref:System.Windows.UIElement.KeyUp>.  
  
-   Переопределить <xref:System.Windows.UIElement.OnPreviewKeyUp%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewKeyUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewKeyUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewKeyUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewKeyUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewKeyUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.PreviewKeyUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.  
  
 Дополнительные сведения о регистрации маршрутизированных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Дополнительные сведения об использовании идентификаторов маршрутизируемых событий для добавления обработчиков класса см. в описании метода <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewLostKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewLostKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewLostKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ PreviewLostKeyboardFocus;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewLostKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при потере данным элементом фокуса ввода с клавиатуры.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Так как это событие нисходящей маршрутизации элемент, который потерял фокус может быть дочерний элемент, а не элемента, которому фактически присоединен обработчик событий. Проверьте <xref:System.Windows.RoutedEventArgs.Source%2A> в данных события, чтобы определить фактический элемент, который теряет фокус.  
  
 Это событие создается псевдоним для <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType> вложенное событие для этого класса, чтобы <xref:System.Windows.UIElement.PreviewLostKeyboardFocus> входит в состав класса список членов, когда <xref:System.Windows.UIElement> наследуется от базового элемента. Обработчики событий, присоединенные к <xref:System.Windows.UIElement.PreviewLostKeyboardFocus> событий присоединяются к базовому объекту <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType> вложенное событие и получить тот же экземпляр данных события.  
  
<a name="routedEventInfo_PreviewLostKeyboardFocus"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.PreviewLostKeyboardFocusEvent>|  
|Стратегия маршрутизации|Туннелирование|  
|делегат|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   Соответствующий восходящей событие <xref:System.Windows.UIElement.LostKeyboardFocus>.  
  
-   Переопределить <xref:System.Windows.UIElement.OnPreviewLostKeyboardFocus%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewGotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="PreviewLostKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewLostKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewLostKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewLostKeyboardFocusEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.PreviewLostKeyboardFocus" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.  
  
 Дополнительные сведения о регистрации маршрутизированных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Дополнительные сведения об использовании идентификаторов маршрутизируемых событий для добавления обработчиков класса см. в описании метода <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseDown;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при нажатии любой кнопки мыши в тот момент, когда указатель мыши находится над данным элементом.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это событие создается псевдоним для <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> вложенное событие для этого класса, чтобы <xref:System.Windows.UIElement.PreviewMouseDown> входит в состав класса список членов, когда <xref:System.Windows.UIElement> наследуется от базового элемента. Обработчики событий, присоединенные к <xref:System.Windows.UIElement.PreviewMouseDown> событий присоединяются к базовому объекту <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> вложенное событие и получить тот же экземпляр данных события.  
  
 <xref:System.Windows.UIElement.PreviewMouseDown> Событие часто возникает вместе с либо <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> или <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>, которые соответствуют нажмите одну из двух кнопок мыши стандартные. <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> и <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> также перенаправленные события, но они являются прямой перенаправленные события, и возникает соответствующее событие кнопками при <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> событий достигает этого элемента на маршруте события. См. заметки для <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> или <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>.  
  
<a name="routedEventInfo_PreviewMouseDown"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.PreviewMouseDownEvent>|  
|Стратегия маршрутизации|Туннелирование|  
|делегат|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Соответствующий восходящей событие <xref:System.Windows.UIElement.MouseDown>.  
  
-   Переопределить <xref:System.Windows.UIElement.OnPreviewMouseDown%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.PreviewMouseDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.  
  
 Дополнительные сведения о регистрации маршрутизированных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Дополнительные сведения об использовании идентификаторов маршрутизируемых событий для добавления обработчиков класса см. в описании метода <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseLeftButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseLeftButtonDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseLeftButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при нажатии левой кнопки мыши в тот момент, когда указатель мыши находится над данным элементом.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Несмотря на то, что это может показаться шагом следовать нисходящую через дерево элементов, фактически является прямой перенаправленного события, которое возникает и восходящему на дереве элементов каждым <xref:System.Windows.UIElement>.  
  
 Это событие является одним из нескольких связанных событий, сообщающих кнопки мыши базовая <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> события, который является вложенным событием, которое обрабатывается каждым элементом на маршруте событий.  
  
 Данные события данного события предоставляет данные события базового <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> событий. Если это событие помечено как обработанное на маршруте события, по-прежнему возникают определенные события кнопки мыши; Тем не менее, необходимо добавить обработчики событий кнопки мыши путем явного вызова <xref:System.Windows.UIElement.AddHandler%2A>, с помощью параметра для обработки событий, которые уже помечено как обработанное, чтобы быть прослушивателей события. Если пометить <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> обрабатывается, вы, по существу помечаете <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> обрабатываются для всех последующих прослушивателей на маршруте и на всех связанных событий. Это возможно содержит созданный класс обработчика события такие как <xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>.  
  
 С концептуальной точки зрения это событие (и другие события кнопки мыши <xref:System.Windows.UIElement>) быть мыши «служба» (с помощью определения службы, предоставляемые <xref:System.Windows.Input.Mouse> класса). Событие добавляет удобство нет необходимости проверять состояние кнопок мыши (слева направо, вверх вниз) исходного события мыши в данных события. Для более сложных сценариев, таких как проверка состояния стандартным кнопок может потребоваться использовать [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] на <xref:System.Windows.Input.Mouse> класса вместо тех, на <xref:System.Windows.UIElement>.  
  
<a name="routedEventInfo_PreviewMouseLeftButtonDown"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.PreviewMouseLeftButtonDownEvent>|  
|Стратегия маршрутизации|Direct|  
|делегат|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Переопределить <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseLeftButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseLeftButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseLeftButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseLeftButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseLeftButtonDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.  
  
 Дополнительные сведения о регистрации маршрутизированных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Дополнительные сведения об использовании идентификаторов маршрутизируемых событий для добавления обработчиков класса см. в описании метода <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseLeftButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseLeftButtonUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseLeftButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при отпускании левой кнопки мыши в тот момент, когда указатель мыши находится над данным элементом.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Несмотря на то, что это может показаться шагом следовать нисходящую через дерево элементов, фактически является прямой перенаправленного события, которое возникает и восходящему на дереве элементов каждым <xref:System.Windows.UIElement>.  
  
 Это событие является одним из нескольких связанных событий, сообщающих кнопки мыши базовая <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> события, который является вложенным событием, которое обрабатывается каждым элементом на маршруте событий.  
  
 Данные события данного события предоставляет данные события базового <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> событий. Если это событие помечено как обработанное на маршруте события, по-прежнему возникают определенные события кнопки мыши; Тем не менее, необходимо добавить обработчики событий кнопки мыши путем явного вызова <xref:System.Windows.UIElement.AddHandler%2A>, с помощью параметра для обработки событий, которые уже помечено как обработанное, чтобы быть прослушивателей события. Если пометить <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> обрабатывается, вы, по существу помечаете <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> обрабатываются для всех последующих прослушивателей на маршруте и на всех связанных событий.  
  
 С концептуальной точки зрения это событие (и другие события кнопки мыши <xref:System.Windows.UIElement>) быть мыши «служба» (с помощью определения службы, предоставляемые <xref:System.Windows.Input.Mouse> класса). Событие добавляет удобство нет необходимости проверять состояние кнопок мыши (слева направо, вверх вниз) исходного события мыши в данных события. Для более сложных сценариев, таких как проверка состояния стандартным кнопок может потребоваться использовать [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] на <xref:System.Windows.Input.Mouse> класса вместо тех, на <xref:System.Windows.UIElement>.  
  
<a name="routedEventInfo_PreviewMouseLeftButtonUp"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.PreviewMouseLeftButtonUpEvent>|  
|Стратегия маршрутизации|Direct|  
|делегат|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Переопределить <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonUp%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseLeftButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseLeftButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseLeftButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseLeftButtonUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.  
  
 Дополнительные сведения о регистрации маршрутизированных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Дополнительные сведения об использовании идентификаторов маршрутизируемых событий для добавления обработчиков класса см. в описании метода <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler PreviewMouseMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler PreviewMouseMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseMove As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ PreviewMouseMove;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при перемещении указателя мыши, когда он находится над данным элементом.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это событие происходит, и когда указатель мыши входит в пределы элемента, а также при перемещении указателя мыши оставаясь в пределах границ элемента.  
  
 Это событие создается псевдоним для <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType> вложенное событие для этого класса, чтобы <xref:System.Windows.UIElement.PreviewMouseMove> входит в состав класса список членов, когда <xref:System.Windows.UIElement> наследуется от базового элемента. Обработчики событий, присоединенные к <xref:System.Windows.UIElement.PreviewMouseMove> событий присоединяются к базовому объекту <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType> вложенное событие и получить тот же экземпляр данных события.  
  
<a name="routedEventInfo_PreviewMouseMove"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.PreviewMouseMoveEvent>|  
|Стратегия маршрутизации|Туннелирование|  
|делегат|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   Соответствующий восходящей событие <xref:System.Windows.UIElement.MouseMove>.  
  
-   Переопределить <xref:System.Windows.UIElement.OnPreviewMouseMove%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseMoveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.PreviewMouseMove" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.  
  
 Дополнительные сведения о регистрации маршрутизированных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Дополнительные сведения об использовании идентификаторов маршрутизируемых событий для добавления обработчиков класса см. в описании метода <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseRightButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseRightButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseRightButtonDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseRightButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при нажатии правой кнопки мыши в тот момент, когда указатель мыши находится над данным элементом.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Несмотря на то, что это может показаться шагом следовать нисходящую через дерево элементов, фактически является прямой перенаправленного события, которое возникает и восходящему на дереве элементов каждым <xref:System.Windows.UIElement>.  
  
 Это событие является одним из нескольких связанных событий, сообщающих кнопки мыши базовая <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> события, который является вложенным событием, которое обрабатывается каждым элементом на маршруте событий.  
  
 Данные события данного события предоставляет данные события базового <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> событий. Если это событие помечено как обработанное на маршруте события, по-прежнему возникают определенные события кнопки мыши; Тем не менее, необходимо добавить обработчики событий кнопки мыши путем явного вызова <xref:System.Windows.UIElement.AddHandler%2A>, с помощью параметра для обработки событий, которые уже помечено как обработанное, чтобы быть прослушивателей события. Если пометить <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> обрабатывается, вы, по существу помечаете <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> обрабатываются для всех последующих прослушивателей на маршруте и на всех связанных событий. Это возможно содержит созданный класс обработчика события такие как <xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>.  
  
 С концептуальной точки зрения это событие (и другие события кнопки мыши <xref:System.Windows.UIElement>) быть мыши «служба» (с помощью определения службы, предоставляемые <xref:System.Windows.Input.Mouse> класса). Событие добавляет удобство нет необходимости проверять состояние кнопок мыши (слева направо, вверх вниз) исходного события мыши в данных события. Для более сложных сценариев, таких как проверка состояния стандартным кнопок может потребоваться использовать [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] на <xref:System.Windows.Input.Mouse> класса вместо тех, на <xref:System.Windows.UIElement>.  
  
<a name="routedEventInfo_PreviewMouseRightButtonDown"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.PreviewMouseRightButtonDownEvent>|  
|Стратегия маршрутизации|Direct|  
|делегат|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Переопределить <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseRightButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseRightButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseRightButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseRightButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseRightButtonDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.  
  
 Дополнительные сведения о регистрации маршрутизированных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Дополнительные сведения об использовании идентификаторов маршрутизируемых событий для добавления обработчиков класса см. в описании метода <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseRightButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseRightButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseRightButtonUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseRightButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при отпускании правой кнопки мыши в тот момент, когда указатель мыши находится над данным элементом.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Несмотря на то, что это может показаться шагом следовать нисходящую через дерево элементов, фактически является прямой перенаправленного события, которое возникает и восходящему на дереве элементов каждым <xref:System.Windows.UIElement>.  
  
 Это событие является одним из нескольких связанных событий, сообщающих кнопки мыши базовая <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> события, который является вложенным событием, которое обрабатывается каждым элементом на маршруте событий.  
  
 Данные события данного события предоставляет данные события базового <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> событий. Если это событие помечено как обработанное на маршруте события, по-прежнему возникают определенные события кнопки мыши; Тем не менее, необходимо добавить обработчики событий кнопки мыши путем явного вызова <xref:System.Windows.UIElement.AddHandler%2A>, с помощью параметра для обработки событий, которые уже помечено как обработанное, чтобы быть прослушивателей события. Если пометить <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> обрабатывается, вы, по существу помечаете <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> обрабатываются для всех последующих прослушивателей на маршруте и на всех связанных событий.  
  
 С концептуальной точки зрения это событие (и другие события кнопки мыши <xref:System.Windows.UIElement>) быть мыши «служба» (с помощью определения службы, предоставляемые <xref:System.Windows.Input.Mouse> класса). Событие добавляет удобство нет необходимости проверять состояние кнопок мыши (слева направо, вверх вниз) исходного события мыши в данных события. Для более сложных сценариев, таких как проверка состояния стандартным кнопок может потребоваться использовать [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] на <xref:System.Windows.Input.Mouse> класса вместо тех, на <xref:System.Windows.UIElement>.  
  
<a name="routedEventInfo_PreviewMouseRightButtonUp"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.PreviewMouseRightButtonUpEvent>|  
|Стратегия маршрутизации|Direct|  
|делегат|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Переопределить <xref:System.Windows.UIElement.OnPreviewMouseRightButtonUp%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseRightButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseRightButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseRightButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseRightButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseRightButtonUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.  
  
 Дополнительные сведения о регистрации маршрутизированных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Дополнительные сведения об использовании идентификаторов маршрутизируемых событий для добавления обработчиков класса см. в описании метода <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseUp;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при отпускании любой кнопки мыши в тот момент, когда указатель мыши находится над данным элементом.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это событие создается псевдоним для <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> вложенное событие для этого класса, чтобы <xref:System.Windows.UIElement.PreviewMouseUp> входит в состав класса список членов, когда <xref:System.Windows.UIElement> наследуется от базового элемента. Обработчики событий, присоединенные к <xref:System.Windows.UIElement.PreviewMouseUp> событий присоединяются к базовому объекту <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> вложенное событие и получить тот же экземпляр данных события.  
  
 <xref:System.Windows.UIElement.PreviewMouseUp> Событие часто возникает вместе с либо <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> или <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>, которые соответствуют нажмите одну из двух кнопок мыши стандартные. <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> и <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> также перенаправленные события, но они являются прямой перенаправленные события, и возникает соответствующее событие кнопками при <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> событий достигает этого элемента на маршруте события. См. заметки для <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> или <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>.  
  
<a name="routedEventInfo_PreviewMouseUp"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.PreviewMouseUpEvent>|  
|Стратегия маршрутизации|Туннелирование|  
|делегат|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Соответствующий восходящей событие <xref:System.Windows.UIElement.MouseUp>.  
  
-   Переопределить <xref:System.Windows.UIElement.OnPreviewMouseUp%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.PreviewMouseUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.  
  
 Дополнительные сведения о регистрации маршрутизированных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Дополнительные сведения об использовании идентификаторов маршрутизируемых событий для добавления обработчиков класса см. в описании метода <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseWheel">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseWheelEventHandler PreviewMouseWheel;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseWheelEventHandler PreviewMouseWheel" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseWheel" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseWheel As MouseWheelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseWheelEventHandler ^ PreviewMouseWheel;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseWheel</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseWheelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при вращении колесика мыши в тот момент, когда указатель мыши находится над данным элементом.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Фокус или захват мыши имеют приоритет над которого указатель мыши; Таким образом при получении этого события из элемента или получившего, указатель мыши может быть фактически над другим элементом.  
  
 Это событие создается псевдоним для <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType> вложенное событие для этого класса, чтобы <xref:System.Windows.UIElement.PreviewMouseMove> входит в состав класса список членов, когда <xref:System.Windows.UIElement> наследуется от базового элемента. Обработчики событий, присоединенные к <xref:System.Windows.UIElement.PreviewMouseMove> событий присоединяются к базовому объекту <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType> вложенное событие и получить тот же экземпляр данных события.  
  
<a name="routedEventInfo_PreviewMouseWheel"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.PreviewMouseWheelEvent>|  
|Стратегия маршрутизации|Туннелирование|  
|делегат|<xref:System.Windows.Input.MouseWheelEventHandler>|  
  
-   Соответствующий восходящей событие <xref:System.Windows.UIElement.MouseWheel>.  
  
-   Переопределить <xref:System.Windows.UIElement.OnPreviewMouseWheel%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseWheelEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseWheelEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseWheelEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseWheelEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseWheelEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseWheelEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.PreviewMouseWheel" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.  
  
 Дополнительные сведения о регистрации маршрутизированных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Дополнительные сведения об использовании идентификаторов маршрутизируемых событий для добавления обработчиков класса см. в описании метода <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewQueryContinueDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.QueryContinueDragEventHandler PreviewQueryContinueDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.QueryContinueDragEventHandler PreviewQueryContinueDrag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewQueryContinueDrag" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewQueryContinueDrag As QueryContinueDragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::QueryContinueDragEventHandler ^ PreviewQueryContinueDrag;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.QueryContinueDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит, когда состояние клавиши или кнопки мыши изменяется в ходе операции перетаскивания.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.PreviewQueryContinueDrag> Событий позволяет источнику перетаскивания для объявления, должна ли быть отменена операция перетаскивания и вставки.  
  
 Это событие создается псевдоним для <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType> вложенное событие для этого класса, чтобы <xref:System.Windows.UIElement.PreviewQueryContinueDrag> входит в состав класса список членов, когда <xref:System.Windows.UIElement> наследуется от базового элемента. Обработчики событий, присоединенные к <xref:System.Windows.UIElement.PreviewQueryContinueDrag> событий присоединяются к базовому объекту <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType> вложенное событие и получить тот же экземпляр данных события.  
  
<a name="routedEventInfo_PreviewQueryContinueDrag"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.PreviewQueryContinueDragEvent>|  
|Стратегия маршрутизации|Туннелирование|  
|делегат|<xref:System.Windows.QueryContinueDragEventHandler>|  
  
-   Соответствующий восходящей событие <xref:System.Windows.UIElement.QueryContinueDrag>.  
  
-   Переопределить <xref:System.Windows.UIElement.OnPreviewQueryContinueDrag%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewQueryContinueDragEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewQueryContinueDragEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewQueryContinueDragEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewQueryContinueDragEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewQueryContinueDragEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewQueryContinueDragEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.PreviewQueryContinueDrag" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.  
  
 Дополнительные сведения о регистрации маршрутизированных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Дополнительные сведения об использовании идентификаторов маршрутизируемых событий для добавления обработчиков класса см. в описании метода <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusButtonDown As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ PreviewStylusButtonDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при нажатии кнопки пера в тот момент, когда указатель находится над данным элементом.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это событие создается псевдоним для <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType> вложенное событие для этого класса, чтобы <xref:System.Windows.UIElement.PreviewStylusButtonDown> входит в состав класса список членов, когда <xref:System.Windows.UIElement> наследуется от базового элемента. Обработчики событий, присоединенные к <xref:System.Windows.UIElement.PreviewStylusButtonDown> событий присоединяются к базовому объекту <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType> вложенное событие и получить тот же экземпляр данных события.  
  
 Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [Touch поддержки входных данных в Windows Vista](http://msdn.microsoft.com/library/63f1d71f-03d8-4d83-a174-e3dc7c57bad0) и [фокусе](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusButtonDown"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.PreviewStylusButtonDownEvent>|  
|Стратегия маршрутизации|Туннелирование|  
|делегат|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   Соответствующий восходящей событие <xref:System.Windows.UIElement.StylusButtonDown>.  
  
-   Переопределить <xref:System.Windows.UIElement.OnPreviewStylusButtonDown%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusButtonDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.PreviewStylusButtonDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.  
  
 Дополнительные сведения о регистрации маршрутизированных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Дополнительные сведения об использовании идентификаторов маршрутизируемых событий для добавления обработчиков класса см. в описании метода <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusButtonUp As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ PreviewStylusButtonUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при отпускании кнопки пера в тот момент, когда указатель находится над данным элементом.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это событие создается псевдоним для <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType> вложенное событие для этого класса, чтобы <xref:System.Windows.UIElement.PreviewStylusButtonUp> входит в состав класса список членов, когда <xref:System.Windows.UIElement> наследуется от базового элемента. Обработчики событий, присоединенные к <xref:System.Windows.UIElement.PreviewStylusButtonUp> событий присоединяются к базовому объекту <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType> вложенное событие и получить тот же экземпляр данных события.  
  
 Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [фокусе](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusButtonUp"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.PreviewStylusButtonUpEvent>|  
|Стратегия маршрутизации|Туннелирование|  
|делегат|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   Соответствующий восходящей событие <xref:System.Windows.UIElement.StylusButtonUp>.  
  
-   Переопределить <xref:System.Windows.UIElement.OnPreviewStylusButtonUp%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusButtonUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.PreviewStylusButtonUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.  
  
 Дополнительные сведения о регистрации маршрутизированных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Дополнительные сведения об использовании идентификаторов маршрутизируемых событий для добавления обработчиков класса см. в описании метода <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusDownEventHandler PreviewStylusDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusDownEventHandler PreviewStylusDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusDown As StylusDownEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusDownEventHandler ^ PreviewStylusDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusDownEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при касании дигитайзера пером в тот момент, когда оно находится над данным элементом.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это событие создается псевдоним для <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType> вложенное событие для этого класса, чтобы <xref:System.Windows.UIElement.PreviewStylusDown> входит в состав класса список членов, когда <xref:System.Windows.UIElement> наследуется от базового элемента. Обработчики событий, присоединенные к <xref:System.Windows.UIElement.PreviewStylusDown> событий присоединяются к базовому объекту <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType> вложенное событие и получить тот же экземпляр данных события.  
  
 Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [фокусе](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusDown"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.PreviewStylusDownEvent>|  
|Стратегия маршрутизации|Туннелирование|  
|делегат|<xref:System.Windows.Input.StylusDownEventHandler>|  
  
-   Соответствующий восходящей событие <xref:System.Windows.UIElement.StylusDown>.  
  
-   Переопределить <xref:System.Windows.UIElement.OnPreviewStylusDown%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.PreviewStylusDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.  
  
 Дополнительные сведения о регистрации маршрутизированных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Дополнительные сведения об использовании идентификаторов маршрутизируемых событий для добавления обработчиков класса см. в описании метода <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInAirMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusInAirMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusInAirMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusInAirMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusInAirMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusInAirMove;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusInAirMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при движении пера над элементом без касания дигитайзера.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это событие создается псевдоним для <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType> вложенное событие для этого класса, чтобы <xref:System.Windows.UIElement.PreviewStylusInAirMove> входит в состав класса список членов, когда <xref:System.Windows.UIElement> наследуется от базового элемента. Обработчики событий, присоединенные к <xref:System.Windows.UIElement.PreviewStylusInAirMove> событий присоединяются к базовому объекту <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType> вложенное событие и получить тот же экземпляр данных события.  
  
 Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [фокусе](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusInAirMove"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.PreviewStylusInAirMoveEvent>|  
|Стратегия маршрутизации|Туннелирование|  
|делегат|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Соответствующий восходящей событие <xref:System.Windows.UIElement.StylusInAirMove>.  
  
-   Переопределить <xref:System.Windows.UIElement.OnPreviewStylusInAirMove%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInAirMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusInAirMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusInAirMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusInAirMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusInAirMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusInAirMoveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.PreviewStylusInAirMove" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.  
  
 Дополнительные сведения о регистрации маршрутизированных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Дополнительные сведения об использовании идентификаторов маршрутизируемых событий для добавления обработчиков класса см. в описании метода <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusInRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusInRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusInRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusInRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusInRange;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusInRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при нахождении пера над данным элементом достаточно близко для того, чтобы перо было обнаружено дигитайзером.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это событие создается псевдоним для <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType> вложенное событие для этого класса, чтобы <xref:System.Windows.UIElement.PreviewStylusInRange> входит в состав класса список членов, когда <xref:System.Windows.UIElement> наследуется от базового элемента. Обработчики событий, присоединенные к <xref:System.Windows.UIElement.PreviewStylusInRange> событий присоединяются к базовому объекту <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType> вложенное событие и получить тот же экземпляр данных события.  
  
 Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [фокусе](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusInRange"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.PreviewStylusInRangeEvent>|  
|Стратегия маршрутизации|Туннелирование|  
|делегат|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Соответствующий восходящей событие <xref:System.Windows.UIElement.StylusInRange>.  
  
-   Переопределить <xref:System.Windows.UIElement.OnPreviewStylusInRange%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusInRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusInRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusInRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusInRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusInRangeEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.PreviewStylusInRange" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.  
  
 Дополнительные сведения о регистрации маршрутизированных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Дополнительные сведения об использовании идентификаторов маршрутизируемых событий для добавления обработчиков класса см. в описании метода <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusMove;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при перемещении пера над элементом. Для вызова этого события перемещаемое перо должно быть обнаружено дигитайзером; в противном случае вызывается <see cref="E:System.Windows.UIElement.PreviewStylusInAirMove" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это событие создается псевдоним для <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType> вложенное событие для этого класса, чтобы <xref:System.Windows.UIElement.PreviewStylusMove> входит в состав класса список членов, когда <xref:System.Windows.UIElement> наследуется от базового элемента. Обработчики событий, присоединенные к <xref:System.Windows.UIElement.PreviewStylusMove> событий присоединяются к базовому объекту <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType> вложенное событие и получить тот же экземпляр данных события.  
  
 Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [фокусе](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusMove"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.PreviewStylusMoveEvent>|  
|Стратегия маршрутизации|Туннелирование|  
|делегат|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Соответствующий восходящей событие <xref:System.Windows.UIElement.StylusMove>.  
  
-   Переопределить <xref:System.Windows.UIElement.OnPreviewStylusMove%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusMoveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.PreviewStylusMove" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.  
  
 Дополнительные сведения о регистрации маршрутизированных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Дополнительные сведения об использовании идентификаторов маршрутизируемых событий для добавления обработчиков класса см. в описании метода <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusOutOfRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusOutOfRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusOutOfRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusOutOfRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusOutOfRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusOutOfRange;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusOutOfRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит, когда перо находится слишком далеко от дигитайзера, чтобы быть обнаруженным.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это событие создается псевдоним для <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType> вложенное событие для этого класса, чтобы <xref:System.Windows.UIElement.PreviewStylusOutOfRange> входит в состав класса список членов, когда <xref:System.Windows.UIElement> наследуется от базового элемента. Обработчики событий, присоединенные к <xref:System.Windows.UIElement.PreviewStylusOutOfRange> событий присоединяются к базовому объекту <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType> вложенное событие и получить тот же экземпляр данных события.  
  
 Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [фокусе](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusOutOfRange"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.PreviewStylusOutOfRangeEvent>|  
|Стратегия маршрутизации|Туннелирование|  
|делегат|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Соответствующий восходящей событие <xref:System.Windows.UIElement.StylusOutOfRange>.  
  
-   Переопределить <xref:System.Windows.UIElement.OnPreviewStylusOutOfRange%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusOutOfRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusOutOfRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusOutOfRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusOutOfRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusOutOfRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusOutOfRangeEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.PreviewStylusOutOfRange" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.  
  
 Дополнительные сведения о регистрации маршрутизированных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Дополнительные сведения об использовании идентификаторов маршрутизируемых событий для добавления обработчиков класса см. в описании метода <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusSystemGesture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusSystemGestureEventHandler PreviewStylusSystemGesture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusSystemGestureEventHandler PreviewStylusSystemGesture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusSystemGesture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusSystemGesture As StylusSystemGestureEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusSystemGestureEventHandler ^ PreviewStylusSystemGesture;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusSystemGesture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusSystemGestureEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при использовании пользователем одного из жестов пером.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Сведения о жестах пера см. в разделе <xref:System.Windows.Input.SystemGesture>.  
  
 Это событие создается псевдоним для <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType> вложенное событие для этого класса, чтобы <xref:System.Windows.UIElement.PreviewStylusSystemGesture> входит в состав класса список членов, когда <xref:System.Windows.UIElement> наследуется от базового элемента. Обработчики событий, присоединенные к <xref:System.Windows.UIElement.PreviewStylusSystemGesture> событий присоединяются к базовому объекту <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType> вложенное событие и получить тот же экземпляр данных события.  
  
 Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [фокусе](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusSystemGesture"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.PreviewStylusSystemGestureEvent>|  
|Стратегия маршрутизации|Туннелирование|  
|делегат|<xref:System.Windows.Input.StylusSystemGestureEventHandler>|  
  
-   Соответствующий восходящей событие <xref:System.Windows.UIElement.StylusSystemGesture>.  
  
-   Переопределить <xref:System.Windows.UIElement.OnPreviewStylusSystemGesture%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusSystemGestureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusSystemGestureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusSystemGestureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusSystemGestureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusSystemGestureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusSystemGestureEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.PreviewStylusSystemGesture" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.  
  
 Дополнительные сведения о регистрации маршрутизированных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Дополнительные сведения об использовании идентификаторов маршрутизируемых событий для добавления обработчиков класса см. в описании метода <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusUp As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит, когда пользователь отрывает перо от поверхности дигитайзера в тот момент, когда оно находится над этим элементом.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это событие создается псевдоним для <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType> вложенное событие для этого класса, чтобы <xref:System.Windows.UIElement.PreviewStylusDown> входит в состав класса список членов, когда <xref:System.Windows.UIElement> наследуется от базового элемента. Обработчики событий, присоединенные к <xref:System.Windows.UIElement.PreviewStylusDown> событий присоединяются к базовому объекту <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType> вложенное событие и получить тот же экземпляр данных события.  
  
 Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [фокусе](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusUp"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.PreviewStylusUpEvent>|  
|Стратегия маршрутизации|Туннелирование|  
|делегат|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Соответствующий восходящей событие <xref:System.Windows.UIElement.StylusUp>.  
  
-   Переопределить <xref:System.Windows.UIElement.OnPreviewStylusUp%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.PreviewStylusUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.  
  
 Дополнительные сведения о регистрации маршрутизированных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Дополнительные сведения об использовании идентификаторов маршрутизируемых событий для добавления обработчиков класса см. в описании метода <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTextInput">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.TextCompositionEventHandler PreviewTextInput;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.TextCompositionEventHandler PreviewTextInput" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewTextInput" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTextInput As TextCompositionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::TextCompositionEventHandler ^ PreviewTextInput;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewTextInput</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.TextCompositionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при получении этим элементом текста аппаратно-независимым способом.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.PreviewTextInput> Событий позволяет компонента или приложения для прослушивания ввода текста в аппаратно независимым способом. Клавиатура является основным средством для <xref:System.Windows.UIElement.PreviewTextInput>; но также могут создаваться речи, рукописного ввода и других устройств ввода <xref:System.Windows.UIElement.PreviewTextInput>.  
  
 Из-за сочетания клавиш — клавиатуры по умолчанию или редакторам методов ввода, несколько событий клавиш могут сгенерировать только одно событие ввода текста.  
  
 Это событие создается псевдоним для <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType> вложенное событие для этого класса, чтобы <xref:System.Windows.UIElement.PreviewTextInput> входит в состав класса список членов, когда <xref:System.Windows.UIElement> наследуется от базового элемента. Обработчики событий, присоединенные к <xref:System.Windows.UIElement.PreviewTextInput> событий присоединяются к базовому объекту <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType> вложенное событие и получить тот же экземпляр данных события.  
  
<a name="routedEventInfo_PreviewTextInput"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.PreviewTextInputEvent>|  
|Стратегия маршрутизации|Туннелирование|  
|делегат|<xref:System.Windows.Input.TextCompositionEventHandler>|  
  
-   Соответствующий восходящей событие <xref:System.Windows.UIElement.TextInput>.  
  
-   Переопределить <xref:System.Windows.UIElement.OnPreviewTextInput%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewKeyDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewTextInputEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTextInputEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTextInputEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewTextInputEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTextInputEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTextInputEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.PreviewTextInput" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.  
  
 Дополнительные сведения о регистрации маршрутизированных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Дополнительные сведения об использовании идентификаторов маршрутизируемых событий для добавления обработчиков класса см. в описании метода <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchDown">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewTouchDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchDown As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchDown;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при касании пальцем экрана, когда палец находится над данным элементом.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 По умолчанию <xref:System.Windows.UIElement.PreviewTouchDown> и <xref:System.Windows.UIElement.TouchDown> событий не выполняется до пальцем экрана касается и перемещает. Нажав пальцем на экране и удерживая без его перемещения вызывает нажать клавиши и удерживайте поведение <xref:System.Windows.Input.Stylus>. Поведение нажатия и удерживания соответствует щелчку правой кнопкой мыши.  
  
 Чтобы вызвать <xref:System.Windows.UIElement.PreviewTouchDown> и <xref:System.Windows.UIElement.TouchDown> события к как можно скорее касании пальцем экрана, задать <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType> присоединенного свойства для `false` для этого элемента.  
  
<a name="routedEventInfo_PreviewTouchDown"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.PreviewTouchDownEvent>|  
|Стратегия маршрутизации|Туннелирование|  
|делегат|<xref:System.EventHandler%601> имеет тип данных <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Соответствующий восходящей событие <xref:System.Windows.UIElement.TouchDown>.  
  
-   Переопределить <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Input.Stylus.IsPressAndHoldEnabled" />
        <altmember cref="M:System.Windows.Input.Stylus.GetIsPressAndHoldEnabled(System.Windows.DependencyObject)" />
        <altmember cref="M:System.Windows.Input.Stylus.SetIsPressAndHoldEnabled(System.Windows.DependencyObject,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewTouchDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.PreviewTouchDown" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchMove">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewTouchMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchMove As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchMove;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возникает при перемещении пальца по экрану при условии, если палец находится над данным элементом.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_PreviewTouchMove"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.PreviewTouchMoveEvent>|  
|Стратегия маршрутизации|Туннелирование|  
|делегат|<xref:System.EventHandler%601> имеет тип данных <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Соответствующий восходящей событие <xref:System.Windows.UIElement.TouchMove>.  
  
-   Переопределить <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewTouchMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchMoveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.PreviewTouchMove" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchUp">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewTouchUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchUp As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchUp;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возникает, когда палец отрывается от экрана при условии, что палец находится над этим элементом.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_PreviewTouchUp"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.PreviewTouchUpEvent>|  
|Стратегия маршрутизации|Туннелирование|  
|делегат|<xref:System.EventHandler%601> имеет тип данных <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Соответствующий восходящей событие <xref:System.Windows.UIElement.TouchUp>.  
  
-   Переопределить <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewTouchUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.PreviewTouchUp" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryContinueDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.QueryContinueDragEventHandler QueryContinueDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.QueryContinueDragEventHandler QueryContinueDrag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.QueryContinueDrag" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event QueryContinueDrag As QueryContinueDragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::QueryContinueDragEventHandler ^ QueryContinueDrag;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.QueryContinueDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит, когда состояние клавиши или кнопки мыши изменяется в ходе операции перетаскивания.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.QueryContinueDrag> Событий позволяет источнику перетаскивания определить, должна ли быть отменена операция перетаскивания и вставки.  
  
 Это событие создается псевдоним для <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType> вложенное событие для этого класса, чтобы <xref:System.Windows.UIElement.QueryContinueDrag> входит в состав класса список членов, когда <xref:System.Windows.UIElement> наследуется от базового элемента. Обработчики событий, присоединенные к <xref:System.Windows.UIElement.QueryContinueDrag> событий присоединяются к базовому объекту <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType> вложенное событие и получить тот же экземпляр данных события.  
  
<a name="routedEventInfo_QueryContinueDrag"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.QueryContinueDragEvent>|  
|Стратегия маршрутизации|Вверх|  
|делегат|<xref:System.Windows.QueryContinueDragEventHandler>|  
  
-   Соответствующее событие нисходящей маршрутизации является <xref:System.Windows.UIElement.PreviewQueryContinueDrag>.  
  
-   Переопределить <xref:System.Windows.UIElement.OnQueryContinueDrag%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryContinueDragEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent QueryContinueDragEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent QueryContinueDragEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.QueryContinueDragEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly QueryContinueDragEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ QueryContinueDragEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.QueryContinueDrag" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.  
  
 Дополнительные сведения о регистрации маршрутизированных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Дополнительные сведения об использовании идентификаторов маршрутизируемых событий для добавления обработчиков класса см. в описании метода <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryCursor">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.QueryCursorEventHandler QueryCursor;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.QueryCursorEventHandler QueryCursor" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.QueryCursor" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event QueryCursor As QueryCursorEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::QueryCursorEventHandler ^ QueryCursor;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.QueryCursorEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при запросе отображения курсора. Это событие возникает для элемента каждый раз, когда указатель мыши перемещается в новое положение, что может послужить причиной изменения его внешнего вида.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это событие создается псевдоним для <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType> вложенное событие для этого класса, чтобы <xref:System.Windows.UIElement.QueryCursor> входит в состав класса список членов, когда <xref:System.Windows.UIElement> наследуется от базового элемента. Обработчики событий, присоединенные к <xref:System.Windows.UIElement.QueryCursor> событий присоединяются к базовому объекту <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType> вложенное событие и получить тот же экземпляр данных события.  
  
 Курсор, который ссылается данное имя события не обязательно текстового курсора (которую иногда называют курсора). Вместо этого в данном контексте курсор является объект, который объявляет графическое отображение на экране, связанные с несколькими возможными устройствами ввода или концепциями в программировании Windows. Этот объект представляется <xref:System.Windows.Input.Cursor> класса WPF. Система ввода WPF позволяет изменять этот курсор, когда он представляет экранную позицию указателя мыши. Можно использовать стандартные значения из <xref:System.Windows.Input.Cursors> перечисления, либо можно объявить пользовательский курсор в файл изображения.  
  
 Прослушивание <xref:System.Windows.UIElement.QueryCursor> событие не является эффективным методика управления курсора. Вместо этого каждый элемент должен определить свое поведение курсора с <xref:System.Windows.FrameworkContentElement.Cursor%2A> и <xref:System.Windows.FrameworkContentElement.ForceCursor%2A>. Следует полагаться на <xref:System.Windows.UIElement.QueryCursor> Если не используются базовые элементы уровня платформы WPF или в непредвиденных случаях когда определение работы курсоров, на основе каждого элемента не соответствует вашим потребностям. Дополнительные сведения о реализации поведение курсора в ответ на <xref:System.Windows.UIElement.QueryCursor>, в разделе <xref:System.Windows.Input.QueryCursorEventHandler>.  
  
<a name="routedEventInfo_QueryCursor"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.QueryCursorEvent>|  
|Стратегия маршрутизации|Вверх|  
|делегат|<xref:System.Windows.Input.QueryCursorEventHandler>|  
  
-   Нет определенного события, соответствующие туннелирования.  
  
-   Переопределить <xref:System.Windows.UIElement.OnQueryCursor%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.Cursor" />
      </Docs>
    </Member>
    <Member MemberName="QueryCursorEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent QueryCursorEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent QueryCursorEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.QueryCursorEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly QueryCursorEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ QueryCursorEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.QueryCursor" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.  
  
 Дополнительные сведения о регистрации маршрутизированных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Дополнительные сведения об использовании идентификаторов маршрутизируемых событий для добавления обработчиков класса см. в описании метода <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseEvent">
      <MemberSignature Language="C#" Value="public void RaiseEvent (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RaiseEvent(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.RaiseEvent(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RaiseEvent (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RaiseEvent(System::Windows::RoutedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.RaiseEvent(System.Windows.RoutedEventArgs)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.RoutedEventArgs" />, содержащий данные о событии и идентифицирующий событие, которое следует сгенерировать.</param>
        <summary>Инициирует определенное перенаправленное событие. <see cref="T:System.Windows.RoutedEvent" />, которое должно быть идентифицировано в предоставленном экземпляре <see cref="T:System.Windows.RoutedEventArgs" /> (как и свойство <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> данных события).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `e` Параметр типизируется как общий базовый тип для всех данных маршрутизируемого события; тем не менее, данные о событии должны быть предоставлены как наиболее конкретный тип данных события, доступные для события, так как <xref:System.Windows.RoutedEventArgs> содержать производные классы определенные свойства данных, предназначенные для конкретного события, если оно возникает.  
  
 <xref:System.Windows.RoutedEventArgs> не только свойства состояния события; Он также определяет какие перенаправленного события. Данный шаблон генерации событий и данные о событии и отличаться от [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] классы событий и данных, которые обычно содержат свойства, относящиеся к событию.  
  
   
  
## Examples  
 Следующий пример создает данные события, добавляет идентификатор события к и затем использует экземпляр данных события для создания пользовательского перенаправленного события.  
  
 [!code-csharp[RoutedEventCustom#RaiseEvent](~/samples/snippets/csharp/VS_Snippets_Wpf/RoutedEventCustom/CSharp/SDKSampleLibrary/class1.cs#raiseevent)]
 [!code-vb[RoutedEventCustom#RaiseEvent](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RoutedEventCustom/VB/SDKSampleLibrary/Class1.vb#raiseevent)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseAllTouchCaptures">
      <MemberSignature Language="C#" Value="public void ReleaseAllTouchCaptures ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseAllTouchCaptures() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ReleaseAllTouchCaptures" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseAllTouchCaptures ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseAllTouchCaptures();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Освобождает все полученные сенсорные устройства для данного элемента.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseMouseCapture">
      <MemberSignature Language="C#" Value="public void ReleaseMouseCapture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseMouseCapture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ReleaseMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseMouseCapture ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseMouseCapture();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.ReleaseMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Освобождает мышь, если элемент произвел ее захват.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если этот элемент не содержит записи, вызов этого метода не оказывает влияния. Рассмотрите возможность проверки значения <xref:System.Windows.UIElement.IsMouseCaptured%2A> перед вызовом этого метода.  
  
   
  
## Examples  
 Следующий пример является параллельным для примера, приведенного для <xref:System.Windows.UIElement.CaptureMouse%2A>: он обрабатывает нажатия кнопки мыши вплоть до выпуска захват мыши и снова включить ее перемещение.  
  
 [!code-csharp[CubeAnimation#UIElementMouseCapture](~/samples/snippets/csharp/VS_Snippets_Wpf/CubeAnimation/CSharp/Trackball.cs#uielementmousecapture)]
 [!code-vb[CubeAnimation#UIElementMouseCapture](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CubeAnimation/visualbasic/trackball.vb#uielementmousecapture)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsMouseCaptured" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseStylusCapture">
      <MemberSignature Language="C#" Value="public void ReleaseStylusCapture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseStylusCapture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ReleaseStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseStylusCapture ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseStylusCapture();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.ReleaseStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Освобождает перо, если элемент произвел его захват.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если этот элемент не содержит записи, вызов этого метода не оказывает влияния. Рассмотрите возможность проверки значения <xref:System.Windows.UIElement.IsStylusCaptured%2A> перед вызовом этого метода.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseTouchCapture">
      <MemberSignature Language="C#" Value="public bool ReleaseTouchCapture (System.Windows.Input.TouchDevice touchDevice);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ReleaseTouchCapture(class System.Windows.Input.TouchDevice touchDevice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ReleaseTouchCapture(System::Windows::Input::TouchDevice ^ touchDevice);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touchDevice" Type="System.Windows.Input.TouchDevice" />
      </Parameters>
      <Docs>
        <param name="touchDevice">Освобождаемое устройство.</param>
        <summary>Предпринимает попытку освободить заданное сенсорное устройство из этого элемента.</summary>
        <returns>
          Значение <see langword="true" />, если устройство сенсорного ввода освобождено; в противном случае — значение <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="touchDevice" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveHandler">
      <MemberSignature Language="C#" Value="public void RemoveHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="routedEvent">Идентификатор перенаправленного события, к которому прикреплен обработчик.</param>
        <param name="handler">Конкретная реализация удаляемого обработчика из коллекции обработчиков событий этого элемента.</param>
        <summary>Удаляет указанный обработчик маршрутизируемого события из этого элемента.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Наиболее распространенный сценарий с помощью этого [!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)] — при реализации [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] «программу-оболочку» события, связанный с пользовательских перенаправленных событий, особенно при реализовать логику «удалить» для обработчиков [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] уровне. Это в следующем примере иллюстрируются сценарием примечания.  
  
 Вызов этого метода имеет смысл, если обработчики, зарегистрированные с критериями, соответствующими входным параметрам для вызова данного метода, отсутствуют.  
  
 Если более чем один обработчик присоединяется, соответствующих критериям, только первый обработчик в случае, когда обработчик хранилище будет удалено. Такое поведение согласуется с [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] поведение `-=` оператор.  
  
 Ни `routedEvent` , ни `handler` может быть `null`. Попытка присвоить значение, либо как `null` вызовет исключение.  
  
 Этот метод игнорирует `handledEventsToo` добавлены сведения о параметрах, который предоставляется, если обработчик был первоначально с <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> подпись, которая включает обработку событий уже обработано. Любой из типов обработчика удаляется.  
  
   
  
## Examples  
 В следующем примере используется <xref:System.Windows.UIElement.RemoveHandler%2A> как часть определения события оболочки.  
  
 [!code-csharp[RoutedEventCustom#AddRemoveHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/RoutedEventCustom/CSharp/SDKSampleLibrary/class1.cs#addremovehandler)]
 [!code-vb[RoutedEventCustom#AddRemoveHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RoutedEventCustom/VB/SDKSampleLibrary/Class1.vb#addremovehandler)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)" />
      </Docs>
    </Member>
    <Member MemberName="RenderSize">
      <MemberSignature Language="C#" Value="public System.Windows.Size RenderSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Size RenderSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.RenderSize" />
      <MemberSignature Language="VB.NET" Value="Public Property RenderSize As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Size RenderSize { System::Windows::Size get(); void set(System::Windows::Size value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает (или задает) окончательный размер отрисовки этого элемента.</summary>
        <value>Отрисовываемый размер этого элемента.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  Не пытайтесь задать это свойство в [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] или в коде, если используется система макета уровня платформы WPF. Почти все сценарии типичного приложения будут использовать эту систему макета. Система макета не будут использовать размеры в <xref:System.Windows.UIElement.RenderSize%2A> свойство напрямую. <xref:System.Windows.UIElement.RenderSize%2A> Свойство объявлено для записи только для включения определенных мост вариантов, которые намеренно обойти типичное расположение протоколов, таких как поддержка уровня ядра WPF <xref:System.Windows.Documents.Adorner> класса.  
  
 Это свойство может использоваться для проверки, такие как переопределяет размер отрисовки применимо в рамках системы макета <xref:System.Windows.UIElement.OnRender%2A> или <xref:System.Windows.UIElement.GetLayoutClip%2A>.  
  
 Обработка распространенный сценарий <xref:System.Windows.FrameworkElement.SizeChanged> переопределить событие с обработчиком класс или <xref:System.Windows.UIElement.OnRenderSizeChanged%2A> событий.  
  
## Examples  
 В следующем примере показано, как использует пользовательский графический элемент <xref:System.Windows.UIElement.RenderSize%2A> значение для создания и размер прямоугольника изображение, которое определяет графический элемент, как часть его <xref:System.Windows.UIElement.OnRender%2A> реализации.  
  
 [!code-csharp[AdornersMiscCode#UIElementDesiredSize](~/samples/snippets/csharp/VS_Snippets_Wpf/AdornersMiscCode/CSharp/Window1.xaml.cs#uielementdesiredsize)]
 [!code-vb[AdornersMiscCode#UIElementDesiredSize](~/samples/snippets/visualbasic/VS_Snippets_Wpf/AdornersMiscCode/visualbasic/window1.xaml.vb#uielementdesiredsize)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.UpdateLayout" />
      </Docs>
    </Member>
    <Member MemberName="RenderTransform">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Transform RenderTransform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Transform RenderTransform" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.RenderTransform" />
      <MemberSignature Language="VB.NET" Value="Public Property RenderTransform As Transform" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Transform ^ RenderTransform { System::Windows::Media::Transform ^ get(); void set(System::Windows::Media::Transform ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Transform</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает информацию о преобразовании, которая влияет на позицию отрисовки данного элемента.  Это свойство зависимостей.</summary>
        <value>Описывает специфику желаемого преобразования визуализации. Значение по умолчанию: <see cref="P:System.Windows.Media.Transform.Identity" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Преобразование визуализации повторно создать размер структуры или не отображают сведения о размере. Отображать преобразованиях обычно предназначены для анимации или применения временных эффектов к элементу. Например, элемент может масштабироваться при с фокусом ввода или наведении может флуктуаций при загрузке, чтобы привлечь внимание к этой части [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].  
  
<a name="dependencyPropertyInfo_RenderTransform"></a>   
## <a name="dependency-property-information"></a>Сведения о свойстве зависимостей  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.RenderTransformProperty>|  
|Значение свойства метаданных `true`|Нет|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderTransformOrigin">
      <MemberSignature Language="C#" Value="public System.Windows.Point RenderTransformOrigin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Point RenderTransformOrigin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.RenderTransformOrigin" />
      <MemberSignature Language="VB.NET" Value="Public Property RenderTransformOrigin As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Point RenderTransformOrigin { System::Windows::Point get(); void set(System::Windows::Point value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает центральную точку любого возможного преобразования визуализации, объявленного свойством <see cref="P:System.Windows.UIElement.RenderTransform" />, относительно границ элемента.  Это свойство зависимостей.</summary>
        <value>Значение, объявляющее преобразование при прорисовке. Значение по умолчанию — <see cref="T:System.Windows.Point" /> с координатами (0,0).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.RenderTransformOrigin%2A> имеет несколько нестандартное использование <xref:System.Windows.Point> структура значения, в том, что <xref:System.Windows.Point> не представляет абсолютное расположение, в системе координат. Вместо этого значения в диапазоне от 0 до 1, интерпретируются как коэффициент для диапазона текущего элемента в каждом осей x и y. Например, (значение 0.5,0.5) вызовет преобразование при прорисовке центрирование по элементу, а (1,1) поместит преобразование при прорисовке в нижнем правом углу элемента. <xref:System.Double.NaN> не является приемлемым значением.  
  
 Значения за 0 и 1, также являются допустимыми и приведет к более нестандартным эффектам преобразования. Например при установке <xref:System.Windows.UIElement.RenderTransformOrigin%2A> (5,5), и затем применить <xref:System.Windows.Media.RotateTransform>, точки вращения будет также вне границ элемента. Преобразование будет вращать элемент по большому кругу, рассчитанная далеко внизу и справа. Источник может быть где-либо внутри родительского элемента и возможно, это будет возможно из кадра или представления. Отрицательные значения точек похожи, они будут выходят за рамки верхней левой границы.  
  
 Визуализации преобразований, не влияют на макет и обычно используются для анимации или применения временных эффектов к элементу.  
  
<a name="xamlAttributeUsage_RenderTransformOrigin"></a>   
## <a name="xaml-attribute-usage"></a>Использование атрибута XAML  
  
```  
<object RenderTransformOrigin="xOrigin, yOrigin"/>  
```  
  
<a name="xamlPropertyElementUsage_RenderTransformOrigin"></a>   
## <a name="xaml-property-element-usage"></a>Использование элемента свойства XAML  
  
```  
<object>  
  <object.RenderTransformOrigin>  
    <Point X=" xOrigin " Y=" yOrigin "/>  
  </object.RenderTransformOrigin>  
</object>  
```  
  
<a name="xamlValues_RenderTransformOrigin"></a>   
## <a name="xaml-values"></a>Значения XAML  
 *xOrigin*  
 Горизонтальный коэффициент источника. Обычно задается как значение от 0 до 1. См. заметки.  
  
 *yOrigin*  
 Коэффициент по вертикали. Обычно задается как значение от 0 до 1. См. заметки.  
  
<a name="dependencyPropertyInfo_RenderTransformOrigin"></a>   
## <a name="dependency-property-information"></a>Сведения о свойстве зависимостей  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.RenderTransformOriginProperty>|  
|Значение свойства метаданных `true`|Нет|  
  
   
  
## Examples  
 Следующий пример создает элементов в коде, применяется <xref:System.Windows.UIElement.RenderTransformOrigin%2A>, а затем применяет <xref:System.Windows.UIElement.RenderTransform%2A>.  
  
 [!code-csharp[transformanimations_snip#UIElementRenderTransformOrigin](~/samples/snippets/csharp/VS_Snippets_Wpf/transformanimations_snip/CSharp/RotateAboutCenterExample.cs#uielementrendertransformorigin)]
 [!code-vb[transformanimations_snip#UIElementRenderTransformOrigin](~/samples/snippets/visualbasic/VS_Snippets_Wpf/transformanimations_snip/visualbasic/rotateaboutcenterexample.vb#uielementrendertransformorigin)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.RenderTransform" />
      </Docs>
    </Member>
    <Member MemberName="RenderTransformOriginProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty RenderTransformOriginProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty RenderTransformOriginProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.RenderTransformOriginProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly RenderTransformOriginProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ RenderTransformOriginProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует свойство зависимостей <see cref="P:System.Windows.UIElement.RenderTransformOrigin" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderTransformProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty RenderTransformProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty RenderTransformProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.RenderTransformProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly RenderTransformProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ RenderTransformProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует свойство зависимостей <see cref="P:System.Windows.UIElement.RenderTransform" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeCommandBindings">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeCommandBindings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeCommandBindings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ShouldSerializeCommandBindings" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeCommandBindings () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeCommandBindings();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает логическое значение, указывающее, следует ли процессам сериализации сериализировать содержимое свойства <see cref="P:System.Windows.UIElement.CommandBindings" /> в экземплярах данного класса.</summary>
        <returns>
          Значение <see langword="true" />, если значение свойства <see cref="P:System.Windows.UIElement.CommandBindings" /> подлежит сериализации, в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Будет возвращен `true` Если <xref:System.Windows.UIElement.CommandBindings%2A> установлено локально.  
  
 Это `ShouldSerialize` метод предоставляется, поскольку <xref:System.Windows.UIElement.CommandBindings%2A> свойство не имеет значения по умолчанию. Этот метод указывает, изменилось ли свойство со значением по умолчанию. Этот метод обычно вызывается при либо разработке либо конструктора или при разработке собственного элемента управления с включением <xref:System.Windows.UIElement>.  
  
 Дополнительные сведения см. в разделе [определение значения по умолчанию с ShouldSerialize и Reset методы](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeInputBindings">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeInputBindings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeInputBindings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ShouldSerializeInputBindings" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeInputBindings () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeInputBindings();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает логическое значение, указывающее, следует ли процессам сериализации сериализировать содержимое свойства <see cref="P:System.Windows.UIElement.InputBindings" /> в экземплярах данного класса.</summary>
        <returns>
          Значение <see langword="true" />, если значение свойства <see cref="P:System.Windows.UIElement.InputBindings" /> подлежит сериализации, в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Будет возвращен `true` Если <xref:System.Windows.UIElement.InputBindings%2A> установлено локально.  
  
 Это `ShouldSerialize` метод предоставляется, поскольку <xref:System.Windows.UIElement.InputBindings%2A> свойство не имеет значения по умолчанию. Этот метод указывает, изменилось ли свойство со значением по умолчанию. Этот метод обычно вызывается при либо разработке либо конструктора или при разработке собственного элемента управления с включением <xref:System.Windows.UIElement>.  
  
 Дополнительные сведения см. в разделе [определение значения по умолчанию с ShouldSerialize и Reset методы](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SnapsToDevicePixels">
      <MemberSignature Language="C#" Value="public bool SnapsToDevicePixels { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SnapsToDevicePixels" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.SnapsToDevicePixels" />
      <MemberSignature Language="VB.NET" Value="Public Property SnapsToDevicePixels As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SnapsToDevicePixels { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает значение, определяющее, должны ли использоваться параметры пикселей для определенного устройства при отрисовке.  Это свойство зависимостей.</summary>
        <value>
          <see langword="true" />, если элемент следует визуализировать в соответствии с пикселями устройства; в противном случае <see langword="false" />. По умолчанию, как объявлено в <see cref="T:System.Windows.UIElement" />, используется значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это свойство можно задать `true` в корневом элементе, чтобы включить пикселей привязать визуализации на протяжении пользовательского интерфейса. Для устройств, работающих с более чем 96 [!INCLUDE[TLA#tla_dpi](~/includes/tlasharptla-dpi-md.md)], пикселей привязать визуализации можно свести к минимуму сглаживания visual артефактов вблизи сплошных линий одним.  
  
 Если наследуемые <xref:System.Windows.FrameworkElement> или какой-либо возможной производные классы, <xref:System.Windows.FrameworkElement> переопределяет метаданные для этого свойства зависимостей задать <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> свойства метаданных для `true`. Это достигается является внешнего элемента в поддереве необходимо указать <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> как `true`, так и все дочерние элементы элемента поддерево будет <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> как `true` и будет иметь <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> визуальный эффект.  
  
<a name="dependencyPropertyInfo_SnapsToDevicePixels"></a>   
## <a name="dependency-property-information"></a>Сведения о свойстве зависимостей  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.SnapsToDevicePixelsProperty>|  
|Значение свойства метаданных `true`|Нет|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SnapsToDevicePixelsProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty SnapsToDevicePixelsProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty SnapsToDevicePixelsProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.SnapsToDevicePixelsProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SnapsToDevicePixelsProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ SnapsToDevicePixelsProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует свойство зависимостей <see cref="P:System.Windows.UIElement.SnapsToDevicePixels" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler StylusButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler StylusButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusButtonDown As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ StylusButtonDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при нажатии кнопки пера в тот момент, когда указатель находится над данным элементом.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это событие создается псевдоним для <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType> вложенное событие для этого класса, чтобы <xref:System.Windows.UIElement.StylusButtonDown> входит в состав класса список членов, когда <xref:System.Windows.UIElement> наследуется от базового элемента. Обработчики событий, присоединенные к <xref:System.Windows.UIElement.StylusButtonDown> событий присоединяются к базовому объекту <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType> вложенное событие и получить тот же экземпляр данных события.  
  
 Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [фокусе](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusButtonDown"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.StylusButtonDownEvent>|  
|Стратегия маршрутизации|Вверх|  
|делегат|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   Соответствующее событие нисходящей маршрутизации является <xref:System.Windows.UIElement.PreviewStylusButtonDown>.  
  
-   Переопределить <xref:System.Windows.UIElement.OnStylusButtonDown%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="StylusButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusButtonDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.StylusButtonDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.  
  
 Дополнительные сведения о регистрации маршрутизированных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Дополнительные сведения об использовании идентификаторов маршрутизируемых событий для добавления обработчиков класса см. в описании метода <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler StylusButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler StylusButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusButtonUp As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ StylusButtonUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при отпускании кнопки пера в тот момент, когда указатель находится над данным элементом.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это событие создается псевдоним для <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType> вложенное событие для этого класса, чтобы <xref:System.Windows.UIElement.StylusButtonUp> входит в состав класса список членов, когда <xref:System.Windows.UIElement> наследуется от базового элемента. Обработчики событий, присоединенные к <xref:System.Windows.UIElement.StylusButtonUp> событий присоединяются к базовому объекту <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType> вложенное событие и получить тот же экземпляр данных события.  
  
 Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [фокусе](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusButtonUp"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.StylusButtonUpEvent>|  
|Стратегия маршрутизации|Вверх|  
|делегат|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   Соответствующее событие нисходящей маршрутизации является <xref:System.Windows.UIElement.PreviewStylusButtonUp>.  
  
-   Переопределить <xref:System.Windows.UIElement.OnStylusButtonUp%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="StylusButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusButtonUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.StylusButtonUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.  
  
 Дополнительные сведения о регистрации маршрутизированных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Дополнительные сведения об использовании идентификаторов маршрутизируемых событий для добавления обработчиков класса см. в описании метода <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusDownEventHandler StylusDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusDownEventHandler StylusDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusDown As StylusDownEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusDownEventHandler ^ StylusDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusDownEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при касании дигитайзера пером в тот момент, когда оно находится над данным элементом.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это событие создается псевдоним для <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType> вложенное событие для этого класса, чтобы <xref:System.Windows.UIElement.StylusDown> входит в состав класса список членов, когда <xref:System.Windows.UIElement> наследуется от базового элемента. Обработчики событий, присоединенные к <xref:System.Windows.UIElement.StylusDown> событий присоединяются к базовому объекту <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType> вложенное событие и получить тот же экземпляр данных события.  
  
 Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [фокусе](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusDown"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.StylusDownEvent>|  
|Стратегия маршрутизации|Вверх|  
|делегат|<xref:System.Windows.Input.StylusDownEventHandler>|  
  
-   Соответствующее событие нисходящей маршрутизации является <xref:System.Windows.UIElement.PreviewStylusDown>.  
  
-   Переопределить <xref:System.Windows.UIElement.OnStylusDown%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.StylusDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.  
  
 Дополнительные сведения о регистрации маршрутизированных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Дополнительные сведения об использовании идентификаторов маршрутизируемых событий для добавления обработчиков класса см. в описании метода <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusEnter As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusEnter;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusEnter</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит, когда перо попадает внутрь границ данного элемента.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.StylusEnter> Представляет объект, который использует прямой обработки стратегия маршрутизации события. Прямые перенаправленные события не вызываются по маршруту; Вместо этого они обрабатываются в том же элементе где они возникли. Тем не менее они включают другие аспекты поведения маршрутизируемых событий, например триггеры событий в стилях.  
  
 Несмотря на то что <xref:System.Windows.UIElement.StylusEnter> отслеживает, когда перо попадает внутрь границ элемента, это событие больше о том, что буквально <xref:System.Windows.UIElement.IsStylusOver%2A> значение свойства было изменено с `false` для `true` для этого элемента.  
  
 Это событие создается псевдоним для <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType> вложенное событие для этого класса, чтобы <xref:System.Windows.UIElement.StylusEnter> входит в состав класса список членов, когда <xref:System.Windows.UIElement> наследуется от базового элемента. Обработчики событий, присоединенные к <xref:System.Windows.UIElement.StylusEnter> событий присоединяются к базовому объекту <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType> вложенное событие и получить тот же экземпляр данных события.  
  
 Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [фокусе](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusEnter"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.StylusEnterEvent>|  
|Стратегия маршрутизации|Direct|  
|делегат|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Переопределить <xref:System.Windows.UIElement.OnStylusEnter%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusEnterEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.StylusEnter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.  
  
 Дополнительные сведения о регистрации маршрутизированных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Дополнительные сведения об использовании идентификаторов маршрутизируемых событий для добавления обработчиков класса см. в описании метода <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInAirMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusInAirMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusInAirMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusInAirMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusInAirMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusInAirMove;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusInAirMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при движении пера над элементом без касания дигитайзера.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это событие создается псевдоним для <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType> вложенное событие для этого класса, чтобы <xref:System.Windows.UIElement.StylusInAirMove> входит в состав класса список членов, когда <xref:System.Windows.UIElement> наследуется от базового элемента. Обработчики событий, присоединенные к <xref:System.Windows.UIElement.StylusInAirMove> событий присоединяются к базовому объекту <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType> вложенное событие и получить тот же экземпляр данных события.  
  
 Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [фокусе](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusInAirMove"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.StylusInAirMoveEvent>|  
|Стратегия маршрутизации|Вверх|  
|делегат|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Соответствующее событие нисходящей маршрутизации является <xref:System.Windows.UIElement.PreviewStylusInAirMove>.  
  
-   Переопределить <xref:System.Windows.UIElement.OnStylusInAirMove%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInAirMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusInAirMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusInAirMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusInAirMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusInAirMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusInAirMoveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.StylusInAirMove" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.  
  
 Дополнительные сведения о регистрации маршрутизированных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Дополнительные сведения об использовании идентификаторов маршрутизируемых событий для добавления обработчиков класса см. в описании метода <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusInRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusInRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusInRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusInRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusInRange;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusInRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при нахождении пера над данным элементом достаточно близко для того, чтобы перо было обнаружено дигитайзером.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это событие создается псевдоним для <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType> вложенное событие для этого класса, чтобы <xref:System.Windows.UIElement.StylusInRange> входит в состав класса список членов, когда <xref:System.Windows.UIElement> наследуется от базового элемента. Обработчики событий, присоединенные к <xref:System.Windows.UIElement.StylusInRange> событий присоединяются к базовому объекту <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType> вложенное событие и получить тот же экземпляр данных события.  
  
 Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [фокусе](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusInRange"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.StylusInRangeEvent>|  
|Стратегия маршрутизации|Вверх|  
|делегат|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Соответствующее событие нисходящей маршрутизации является <xref:System.Windows.UIElement.PreviewStylusInRange>.  
  
-   Переопределить <xref:System.Windows.UIElement.OnStylusInRange%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusInRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusInRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusInRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusInRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusInRangeEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.StylusInRange" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.  
  
 Дополнительные сведения о регистрации маршрутизированных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Дополнительные сведения об использовании идентификаторов маршрутизируемых событий для добавления обработчиков класса см. в описании метода <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusLeave As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusLeave;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusLeave</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит, когда перо покидает границы элемента.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.StylusLeave> Представляет объект, который использует прямой обработки стратегия маршрутизации события. Прямые перенаправленные события не вызываются по маршруту; Вместо этого они обрабатываются в том же элементе где они возникли. Тем не менее они включают другие аспекты поведения маршрутизируемых событий, например триггеры событий в стилях.  
  
 Несмотря на то что <xref:System.Windows.UIElement.StylusLeave> отслеживает, когда перо покидает границы элемента, это событие больше о том, что буквально <xref:System.Windows.UIElement.IsStylusOver%2A> значение свойства было изменено с `true` для `false` для этого элемента.  
  
 Это событие создается псевдоним для <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType> вложенное событие для этого класса, чтобы <xref:System.Windows.UIElement.StylusLeave> входит в состав класса список членов, когда <xref:System.Windows.UIElement> наследуется от базового элемента. Обработчики событий, присоединенные к <xref:System.Windows.UIElement.StylusLeave> событий присоединяются к базовому объекту <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType> вложенное событие и получить тот же экземпляр данных события.  
  
 Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [фокусе](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusLeave"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.StylusLeaveEvent>|  
|Стратегия маршрутизации|Direct|  
|делегат|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Переопределить <xref:System.Windows.UIElement.OnStylusLeave%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusLeaveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.StylusLeave" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.  
  
 Дополнительные сведения о регистрации маршрутизированных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Дополнительные сведения об использовании идентификаторов маршрутизируемых событий для добавления обработчиков класса см. в описании метода <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusMove;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при движении пера над данным элементом. Для вызова этого события перо должно перемещаться по дигитайзеру. В противном случае вместо данного события инициируется <see cref="E:System.Windows.UIElement.StylusInAirMove" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это событие создается псевдоним для <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType> вложенное событие для этого класса, чтобы <xref:System.Windows.UIElement.StylusMove> входит в состав класса список членов, когда <xref:System.Windows.UIElement> наследуется от базового элемента. Обработчики событий, присоединенные к <xref:System.Windows.UIElement.StylusMove> событий присоединяются к базовому объекту <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType> вложенное событие и получить тот же экземпляр данных события.  
  
 Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [фокусе](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusMove"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.StylusMoveEvent>|  
|Стратегия маршрутизации|Вверх|  
|делегат|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Соответствующее событие нисходящей маршрутизации является <xref:System.Windows.UIElement.PreviewStylusMove>.  
  
-   Переопределить <xref:System.Windows.UIElement.OnStylusMove%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusMoveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.StylusMove" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.  
  
 Дополнительные сведения о регистрации маршрутизированных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Дополнительные сведения об использовании идентификаторов маршрутизируемых событий для добавления обработчиков класса см. в описании метода <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusOutOfRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusOutOfRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusOutOfRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusOutOfRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusOutOfRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusOutOfRange;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusOutOfRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возникает, когда расстояние между пером и дигитайзером слишком велико для обнаружения пера при условии, что перо находится над этим элементом.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это событие создается псевдоним для <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType> вложенное событие для этого класса, чтобы <xref:System.Windows.UIElement.StylusOutOfRange> входит в состав класса список членов, когда <xref:System.Windows.UIElement> наследуется от базового элемента. Обработчики событий, присоединенные к <xref:System.Windows.UIElement.StylusOutOfRange> событий присоединяются к базовому объекту <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType> вложенное событие и получить тот же экземпляр данных события.  
  
 Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [фокусе](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusOutOfRange"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.StylusOutOfRangeEvent>|  
|Стратегия маршрутизации|Вверх|  
|делегат|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Соответствующее событие нисходящей маршрутизации является <xref:System.Windows.UIElement.PreviewStylusOutOfRange>.  
  
-   Переопределить <xref:System.Windows.UIElement.OnStylusOutOfRange%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusOutOfRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusOutOfRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusOutOfRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusOutOfRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusOutOfRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusOutOfRangeEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.StylusOutOfRange" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.  
  
 Дополнительные сведения о регистрации маршрутизированных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Дополнительные сведения об использовании идентификаторов маршрутизируемых событий для добавления обработчиков класса см. в описании метода <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusPlugIns">
      <MemberSignature Language="C#" Value="protected System.Windows.Input.StylusPlugIns.StylusPlugInCollection StylusPlugIns { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.StylusPlugIns.StylusPlugInCollection StylusPlugIns" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.StylusPlugIns" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property StylusPlugIns As StylusPlugInCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Windows::Input::StylusPlugIns::StylusPlugInCollection ^ StylusPlugIns { System::Windows::Input::StylusPlugIns::StylusPlugInCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusPlugIns.StylusPlugInCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает коллекцию всех подключаемых (настраиваемых) объектов пера, связанных с данным элементом.</summary>
        <value>Коллекция подключаемых объектов пера, как специализированная коллекция.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Является примером элемента управления, который заполняет этой коллекции <xref:System.Windows.Controls.InkCanvas>. <xref:System.Windows.Controls.InkCanvas> Добавляет <xref:System.Windows.Input.StylusPlugIns.DynamicRenderer> как элемент коллекции, который позволяет <xref:System.Windows.Input.StylusPlugIns.DynamicRenderer> для взаимодействия с ввод от пера и создания уникальных визуализации в ответ на управляемых событий пера.  
  
 Сведения о создании пользовательских подключаемых модулей, который может получать и интерпретировать ввод от пера, см. в разделе [от пера](~/docs/framework/wpf/advanced/intercepting-input-from-the-stylus.md).  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Windows.Input.StylusPlugIns.DynamicRenderer> экземпляра и добавляет его в <xref:System.Windows.UIElement.StylusPlugIns%2A> коллекции для рукописного ввода пользователем обработки элемента управления.  
  
 [!code-csharp[StylusPluginSamples#3](~/samples/snippets/csharp/VS_Snippets_Wpf/StylusPluginSamples/CSharp/StylusControl.cs#3)]
 [!code-vb[StylusPluginSamples#3](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StylusPluginSamples/VisualBasic/StylusControl.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.StylusPlugIns.DynamicRenderer" />
        <altmember cref="T:System.Windows.Controls.InkCanvas" />
      </Docs>
    </Member>
    <Member MemberName="StylusSystemGesture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusSystemGestureEventHandler StylusSystemGesture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusSystemGestureEventHandler StylusSystemGesture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusSystemGesture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusSystemGesture As StylusSystemGestureEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusSystemGestureEventHandler ^ StylusSystemGesture;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusSystemGesture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusSystemGestureEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при использовании пользователем одного из жестов пером.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Дополнительные сведения о жестах пера см. в разделе <xref:System.Windows.Input.SystemGesture>.  
  
 Это событие создается псевдоним для <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType> вложенное событие для этого класса, чтобы <xref:System.Windows.UIElement.StylusSystemGesture> входит в состав класса список членов, когда <xref:System.Windows.UIElement> наследуется от базового элемента. Обработчики событий, присоединенные к <xref:System.Windows.UIElement.StylusSystemGesture> событий присоединяются к базовому объекту <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType> вложенное событие и получить тот же экземпляр данных события.  
  
 Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [фокусе](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusSystemGesture"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.StylusSystemGestureEvent>|  
|Стратегия маршрутизации|Вверх|  
|делегат|<xref:System.Windows.Input.StylusSystemGestureEventHandler>|  
  
-   Соответствующее событие нисходящей маршрутизации является <xref:System.Windows.UIElement.PreviewStylusSystemGesture>.  
  
-   Переопределить <xref:System.Windows.UIElement.OnStylusSystemGesture%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusSystemGestureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusSystemGestureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusSystemGestureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusSystemGestureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusSystemGestureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusSystemGestureEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.StylusSystemGesture" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.  
  
 Дополнительные сведения о регистрации маршрутизированных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Дополнительные сведения об использовании идентификаторов маршрутизируемых событий для добавления обработчиков класса см. в описании метода <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusUp As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит, когда пользователь отрывает перо от поверхности дигитайзера в тот момент, когда оно находится над этим элементом.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это событие создается псевдоним для <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType> вложенное событие для этого класса, чтобы <xref:System.Windows.UIElement.StylusUp> входит в состав класса список членов, когда <xref:System.Windows.UIElement> наследуется от базового элемента. Обработчики событий, присоединенные к <xref:System.Windows.UIElement.StylusUp> событий присоединяются к базовому объекту <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType> вложенное событие и получить тот же экземпляр данных события.  
  
 Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [фокусе](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusUp"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.StylusUpEvent>|  
|Стратегия маршрутизации|Вверх|  
|делегат|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Соответствующее событие нисходящей маршрутизации является <xref:System.Windows.UIElement.PreviewStylusUp>.  
  
-   Переопределить <xref:System.Windows.UIElement.OnStylusUp%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.StylusUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.  
  
 Дополнительные сведения о регистрации маршрутизированных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Дополнительные сведения об использовании идентификаторов маршрутизируемых событий для добавления обработчиков класса см. в описании метода <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextInput">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.TextCompositionEventHandler TextInput;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.TextCompositionEventHandler TextInput" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TextInput" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TextInput As TextCompositionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::TextCompositionEventHandler ^ TextInput;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.TextInput</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.TextCompositionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при получении этим элементом текста аппаратно-независимым способом.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  Это событие уже может быть помечено как обработанное внутренними реализациями составных элементов управления. См. примечания ниже.  
  
 <xref:System.Windows.UIElement.TextInput> Событие уже может быть помечено как обработанное внутренними реализациями составных элементов управления. Например <xref:System.Windows.Controls.TextBox> является составной элемент управления где <xref:System.Windows.UIElement.TextInput> событие уже помечено как обработанное; внутри элемента. Элементы управления этого, так как он должен определять некоторые виды ввода, например клавиши со стрелками, как имеющие специальное значение для этого элемента управления. Если вы используете <xref:System.Windows.UIElement.PreviewTextInput> как события, где присоединение обработчиков для ввода текста, может появиться лучшие результаты. Этот прием позволяет обойти большинство случаях данное событие уже помечено как обработанное и предотвращает получение событий на маршруте события обработчиком композиции элемента управления.  
  
 <xref:System.Windows.UIElement.TextInput> Событий позволяет компонента или приложения для прослушивания ввода текста в аппаратно независимым способом. Клавиатура является основным средством для <xref:System.Windows.UIElement.TextInput>, но также может вызывать речи, рукописного ввода и других устройств ввода <xref:System.Windows.UIElement.TextInput>.  
  
 Из-за сочетания клавиш — клавиатуры по умолчанию или редакторам методов ввода, несколько событий клавиш могут сгенерировать только одно событие ввода текста.  
  
 Это событие создается псевдоним для <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType> вложенное событие для этого класса, чтобы <xref:System.Windows.UIElement.TextInput> входит в состав класса список членов, когда <xref:System.Windows.UIElement> наследуется от базового элемента. Обработчики событий, присоединенные к <xref:System.Windows.UIElement.TextInput> событий присоединяются к базовому объекту <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType> вложенное событие и получить тот же экземпляр данных события.  
  
<a name="routedEventInfo_TextInput"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.TextInputEvent>|  
|Стратегия маршрутизации|Вверх|  
|делегат|<xref:System.Windows.Input.TextCompositionEventHandler>|  
  
-   Соответствующее событие нисходящей маршрутизации является <xref:System.Windows.UIElement.PreviewTextInput>.  
  
-   Переопределить <xref:System.Windows.UIElement.OnTextInput%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextInputEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TextInputEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TextInputEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TextInputEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TextInputEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TextInputEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.TextInput" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.  
  
 Дополнительные сведения о регистрации маршрутизированных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Дополнительные сведения об использовании идентификаторов маршрутизируемых событий для добавления обработчиков класса см. в описании метода <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchDown">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TouchDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchDown As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchDown;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при касании пальцем экрана, когда палец находится над данным элементом.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 По умолчанию <xref:System.Windows.UIElement.PreviewTouchDown> и <xref:System.Windows.UIElement.TouchDown> событий не выполняется до пальцем экрана касается и перемещает. Нажав пальцем на экране и удерживая без его перемещения вызывает нажать клавиши и удерживайте поведение <xref:System.Windows.Input.Stylus>. Поведение нажатия и удерживания соответствует щелчку правой кнопкой мыши.  
  
 Чтобы вызвать <xref:System.Windows.UIElement.PreviewTouchDown> и <xref:System.Windows.UIElement.TouchDown> события к как можно скорее касании пальцем экрана, задать <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType> присоединенного свойства для `false` для этого элемента.  
  
<a name="routedEventInfo_TouchDown"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.TouchDownEvent>|  
|Стратегия маршрутизации|Вверх|  
|делегат|<xref:System.EventHandler%601> имеет тип данных <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Соответствующее событие нисходящей маршрутизации является <xref:System.Windows.UIElement.PreviewTouchDown>.  
  
-   Переопределить <xref:System.Windows.UIElement.OnTouchDown%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Input.Stylus.IsPressAndHoldEnabled" />
        <altmember cref="M:System.Windows.Input.Stylus.GetIsPressAndHoldEnabled(System.Windows.DependencyObject)" />
        <altmember cref="M:System.Windows.Input.Stylus.SetIsPressAndHoldEnabled(System.Windows.DependencyObject,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="TouchDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TouchDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.TouchDown" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchEnter">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TouchEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchEnter As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchEnter;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при перемещении касания внутрь данного элемента.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это событие всегда возникает, независимо от захвата сенсорного устройства данным элементом.  
  
<a name="routedEventInfo_TouchEnter"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.TouchEnterEvent>|  
|Стратегия маршрутизации|Direct|  
|Делегат|<xref:System.EventHandler%601> имеет тип данных <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Переопределить <xref:System.Windows.UIElement.OnTouchEnter%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TouchEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchEnterEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.TouchEnter" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesCaptured">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.TouchesCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesCaptured As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesCaptured { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает все сенсорные устройства, переданные в данный элемент.</summary>
        <value>Перечисление объектов <see cref="T:System.Windows.Input.TouchDevice" />, полученных этим элементом.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesCapturedWithin">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesCapturedWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesCapturedWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.TouchesCapturedWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesCapturedWithin As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesCapturedWithin { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает все сенсорные устройства, переданные в этот элемент или какой-либо из его дочерних элементов в визуальном дереве.</summary>
        <value>Перечисление объектов <see cref="T:System.Windows.Input.TouchDevice" />, полученных этим элементом или каким-либо из его дочерних элементов в визуальном дереве.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesDirectlyOver">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.TouchesDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesDirectlyOver As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesDirectlyOver { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает все сенсорные устройства, находящиеся над данным элементом.</summary>
        <value>Перечисление объектов <see cref="T:System.Windows.Input.TouchDevice" />, находящихся над этим элементом.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesOver">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.TouchesOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesOver As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesOver { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает все сенсорные устройства, находящиеся над этим элементом или каким-либо из его дочерних элементов в визуальном дереве.</summary>
        <value>Перечисление объектов <see cref="T:System.Windows.Input.TouchDevice" />, которые находятся над этим элементом или каким-либо из его дочерних элементов в визуальном дереве.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchLeave">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TouchLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchLeave As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchLeave;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при перемещении касания за границы элемента.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это событие всегда возникает, независимо от захвата сенсорного устройства данным элементом.  
  
<a name="routedEventInfo_TouchLeave"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.TouchLeaveEvent>|  
|Стратегия маршрутизации|Direct|  
|Делегат|<xref:System.EventHandler%601> имеет тип данных <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Переопределить <xref:System.Windows.UIElement.OnTouchLeave%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TouchLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchLeaveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.TouchLeave" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchMove">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TouchMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchMove As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchMove;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возникает при перемещении пальца по экрану при условии, если палец находится над данным элементом.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_TouchMove"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.TouchMoveEvent>|  
|Стратегия маршрутизации|Вверх|  
|делегат|<xref:System.EventHandler%601> имеет тип данных <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Соответствующее событие нисходящей маршрутизации является <xref:System.Windows.UIElement.PreviewTouchMove>.  
  
-   Переопределить <xref:System.Windows.UIElement.OnTouchMove%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TouchMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchMoveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.TouchMove" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchUp">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TouchUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchUp As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchUp;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возникает, когда палец отрывается от экрана при условии, что палец находится над этим элементом.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_TouchUp"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.TouchUpEvent>|  
|Стратегия маршрутизации|Вверх|  
|делегат|<xref:System.EventHandler%601> имеет тип данных <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Соответствующее событие нисходящей маршрутизации является <xref:System.Windows.UIElement.PreviewTouchUp>.  
  
-   Переопределить <xref:System.Windows.UIElement.OnTouchUp%2A> реализации класса обработчик данного события в производных классах.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TouchUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует направленное событие <see cref="E:System.Windows.UIElement.TouchUp" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslatePoint">
      <MemberSignature Language="C#" Value="public System.Windows.Point TranslatePoint (System.Windows.Point point, System.Windows.UIElement relativeTo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Point TranslatePoint(valuetype System.Windows.Point point, class System.Windows.UIElement relativeTo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.TranslatePoint(System.Windows.Point,System.Windows.UIElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Point TranslatePoint(System::Windows::Point point, System::Windows::UIElement ^ relativeTo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Windows.Point" />
        <Parameter Name="relativeTo" Type="System.Windows.UIElement" />
      </Parameters>
      <Docs>
        <param name="point">Значение точки относительно данного элемента.</param>
        <param name="relativeTo">Элемент, в который преобразуется данная точка.</param>
        <summary>Преобразует точку относительно данного элемента в координаты относительно указанного элемента.</summary>
        <returns>Значение точки, которое теперь задано относительно целевого элемента, а не исходного.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Передача `null` для `relativeTo` разрешена и указывает, что координаты должен указываться относительно корневого элемента в логическом дереве, к которому принадлежит этот элемент.  
  
 Этот метод используется для преобразования попаданий тестовые точки значения. Вызов этого метода имеет значение, главным образом, при разработке элемента управления и необходимо обработать ввод на более низком уровне. Если вы используете существующие элементы управления, можно считать, что готовые элементы будут сообщать правильно преобразованные результаты проверки нажатия.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Uid">
      <MemberSignature Language="C#" Value="public string Uid { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Uid" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Uid" />
      <MemberSignature Language="VB.NET" Value="Public Property Uid As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Uid { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает уникальный идентификатор (в целях локализации) для этого элемента. Это свойство зависимостей.</summary>
        <value>Строка, представляющая уникальный идентификатор для этого элемента.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используемые конструкторы для получения `x:Uid` значение (в разделе [Общие сведения о локализации и глобализации WPF](~/docs/framework/wpf/advanced/wpf-globalization-and-localization-overview.md) для получения дополнительной информации).  
  
<a name="dependencyPropertyInfo_WindowWindowStyle"></a>   
## <a name="dependency-property-information"></a>Сведения о свойстве зависимостей  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.UidProperty>|  
|Значение свойства метаданных `true`|Нет|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UidProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty UidProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty UidProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.UidProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UidProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ UidProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует свойство зависимостей <see cref="P:System.Windows.UIElement.Uid" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateLayout">
      <MemberSignature Language="C#" Value="public void UpdateLayout ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateLayout() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.UpdateLayout" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateLayout ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateLayout();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Обеспечивает правильное обновление всех визуальных дочерних элементов данного элемента для структуры.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При вызове этого метода, элементы с <xref:System.Windows.UIElement.IsMeasureValid%2A> `false` или <xref:System.Windows.UIElement.IsArrangeValid%2A> `false` вызовет конкретного элемента <xref:System.Windows.UIElement.MeasureCore%2A> и <xref:System.Windows.UIElement.ArrangeCore%2A> методы, что заставляет макета обновления и будут проверены все вычисляемые размеры.  
  
 Вызов этого метода имеет смысл, если макет не содержит изменений или имеют недопустимое состояние упорядочение ни измерения макета. Тем не менее, если в любом случае Недопустимый макет <xref:System.Windows.UIElement.UpdateLayout%2A> вызов будет вернуть всего макета. Поэтому следует избегать вызова функции <xref:System.Windows.UIElement.UpdateLayout%2A> после каждого изменения добавочного, так и дополнительный номер в дереве элементов. Система макета выполнит макета элемента с отложенным способом, используя алгоритм балансирования производительности и денежных единиц и взвешенной стратегией отложить изменения корней, пока все дочерние элементы являются допустимыми. Следует вызывать только <xref:System.Windows.UIElement.UpdateLayout%2A> при абсолютной необходимости в обновлении размеров и позиций, и только после того, что вы являетесь, что выполнены все изменения свойств, что элемент управления, которые может повлиять на макет.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="Visibility">
      <MemberSignature Language="C#" Value="public System.Windows.Visibility Visibility { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Visibility Visibility" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Visibility" />
      <MemberSignature Language="VB.NET" Value="Public Property Visibility As Visibility" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Visibility Visibility { System::Windows::Visibility get(); void set(System::Windows::Visibility value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Visibility</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает видимость данного элемента в [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].  Это свойство зависимостей.</summary>
        <value>Значение перечисления. Значение по умолчанию — <see cref="F:System.Windows.Visibility.Visible" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Задание этого свойства влияет на значение <xref:System.Windows.UIElement.IsVisible%2A>, который в свою очередь может вызвать <xref:System.Windows.UIElement.IsVisibleChanged> событий. Однако <xref:System.Windows.UIElement.IsVisible%2A> имеет другие факторы, влияющие на его, параметры видимости для экземпляра родительских элементов, содержащих его.  
  
 Элементы где <xref:System.Windows.UIElement.Visibility%2A> не <xref:System.Windows.Visibility.Visible> не участвуют в входного события (или командах), не влияют на этапах либо измерения или компоновки макета, не входящие в последовательность перехода и не будут включаться в проверки нажатия.  
  
 Если наследуемые <xref:System.Windows.Window> или его производных классов <xref:System.Windows.Window> переопределяет значение по умолчанию этого свойства было <xref:System.Windows.Visibility.Collapsed>. Действует, не работающих передачу показателей разметки на первоначально созданный <xref:System.Windows.Window>, и <xref:System.Windows.UIElement.RenderSize%2A> возвращает (0,0). Дополнительные сведения см. в разделе <xref:System.Windows.Window>. <xref:System.Windows.Controls.Primitives.Popup> переопределяет значение по умолчанию, необходимо также <xref:System.Windows.Visibility.Collapsed>, с похожим поведением, полученный для <xref:System.Windows.Controls.Primitives.Popup> и его производные классы.  
  
<a name="dependencyPropertyInfo_Visibility"></a>   
## <a name="dependency-property-information"></a>Сведения о свойстве зависимостей  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.UIElement.VisibilityProperty>|  
|Значение свойства метаданных `true`|Нет|  
  
   
  
## Examples  
 В следующем примере реализуется обработчик, который ссылается на две разные именованные кнопки, которые должны быть взаимоисключающей парой в пользовательском интерфейсе. Перед запуском самой программы логику, связанную с помощью кнопки, кнопки, сам настроена на <xref:System.Windows.Visibility.Hidden?displayProperty=nameWithType>, и другие кнопки в паре задано значение <xref:System.Windows.Visibility.Visible?displayProperty=nameWithType>.  
  
 [!code-csharp[MediaElement_snip#UIElementVisibility](~/samples/snippets/csharp/VS_Snippets_Wpf/MediaElement_snip/CSharp/PlaybackExample.cs#uielementvisibility)]
 [!code-vb[MediaElement_snip#UIElementVisibility](~/samples/snippets/visualbasic/VS_Snippets_Wpf/MediaElement_snip/VB/PlaybackExample.vb#uielementvisibility)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsVisible" />
        <altmember cref="T:System.Windows.Visibility" />
      </Docs>
    </Member>
    <Member MemberName="VisibilityProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty VisibilityProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty VisibilityProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.VisibilityProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly VisibilityProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ VisibilityProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует свойство зависимостей <see cref="P:System.Windows.UIElement.Visibility" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>