<Type Name="VisualStateManager" FullName="System.Windows.VisualStateManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b4daa92282153a35abd2da928e1de70dd1be505d" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30680008" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class VisualStateManager : System.Windows.DependencyObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit VisualStateManager extends System.Windows.DependencyObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.VisualStateManager" />
  <TypeSignature Language="VB.NET" Value="Public Class VisualStateManager&#xA;Inherits DependencyObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class VisualStateManager : System::Windows::DependencyObject" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.DependencyObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Управляет состояниями и логикой для переходов между состояниями элементов управления.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.VisualStateManager> Позволяет указать состояний элемента управления, внешний вид элемента управления, когда он находится в определенном состоянии, а также при изменении состояния элемента управления. Например <xref:System.Windows.Controls.Button> может иметь несколько различный внешний вид при нажатии чем нажатого не. Двумя состояниями, <xref:System.Windows.Controls.Button> определяет соответствуют нажатого (`"Pressed"`) и когда это не (`"Normal"`). Внешний вид элемента управления, когда он находится в состоянии определяется <xref:System.Windows.VisualState>. Объект <xref:System.Windows.VisualState> содержит коллекцию <xref:System.Windows.Media.Animation.Storyboard> объекты, которые указывают, как изменяется внешний вид элемента управления, когда элемент управления находится в этом состоянии. Добавить визуальные состояния элемента управления, установив `VisualStateManager.VisualStateGroups` присоединенного свойства элемента управления. Каждый <xref:System.Windows.VisualStateGroup> содержит коллекцию <xref:System.Windows.VisualState> объекты, которые являются взаимоисключающими. То есть элемент управления всегда находится в ровно одно состояние в каждом <xref:System.Windows.VisualStateGroup>.  
  
 <xref:System.Windows.VisualStateManager> Также позволяет указать, при достижении определенного состояния. Метод, который следует использовать для изменения состояния зависит от сценария. При создании элемента управления, который использует <xref:System.Windows.VisualStateManager> в его <xref:System.Windows.Controls.ControlTemplate>, вызовите <xref:System.Windows.VisualStateManager.GoToState%2A> метод. Дополнительные сведения о создании элементов управления, использующих <xref:System.Windows.VisualStateManager>, в разделе [Создание элемент управления, имеющий Настройка внешнего вида](~/docs/framework/wpf/controls/creating-a-control-that-has-a-customizable-appearance.md). При использовании <xref:System.Windows.VisualStateManager> за пределами <xref:System.Windows.Controls.ControlTemplate> (например, в том случае, если вы используете <xref:System.Windows.VisualStateManager> в <xref:System.Windows.Controls.UserControl> или один элемент), вызовите <xref:System.Windows.VisualStateManager.GoToElementState%2A> метод. В любом случае <xref:System.Windows.VisualStateManager> выполняет действия, необходимые для корректного запуска и остановки раскадровки, которые связаны с соответствующим состоянием. Например, предположим, что элемент управления определяет состояния, `State1` и `State2`, каждый из которых есть связанные с ним раскадровки. Если элемент управления находится в `State1` и передать `State2` для <xref:System.Windows.VisualStateManager.GoToState%2A> или <xref:System.Windows.VisualStateManager.GoToElementState%2A>, <xref:System.Windows.VisualStateManager> запускает раскадровку `State2` и останавливает раскадровку в `State1`.  
  
 Элементы управления, которые входят в состав [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] использовать <xref:System.Windows.VisualStateManager> для изменения визуального состояния. При создании <xref:System.Windows.Controls.ControlTemplate> для элемента управления, который входит в состав [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], можно добавить <xref:System.Windows.VisualState> объекты к элементу управления <xref:System.Windows.Controls.ControlTemplate> для указания внешнего вида элемента управления в определенном состоянии. Чтобы найти имена визуальные состояния элементов управления, которые входят в состав [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], в разделе [управления стили и шаблоны](~/docs/framework/wpf/controls/control-styles-and-templates.md). Определение элемента управления логика обрабатывает переходов между состояниями, поэтому не нужно выполнять никаких действий, отличных от <xref:System.Windows.VisualState> объектов в новом <xref:System.Windows.Controls.ControlTemplate>. Дополнительные сведения о способах создания шаблонов элементов управления для существующих элементов управления см. в разделе [Настройка внешнего вида существующего элемента управления путем создания объекта ControlTemplate](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md).  
  
 Если необходимо реализовать собственную логику для переходов между состояниями, должен наследовать от <xref:System.Windows.VisualStateManager>, переопределите <xref:System.Windows.VisualStateManager.GoToStateCore%2A> метода, а также установите <xref:System.Windows.VisualStateManager.CustomVisualStateManager%2A?displayProperty=nameWithType> присоединенного свойства элемента управления, использующего пользовательскую логику.  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Windows.Shapes.Rectangle> и добавляет <xref:System.Windows.VisualStateGroup> с именем `CommonStates` для `VisualStateManager.VisualStatesGroups` вложенное свойство. В примере определяется `MouseOver` и `Normal` <xref:System.Windows.VisualState> объекты в `CommonStates` <xref:System.Windows.VisualStateGroup>. Когда пользователь перемещает указатель мыши <xref:System.Windows.Shapes.Rectangle>, она меняется от красного на зеленый через пол секунды. Когда пользователь перемещает указатель мыши прямоугольник, <xref:System.Windows.Controls.Grid> немедленно изменений обратно на красный. Обратите внимание, что `Normal` не определяет состояние <xref:System.Windows.Media.Animation.Storyboard>. Объект <xref:System.Windows.Media.Animation.Storyboard> не требуется, так как при <xref:System.Windows.Shapes.Rectangle> переходит из `MouseOver` состояние `Normal` состояние, <xref:System.Windows.Media.Animation.Storyboard> для `MouseOver` остановлена и <xref:System.Windows.Media.SolidColorBrush.Color%2A> свойство <xref:System.Windows.Media.SolidColorBrush> возвращает на красный.  
  
 [!code-xaml[VSMCustomControl#VSMNoTemplate](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmcustomcontrol/csharp/window1.xaml#vsmnotemplate)]  
  
 Следующий пример показывает обработчик событий, определенный в предыдущем примере и вызывает метод <xref:System.Windows.VisualStateManager.GoToElementState%2A> метод для перехода между состояниями. Если прямоугольник, в предыдущем примере был частью <xref:System.Windows.Controls.ControlTemplate>, пример пришлось бы вызвать <xref:System.Windows.VisualStateManager.GoToState%2A> метод.  
  
 [!code-csharp[VSMCustomControl#GoToElementState](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmcustomcontrol/csharp/window1.xaml.cs#gotoelementstate)]
 [!code-vb[VSMCustomControl#GoToElementState](~/samples/snippets/visualbasic/VS_Snippets_Wpf/vsmcustomcontrol/visualbasic/window1.xaml.vb#gotoelementstate)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public VisualStateManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; VisualStateManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Windows.VisualStateManager" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomVisualStateManager">
      <MemberSignature Language="C#" Value="see GetCustomVisualStateManager, and SetCustomVisualStateManager" />
      <MemberSignature Language="ILAsm" Value="see GetCustomVisualStateManager, and SetCustomVisualStateManager" />
      <MemberSignature Language="DocId" Value="P:System.Windows.VisualStateManager.CustomVisualStateManager" />
      <MemberSignature Language="VB.NET" Value="see GetCustomVisualStateManager, and SetCustomVisualStateManager" />
      <MemberType>AttachedProperty</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomVisualStateManagerProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CustomVisualStateManagerProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CustomVisualStateManagerProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.VisualStateManager.CustomVisualStateManagerProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CustomVisualStateManagerProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CustomVisualStateManagerProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует свойство зависимостей <see cref="P:System.Windows.VisualStateManager.CustomVisualStateManager" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCustomVisualStateManager">
      <MemberSignature Language="C#" Value="public static System.Windows.VisualStateManager GetCustomVisualStateManager (System.Windows.FrameworkElement obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.VisualStateManager GetCustomVisualStateManager(class System.Windows.FrameworkElement obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.GetCustomVisualStateManager(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCustomVisualStateManager (obj As FrameworkElement) As VisualStateManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::VisualStateManager ^ GetCustomVisualStateManager(System::Windows::FrameworkElement ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.VisualStateManager</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="obj">Элемент, из которого требуется получить вложенное свойство зависимостей <see cref="P:System.Windows.VisualStateManager.CustomVisualStateManager" />.</param>
        <summary>Получает вложенное свойство <see cref="P:System.Windows.VisualStateManager.CustomVisualStateManager" />.</summary>
        <returns>Диспетчер визуальных состояний, который осуществляет переход между состояниями элемента управления.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetVisualStateGroups">
      <MemberSignature Language="C#" Value="public static System.Collections.IList GetVisualStateGroups (System.Windows.FrameworkElement obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IList GetVisualStateGroups(class System.Windows.FrameworkElement obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.GetVisualStateGroups(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetVisualStateGroups (obj As FrameworkElement) As IList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::IList ^ GetVisualStateGroups(System::Windows::FrameworkElement ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="obj">Элемент, из которого требуется получить вложенное свойство зависимостей <see cref="P:System.Windows.VisualStateManager.VisualStateGroups" />.</param>
        <summary>Получает вложенное свойство <see cref="P:System.Windows.VisualStateManager.VisualStateGroups" />.</summary>
        <returns>Коллекция объектов <see cref="T:System.Windows.VisualStateGroup" />, связанная с заданным объектом.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GoToElementState">
      <MemberSignature Language="C#" Value="public static bool GoToElementState (System.Windows.FrameworkElement stateGroupsRoot, string stateName, bool useTransitions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GoToElementState(class System.Windows.FrameworkElement stateGroupsRoot, string stateName, bool useTransitions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.GoToElementState(System.Windows.FrameworkElement,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GoToElementState (stateGroupsRoot As FrameworkElement, stateName As String, useTransitions As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool GoToElementState(System::Windows::FrameworkElement ^ stateGroupsRoot, System::String ^ stateName, bool useTransitions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateGroupsRoot" Type="System.Windows.FrameworkElement" />
        <Parameter Name="stateName" Type="System.String" />
        <Parameter Name="useTransitions" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stateGroupsRoot">Корневой элемент, содержащий объект <see cref="T:System.Windows.VisualStateManager" />.</param>
        <param name="stateName">Состояние, в которое требуется перейти.</param>
        <param name="useTransitions">
          Значение <see langword="true" />, если для перехода между состояниями необходимо использовать объект <see cref="T:System.Windows.VisualTransition" />; в противном случае — значение <see langword="false" />.</param>
        <summary>Переводит элемент из одного из двух состояний в другое. Этот метод используется для смены состояний, определенных приложением, а не определенных элементом управления.</summary>
        <returns>
          Значение <see langword="true" />, если элемент управления успешно перешел в новое состояние; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вызовите <xref:System.Windows.VisualStateManager.GoToElementState%2A> метод, чтобы изменить состояний на элемент за пределами <xref:System.Windows.Controls.ControlTemplate> (например, в том случае, если вы используете <xref:System.Windows.VisualStateManager> в <xref:System.Windows.DataTemplate> или <xref:System.Windows.Window>). Вызовите <xref:System.Windows.VisualStateManager.GoToState%2A> метод при изменении состояния в элементе управления, использующем <xref:System.Windows.VisualStateManager> в его <xref:System.Windows.Controls.ControlTemplate>.  
  
   
  
## Examples  
 В следующем примере создается приложение, позволяющее пользователю Угадайте число от 1 до 100.  Когда пользователь вводит номер, приложение указывает, является ли предположение слишком велико, слишком мало или правильно.  Следующие [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] создает пользовательский интерфейс для приложения и определяет состояния, 4: `TooLow`, `TooHigh`, `Correct`, и `Guessing`. При запуске приложения, он находится в `Guessing` состояние. .  
  
 [!code-xaml[VSMGoToElementState#GoToElementStateXaml](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmgotoelementstate/csharp/mainwindow.xaml#gotoelementstatexaml)]  
  
 В следующем коде показано логики в приложении.  Когда пользователь вводит номер и нажатии кнопки, приложение вызывает <xref:System.Windows.VisualStateManager.GoToElementState%2A> переход `TooHigh`, `TooLow`, или `Correct` для предоставления отзывов о предположение.  Чтобы протестировать этот пример, вызовите `GenerateNumber` метод при запуске приложения.  
  
 [!code-csharp[VSMGoToElementState#GoToElementStateCode](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmgotoelementstate/csharp/mainwindow.xaml.cs#gotoelementstatecode)]
 [!code-vb[VSMGoToElementState#GoToElementStateCode](~/samples/snippets/visualbasic/VS_Snippets_Wpf/vsmgotoelementstate/visualbasic/mainwindow.xaml.vb#gotoelementstatecode)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="stateGroupsRoot" /> имеет значение <see langword="null" />.  
  
 - или -  
  
 Свойство <paramref name="stateName" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GoToState">
      <MemberSignature Language="C#" Value="public static bool GoToState (System.Windows.FrameworkElement control, string stateName, bool useTransitions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GoToState(class System.Windows.FrameworkElement control, string stateName, bool useTransitions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.GoToState(System.Windows.FrameworkElement,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GoToState (control As FrameworkElement, stateName As String, useTransitions As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool GoToState(System::Windows::FrameworkElement ^ control, System::String ^ stateName, bool useTransitions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Windows.FrameworkElement" />
        <Parameter Name="stateName" Type="System.String" />
        <Parameter Name="useTransitions" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">Элемент управления, переводимый из одного состояния в другое.</param>
        <param name="stateName">Состояние, в которое требуется перейти.</param>
        <param name="useTransitions">
          Значение <see langword="true" />, если для перехода между состояниями необходимо использовать объект <see cref="T:System.Windows.VisualTransition" />; в противном случае — значение <see langword="false" />.</param>
        <summary>Переводит элемент управления из одного состояния в другое. Этот метод используется для смены состояний элемента управления, содержащего объект <see cref="T:System.Windows.Controls.ControlTemplate" />.</summary>
        <returns>
          Значение <see langword="true" />, если элемент управления успешно перешел в новое состояние; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вызовите <xref:System.Windows.VisualStateManager.GoToState%2A> метод при изменении состояния в элементе управления, использующем <xref:System.Windows.VisualStateManager> в его <xref:System.Windows.Controls.ControlTemplate>. Вызовите <xref:System.Windows.VisualStateManager.GoToElementState%2A> метод, чтобы изменить состояний на элемент за пределами <xref:System.Windows.Controls.ControlTemplate> (например, в том случае, если вы используете <xref:System.Windows.VisualStateManager> в <xref:System.Windows.Controls.UserControl> или один элемент).  
  
   
  
## Examples  
 В следующем примере демонстрируется элемент управления, использующий <xref:System.Windows.VisualStateManager.GoToState%2A> метод для перехода между состояниями. Полный пример см. [Создание элемента управления, имеет Настройка внешнего вида](~/docs/framework/wpf/controls/creating-a-control-that-has-a-customizable-appearance.md).  
  
 [!code-csharp[VSMCustomControl#UpdateStates](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmcustomcontrol/csharp/numericupdown.cs#updatestates)]
 [!code-vb[VSMCustomControl#UpdateStates](~/samples/snippets/visualbasic/VS_Snippets_Wpf/vsmcustomcontrol/visualbasic/numericupdown.vb#updatestates)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="control" /> имеет значение <see langword="null" />.  
  
 - или -  
  
 Свойство <paramref name="stateName" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GoToStateCore">
      <MemberSignature Language="C#" Value="protected virtual bool GoToStateCore (System.Windows.FrameworkElement control, System.Windows.FrameworkElement stateGroupsRoot, string stateName, System.Windows.VisualStateGroup group, System.Windows.VisualState state, bool useTransitions);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool GoToStateCore(class System.Windows.FrameworkElement control, class System.Windows.FrameworkElement stateGroupsRoot, string stateName, class System.Windows.VisualStateGroup group, class System.Windows.VisualState state, bool useTransitions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.GoToStateCore(System.Windows.FrameworkElement,System.Windows.FrameworkElement,System.String,System.Windows.VisualStateGroup,System.Windows.VisualState,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GoToStateCore (control As FrameworkElement, stateGroupsRoot As FrameworkElement, stateName As String, group As VisualStateGroup, state As VisualState, useTransitions As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool GoToStateCore(System::Windows::FrameworkElement ^ control, System::Windows::FrameworkElement ^ stateGroupsRoot, System::String ^ stateName, System::Windows::VisualStateGroup ^ group, System::Windows::VisualState ^ state, bool useTransitions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Windows.FrameworkElement" />
        <Parameter Name="stateGroupsRoot" Type="System.Windows.FrameworkElement" />
        <Parameter Name="stateName" Type="System.String" />
        <Parameter Name="group" Type="System.Windows.VisualStateGroup" />
        <Parameter Name="state" Type="System.Windows.VisualState" />
        <Parameter Name="useTransitions" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">Элемент управления, переводимый из одного состояния в другое.</param>
        <param name="stateGroupsRoot">Корневой элемент, содержащий объект <see cref="T:System.Windows.VisualStateManager" />.</param>
        <param name="stateName">Имя состояния, в которое требуется перейти.</param>
        <param name="group">Объект <see cref="T:System.Windows.VisualStateGroup" />, к которому относится данное состояние.</param>
        <param name="state">Представление состояния, в которое требуется перейти.</param>
        <param name="useTransitions">
          Значение <see langword="true" />, если для перехода между состояниями необходимо использовать объект <see cref="T:System.Windows.VisualTransition" />; в противном случае — значение <see langword="false" />.</param>
        <summary>Переводит элемент управления из одного состояния в другое.</summary>
        <returns>
          Значение <see langword="true" />, если элемент управления успешно перешел в новое состояние; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.VisualStateManager.GoToStateCore%2A> Метод выполняет логику, необходимую для корректного запуска и остановки раскадровки, связанные с переносом. Когда элемент управления вызывает <xref:System.Windows.VisualStateManager.GoToState%2A> для изменения его состояния <xref:System.Windows.VisualStateManager> делает следующее:  
  
-   Во-первых, если <xref:System.Windows.VisualState> переходит элемент управления имеет <xref:System.Windows.Media.Animation.Storyboard>, раскадровки. Затем, если <xref:System.Windows.VisualState> откуда элемент управления имеет <xref:System.Windows.Media.Animation.Storyboard>, раскадровка останавливается.  
  
-   Если элемент уже присутствует в `stateName` состояние, <xref:System.Windows.VisualStateManager.GoToState%2A> не выполняет никаких действий и возвращает `true`.  
  
-   Если `stateName` не существует в <xref:System.Windows.Controls.ControlTemplate> из `control`, <xref:System.Windows.VisualStateManager.GoToState%2A> не выполняет никаких действий и возвращает `false`.  
  
 Можно реализовать собственный <xref:System.Windows.VisualStateManager> для предоставления другой логикой для переходов между состояниями. Например можно изменить логики, описанной выше, или можно задать логику для перехода между типами пользовательской анимации.  Для реализации <xref:System.Windows.VisualStateManager>, создайте класс, наследующий от <xref:System.Windows.VisualStateManager> и Переопределите <xref:System.Windows.VisualStateManager.GoToStateCore%2A> метод. Чтобы использовать пользовательский класс, задайте <xref:System.Windows.VisualStateManager.CustomVisualStateManager%2A> свойства в объект пользовательского типа.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseCurrentStateChanged">
      <MemberSignature Language="C#" Value="protected void RaiseCurrentStateChanged (System.Windows.VisualStateGroup stateGroup, System.Windows.VisualState oldState, System.Windows.VisualState newState, System.Windows.FrameworkElement control, System.Windows.FrameworkElement stateGroupsRoot);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RaiseCurrentStateChanged(class System.Windows.VisualStateGroup stateGroup, class System.Windows.VisualState oldState, class System.Windows.VisualState newState, class System.Windows.FrameworkElement control, class System.Windows.FrameworkElement stateGroupsRoot) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.RaiseCurrentStateChanged(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState,System.Windows.FrameworkElement,System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub RaiseCurrentStateChanged (stateGroup As VisualStateGroup, oldState As VisualState, newState As VisualState, control As FrameworkElement, stateGroupsRoot As FrameworkElement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void RaiseCurrentStateChanged(System::Windows::VisualStateGroup ^ stateGroup, System::Windows::VisualState ^ oldState, System::Windows::VisualState ^ newState, System::Windows::FrameworkElement ^ control, System::Windows::FrameworkElement ^ stateGroupsRoot);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateGroup" Type="System.Windows.VisualStateGroup" />
        <Parameter Name="oldState" Type="System.Windows.VisualState" />
        <Parameter Name="newState" Type="System.Windows.VisualState" />
        <Parameter Name="control" Type="System.Windows.FrameworkElement" />
        <Parameter Name="stateGroupsRoot" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="stateGroup">Объект, на котором произошло событие <see cref="E:System.Windows.VisualStateGroup.CurrentStateChanging" />.</param>
        <param name="oldState">Состояние, из которого переходит элемент управления.</param>
        <param name="newState">Состояние, в которое переходит элемент управления.</param>
        <param name="control">Элемент управления, переходящий из одного состояния в другое.</param>
        <param name="stateGroupsRoot">Корневой элемент, содержащий объект <see cref="T:System.Windows.VisualStateManager" />.</param>
        <summary>Порождает событие <see cref="E:System.Windows.VisualStateGroup.CurrentStateChanging" /> на заданном объекте <see cref="T:System.Windows.VisualStateGroup" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Когда <xref:System.Windows.VisualStateGroup> устанавливается на <xref:System.Windows.Controls.ControlTemplate> элемента управления, `control` параметр имеет значение элемента управления, которому принадлежит <xref:System.Windows.Controls.ControlTemplate>.  При <xref:System.Windows.VisualStateGroup> устанавливается на <xref:System.Windows.FrameworkElement>, `control` — `null` , поэтому необходимо использовать `stateGroupsRoot` параметра.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="stateGroupsRoot" /> имеет значение <see langword="null" />.  
  
 - или -  
  
 Свойство <paramref name="newState" /> имеет значение <see langword="null" />.</exception>
        <block subset="none" type="overrides">
          <para>При переопределении метода <see cref="M:System.Windows.VisualStateManager.RaiseCurrentStateChanged(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState,System.Windows.FrameworkElement,System.Windows.FrameworkElement)" /> в производном классе нужно убедиться, что вызов базового класса <see cref="M:System.Windows.VisualStateManager.RaiseCurrentStateChanged(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState,System.Windows.FrameworkElement,System.Windows.FrameworkElement)" /> метод, чтобы зарегистрированные делегаты получили событие.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="RaiseCurrentStateChanging">
      <MemberSignature Language="C#" Value="protected void RaiseCurrentStateChanging (System.Windows.VisualStateGroup stateGroup, System.Windows.VisualState oldState, System.Windows.VisualState newState, System.Windows.FrameworkElement control, System.Windows.FrameworkElement stateGroupsRoot);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RaiseCurrentStateChanging(class System.Windows.VisualStateGroup stateGroup, class System.Windows.VisualState oldState, class System.Windows.VisualState newState, class System.Windows.FrameworkElement control, class System.Windows.FrameworkElement stateGroupsRoot) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.RaiseCurrentStateChanging(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState,System.Windows.FrameworkElement,System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub RaiseCurrentStateChanging (stateGroup As VisualStateGroup, oldState As VisualState, newState As VisualState, control As FrameworkElement, stateGroupsRoot As FrameworkElement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void RaiseCurrentStateChanging(System::Windows::VisualStateGroup ^ stateGroup, System::Windows::VisualState ^ oldState, System::Windows::VisualState ^ newState, System::Windows::FrameworkElement ^ control, System::Windows::FrameworkElement ^ stateGroupsRoot);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateGroup" Type="System.Windows.VisualStateGroup" />
        <Parameter Name="oldState" Type="System.Windows.VisualState" />
        <Parameter Name="newState" Type="System.Windows.VisualState" />
        <Parameter Name="control" Type="System.Windows.FrameworkElement" />
        <Parameter Name="stateGroupsRoot" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="stateGroup">Объект, на котором произошло событие <see cref="E:System.Windows.VisualStateGroup.CurrentStateChanging" />.</param>
        <param name="oldState">Состояние, из которого переходит элемент управления.</param>
        <param name="newState">Состояние, в которое переходит элемент управления.</param>
        <param name="control">Элемент управления, переходящий из одного состояния в другое.</param>
        <param name="stateGroupsRoot">Корневой элемент, содержащий объект <see cref="T:System.Windows.VisualStateManager" />.</param>
        <summary>Порождает событие <see cref="E:System.Windows.VisualStateGroup.CurrentStateChanging" /> на заданном объекте <see cref="T:System.Windows.VisualStateGroup" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Когда <xref:System.Windows.VisualStateGroup> устанавливается на <xref:System.Windows.Controls.ControlTemplate> элемента управления, `control` параметр имеет значение элемента управления, которому принадлежит <xref:System.Windows.Controls.ControlTemplate>.  При <xref:System.Windows.VisualStateGroup> устанавливается на <xref:System.Windows.FrameworkElement>, `control` — `null` , поэтому необходимо использовать `stateGroupsRoot` параметра.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="stateGroupsRoot" /> имеет значение <see langword="null" />.  
  
 - или -  
  
 Свойство <paramref name="newState" /> имеет значение <see langword="null" />.</exception>
        <block subset="none" type="overrides">
          <para>При переопределении метода <see cref="M:System.Windows.VisualStateManager.RaiseCurrentStateChanging(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState,System.Windows.FrameworkElement,System.Windows.FrameworkElement)" /> в производном классе нужно убедиться, что вызов базового класса <see cref="M:System.Windows.VisualStateManager.RaiseCurrentStateChanging(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState,System.Windows.FrameworkElement,System.Windows.FrameworkElement)" /> метод, чтобы зарегистрированные делегаты получили событие.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="SetCustomVisualStateManager">
      <MemberSignature Language="C#" Value="public static void SetCustomVisualStateManager (System.Windows.FrameworkElement obj, System.Windows.VisualStateManager value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetCustomVisualStateManager(class System.Windows.FrameworkElement obj, class System.Windows.VisualStateManager value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.SetCustomVisualStateManager(System.Windows.FrameworkElement,System.Windows.VisualStateManager)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetCustomVisualStateManager (obj As FrameworkElement, value As VisualStateManager)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetCustomVisualStateManager(System::Windows::FrameworkElement ^ obj, System::Windows::VisualStateManager ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Windows.FrameworkElement" />
        <Parameter Name="value" Type="System.Windows.VisualStateManager" />
      </Parameters>
      <Docs>
        <param name="obj">Объект, для которого устанавливается свойство.</param>
        <param name="value">Диспетчер визуальных состояний, который осуществляет переход между состояниями элемента управления.</param>
        <summary>Задает присоединенное свойство <see cref="P:System.Windows.VisualStateManager.CustomVisualStateManager" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisualStateGroupsProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty VisualStateGroupsProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty VisualStateGroupsProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.VisualStateManager.VisualStateGroupsProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly VisualStateGroupsProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ VisualStateGroupsProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует свойство зависимостей <see cref="P:System.Windows.VisualStateManager.VisualStateGroups" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>