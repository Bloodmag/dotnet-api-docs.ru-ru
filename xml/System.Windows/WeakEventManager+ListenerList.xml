<Type Name="WeakEventManager+ListenerList" FullName="System.Windows.WeakEventManager+ListenerList">
  <TypeSignature Language="C#" Value="protected class WeakEventManager.ListenerList" />
  <TypeSignature Language="ILAsm" Value=".class nested protected auto ansi beforefieldinit WeakEventManager/ListenerList extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.WeakEventManager.ListenerList" />
  <TypeSignature Language="VB.NET" Value="Protected Class WeakEventManager.ListenerList" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="68000-101">Предоставляет встроенный список-коллекцию для хранения прослушивателей <see cref="T:System.Windows.WeakEventManager" />.</span><span class="sxs-lookup"><span data-stu-id="68000-101">Provides a built-in collection list for storing listeners for a <see cref="T:System.Windows.WeakEventManager" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68000-102">Несмотря на то, что этот список содержит элементы, которые похожи на те, которые определены по <xref:System.Collections.IList> и <xref:System.Collections.ICollection>и предоставляют аналогичные функциональные возможности, этот класс реализует ни один из этих интерфейсов.</span><span class="sxs-lookup"><span data-stu-id="68000-102">Although this list contains members that resemble those defined by <xref:System.Collections.IList> and <xref:System.Collections.ICollection>, and provide similar functionality, this class implements neither of those interfaces.</span></span>  
  
 <span data-ttu-id="68000-103">Большинство <xref:System.Windows.WeakEventManager> производные классы не обязательно использовать все элементы на <xref:System.Windows.WeakEventManager.ListenerList>.</span><span class="sxs-lookup"><span data-stu-id="68000-103">Most <xref:System.Windows.WeakEventManager> derived classes do not need to use any members on <xref:System.Windows.WeakEventManager.ListenerList>.</span></span> <span data-ttu-id="68000-104"><xref:System.Windows.WeakEventManager> Методы <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> и <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> использовать значение по умолчанию <xref:System.Windows.WeakEventManager.ListenerList> внутри одного списка для каждого `source`.</span><span class="sxs-lookup"><span data-stu-id="68000-104">The <xref:System.Windows.WeakEventManager> methods <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> and <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> use a default <xref:System.Windows.WeakEventManager.ListenerList> internally, one list for each `source`.</span></span>  
  
 <span data-ttu-id="68000-105">Необходимо вызвать <xref:System.Windows.WeakEventManager.ListenerList> методы Если ваш <xref:System.Windows.WeakEventManager> класс поддерживает несколько списков для каждого сочетания источник события, с каждым списком, созданной для учета в различных условиях события.</span><span class="sxs-lookup"><span data-stu-id="68000-105">You only need to call <xref:System.Windows.WeakEventManager.ListenerList> methods if your <xref:System.Windows.WeakEventManager> class maintains multiple lists for the same event-source combination, with each list created to account for different conditions of the event.</span></span> <span data-ttu-id="68000-106">В этом случае вы не используете <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> и <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> и вместо этого будет реализовывать `AddListener` или `RemoveListener` действовать только один из списков внутреннего прослушивателя, обычно на основе параметра, добавляемого в прослушиватели `AddListener` или `RemoveListener`.</span><span class="sxs-lookup"><span data-stu-id="68000-106">In this case, you would not use <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> and <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> and would instead implement `AddListener` or `RemoveListener` to act upon listeners in just one of the internal listener lists, typically based on a parameter that you add to `AddListener` or `RemoveListener`.</span></span> <span data-ttu-id="68000-107">Кроме того, невозможно вызвать реализацию обработчика, принимающий необработанные события просто <xref:System.Windows.WeakEventManager.DeliverEvent%2A>; вместо этого необходимо хранить список особенностей события и доставлять событие только в соответствующий список с помощью <xref:System.Windows.WeakEventManager.DeliverEventToList%2A>.</span><span class="sxs-lookup"><span data-stu-id="68000-107">Also, the handler implementation that receives the raw event cannot simply call <xref:System.Windows.WeakEventManager.DeliverEvent%2A>; you must instead keep track of the specifics of the event and deliver the event only to the appropriate list using <xref:System.Windows.WeakEventManager.DeliverEventToList%2A>.</span></span>  
  
 <span data-ttu-id="68000-108">Различные методы <xref:System.Windows.WeakEventManager.ListenerList> предоставляются, чтобы вы могли работать с внутренними списками и, чтобы можно было предотвратить изменение списка во время фактической доставки события.</span><span class="sxs-lookup"><span data-stu-id="68000-108">The various methods of <xref:System.Windows.WeakEventManager.ListenerList> are provided so that you can work with your internal lists and so that you can prevent modification of the list during actual delivery of the event.</span></span>  
  
 <span data-ttu-id="68000-109">Пример класса, который будет использовать этот метод реализации является <xref:System.ComponentModel.PropertyChangedEventManager>, содержит отдельные прослушивателя перечислены `PropertyChanged` основании какие изменения свойства.</span><span class="sxs-lookup"><span data-stu-id="68000-109">An example class that used this implementation technique is <xref:System.ComponentModel.PropertyChangedEventManager>, which maintains separate listener lists for `PropertyChanged` based on which property changed.</span></span>  
  
<a name="xamlTextUsage_ListenerList"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="68000-110">Использование текста XAML</span><span class="sxs-lookup"><span data-stu-id="68000-110">XAML Text Usage</span></span>  
 <span data-ttu-id="68000-111">Нельзя использовать этот класс в [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="68000-111">You cannot use this class in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.WeakEventManager" />
    <altmember cref="T:System.Windows.IWeakEventListener" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="68000-112">Инициализирует новый экземпляр класса <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span><span class="sxs-lookup"><span data-stu-id="68000-112">Initializes a new instance of the <see cref="T:System.Windows.WeakEventManager.ListenerList" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ListenerList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ListenerList();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="68000-113">Инициализирует новый экземпляр класса <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span><span class="sxs-lookup"><span data-stu-id="68000-113">Initializes a new instance of the <see cref="T:System.Windows.WeakEventManager.ListenerList" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ListenerList (int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (capacity As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ListenerList(int capacity);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="capacity"><span data-ttu-id="68000-114">Число элементов, которые следует разместить в исходном списке.</span><span class="sxs-lookup"><span data-stu-id="68000-114">The number of items that should be allocated in the initial list.</span></span></param>
        <summary><span data-ttu-id="68000-115">Выполняет инициализацию нового экземпляра класса <see cref="T:System.Windows.WeakEventManager.ListenerList" /> с указанными начальными возможностями.</span><span class="sxs-lookup"><span data-stu-id="68000-115">Initializes a new instance of the <see cref="T:System.Windows.WeakEventManager.ListenerList" /> class with the specified initial capacity.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Windows.IWeakEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Windows.IWeakEventListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.Add(System.Windows.IWeakEventListener)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (listener As IWeakEventListener)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::Windows::IWeakEventListener ^ listener);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
      </Parameters>
      <Docs>
        <param name="listener"><span data-ttu-id="68000-116">Элемент-прослушиватель для добавления в список <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span><span class="sxs-lookup"><span data-stu-id="68000-116">The listener element to add to the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></param>
        <summary><span data-ttu-id="68000-117">Добавляет объект <see cref="T:System.Windows.IWeakEventListener" /> в объект <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span><span class="sxs-lookup"><span data-stu-id="68000-117">Adds a <see cref="T:System.Windows.IWeakEventListener" /> object to the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68000-118">Объект, указанный в качестве прослушивателя должно быть <xref:System.Windows.DependencyObject> , реализующий <xref:System.Windows.IWeakEventListener> интерфейса и, следовательно рабочего <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> реализации.</span><span class="sxs-lookup"><span data-stu-id="68000-118">The object provided as listener should be a <xref:System.Windows.DependencyObject> that implements the <xref:System.Windows.IWeakEventListener> interface and therefore has a working <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> implementation.</span></span>  
  
 <span data-ttu-id="68000-119">Следует всегда вызывать <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> перед изменением содержимое списка.</span><span class="sxs-lookup"><span data-stu-id="68000-119">You should always call <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> before changing the list contents.</span></span> <span data-ttu-id="68000-120">В противном случае список может быть в процессе доставки событий и поэтому оригинал будет заблокирован.</span><span class="sxs-lookup"><span data-stu-id="68000-120">Otherwise, the list may be in process of delivering events and therefore the original is locked.</span></span> <span data-ttu-id="68000-121">Вызов <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> изменяет входные данные `list` для клона, чтобы ваш <xref:System.Windows.WeakEventManager.ListenerList.Add%2A> вызова можно по-прежнему работать на клоне.</span><span class="sxs-lookup"><span data-stu-id="68000-121">Calling <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> changes the input `list` to be a clone so that your <xref:System.Windows.WeakEventManager.ListenerList.Add%2A> call can still work on the clone.</span></span> <span data-ttu-id="68000-122">Если <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> возвращает `true`, может потребоваться обновить частной ссылки в списке, вы обеспечиваете в другие области кода.</span><span class="sxs-lookup"><span data-stu-id="68000-122">If <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> returns `true`, you might need to update any private references to the list that you maintain in other areas of your code.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)" />
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />
      </Docs>
    </Member>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public void AddHandler (Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddHandler(class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.AddHandler(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddHandler (handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddHandler(Delegate ^ handler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="handler"><span data-ttu-id="68000-123">Обработчик событий для добавления в <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span><span class="sxs-lookup"><span data-stu-id="68000-123">The event handler to add to the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></param>
        <summary><span data-ttu-id="68000-124">Добавляет обработчик событий в <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span><span class="sxs-lookup"><span data-stu-id="68000-124">Adds an event handler to the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginUse">
      <MemberSignature Language="C#" Value="public bool BeginUse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool BeginUse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginUse () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool BeginUse();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="68000-125">Объявляет список как используемый.</span><span class="sxs-lookup"><span data-stu-id="68000-125">Declares the list to be in use.</span></span> <span data-ttu-id="68000-126">Это предотвращает прямые изменения списка во время выполнения итерации по его элементам.</span><span class="sxs-lookup"><span data-stu-id="68000-126">This prevents direct changes to the list during iterations of the list items.</span></span></summary>
        <returns>
          <span data-ttu-id="68000-127"><see langword="true" />, если список уже объявлен как используемый; в противном случае — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="68000-127"><see langword="true" /> if the list was already declared to be in use; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68000-128">Объект <xref:System.Windows.WeakEventManager> реализация должна вызывать <xref:System.Windows.WeakEventManager.ListenerList.BeginUse%2A> до прохода по списку для доставки события прослушиватели и должны вызывать <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A> после его завершения.</span><span class="sxs-lookup"><span data-stu-id="68000-128">A <xref:System.Windows.WeakEventManager> implementation should call <xref:System.Windows.WeakEventManager.ListenerList.BeginUse%2A> before iterating through the list to deliver an event to the listeners, and should call <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A> when it is done.</span></span> <span data-ttu-id="68000-129">Это предотвращает изменение списка итерации для целей доставки событий во время выполнения другого вызывающего объекта.</span><span class="sxs-lookup"><span data-stu-id="68000-129">This prevents another caller from modifying the list while the iteration for purposes of event delivery is in progress.</span></span> <span data-ttu-id="68000-130">Если список будет изменен в течение этого времени, список клонируется.</span><span class="sxs-lookup"><span data-stu-id="68000-130">If the list is modified during this time, then the list is cloned.</span></span> <span data-ttu-id="68000-131">Если клонировать списке, затем <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> возвращает `true`, что означает, что отсутствуют последние изменения прослушивателя в последней доставки.</span><span class="sxs-lookup"><span data-stu-id="68000-131">If the list is cloned, then <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> returns `true`, which means that you have missed a recent listener change in the last delivery.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.EndUse" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual System.Windows.WeakEventManager.ListenerList Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.WeakEventManager/ListenerList Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As WeakEventManager.ListenerList" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WeakEventManager+ListenerList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="68000-132">Создает изменяемый клон этого <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span><span class="sxs-lookup"><span data-stu-id="68000-132">Creates a modifiable clone of this <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></summary>
        <returns><span data-ttu-id="68000-133">Изменяемая копия текущего объекта.</span><span class="sxs-lookup"><span data-stu-id="68000-133">A modifiable clone of the current object.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="protected void CopyTo (System.Windows.WeakEventManager.ListenerList newList);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void CopyTo(class System.Windows.WeakEventManager/ListenerList newList) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.CopyTo(System.Windows.WeakEventManager.ListenerList)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub CopyTo (newList As WeakEventManager.ListenerList)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newList" Type="System.Windows.WeakEventManager+ListenerList" />
      </Parameters>
      <Docs>
        <param name="newList"><span data-ttu-id="68000-134">Объект, в который требуется выполнить копирование.</span><span class="sxs-lookup"><span data-stu-id="68000-134">The object to copy to.</span></span></param>
        <summary><span data-ttu-id="68000-135">Копирует текущий <see cref="T:System.Windows.WeakEventManager.ListenerList" /> в указанный <see cref="T:System.Windows.WeakEventManager.ListenerList" /></span><span class="sxs-lookup"><span data-stu-id="68000-135">Copies the current <see cref="T:System.Windows.WeakEventManager.ListenerList" /> to the specified <see cref="T:System.Windows.WeakEventManager.ListenerList" /></span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.ListenerList.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68000-136">Возвращает число элементов, содержащихся в списке <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span><span class="sxs-lookup"><span data-stu-id="68000-136">Gets the number of items contained in the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></summary>
        <value><span data-ttu-id="68000-137">Количество элементов, содержащихся в коллекции <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span><span class="sxs-lookup"><span data-stu-id="68000-137">The number of items contained in the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeliverEvent">
      <MemberSignature Language="C#" Value="public virtual bool DeliverEvent (object sender, EventArgs args, Type managerType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DeliverEvent(object sender, class System.EventArgs args, class System.Type managerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.DeliverEvent(System.Object,System.EventArgs,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeliverEvent (sender As Object, args As EventArgs, managerType As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool DeliverEvent(System::Object ^ sender, EventArgs ^ args, Type ^ managerType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="args" Type="System.EventArgs" />
        <Parameter Name="managerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="sender"><span data-ttu-id="68000-138">Объект, создавший событие.</span><span class="sxs-lookup"><span data-stu-id="68000-138">The object that raised the event.</span></span></param>
        <param name="args"><span data-ttu-id="68000-139">Объект, содержащий данные о событии.</span><span class="sxs-lookup"><span data-stu-id="68000-139">An object that contains the event data.</span></span></param>
        <param name="managerType"><span data-ttu-id="68000-140">Тип объекта <see cref="T:System.Windows.WeakEventManager" />, который вызывает этот метод.</span><span class="sxs-lookup"><span data-stu-id="68000-140">The type of the <see cref="T:System.Windows.WeakEventManager" /> that calls this method.</span></span></param>
        <summary><span data-ttu-id="68000-141">Доставляет управляемое событие к каждому прослушивателю в <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span><span class="sxs-lookup"><span data-stu-id="68000-141">Delivers the event being managed to each listener in the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></summary>
        <returns>
          <span data-ttu-id="68000-142">Значение <see langword="true" />, если все прослушиватели в <see cref="T:System.Windows.WeakEventManager.ListenerList" /> ссылаются на объект, который был удален сборщиком мусора; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="68000-142"><see langword="true" /> if any of the listeners in the <see cref="T:System.Windows.WeakEventManager.ListenerList" /> refer to an object that has been garbage collected; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static System.Windows.WeakEventManager.ListenerList Empty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.WeakEventManager/ListenerList Empty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.ListenerList.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Empty As WeakEventManager.ListenerList" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WeakEventManager+ListenerList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68000-143">Возвращает значение, представляющее пустой список с целью сравнения.</span><span class="sxs-lookup"><span data-stu-id="68000-143">Gets a value that represents an empty list for purposes of comparisons.</span></span></summary>
        <value><span data-ttu-id="68000-144">Представление пустого списка.</span><span class="sxs-lookup"><span data-stu-id="68000-144">The empty list representation.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndUse">
      <MemberSignature Language="C#" Value="public void EndUse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndUse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.EndUse" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndUse ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndUse();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="68000-145">Снимает состояние блокировки, инициированное методом <see cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />.</span><span class="sxs-lookup"><span data-stu-id="68000-145">Unlocks the locked state initiated by <see cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.ListenerList.IsEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEmpty { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68000-146">Получает значение, объявляющее, является ли данный объект <see cref="T:System.Windows.WeakEventManager.ListenerList" /> пустым.</span><span class="sxs-lookup"><span data-stu-id="68000-146">Gets a value that declares whether this <see cref="T:System.Windows.WeakEventManager.ListenerList" /> is empty.</span></span></summary>
        <value>
          <span data-ttu-id="68000-147">Значение <see langword="true" />, если список пуст; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="68000-147"><see langword="true" /> if the list is empty; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68000-148">Этот метод эквивалентен методу проверки ли <xref:System.Windows.WeakEventManager.ListenerList.Count%2A> равен нулю и проверяет наличие среди ссылок в списке теперь устаревшей.</span><span class="sxs-lookup"><span data-stu-id="68000-148">This method is equivalent to checking whether the <xref:System.Windows.WeakEventManager.ListenerList.Count%2A> is zero, and does not check whether any of the references in the list are now stale.</span></span> <span data-ttu-id="68000-149">Если вы хотите убедиться, что все ссылки действительны, вызовите <xref:System.Windows.WeakEventManager.ListenerList.Purge%2A> перед Проверка состояния пустой список.</span><span class="sxs-lookup"><span data-stu-id="68000-149">If you want to assure that all references are still valid, call <xref:System.Windows.WeakEventManager.ListenerList.Purge%2A> just prior to checking the empty status of the list.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Windows.IWeakEventListener this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.IWeakEventListener Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.ListenerList.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(index As Integer) As IWeakEventListener" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::IWeakEventListener ^ default[int] { System::Windows::IWeakEventListener ^ get(int index); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.IWeakEventListener</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="68000-150">Индекс прослушивателя в списке (начиная с нуля).</span><span class="sxs-lookup"><span data-stu-id="68000-150">The zero-based index of the listener in the list.</span></span></param>
        <summary><span data-ttu-id="68000-151">Получает или задает конкретный элемент-прослушиватель из списка <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span><span class="sxs-lookup"><span data-stu-id="68000-151">Gets or sets a specific listener item in the <see cref="T:System.Windows.WeakEventManager.ListenerList" /> .</span></span></summary>
        <value><span data-ttu-id="68000-152">Элемент по указанному индексу или указатель null, если по этому индексу нет элемента.</span><span class="sxs-lookup"><span data-stu-id="68000-152">The item at that index, or a null reference if no item was at that index.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrepareForWriting">
      <MemberSignature Language="C#" Value="public static bool PrepareForWriting (ref System.Windows.WeakEventManager.ListenerList list);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool PrepareForWriting(class System.Windows.WeakEventManager/ListenerList&amp; list) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PrepareForWriting (ByRef list As WeakEventManager.ListenerList) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool PrepareForWriting(System::Windows::WeakEventManager::ListenerList ^ % list);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="list" Type="System.Windows.WeakEventManager+ListenerList&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="list"><span data-ttu-id="68000-153">Список для проверки состояния использования и потенциального копирования.</span><span class="sxs-lookup"><span data-stu-id="68000-153">The list to check for use state and potentially copy.</span></span></param>
        <summary><span data-ttu-id="68000-154">Проверяет, используется ли в данный момент указанный список. и если это так, устанавливает ссылочный параметр списка на его копию вместо оригинала.</span><span class="sxs-lookup"><span data-stu-id="68000-154">Checks to see whether the provided list is in use, and if so, sets the list reference parameter to a copy of that list rather than the original.</span></span></summary>
        <returns>
          <span data-ttu-id="68000-155">Значение <see langword="true" />, если указанный список использовался во время вызова и поэтому ссылка на параметр <paramref name="list" /> была сброшена к копии.</span><span class="sxs-lookup"><span data-stu-id="68000-155"><see langword="true" /> if the provided list was in use at the time of call and therefore the <paramref name="list" /> parameter reference was reset to be a copy.</span></span> <span data-ttu-id="68000-156">Значение <see langword="false" />, если указанный список не использовался, что означает оставление ссылки на параметр <paramref name="list" /> без изменений.</span><span class="sxs-lookup"><span data-stu-id="68000-156"><see langword="false" /> if the provided list was not in use, in which case the <paramref name="list" /> parameter reference remains unaltered.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68000-157">Если заданный список используется (что означает событие доставки), вызов этого метода приведет к замене входные данные `list` клоном.</span><span class="sxs-lookup"><span data-stu-id="68000-157">If the given list is in use (which means an event is currently being delivered), calling this method will replace the input `list` with a clone.</span></span>  <span data-ttu-id="68000-158">Существующие пользователи завершат доставку события в исходный список без вмешательства изменений в новый список.</span><span class="sxs-lookup"><span data-stu-id="68000-158">The existing users will finish delivering the event to the original list, without interference from changes to the new list.</span></span>  
  
 <span data-ttu-id="68000-159">Если метод возвращает `true`, вызывающим модулям может понадобиться вставить новый список в свои структуры данных, так как это указывает на вероятность того, что указанный список больше не является текущим.</span><span class="sxs-lookup"><span data-stu-id="68000-159">If the method returns `true`, callers may want to insert the new list in their own data structures, since this indicates the possibility that the provided list is no longer current.</span></span>  
  
 <span data-ttu-id="68000-160">Этот метод вызывает метод <xref:System.Windows.WeakEventManager.ListenerList.BeginUse%2A> внутренне и сразу же вызывается <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A>.</span><span class="sxs-lookup"><span data-stu-id="68000-160">This method calls <xref:System.Windows.WeakEventManager.ListenerList.BeginUse%2A> internally and then immediately calls <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A>.</span></span> <span data-ttu-id="68000-161">Поэтому вызов <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> сам по себе не вводят блокировки в списке.</span><span class="sxs-lookup"><span data-stu-id="68000-161">Therefore calling <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> does not itself introduce a lock on the list.</span></span> <span data-ttu-id="68000-162">Даже клон делается в качестве получателя операции после вызова <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A>.</span><span class="sxs-lookup"><span data-stu-id="68000-162">Even the clone copy is done as a secondary operation after calling <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.EndUse" />
      </Docs>
    </Member>
    <Member MemberName="Purge">
      <MemberSignature Language="C#" Value="public bool Purge ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Purge() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.Purge" />
      <MemberSignature Language="VB.NET" Value="Public Function Purge () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Purge();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="68000-163">Удаляет все записи из списка, в которых базовая цель ссылки представляет собой указатель null.</span><span class="sxs-lookup"><span data-stu-id="68000-163">Removes all entries from the list where the underlying reference target is a null reference.</span></span></summary>
        <returns><span data-ttu-id="68000-164">Возвращает <see langword="true" />, если какие-либо записи были очищены; в противном случае — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="68000-164">Returns <see langword="true" /> if any entries were purged; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.Windows.IWeakEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.Windows.IWeakEventListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.Remove(System.Windows.IWeakEventListener)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (listener As IWeakEventListener)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::Windows::IWeakEventListener ^ listener);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
      </Parameters>
      <Docs>
        <param name="listener"><span data-ttu-id="68000-165">Удаляемый элемент.</span><span class="sxs-lookup"><span data-stu-id="68000-165">The item to remove.</span></span></param>
        <summary><span data-ttu-id="68000-166">Удаляет первое вхождение элемента-прослушивателя из списка <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span><span class="sxs-lookup"><span data-stu-id="68000-166">Removes the first occurrence of a listener item from the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68000-167">Следует всегда вызывать <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> перед изменением содержимое списка.</span><span class="sxs-lookup"><span data-stu-id="68000-167">You should always call <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> before changing the list contents.</span></span> <span data-ttu-id="68000-168">В противном случае список может быть в процессе доставки событий и поэтому оригинал будет заблокирован.</span><span class="sxs-lookup"><span data-stu-id="68000-168">Otherwise, the list may be in process of delivering events and therefore the original is locked.</span></span> <span data-ttu-id="68000-169">Вызов <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> изменяет входные данные `list` для клона, чтобы ваш <xref:System.Windows.WeakEventManager.ListenerList.Remove%2A> вызова можно по-прежнему работать на клоне.</span><span class="sxs-lookup"><span data-stu-id="68000-169">Calling <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> changes the input `list` to be a clone so that your <xref:System.Windows.WeakEventManager.ListenerList.Remove%2A> call can still work on the clone.</span></span> <span data-ttu-id="68000-170">Если <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> возвращает `true`, может потребоваться обновить частной ссылки в списке, вы обеспечиваете в другие области кода.</span><span class="sxs-lookup"><span data-stu-id="68000-170">If <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> returns `true`, you might need to update any private references to the list that you maintain in other areas of your code.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)" />
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />
      </Docs>
    </Member>
    <Member MemberName="RemoveHandler">
      <MemberSignature Language="C#" Value="public void RemoveHandler (Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveHandler(class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.RemoveHandler(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveHandler (handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveHandler(Delegate ^ handler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="handler"><span data-ttu-id="68000-171">Обработчик событий для удаления из <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span><span class="sxs-lookup"><span data-stu-id="68000-171">The event handler to remove from the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></param>
        <summary><span data-ttu-id="68000-172">Удаляет обработчик событий из <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span><span class="sxs-lookup"><span data-stu-id="68000-172">Removes an event handler from the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>