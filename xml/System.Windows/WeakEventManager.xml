<Type Name="WeakEventManager" FullName="System.Windows.WeakEventManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ac94cdae430bda3a59a21292d13f613f0012919d" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30680108" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class WeakEventManager : System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract WeakEventManager extends System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.WeakEventManager" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class WeakEventManager&#xA;Inherits DispatcherObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class WeakEventManager abstract : System::Windows::Threading::DispatcherObject" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Threading.DispatcherObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Предоставляет базовый класс для диспетчера событий, используемого в *шаблоне слабых событий*. Диспетчер добавляет и удаляет прослушиватели для событий (или обратных вызовов), которые также используют этот шаблон.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обычно используется шаблон слабых событий, если источник событий имеет время существования объекта, который является независимым от прослушивателей событий. С помощью центра события диспетчеризации возможность <xref:System.Windows.WeakEventManager> позволяет обработчики прослушивателей сборке мусора даже при сохранении исходного объекта. Напротив подключение завершается регулярное событие с помощью `+=` оператор вызывает потенциально отключенный источник хранит ссылку на прослушиватели. Это предотвращает получатель сборщиком мусора в течение отведенного времени.  
  
 Одна из распространенных ситуаций где следует использовать время существования связи между источниками и прослушивателями шаблонов слабых событий, является обработка событий обновления, поступающих от привязок данных.  
  
 Шаблон слабых событий может также использоваться для обратных вызовов и обычным событиями.  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Пример настраиваемого <see cref="T:System.Windows.WeakEventManager" />, в разделе [шаблонов слабых событий](~/docs/framework/wpf/advanced/weak-event-patterns.md).</para>
    </block>
    <altmember cref="T:System.Windows.IWeakEventListener" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WeakEventManager ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; WeakEventManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует значения базового класса при использовании этого метода в качестве инициализатора конструктором производного класса.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeliverEvent">
      <MemberSignature Language="C#" Value="protected void DeliverEvent (object sender, EventArgs args);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void DeliverEvent(object sender, class System.EventArgs args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub DeliverEvent (sender As Object, args As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void DeliverEvent(System::Object ^ sender, EventArgs ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="args" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="sender">Объект, в котором обрабатывается событие.</param>
        <param name="args">Объект <see cref="T:System.EventArgs" />, содержащий данные доставляемого события.</param>
        <summary>Доставляет управляемое событие к каждому прослушивателю.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вызовите <xref:System.Windows.WeakEventManager.DeliverEvent%2A> метод из обработчиков событий, которые добавляются или удаляются с <xref:System.Windows.WeakEventManager.StartListening%2A> и <xref:System.Windows.WeakEventManager.StopListening%2A> реализации подклассов.  
  
 При вызове метода <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> метод в вашей `AddListener` реализации этого класса в список прослушивателей, получающего событие сохраняется в базовой коллекции. (`AddListener` не является частью класса или интерфейса контракта. `AddListener` предлагаемое имя для метода классе диспетчера, который вызывает <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> и добавляет прослушиватели шаблон слабых событий для события.)  
  
 <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> Добавляет один список прослушивателей. Если ваша реализация диспетчера поддерживает более одного списка прослушивателей каждого события, не используйте <xref:System.Windows.WeakEventManager.DeliverEvent%2A> или <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>. Вместо этого реализация следует создать свой собственный <xref:System.Windows.WeakEventManager.ListenerList> экземпляров, `AddListener` следует добавлять прослушиватели в соответствующий список и должно быть доставлено в список соответствующих прослушиватель события путем вызова <xref:System.Windows.WeakEventManager.DeliverEventToList%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
      </Docs>
    </Member>
    <Member MemberName="DeliverEventToList">
      <MemberSignature Language="C#" Value="protected void DeliverEventToList (object sender, EventArgs args, System.Windows.WeakEventManager.ListenerList list);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void DeliverEventToList(object sender, class System.EventArgs args, class System.Windows.WeakEventManager/ListenerList list) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub DeliverEventToList (sender As Object, args As EventArgs, list As WeakEventManager.ListenerList)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="args" Type="System.EventArgs" />
        <Parameter Name="list" Type="System.Windows.WeakEventManager+ListenerList" />
      </Parameters>
      <Docs>
        <param name="sender">Объект, в котором обрабатывается событие.</param>
        <param name="args">Объект класса <see cref="T:System.EventArgs" />, содержащий данные события.</param>
        <param name="list">Предоставленный <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</param>
        <summary>Доставляет управляемое событие к каждому прослушивателю из предоставленного списка.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод является обязательным, если ваша реализация диспетчера поддерживает отдельные списки прослушивателей на основе сведений, записанным в данных события. При использовании такой расширенной техники необходимо создать и поддерживать отдельные списки как часть своей реализации диспетчера, и необходимо указать способ добавления прослушивателей для определенного списка. Реализация обработчика, прослушивающая необработанное событие должен действовать условия, используемые для дифференциации списков и доставлять событие только в соответствующем списке или списке.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="GetCurrentManager">
      <MemberSignature Language="C#" Value="protected static System.Windows.WeakEventManager GetCurrentManager (Type managerType);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Windows.WeakEventManager GetCurrentManager(class System.Type managerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function GetCurrentManager (managerType As Type) As WeakEventManager" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static System::Windows::WeakEventManager ^ GetCurrentManager(Type ^ managerType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WeakEventManager</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="managerType">Тип, для которого необходимо получить <see cref="T:System.Windows.WeakEventManager" />.</param>
        <summary>Возвращает реализацию <see cref="T:System.Windows.WeakEventManager" />, используемую для указанного типа.</summary>
        <returns>Соответствующая реализация <see cref="T:System.Windows.WeakEventManager" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> реализации вызывать этот метод, с помощью их переданный `managerType`. Возвращенный <xref:System.Windows.WeakEventManager> используется в качестве отличие, которое определяет, какое событие было получено и какой закрытый обработчик класса для вызова.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="protected object this[object source] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(object)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.Item(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Default Protected Property Item(source As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Object ^ default[System::Object ^] { System::Object ^ get(System::Object ^ source); void set(System::Object ^ source, System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">Отсчитываемый от нуля индекс запрошенного источника.</param>
        <summary>Получает или задает данные, сохраняемые для указанного источника.</summary>
        <value>Дата, сохраняемая диспетчером для данного источника.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Производные классы могут выбрать, какие данные и тип для хранения в данный указатель. Обычно это реализуется как <xref:System.Windows.WeakEventManager.ListenerList>, являющимся списком слабых ссылок прослушиватели. Может иметься только для изменения этого типа, если <xref:System.Windows.WeakEventManager.ListenerList> тип не может содержать необходимые данные. Если таким образом, необходимо переопределить <xref:System.Windows.WeakEventManager.Purge%2A> метод, чтобы правильно выполнить очистку базового типа.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
      </Docs>
    </Member>
    <Member MemberName="NewListenerList">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.WeakEventManager.ListenerList NewListenerList ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.WeakEventManager/ListenerList NewListenerList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.NewListenerList" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function NewListenerList () As WeakEventManager.ListenerList" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WeakEventManager+ListenerList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает новый объект для добавления прослушивателей в событие.</summary>
        <returns>Новый объект для добавления прослушивателей в событие.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectedAddHandler">
      <MemberSignature Language="C#" Value="protected void ProtectedAddHandler (object source, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedAddHandler(object source, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ProtectedAddHandler (source As Object, handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ProtectedAddHandler(System::Object ^ source, Delegate ^ handler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="source">Исходный объект, на который подписывается делегат обработчика.</param>
        <param name="handler">Делегат, обрабатывающий событие, вызванное объектом <c>source</c>.</param>
        <summary>Добавляет указанный делегат в качестве обработчика событий заданного источника.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectedAddListener">
      <MemberSignature Language="C#" Value="protected void ProtectedAddListener (object source, System.Windows.IWeakEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedAddListener(object source, class System.Windows.IWeakEventListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ProtectedAddListener (source As Object, listener As IWeakEventListener)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ProtectedAddListener(System::Object ^ source, System::Windows::IWeakEventListener ^ listener);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
      </Parameters>
      <Docs>
        <param name="source">Источник, к которому прикрепляются прослушиватели.</param>
        <param name="listener">Прослушивающий класс (который должен реализовать <see cref="T:System.Windows.IWeakEventListener" />).</param>
        <summary>Добавляет указанный прослушиватель к указанному источнику для управляемого события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод в классе диспетчера `AddListener` методы <xref:System.Windows.WeakEventManager> реализации. `AddListener` предлагаемое имя для статического метода, определяемого в классе диспетчера, чтобы позволить другим классам добавить прослушиватель для шаблона слабых событий. `AddListener` должен принимать два параметра: `source` там, где присоединен прослушиватель и `listener` экземпляра. Для вашего `AddListener` реализацию, вызовите <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> метод на текущий диспетчер и передайте эти же параметры.  
  
 Если ранее пусто, в список прослушивателей <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> вызовы <xref:System.Windows.WeakEventManager.StartListening%2A> метод внутренним образом, который будет вызывать конкретных <xref:System.Windows.WeakEventManager.StartListening%2A> переопределить через полиморфизм.  
  
 <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> Добавляет один внутренний прослушиватели <xref:System.Windows.WeakEventManager.ListenerList> на `source`. Если ваша реализация диспетчера поддерживает более одного списка прослушивателей для каждой комбинации источника события, не используйте <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>. Вместо этого реализация следует создать свой собственный <xref:System.Windows.WeakEventManager.ListenerList> экземпляров, `AddListener` следует добавлять прослушиватели в соответствующий список и должно быть доставлено в список соответствующих прослушиватель события путем вызова <xref:System.Windows.WeakEventManager.DeliverEventToList%2A> события вместо <xref:System.Windows.WeakEventManager.DeliverEvent%2A> метод.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)" />
      </Docs>
    </Member>
    <Member MemberName="ProtectedRemoveHandler">
      <MemberSignature Language="C#" Value="protected void ProtectedRemoveHandler (object source, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedRemoveHandler(object source, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ProtectedRemoveHandler (source As Object, handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ProtectedRemoveHandler(System::Object ^ source, Delegate ^ handler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="source">Источник для удаления из обработчика.</param>
        <param name="handler">Делегат для удаления из <c>source</c>.</param>
        <summary>Удаляет ранее добавленный обработчик из заданного источника.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectedRemoveListener">
      <MemberSignature Language="C#" Value="protected void ProtectedRemoveListener (object source, System.Windows.IWeakEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedRemoveListener(object source, class System.Windows.IWeakEventListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ProtectedRemoveListener (source As Object, listener As IWeakEventListener)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ProtectedRemoveListener(System::Object ^ source, System::Windows::IWeakEventListener ^ listener);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
      </Parameters>
      <Docs>
        <param name="source">Источник, из которого удаляются прослушиватели.</param>
        <param name="listener">Прослушивающий класс (который должен реализовать <see cref="T:System.Windows.IWeakEventListener" />).</param>
        <summary>Удаляет предварительно добавленный прослушиватель из указанного источника.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод в классе диспетчера `RemoveListener` методы <xref:System.Windows.WeakEventManager> реализации. `RemoveListener` предлагаемое имя для статического метода, определяемого в классе диспетчера, чтобы позволить другим классам удалить прослушиватель для шаблона слабых событий. `RemoveListener` должен принимать два параметра: `source` там, где удаляется прослушиватель и `listener` класса. Для вашего `RemoveListener` реализацию, вызовите <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> метод на текущий диспетчер и передайте эти же параметры.  
  
 Если вызов <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> Удаляет последний слушатель в списке <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> вызовы <xref:System.Windows.WeakEventManager.StopListening%2A> метод внутренним образом, который будет вызывать конкретных <xref:System.Windows.WeakEventManager.StopListening%2A> переопределить через полиморфизм.  
  
 <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> Удаляет прослушиватели с одного внутреннего <xref:System.Windows.WeakEventManager.ListenerList> на `source`. Если ваша реализация диспетчера поддерживает более одного списка прослушивателей для каждой комбинации источника события, не используйте <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A>. Вместо этого реализация следует создать свой собственный <xref:System.Windows.WeakEventManager.ListenerList> экземпляров, `RemoveListener` следует удалять прослушиватели из соответствующего списка и должно быть доставлено в список соответствующих прослушиватель события путем вызова <xref:System.Windows.WeakEventManager.DeliverEventToList%2A> вместо метода <xref:System.Windows.WeakEventManager.DeliverEvent%2A> метод.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)" />
      </Docs>
    </Member>
    <Member MemberName="Purge">
      <MemberSignature Language="C#" Value="protected virtual bool Purge (object source, object data, bool purgeAll);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool Purge(object source, object data, bool purgeAll) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function Purge (source As Object, data As Object, purgeAll As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool Purge(System::Object ^ source, System::Object ^ data, bool purgeAll);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="data" Type="System.Object" />
        <Parameter Name="purgeAll" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source">Источник для прослушиваемых событий.</param>
        <param name="data">Данные для проверки. Ожидается, что данный объект будет реализацией <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</param>
        <param name="purgeAll">
          Значение <see langword="true" />, чтобы остановить прослушивание <c>source</c> и полностью удалить все записи из списка <c>data</c>.</param>
        <summary>Удаляет неактивные записи прослушивателя из списка даты для предоставленного источника. Возвращает значение <see langword="true" />, если некоторые записи были фактически удалены из списка.</summary>
        <returns>
          <see langword="true" />, если некоторые записи были фактически удалены;в противном случае — <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.WeakEventManager.Purge%2A> Метод имеет реализацию по умолчанию, будут удалены все записи, когда данные <xref:System.Windows.WeakEventManager.ListenerList>.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Если базовый тип для <see cref="P:System.Windows.WeakEventManager.Item(System.Object)" /> — нечто, отличное от <see cref="T:System.Windows.WeakEventManager.ListenerList" />, или содержит данные, которые превышают <see cref="T:System.Windows.WeakEventManager.ListenerList" />, необходимо переопределить <see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /> метод. Переопределение должна обеспечивать поведение очистки для списка альтернативных типов элементов. Как правило переопределенный метод должен предоставлять поведение без вызова базовой реализации. Если определенный <see cref="T:System.Windows.WeakEventManager.ListenerList" /> по-прежнему требуется очистка вызов <see cref="M:System.Windows.WeakEventManager.ListenerList.Purge" />.</para>
        </block>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
      </Docs>
    </Member>
    <Member MemberName="ReadLock">
      <MemberSignature Language="C#" Value="protected IDisposable ReadLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IDisposable ReadLock" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.ReadLock" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property ReadLock As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property IDisposable ^ ReadLock { IDisposable ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Устанавливает блокировку на чтение для базовой таблицы данных и возвращает <see cref="T:System.IDisposable" />.</summary>
        <value>Объект, который может быть использован для блокировки членов таблицы данных и затем корректно удален с помощью конструкции <see langword="using" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В производных классах, запросы к таблице, содержащейся в <xref:System.Windows.WeakEventManager.Item%2A> должно всегда выполняться в пределах `using (ReadLock) { ... }` предложение, за исключением запросов, которые уже находятся в пределах блокировку записи. Эти запросы, может оказаться необходимым, если ваш класс поддерживает более сложные `AddListener` реализацию, которая требуется больше данных за пределы `source` и `listener`и использует <xref:System.Windows.WeakEventManager.Item%2A> коллекцию для хранения дополнительных сведений.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
        <altmember cref="P:System.Windows.WeakEventManager.WriteLock" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="protected void Remove (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void Remove(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub Remove (source As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void Remove(System::Object ^ source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">Источник для удаления информации о прослушивателях.</param>
        <summary>Удаляет все прослушиватели для заданного источника.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
        <altmember cref="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)" />
      </Docs>
    </Member>
    <Member MemberName="ScheduleCleanup">
      <MemberSignature Language="C#" Value="protected void ScheduleCleanup ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ScheduleCleanup() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ScheduleCleanup" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ScheduleCleanup ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ScheduleCleanup();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Запрашивает, чтобы очистка ненужных записей из базового списка прослушивателей выполнялась в потоке с более низким приоритетом.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вызов <xref:System.Windows.WeakEventManager.ScheduleCleanup%2A> работает как вызов метода <xref:System.Windows.WeakEventManager.Purge%2A> метод в список текущий диспетчер, с низким приоритетом потока с `purgeAll` равным `false`.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="SetCurrentManager">
      <MemberSignature Language="C#" Value="protected static void SetCurrentManager (Type managerType, System.Windows.WeakEventManager manager);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig void SetCurrentManager(class System.Type managerType, class System.Windows.WeakEventManager manager) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Sub SetCurrentManager (managerType As Type, manager As WeakEventManager)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static void SetCurrentManager(Type ^ managerType, System::Windows::WeakEventManager ^ manager);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managerType" Type="System.Type" />
        <Parameter Name="manager" Type="System.Windows.WeakEventManager" />
      </Parameters>
      <Docs>
        <param name="managerType">Тип, для которого задается новый диспетчер событий.</param>
        <param name="manager">Новый диспетчер событий.</param>
        <summary>Задает текущий диспетчер для заданного типа диспетчера.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вызовите <xref:System.Windows.WeakEventManager.SetCurrentManager%2A> метод для инициализации руководителем, если это требуется при вызове вашей `CurrentManager` свойство <xref:System.Windows.WeakEventManager> реализации.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="StartListening">
      <MemberSignature Language="C#" Value="protected abstract void StartListening (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void StartListening(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.StartListening(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub StartListening (source As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void StartListening(System::Object ^ source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">Источник, прослушивание которого необходимо начать.</param>
        <summary>При переопределении в производном классе начинает прослушивать управляемые события. После первого вызова метода <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> диспетчер должен находиться в состоянии вызова метода <see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /> или <see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /> при каждой обработке соответствующего события из указанного источника.</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>
            <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> переопределения должны добавить обработчик к предоставленному <paramref name="source" />. Обработчик объявляется самим диспетчером. Обработчик класса не должен быть открытым и должен вызываться только в ответ на управляемое событие. Обработчик класса следует вызывать <see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /> метода или <see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /> метод соответствующим образом.</para>
        </block>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="StopListening">
      <MemberSignature Language="C#" Value="protected abstract void StopListening (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void StopListening(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.StopListening(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub StopListening (source As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void StopListening(System::Object ^ source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">Источник, прослушивание которого необходимо прекратить.</param>
        <summary>При переопределении в производном классе прекращает прослушивать указанный источник управляемого события.</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>
            <see cref="M:System.Windows.WeakEventManager.StopListening(System.Object)" /> реализации должен быть удален обработчик класса добавленные <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> метод. Удаление прослушивателя не должно очищать список прослушивателей. Вместо этого он должен только отключить обработчик класса (возможно, временно). Другие методы доступны для очистки всего списка, такие как <see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /> метод с <paramref name="purgeAll" /> равным <see langword="true" />.</para>
        </block>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" />
        <altmember cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLock">
      <MemberSignature Language="C#" Value="protected IDisposable WriteLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IDisposable WriteLock" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.WriteLock" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property WriteLock As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property IDisposable ^ WriteLock { IDisposable ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Устанавливает блокировку на запись для базовой таблицы данных и возвращает <see cref="T:System.IDisposable" />.</summary>
        <value>Объект, который может быть использован для блокировки членов таблицы данных и затем корректно удален с помощью конструкции <see langword="using" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В производных классах, все изменения, внесенные в базовой таблице данных должно выполняться в пределах `using (WriteLock) { ... }` предложения. Эти изменения может потребоваться, если ваш класс поддерживает более сложные `AddListener` реализацию, которая требуется больше данных за пределы `source` и `listener`и использует <xref:System.Windows.WeakEventManager.Item%2A> коллекцию для хранения дополнительных сведений.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
        <altmember cref="P:System.Windows.WeakEventManager.ReadLock" />
      </Docs>
    </Member>
  </Members>
</Type>