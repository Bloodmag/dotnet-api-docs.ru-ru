<Type Name="Window" FullName="System.Windows.Window">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7fb443b6a52f587d274ec4a644c7ec8fd50eb8cf" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Window : System.Windows.Controls.ContentControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Window extends System.Windows.Controls.ContentControl" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Window" />
  <TypeSignature Language="VB.NET" Value="Public Class Window&#xA;Inherits ContentControl" />
  <TypeSignature Language="C++ CLI" Value="public ref class Window : System::Windows::Controls::ContentControl" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Controls.ContentControl</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.Ignore)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="7f8f8-101">Предоставляет возможность создавать, настраивать, показывать обычные и диалоговые окна, а также управлять временем их существования.</span>
      <span class="sxs-lookup">
        <span data-stu-id="7f8f8-101">Provides the ability to create, configure, show, and manage the lifetime of windows and dialog boxes.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8f8-102">Точка взаимодействия между пользователем и автономное приложение — это окно.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-102">The point of interaction between a user and a standalone application is a window.</span></span> <span data-ttu-id="7f8f8-103">Объект [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] окно состоит из двух различных областей:</span><span class="sxs-lookup"><span data-stu-id="7f8f8-103">A [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] window consists of two distinct areas:</span></span>  
  
-   <span data-ttu-id="7f8f8-104">Неклиентская область, которая содержит элементы оформления окна, включая значок, заголовок, системное меню «свернуть», максимизировать кнопки, восстановления, кнопку закрытия и границу.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-104">A non-client area, which hosts the windows adornments, including an icon, title, System menu, minimize button, maximize button, restore button, close button, and a border.</span></span>  
  
-   <span data-ttu-id="7f8f8-105">Клиентская область, в котором размещается содержимое для конкретного приложения.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-105">A client area, which hosts application-specific content.</span></span>  
  
 <span data-ttu-id="7f8f8-106">Стандартное окно показано на следующем рисунке:</span><span class="sxs-lookup"><span data-stu-id="7f8f8-106">A standard window is shown in the following figure:</span></span>  
  
 <span data-ttu-id="7f8f8-107">![Элементы окна](~/add/media/windowoverviewfigure1.PNG "элементы окна")</span><span class="sxs-lookup"><span data-stu-id="7f8f8-107">![Window elements](~/add/media/windowoverviewfigure1.PNG "Window elements")</span></span>  
  
 <span data-ttu-id="7f8f8-108"><xref:System.Windows.Window> Инкапсулирует возможность создавать, настраивать, показывать и управлять временем жизни и диалоговые окна и предоставляет следующие ключевые службы:</span><span class="sxs-lookup"><span data-stu-id="7f8f8-108"><xref:System.Windows.Window> encapsulates the ability to create, configure, show, and manage the lifetime of both windows and dialog boxes, and provides the following key services:</span></span>  
  
 <span data-ttu-id="7f8f8-109">**Управление временем существования**: <xref:System.Windows.Window.Activate%2A>, <xref:System.Windows.Window.Activated>, <xref:System.Windows.Window.Close%2A>, <xref:System.Windows.Window.Closed>, <xref:System.Windows.Window.Closing>, <xref:System.Windows.Window.Deactivated>, <xref:System.Windows.Window.Hide%2A>, <xref:System.Windows.Window.IsActive%2A>, <xref:System.Windows.Window.Show%2A>, <xref:System.Windows.Window.SourceInitialized>.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-109">**Lifetime Management**: <xref:System.Windows.Window.Activate%2A>, <xref:System.Windows.Window.Activated>, <xref:System.Windows.Window.Close%2A>, <xref:System.Windows.Window.Closed>, <xref:System.Windows.Window.Closing>, <xref:System.Windows.Window.Deactivated>, <xref:System.Windows.Window.Hide%2A>, <xref:System.Windows.Window.IsActive%2A>, <xref:System.Windows.Window.Show%2A>, <xref:System.Windows.Window.SourceInitialized>.</span></span>  
  
 <span data-ttu-id="7f8f8-110">**Управление окнами**: <xref:System.Windows.Window.GetWindow%2A>, <xref:System.Windows.Window.OwnedWindows%2A>, <xref:System.Windows.Window.Owner%2A>.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-110">**Window Management**: <xref:System.Windows.Window.GetWindow%2A>, <xref:System.Windows.Window.OwnedWindows%2A>, <xref:System.Windows.Window.Owner%2A>.</span></span>  
  
 <span data-ttu-id="7f8f8-111">**Внешний вид и поведение**: <xref:System.Windows.Window.AllowsTransparency%2A>, <xref:System.Windows.Window.ContentRendered>, <xref:System.Windows.Window.DragMove%2A>, <xref:System.Windows.Window.Icon%2A>, <xref:System.Windows.Window.Left%2A>, <xref:System.Windows.Window.LocationChanged>, <xref:System.Windows.Window.ResizeMode%2A>, <xref:System.Windows.Window.RestoreBounds%2A>, <xref:System.Windows.Window.ShowActivated%2A>, <xref:System.Windows.Window.ShowInTaskbar%2A>, <xref:System.Windows.Window.SizeToContent%2A>, <xref:System.Windows.Window.StateChanged>, <xref:System.Windows.Window.Title%2A>, <xref:System.Windows.Window.Top%2A>, <xref:System.Windows.Window.Topmost%2A>, <xref:System.Windows.Window.WindowStartupLocation%2A>, <xref:System.Windows.Window.WindowState%2A>, <xref:System.Windows.Window.WindowStyle%2A></span><span class="sxs-lookup"><span data-stu-id="7f8f8-111">**Appearance and Behavior**: <xref:System.Windows.Window.AllowsTransparency%2A>, <xref:System.Windows.Window.ContentRendered>, <xref:System.Windows.Window.DragMove%2A>, <xref:System.Windows.Window.Icon%2A>, <xref:System.Windows.Window.Left%2A>, <xref:System.Windows.Window.LocationChanged>, <xref:System.Windows.Window.ResizeMode%2A>, <xref:System.Windows.Window.RestoreBounds%2A>, <xref:System.Windows.Window.ShowActivated%2A>, <xref:System.Windows.Window.ShowInTaskbar%2A>, <xref:System.Windows.Window.SizeToContent%2A>, <xref:System.Windows.Window.StateChanged>, <xref:System.Windows.Window.Title%2A>, <xref:System.Windows.Window.Top%2A>, <xref:System.Windows.Window.Topmost%2A>, <xref:System.Windows.Window.WindowStartupLocation%2A>, <xref:System.Windows.Window.WindowState%2A>, <xref:System.Windows.Window.WindowStyle%2A></span></span>  
  
 <span data-ttu-id="7f8f8-112">**Диалоговые окна**: <xref:System.Windows.Window.DialogResult%2A>, <xref:System.Windows.Window.ShowDialog%2A>.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-112">**Dialog Boxes**: <xref:System.Windows.Window.DialogResult%2A>, <xref:System.Windows.Window.ShowDialog%2A>.</span></span>  
  
 <span data-ttu-id="7f8f8-113">Кроме того <xref:System.Windows.Application> предоставляет специальную поддержку для управления все окна в приложении:</span><span class="sxs-lookup"><span data-stu-id="7f8f8-113">Additionally, <xref:System.Windows.Application> exposes special support for managing all of the windows in an application:</span></span>  
  
-   <span data-ttu-id="7f8f8-114">Приложение поддерживает список всех окон, которые в данный момент созданы в приложении.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-114">Application maintains a list of all the windows that are currently instantiated in the application.</span></span> <span data-ttu-id="7f8f8-115">Этот список предоставляется <xref:System.Windows.Application.Windows%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-115">This list is exposed by the <xref:System.Windows.Application.Windows%2A> property.</span></span>  
  
-   <span data-ttu-id="7f8f8-116">По умолчанию <xref:System.Windows.Application.MainWindow%2A> автоматически устанавливается со ссылкой на первый <xref:System.Windows.Window> , создается в приложении.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-116">By default, <xref:System.Windows.Application.MainWindow%2A> is automatically set with a reference to the first <xref:System.Windows.Window> that is instantiated in an application.</span></span> <span data-ttu-id="7f8f8-117">Это делая окна главного окна приложения.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-117">This thereby making the window the main application window.</span></span>  
  
 <span data-ttu-id="7f8f8-118">Объект <xref:System.Windows.Window> может осуществляться с помощью разметки, разметки и кода или кода.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-118">A <xref:System.Windows.Window> can be implemented using markup, markup and code-behind, or code.</span></span>  
  
 <span data-ttu-id="7f8f8-119"><xref:System.Windows.Window> в основном используется для отображения окна и диалоговые окна для автономных приложений.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-119"><xref:System.Windows.Window> is primarily used to display windows and dialog boxes for standalone applications.</span></span> <span data-ttu-id="7f8f8-120">Однако для приложений, требующих навигации на уровне окна, например мастера, можно использовать <xref:System.Windows.Navigation.NavigationWindow> вместо; <xref:System.Windows.Navigation.NavigationWindow> является производным от <xref:System.Windows.Window> и расширяет его с поддержкой навигации в стиле браузера.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-120">However, for applications that require navigation at the window level, such as wizards, you can use <xref:System.Windows.Navigation.NavigationWindow> instead; <xref:System.Windows.Navigation.NavigationWindow> derives from <xref:System.Windows.Window> and extends it with browser-style navigation support.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7f8f8-121">Острова содержимого с поддержкой навигации могут включаться в другие содержимое и контейнеры с помощью <xref:System.Windows.Controls.Frame>.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-121">Islands of navigable content can be incorporated into other content and content containers using <xref:System.Windows.Controls.Frame>.</span></span>  
  
 <span data-ttu-id="7f8f8-122"><xref:System.Windows.Window> требуется `UnmanagedCode` создания разрешения безопасности.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-122"><xref:System.Windows.Window> needs `UnmanagedCode` security permission to be instantiated.</span></span> <span data-ttu-id="7f8f8-123">Это приводит к следующим последствиям:</span><span class="sxs-lookup"><span data-stu-id="7f8f8-123">This has the following consequences:</span></span>  
  
-   [!INCLUDE[TLA#tla_clickonce](~/includes/tlasharptla-clickonce-md.md)]<span data-ttu-id="7f8f8-124">-развернутой отдельные приложения запросят повышения разрешений при запуске из зон Интернета или локальной интрасети.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-124">-deployed standalone applications will request permission elevation when launched from either the Internet or Local Intranet zones.</span></span>  
  
-   [!INCLUDE[TLA2#tla_xbap#plural](~/includes/tla2sharptla-xbapsharpplural-md.md)]<span data-ttu-id="7f8f8-125"> запрашивающие меньше, чем полные права доступа не будет иметь возможность создать экземпляр windows или диалоговым окнам.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-125"> that request anything less than full permissions will not be able to instantiate windows or dialog boxes.</span></span>  
  
 <span data-ttu-id="7f8f8-126">Сведения о автономное развертывание приложений и рекомендации по безопасности см. в разделе [стратегия безопасности WPF — безопасность платформы](~/docs/framework/wpf/wpf-security-strategy-platform-security.md).</span><span class="sxs-lookup"><span data-stu-id="7f8f8-126">For information about standalone application deployment and security considerations, see [WPF Security Strategy - Platform Security](~/docs/framework/wpf/wpf-security-strategy-platform-security.md).</span></span>  
  
 <span data-ttu-id="7f8f8-127">Объект <xref:System.Windows.Window> является <xref:System.Windows.Controls.ContentControl>, означающее, что она может содержать один объект любого типа (например, строки, изображения или панели).</span><span class="sxs-lookup"><span data-stu-id="7f8f8-127">A <xref:System.Windows.Window> is a <xref:System.Windows.Controls.ContentControl>, which means that it can contain a single object of any type (such as a string, an image, or a panel).</span></span> <span data-ttu-id="7f8f8-128">Дополнительные сведения см. в описании класса <xref:System.Windows.Controls.ContentControl>.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-128">For more information, see the <xref:System.Windows.Controls.ContentControl> class.</span></span> <span data-ttu-id="7f8f8-129">Кроме того <xref:System.Windows.Window> является корневым элементом, и, следовательно, не может быть частью содержимого другого элемента.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-129">Also, <xref:System.Windows.Window> is a root element and, therefore, cannot be part of another element's content.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7f8f8-130"><xref:System.Windows.FrameworkElement.Height%2A>, <xref:System.Windows.FrameworkElement.Width%2A>, <xref:System.Windows.Window.Top%2A>, И <xref:System.Windows.Window.Left%2A> свойства, заданные <xref:System.Windows.Window> через стиль не будут применяться во время выполнения.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-130">The <xref:System.Windows.FrameworkElement.Height%2A>, <xref:System.Windows.FrameworkElement.Width%2A>, <xref:System.Windows.Window.Top%2A>, and <xref:System.Windows.Window.Left%2A> properties set on a <xref:System.Windows.Window> through a style will not be applied at run time.</span></span>  
  
## <a name="customizing-the-window-control"></a><span data-ttu-id="7f8f8-131">Настройка элементов управления в окно</span><span class="sxs-lookup"><span data-stu-id="7f8f8-131">Customizing the Window Control</span></span>  
 <span data-ttu-id="7f8f8-132">Чтобы применить к нескольким значения свойств <xref:System.Windows.Window> использовать элементы управления <xref:System.Windows.FrameworkElement.Style%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-132">To apply the same property settings to multiple <xref:System.Windows.Window> controls, use the <xref:System.Windows.FrameworkElement.Style%2A> property.</span></span> <span data-ttu-id="7f8f8-133">Можно изменить значение по умолчанию <xref:System.Windows.Controls.ControlTemplate> для предоставления уникального внешнего вида элемента управления.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-133">You can modify the default <xref:System.Windows.Controls.ControlTemplate> to give the control a unique appearance.</span></span> <span data-ttu-id="7f8f8-134">Дополнительные сведения о создании <xref:System.Windows.Controls.ControlTemplate>, в разделе [Настройка внешнего вида существующего элемента управления путем создания объекта ControlTemplate](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md).</span><span class="sxs-lookup"><span data-stu-id="7f8f8-134">For more information about creating a <xref:System.Windows.Controls.ControlTemplate>, see [Customizing the Appearance of an Existing Control by Creating a ControlTemplate](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md).</span></span>  <span data-ttu-id="7f8f8-135">Чтобы увидеть части и состояния, которые относятся к <xref:System.Windows.Window>, в разделе [окна Стили и шаблоны](~/docs/framework/wpf/controls/window-styles-and-templates.md).</span><span class="sxs-lookup"><span data-stu-id="7f8f8-135">To see the parts and states that are specific to the <xref:System.Windows.Window>, see [Window Styles and Templates](~/docs/framework/wpf/controls/window-styles-and-templates.md).</span></span>  
  
 <span data-ttu-id="7f8f8-136">Свойства зависимостей для этого элемента управления могут быть заданы посредством стиля элемента управления по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-136">Dependency properties for this control might be set by the control’s default style.</span></span>  <span data-ttu-id="7f8f8-137">Если свойство задано стилем по умолчанию, когда элемент управления появится в приложении свойство может изменять значения по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-137">If a property is set by a default style, the property might change from its default value when the control appears in the application.</span></span> <span data-ttu-id="7f8f8-138">Стиль по умолчанию определяется по какая тема рабочего стола используется при запуске приложения.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-138">The default style is determined by which desktop theme is used when the application is running.</span></span>  <span data-ttu-id="7f8f8-139">Дополнительные сведения см. в разделе [темы по умолчанию WPF](http://go.microsoft.com/fwlink/?LinkID=158252).</span><span class="sxs-lookup"><span data-stu-id="7f8f8-139">For more information, see [Default WPF Themes](http://go.microsoft.com/fwlink/?LinkID=158252).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7f8f8-140">Установка visual свойства будет действовать только если это свойство является одновременно присутствуют в <xref:System.Windows.Window> элемента управления, шаблон по умолчанию и устанавливается с помощью.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-140">Setting a visual property will only have an effect if that property is both present in <xref:System.Windows.Window> control's default template and is set by using a .</span></span> <span data-ttu-id="7f8f8-141">Список визуальных свойств можно найти в разделе «Изменение Visual структуры управления» в [Настройка внешнего вида существующего элемента управления путем создания объекта ControlTemplate](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md).</span><span class="sxs-lookup"><span data-stu-id="7f8f8-141">You can find a list of visual properties in the "Changing the Visual Structure of a Control" section in [Customizing the Appearance of an Existing Control by Creating a ControlTemplate](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f8f8-142">В следующем примере показано, как стандартное окно — с использованием одной разметки:</span><span class="sxs-lookup"><span data-stu-id="7f8f8-142">The following example shows how a standard window is defined using only markup:</span></span>  
  
 [!code-xaml[WindowSnippets#WindowMARKUPONLY](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowSnippets/CSharp/MarkupOnlyWindow.xaml#windowmarkuponly)]  
  
 <span data-ttu-id="7f8f8-143">В следующем примере показан как стандартное окно определяется с использованием только кода:</span><span class="sxs-lookup"><span data-stu-id="7f8f8-143">The following example shows how a standard window is defined using only code:</span></span>  
  
 [!code-csharp[WindowSnippets#WindowCODEONLY](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowSnippets/CSharp/CodeOnlyWindow.cs#windowcodeonly)]
 [!code-vb[WindowSnippets#WindowCODEONLY](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowSnippets/visualbasic/codeonlywindow.vb#windowcodeonly)]  
  
 <span data-ttu-id="7f8f8-144">В следующем примере показано, как стандартное окно — с использованием комбинации разметки и кода.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-144">The following example shows how a standard window is defined using a combination of markup and code-behind.</span></span>  
  
 [!code-xaml[WindowSnippets#WindowXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowSnippets/CSharp/MainWindow.xaml#windowxaml)]  
  
 [!code-csharp[WindowSnippets#WindowCODEBEHIND](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowSnippets/CSharp/MainWindow.xaml.cs#windowcodebehind)]
 [!code-vb[WindowSnippets#WindowCODEBEHIND](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowSnippets/visualbasic/mainwindow.xaml.vb#windowcodebehind)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Windows.Window.Show" />
    <altmember cref="M:System.Windows.Window.ShowDialog" />
    <altmember cref="P:System.Windows.Window.DialogResult" />
    <altmember cref="T:System.Windows.Application" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Window ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Window();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7f8f8-145">Инициализирует новый экземпляр класса <see cref="T:System.Windows.Window" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-145">Initializes a new instance of the <see cref="T:System.Windows.Window" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8f8-146">Конструктор инициализирует <xref:System.Windows.FrameworkElement.Width%2A>, <xref:System.Windows.FrameworkElement.Height%2A>, <xref:System.Windows.Window.Top%2A>, и <xref:System.Windows.Window.Left%2A> свойства по умолчанию <xref:System.Windows.Window> значения.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-146">The constructor initializes the <xref:System.Windows.FrameworkElement.Width%2A>, <xref:System.Windows.FrameworkElement.Height%2A>, <xref:System.Windows.Window.Top%2A>, and <xref:System.Windows.Window.Left%2A> properties to their default <xref:System.Windows.Window> values.</span></span>  
  
 <span data-ttu-id="7f8f8-147">Если окно создается в пределах <xref:System.AppDomain> с <xref:System.Windows.Application> объекта конструктор добавляет <xref:System.Windows.Window> объекта в набор <xref:System.Windows.Application>-управляемых windows через <xref:System.Windows.Application.Windows%2A> свойство <xref:System.Windows.Application> объекта.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-147">If a window is created within an <xref:System.AppDomain> that has an <xref:System.Windows.Application> object, the constructor adds the <xref:System.Windows.Window> object to the set of <xref:System.Windows.Application>-managed windows via the <xref:System.Windows.Application.Windows%2A> property of the <xref:System.Windows.Application> object.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="7f8f8-148">для разрешения для этого объекта вызов небезопасных собственных методов.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-148">for permission for this object to call unsafe native methods.</span>
          </span>
          <span data-ttu-id="7f8f8-149">Связанное перечисление: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-149">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="Activate">
      <MemberSignature Language="C#" Value="public bool Activate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Activate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.Activate" />
      <MemberSignature Language="VB.NET" Value="Public Function Activate () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Activate();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7f8f8-150">Пытается переместить окно на передний план и активирует его.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-150">Attempts to bring the window to the foreground and activates it.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7f8f8-151">
            <see langword="true" />, если окно <see cref="T:System.Windows.Window" /> было успешно активировано; в противном случае — <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-151">
              <see langword="true" /> if the <see cref="T:System.Windows.Window" /> was successfully activated; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8f8-152">Правила, определяющие, имеет ли окно активироваться совпадают с используемыми [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] `SetForegroundWindow` функции (User32.dll).</span><span class="sxs-lookup"><span data-stu-id="7f8f8-152">The rules that determine whether the window is activated are the same as those used by the [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] `SetForegroundWindow` function (User32.dll).</span></span>  
  
 <span data-ttu-id="7f8f8-153">Если окно активируется в [!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)] приложение, которое не является приложением пользователя переднего плана, <xref:System.Windows.Application.Activated> событие.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-153">If the window is activated in a [!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)] application that is not the user's foreground application, <xref:System.Windows.Application.Activated> event is raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7f8f8-154">Этот метод не может вызываться, когда окно размещается в браузере.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-154">This method cannot be called when a window is hosted in a browser.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="7f8f8-155">для разрешения на активацию окна.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-155">for permission to activate a window.</span>
          </span>
          <span data-ttu-id="7f8f8-156">Связанное перечисление: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-156">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          </span>
        </permission>
        <altmember cref="E:System.Windows.Window.Activated" />
        <altmember cref="E:System.Windows.Window.Deactivated" />
        <altmember cref="P:System.Windows.Window.IsActive" />
      </Docs>
    </Member>
    <Member MemberName="Activated">
      <MemberSignature Language="C#" Value="public event EventHandler Activated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Activated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.Activated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Activated As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Activated;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7f8f8-157">Происходит при выведении окна на передний план.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-157">Occurs when a window becomes the foreground window.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8f8-158">Окно активируется (попадает на передний план) при:</span><span class="sxs-lookup"><span data-stu-id="7f8f8-158">A window is activated (becomes the foreground window) when:</span></span>  
  
-   <span data-ttu-id="7f8f8-159">Сначала открывается окно.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-159">The window is first opened.</span></span>  
  
-   <span data-ttu-id="7f8f8-160">Пользователь переключается на окно, выбрав его с помощью мыши, нажав клавиши ALT + TAB или из диспетчера задач.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-160">A user switches to a window by selecting it with the mouse, pressing ALT+TAB, or from Task Manager.</span></span>  
  
-   <span data-ttu-id="7f8f8-161">Пользователь нажимает кнопку панели задач.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-161">A user clicks the window's taskbar button.</span></span>  
  
 <span data-ttu-id="7f8f8-162">Операционная система, необходимо обнаружить, когда они становятся активировать обрабатывает <xref:System.Windows.Window.Activated> событий.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-162">Windows that need to detect when they become activate can handle the <xref:System.Windows.Window.Activated> event.</span></span>  
  
 <span data-ttu-id="7f8f8-163">После активации окна он может деактивировать и повторно много раз за время своего существования.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-163">After a window is first activated, it may be deactivated and reactivated many times during its lifetime.</span></span> <span data-ttu-id="7f8f8-164">Если поведение или состояние приложения зависит от состояния его активации, можно изучить <xref:System.Windows.Window.IsActive%2A> для определения каком он находится в состоянии активации.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-164">If an application's behavior or state depends on its activation state, it can inspect <xref:System.Windows.Window.IsActive%2A> to determine which activation state it's in.</span></span>  
  
 <span data-ttu-id="7f8f8-165">Приложение также может быть <xref:System.Windows.Application.Activated>.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-165">An application can also be <xref:System.Windows.Application.Activated>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Window.Deactivated" />
        <altmember cref="M:System.Windows.Window.Activate" />
        <altmember cref="P:System.Windows.Window.IsActive" />
      </Docs>
    </Member>
    <Member MemberName="AllowsTransparency">
      <MemberSignature Language="C#" Value="public bool AllowsTransparency { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowsTransparency" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.AllowsTransparency" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowsTransparency As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowsTransparency { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7f8f8-166">Возвращает или задает значение, указывающее, поддерживает ли клиентская область окна прозрачность.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-166">Gets or sets a value that indicates whether a window's client area supports transparency.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7f8f8-167">
            <see langword="true" />, если окно поддерживает прозрачность; в противном случае — <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-167">
              <see langword="true" /> if the window supports transparency; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8f8-168">Когда <xref:System.Windows.Controls.Control.Background%2A> окна свойству прозрачного цвета, с помощью <xref:System.Windows.Media.Brushes.Transparent%2A> к примеру, окно остается непрозрачным.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-168">When the <xref:System.Windows.Controls.Control.Background%2A> property of a window is set to a transparent color, using <xref:System.Windows.Media.Brushes.Transparent%2A> for example, the window remains opaque.</span></span> <span data-ttu-id="7f8f8-169">Это означает, что отображается рабочий стол и любые выполняемые операции «под окном».</span><span class="sxs-lookup"><span data-stu-id="7f8f8-169">This means that the desktop and any running applications "beneath" the window cannot be seen.</span></span> <span data-ttu-id="7f8f8-170">Чтобы разрешить такой тип прозрачности, <xref:System.Windows.Window.AllowsTransparency%2A> должно быть присвоено `true`.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-170">To enable this type of transparency, <xref:System.Windows.Window.AllowsTransparency%2A> must be set to `true`.</span></span>  
  
 <span data-ttu-id="7f8f8-171"><xref:System.Windows.Window.AllowsTransparency%2A> существует позволяет создавать непрямоугольные окна и, следовательно, при <xref:System.Windows.Window.AllowsTransparency%2A> равно `true`, окна <xref:System.Windows.Window.WindowStyle%2A> свойству необходимо присвоить значение <xref:System.Windows.WindowStyle.None>.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-171"><xref:System.Windows.Window.AllowsTransparency%2A> exists to facilitate the creation of non-rectangular windows, and, consequently, when <xref:System.Windows.Window.AllowsTransparency%2A> is set to `true`, a window's <xref:System.Windows.Window.WindowStyle%2A> property must be set to <xref:System.Windows.WindowStyle.None>.</span></span>  
  
<a name="dependencyPropertyInfo_WindowAllowsTransparency"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="7f8f8-172">Сведения о свойстве зависимостей</span><span class="sxs-lookup"><span data-stu-id="7f8f8-172">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7f8f8-173">Поле идентификатора</span><span class="sxs-lookup"><span data-stu-id="7f8f8-173">Identifier field</span></span>|<xref:System.Windows.Window.AllowsTransparencyProperty>|  
|<span data-ttu-id="7f8f8-174">Значение свойства метаданных `true`</span><span class="sxs-lookup"><span data-stu-id="7f8f8-174">Metadata properties set to `true`</span></span>|<span data-ttu-id="7f8f8-175">Нет</span><span class="sxs-lookup"><span data-stu-id="7f8f8-175">None</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="7f8f8-176">Окно, значение свойства <see cref="P:System.Windows.Window.WindowStyle" /> которого отлично от <see cref="F:System.Windows.WindowStyle.None" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-176">A window that has a <see cref="P:System.Windows.Window.WindowStyle" /> value of anything other than <see cref="F:System.Windows.WindowStyle.None" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="AllowsTransparencyProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AllowsTransparencyProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AllowsTransparencyProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.AllowsTransparencyProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AllowsTransparencyProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AllowsTransparencyProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7f8f8-177">Идентифицирует свойство зависимостей <see cref="P:System.Windows.Window.AllowsTransparency" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-177">Identifies the <see cref="P:System.Windows.Window.AllowsTransparency" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrangeOverride">
      <MemberSignature Language="C#" Value="protected override System.Windows.Size ArrangeOverride (System.Windows.Size arrangeBounds);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype System.Windows.Size ArrangeOverride(valuetype System.Windows.Size arrangeBounds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.ArrangeOverride(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ArrangeOverride (arrangeBounds As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Size ArrangeOverride(System::Windows::Size arrangeBounds);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arrangeBounds" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="arrangeBounds">
          <span data-ttu-id="7f8f8-178">Объект <see cref="T:System.Windows.Size" />, отражающий окончательный размер, который следует использовать окну для упорядочения себя и своих дочерних окон.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-178">A <see cref="T:System.Windows.Size" /> that reflects the final size that the window should use to arrange itself and its children.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f8f8-179">Переопределив данный метод, можно упорядочить окно и его дочерние элементы, а также изменить их размер.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-179">Override this method to arrange and size a window and its child elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7f8f8-180">Объект <see cref="T:System.Windows.Size" />, отражающий фактический размер, который использовался.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-180">A <see cref="T:System.Windows.Size" /> that reflects the actual size that was used.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8f8-181"><xref:System.Windows.Window.ArrangeOverride%2A> не вызывается, когда <xref:System.Windows.UIElement.Visibility%2A> свойство имеет значение <xref:System.Windows.Visibility.Collapsed>.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-181"><xref:System.Windows.Window.ArrangeOverride%2A> is not called when the <xref:System.Windows.UIElement.Visibility%2A> property has a value of <xref:System.Windows.Visibility.Collapsed>.</span></span> <span data-ttu-id="7f8f8-182">Если значение <xref:System.Windows.UIElement.Visibility%2A> равно либо <xref:System.Windows.Visibility.Hidden> или <xref:System.Windows.Visibility.Visible>, <xref:System.Windows.Window.ArrangeOverride%2A> вызывается.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-182">If the value of the <xref:System.Windows.UIElement.Visibility%2A> property is either <xref:System.Windows.Visibility.Hidden> or <xref:System.Windows.Visibility.Visible>, <xref:System.Windows.Window.ArrangeOverride%2A> is called.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7f8f8-183">Когда либо <xref:System.Windows.Window.Show%2A> или <xref:System.Windows.Window.ShowDialog%2A> , называются <xref:System.Windows.UIElement.Visibility%2A> свойство <xref:System.Windows.Window> равно <xref:System.Windows.Visibility.Visible>.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-183">When either <xref:System.Windows.Window.Show%2A> or <xref:System.Windows.Window.ShowDialog%2A> are called, the <xref:System.Windows.UIElement.Visibility%2A> property of a <xref:System.Windows.Window> is set to <xref:System.Windows.Visibility.Visible>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />
        <altmember cref="M:System.Windows.Window.MeasureOverride(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7f8f8-184">Вручную закрывает окно <see cref="T:System.Windows.Window" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-184">Manually closes a <see cref="T:System.Windows.Window" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8f8-185">Объект <xref:System.Windows.Window> может быть закрыто с помощью одного из нескольких хорошо известных, системных механизмов, расположенных в его заголовке, включая:</span><span class="sxs-lookup"><span data-stu-id="7f8f8-185">A <xref:System.Windows.Window> can be closed using one of several, well-known, system-provided mechanisms located in its title bar, including:</span></span>  
  
-   <span data-ttu-id="7f8f8-186">ALT+F4.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-186">ALT+F4.</span></span>  
  
-   <span data-ttu-id="7f8f8-187">Системное меню &#124; **закрыть**.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-187">System menu &#124; **Close**.</span></span>  
  
-   <span data-ttu-id="7f8f8-188">**Закрыть** кнопки.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-188">**Close** button.</span></span>  
  
 <span data-ttu-id="7f8f8-189">Объект <xref:System.Windows.Window> может быть закрыто с помощью одного из нескольких хорошо известных механизмов в клиентской области, предоставляемых разработчиками, включая:</span><span class="sxs-lookup"><span data-stu-id="7f8f8-189">A <xref:System.Windows.Window> can also be closed using one of several well-known mechanisms within the client area that are provided by developers, including:</span></span>  
  
-   <span data-ttu-id="7f8f8-190">**Файл** &#124; **выхода** в главном окне.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-190">**File** &#124; **Exit** on a main window.</span></span>  
  
-   <span data-ttu-id="7f8f8-191">**Файл** &#124; **закрыть** или **закрыть** кнопки для дочернего окна.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-191">**File** &#124; **Close** or a **Close** button on a child window.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7f8f8-192">**ОК** и **отменить** предоставляются для разработчиков, кнопок в диалоговом окне, также несмотря на то что будет вероятный набор <xref:System.Windows.Window.DialogResult%2A>, который автоматически закрывает окно, которое было открыто посредством вызова <xref:System.Windows.Window.ShowDialog%2A>.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-192">**OK** and **Cancel** buttons on a dialog box are also developer-provided, although will likely set <xref:System.Windows.Window.DialogResult%2A>, which automatically closes a window that was opened by calling <xref:System.Windows.Window.ShowDialog%2A>.</span></span>  
  
 <span data-ttu-id="7f8f8-193">Эти механизмы необходимо явным образом вызвать <xref:System.Windows.Window.Close%2A> для закрытия окна.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-193">These mechanisms require you to explicitly call <xref:System.Windows.Window.Close%2A> to close a window.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7f8f8-194">Если открыть окно путем вызова <xref:System.Windows.Window.ShowDialog%2A>и с <xref:System.Windows.Controls.Button> с его <xref:System.Windows.Controls.Button.IsCancel%2A> свойству задано значение true, автоматически закроется при нажатии кнопки либо или нажатия клавиши ESC.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-194">If a window, opened by calling <xref:System.Windows.Window.ShowDialog%2A>, and with a <xref:System.Windows.Controls.Button> with its <xref:System.Windows.Controls.Button.IsCancel%2A> property set to true, will automatically close when the button is either clicked, or ESC is pressed.</span></span> <span data-ttu-id="7f8f8-195">Если окно было открыто с помощью <xref:System.Windows.Window.Show%2A>, но при этом <xref:System.Windows.Window.Close%2A> должно быть явно вызываемые, например, в <xref:System.Windows.Controls.Primitives.ButtonBase.Click> обработчик событий для <xref:System.Windows.Controls.Button>.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-195">If the window was opened using <xref:System.Windows.Window.Show%2A>, however, <xref:System.Windows.Window.Close%2A> must be explicitly called, such as from <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event handler for the <xref:System.Windows.Controls.Button>.</span></span>  
  
 <span data-ttu-id="7f8f8-196">Закрытие окна вызывает <xref:System.Windows.Window.Closing> вызова события.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-196">Closing a window causes the <xref:System.Windows.Window.Closing> event to be raised.</span></span> <span data-ttu-id="7f8f8-197">Если <xref:System.Windows.Window.Closing> событий не отменяется, то происходит следующее:</span><span class="sxs-lookup"><span data-stu-id="7f8f8-197">If the <xref:System.Windows.Window.Closing> event isn't canceled, the following occurs:</span></span>  
  
-   <span data-ttu-id="7f8f8-198"><xref:System.Windows.Window> Удаляется из <xref:System.Windows.Application.Windows%2A?displayProperty=nameWithType> (если <xref:System.Windows.Application> объект существует).</span><span class="sxs-lookup"><span data-stu-id="7f8f8-198">The <xref:System.Windows.Window> is removed from <xref:System.Windows.Application.Windows%2A?displayProperty=nameWithType> (if an <xref:System.Windows.Application> object exists).</span></span>  
  
-   <span data-ttu-id="7f8f8-199"><xref:System.Windows.Window> Удаляется из владельца <xref:System.Windows.Window> , если было установлено связь владелец/собственное перед принадлежащие <xref:System.Windows.Window> рассмотренному и после владельца <xref:System.Windows.Window> был открыт.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-199">The <xref:System.Windows.Window> is removed from the owner <xref:System.Windows.Window> if the owner/owned relationship was established before the owned <xref:System.Windows.Window> was shown and after the owner <xref:System.Windows.Window> was opened.</span></span>  
  
-   <span data-ttu-id="7f8f8-200">Возникает событие <xref:System.Windows.Window.Closed>.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-200">The <xref:System.Windows.Window.Closed> event is raised.</span></span>  
  
-   <span data-ttu-id="7f8f8-201">Неуправляемые ресурсы, созданные <xref:System.Windows.Window> удаляются.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-201">Unmanaged resources created by the <xref:System.Windows.Window> are disposed.</span></span>  
  
-   <span data-ttu-id="7f8f8-202">Если <xref:System.Windows.Window.ShowDialog%2A> был вызван для отображения <xref:System.Windows.Window>, <xref:System.Windows.Window.ShowDialog%2A> возвращает.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-202">If <xref:System.Windows.Window.ShowDialog%2A> was called to show the <xref:System.Windows.Window>, <xref:System.Windows.Window.ShowDialog%2A> returns.</span></span>  
  
 <span data-ttu-id="7f8f8-203">Закрытие <xref:System.Windows.Window> предписывает принадлежащих ему будет закрыта.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-203">Closing a <xref:System.Windows.Window> causes any windows that it owns to be closed.</span></span> <span data-ttu-id="7f8f8-204">Кроме того, закрытие <xref:System.Windows.Window> может привести к остановке выполнения в зависимости от того как приложение <xref:System.Windows.Application.ShutdownMode%2A?displayProperty=nameWithType> свойству.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-204">Furthermore, closing a <xref:System.Windows.Window> may cause an application to stop running depending on how the <xref:System.Windows.Application.ShutdownMode%2A?displayProperty=nameWithType> property is set.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7f8f8-205">Этот метод не может вызываться, когда окно размещается в браузере.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-205">This method cannot be called when a window is hosted in a browser.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f8f8-206">В следующем примере показан **файл** &#124; **выхода** меню обрабатываемых для явного вызова <xref:System.Windows.Window.Close%2A>.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-206">The following example shows a **File** &#124; **Exit** menu being handled to explicitly call <xref:System.Windows.Window.Close%2A>.</span></span>  
  
 [!code-xaml[WindowCloseSnippets#WindowCloseXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowCloseSnippets/CSharp/MainWindow.xaml#windowclosexaml)]  
  
 [!code-csharp[WindowCloseSnippets#WindowCloseCODEBEHIND](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowCloseSnippets/CSharp/MainWindow.xaml.cs#windowclosecodebehind)]
 [!code-vb[WindowCloseSnippets#WindowCloseCODEBEHIND](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowCloseSnippets/visualbasic/mainwindow.xaml.vb#windowclosecodebehind)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="7f8f8-207">для разрешения использования все окна и события пользовательского ввода без ограничений.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-207">for permission to use all windows and user input events without restriction.</span>
          </span>
          <span data-ttu-id="7f8f8-208">Связанное перечисление: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-208">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Windows.Window.Show" />
        <altmember cref="M:System.Windows.Window.ShowDialog" />
        <altmember cref="P:System.Windows.Window.DialogResult" />
        <altmember cref="P:System.Windows.Window.Owner" />
        <altmember cref="P:System.Windows.Window.OwnedWindows" />
      </Docs>
    </Member>
    <Member MemberName="Closed">
      <MemberSignature Language="C#" Value="public event EventHandler Closed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Closed" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.Closed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Closed As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Closed;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7f8f8-209">Происходит, когда окно готово к закрытию.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-209">Occurs when the window is about to close.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8f8-210">После данного события, не может быть закрытие окна предотвратить.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-210">Once this event is raised, a window cannot be prevented from closing.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="7f8f8-211">Задано свойство <see cref="P:System.Windows.UIElement.Visibility" /> либо вызван один из методов <see cref="M:System.Windows.Window.Show" />, <see cref="M:System.Windows.Window.ShowDialog" /> или <see cref="M:System.Windows.Window.Hide" /> во время закрытия окна.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-211">
              <see cref="P:System.Windows.UIElement.Visibility" /> is set, or <see cref="M:System.Windows.Window.Show" />, <see cref="M:System.Windows.Window.ShowDialog" />, or <see cref="M:System.Windows.Window.Hide" /> is called while a window is closing.</span>
          </span>
        </exception>
        <altmember cref="M:System.Windows.Window.Close" />
        <altmember cref="E:System.Windows.Window.Closing" />
        <altmember cref="M:System.Windows.Application.Shutdown" />
        <altmember cref="P:System.Windows.Application.ShutdownMode" />
        <altmember cref="E:System.Windows.Application.SessionEnding" />
      </Docs>
    </Member>
    <Member MemberName="Closing">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.CancelEventHandler Closing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.CancelEventHandler Closing" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.Closing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Closing As CancelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::ComponentModel::CancelEventHandler ^ Closing;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.CancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7f8f8-212">Происходит непосредственно после вызова метода <see cref="M:System.Windows.Window.Close" /> и может быть обработано с отменой закрытия окна.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-212">Occurs directly after <see cref="M:System.Windows.Window.Close" /> is called, and can be handled to cancel window closure.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8f8-213"><xref:System.Windows.Window.Closing> может использоваться для обнаружения при закрытии окна (например, в том случае, когда <xref:System.Windows.Window.Close%2A> вызывается).</span><span class="sxs-lookup"><span data-stu-id="7f8f8-213"><xref:System.Windows.Window.Closing> can be handled to detect when a window is being closed (for example, when <xref:System.Windows.Window.Close%2A> is called).</span></span> <span data-ttu-id="7f8f8-214">Кроме того <xref:System.Windows.Window.Closing> может использоваться для предотвращения закрытия окна.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-214">Furthermore, <xref:System.Windows.Window.Closing> can be used to prevent a window from closing.</span></span> <span data-ttu-id="7f8f8-215">Для предотвращения закрытия окна, можно задать <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> свойство <xref:System.ComponentModel.CancelEventArgs> аргумент `true`.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-215">To prevent a window from closing, you can set the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property of the <xref:System.ComponentModel.CancelEventArgs> argument to `true`.</span></span>  
  
 <span data-ttu-id="7f8f8-216"><xref:System.Windows.Window.Closing> Событие возникает при <xref:System.Windows.Window.Close%2A> вызывается, если щелкнуть кнопку закрытия окна или при нажатии клавиш ALT + F4.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-216">The <xref:System.Windows.Window.Closing> event is raised when <xref:System.Windows.Window.Close%2A> is called, if a window's Close button is clicked, or if the user presses ALT+F4.</span></span>  
  
 <span data-ttu-id="7f8f8-217">Если собственное окно был открыт с помощью окна его владельца <xref:System.Windows.Window.Show%2A>и владелец закрытия окна, принадлежащие окна <xref:System.Windows.Window.Closing> событие не происходит.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-217">If an owned window was opened by its owner window using <xref:System.Windows.Window.Show%2A>, and the owner window is closed, the owned window's <xref:System.Windows.Window.Closing> event is not raised.</span></span> <span data-ttu-id="7f8f8-218">Если владелец окна закрывается (см. <xref:System.Windows.Window.Owner%2A>), <xref:System.Windows.Window.Closing> не возникает для собственного окна.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-218">If the owner of a window is closed (see <xref:System.Windows.Window.Owner%2A>), <xref:System.Windows.Window.Closing> is not raised on the owned window.</span></span>  
  
 <span data-ttu-id="7f8f8-219">Если <xref:System.Windows.Application.Shutdown%2A> вызове <xref:System.Windows.Window.Closing> событие для каждого окна.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-219">If <xref:System.Windows.Application.Shutdown%2A> is called, the <xref:System.Windows.Window.Closing> event for each window is raised.</span></span> <span data-ttu-id="7f8f8-220">Тем не менее если <xref:System.Windows.Window.Closing> будет отменена, отмены игнорируется.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-220">However, if <xref:System.Windows.Window.Closing> is canceled, cancellation is ignored.</span></span>  
  
 <span data-ttu-id="7f8f8-221">При завершении сеанса, так как пользователь выходит из системы или завершает работу, <xref:System.Windows.Window.Closing> не возникает; обработка <xref:System.Windows.Application.SessionEnding> реализовать код, который отменяет закрытия приложения.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-221">If a session ends because a user logs off or shuts down, <xref:System.Windows.Window.Closing> is not raised; handle <xref:System.Windows.Application.SessionEnding> to implement code that cancels application closure.</span></span>  
  
 <span data-ttu-id="7f8f8-222">Если нужно показать или скрыть окно несколько раз в течение жизненного цикла приложения и вы не хотите повторного создания окна каждый раз, можно отобразить, можно обрабатывать <xref:System.Windows.Window.Closing> событий, отменить его, а также вызвать <xref:System.Windows.Window.Hide%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-222">If you want to show and hide a window multiple times during the lifetime of an application, and you don't want to reinstantiate the window each time you show it, you can handle the <xref:System.Windows.Window.Closing> event, cancel it, and call the <xref:System.Windows.Window.Hide%2A> method.</span></span> <span data-ttu-id="7f8f8-223">Затем можно вызвать <xref:System.Windows.Window.Show%2A> на том же экземпляре, чтобы снова открыть его.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-223">Then, you can call <xref:System.Windows.Window.Show%2A> on the same instance to reopen it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f8f8-224">В следующем примере демонстрируется <xref:System.Windows.Window> , определяющее, когда требуется вмешательство пользователя для закрытия.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-224">The following example demonstrates a <xref:System.Windows.Window> that determines whether it needs user intervention to close.</span></span>  
  
 [!code-xaml[WindowClosingSnippets#WindowClosingXAML1](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowClosingSnippets/CSharp/DataWindow.xaml#windowclosingxaml1)]  
  
 [!code-csharp[WindowClosingSnippets](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowClosingSnippets/CSharp/DataWindow.xaml.cs)]
 [!code-vb[WindowClosingSnippets](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowClosingSnippets/visualbasic/datawindow.xaml.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="7f8f8-225">Задано свойство <see cref="P:System.Windows.UIElement.Visibility" /> либо вызван один из методов <see cref="M:System.Windows.Window.Show" />, <see cref="M:System.Windows.Window.ShowDialog" /> или <see cref="M:System.Windows.Window.Close" /> во время закрытия окна.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-225">
              <see cref="P:System.Windows.UIElement.Visibility" /> is set, or <see cref="M:System.Windows.Window.Show" />, <see cref="M:System.Windows.Window.ShowDialog" />, or <see cref="M:System.Windows.Window.Close" /> is called while a window is closing.</span>
          </span>
        </exception>
        <altmember cref="P:System.Windows.Application.ShutdownMode" />
        <altmember cref="M:System.Windows.Window.Close" />
        <altmember cref="E:System.Windows.Window.Closed" />
      </Docs>
    </Member>
    <Member MemberName="ContentRendered">
      <MemberSignature Language="C#" Value="public event EventHandler ContentRendered;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ContentRendered" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.ContentRendered" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContentRendered As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event EventHandler ^ ContentRendered;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7f8f8-226">Происходит после завершения отображения содержимого окна.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-226">Occurs after a window's content has been rendered.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8f8-227">Если окно не имеет содержимого, это событие не возникает.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-227">If the window has no content, this event is not raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Controls.ContentControl.Content" />
        <altmember cref="E:System.Windows.FrameworkElement.Loaded" />
      </Docs>
    </Member>
    <Member MemberName="Deactivated">
      <MemberSignature Language="C#" Value="public event EventHandler Deactivated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Deactivated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.Deactivated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deactivated As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Deactivated;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7f8f8-228">Происходит при перемещении окна на задний план.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-228">Occurs when a window becomes a background window.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8f8-229">Окно деактивируется (попадает на задний план) при:</span><span class="sxs-lookup"><span data-stu-id="7f8f8-229">A window is deactivated (becomes a background window) when:</span></span>  
  
-   <span data-ttu-id="7f8f8-230">Пользователь переключается на другое окно в текущем приложении.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-230">A user switches to another window in the current application.</span></span>  
  
-   <span data-ttu-id="7f8f8-231">Пользователь переключается на окно в другом приложении, с помощью клавиш ALT + TAB или с помощью диспетчера задач.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-231">A user switches to the window in another application by using ALT+TAB or by using Task Manager.</span></span>  
  
-   <span data-ttu-id="7f8f8-232">Пользователь нажимает кнопку панели задач для окна в другое приложение.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-232">A user clicks the taskbar button for a window in another application.</span></span>  
  
 <span data-ttu-id="7f8f8-233">Windows, которые необходимо обнаружить, когда они становятся деактивированный обработки <xref:System.Windows.Window.Deactivated> событий.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-233">Windows that need to detect when they become deactivated by handling the <xref:System.Windows.Window.Deactivated> event.</span></span>  
  
 <span data-ttu-id="7f8f8-234">После деактивации окна его повторной активации и деактивации множество раз за время существования.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-234">After a window is first deactivated, it may be reactivated and deactivated many times during its lifetime.</span></span> <span data-ttu-id="7f8f8-235">Если поведение или состояние приложения зависит от состояния его активации, можно изучить <xref:System.Windows.Window.IsActive%2A> для определения каком он находится в состоянии активации.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-235">If an application's behavior or state depends on its activation state, it can inspect <xref:System.Windows.Window.IsActive%2A> to determine which activation state it's in.</span></span>  
  
 <span data-ttu-id="7f8f8-236">Приложение также может быть <xref:System.Windows.Application.Deactivated>.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-236">An application can also be <xref:System.Windows.Application.Deactivated>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Window.Activated" />
        <altmember cref="M:System.Windows.Window.Activate" />
        <altmember cref="P:System.Windows.Window.IsActive" />
      </Docs>
    </Member>
    <Member MemberName="DialogResult">
      <MemberSignature Language="C#" Value="public Nullable&lt;bool&gt; DialogResult { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;bool&gt; DialogResult" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.DialogResult" />
      <MemberSignature Language="VB.NET" Value="Public Property DialogResult As Nullable(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;bool&gt; DialogResult { Nullable&lt;bool&gt; get(); void set(Nullable&lt;bool&gt; value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.DialogResultConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7f8f8-237">Возвращает или задает результирующее значение диалоговое окна, то есть значение, которое будет возвращено методом <see cref="M:System.Windows.Window.ShowDialog" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-237">Gets or sets the dialog result value, which is the value that is returned from the <see cref="M:System.Windows.Window.ShowDialog" /> method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7f8f8-238">Значение <see cref="T:System.Nullable`1" /> типа <see cref="T:System.Boolean" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-238">A <see cref="T:System.Nullable`1" /> value of type <see cref="T:System.Boolean" />.</span>
          </span>
          <span data-ttu-id="7f8f8-239">Значение по умолчанию: <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-239">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8f8-240"><xref:System.Windows.Window.DialogResult%2A> может использоваться из кода, в который было показано диалоговое окно для определения того, приняты ли пользователь (`true`) или отменена (`false`) диалоговое окно.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-240"><xref:System.Windows.Window.DialogResult%2A> can be used from the code that showed a dialog box to determine whether a user accepted (`true`) or canceled (`false`) the dialog box.</span></span> <span data-ttu-id="7f8f8-241">Если диалоговое окно было принято, это означает для кода, который открывается диалоговое окно для получения данных, собранных с пользователем и его.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-241">If a dialog box was accepted, this signifies to the code that opened the dialog box to retrieve the data that was collected by the user and process it.</span></span> <span data-ttu-id="7f8f8-242">Если диалоговое окно было отменено, однако это означает, что вызывающему коду следует прекратить дальнейшую обработку.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-242">If a dialog box was canceled, however, this signifies that calling code should stop any further processing.</span></span>  
  
 <span data-ttu-id="7f8f8-243">По умолчанию диалоговое окно отменяется, когда пользователь выполняет одно из следующих:</span><span class="sxs-lookup"><span data-stu-id="7f8f8-243">By default, a dialog box is canceled when a user does one of the following:</span></span>  
  
-   <span data-ttu-id="7f8f8-244">PressesALT+F4.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-244">PressesALT+F4.</span></span>  
  
-   <span data-ttu-id="7f8f8-245">Щелкает **закрыть** кнопки.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-245">Clicks the **Close** button.</span></span>  
  
-   <span data-ttu-id="7f8f8-246">Выбирает **закрыть** в системном меню.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-246">Selects **Close** from the System menu.</span></span>  
  
 <span data-ttu-id="7f8f8-247">Во всех этих случаях <xref:System.Windows.Window.DialogResult%2A> — `false` по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-247">In all of these cases, <xref:System.Windows.Window.DialogResult%2A> is `false` by default.</span></span>  
  
 <span data-ttu-id="7f8f8-248">Диалоговое окно обычно предоставляет отдельную кнопку, чтобы закрыть диалоговое окно, который является кнопкой которого <xref:System.Windows.Controls.Button.IsCancel%2A> свойству `true`.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-248">A dialog box typically provides a special button to cancel a dialog, which is the button whose <xref:System.Windows.Controls.Button.IsCancel%2A> property is set to `true`.</span></span> <span data-ttu-id="7f8f8-249">Кнопка, настроенная таким образом автоматически закроется окно при нажатии или при нажатии клавиши ESC.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-249">A button configured this way will automatically close a window when either it is pressed, or when the ESC key is pressed.</span></span> <span data-ttu-id="7f8f8-250">В любом из этих случаев <xref:System.Windows.Window.DialogResult%2A> остается `false`.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-250">In either of these cases, <xref:System.Windows.Window.DialogResult%2A> remains `false`.</span></span>  
  
 <span data-ttu-id="7f8f8-251">Диалоговое окно также обычно предоставляет кнопки «принять», который является кнопкой которого <xref:System.Windows.Controls.Button.IsDefault%2A> свойству `true`.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-251">A dialog box also typically provides an accept button, which is the button whose <xref:System.Windows.Controls.Button.IsDefault%2A> property is set to `true`.</span></span> <span data-ttu-id="7f8f8-252">Кнопка, настроенная таким образом будет вызывать его <xref:System.Windows.Controls.Primitives.ButtonBase.Click> событие при нажатии ее или клавишу ВВОД.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-252">A button configured this way will raise its <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event when either it or the ENTER key is pressed.</span></span> <span data-ttu-id="7f8f8-253">Однако он не будет автоматически закрыто диалоговым окном, нельзя будет задать <xref:System.Windows.Window.DialogResult%2A> для `true`.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-253">However, it won't automatically close the dialog box, nor will it set <xref:System.Windows.Window.DialogResult%2A> to `true`.</span></span> <span data-ttu-id="7f8f8-254">Необходимо вручную записать этот код, обычно из <xref:System.Windows.Controls.Primitives.ButtonBase.Click> обработчик событий для кнопки по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-254">You need to manually write this code, usually from the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event handler for the default button.</span></span>  
  
 <span data-ttu-id="7f8f8-255"><xref:System.Windows.Window.DialogResult%2A> — `null` при отображении диалогового окна но принятые ни отменена.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-255"><xref:System.Windows.Window.DialogResult%2A> is `null` when the dialog box is shown but neither accepted nor canceled.</span></span>  
  
 <span data-ttu-id="7f8f8-256">После закрытия диалогового окна можно получить результат диалогового окна из значения, возвращенного <xref:System.Windows.Window.ShowDialog%2A> метод, или путем проверки <xref:System.Windows.Window.DialogResult%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-256">After a dialog box closes, you can get the dialog result from the value returned by <xref:System.Windows.Window.ShowDialog%2A> method, or by inspecting the <xref:System.Windows.Window.DialogResult%2A> property.</span></span>  
  
 <span data-ttu-id="7f8f8-257"><xref:System.Windows.Window.DialogResult%2A> можно задать только при <xref:System.Windows.Window> открытия путем вызова его <xref:System.Windows.Window.ShowDialog%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-257"><xref:System.Windows.Window.DialogResult%2A> can only be set when a <xref:System.Windows.Window> is opened by calling its <xref:System.Windows.Window.ShowDialog%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7f8f8-258">Не удается задать или получить значение этого свойства, если окно размещено в браузере.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-258">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f8f8-259">Приведенный ниже показано, как настроить кнопку "ОК" и "Отмена" для возврата соответствующего <xref:System.Windows.Window.DialogResult%2A>.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-259">The following example shows how to configure an OK button and a Cancel button to return the appropriate <xref:System.Windows.Window.DialogResult%2A>.</span></span>  
  
 [!code-xaml[WindowDialogResultSnippets#WindowDialogResultXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowDialogResultSnippets/CSharp/DialogBox.xaml#windowdialogresultxaml)]  
  
 [!code-csharp[WindowDialogResultSnippets#WindowDialogResultCODEBEHIND](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowDialogResultSnippets/CSharp/DialogBox.xaml.cs#windowdialogresultcodebehind)]
 [!code-vb[WindowDialogResultSnippets#WindowDialogResultCODEBEHIND](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowDialogResultSnippets/visualbasic/dialogbox.xaml.vb#windowdialogresultcodebehind)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="7f8f8-260">
            <see cref="P:System.Windows.Window.DialogResult" /> задан, до того как окно открывается путем вызова <see cref="M:System.Windows.Window.ShowDialog" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-260">
              <see cref="P:System.Windows.Window.DialogResult" /> is set before a window is opened by calling <see cref="M:System.Windows.Window.ShowDialog" />.</span>
          </span>
          <span data-ttu-id="7f8f8-261">- или -</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-261">-or-</span>
          </span>
          <span data-ttu-id="7f8f8-262">
            <see cref="P:System.Windows.Window.DialogResult" /> задан для окна, которое открывается путем вызова <see cref="M:System.Windows.Window.Show" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-262">
              <see cref="P:System.Windows.Window.DialogResult" /> is set on a window that is opened by calling <see cref="M:System.Windows.Window.Show" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DpiChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DpiChangedEventHandler DpiChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DpiChangedEventHandler DpiChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.DpiChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DpiChanged As DpiChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DpiChangedEventHandler ^ DpiChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DpiChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7f8f8-263">Происходит после изменения значения DPI для экрана, на котором отображается Window.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-263">Occurs after the DPI of the screen on which the Window is displayed changes.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DpiChangedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DpiChangedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DpiChangedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.DpiChangedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DpiChangedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DpiChangedEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7f8f8-264">
            <see cref="T:System.Windows.RoutedEvent" />, если разрешение (DPI) экрана Window изменяется.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-264">A <see cref="T:System.Windows.RoutedEvent" /> for when the DPI of the screen the Window is on changes.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DragMove">
      <MemberSignature Language="C#" Value="public void DragMove ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DragMove() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.DragMove" />
      <MemberSignature Language="VB.NET" Value="Public Sub DragMove ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DragMove();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7f8f8-265">Позволяет перетаскивать окно мышью с зажатой левой кнопкой над открытой частью клиентской области окна.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-265">Allows a window to be dragged by a mouse with its left button down over an exposed area of the window's client area.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8f8-266">Левая кнопка мыши должна быть отключена при <xref:System.Windows.Window.DragMove%2A> вызывается.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-266">The left mouse button must be down when <xref:System.Windows.Window.DragMove%2A> is called.</span></span> <span data-ttu-id="7f8f8-267">Является одним из способов определить при нажатии левой кнопки мыши для обработки <xref:System.Windows.UIElement.MouseLeftButtonDown> событий.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-267">One way to detect when the left mouse button is pressed is to handle the <xref:System.Windows.UIElement.MouseLeftButtonDown> event.</span></span>  
  
 <span data-ttu-id="7f8f8-268">Когда <xref:System.Windows.Window.DragMove%2A> вызывается влево должен нажата кнопка мыши над открытой клиентской области окна.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-268">When <xref:System.Windows.Window.DragMove%2A> is called, the left mouse button must be depressed over an exposed area of the window's client area.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7f8f8-269">Этот метод не может вызываться, когда окно размещается в браузере.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-269">This method cannot be called when a window is hosted in a browser.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f8f8-270">В следующем примере показан способ переопределения <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A> для вызова <xref:System.Windows.Window.DragMove%2A>.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-270">The following example shows how to override <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A> to call <xref:System.Windows.Window.DragMove%2A>.</span></span>  
  
 [!code-csharp[WindowDragMoveSnippets#CallWindowDragMoveCODEBEHIND](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowDragMoveSnippets/CSharp/MainWindow.xaml.cs#callwindowdragmovecodebehind)]
 [!code-vb[WindowDragMoveSnippets#CallWindowDragMoveCODEBEHIND](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowDragMoveSnippets/visualbasic/mainwindow.xaml.vb#callwindowdragmovecodebehind)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="7f8f8-271">Левая кнопка мыши не нажата.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-271">The left mouse button is not down.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="7f8f8-272">для разрешения на перетаскивание окна.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-272">for permission to drag a window.</span>
          </span>
          <span data-ttu-id="7f8f8-273">Связанное перечисление: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-273">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          </span>
        </permission>
        <altmember cref="E:System.Windows.Window.LocationChanged" />
      </Docs>
    </Member>
    <Member MemberName="GetWindow">
      <MemberSignature Language="C#" Value="public static System.Windows.Window GetWindow (System.Windows.DependencyObject dependencyObject);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Window GetWindow(class System.Windows.DependencyObject dependencyObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.GetWindow(System.Windows.DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Window ^ GetWindow(System::Windows::DependencyObject ^ dependencyObject);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Window</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dependencyObject" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="dependencyObject">
          <span data-ttu-id="7f8f8-274">Объект зависимостей.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-274">The dependency object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f8f8-275">Возвращает ссылку на объект <see cref="T:System.Windows.Window" />, содержащий дерево содержимого, в котором расположен объект зависимостей.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-275">Returns a reference to the <see cref="T:System.Windows.Window" /> object that hosts the content tree within which the dependency object is located.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7f8f8-276">Ссылка <see cref="T:System.Windows.Window" /> на окно-хранилище.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-276">A <see cref="T:System.Windows.Window" /> reference to the host window.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7f8f8-277">Параметр <paramref name="dependencyObject" /> имеет значение null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-277">
              <paramref name="dependencyObject" /> is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Hide">
      <MemberSignature Language="C#" Value="public void Hide ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Hide() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.Hide" />
      <MemberSignature Language="VB.NET" Value="Public Sub Hide ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Hide();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7f8f8-278">Делает окно невидимым.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-278">Makes a window invisible.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8f8-279">Окно не закрывается после скрыта и ни <xref:System.Windows.Window.Closing> , ни <xref:System.Windows.Window.Closed> события.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-279">A window is not closed when it is hidden, and neither the <xref:System.Windows.Window.Closing> nor <xref:System.Windows.Window.Closed> event is raised.</span></span> <span data-ttu-id="7f8f8-280">Вместо этого окна <xref:System.Windows.UIElement.Visibility%2A> свойству <xref:System.Windows.Visibility.Hidden?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-280">Instead, the window's <xref:System.Windows.UIElement.Visibility%2A> property is set to <xref:System.Windows.Visibility.Hidden?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="7f8f8-281">Если окно приложения <xref:System.Windows.Application.MainWindow%2A> и приложения <xref:System.Windows.Application.ShutdownMode%2A> — <xref:System.Windows.ShutdownMode.OnMainWindowClose>, приложение не завершает работу.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-281">If a window is the application's <xref:System.Windows.Application.MainWindow%2A> and the application's <xref:System.Windows.Application.ShutdownMode%2A> is <xref:System.Windows.ShutdownMode.OnMainWindowClose>, the application does not shut down.</span></span> <span data-ttu-id="7f8f8-282">Аналогичным образом, приложения не завершена, если окно является окном только и режим завершения работы приложения — <xref:System.Windows.ShutdownMode.OnLastWindowClose>.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-282">Likewise, the application does not shut down if a window is the only window and the application's shutdown mode is <xref:System.Windows.ShutdownMode.OnLastWindowClose>.</span></span>  
  
 <span data-ttu-id="7f8f8-283">Если нужно показать или скрыть окно несколько раз в течение жизненного цикла приложения, и вы не хотите повторно создать экземпляр окна при каждом его открыть, можно обработать <xref:System.Windows.Window.Closing> событий, отменить его, а также вызвать <xref:System.Windows.Window.Hide%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-283">If you want to show and hide a window multiple times during the lifetime of an application, and you don't want to re-instantiate the window each time you show it, you can handle the <xref:System.Windows.Window.Closing> event, cancel it, and call the <xref:System.Windows.Window.Hide%2A> method.</span></span> <span data-ttu-id="7f8f8-284">Затем можно вызвать <xref:System.Windows.Window.Show%2A> на том же экземпляре, чтобы снова открыть его.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-284">Then, you can call <xref:System.Windows.Window.Show%2A> on the same instance to re-open it.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="7f8f8-285">Метод <see cref="M:System.Windows.Window.Hide" /> вызывается для окна, которое закрывается (<see cref="E:System.Windows.Window.Closing" />) или закрыто (<see cref="E:System.Windows.Window.Closed" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-285">
              <see cref="M:System.Windows.Window.Hide" /> is called on a window that is closing (<see cref="E:System.Windows.Window.Closing" />) or has been closed (<see cref="E:System.Windows.Window.Closed" />).</span>
          </span>
        </exception>
        <altmember cref="M:System.Windows.Window.Show" />
        <altmember cref="M:System.Windows.Window.ShowDialog" />
        <altmember cref="M:System.Windows.Window.Close" />
      </Docs>
    </Member>
    <Member MemberName="Icon">
      <MemberSignature Language="C#" Value="public System.Windows.Media.ImageSource Icon { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.ImageSource Icon" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.Icon" />
      <MemberSignature Language="VB.NET" Value="Public Property Icon As ImageSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::ImageSource ^ Icon { System::Windows::Media::ImageSource ^ get(); void set(System::Windows::Media::ImageSource ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Media.ImageSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7f8f8-286">Получение или установка значка окна.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-286">Gets or sets a window's icon.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7f8f8-287">Объект <see cref="T:System.Windows.Media.ImageSource" />, представляющий значок.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-287">An <see cref="T:System.Windows.Media.ImageSource" /> object that represents the icon.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)]<span data-ttu-id="7f8f8-288"> Автономные приложения имеют два вида значков:</span><span class="sxs-lookup"><span data-stu-id="7f8f8-288"> standalone applications have two types of icons:</span></span>  
  
-   <span data-ttu-id="7f8f8-289">Значок одной сборки, который задается с помощью `<ApplicationIcon>` файл сборки свойство в проекте приложения.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-289">One assembly icon, which is specified by using the `<ApplicationIcon>` property in the application's project build file.</span></span> <span data-ttu-id="7f8f8-290">Этот значок используется на рабочем столе для сборки.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-290">This icon is used as the desktop icon for an assembly.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="7f8f8-291">При отладке в Visual Studio значка вашего могут не отображаться из-за процесса размещения.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-291">When debugging in Visual Studio, your icon may not appear due to the hosting process.</span></span> <span data-ttu-id="7f8f8-292">При запуске исполняемого файла, то появляется значок.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-292">If you run the executable, the icon will appear.</span></span> <span data-ttu-id="7f8f8-293">Дополнительные сведения см. в статье [Ведущий процесс (vshost.exe)](http://msdn.microsoft.com/library/c6b9e2be-f18d-4d75-ac52-56d55784734b).</span><span class="sxs-lookup"><span data-stu-id="7f8f8-293">For more information, see [Hosting Process (vshost.exe)](http://msdn.microsoft.com/library/c6b9e2be-f18d-4d75-ac52-56d55784734b).</span></span>  
  
-   <span data-ttu-id="7f8f8-294">Один значок каждого окна, который задается параметром <xref:System.Windows.Window.Icon%2A>.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-294">One icon per window that is specified by setting <xref:System.Windows.Window.Icon%2A>.</span></span> <span data-ttu-id="7f8f8-295">Для каждого окна этот значок используется в строке заголовка кнопке панели задач и его элемент списка выбора приложения ALT TAB.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-295">For each window, this icon is used in its title bar, its task bar button, and in its ALT-TAB application selection list entry.</span></span>  
  
 <span data-ttu-id="7f8f8-296">Объект [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] окно всегда отображается значок.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-296">A [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] window always displays an icon.</span></span> <span data-ttu-id="7f8f8-297">Если значение не указано, задав <xref:System.Windows.Window.Icon%2A>, [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] выбирает значок для отображения на основе следующих правил:</span><span class="sxs-lookup"><span data-stu-id="7f8f8-297">When one is not provided by setting <xref:System.Windows.Window.Icon%2A>, [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] chooses an icon to display based on the following rules:</span></span>  
  
1.  <span data-ttu-id="7f8f8-298">Используйте значок сборки, если указан.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-298">Use the assembly icon, if specified.</span></span>  
  
2.  <span data-ttu-id="7f8f8-299">Если значок сборки не указано, используется значение по умолчанию [!INCLUDE[TLA#tla_win](~/includes/tlasharptla-win-md.md)] значок.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-299">If the assembly icon is not specified, use the default [!INCLUDE[TLA#tla_win](~/includes/tlasharptla-win-md.md)] icon.</span></span>  
  
 <span data-ttu-id="7f8f8-300">Если вы используете <xref:System.Windows.Window.Icon%2A> Чтобы задать значок пользовательского окна, можно восстановить значок приложения по умолчанию, установив <xref:System.Windows.Window.Icon%2A> для `null`.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-300">If you use <xref:System.Windows.Window.Icon%2A> to specify a custom window icon, you can restore the default application icon by setting <xref:System.Windows.Window.Icon%2A> to `null`.</span></span>  
  
 <span data-ttu-id="7f8f8-301">Один значок может использоваться различными способами в [!INCLUDE[TLA#tla_mswin](~/includes/tlasharptla-mswin-md.md)], включая показывается в строке заголовка окна, на панели задач для окна, список выбора файлов ALT + TAB.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-301">A single icon can be used in a variety of ways in [!INCLUDE[TLA#tla_mswin](~/includes/tlasharptla-mswin-md.md)], including being shown in the title bar of a window, the task bar for a window, the ALT+TAB file selection list.</span></span> <span data-ttu-id="7f8f8-302">Каждый из них будет отображаться значок разного размера; значок 16 x 16 пикселей отображается в строке заголовка окна и на панели задач, а значок 32 x 32 пикселей в списке выбора файлов ALT + TAB.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-302">Each of these shows the icon using a different size; a 16x16 pixel icon is displayed in the title bar of a window and in the task bar, while a 32x32 pixel icon is displayed in the ALT+TAB file selection list.</span></span> <span data-ttu-id="7f8f8-303">Некоторые приложения, например [!INCLUDE[TLA#tla_winexpl](~/includes/tlasharptla-winexpl-md.md)], предоставляют **представление** меню, в котором можно выбрать размер значка, который вы хотите просмотреть.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-303">Some applications, like [!INCLUDE[TLA#tla_winexpl](~/includes/tlasharptla-winexpl-md.md)], provide a **View** menu that allows you to choose the size of the icon you'd like to view.</span></span>  
  
 <span data-ttu-id="7f8f8-304">Чтобы ориентироваться на различные размеры, файл значка состоит из одного или нескольких реальных значков, каждый из которых представляет версии значка, который предназначен для определенной глубины размер и цвет.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-304">To cater to the various display sizes, an icon file is composed of one or more actual icons where each one represents a version of the icon that targets a specific size and color depth.</span></span> <span data-ttu-id="7f8f8-305">Например один значок может иметь только один значок 16 x 16 точек с 16 цветами, а другой — 16 x 16 точек и 32 x 32 пикселя значков с 16 цветами и 256 цветов.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-305">For example, one icon may only have a single 16x16 pixel icon with 16 colors, while another may contain 16x16 pixel and 32x32 pixel icons with both 16 colors and 256 colors.</span></span>  
  
 <span data-ttu-id="7f8f8-306">Если существуют значки всех возможных размеров и цветов в файл значка <xref:System.Windows.Window> будет использовать соответствующий значок.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-306">If icons for all possible sizes and color depths exist within an icon file, <xref:System.Windows.Window> will use the appropriate icon.</span></span> <span data-ttu-id="7f8f8-307">Если файл значка содержит только подмножество всех возможных значков <xref:System.Windows.Window> использует Далее наиболее соответствующий значок в порядке уменьшения размеров и цветов.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-307">If an icon file contains only a subset of all the possible icons, <xref:System.Windows.Window> uses the next most appropriate icon in order of decreasing sizes and color depth.</span></span>  
  
 <span data-ttu-id="7f8f8-308">Результатом является то, что значок будет всегда использоваться <xref:System.Windows.Window>, несмотря на то, что значок, используемый целевыми могут быть не требуется глубину размер и цвет.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-308">The result is that an icon will always be used by <xref:System.Windows.Window>, although the icon used may not target the required size and color depth.</span></span> <span data-ttu-id="7f8f8-309">Значок 16 x 16 точек с 16 цветами может использоваться для отображения как значок 32 x 32 точки с 256 цветами.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-309">For example, a 16x16 pixel icon with 16 colors may be used for display as a 32x32 pixel icon with 256 colors.</span></span> <span data-ttu-id="7f8f8-310">Это может вызвать нежелательные визуальные эффекты, такие как пиксиляцию, но можно избежать, создавая значки всех целевых размеров и цветов.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-310">This can cause undesirable visual effects, such as pixilation, but may be avoided by creating icons for all targeted sizes and color depths.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7f8f8-311">Не удается задать или получить значение этого свойства, если окно размещено в браузере.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-311">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowIcon"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="7f8f8-312">Сведения о свойстве зависимостей</span><span class="sxs-lookup"><span data-stu-id="7f8f8-312">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7f8f8-313">Поле идентификатора</span><span class="sxs-lookup"><span data-stu-id="7f8f8-313">Identifier field</span></span>|<xref:System.Windows.Window.IconProperty>|  
|<span data-ttu-id="7f8f8-314">Значение свойства метаданных `true`</span><span class="sxs-lookup"><span data-stu-id="7f8f8-314">Metadata properties set to `true`</span></span>|<span data-ttu-id="7f8f8-315">Нет</span><span class="sxs-lookup"><span data-stu-id="7f8f8-315">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="7f8f8-316">В следующем примере показано, как задать значок окна.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-316">The following example shows how to set a window icon.</span></span>  
  
 [!code-xaml[WindowIconSnippets#WindowIconSetXAML](~/samples/snippets/xaml/VS_Snippets_Wpf/WindowIconSnippets/XAML/MainWindow.xaml#windowiconsetxaml)]  
  
 [!code-csharp[WindowIconSnippets#SetWindowIconInCode](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowIconSnippets/CSharp/MainWindow.xaml.cs#setwindowiconincode)]
 [!code-vb[WindowIconSnippets#SetWindowIconInCode](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowIconSnippets/visualbasic/mainwindow.xaml.vb#setwindowiconincode)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="7f8f8-317">для разрешения для выбора значка.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-317">for permission to set the icon.</span>
          </span>
          <span data-ttu-id="7f8f8-318">Связанное перечисление: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-318">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="IconProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IconProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IconProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.IconProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IconProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IconProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7f8f8-319">Идентифицирует свойство зависимостей <see cref="P:System.Windows.Window.Icon" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-319">Identifies the <see cref="P:System.Windows.Window.Icon" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsActive">
      <MemberSignature Language="C#" Value="public bool IsActive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsActive" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.IsActive" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsActive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsActive { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7f8f8-320">Возвращает значение, указывающее, активно ли окно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-320">Gets a value that indicates whether the window is active.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7f8f8-321">
            <see langword="true" />, если окно активно; в противном случае — <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-321">
              <see langword="true" /> if the window is active; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="7f8f8-322">Значение по умолчанию: <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-322">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8f8-323">Активное окно пользователя текущее окно переднего плана и имеет фокус, принятое active внешний вид заголовка окна.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-323">An active window is the user's current foreground window and has the focus, which is signified by the active appearance of the title bar.</span></span> <span data-ttu-id="7f8f8-324">Активного окна также будет самый верхний всех окон верхнего уровня, в которых не задано явно <xref:System.Windows.Window.Topmost%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-324">An active window will also be the top-most of all top-level windows that don't explicitly set the <xref:System.Windows.Window.Topmost%2A> property.</span></span>  
  
<a name="dependencyPropertyInfo_WindowIsActive"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="7f8f8-325">Сведения о свойстве зависимостей</span><span class="sxs-lookup"><span data-stu-id="7f8f8-325">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7f8f8-326">Поле идентификатора</span><span class="sxs-lookup"><span data-stu-id="7f8f8-326">Identifier field</span></span>|<xref:System.Windows.Window.IsActiveProperty>|  
|<span data-ttu-id="7f8f8-327">Значение свойства метаданных `true`</span><span class="sxs-lookup"><span data-stu-id="7f8f8-327">Metadata properties set to `true`</span></span>|<span data-ttu-id="7f8f8-328">Нет</span><span class="sxs-lookup"><span data-stu-id="7f8f8-328">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Window.Activate" />
        <altmember cref="E:System.Windows.Window.Activated" />
        <altmember cref="E:System.Windows.Window.Deactivated" />
      </Docs>
    </Member>
    <Member MemberName="IsActiveProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsActiveProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsActiveProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.IsActiveProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsActiveProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsActiveProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7f8f8-329">Идентифицирует свойство зависимостей <see cref="P:System.Windows.Window.IsActive" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-329">Identifies the <see cref="P:System.Windows.Window.IsActive" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Left">
      <MemberSignature Language="C#" Value="public double Left { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Left" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.Left" />
      <MemberSignature Language="VB.NET" Value="Public Property Left As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Left { double get(); void set(double value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Windows.LengthConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7f8f8-330">Возвращает или задает позицию левого края окна относительно рабочего стола.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-330">Gets or sets the position of the window's left edge, in relation to the desktop.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7f8f8-331">Позиция левого края окна в логических единицах (1/96 дюйма).</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-331">The position of the window's left edge, in logical units (1/96th of an inch).</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8f8-332">Когда <xref:System.Windows.Window> свернуто или развернуто, это значение соответствует левого края восстановления точка для <xref:System.Windows.Window>.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-332">When the <xref:System.Windows.Window> is maximized or minimized, this value represents the left edge of the restore point for the <xref:System.Windows.Window>.</span></span>  
  
 <span data-ttu-id="7f8f8-333">Это свойство нельзя задать с помощью стиля.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-333">This property cannot be set through a style.</span></span>  
  
 <span data-ttu-id="7f8f8-334">Если вы не укажете значение, <xref:System.Windows.Window.Left%2A> присвоено значение по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-334">If you do not specify a value, <xref:System.Windows.Window.Left%2A> is set to the system default value.</span></span> <span data-ttu-id="7f8f8-335">Можно также указать значение по умолчанию, задав <xref:System.Windows.Window.Left%2A> для <xref:System.Double.NaN>.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-335">You can also specify the system default value by setting <xref:System.Windows.Window.Left%2A> to <xref:System.Double.NaN>.</span></span> <span data-ttu-id="7f8f8-336">Ни <xref:System.Double.NegativeInfinity> , ни <xref:System.Double.PositiveInfinity> является допустимым значением для <xref:System.Windows.Window.Left%2A>.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-336">Neither <xref:System.Double.NegativeInfinity> nor <xref:System.Double.PositiveInfinity> is a valid value for <xref:System.Windows.Window.Left%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7f8f8-337">Не удается задать или получить значение этого свойства, если окно размещено в браузере.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-337">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowLeft"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="7f8f8-338">Сведения о свойстве зависимостей</span><span class="sxs-lookup"><span data-stu-id="7f8f8-338">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7f8f8-339">Поле идентификатора</span><span class="sxs-lookup"><span data-stu-id="7f8f8-339">Identifier field</span></span>|<xref:System.Windows.Window.LeftProperty>|  
|<span data-ttu-id="7f8f8-340">Значение свойства метаданных `true`</span><span class="sxs-lookup"><span data-stu-id="7f8f8-340">Metadata properties set to `true`</span></span>|<span data-ttu-id="7f8f8-341">Нет</span><span class="sxs-lookup"><span data-stu-id="7f8f8-341">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Window.Top" />
      </Docs>
    </Member>
    <Member MemberName="LeftProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty LeftProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty LeftProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.LeftProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LeftProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ LeftProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7f8f8-342">Идентифицирует свойство зависимостей <see cref="P:System.Windows.Window.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-342">Identifies the <see cref="P:System.Windows.Window.Left" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocationChanged">
      <MemberSignature Language="C#" Value="public event EventHandler LocationChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler LocationChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.LocationChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LocationChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ LocationChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7f8f8-343">Происходит при изменении местоположения окна.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-343">Occurs when the window's location changes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8f8-344">Расположение окна изменяется, когда:</span><span class="sxs-lookup"><span data-stu-id="7f8f8-344">A window's location changes when:</span></span>  
  
-   <span data-ttu-id="7f8f8-345">Пользователь перемещает окно, перетащив заголовок окна.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-345">A user moves a window by dragging it with the window's title bar.</span></span>  
  
-   <span data-ttu-id="7f8f8-346">Окно перемещается после <xref:System.Windows.Window.DragMove%2A> вызывается.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-346">A window is moved after <xref:System.Windows.Window.DragMove%2A> is called.</span></span>  
  
-   <span data-ttu-id="7f8f8-347">Либо <xref:System.Windows.Window.Left%2A> или <xref:System.Windows.Window.Top%2A> свойству программными средствами.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-347">Either the <xref:System.Windows.Window.Left%2A> or <xref:System.Windows.Window.Top%2A> property is set programmatically.</span></span>  
  
-   <span data-ttu-id="7f8f8-348">**Переместить** выбранного пункта меню окна системного меню.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-348">The **Move** menu item of a window's System menu is chosen.</span></span>  
  
-   <span data-ttu-id="7f8f8-349"><xref:System.Windows.Window.WindowState%2A> Изменить свойство.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-349">The <xref:System.Windows.Window.WindowState%2A> property is changed.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Window.Left" />
        <altmember cref="P:System.Windows.Window.Top" />
        <altmember cref="P:System.Windows.Window.RestoreBounds" />
      </Docs>
    </Member>
    <Member MemberName="LogicalChildren">
      <MemberSignature Language="C#" Value="protected internal override System.Collections.IEnumerator LogicalChildren { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IEnumerator LogicalChildren" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.LogicalChildren" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides ReadOnly Property LogicalChildren As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual property System::Collections::IEnumerator ^ LogicalChildren { System::Collections::IEnumerator ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7f8f8-350">Возвращает перечислитель для логических дочерних элементов окна.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-350">Gets an enumerator for a window's logical child elements.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7f8f8-351">Перечислитель <see cref="T:System.Collections.IEnumerator" /> для логических дочерних элементов окна.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-351">An <see cref="T:System.Collections.IEnumerator" /> a window's logical child elements.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.FrameworkElement.LogicalChildren" />
      </Docs>
    </Member>
    <Member MemberName="MeasureOverride">
      <MemberSignature Language="C#" Value="protected override System.Windows.Size MeasureOverride (System.Windows.Size availableSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype System.Windows.Size MeasureOverride(valuetype System.Windows.Size availableSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.MeasureOverride(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function MeasureOverride (availableSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Size MeasureOverride(System::Windows::Size availableSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="availableSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="availableSize">
          <span data-ttu-id="7f8f8-352">Объект <see cref="T:System.Windows.Size" />, отражающий доступный размер, который данное окно может выделить своим дочерним окнам.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-352">A <see cref="T:System.Windows.Size" /> that reflects the available size that this window can give to the child.</span>
          </span>
          <span data-ttu-id="7f8f8-353">Можно задать бесконечное значение, указав, что окно будет масштабироваться в соответствии с любым содержимым.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-353">Infinity can be given as a value to indicate that the window will size to whatever content is available.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f8f8-354">Переопределив данный метод, можно измерить размер окна.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-354">Override this method to measure the size of a window.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7f8f8-355">Объект <see cref="T:System.Windows.Size" />, отражающий размер, потребности в котором данное окно определяет во время структурирования, основываясь на вычисленных размерах дочерних окон.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-355">A <see cref="T:System.Windows.Size" /> that reflects the size that this window determines it needs during layout, based on its calculations of children's sizes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8f8-356"><xref:System.Windows.Window.MeasureOverride%2A> не вызывается, когда <xref:System.Windows.UIElement.Visibility%2A> свойство имеет значение <xref:System.Windows.Visibility.Collapsed>.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-356"><xref:System.Windows.Window.MeasureOverride%2A> is not called when the <xref:System.Windows.UIElement.Visibility%2A> property has a value of <xref:System.Windows.Visibility.Collapsed>.</span></span> <span data-ttu-id="7f8f8-357">Если значение <xref:System.Windows.UIElement.Visibility%2A> равно либо <xref:System.Windows.Visibility.Hidden> или <xref:System.Windows.Visibility.Visible>, <xref:System.Windows.Window.MeasureOverride%2A> вызывается.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-357">If the value of the <xref:System.Windows.UIElement.Visibility%2A> property is either <xref:System.Windows.Visibility.Hidden> or <xref:System.Windows.Visibility.Visible>, <xref:System.Windows.Window.MeasureOverride%2A> is called.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7f8f8-358">Когда либо <xref:System.Windows.Window.Show%2A> или <xref:System.Windows.Window.ShowDialog%2A> , называются <xref:System.Windows.UIElement.Visibility%2A> свойство <xref:System.Windows.Window> равно <xref:System.Windows.Visibility.Visible>.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-358">When either <xref:System.Windows.Window.Show%2A> or <xref:System.Windows.Window.ShowDialog%2A> are called, the <xref:System.Windows.UIElement.Visibility%2A> property of a <xref:System.Windows.Window> is set to <xref:System.Windows.Visibility.Visible>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />
        <altmember cref="M:System.Windows.Window.ArrangeOverride(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="OnActivated">
      <MemberSignature Language="C#" Value="protected virtual void OnActivated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnActivated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnActivated(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnActivated (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnActivated(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="7f8f8-359">Объект класса <see cref="T:System.EventArgs" />, содержащий данные события.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-359">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f8f8-360">Вызывает событие <see cref="E:System.Windows.Window.Activated" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-360">Raises the <see cref="E:System.Windows.Window.Activated" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8f8-361">Метод <xref:System.Windows.Window.OnActivated%2A> формирует событие <xref:System.Windows.Window.Activated>.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-361"><xref:System.Windows.Window.OnActivated%2A> raises the <xref:System.Windows.Window.Activated> event.</span></span>  
  
 <span data-ttu-id="7f8f8-362">Тип, производный от <xref:System.Windows.Window> могут переопределять <xref:System.Windows.Window.OnActivated%2A>.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-362">A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnActivated%2A>.</span></span> <span data-ttu-id="7f8f8-363">Переопределенный метод должен вызвать метод <xref:System.Windows.Window.OnActivated%2A> базового класса, если <xref:System.Windows.Window.Activated> должен вызываться.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-363">The overridden method must call <xref:System.Windows.Window.OnActivated%2A> on the base class if <xref:System.Windows.Window.Activated> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Window.OnDeactivated(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnClosed">
      <MemberSignature Language="C#" Value="protected virtual void OnClosed (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnClosed(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnClosed(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnClosed (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnClosed(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="7f8f8-364">Объект класса <see cref="T:System.EventArgs" />, содержащий данные события.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-364">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f8f8-365">Вызывает событие <see cref="E:System.Windows.Window.Closed" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-365">Raises the <see cref="E:System.Windows.Window.Closed" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8f8-366">Метод <xref:System.Windows.Window.OnClosed%2A> формирует событие <xref:System.Windows.Window.Closed>.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-366"><xref:System.Windows.Window.OnClosed%2A> raises the <xref:System.Windows.Window.Closed> event.</span></span>  
  
 <span data-ttu-id="7f8f8-367">Тип, производный от <xref:System.Windows.Window> могут переопределять <xref:System.Windows.Window.OnClosed%2A>.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-367">A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnClosed%2A>.</span></span> <span data-ttu-id="7f8f8-368">Переопределенный метод должен вызвать метод <xref:System.Windows.Window.OnClosed%2A> базового класса, если <xref:System.Windows.Window.Closed> должен вызываться.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-368">The overridden method must call <xref:System.Windows.Window.OnClosed%2A> on the base class if <xref:System.Windows.Window.Closed> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Window.OnClosing(System.ComponentModel.CancelEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnClosing">
      <MemberSignature Language="C#" Value="protected virtual void OnClosing (System.ComponentModel.CancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnClosing(class System.ComponentModel.CancelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnClosing(System.ComponentModel.CancelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnClosing (e As CancelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnClosing(System::ComponentModel::CancelEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.CancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="7f8f8-369">Объект <see cref="T:System.ComponentModel.CancelEventArgs" />, содержащий данные события.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-369">A <see cref="T:System.ComponentModel.CancelEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f8f8-370">Вызывает событие <see cref="E:System.Windows.Window.Closing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-370">Raises the <see cref="E:System.Windows.Window.Closing" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8f8-371">Метод <xref:System.Windows.Window.OnClosing%2A> формирует событие <xref:System.Windows.Window.Closing>.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-371"><xref:System.Windows.Window.OnClosing%2A> raises the <xref:System.Windows.Window.Closing> event.</span></span>  
  
 <span data-ttu-id="7f8f8-372">Тип, производный от <xref:System.Windows.Window> могут переопределять <xref:System.Windows.Window.OnClosing%2A>.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-372">A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnClosing%2A>.</span></span> <span data-ttu-id="7f8f8-373">Переопределенный метод должен вызвать метод <xref:System.Windows.Window.OnClosing%2A> базового класса, если <xref:System.Windows.Window.Closing> должен вызываться.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-373">The overridden method must call <xref:System.Windows.Window.OnClosing%2A> on the base class if <xref:System.Windows.Window.Closing> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Window.OnClosed(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnContentChanged">
      <MemberSignature Language="C#" Value="protected override void OnContentChanged (object oldContent, object newContent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnContentChanged(object oldContent, object newContent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnContentChanged(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnContentChanged (oldContent As Object, newContent As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnContentChanged(System::Object ^ oldContent, System::Object ^ newContent);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldContent" Type="System.Object" />
        <Parameter Name="newContent" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="oldContent">
          <span data-ttu-id="7f8f8-374">Ссылка на корневой элемент старого дерева содержимого.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-374">A reference to the root of the old content tree.</span>
          </span>
        </param>
        <param name="newContent">
          <span data-ttu-id="7f8f8-375">Ссылка на корневой элемент нового дерева содержимого.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-375">A reference to the root of the new content tree.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f8f8-376">Вызывается при изменении свойства <see cref="P:System.Windows.Controls.ContentControl.Content" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-376">Called when the <see cref="P:System.Windows.Controls.ContentControl.Content" /> property changes.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnContentRendered">
      <MemberSignature Language="C#" Value="protected virtual void OnContentRendered (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContentRendered(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnContentRendered(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnContentRendered (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnContentRendered(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="7f8f8-377">Объект класса <see cref="T:System.EventArgs" />, содержащий данные события.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-377">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f8f8-378">Вызывает событие <see cref="E:System.Windows.Window.ContentRendered" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-378">Raises the <see cref="E:System.Windows.Window.ContentRendered" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8f8-379">Метод <xref:System.Windows.Window.OnContentRendered%2A> формирует событие <xref:System.Windows.Window.ContentRendered>.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-379"><xref:System.Windows.Window.OnContentRendered%2A> raises the <xref:System.Windows.Window.ContentRendered> event.</span></span>  
  
 <span data-ttu-id="7f8f8-380">Тип, производный от <xref:System.Windows.Window> могут переопределять <xref:System.Windows.Window.OnContentRendered%2A>.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-380">A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnContentRendered%2A>.</span></span> <span data-ttu-id="7f8f8-381">Переопределенный метод должен вызвать метод <xref:System.Windows.Window.OnContentRendered%2A> базового класса, если <xref:System.Windows.Window.ContentRendered> должен вызываться.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-381">The overridden method must call <xref:System.Windows.Window.OnContentRendered%2A> on the base class if <xref:System.Windows.Window.ContentRendered> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCreateAutomationPeer">
      <MemberSignature Language="C#" Value="protected override System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnCreateAutomationPeer" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnCreateAutomationPeer () As AutomationPeer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Automation::Peers::AutomationPeer ^ OnCreateAutomationPeer();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Peers.AutomationPeer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7f8f8-382">Создает и возвращает объект <see cref="T:System.Windows.Automation.Peers.WindowAutomationPeer" /> для этого объекта <see cref="T:System.Windows.Window" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-382">Creates and returns a <see cref="T:System.Windows.Automation.Peers.WindowAutomationPeer" /> object for this <see cref="T:System.Windows.Window" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7f8f8-383">Объект <see cref="T:System.Windows.Automation.Peers.WindowAutomationPeer" /> для этого объекта <see cref="T:System.Windows.Window" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-383">A <see cref="T:System.Windows.Automation.Peers.WindowAutomationPeer" /> object for this <see cref="T:System.Windows.Window" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8f8-384">Этот метод переопределяет метод <xref:System.Windows.ContentElement.OnCreateAutomationPeer%2A>.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-384">This method overrides <xref:System.Windows.ContentElement.OnCreateAutomationPeer%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDeactivated">
      <MemberSignature Language="C#" Value="protected virtual void OnDeactivated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDeactivated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnDeactivated(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDeactivated (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDeactivated(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="7f8f8-385">Объект класса <see cref="T:System.EventArgs" />, содержащий данные события.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-385">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f8f8-386">Вызывает событие <see cref="E:System.Windows.Window.Deactivated" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-386">Raises the <see cref="E:System.Windows.Window.Deactivated" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8f8-387">Метод <xref:System.Windows.Window.OnDeactivated%2A> формирует событие <xref:System.Windows.Window.Deactivated>.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-387"><xref:System.Windows.Window.OnDeactivated%2A> raises the <xref:System.Windows.Window.Deactivated> event.</span></span>  
  
 <span data-ttu-id="7f8f8-388">Тип, производный от <xref:System.Windows.Window> могут переопределять <xref:System.Windows.Window.OnDeactivated%2A>.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-388">A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnDeactivated%2A>.</span></span> <span data-ttu-id="7f8f8-389">Переопределенный метод должен вызвать метод <xref:System.Windows.Window.OnDeactivated%2A> базового класса, если <xref:System.Windows.Window.Deactivated> должен вызываться.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-389">The overridden method must call <xref:System.Windows.Window.OnDeactivated%2A> on the base class if <xref:System.Windows.Window.Deactivated> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Window.OnActivated(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnDpiChanged">
      <MemberSignature Language="C#" Value="protected override void OnDpiChanged (System.Windows.DpiScale oldDpi, System.Windows.DpiScale newDpi);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnDpiChanged(valuetype System.Windows.DpiScale oldDpi, valuetype System.Windows.DpiScale newDpi) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnDpiChanged(System.Windows.DpiScale,System.Windows.DpiScale)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnDpiChanged (oldDpi As DpiScale, newDpi As DpiScale)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnDpiChanged(System::Windows::DpiScale oldDpi, System::Windows::DpiScale newDpi);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldDpi" Type="System.Windows.DpiScale" />
        <Parameter Name="newDpi" Type="System.Windows.DpiScale" />
      </Parameters>
      <Docs>
        <param name="oldDpi">
          <span data-ttu-id="7f8f8-390">Предыдущий параметр масштабирования.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-390">The previous DPI scale setting.</span>
          </span>
        </param>
        <param name="newDpi">
          <span data-ttu-id="7f8f8-391">Новый параметр масштабирования.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-391">The new DPI scale setting.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f8f8-392">Вызывается, когда изменяется параметр "точек на дюйм", по которому определяется разрешение окна.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-392">Called when the DPI at which this window is rendered changes.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnLocationChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnLocationChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLocationChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnLocationChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLocationChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLocationChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="7f8f8-393">Объект класса <see cref="T:System.EventArgs" />, содержащий данные события.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-393">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f8f8-394">Вызывает событие <see cref="E:System.Windows.Window.LocationChanged" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-394">Raises the <see cref="E:System.Windows.Window.LocationChanged" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8f8-395">Метод <xref:System.Windows.Window.OnLocationChanged%2A> формирует событие <xref:System.Windows.Window.LocationChanged>.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-395"><xref:System.Windows.Window.OnLocationChanged%2A> raises the <xref:System.Windows.Window.LocationChanged> event.</span></span>  
  
 <span data-ttu-id="7f8f8-396">Тип, производный от <xref:System.Windows.Window> могут переопределять <xref:System.Windows.Window.OnLocationChanged%2A>.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-396">A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnLocationChanged%2A>.</span></span> <span data-ttu-id="7f8f8-397">Переопределенный метод должен вызвать метод <xref:System.Windows.Window.OnLocationChanged%2A> базового класса, если <xref:System.Windows.Window.LocationChanged> должен вызываться.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-397">The overridden method must call <xref:System.Windows.Window.OnLocationChanged%2A> on the base class if <xref:System.Windows.Window.LocationChanged> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Window.Left" />
        <altmember cref="P:System.Windows.Window.Top" />
      </Docs>
    </Member>
    <Member MemberName="OnManipulationBoundaryFeedback">
      <MemberSignature Language="C#" Value="protected override void OnManipulationBoundaryFeedback (System.Windows.Input.ManipulationBoundaryFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnManipulationBoundaryFeedback(class System.Windows.Input.ManipulationBoundaryFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnManipulationBoundaryFeedback (e As ManipulationBoundaryFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnManipulationBoundaryFeedback(System::Windows::Input::ManipulationBoundaryFeedbackEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationBoundaryFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="7f8f8-398">Данные для события.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-398">The data for the event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f8f8-399">Вызывается, когда происходит событие <see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-399">Called when the <see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" /> event occurs.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8f8-400">Эта реализация не изменяет состояние обработки ( <xref:System.Windows.RoutedEventArgs.Handled%2A> свойство) из <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> данные события.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-400">This implementation does not change the handled state (the <xref:System.Windows.RoutedEventArgs.Handled%2A> property) of the <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> event data.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="7f8f8-401">При переопределении <see cref="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)" />, всегда вызывать базовую реализацию вашей <see cref="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)" /> реализации.</span>
            <span class="sxs-lookup">
              <span data-stu-id="7f8f8-401">If you override <see cref="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)" />, always call the base implementation in your <see cref="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)" /> implementation.</span>
            </span>
            <span data-ttu-id="7f8f8-402">Не удалось вызвать базовую реализацию базовые классы не смогут обрабатывать событие, которое может изменить поведение во время выполнения конечного класса.</span>
            <span class="sxs-lookup">
              <span data-stu-id="7f8f8-402">Failure to call the base implementation prevents base classes from handling the event, which might change the run-time behavior of the final class.</span>
            </span>
            <span data-ttu-id="7f8f8-403">В зависимости от требований, можно вызвать базовую реализацию до или после специальной обработки.</span>
            <span class="sxs-lookup">
              <span data-stu-id="7f8f8-403">You can call the base implementation either before or after your special handling, depending on your requirements.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnSourceInitialized">
      <MemberSignature Language="C#" Value="protected virtual void OnSourceInitialized (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSourceInitialized(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnSourceInitialized(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSourceInitialized (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSourceInitialized(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="7f8f8-404">Объект класса <see cref="T:System.EventArgs" />, содержащий данные события.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-404">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f8f8-405">Вызывает событие <see cref="E:System.Windows.Window.SourceInitialized" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-405">Raises the <see cref="E:System.Windows.Window.SourceInitialized" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8f8-406">Метод <xref:System.Windows.Window.OnSourceInitialized%2A> формирует событие <xref:System.Windows.Window.SourceInitialized>.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-406"><xref:System.Windows.Window.OnSourceInitialized%2A> raises the <xref:System.Windows.Window.SourceInitialized> event.</span></span>  
  
 <span data-ttu-id="7f8f8-407">Тип, производный от <xref:System.Windows.Window> могут переопределять <xref:System.Windows.Window.OnSourceInitialized%2A>.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-407">A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnSourceInitialized%2A>.</span></span> <span data-ttu-id="7f8f8-408">Переопределенный метод должен вызвать метод <xref:System.Windows.Window.OnSourceInitialized%2A> базового класса, если <xref:System.Windows.Window.SourceInitialized> должен вызываться.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-408">The overridden method must call <xref:System.Windows.Window.OnSourceInitialized%2A> on the base class if <xref:System.Windows.Window.SourceInitialized> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnStateChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnStateChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStateChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnStateChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStateChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStateChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="7f8f8-409">Объект класса <see cref="T:System.EventArgs" />, содержащий данные события.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-409">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f8f8-410">Вызывает событие <see cref="E:System.Windows.Window.StateChanged" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-410">Raises the <see cref="E:System.Windows.Window.StateChanged" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8f8-411">Метод <xref:System.Windows.Window.OnStateChanged%2A> формирует событие <xref:System.Windows.Window.StateChanged>.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-411"><xref:System.Windows.Window.OnStateChanged%2A> raises the <xref:System.Windows.Window.StateChanged> event.</span></span>  
  
 <span data-ttu-id="7f8f8-412">Тип, производный от <xref:System.Windows.Window> могут переопределять <xref:System.Windows.Window.OnStateChanged%2A>.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-412">A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnStateChanged%2A>.</span></span> <span data-ttu-id="7f8f8-413">Переопределенный метод должен вызвать метод <xref:System.Windows.Window.OnStateChanged%2A> базового класса, если <xref:System.Windows.Window.StateChanged> должен вызываться.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-413">The overridden method must call <xref:System.Windows.Window.OnStateChanged%2A> on the base class if <xref:System.Windows.Window.StateChanged> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnVisualParentChanged">
      <MemberSignature Language="C#" Value="protected internal override sealed void OnVisualParentChanged (System.Windows.DependencyObject oldParent);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnVisualParentChanged(class System.Windows.DependencyObject oldParent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides NotOverridable Sub OnVisualParentChanged (oldParent As DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnVisualParentChanged(System::Windows::DependencyObject ^ oldParent);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldParent" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="oldParent">
          <span data-ttu-id="7f8f8-414">Предыдущий родительский элемент.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-414">The previous parent.</span>
          </span>
          <span data-ttu-id="7f8f8-415">Устанавливается на null, если у объекта <see cref="T:System.Windows.DependencyObject" /> не было предыдущего родителя.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-415">Set to null if the <see cref="T:System.Windows.DependencyObject" /> did not have a previous parent.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7f8f8-416">Вызывается при изменении родителя окна.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-416">Called when the parent of the window is changed.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)" />
      </Docs>
    </Member>
    <Member MemberName="OwnedWindows">
      <MemberSignature Language="C#" Value="public System.Windows.WindowCollection OwnedWindows { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.WindowCollection OwnedWindows" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.OwnedWindows" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OwnedWindows As WindowCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::WindowCollection ^ OwnedWindows { System::Windows::WindowCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WindowCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7f8f8-417">Возвращает коллекцию окон, владельцем которых является данное окно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-417">Gets a collection of windows for which this window is the owner.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7f8f8-418">Коллекция <see cref="T:System.Windows.WindowCollection" />, содержащая ссылки на окна, владельцем которых является данное окно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-418">A <see cref="T:System.Windows.WindowCollection" /> that contains references to the windows for which this window is the owner.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8f8-419">Собственное окно — это которого <xref:System.Windows.Window.Owner%2A> свойству со ссылкой на другое окно, которая называется окна-владельца.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-419">An owned window is one whose <xref:System.Windows.Window.Owner%2A> property is set with a reference to another window, which is known as the owner window.</span></span> <span data-ttu-id="7f8f8-420">Чтобы найти все окна, которыми владеет окно-владелец, можно перечислить <xref:System.Windows.WindowCollection> , возвращаемый <xref:System.Windows.Window.OwnedWindows%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-420">To find all the windows that an owner window owns, you can enumerate <xref:System.Windows.WindowCollection> that is returned by the <xref:System.Windows.Window.OwnedWindows%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f8f8-421">В следующем примере показано, как перечислить <xref:System.Windows.Window.OwnedWindows%2A>.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-421">The following example shows how to enumerate <xref:System.Windows.Window.OwnedWindows%2A>.</span></span>  
  
 [!code-csharp[WindowOwnerOwnedWindowsSnippets#GetWindowOwnedWindowsCODE](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowOwnerOwnedWindowsSnippets/CSharp/MainWindow.xaml.cs#getwindowownedwindowscode)]
 [!code-vb[WindowOwnerOwnedWindowsSnippets#GetWindowOwnedWindowsCODE](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowOwnerOwnedWindowsSnippets/visualbasic/mainwindow.xaml.vb#getwindowownedwindowscode)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Owner">
      <MemberSignature Language="C#" Value="public System.Windows.Window Owner { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Window Owner" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.Owner" />
      <MemberSignature Language="VB.NET" Value="Public Property Owner As Window" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Window ^ Owner { System::Windows::Window ^ get(); void set(System::Windows::Window ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Window</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7f8f8-422">Возвращает или задает окно <see cref="T:System.Windows.Window" />, которое владеет данным окном <see cref="T:System.Windows.Window" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-422">Gets or sets the <see cref="T:System.Windows.Window" /> that owns this <see cref="T:System.Windows.Window" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7f8f8-423">Объект <see cref="T:System.Windows.Window" />, представляющий владельца данного объекта <see cref="T:System.Windows.Window" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-423">A <see cref="T:System.Windows.Window" /> object that represents the owner of this <see cref="T:System.Windows.Window" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8f8-424">При открытии дочернего окна родительское окно, вызвав <xref:System.Windows.Window.ShowDialog%2A>, явную связь устанавливается между родительским и дочерним окнами.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-424">When a child window is opened by a parent window by calling <xref:System.Windows.Window.ShowDialog%2A>, an implicit relationship is established between both parent and child window.</span></span> <span data-ttu-id="7f8f8-425">Эта связь накладывает определенное поведение, в том числе по отношению к минимуму, разворачивания и восстановления.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-425">This relationship enforces certain behaviors, including with respect to minimizing, maximizing, and restoring.</span></span>  
  
 <span data-ttu-id="7f8f8-426">При создании дочернего окна родительское окно, вызвав <xref:System.Windows.Window.Show%2A>, однако, дочернее окно не имеет связи с родительским окном.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-426">When a child window is created by a parent window by calling <xref:System.Windows.Window.Show%2A>, however, the child window does not have a relationship with the parent window.</span></span> <span data-ttu-id="7f8f8-427">Это означает следующее.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-427">This means that:</span></span>  
  
-   <span data-ttu-id="7f8f8-428">Дочернее окно не имеет ссылки на родительском окне.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-428">The child window does not have a reference to the parent window.</span></span>  
  
-   <span data-ttu-id="7f8f8-429">Поведение дочернего окна не зависит от поведения родительского окна. либо окна может охватывать другого или свести к минимуму, разворачиваться и восстанавливаться независимо от другого.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-429">The behavior of the child window is not dependent on the behavior of the parent window; either window can cover the other, or be minimized, maximized, and restored independently of the other.</span></span>  
  
 <span data-ttu-id="7f8f8-430">Чтобы можно было создать связь между дочерним и родительского окна, <xref:System.Windows.Window> поддерживает понятие владения.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-430">To allow you to create a relationship between a child window and a parent window, <xref:System.Windows.Window> supports the notion of ownership.</span></span> <span data-ttu-id="7f8f8-431">Владение устанавливается при <xref:System.Windows.Window.Owner%2A> окна (собственного окна) является свойство со ссылкой на другое окно (окно-владелец).</span><span class="sxs-lookup"><span data-stu-id="7f8f8-431">Ownership is established when the <xref:System.Windows.Window.Owner%2A> property of a window (the owned window) is set with a reference to another window (the owner window).</span></span>  
  
 <span data-ttu-id="7f8f8-432">После установления этой связи проявляется следующее поведение:</span><span class="sxs-lookup"><span data-stu-id="7f8f8-432">Once this relationship is established, the following behaviors are exhibited:</span></span>  
  
-   <span data-ttu-id="7f8f8-433">Если окно-владелец сворачивается, все его собственные окна также сворачиваются.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-433">If an owner window is minimized, all its owned windows are minimized as well.</span></span>  
  
-   <span data-ttu-id="7f8f8-434">Если собственное окно сворачивается, его владелец не сводится к минимуму.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-434">If an owned window is minimized, its owner is not minimized.</span></span>  
  
-   <span data-ttu-id="7f8f8-435">Если окно-владелец развернуто, окна-владельца и его собственные окна восстанавливаются.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-435">If an owner window is maximized, both the owner window and its owned windows are restored.</span></span>  
  
-   <span data-ttu-id="7f8f8-436">Окно-владелец никогда не может перекрывать собственное окно.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-436">An owner window can never cover an owned window.</span></span>  
  
-   <span data-ttu-id="7f8f8-437">Принадлежащий windows, которые не были открыты с помощью <xref:System.Windows.Window.ShowDialog%2A> не модальным.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-437">Owned windows that were not opened using <xref:System.Windows.Window.ShowDialog%2A> are not modal.</span></span> <span data-ttu-id="7f8f8-438">Пользователь по-прежнему могут взаимодействовать с окна-владельца.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-438">The user can still interact with the owner window.</span></span>  
  
-   <span data-ttu-id="7f8f8-439">Если закрыть окно-владелец, его собственные окна также будут закрыты.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-439">If you close an owner window, its owned windows are also closed.</span></span>  
  
-   <span data-ttu-id="7f8f8-440">Если собственное окно был открыт с помощью окна его владельца <xref:System.Windows.Window.Show%2A>и владелец закрытия окна, принадлежащие окна <xref:System.Windows.Window.Closing> событие не происходит.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-440">If an owned window was opened by its owner window using <xref:System.Windows.Window.Show%2A>, and the owner window is closed, the owned window's <xref:System.Windows.Window.Closing> event is not raised.</span></span>  
  
 <span data-ttu-id="7f8f8-441">При открытии дочернего окна, вызвав <xref:System.Windows.Window.ShowDialog%2A>, также следует задать <xref:System.Windows.Window.Owner%2A> свойство дочернего окна.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-441">When you open a child window by calling <xref:System.Windows.Window.ShowDialog%2A>, you should also set the <xref:System.Windows.Window.Owner%2A> property of the child window.</span></span> <span data-ttu-id="7f8f8-442">Если этого не сделать, пользователи не будет доступной для восстановления дочернее окно и родительское окно, нажав кнопку панели задач.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-442">If you don't, then your users won't be able to restore both child window and parent window by pressing the task bar button.</span></span> <span data-ttu-id="7f8f8-443">Вместо этого нажав кнопку панели задач даст список окон, включая, дочерние и родительские окна для них требуется выделить; восстанавливается только выбранный период.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-443">Instead, pressing the task bar button will yield a list of windows, including both child and parent window, for them to select; only the selected window is restored.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7f8f8-444">Также следует задать <xref:System.Windows.Window.Owner%2A> свойства в окне, который открывается путем вызова <xref:System.Windows.Window.ShowDialog%2A> для обеспечения правильного поведения с.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-444">You should also set the <xref:System.Windows.Window.Owner%2A> property on a window that that is opened by calling <xref:System.Windows.Window.ShowDialog%2A> to ensure correct behavior with .</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7f8f8-445">Не удается задать или получить значение этого свойства, если окно размещено в браузере.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-445">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f8f8-446">Приведенный ниже показано, как для установления связи или принадлежащим владельца.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-446">The following example shows how to establish the owner/owned relationship.</span></span>  
  
 [!code-csharp[WindowOwnerOwnedWindowsSnippets#SetWindowOwnerCODE](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowOwnerOwnedWindowsSnippets/CSharp/MainWindow.xaml.cs#setwindowownercode)]
 [!code-vb[WindowOwnerOwnedWindowsSnippets#SetWindowOwnerCODE](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowOwnerOwnedWindowsSnippets/visualbasic/mainwindow.xaml.vb#setwindowownercode)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7f8f8-447">Окно пытается стать владельцем самого себя</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-447">A window tries to own itself</span>
          </span>
          <span data-ttu-id="7f8f8-448">- или -</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-448">-or-</span>
          </span>
          <span data-ttu-id="7f8f8-449">Два окна пытаются стать владельцами друг друга.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-449">Two windows try to own each other.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="7f8f8-450">Свойство <see cref="P:System.Windows.Window.Owner" /> установлено на видимое окно, отображенное методом <see cref="M:System.Windows.Window.ShowDialog" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-450">The <see cref="P:System.Windows.Window.Owner" /> property is set on a visible window shown using <see cref="M:System.Windows.Window.ShowDialog" /></span>
          </span>
          <span data-ttu-id="7f8f8-451">- или -</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-451">-or-</span>
          </span>
          <span data-ttu-id="7f8f8-452">Свойство <see cref="P:System.Windows.Window.Owner" /> установлено на окно, которое ранее не отображалось.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-452">The <see cref="P:System.Windows.Window.Owner" /> property is set with a window that has not been previously shown.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="7f8f8-453">для разрешения использования все окна и события пользовательского ввода без ограничений.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-453">for permission to use all windows and user input events without restriction.</span>
          </span>
          <span data-ttu-id="7f8f8-454">Связанное перечисление: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-454">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          </span>
        </permission>
        <altmember cref="P:System.Windows.Window.OwnedWindows" />
      </Docs>
    </Member>
    <Member MemberName="ResizeMode">
      <MemberSignature Language="C#" Value="public System.Windows.ResizeMode ResizeMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.ResizeMode ResizeMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.ResizeMode" />
      <MemberSignature Language="VB.NET" Value="Public Property ResizeMode As ResizeMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::ResizeMode ResizeMode { System::Windows::ResizeMode get(); void set(System::Windows::ResizeMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.ResizeMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7f8f8-455">Возвращает или задает режим изменения размеров.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-455">Gets or sets the resize mode.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7f8f8-456">Значение <see cref="T:System.Windows.ResizeMode" />, задающее режим изменения размеров.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-456">A <see cref="T:System.Windows.ResizeMode" /> value specifying the resize mode.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8f8-457">Существует четыре варианта:</span><span class="sxs-lookup"><span data-stu-id="7f8f8-457">There are four options:</span></span>  
  
-   <span data-ttu-id="7f8f8-458">**NoResize**.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-458">**NoResize**.</span></span> <span data-ttu-id="7f8f8-459">Пользователь не может изменять размеры окна.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-459">The user cannot resize the window.</span></span> <span data-ttu-id="7f8f8-460">Развернуть и свернуть поля не отображаются.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-460">The Maximize and Minimize boxes are not shown.</span></span>  
  
-   <span data-ttu-id="7f8f8-461">**CanMinimize**.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-461">**CanMinimize**.</span></span> <span data-ttu-id="7f8f8-462">Пользователь может только свернуть окно и восстановите ее из панели задач.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-462">The user can only minimize the window and restore it from the taskbar.</span></span> <span data-ttu-id="7f8f8-463">Свернуть и развернуть отображаются, но включена только кнопка "Свернуть".</span><span class="sxs-lookup"><span data-stu-id="7f8f8-463">The Minimize and Maximize boxes are both shown, but only the Minimize box is enabled.</span></span>  
  
-   <span data-ttu-id="7f8f8-464">**CanResize**.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-464">**CanResize**.</span></span> <span data-ttu-id="7f8f8-465">Пользователь имеет возможность полного размера окна, с помощью свернуть и развернуть, а также перетаскиваемый контур вокруг окна.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-465">The user has the full ability to resize the window, using the Minimize and Maximize boxes, and a draggable outline around the window.</span></span> <span data-ttu-id="7f8f8-466">Свернуть и развернуть отображаются и включены.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-466">The Minimize and Maximize boxes are shown and enabled.</span></span> <span data-ttu-id="7f8f8-467">(По умолчанию).</span><span class="sxs-lookup"><span data-stu-id="7f8f8-467">(Default).</span></span>  
  
-   <span data-ttu-id="7f8f8-468">**CanResizeWithGrip**.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-468">**CanResizeWithGrip**.</span></span> <span data-ttu-id="7f8f8-469">Этот параметр может иметь ту же функциональность, что <xref:System.Windows.ResizeMode.CanResize>, но добавляет «захват для изменения размера» в правом нижнем углу окна.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-469">This option has the same functionality as <xref:System.Windows.ResizeMode.CanResize>, but adds a "resize grip" to the lower right corner of the window.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7f8f8-470">Не удается задать или получить значение этого свойства, если окно размещено в браузере.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-470">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowResizeMode"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="7f8f8-471">Сведения о свойстве зависимостей</span><span class="sxs-lookup"><span data-stu-id="7f8f8-471">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7f8f8-472">Поле идентификатора</span><span class="sxs-lookup"><span data-stu-id="7f8f8-472">Identifier field</span></span>|<xref:System.Windows.Window.ResizeModeProperty>|  
|<span data-ttu-id="7f8f8-473">Значение свойства метаданных `true`</span><span class="sxs-lookup"><span data-stu-id="7f8f8-473">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.Primitives.ResizeGrip" />
      </Docs>
    </Member>
    <Member MemberName="ResizeModeProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ResizeModeProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ResizeModeProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.ResizeModeProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ResizeModeProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ResizeModeProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7f8f8-474">Идентифицирует свойство зависимостей <see cref="P:System.Windows.Window.ResizeMode" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-474">Identifies the <see cref="P:System.Windows.Window.ResizeMode" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RestoreBounds">
      <MemberSignature Language="C#" Value="public System.Windows.Rect RestoreBounds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Rect RestoreBounds" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.RestoreBounds" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RestoreBounds As Rect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Rect RestoreBounds { System::Windows::Rect get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Rect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7f8f8-475">Возвращает размер и расположение окна перед сворачиванием либо разворачиванием.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-475">Gets the size and location of a window before being either minimized or maximized.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7f8f8-476">Объект <see cref="T:System.Windows.Rect" />, задающий размер и расположение окна перед сворачиванием либо разворачиванием.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-476">A <see cref="T:System.Windows.Rect" /> that specifies the size and location of a window before being either minimized or maximized.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8f8-477">Прямоугольник восстановления — область, занятая окном до его сворачивания или разворачивания.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-477">The restore rectangle is the region occupied by the window before it was minimized or maximized.</span></span> <span data-ttu-id="7f8f8-478">Можно использовать <xref:System.Windows.Window.RestoreBounds%2A> для сохранения последний размер и расположение окна перед закрытием приложения и получить эти значения при очередном запуске приложения, чтобы восстановить окно, так как пользователь остался.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-478">You can use <xref:System.Windows.Window.RestoreBounds%2A> to save the last size and location of a window before an application is closed, and retrieve those values the next time an application starts to restore a window to the way a user left it.</span></span>  
  
 <span data-ttu-id="7f8f8-479">Если вы запрашиваете <xref:System.Windows.Window.RestoreBounds%2A> перед показали окна или после его закрытия <xref:System.Windows.Rect.Empty%2A> возвращается.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-479">If you query <xref:System.Windows.Window.RestoreBounds%2A> before the window has been shown or after it has been closed, <xref:System.Windows.Rect.Empty%2A> is returned.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7f8f8-480">Не удается получить это свойство при размещении окна в браузере.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-480">You cannot get this property when a window is hosted in a browser.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f8f8-481">В следующем примере используется <xref:System.Windows.Window.RestoreBounds%2A> и изолированное хранилище, чтобы размер и расположение окна такие же, как они были в предыдущий раз, отображения окна.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-481">The following example uses <xref:System.Windows.Window.RestoreBounds%2A> and isolated storage to ensure the size and location of a window are the same as they were the previous time the window was shown.</span></span>  
  
 [!code-xaml[WindowRestoreBoundsSnippets#WindowRestoreBoundsXAML1](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowRestoreBoundsSnippets/CSharp/MainWindow.xaml#windowrestoreboundsxaml1)]  
[!code-xaml[WindowRestoreBoundsSnippets#WindowRestoreBoundsXAML2](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowRestoreBoundsSnippets/CSharp/MainWindow.xaml#windowrestoreboundsxaml2)]  
  
 [!code-csharp[WindowRestoreBoundsSnippets#WindowRestoreBoundsCODEBEHIND1](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowRestoreBoundsSnippets/CSharp/MainWindow.xaml.cs#windowrestoreboundscodebehind1)]
 [!code-vb[WindowRestoreBoundsSnippets#WindowRestoreBoundsCODEBEHIND1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowRestoreBoundsSnippets/visualbasic/mainwindow.xaml.vb#windowrestoreboundscodebehind1)]  
[!code-csharp[WindowRestoreBoundsSnippets#WindowRestoreBoundsCODEBEHIND2](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowRestoreBoundsSnippets/CSharp/MainWindow.xaml.cs#windowrestoreboundscodebehind2)]
[!code-vb[WindowRestoreBoundsSnippets#WindowRestoreBoundsCODEBEHIND2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowRestoreBoundsSnippets/visualbasic/mainwindow.xaml.vb#windowrestoreboundscodebehind2)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="7f8f8-482">для разрешения на запрос размера и расположения окна ограничивающего прямоугольника.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-482">for permission to query for the size and location of a window's bounding rectangle.</span>
          </span>
          <span data-ttu-id="7f8f8-483">Связанное перечисление: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-483">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="Show">
      <MemberSignature Language="C#" Value="public void Show ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Show() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.Show" />
      <MemberSignature Language="VB.NET" Value="Public Sub Show ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Show();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7f8f8-484">Открывает окно и возвращается без ожидания закрытия нового открытого окна.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-484">Opens a window and returns without waiting for the newly opened window to close.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8f8-485">Когда <xref:System.Windows.Window> создается экземпляр класса, она не отображается по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-485">When the <xref:System.Windows.Window> class is instantiated, it is not visible by default.</span></span> <span data-ttu-id="7f8f8-486"><xref:System.Windows.Window.Show%2A> Отображает окно и возврат немедленно, без ожидания окна будет закрыта.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-486"><xref:System.Windows.Window.Show%2A> shows a window and returns immediately, without waiting for the window to be closed.</span></span> <span data-ttu-id="7f8f8-487">Следовательно открытое окно не запрещает пользователям взаимодействовать с другими окнами в приложении.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-487">Consequently, the opened window does not prevent users from interacting with other windows in the application.</span></span> <span data-ttu-id="7f8f8-488">Этот тип окна называется *немодальное* окна.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-488">This type of window is called a *modeless* window.</span></span> <span data-ttu-id="7f8f8-489">Распространенными примерами немодальных окон являются свойства окон, панелей инструментов и палитры.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-489">Common examples of modeless windows are properties windows, toolboxes, and palettes.</span></span> <span data-ttu-id="7f8f8-490">Чтобы ограничить пользователя для взаимодействия с конкретным окном, окно должно быть установлено путем вызова <xref:System.Windows.Window.ShowDialog%2A>.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-490">To restrict a user to interacting with a specific window, the window must be opened by calling <xref:System.Windows.Window.ShowDialog%2A>.</span></span>  
  
 <span data-ttu-id="7f8f8-491">Окно, которое открывается вызовом <xref:System.Windows.Window.Show%2A> does автоматически не имеют связи с окном, которое он открыт; в частности, открытого окна не знает, какое окно он открыт.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-491">A window that is opened by calling <xref:System.Windows.Window.Show%2A> does not automatically have a relationship with the window that opened it; specifically, the opened window does not know which window opened it.</span></span> <span data-ttu-id="7f8f8-492">Эту связь можно установить с помощью <xref:System.Windows.Window.Owner%2A> свойство и управляемых с помощью <xref:System.Windows.Window.OwnedWindows%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-492">This relationship can be established using the <xref:System.Windows.Window.Owner%2A> property and managed using the <xref:System.Windows.Window.OwnedWindows%2A> property.</span></span>  
  
 <span data-ttu-id="7f8f8-493">Вызов <xref:System.Windows.Window.Show%2A> обеспечивает такой же результат окончания как параметр <xref:System.Windows.UIElement.Visibility%2A> свойство <xref:System.Windows.Window> объект <xref:System.Windows.Visibility.Visible>.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-493">Calling <xref:System.Windows.Window.Show%2A> achieves the same end result as setting <xref:System.Windows.UIElement.Visibility%2A> property of the <xref:System.Windows.Window> object to <xref:System.Windows.Visibility.Visible>.</span></span> <span data-ttu-id="7f8f8-494">Тем не менее есть различие между ними с точки зрения времени.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-494">However, there is a difference between the two from a timing perspective.</span></span>  
  
 <span data-ttu-id="7f8f8-495">Вызов <xref:System.Windows.Window.Show%2A> выполняется в синхронном режиме, который возвращает только после <xref:System.Windows.FrameworkElement.Loaded> события на дочернее окно:</span><span class="sxs-lookup"><span data-stu-id="7f8f8-495">Calling <xref:System.Windows.Window.Show%2A> is a synchronous operation that returns only after the <xref:System.Windows.FrameworkElement.Loaded> event on the child window has been raised:</span></span>  
  
 [!code-csharp[WindowShowTimingSnippets#ShowSync](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowTimingSnippets/CSharp/Window1.xaml.cs#showsync)]
 [!code-vb[WindowShowTimingSnippets#ShowSync](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowShowTimingSnippets/visualbasic/window1.xaml.vb#showsync)]  
  
 <span data-ttu-id="7f8f8-496">Параметр <xref:System.Windows.UIElement.Visibility%2A>, однако является асинхронной операцией, немедленно возвращает:</span><span class="sxs-lookup"><span data-stu-id="7f8f8-496">Setting <xref:System.Windows.UIElement.Visibility%2A>, however, is an asynchronous operation that returns immediately:</span></span>  
  
 [!code-csharp[WindowShowTimingSnippets#ShowASync](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowTimingSnippets/CSharp/Window1.xaml.cs#showasync)]
 [!code-vb[WindowShowTimingSnippets#ShowASync](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowShowTimingSnippets/visualbasic/window1.xaml.vb#showasync)]  
  
 <span data-ttu-id="7f8f8-497">При задании <xref:System.Windows.UIElement.Visibility%2A>, перед настройкой регистрации событий окна <xref:System.Windows.UIElement.Visibility%2A> не будут вызываться до и после метода, в котором заданы <xref:System.Windows.UIElement.Visibility%2A> завершила выполнение.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-497">When setting <xref:System.Windows.UIElement.Visibility%2A>, any window events you register before you set <xref:System.Windows.UIElement.Visibility%2A> may not be raised until after the method in which you set <xref:System.Windows.UIElement.Visibility%2A> has completed execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f8f8-498">В следующем образце показано, как открыть немодальное окно.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-498">The following sample demonstrates how to open a modeless window.</span></span>  
  
 [!code-csharp[WindowShowSnippets#WindowShowCODE](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowSnippets/CSharp/MainWindow.xaml.cs#windowshowcode)]
 [!code-vb[WindowShowSnippets#WindowShowCODE](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowShowSnippets/visualbasic/mainwindow.xaml.vb#windowshowcode)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="7f8f8-499">Метод <see cref="M:System.Windows.Window.Show" /> вызывается для окна, которое закрывается (<see cref="E:System.Windows.Window.Closing" />) или закрыто (<see cref="E:System.Windows.Window.Closed" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-499">
              <see cref="M:System.Windows.Window.Show" /> is called on a window that is closing (<see cref="E:System.Windows.Window.Closing" />) or has been closed (<see cref="E:System.Windows.Window.Closed" />).</span>
          </span>
        </exception>
        <altmember cref="M:System.Windows.Window.Close" />
        <altmember cref="M:System.Windows.Window.Hide" />
        <altmember cref="P:System.Windows.Window.WindowState" />
      </Docs>
    </Member>
    <Member MemberName="ShowActivated">
      <MemberSignature Language="C#" Value="public bool ShowActivated { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowActivated" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.ShowActivated" />
      <MemberSignature Language="VB.NET" Value="Public Property ShowActivated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShowActivated { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7f8f8-500">Возвращает или задает значение, указывающее, активировано ли окно при первом отображении.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-500">Gets or sets a value that indicates whether a window is activated when first shown.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7f8f8-501">Значение <see langword="true" />, если окно активируется при первом отображении; в противном случае — значение <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-501">
              <see langword="true" /> if a window is activated when first shown; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="7f8f8-502">Значение по умолчанию: <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-502">The default is <see langword="true" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8f8-503">Если окно с его <xref:System.Windows.Window.ShowActivated%2A> свойство `false` — открытия окно не активируется и его <xref:System.Windows.Window.Activated> событие не происходит, пока пользователь вручную активирует окно, выбрав его.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-503">When a window with its <xref:System.Windows.Window.ShowActivated%2A> property set to `false` is opened, the window is not activated and its <xref:System.Windows.Window.Activated> event is not raised until a user manually activates the window by selecting it.</span></span> <span data-ttu-id="7f8f8-504">После выбора окна, она активирует и деактивируется в обычном режиме.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-504">After the window is selected, it activates and deactivates normally.</span></span>  
  
 <span data-ttu-id="7f8f8-505">Для предотвращения окно активироваться при его открытии <xref:System.Windows.Window.ShowActivated%2A> свойству необходимо присвоить значение `false` перед отображением этого окна (путем вызова <xref:System.Windows.Window.Show%2A>); при установке <xref:System.Windows.Window.ShowActivated%2A> для `false` после окна на экран не делает ничего.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-505">To prevent a window from being activated when it opens, the <xref:System.Windows.Window.ShowActivated%2A> property must be set to `false` before the window is shown (by calling <xref:System.Windows.Window.Show%2A>); setting <xref:System.Windows.Window.ShowActivated%2A> to `false` after a window is shown has no effect.</span></span>  
  
 <span data-ttu-id="7f8f8-506">Установка <xref:System.Windows.Window.ShowActivated%2A> для `false` в окне, которое открывается как модальная, вызвав <xref:System.Windows.Window.ShowDialog%2A>, имеет никаких реальных последствий.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-506">Setting <xref:System.Windows.Window.ShowActivated%2A> to `false` on a window that is opened modally, by calling <xref:System.Windows.Window.ShowDialog%2A>, has no real impact.</span></span> <span data-ttu-id="7f8f8-507">Несмотря на то, что не будут активированы модальное окно, модальное окно будет запрещает пользователю активацию любые другие открытые окна приложения.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-507">Although the modal window will not be activated, the modal window will prevent the user from activating any other open application windows.</span></span>  
  
<a name="dependencyPropertyInfo_WindowShowActivated"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="7f8f8-508">Сведения о свойстве зависимостей</span><span class="sxs-lookup"><span data-stu-id="7f8f8-508">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7f8f8-509">Поле идентификатора</span><span class="sxs-lookup"><span data-stu-id="7f8f8-509">Identifier field</span></span>|<xref:System.Windows.Window.ShowActivatedProperty>|  
|<span data-ttu-id="7f8f8-510">Значение свойства метаданных `true`</span><span class="sxs-lookup"><span data-stu-id="7f8f8-510">Metadata properties set to `true`</span></span>|<span data-ttu-id="7f8f8-511">Нет</span><span class="sxs-lookup"><span data-stu-id="7f8f8-511">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="7f8f8-512">В следующем примере показано, как с помощью разметки можно настроить окно на открытие без активации.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-512">The following example shows how to use markup to configure a window to be opened without being activated.</span></span>  
  
 [!code-xaml[WindowShowActivatedSnippets#ShowUnactivatedMARKUP1](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowActivatedSnippets/CSharp/AWindow.xaml#showunactivatedmarkup1)]  
  
  
 [!code-csharp[WindowShowActivatedSnippets#ShowUnactivatedCODEBEHIND](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowActivatedSnippets/CSharp/AWindow.xaml.cs#showunactivatedcodebehind)]
 [!code-vb[WindowShowActivatedSnippets#ShowUnactivatedCODEBEHIND](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowShowActivatedSnippets/visualbasic/awindow.xaml.vb#showunactivatedcodebehind)]  
  
 <span data-ttu-id="7f8f8-513">Приведенный ниже показано, как настроить окно на открытие без активации с помощью кода.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-513">The following example shows how to use code to configure a window to be opened without it being activated.</span></span>  
  
 [!code-csharp[WindowShowActivatedSnippets#ShowUnactivatedWindowCODE](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowActivatedSnippets/CSharp/Window1.xaml.cs#showunactivatedwindowcode)]
 [!code-vb[WindowShowActivatedSnippets#ShowUnactivatedWindowCODE](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowShowActivatedSnippets/visualbasic/window1.xaml.vb#showunactivatedwindowcode)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowActivatedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ShowActivatedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ShowActivatedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.ShowActivatedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ShowActivatedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ShowActivatedProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7f8f8-514">Идентифицирует свойство зависимостей <see cref="P:System.Windows.Window.ShowActivated" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-514">Identifies the <see cref="P:System.Windows.Window.ShowActivated" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowDialog">
      <MemberSignature Language="C#" Value="public Nullable&lt;bool&gt; ShowDialog ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Nullable`1&lt;bool&gt; ShowDialog() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.ShowDialog" />
      <MemberSignature Language="VB.NET" Value="Public Function ShowDialog () As Nullable(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Nullable&lt;bool&gt; ShowDialog();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7f8f8-515">Открывает окно и возвращается только после его закрытия.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-515">Opens a window and returns only when the newly opened window is closed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7f8f8-516">Значение <see cref="T:System.Nullable`1" /> типа <see cref="T:System.Boolean" />, определяющее было действие принято (<see langword="true" />) или отменено (<see langword="false" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-516">A <see cref="T:System.Nullable`1" /> value of type <see cref="T:System.Boolean" /> that specifies whether the activity was accepted (<see langword="true" />) or canceled (<see langword="false" />).</span>
          </span>
          <span data-ttu-id="7f8f8-517">Возвращаемое значение представляет собой значение свойства <see cref="P:System.Windows.Window.DialogResult" /> перед закрытием окна.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-517">The return value is the value of the <see cref="P:System.Windows.Window.DialogResult" /> property before a window closes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8f8-518">Когда <xref:System.Windows.Window> создается экземпляр класса, она не отображается по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-518">When a <xref:System.Windows.Window> class is instantiated, it is not visible by default.</span></span> <span data-ttu-id="7f8f8-519"><xref:System.Windows.Window.ShowDialog%2A> показано окно, отключает все окна в приложении и возвращает только при закрытии окна.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-519"><xref:System.Windows.Window.ShowDialog%2A> shows the window, disables all other windows in the application, and returns only when the window is closed.</span></span> <span data-ttu-id="7f8f8-520">Этот тип окна называется *модального* окно.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-520">This type of window is known as a *modal* window.</span></span>  
  
 <span data-ttu-id="7f8f8-521">Модальные окна в основном используются как диалоговые окна.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-521">Modal windows are primarily used as dialog boxes.</span></span> <span data-ttu-id="7f8f8-522">Диалоговое окно — это специальный тип окна, используемый приложениями для взаимодействия с пользователями при выполнении задач, таких как открытие файлов или печать документов.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-522">A dialog box is a special type of window that applications use to interact with users to complete tasks, such as opening files or printing documents.</span></span> <span data-ttu-id="7f8f8-523">Диалоговые окна зачастую позволяют пользователям принять или отменить задачу, для которого они были показаны, прежде чем закрыть диалоговое окно.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-523">Dialog boxes commonly allow users to accept or cancel the task for which they were shown before the dialog box is closed.</span></span> <span data-ttu-id="7f8f8-524"><xref:System.Windows.Window.ShowDialog%2A> Возвращает <xref:System.Nullable%601> <xref:System.Boolean> значение, указывающее, было ли действие принятия или отмены.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-524"><xref:System.Windows.Window.ShowDialog%2A> returns a <xref:System.Nullable%601><xref:System.Boolean> value that specifies whether the activity was accepted or canceled.</span></span> <span data-ttu-id="7f8f8-525">Возвращаемое значение представляет собой значение свойства <xref:System.Windows.Window.DialogResult%2A> перед закрытием окна.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-525">The return value is the value of the <xref:System.Windows.Window.DialogResult%2A> property before a window closes.</span></span> <span data-ttu-id="7f8f8-526">Дополнительные сведения см. в разделе <xref:System.Windows.Window.DialogResult%2A>.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-526">For more information, see <xref:System.Windows.Window.DialogResult%2A>.</span></span>  
  
 <span data-ttu-id="7f8f8-527">Окно, которое открывается вызовом <xref:System.Windows.Window.ShowDialog%2A> метод не имеет связи с окном, открывший его автоматически; в частности, открытое окно не знает, какое окно он открыт.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-527">A window that is opened by calling the <xref:System.Windows.Window.ShowDialog%2A> method does not automatically have a relationship with the window that opened it; specifically, the opened window does not know which window opened it.</span></span> <span data-ttu-id="7f8f8-528">Эту связь можно установить с помощью <xref:System.Windows.Window.Owner%2A> свойство и управляемых с помощью <xref:System.Windows.Window.OwnedWindows%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-528">This relationship can be established using the <xref:System.Windows.Window.Owner%2A> property and managed using the <xref:System.Windows.Window.OwnedWindows%2A> property.</span></span> <span data-ttu-id="7f8f8-529">Для поддержки [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] автоматизации (см. [Обзор модели автоматизации пользовательского интерфейса](~/docs/framework/ui-automation/ui-automation-overview.md)), <xref:System.Windows.Window.Owner%2A> должно быть задано для окно, открытое посредством вызова <xref:System.Windows.Window.ShowDialog%2A>.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-529">To support [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] automation (see [UI Automation Overview](~/docs/framework/ui-automation/ui-automation-overview.md)), <xref:System.Windows.Window.Owner%2A> must be set for a window opened by calling <xref:System.Windows.Window.ShowDialog%2A>.</span></span>  
  
 <span data-ttu-id="7f8f8-530">Когда модальный [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] окна (окно открывается вызовом <xref:System.Windows.Window.ShowDialog%2A>) закрывается, ранее активированное окно активируется.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-530">When a modal [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] window (a window opened by calling <xref:System.Windows.Window.ShowDialog%2A>) is closed, the previously activated window is reactivated.</span></span> <span data-ttu-id="7f8f8-531">Если модальное окно [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] окно имеет окно-владелец (см. <xref:System.Windows.Window.Owner%2A>), окно-владелец не активируется повторно, когда модальное [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] окно закрывается, если она была ранее активированное окно.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-531">If a modal [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] window has an owner window (see <xref:System.Windows.Window.Owner%2A>), the owner window is not reactivated when the modal [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] window is closed unless it was the previously activated window.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7f8f8-532">Этот метод не может вызываться, когда окно размещается в браузере.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-532">This method cannot be called when a window is hosted in a browser.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f8f8-533">В следующем образце показано, как открыть модальное окно.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-533">The following sample demonstrates how to open a modal window.</span></span>  
  
 [!code-csharp[WindowShowDialogSnippets#WindowShowDialogCODE](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowDialogSnippets/CSharp/MainWindow.xaml.cs#windowshowdialogcode)]
 [!code-vb[WindowShowDialogSnippets#WindowShowDialogCODE](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowShowDialogSnippets/visualbasic/mainwindow.xaml.vb#windowshowdialogcode)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="7f8f8-534">Метод <see cref="M:System.Windows.Window.ShowDialog" /> вызывается для окна, которое закрывается (<see cref="E:System.Windows.Window.Closing" />) или закрыто (<see cref="E:System.Windows.Window.Closed" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-534">
              <see cref="M:System.Windows.Window.ShowDialog" /> is called on a window that is closing (<see cref="E:System.Windows.Window.Closing" />) or has been closed (<see cref="E:System.Windows.Window.Closed" />).</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="7f8f8-535">для разрешения на активацию окна.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-535">for permission to activate a window.</span>
          </span>
          <span data-ttu-id="7f8f8-536">Связанное перечисление: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-536">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Windows.Window.Close" />
        <altmember cref="P:System.Windows.Window.WindowState" />
      </Docs>
    </Member>
    <Member MemberName="ShowInTaskbar">
      <MemberSignature Language="C#" Value="public bool ShowInTaskbar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowInTaskbar" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.ShowInTaskbar" />
      <MemberSignature Language="VB.NET" Value="Public Property ShowInTaskbar As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShowInTaskbar { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7f8f8-537">Возвращает или задает значение, указывающее, имеет ли окно кнопку в панели задач.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-537">Gets or sets a value that indicates whether the window has a task bar button.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7f8f8-538">
            <see langword="true" />, если окно имеет кнопку в панели задач; в противном случае — <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-538">
              <see langword="true" /> if the window has a task bar button; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="7f8f8-539">Не применяется, если окно размещено в браузере.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-539">Does not apply when the window is hosted in a browser.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8f8-540">Если <xref:System.Windows.Window.ShowInTaskbar%2A> равно `true`, окне также отображаются в списке выбора приложения ALT + TAB.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-540">If <xref:System.Windows.Window.ShowInTaskbar%2A> is set to `true`, the window will also appear in the ALT+TAB application selection list.</span></span>  
  
 <span data-ttu-id="7f8f8-541">Значок, используемый для кнопки панели задач и список выбора приложения ALT + TAB — это значение <xref:System.Windows.Window.Icon%2A> свойства.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-541">The icon that is used for both the task bar button and the ALT+TAB application selection list is the value of the <xref:System.Windows.Window.Icon%2A> property.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7f8f8-542">Не удается задать или получить значение этого свойства, если окно размещено в браузере.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-542">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowShowInTaskbar"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="7f8f8-543">Сведения о свойстве зависимостей</span><span class="sxs-lookup"><span data-stu-id="7f8f8-543">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7f8f8-544">Поле идентификатора</span><span class="sxs-lookup"><span data-stu-id="7f8f8-544">Identifier field</span></span>|<xref:System.Windows.Window.ShowInTaskbarProperty>|  
|<span data-ttu-id="7f8f8-545">Значение свойства метаданных `true`</span><span class="sxs-lookup"><span data-stu-id="7f8f8-545">Metadata properties set to `true`</span></span>|<span data-ttu-id="7f8f8-546">Нет</span><span class="sxs-lookup"><span data-stu-id="7f8f8-546">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowInTaskbarProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ShowInTaskbarProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ShowInTaskbarProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.ShowInTaskbarProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ShowInTaskbarProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ShowInTaskbarProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7f8f8-547">Идентифицирует свойство зависимостей <see cref="P:System.Windows.Window.ShowInTaskbar" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-547">Identifies the <see cref="P:System.Windows.Window.ShowInTaskbar" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SizeToContent">
      <MemberSignature Language="C#" Value="public System.Windows.SizeToContent SizeToContent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.SizeToContent SizeToContent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.SizeToContent" />
      <MemberSignature Language="VB.NET" Value="Public Property SizeToContent As SizeToContent" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::SizeToContent SizeToContent { System::Windows::SizeToContent get(); void set(System::Windows::SizeToContent value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.SizeToContent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7f8f8-548">Возвращает или задает значение, указывающее, изменится ли автоматически размер окна в соответствии с размером его содержимого.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-548">Gets or sets a value that indicates whether a window will automatically size itself to fit the size of its content.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7f8f8-549">Значение <see cref="T:System.Windows.SizeToContent" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-549">A <see cref="T:System.Windows.SizeToContent" /> value.</span>
          </span>
          <span data-ttu-id="7f8f8-550">Значение по умолчанию: <see cref="F:System.Windows.SizeToContent.Manual" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-550">The default is <see cref="F:System.Windows.SizeToContent.Manual" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8f8-551">При <xref:System.Windows.Window.SizeToContent%2A> равно <xref:System.Windows.SizeToContent.WidthAndHeight>, устанавливая либо <xref:System.Windows.FrameworkElement.Height%2A> или <xref:System.Windows.FrameworkElement.Width%2A> не влияет; оба свойства могут быть заданы, но они устанавливаются с помощью значения не применяются в окно.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-551">When <xref:System.Windows.Window.SizeToContent%2A> is set to <xref:System.Windows.SizeToContent.WidthAndHeight>, setting either <xref:System.Windows.FrameworkElement.Height%2A> or <xref:System.Windows.FrameworkElement.Width%2A> has no effect; both properties can be set, but the values they are set with are not applied to the window.</span></span>  
  
 <span data-ttu-id="7f8f8-552">Когда <xref:System.Windows.Window.SizeToContent%2A> равно <xref:System.Windows.SizeToContent.Height>, параметр <xref:System.Windows.FrameworkElement.Height%2A> изменяется высота окна.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-552">When <xref:System.Windows.Window.SizeToContent%2A> is set to <xref:System.Windows.SizeToContent.Height>, setting <xref:System.Windows.FrameworkElement.Height%2A> does not change the height of the window.</span></span>  
  
 <span data-ttu-id="7f8f8-553">Когда <xref:System.Windows.Window.SizeToContent%2A> равно <xref:System.Windows.SizeToContent.Width>, параметр <xref:System.Windows.FrameworkElement.Width%2A> не изменяет ширину окна.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-553">When <xref:System.Windows.Window.SizeToContent%2A> is set to <xref:System.Windows.SizeToContent.Width>, setting <xref:System.Windows.FrameworkElement.Width%2A> does not change the width of the window.</span></span>  
  
 <span data-ttu-id="7f8f8-554">Если <xref:System.Windows.Window.SizeToContent%2A> имеет значение, отличное от <xref:System.Windows.SizeToContent.Manual>:</span><span class="sxs-lookup"><span data-stu-id="7f8f8-554">If <xref:System.Windows.Window.SizeToContent%2A> has a value other than <xref:System.Windows.SizeToContent.Manual>:</span></span>  
  
-   <span data-ttu-id="7f8f8-555"><xref:System.Windows.Window.SizeToContent%2A> автоматически устанавливается значение <xref:System.Windows.SizeToContent.Manual> при изменении размера окна, с помощью захвата для изменения размера и перетащите границу.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-555"><xref:System.Windows.Window.SizeToContent%2A> is automatically set to <xref:System.Windows.SizeToContent.Manual> if a user resizes the window by using the resize grip or dragging the border.</span></span>  
  
-   <span data-ttu-id="7f8f8-556">При изменении размера содержимого, в результате которого его окно будет изменяться, <xref:System.Windows.FrameworkElement.SizeChanged> возникает.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-556">If the size of the content changes in a way that causes the window to resize itself, <xref:System.Windows.FrameworkElement.SizeChanged> is raised.</span></span>  
  
 <span data-ttu-id="7f8f8-557">Если окно является прозрачным (см. <xref:System.Windows.Window.AllowsTransparency%2A>), параметр следует рассматривать <xref:System.Windows.Window.SizeToContent%2A> для <xref:System.Windows.SizeToContent.WidthAndHeight> для обеспечения окна не больше его видимого содержимого.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-557">If a window is transparent (see <xref:System.Windows.Window.AllowsTransparency%2A>), you should consider setting <xref:System.Windows.Window.SizeToContent%2A> to <xref:System.Windows.SizeToContent.WidthAndHeight> to ensure the window is no larger than its visible content.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7f8f8-558">Не удается задать или получить значение этого свойства, если окно размещено в браузере.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-558">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowSizeToContent"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="7f8f8-559">Сведения о свойстве зависимостей</span><span class="sxs-lookup"><span data-stu-id="7f8f8-559">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7f8f8-560">Поле идентификатора</span><span class="sxs-lookup"><span data-stu-id="7f8f8-560">Identifier field</span></span>|<xref:System.Windows.Window.SizeToContentProperty>|  
|<span data-ttu-id="7f8f8-561">Значение свойства метаданных `true`</span><span class="sxs-lookup"><span data-stu-id="7f8f8-561">Metadata properties set to `true`</span></span>|<span data-ttu-id="7f8f8-562">Нет</span><span class="sxs-lookup"><span data-stu-id="7f8f8-562">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="7f8f8-563">Следующий пример показывает, как задать <xref:System.Windows.Window.SizeToContent%2A> свойства в коде, чтобы указать, изменение размера окна в соответствии с содержимым.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-563">The following example shows how to set the <xref:System.Windows.Window.SizeToContent%2A> property in code to specify how a window resizes to fit its content.</span></span>  
  
 [!code-csharp[HOWTOWindowManagementSnippets#SetWindowSizeToContentPropertyCODE](~/samples/snippets/csharp/VS_Snippets_Wpf/HOWTOWindowManagementSnippets/CSharp/MainWindow.xaml.cs#setwindowsizetocontentpropertycode)]
 [!code-vb[HOWTOWindowManagementSnippets#SetWindowSizeToContentPropertyCODE](~/samples/snippets/visualbasic/VS_Snippets_Wpf/HOWTOWindowManagementSnippets/visualbasic/mainwindow.xaml.vb#setwindowsizetocontentpropertycode)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Window.MeasureOverride(System.Windows.Size)" />
        <altmember cref="M:System.Windows.Window.ArrangeOverride(System.Windows.Size)" />
        <altmember cref="P:System.Windows.Window.ResizeMode" />
      </Docs>
    </Member>
    <Member MemberName="SizeToContentProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty SizeToContentProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty SizeToContentProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.SizeToContentProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SizeToContentProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ SizeToContentProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7f8f8-564">Идентифицирует свойство зависимостей <see cref="P:System.Windows.Window.SizeToContent" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-564">Identifies the <see cref="P:System.Windows.Window.SizeToContent" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceInitialized">
      <MemberSignature Language="C#" Value="public event EventHandler SourceInitialized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SourceInitialized" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.SourceInitialized" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SourceInitialized As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ SourceInitialized;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7f8f8-565">Данное событие инициируется для поддержки взаимодействия с [!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)].</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-565">This event is raised to support interoperation with [!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)].</span>
          </span>
          <span data-ttu-id="7f8f8-566">См. раздел <see cref="T:System.Windows.Interop.HwndSource" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-566">See <see cref="T:System.Windows.Interop.HwndSource" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StateChanged">
      <MemberSignature Language="C#" Value="public event EventHandler StateChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler StateChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.StateChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StateChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ StateChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7f8f8-567">Происходит при изменении свойства окна <see cref="P:System.Windows.Window.WindowState" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-567">Occurs when the window's <see cref="P:System.Windows.Window.WindowState" /> property changes.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Window.WindowState" />
      </Docs>
    </Member>
    <Member MemberName="TaskbarItemInfo">
      <MemberSignature Language="C#" Value="public System.Windows.Shell.TaskbarItemInfo TaskbarItemInfo { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Shell.TaskbarItemInfo TaskbarItemInfo" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.TaskbarItemInfo" />
      <MemberSignature Language="VB.NET" Value="Public Property TaskbarItemInfo As TaskbarItemInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Shell::TaskbarItemInfo ^ TaskbarItemInfo { System::Windows::Shell::TaskbarItemInfo ^ get(); void set(System::Windows::Shell::TaskbarItemInfo ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Shell.TaskbarItemInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7f8f8-568">Получает или задает эскиз панели задач [!INCLUDE[win7](~/includes/win7-md.md)] для <see cref="T:System.Windows.Window" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-568">Gets or sets the [!INCLUDE[win7](~/includes/win7-md.md)] taskbar thumbnail for the <see cref="T:System.Windows.Window" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7f8f8-569">Эскиз панели задач [!INCLUDE[win7](~/includes/win7-md.md)] для <see cref="T:System.Windows.Window" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-569">The [!INCLUDE[win7](~/includes/win7-md.md)] taskbar thumbnail for the <see cref="T:System.Windows.Window" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8f8-570">Дополнительные сведения об использовании [!INCLUDE[win7](~/includes/win7-md.md)] эскиза, см. в разделе задач <xref:System.Windows.Shell.TaskbarItemInfo> класса.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-570">For more information about how to use the [!INCLUDE[win7](~/includes/win7-md.md)] taskbar thumbnail, see the <xref:System.Windows.Shell.TaskbarItemInfo> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="N:System.Windows.Shell" />
      </Docs>
    </Member>
    <Member MemberName="TaskbarItemInfoProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TaskbarItemInfoProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TaskbarItemInfoProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.TaskbarItemInfoProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TaskbarItemInfoProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ TaskbarItemInfoProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7f8f8-571">Идентифицирует свойство зависимостей <see cref="P:System.Windows.Window.TaskbarItemInfo" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-571">Identifies the <see cref="P:System.Windows.Window.TaskbarItemInfo" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Title">
      <MemberSignature Language="C#" Value="public string Title { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Title" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.Title" />
      <MemberSignature Language="VB.NET" Value="Public Property Title As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Title { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IWindowService.Title</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.Title)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7f8f8-572">Получение или установка заголовка окна.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-572">Gets or sets a window's title.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7f8f8-573">Строка <see cref="T:System.String" />, содержащая заголовок окна.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-573">A <see cref="T:System.String" /> that contains the window's title.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8f8-574">Заголовок <xref:System.Windows.Window>, <xref:System.Windows.Navigation.NavigationWindow>, или [!INCLUDE[TLA#tla_iegeneric](~/includes/tlasharptla-iegeneric-md.md)], можно также задать с помощью <xref:System.Windows.Controls.Page.WindowTitle%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-574">The title of a <xref:System.Windows.Window>, <xref:System.Windows.Navigation.NavigationWindow>, or [!INCLUDE[TLA#tla_iegeneric](~/includes/tlasharptla-iegeneric-md.md)], can also be set by using <xref:System.Windows.Controls.Page.WindowTitle%2A?displayProperty=nameWithType>.</span></span>  
  
<a name="dependencyPropertyInfo_WindowTitle"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="7f8f8-575">Сведения о свойстве зависимостей</span><span class="sxs-lookup"><span data-stu-id="7f8f8-575">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7f8f8-576">Поле идентификатора</span><span class="sxs-lookup"><span data-stu-id="7f8f8-576">Identifier field</span></span>|<xref:System.Windows.Window.TitleProperty>|  
|<span data-ttu-id="7f8f8-577">Значение свойства метаданных `true`</span><span class="sxs-lookup"><span data-stu-id="7f8f8-577">Metadata properties set to `true`</span></span>|<span data-ttu-id="7f8f8-578">Нет</span><span class="sxs-lookup"><span data-stu-id="7f8f8-578">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TitleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TitleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TitleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.TitleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TitleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ TitleProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7f8f8-579">Идентифицирует свойство зависимостей <see cref="P:System.Windows.Window.Title" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-579">Identifies the <see cref="P:System.Windows.Window.Title" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Top">
      <MemberSignature Language="C#" Value="public double Top { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Top" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.Top" />
      <MemberSignature Language="VB.NET" Value="Public Property Top As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Top { double get(); void set(double value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Windows.LengthConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7f8f8-580">Возвращает или задает позицию верхнего края окна относительно рабочего стола.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-580">Gets or sets the position of the window's top edge, in relation to the desktop.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7f8f8-581">Позиция верхнего края окна в логических единицах (1/96 дюйма).</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-581">The position of the window's top, in logical units (1/96").</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8f8-582">Когда <xref:System.Windows.Window> свернуто или развернуто, это значение соответствует точка восстановления верхней границей для <xref:System.Windows.Window>.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-582">When the <xref:System.Windows.Window> is maximized or minimized, this value represents the top edge of the restore point for the <xref:System.Windows.Window>.</span></span>  
  
 <span data-ttu-id="7f8f8-583">Это свойство нельзя задать с помощью стиля.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-583">This property cannot be set through a style.</span></span>  
  
 <span data-ttu-id="7f8f8-584">Если вы не укажете значение, <xref:System.Windows.Window.Top%2A> присвоено значение по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-584">If you do not specify a value, <xref:System.Windows.Window.Top%2A> is set to the system default value.</span></span> <span data-ttu-id="7f8f8-585">Можно также указать значение по умолчанию, задав <xref:System.Windows.Window.Top%2A> для <xref:System.Double.NaN>.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-585">You can also specify the system default value by setting <xref:System.Windows.Window.Top%2A> to <xref:System.Double.NaN>.</span></span> <span data-ttu-id="7f8f8-586">Ни <xref:System.Double.NegativeInfinity> , ни <xref:System.Double.PositiveInfinity> является допустимым значением для <xref:System.Windows.Window.Top%2A>.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-586">Neither <xref:System.Double.NegativeInfinity> nor <xref:System.Double.PositiveInfinity> is a valid value for <xref:System.Windows.Window.Top%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7f8f8-587">Не удается задать или получить значение этого свойства, если окно размещено в браузере.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-587">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowTop"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="7f8f8-588">Сведения о свойстве зависимостей</span><span class="sxs-lookup"><span data-stu-id="7f8f8-588">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7f8f8-589">Поле идентификатора</span><span class="sxs-lookup"><span data-stu-id="7f8f8-589">Identifier field</span></span>|<xref:System.Windows.Window.TopProperty>|  
|<span data-ttu-id="7f8f8-590">Значение свойства метаданных `true`</span><span class="sxs-lookup"><span data-stu-id="7f8f8-590">Metadata properties set to `true`</span></span>|<span data-ttu-id="7f8f8-591">Нет</span><span class="sxs-lookup"><span data-stu-id="7f8f8-591">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Window.Left" />
      </Docs>
    </Member>
    <Member MemberName="Topmost">
      <MemberSignature Language="C#" Value="public bool Topmost { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Topmost" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.Topmost" />
      <MemberSignature Language="VB.NET" Value="Public Property Topmost As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Topmost { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7f8f8-592">Возвращает или задает значение, указывающее, отображается ли окно поверх всех окон в Z-порядке.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-592">Gets or sets a value that indicates whether a window appears in the topmost z-order.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7f8f8-593">Значение <see langword="true" />, если окно является самым верхним; в противном случае — значение <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-593">
              <see langword="true" /> if the window is topmost; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8f8-594">Окно которого <xref:System.Windows.Window.Topmost%2A> свойству `true` появляется над все окна, <xref:System.Windows.Window.Topmost%2A> задано значение `false`.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-594">A window whose <xref:System.Windows.Window.Topmost%2A> property is set to `true` appears above all windows whose <xref:System.Windows.Window.Topmost%2A> properties are set to `false`.</span></span>  
  
 <span data-ttu-id="7f8f8-595">В группе windows, имеющих <xref:System.Windows.Window.Topmost%2A> свойству `true`, окно, которое активируется в настоящее время является самое верхнее окно.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-595">In the group of windows that have <xref:System.Windows.Window.Topmost%2A> property is set to `true`, the window that is currently activated is the topmost window.</span></span> <span data-ttu-id="7f8f8-596">Аналогичным образом для группы windows, имеющие <xref:System.Windows.Window.Topmost%2A> свойству `false`.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-596">Likewise for the group of windows that have <xref:System.Windows.Window.Topmost%2A> property is set to `false`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7f8f8-597">Не удается задать или получить значение этого свойства, если окно размещено в браузере.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-597">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowTopmost"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="7f8f8-598">Сведения о свойстве зависимостей</span><span class="sxs-lookup"><span data-stu-id="7f8f8-598">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7f8f8-599">Поле идентификатора</span><span class="sxs-lookup"><span data-stu-id="7f8f8-599">Identifier field</span></span>|<xref:System.Windows.Window.TopmostProperty>|  
|<span data-ttu-id="7f8f8-600">Значение свойства метаданных `true`</span><span class="sxs-lookup"><span data-stu-id="7f8f8-600">Metadata properties set to `true`</span></span>|<span data-ttu-id="7f8f8-601">Нет</span><span class="sxs-lookup"><span data-stu-id="7f8f8-601">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Window.Activated" />
        <altmember cref="E:System.Windows.Window.Deactivated" />
      </Docs>
    </Member>
    <Member MemberName="TopmostProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TopmostProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TopmostProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.TopmostProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TopmostProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ TopmostProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7f8f8-602">Идентифицирует свойство зависимостей <see cref="P:System.Windows.Window.Topmost" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-602">Identifies the <see cref="P:System.Windows.Window.Topmost" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TopProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TopProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TopProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.TopProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TopProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ TopProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7f8f8-603">Идентифицирует свойство зависимостей <see cref="P:System.Windows.Window.Top" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-603">Identifies the <see cref="P:System.Windows.Window.Top" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowStartupLocation">
      <MemberSignature Language="C#" Value="public System.Windows.WindowStartupLocation WindowStartupLocation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.WindowStartupLocation WindowStartupLocation" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.WindowStartupLocation" />
      <MemberSignature Language="VB.NET" Value="Public Property WindowStartupLocation As WindowStartupLocation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::WindowStartupLocation WindowStartupLocation { System::Windows::WindowStartupLocation get(); void set(System::Windows::WindowStartupLocation value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.WindowStartupLocation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7f8f8-604">Получение или установка положения окна при его первом отображении.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-604">Gets or sets the position of the window when first shown.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7f8f8-605">Значение <see cref="T:System.Windows.WindowStartupLocation" />, указывающее верхнюю/левую позицию окна при первом отображении.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-605">A <see cref="T:System.Windows.WindowStartupLocation" /> value that specifies the top/left position of a window when first shown.</span>
          </span>
          <span data-ttu-id="7f8f8-606">Значение по умолчанию: <see cref="F:System.Windows.WindowStartupLocation.Manual" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-606">The default is <see cref="F:System.Windows.WindowStartupLocation.Manual" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8f8-607">Установка <xref:System.Windows.WindowStartupLocation> для <xref:System.Windows.WindowStartupLocation.Manual> окно будет располагаться в соответствии с его <xref:System.Windows.Window.Left%2A> и <xref:System.Windows.Window.Top%2A> значения свойств.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-607">Setting <xref:System.Windows.WindowStartupLocation> to <xref:System.Windows.WindowStartupLocation.Manual> causes a window to be positioned according to its <xref:System.Windows.Window.Left%2A> and <xref:System.Windows.Window.Top%2A> property values.</span></span> <span data-ttu-id="7f8f8-608">Если параметр <xref:System.Windows.Window.Left%2A> или <xref:System.Windows.Window.Top%2A> свойства не указаны, их значения определяются [!INCLUDE[TLA2#tla_mswin](~/includes/tla2sharptla-mswin-md.md)].</span><span class="sxs-lookup"><span data-stu-id="7f8f8-608">If either the <xref:System.Windows.Window.Left%2A> or <xref:System.Windows.Window.Top%2A> properties aren't specified, their values are determined by [!INCLUDE[TLA2#tla_mswin](~/includes/tla2sharptla-mswin-md.md)].</span></span>  
  
 <span data-ttu-id="7f8f8-609">Параметр <xref:System.Windows.WindowStartupLocation.CenterScreen> выводить окно должен располагаться в центре экрана, содержащего курсор мыши.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-609">Setting <xref:System.Windows.WindowStartupLocation.CenterScreen> causes a window to be positioned in the center of the screen that contains the mouse cursor.</span></span>  
  
 <span data-ttu-id="7f8f8-610">Установка <xref:System.Windows.WindowStartupLocation> для <xref:System.Windows.WindowStartupLocation.CenterOwner> выводить окно должен располагаться в центре окна-владельца (см. <xref:System.Windows.Window.Owner%2A>), если он указан.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-610">Setting <xref:System.Windows.WindowStartupLocation> to <xref:System.Windows.WindowStartupLocation.CenterOwner> causes a window to be positioned in the center of its owner window (see <xref:System.Windows.Window.Owner%2A>), if specified.</span></span> <span data-ttu-id="7f8f8-611">Окно-владелец может быть еще одно окно WPF или окна не WPF.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-611">The owner window can be either another WPF window or a non-WPF window.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7f8f8-612">Дополнительные сведения об окнах WPF с windows, отличных от WPF см. в разделе [WPF и взаимодействие Win32](~/docs/framework/wpf/advanced/wpf-and-win32-interoperation.md) и <xref:System.Windows.Interop.WindowInteropHelper>.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-612">For more information about WPF windows with non-WPF windows, see [WPF and Win32 Interoperation](~/docs/framework/wpf/advanced/wpf-and-win32-interoperation.md) and <xref:System.Windows.Interop.WindowInteropHelper>.</span></span>  
  
 <span data-ttu-id="7f8f8-613">Если окно-владелец не указан, положение окна определяется таким же образом, как если бы <xref:System.Windows.WindowStartupLocation> равно <xref:System.Windows.WindowStartupLocation.Manual>.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-613">If an owner window is not specified, the position of the window is determined in the same way as if <xref:System.Windows.WindowStartupLocation> is set to <xref:System.Windows.WindowStartupLocation.Manual>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7f8f8-614">Не удается задать или получить значение этого свойства при размещении окна в браузере.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-614">You cannot set or get the value of this property when a window is hosted in a browser.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowState">
      <MemberSignature Language="C#" Value="public System.Windows.WindowState WindowState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.WindowState WindowState" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.WindowState" />
      <MemberSignature Language="VB.NET" Value="Public Property WindowState As WindowState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::WindowState WindowState { System::Windows::WindowState get(); void set(System::Windows::WindowState value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WindowState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7f8f8-615">Возвращает или задает значение, указывающее, восстановлено ли, свернуто или развернуто окно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-615">Gets or sets a value that indicates whether a window is restored, minimized, or maximized.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7f8f8-616">Состояние <see cref="T:System.Windows.WindowState" />, определяющее, является ли окно восстановленным, свернутым или развернутым.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-616">A <see cref="T:System.Windows.WindowState" /> that determines whether a window is restored, minimized, or maximized.</span>
          </span>
          <span data-ttu-id="7f8f8-617">По умолчанию используется значение <see cref="F:System.Windows.WindowState.Normal" /> (восстановлено).</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-617">The default is <see cref="F:System.Windows.WindowState.Normal" /> (restored).</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8f8-618">Прежде чем окна сворачивать или разворачивать, его размер и расположение, хранятся в <xref:System.Windows.Window.RestoreBounds%2A>.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-618">Before a window is minimized or maximized, its size and location are stored in <xref:System.Windows.Window.RestoreBounds%2A>.</span></span> <span data-ttu-id="7f8f8-619">Восстанавливаются при последующем восстановлении окна его размер и расположение значения значениями из <xref:System.Windows.Window.RestoreBounds%2A>.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-619">When a window is subsequently restored, its size and location values are restored with the values from <xref:System.Windows.Window.RestoreBounds%2A>.</span></span>  
  
 <span data-ttu-id="7f8f8-620">Когда <xref:System.Windows.Window.WindowState%2A> изменения свойств, <xref:System.Windows.Window.StateChanged> возникает.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-620">When the <xref:System.Windows.Window.WindowState%2A> property is changed, <xref:System.Windows.Window.StateChanged> is raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7f8f8-621">Не удается задать или получить значение этого свойства, если окно размещено в браузере.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-621">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowWindowState"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="7f8f8-622">Сведения о свойстве зависимостей</span><span class="sxs-lookup"><span data-stu-id="7f8f8-622">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7f8f8-623">Поле идентификатора</span><span class="sxs-lookup"><span data-stu-id="7f8f8-623">Identifier field</span></span>|<xref:System.Windows.Window.WindowStateProperty>|  
|<span data-ttu-id="7f8f8-624">Значение свойства метаданных `true`</span><span class="sxs-lookup"><span data-stu-id="7f8f8-624">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Window.RestoreBounds" />
      </Docs>
    </Member>
    <Member MemberName="WindowStateProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty WindowStateProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty WindowStateProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.WindowStateProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly WindowStateProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ WindowStateProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7f8f8-625">Идентифицирует свойство зависимостей <see cref="P:System.Windows.Window.WindowState" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-625">Identifies the <see cref="P:System.Windows.Window.WindowState" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowStyle">
      <MemberSignature Language="C#" Value="public System.Windows.WindowStyle WindowStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.WindowStyle WindowStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.WindowStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property WindowStyle As WindowStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::WindowStyle WindowStyle { System::Windows::WindowStyle get(); void set(System::Windows::WindowStyle value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WindowStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7f8f8-626">Получение или установка стиля границы окна.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-626">Gets or sets a window's border style.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7f8f8-627">Объект <see cref="T:System.Windows.WindowStyle" />, задающий стиль границы окна.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-627">A <see cref="T:System.Windows.WindowStyle" /> that specifies a window's border style.</span>
          </span>
          <span data-ttu-id="7f8f8-628">Значение по умолчанию: <see cref="F:System.Windows.WindowStyle.SingleBorderWindow" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-628">The default is <see cref="F:System.Windows.WindowStyle.SingleBorderWindow" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f8f8-629"><xref:System.Windows.Window.WindowStyle%2A> может принимать одно из <xref:System.Windows.WindowStyle> значений перечисления, включая <xref:System.Windows.WindowStyle.None>, <xref:System.Windows.WindowStyle.ToolWindow>, <xref:System.Windows.WindowStyle.SingleBorderWindow> (по умолчанию), и <xref:System.Windows.WindowStyle.ThreeDBorderWindow>.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-629"><xref:System.Windows.Window.WindowStyle%2A> can be one of the <xref:System.Windows.WindowStyle> enumeration values, including <xref:System.Windows.WindowStyle.None>, <xref:System.Windows.WindowStyle.ToolWindow>, <xref:System.Windows.WindowStyle.SingleBorderWindow> (default), and <xref:System.Windows.WindowStyle.ThreeDBorderWindow>.</span></span>  
  
 <span data-ttu-id="7f8f8-630">На следующем рисунке показана стили окна на [!INCLUDE[TLA#tla_longhorn](~/includes/tlasharptla-longhorn-md.md)] (Windows Vista Aero тема с прозрачности включен):</span><span class="sxs-lookup"><span data-stu-id="7f8f8-630">The following figure shows the window styles on [!INCLUDE[TLA#tla_longhorn](~/includes/tlasharptla-longhorn-md.md)] (Windows Vista Aero theme, with transparent glass enabled):</span></span>  
  
 <span data-ttu-id="7f8f8-631">![Стили окна](~/add/media/windowoverviewfigure6.PNG "стили окна")</span><span class="sxs-lookup"><span data-stu-id="7f8f8-631">![Window styles](~/add/media/windowoverviewfigure6.PNG "Window styles")</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7f8f8-632">Не удается задать или получить значение этого свойства, если окно размещено в браузере.</span><span class="sxs-lookup"><span data-stu-id="7f8f8-632">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowWindowStyle"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="7f8f8-633">Сведения о свойстве зависимостей</span><span class="sxs-lookup"><span data-stu-id="7f8f8-633">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7f8f8-634">Поле идентификатора</span><span class="sxs-lookup"><span data-stu-id="7f8f8-634">Identifier field</span></span>|<xref:System.Windows.Window.WindowStyleProperty>|  
|<span data-ttu-id="7f8f8-635">Значение свойства метаданных `true`</span><span class="sxs-lookup"><span data-stu-id="7f8f8-635">Metadata properties set to `true`</span></span>|<span data-ttu-id="7f8f8-636">Нет</span><span class="sxs-lookup"><span data-stu-id="7f8f8-636">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowStyleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty WindowStyleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty WindowStyleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.WindowStyleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly WindowStyleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ WindowStyleProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7f8f8-637">Идентифицирует свойство зависимостей <see cref="P:System.Windows.Window.WindowStyle" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7f8f8-637">Identifies the <see cref="P:System.Windows.Window.WindowStyle" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>