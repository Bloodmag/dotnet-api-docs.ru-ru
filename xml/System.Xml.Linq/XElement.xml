<Type Name="XElement" FullName="System.Xml.Linq.XElement">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="15213489ac8be26d6703a879772581c4b4082467" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30721408" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XElement : System.Xml.Linq.XContainer, System.Xml.Serialization.IXmlSerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XElement extends System.Xml.Linq.XContainer implements class System.Xml.Serialization.IXmlSerializable" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Linq.XElement" />
  <TypeSignature Language="VB.NET" Value="Public Class XElement&#xA;Inherits XContainer&#xA;Implements IXmlSerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class XElement : System::Xml::Linq::XContainer, System::Xml::Serialization::IXmlSerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XDocument</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.Linq</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Xml.Linq.XContainer</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Xml.Serialization.IXmlSerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeDescriptionProvider(typeof(MS.Internal.Xml.Linq.ComponentModel.XTypeDescriptionProvider`1&lt;System.Xml.Linq.XElement&gt;))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Xml.Serialization.XmlSchemaProvider(null, IsAny=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="e2d0e-101">Представляет элемент XML.</span>
      <span class="sxs-lookup">
        <span data-stu-id="e2d0e-101">Represents an XML element.</span>
      </span>
      <span data-ttu-id="e2d0e-102">Сведения об использовании и примеры см. в разделе [Общие сведения о классе XElement](http://msdn.microsoft.com/library/d35180fe-7016-4895-9bfc-ba1e3f7875ec) и в подразделе "Примечания" на этой странице.</span>
      <span class="sxs-lookup">
        <span data-stu-id="e2d0e-102">See [XElement Class Overview](http://msdn.microsoft.com/library/d35180fe-7016-4895-9bfc-ba1e3f7875ec) and the Remarks section on this page for usage information and examples.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2d0e-103">Этот класс представляет элемент XML, основную конструкцию XML.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-103">This class represents an XML element, the fundamental XML construct.</span></span>  <span data-ttu-id="e2d0e-104">В разделе [Обзор класса XElement](http://msdn.microsoft.com/library/d35180fe-7016-4895-9bfc-ba1e3f7875ec) другие сведения об использовании.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-104">See [XElement Class Overview](http://msdn.microsoft.com/library/d35180fe-7016-4895-9bfc-ba1e3f7875ec) for other usage information.</span></span>  
  
 <span data-ttu-id="e2d0e-105">Элемент имеет <xref:System.Xml.Linq.XName>, при необходимости один или несколько атрибутов и при необходимости может включать содержимое (Дополнительные сведения см. в разделе <xref:System.Xml.Linq.XContainer.Nodes%2A>).</span><span class="sxs-lookup"><span data-stu-id="e2d0e-105">An element has an <xref:System.Xml.Linq.XName>, optionally one or more attributes, and can optionally contain content (for more information, see <xref:System.Xml.Linq.XContainer.Nodes%2A>).</span></span>  
  
 <span data-ttu-id="e2d0e-106"><xref:System.Xml.Linq.XElement> Может содержать следующие типы содержимого:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-106">An <xref:System.Xml.Linq.XElement> can contain the following types of content:</span></span>  
  
-   <xref:System.Xml.Linq.XElement>  
  
-   <xref:System.Xml.Linq.XComment>  
  
-   <xref:System.Xml.Linq.XProcessingInstruction>  
  
-   <xref:System.Xml.Linq.XText>  
  
 <span data-ttu-id="e2d0e-107">Дополнительные сведения о допустимых содержимое <xref:System.Xml.Linq.XElement>, в разделе [объектов допустимое содержимое XElement и XDocument](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="e2d0e-107">For details about the valid content of an <xref:System.Xml.Linq.XElement>, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="e2d0e-108"><xref:System.Xml.Linq.XElement> является производным от <xref:System.Xml.Linq.XContainer>, который является производным от <xref:System.Xml.Linq.XNode>.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-108"><xref:System.Xml.Linq.XElement> derives from <xref:System.Xml.Linq.XContainer>, which derives from <xref:System.Xml.Linq.XNode>.</span></span>  
  
 <span data-ttu-id="e2d0e-109">Некоторые <xref:System.Xml.Linq.XElement> методы можно использовать из XAML.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-109">Some <xref:System.Xml.Linq.XElement> methods can be used from XAML.</span></span> <span data-ttu-id="e2d0e-110">Дополнительные сведения см. в разделе [Динамические свойства LINQ to XML](http://msdn.microsoft.com/library/0455f47c-4a68-4f2e-a3f8-dd1d85b99012).</span><span class="sxs-lookup"><span data-stu-id="e2d0e-110">For more information, see [LINQ to XML Dynamic Properties](http://msdn.microsoft.com/library/0455f47c-4a68-4f2e-a3f8-dd1d85b99012).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2d0e-111">Следующий пример создает XML-дерева.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-111">The following example creates an XML tree.</span></span> <span data-ttu-id="e2d0e-112">Содержимое нового элемента поступает из запроса LINQ.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-112">The content of the new element comes from a LINQ query.</span></span>  
  
```csharp  
XElement xmlTree1 = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5),  
    new XElement("Child6", 6)  
);  
  
XElement xmlTree2 = new XElement("Root",  
    from el in xmlTree1.Elements()  
    where((int)el >= 3 && (int)el <= 5)  
    select el  
);  
Console.WriteLine(xmlTree2);  
```  
  
```vb  
Dim xmlTree1 As XElement = _  
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
            <Child6>6</Child6>  
        </Root>  
  
Dim xmlTree2 As XElement = _   
    <Root>  
        <%= From el In xmlTree1.Elements() _  
            Where el.Value >= 3 And el.Value <= 5 _  
            Select el %>  
    </Root>  
  
Console.WriteLine(xmlTree2)  
```  
  
 <span data-ttu-id="e2d0e-113">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-113">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
</Root>  
```  
  
 <span data-ttu-id="e2d0e-114">Ниже приведен тот же пример, но в этом случае XML находится в пространстве имен.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-114">The following is the same example, but in this case the XML is in a namespace.</span></span> <span data-ttu-id="e2d0e-115">Дополнительные сведения см. в разделе [работа с пространствами имен XML](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span><span class="sxs-lookup"><span data-stu-id="e2d0e-115">For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement xmlTree1 = new XElement(aw + "Root",  
    new XElement(aw + "Child1", 1),  
    new XElement(aw + "Child2", 2),  
    new XElement(aw + "Child3", 3),  
    new XElement(aw + "Child4", 4),  
    new XElement(aw + "Child5", 5),  
    new XElement(aw + "Child6", 6)  
);  
  
XElement xmlTree2 = new XElement(aw + "Root",  
    from el in xmlTree1.Elements()  
    where((int)el >= 3 && (int)el <= 5)  
    select el  
);  
Console.WriteLine(xmlTree2);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim xmlTree1 As XElement = _  
            <Root>  
                <Child1>1</Child1>  
                <Child2>2</Child2>  
                <Child3>3</Child3>  
                <Child4>4</Child4>  
                <Child5>5</Child5>  
                <Child6>6</Child6>  
            </Root>  
  
        Dim xmlTree2 As XElement = _   
            <Root>  
                <%= From el In xmlTree1.Elements() _  
                    Where el.Value >= 3 And el.Value <= 5 _  
                    Select el %>  
            </Root>  
  
        Console.WriteLine(xmlTree2)  
    End SUb  
End Module  
```  
  
 <span data-ttu-id="e2d0e-116">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-116">This example produces the following output:</span></span>  
  
```xml  
<Root xmlns="http://www.adventure-works.com">  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
</Root>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e2d0e-117">Инициализирует новый экземпляр класса <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-117">Initializes a new instance of the <see cref="T:System.Xml.Linq.XElement" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2d0e-118">Дополнительные сведения о допустимом содержимом, которое можно передать в этот конструктор, в разделе [объектов допустимое содержимое XElement и XDocument](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="e2d0e-118">For details about the valid content that can be passed to this constructor, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="e2d0e-119">Неявное преобразование из строки в <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-119">There is an implicit conversion from string to <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="e2d0e-120">Обычно этот конструктор используется для указания строки в качестве параметра вместо создания нового <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-120">Typical use of this constructor is to specify a string as the parameter instead of creating a new <xref:System.Xml.Linq.XName>.</span></span>  
  
 <span data-ttu-id="e2d0e-121">При создании элемента в пространстве имен, обычно используется для перегрузки оператора сложения с помощью <xref:System.Xml.Linq.XNamespace> и строку для создания <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-121">When creating an element in a namespace, typical use is to use the addition operator overload with an <xref:System.Xml.Linq.XNamespace> and a string to create an <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="e2d0e-122">Дополнительные сведения см. в разделе [работа с пространствами имен XML](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span><span class="sxs-lookup"><span data-stu-id="e2d0e-122">For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2d0e-123">Следующий пример создает XML-дерева.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-123">The following example creates an XML tree.</span></span> <span data-ttu-id="e2d0e-124">Содержимое нового элемента поступает из запроса LINQ.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-124">The content of the new element comes from a LINQ query.</span></span>  
  
```csharp  
XElement xmlTree1 = new XElement("Root",  
    new XElement("Child", 1),  
    new XElement("Child", 2),  
    new XElement("Child", 3),  
    new XElement("Child", 4),  
    new XElement("Child", 5),  
    new XElement("Child", 6)  
);  
  
XElement xmlTree2 = new XElement("Root",  
    from el in xmlTree1.Elements()  
    where((int)el >= 3 && (int)el <= 5)  
    select el  
);  
Console.WriteLine(xmlTree2);  
```  
  
```vb  
Dim xmlTree1 As XElement = _   
        <Root>  
            <Child>1</Child>  
            <Child>2</Child>  
            <Child>3</Child>  
            <Child>4</Child>  
            <Child>5</Child>  
            <Child>6</Child>  
        </Root>  
  
Dim xmlTree2 As XElement = _  
    <Root>  
        <%= From el In xmlTree1.Elements() _  
            Where el.Value >= 3 And el.Value <= 5 _  
            Select el %>  
    </Root>  
  
Console.WriteLine(xmlTree2)  
```  
  
 <span data-ttu-id="e2d0e-125">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-125">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child>3</Child>  
  <Child>4</Child>  
  <Child>5</Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XElement (System.Xml.Linq.XElement other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.Linq.XElement other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (other As XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XElement(System::Xml::Linq::XElement ^ other);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="other" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="other">
          <span data-ttu-id="e2d0e-126">Объект <see cref="T:System.Xml.Linq.XElement" /> для копирования.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-126">An <see cref="T:System.Xml.Linq.XElement" /> object to copy from.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2d0e-127">Инициализирует новый экземпляр класса <see cref="T:System.Xml.Linq.XElement" /> из другого объекта <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-127">Initializes a new instance of the <see cref="T:System.Xml.Linq.XElement" /> class from another <see cref="T:System.Xml.Linq.XElement" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2d0e-128">Этот конструктор создает глубокую копию элемента.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-128">This constructor makes a deep copy of an element.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2d0e-129">Следующий пример создает XML-дерева, создает клон дерева и затем вызывает метод <xref:System.Xml.Linq.XNode.DeepEquals%2A>, который проверяет равенство двух XML-деревьев.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-129">The following example creates an XML tree, creates a clone of the tree, and then calls <xref:System.Xml.Linq.XNode.DeepEquals%2A>, which tests whether the two XML trees are equal.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XElement("Child1", 1),  
    new XElement("Child2", 2)  
);  
  
// Create a clone of the tree.  
XElement treeClone = new XElement(xmlTree);  
  
Console.WriteLine("xmlTree = treeClone: {0}", XNode.DeepEquals(xmlTree, treeClone));  
  
// Do some work with xmlTree, perhaps pass it to other methods.  
xmlTree.Add(new XElement("Child3", 3));  
  
Console.WriteLine("xmlTree = treeClone: {0}", XNode.DeepEquals(xmlTree, treeClone));  
```  
  
```vb  
Dim xmlTree As XElement = _  
        <Root Att1="1">  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
        </Root>  
  
' Create a clone of the tree.  
Dim treeClone As XElement = New XElement(xmlTree)  
  
Console.WriteLine("xmlTree = treeClone: {0}", XNode.DeepEquals(xmlTree, treeClone))  
  
' Do some work with xmlTree, perhaps pass it to other methods.  
xmlTree.Add(New XElement("Child3", 3))  
  
Console.WriteLine("xmlTree = treeClone: {0}", XNode.DeepEquals(xmlTree, treeClone))  
```  
  
 <span data-ttu-id="e2d0e-130">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-130">This example produces the following output:</span></span>  
  
```  
xmlTree = treeClone: True  
xmlTree = treeClone: False  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XElement (System.Xml.Linq.XName name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.Linq.XName name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As XName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XElement(System::Xml::Linq::XName ^ name);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="e2d0e-131">
            <see cref="T:System.Xml.Linq.XName" />, содержащий имя элемента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-131">An <see cref="T:System.Xml.Linq.XName" /> that contains the name of the element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2d0e-132">Инициализирует новый экземпляр класса <see cref="T:System.Xml.Linq.XElement" /> с указанным именем.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-132">Initializes a new instance of the <see cref="T:System.Xml.Linq.XElement" /> class with the specified name.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2d0e-133">Этот конструктор создает элемент без содержимого и без атрибутов.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-133">This constructor creates an element with no content and no attributes.</span></span>  
  
 <span data-ttu-id="e2d0e-134">Неявное преобразование из строки в <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-134">There is an implicit conversion from string to <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="e2d0e-135">Обычно этот конструктор используется для указания строки в качестве параметра вместо создания нового <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-135">Typical use of this constructor is to specify a string as the parameter instead of creating a new <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="e2d0e-136">При создании элемента в пространстве имен, обычно используется для перегрузки оператора сложения с помощью <xref:System.Xml.Linq.XNamespace> и строку для создания <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-136">When creating an element in a namespace, typical use is to use the addition operator overload with an <xref:System.Xml.Linq.XNamespace> and a string to create an <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="e2d0e-137">Дополнительные сведения см. в разделе [работа с пространствами имен XML](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span><span class="sxs-lookup"><span data-stu-id="e2d0e-137">For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2d0e-138">В следующем примере создается элемент без содержимого.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-138">The following example creates an element with no content.</span></span>  
  
```csharp  
XElement el = new XElement("Root");  
Console.WriteLine(el);  
```  
  
```vb  
Dim el As XElement = <Root/>  
Console.WriteLine(el)  
```  
  
 <span data-ttu-id="e2d0e-139">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-139">This example produces the following output:</span></span>  
  
```xml  
<Root />  
```  
  
 <span data-ttu-id="e2d0e-140">В следующем примере создается элемент в пространстве имен без содержимого.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-140">The following example creates an element in a namespace with no content.</span></span> <span data-ttu-id="e2d0e-141">Дополнительные сведения см. в разделе [работа с пространствами имен XML](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span><span class="sxs-lookup"><span data-stu-id="e2d0e-141">For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
```  

XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root");  
Console.WriteLine(root);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim root = <Root/>  
        Console.WriteLine(root)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="e2d0e-142">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-142">This example produces the following output:</span></span>  
  
```xml  
<Root xmlns="http://www.adventure-works.com" />  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XElement (System.Xml.Linq.XStreamingElement other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.Linq.XStreamingElement other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XStreamingElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (other As XStreamingElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XElement(System::Xml::Linq::XStreamingElement ^ other);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="other" Type="System.Xml.Linq.XStreamingElement" />
      </Parameters>
      <Docs>
        <param name="other">
          <span data-ttu-id="e2d0e-143">Элемент <see cref="T:System.Xml.Linq.XStreamingElement" />, содержащий невычисленные запросы, итерации которых будут выполнены для содержимого <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-143">An <see cref="T:System.Xml.Linq.XStreamingElement" /> that contains unevaluated queries that will be iterated for the contents of this <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2d0e-144">Инициализируется новый экземпляр класса <see cref="T:System.Xml.Linq.XElement" /> из объекта <see cref="T:System.Xml.Linq.XStreamingElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-144">Initializes a new instance of the <see cref="T:System.Xml.Linq.XElement" /> class from an <see cref="T:System.Xml.Linq.XStreamingElement" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2d0e-145">Этот конструктор перебор содержимое указанной <xref:System.Xml.Linq.XStreamingElement>и создается элемент с его содержимым.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-145">This constructor iterates through the contents of the specified <xref:System.Xml.Linq.XStreamingElement>, and creates an element with its contents.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2d0e-146">В следующем примере создается XML-дерево источника и затем создает <xref:System.Xml.Linq.XStreamingElement> из запроса для источника XML-дерева.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-146">The following example creates a source XML tree, and then creates an <xref:System.Xml.Linq.XStreamingElement> from a query on the source XML tree.</span></span> <span data-ttu-id="e2d0e-147">Затем выполняется десериализация <xref:System.Xml.Linq.XStreamingElement> на консоль, добавляет новый элемент в исходном XML-дерево, а затем сериализует <xref:System.Xml.Linq.XStreamingElement> еще раз.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-147">It then serializes the <xref:System.Xml.Linq.XStreamingElement> to the console, adds a new element to the source XML tree, and then serializes the <xref:System.Xml.Linq.XStreamingElement> again.</span></span> <span data-ttu-id="e2d0e-148">Вы увидите этот элемент, добавляемый в исходном XML-дерево не включен в первую сериализацию, но включена в течение секунды.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-148">You can see that element newly added to the source XML tree is not included in the first serialization, but is included in the second.</span></span>  
  
```csharp  
XElement src = new XElement("Root",  
                   new XElement("Child1", 1),  
                   new XElement("Child2", 2),  
                   new XElement("Child3", 3)  
               );  
XStreamingElement xse = new XStreamingElement("NewRoot",  
                            from el in src.Elements()  
                            where (int)el >= 2  
                            select el  
                        );  
Console.WriteLine(xse);  
src.Add(new XElement("Child4", 4));  
Console.WriteLine("----");  
Console.WriteLine(xse);  
```  
  
```vb  
Dim src As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
        </Root>  
Dim xse As XStreamingElement = New XStreamingElement("NewRoot", _  
        From el In src.Elements() _  
        Where (CInt(el) >= 2) _  
        Select el _  
)  
Console.WriteLine(xse)  
src.Add(New XElement("Child4", 4))  
Console.WriteLine("----")  
Console.WriteLine(xse)  
```  
  
 <span data-ttu-id="e2d0e-149">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-149">This example produces the following output:</span></span>  
  
```  
<NewRoot>  
  <Child2>2</Child2>  
  <Child3>3</Child3>  
</NewRoot>  
----  
<NewRoot>  
  <Child2>2</Child2>  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
</NewRoot>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XElement (System.Xml.Linq.XName name, object content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.Linq.XName name, object content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As XName, content As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XElement(System::Xml::Linq::XName ^ name, System::Object ^ content);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
        <Parameter Name="content" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="e2d0e-150">
            <see cref="T:System.Xml.Linq.XName" />, содержащий имя элемента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-150">An <see cref="T:System.Xml.Linq.XName" /> that contains the element name.</span>
          </span>
        </param>
        <param name="content">
          <span data-ttu-id="e2d0e-151">Содержимое элемента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-151">The contents of the element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2d0e-152">Инициализирует новый экземпляр класса <see cref="T:System.Xml.Linq.XElement" /> с указанными именем и содержимым.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-152">Initializes a new instance of the <see cref="T:System.Xml.Linq.XElement" /> class with the specified name and content.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2d0e-153">Этот конструктор создает элемент с указанным содержимым и атрибутами.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-153">This constructor creates an element with the specified content and attributes.</span></span>  
  
 <span data-ttu-id="e2d0e-154">Неявное преобразование из строки в <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-154">There is an implicit conversion from string to <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="e2d0e-155">Обычно этот конструктор используется для указания строки в качестве параметра вместо создания нового <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-155">Typical use of this constructor is to specify a string as the parameter instead of creating a new <xref:System.Xml.Linq.XName>.</span></span>  
  
 <span data-ttu-id="e2d0e-156">При создании элемента в пространстве имен, обычно используется для перегрузки оператора сложения с помощью <xref:System.Xml.Linq.XNamespace> и строку для создания <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-156">When creating an element in a namespace, typical use is to use the addition operator overload with an <xref:System.Xml.Linq.XNamespace> and a string to create an <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="e2d0e-157">Дополнительные сведения см. в разделе [работа с пространствами имен XML](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span><span class="sxs-lookup"><span data-stu-id="e2d0e-157">For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
 <span data-ttu-id="e2d0e-158">Дополнительные сведения о допустимом содержимом, которое можно передать в этот конструктор, в разделе [объектов допустимое содержимое XElement и XDocument](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="e2d0e-158">For details about the valid content that can be passed to this constructor, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2d0e-159">Следующий пример создает XML-дерева.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-159">The following example creates an XML tree.</span></span> <span data-ttu-id="e2d0e-160">Содержимое нового элемента поступает из запроса LINQ.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-160">The content of the new element comes from a LINQ query.</span></span>  
  
```csharp  
XElement xmlTree1 = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5),  
    new XElement("Child6", 6)  
);  
  
XElement xmlTree2 = new XElement("Root",  
    from el in xmlTree1.Elements()  
    where((int)el >= 3 && (int)el <= 5)  
    select el  
);  
Console.WriteLine(xmlTree2);  
```  
  
```vb  
Dim xmlTree1 As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
            <Child6>6</Child6>  
        </Root>  
  
Dim xmlTree2 As XElement = _  
    <Root>  
        <%= From el In xmlTree1.Elements() _  
            Where el.Value >= 3 And el.Value <= 5 _  
            Select el %>  
    </Root>  
  
Console.WriteLine(xmlTree2)  
```  
  
 <span data-ttu-id="e2d0e-161">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-161">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
</Root>  
```  
  
 <span data-ttu-id="e2d0e-162">Следующий пример создает XML-дерево с различными типами содержимого.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-162">The following example creates an XML tree with a variety of types of content.</span></span>  
  
```csharp  
XElement root;  
  
// String content:  
root = new XElement("Root", "Some text");  
Console.WriteLine(root);  
  
// XElement object content:  
root = new XElement("Root",   
    new XElement("NewChild", "n")  
);  
Console.WriteLine(root);  
  
// XAttribute object content:  
root = new XElement("Root",   
    new XAttribute("NewAttribute", "n")  
);  
Console.WriteLine(root);  
  
// Double content:  
double dbl = 12.345;  
root = new XElement("Root", dbl);  
Console.WriteLine(root);  
  
// DateTime content:  
DateTime dt = new DateTime(2006, 10, 6, 12, 30, 00);  
root = new XElement("Root", dt);  
Console.WriteLine(root);  
  
// String array content:  
// Any collection other than a collection of XElement or XAttribute objects  
// are converted to strings. The strings are concatenated and added.  
string[] stringArray = {  
    "abc",  
    "def",  
    "ghi"  
};  
root = new XElement("Root", stringArray);  
Console.WriteLine(root);  
  
// XElement object array content:  
XElement[] ellArray = {  
    new XElement("NewChild1", 1),  
    new XElement("NewChild2", 2),  
    new XElement("NewChild3", 3)  
};  
root = new XElement("Root", ellArray);  
Console.WriteLine(root);  
  
// XAttribute object array content:  
XAttribute[] attArray = {  
    new XAttribute("NewAtt1", 1),  
    new XAttribute("NewAtt2", 2),  
    new XAttribute("NewAtt3", 3)  
};  
root = new XElement("Root", attArray);  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement  
  
' String content:  
root = <Root>Some text</Root>  
Console.WriteLine(root)  
  
' XElement object content:  
root = <Root>  
           <NewChild>n</NewChild>  
       </Root>  
Console.WriteLine(root)  
  
' XAttribute object content:  
root = <Root NewAttribute="n"/>  
Console.WriteLine(root)  
  
' Double content:  
Dim dbl As Double = 12.345  
root = <Root><%= dbl %></Root>  
Console.WriteLine(root)  
  
' DateTime content:  
Dim dt As DateTime = New DateTime(2006, 10, 6, 12, 30, 0)  
root = <Root><%= dt %></Root>  
Console.WriteLine(root)  
  
' String array content:  
' Any collection other than a collection of XElement or XAttribute objects  
' are converted to strings. The strings are concatenated and added.  
  
Dim stringArray As String() = { _  
    "abc", _  
    "def", _  
    "ghi" _  
}  
root = <Root><%= stringArray %></Root>  
Console.WriteLine(root)  
  
' XElement object array content:  
Dim ellArray As XElement() = { _  
    <NewChild1>1</NewChild1>, _  
    <NewChild2>2</NewChild2>, _  
    <NewChild3>3</NewChild3> _  
}  
  
root = <Root><%= ellArray %></Root>  
Console.WriteLine(root)  
  
' XAttribute object array content  
Dim attArray As XAttribute() = { _  
    New XAttribute("NewAtt1", 1), _  
    New XAttribute("NewAtt2", 2), _  
    New XAttribute("NewAtt3", 3) _  
}  
root = <Root><%= attArray %></Root>  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="e2d0e-163">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-163">This example produces the following output:</span></span>  
  
```  
<Root>Some text</Root>  
<Root>  
  <NewChild>n</NewChild>  
</Root>  
<Root NewAttribute="n" />  
<Root>12.345</Root>  
<Root>2006-10-06T12:30:00</Root>  
<Root>abcdefghi</Root>  
<Root>  
  <NewChild1>1</NewChild1>  
  <NewChild2>2</NewChild2>  
  <NewChild3>3</NewChild3>  
</Root>  
<Root NewAtt1="1" NewAtt2="2" NewAtt3="3" />  
```  
  
 <span data-ttu-id="e2d0e-164">Следующий пример создает XML-дерева в пространстве имен.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-164">The following example creates an XML tree in a namespace.</span></span>  
  
```csharp  
// Create an XML tree in a namespace.  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root",  
    new XElement(aw + "Child", "child content")  
);  
Console.WriteLine(root);  
```  
  
```vb  
' Create an XML tree in a namespace.  
Dim root As XElement = _   
    <Root xmlns='http://www.adventure-works.com'>  
        <Child>child content</Child>  
    </Root>  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="e2d0e-165">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-165">This example produces the following output:</span></span>  
  
```xml  
<Root xmlns="http://www.adventure-works.com">  
  <Child>child content</Child>  
</Root>  
```  
  
 <span data-ttu-id="e2d0e-166">Следующий пример создает XML-дерево с помощью вложенных пространств имен.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-166">The following example creates an XML tree with nested namespaces.</span></span>  
  
```csharp  
// Create an XML tree with nested namespaces.  
XNamespace aw = "http://www.adventure-works.com";  
XNamespace fc = "www.fourthcoffee.com";  
XDocument root = new XDocument(  
    new XDeclaration("1.0", "utf-8", "yes"),  
    new XElement(aw + "Root",  
        new XElement(fc + "Child",  
            new XElement(aw + "DifferentChild", "other content")  
        )  
    )  
);  
Console.WriteLine(root);  
```  
  
```vb  
' Create an XML tree with nested namespaces.  
Dim root As XDocument = _   
    <?xml version='1.0'?>  
    <Root xmlns='http://www.adventure-works.com'>  
        <Child xmlns='www.fourthcoffee.com'>  
        <DifferentChild xmlns='http://www.adventure-works.com'>other content</DifferentChild>  
        </Child>  
    </Root>  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="e2d0e-167">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-167">This example produces the following output:</span></span>  
  
```xml  
<Root xmlns="http://www.adventure-works.com">  
  <Child xmlns="www.fourthcoffee.com">  
    <DifferentChild xmlns="http://www.adventure-works.com">other content</DifferentChild>  
  </Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XElement (System.Xml.Linq.XName name, params object[] content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.Linq.XName name, object[] content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As XName, ParamArray content As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XElement(System::Xml::Linq::XName ^ name, ... cli::array &lt;System::Object ^&gt; ^ content);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
        <Parameter Name="content" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="e2d0e-168">
            <see cref="T:System.Xml.Linq.XName" />, содержащий имя элемента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-168">An <see cref="T:System.Xml.Linq.XName" /> that contains the element name.</span>
          </span>
        </param>
        <param name="content">
          <span data-ttu-id="e2d0e-169">Начальное содержимое элемента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-169">The initial content of the element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2d0e-170">Инициализирует новый экземпляр класса <see cref="T:System.Xml.Linq.XElement" /> с указанными именем и содержимым.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-170">Initializes a new instance of the <see cref="T:System.Xml.Linq.XElement" /> class with the specified name and content.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2d0e-171">Этот конструктор создает элемент с указанным содержимым и атрибутами.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-171">This constructor creates an element with the specified content and attributes.</span></span>  
  
 <span data-ttu-id="e2d0e-172">Неявное преобразование из строки в <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-172">There is an implicit conversion from string to <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="e2d0e-173">Обычно этот конструктор используется для указания строки в качестве параметра вместо создания нового <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-173">Typical use of this constructor is to specify a string as the parameter instead of creating a new <xref:System.Xml.Linq.XName>.</span></span>  
  
 <span data-ttu-id="e2d0e-174">При создании элемента в пространстве имен, обычно используется для перегрузки оператора сложения с помощью <xref:System.Xml.Linq.XNamespace> и строку для создания <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-174">When creating an element in a namespace, typical use is to use the addition operator overload with an <xref:System.Xml.Linq.XNamespace> and a string to create an <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="e2d0e-175">Дополнительные сведения см. в разделе [работа с пространствами имен XML](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span><span class="sxs-lookup"><span data-stu-id="e2d0e-175">For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
 <span data-ttu-id="e2d0e-176">Дополнительные сведения о допустимом содержимом, которое можно передать в этот конструктор, в разделе [объектов допустимое содержимое XElement и XDocument](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="e2d0e-176">For details about the valid content that can be passed to this constructor, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2d0e-177">Следующий пример создает XML-дерева.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-177">The following example creates an XML tree.</span></span> <span data-ttu-id="e2d0e-178">Содержимое нового элемента поступает из запроса LINQ.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-178">The content of the new element comes from a LINQ query.</span></span>  
  
```csharp  
XElement xmlTree1 = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5),  
    new XElement("Child6", 6)  
);  
  
XElement xmlTree2 = new XElement("Root",  
    from el in xmlTree1.Elements()  
    where((int)el >= 3 && (int)el <= 5)  
    select el  
);  
Console.WriteLine(xmlTree2);  
```  
  
```vb  
Dim xmlTree1 As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
            <Child6>6</Child6>  
        </Root>  
  
Dim xmlTree2 As XElement = _   
    <Root>  
        <%= From el In xmlTree1.Elements() _  
            Where el.Value >= 3 And el.Value <= 5 _  
            Select el %>  
    </Root>  
  
Console.WriteLine(xmlTree2)  
```  
  
 <span data-ttu-id="e2d0e-179">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-179">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
</Root>  
```  
  
 <span data-ttu-id="e2d0e-180">Следующий пример создает XML-дерево с различными типами содержимого.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-180">The following example creates an XML tree with a variety of types of content.</span></span>  
  
```csharp  
XElement root;  
  
// String content:  
root = new XElement("Root", "Some text");  
Console.WriteLine(root);  
  
// XElement object content:  
root = new XElement("Root",   
    new XElement("NewChild", "n")  
);  
Console.WriteLine(root);  
  
// XAttribute object content:  
root = new XElement("Root",   
    new XAttribute("NewAttribute", "n")  
);  
Console.WriteLine(root);  
  
// Double content:  
double dbl = 12.345;  
root = new XElement("Root", dbl);  
Console.WriteLine(root);  
  
// DateTime content:  
DateTime dt = new DateTime(2006, 10, 6, 12, 30, 00);  
root = new XElement("Root", dt);  
Console.WriteLine(root);  
  
// String array content:  
// Any collection other than a collection of XElement or XAttribute objects  
// are converted to strings. The strings are concatenated and added.  
string[] stringArray = {  
    "abc",  
    "def",  
    "ghi"  
};  
root = new XElement("Root", stringArray);  
Console.WriteLine(root);  
  
// XElement object array content:  
XElement[] ellArray = {  
    new XElement("NewChild1", 1),  
    new XElement("NewChild2", 2),  
    new XElement("NewChild3", 3)  
};  
root = new XElement("Root", ellArray);  
Console.WriteLine(root);  
  
// XAttribute object array content:  
XAttribute[] attArray = {  
    new XAttribute("NewAtt1", 1),  
    new XAttribute("NewAtt2", 2),  
    new XAttribute("NewAtt3", 3)  
};  
root = new XElement("Root", attArray);  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement  
  
' String content:  
root = <Root>Some text</Root>  
Console.WriteLine(root)  
  
' XElement object content:  
root = <Root>  
           <NewChild>n</NewChild>  
       </Root>  
Console.WriteLine(root)  
  
' XAttribute object content:  
root = <Root NewAttribute="n"/>  
Console.WriteLine(root)  
  
' Double content:  
Dim dbl As Double = 12.345  
root = <Root><%= dbl %></Root>  
Console.WriteLine(root)  
  
' DateTime content:  
Dim dt As DateTime = New DateTime(2006, 10, 6, 12, 30, 0)  
root = <Root><%= dt %></Root>  
Console.WriteLine(root)  
  
' String array content:  
' Any collection other than a collection of XElement or XAttribute objects  
' are converted to strings. The strings are concatenated and added.  
  
Dim stringArray As String() = { _  
    "abc", _  
    "def", _  
    "ghi" _  
}  
root = <Root><%= stringArray %></Root>  
Console.WriteLine(root)  
  
' XElement object array content:  
Dim ellArray As XElement() = { _  
    <NewChild1>1</NewChild1>, _  
    <NewChild2>2</NewChild2>, _  
    <NewChild3>3</NewChild3> _  
}  
  
root = <Root><%= ellArray %></Root>  
Console.WriteLine(root)  
  
' XAttribute object array content  
Dim attArray As XAttribute() = { _  
    New XAttribute("NewAtt1", 1), _  
    New XAttribute("NewAtt2", 2), _  
    New XAttribute("NewAtt3", 3) _  
}  
root = <Root><%= attArray %></Root>  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="e2d0e-181">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-181">This example produces the following output:</span></span>  
  
```  
<Root>Some text</Root>  
<Root>  
  <NewChild>n</NewChild>  
</Root>  
<Root NewAttribute="n" />  
<Root>12.345</Root>  
<Root>2006-10-06T12:30:00</Root>  
<Root>abcdefghi</Root>  
<Root>  
  <NewChild1>1</NewChild1>  
  <NewChild2>2</NewChild2>  
  <NewChild3>3</NewChild3>  
</Root>  
<Root NewAtt1="1" NewAtt2="2" NewAtt3="3" />  
```  
  
 <span data-ttu-id="e2d0e-182">Следующий пример создает XML-дерева в пространстве имен.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-182">The following example creates an XML tree in a namespace.</span></span>  
  
```csharp  
// Create an XML tree in a namespace.  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root",  
    new XElement(aw + "Child", "child content")  
);  
Console.WriteLine(root);  
```  
  
```vb  
' Create an XML tree in a namespace.  
Dim root As XElement = _   
    <Root xmlns='http://www.adventure-works.com'>  
        <Child>child content</Child>  
    </Root>  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="e2d0e-183">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-183">This example produces the following output:</span></span>  
  
```xml  
<Root xmlns="http://www.adventure-works.com">  
  <Child>child content</Child>  
</Root>  
```  
  
 <span data-ttu-id="e2d0e-184">Следующий пример создает XML-дерево с помощью вложенных пространств имен.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-184">The following example creates an XML tree with nested namespaces.</span></span>  
  
```csharp  
// Create an XML tree with nested namespaces.  
XNamespace aw = "http://www.adventure-works.com";  
XNamespace fc = "www.fourthcoffee.com";  
XElement root = new XElement(aw + "Root",  
    new XElement(fc + "Child",  
        new XElement(aw + "DifferentChild", "other content")  
    )  
);  
Console.WriteLine(root);  
```  
  
```vb  
' Create an XML tree with nested namespaces.  
Dim root As XDocument = _   
    <?xml version='1.0'?>  
    <Root xmlns='http://www.adventure-works.com'>  
        <Child xmlns='www.fourthcoffee.com'>  
        <DifferentChild xmlns='http://www.adventure-works.com'>other content</DifferentChild>  
        </Child>  
    </Root>  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="e2d0e-185">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-185">This example produces the following output:</span></span>  
  
```xml  
<Root xmlns="http://www.adventure-works.com">  
  <Child xmlns="www.fourthcoffee.com">  
    <DifferentChild xmlns="http://www.adventure-works.com">other content</DifferentChild>  
  </Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AncestorsAndSelf">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e2d0e-186">Возвращает коллекцию элементов, содержащих данный элемент или являющихся его предшественниками.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-186">Returns a collection of elements that contain this element, and the ancestors of this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2d0e-187">Элементы в возвращаемой коллекции располагаются в обратном порядке документа.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-187">The elements in the returned collection are in reverse document order.</span></span>  
  
 <span data-ttu-id="e2d0e-188">Этот метод использует отложенное выполнение.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-188">This method uses deferred execution.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XNode.Ancestors" />
      </Docs>
    </MemberGroup>
    <Member MemberName="AncestorsAndSelf">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; AncestorsAndSelf ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; AncestorsAndSelf() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.AncestorsAndSelf" />
      <MemberSignature Language="VB.NET" Value="Public Function AncestorsAndSelf () As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ AncestorsAndSelf();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e2d0e-189">Возвращает коллекцию элементов, содержащих данный элемент или являющихся его предшественниками.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-189">Returns a collection of elements that contain this element, and the ancestors of this element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2d0e-190">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> для <see cref="T:System.Xml.Linq.XElement" /> элементов, содержащих этот элемент и предшественников этого элемента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-190">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of elements that contain this element, and the ancestors of this element.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2d0e-191">Элементы в возвращаемой коллекции располагаются в обратном порядке документа.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-191">The elements in the returned collection are in reverse document order.</span></span>  
  
 <span data-ttu-id="e2d0e-192">Этот метод использует отложенное выполнение.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-192">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2d0e-193">Следующий пример создает XML-дерева.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-193">The following example creates an XML tree.</span></span> <span data-ttu-id="e2d0e-194">Затем выполняется поиск `GrandChild` элемент, а затем выводит предков.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-194">It then finds the `GrandChild` element, and then prints the ancestors of it.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child",  
        new XElement("GrandChild", "element content")  
    )  
);  
XElement gc = xmlTree.Element("Child").Element("GrandChild");  
IEnumerable<XElement> aas =  
    from el in gc.AncestorsAndSelf()  
    select el;  
foreach (XElement el in aas)  
    Console.WriteLine(el.Name);  
```  
  
```vb  
Dim xmlTree As XElement = _   
    <Root>  
        <Child>  
            <GrandChild>element content</GrandChild>  
        </Child>  
    </Root>  
  
Dim GC As XElement = xmlTree.<Child>.<GrandChild>(0)  
  
Dim aas As IEnumerable(Of XElement) = _  
    From el In GC.AncestorsAndSelf() _  
    Select el  
  
For Each el In aas  
    Console.WriteLine(el.Name)  
Next  
```  
  
 <span data-ttu-id="e2d0e-195">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-195">This example produces the following output:</span></span>  
  
```  
GrandChild  
Child  
Root  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XNode.Ancestors" />
      </Docs>
    </Member>
    <Member MemberName="AncestorsAndSelf">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; AncestorsAndSelf (System.Xml.Linq.XName name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; AncestorsAndSelf(class System.Xml.Linq.XName name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.AncestorsAndSelf(System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Public Function AncestorsAndSelf (name As XName) As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ AncestorsAndSelf(System::Xml::Linq::XName ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="e2d0e-196">Выражение <see cref="T:System.Xml.Linq.XName" /> для сопоставления.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-196">The <see cref="T:System.Xml.Linq.XName" /> to match.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2d0e-197">Возвращает фильтрованную коллекцию элементов, содержащих данный элемент или являющихся его предшественниками.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-197">Returns a filtered collection of elements that contain this element, and the ancestors of this element.</span>
          </span>
          <span data-ttu-id="e2d0e-198">В коллекцию включаются только элементы, соответствующие <see cref="T:System.Xml.Linq.XName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-198">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2d0e-199">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> для <see cref="T:System.Xml.Linq.XElement" />, содержащий этот элемент и предшественников этого элемента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-199">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contain this element, and the ancestors of this element.</span>
          </span>
          <span data-ttu-id="e2d0e-200">В коллекцию включаются только элементы, соответствующие <see cref="T:System.Xml.Linq.XName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-200">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2d0e-201">Элементы в возвращаемой коллекции располагаются в обратном порядке документа.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-201">The elements in the returned collection are in reverse document order.</span></span>  
  
 <span data-ttu-id="e2d0e-202">Этот метод использует отложенное выполнение.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-202">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2d0e-203">В следующем примере это.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-203">The following example uses this .</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child",  
        new XElement("GrandChild", "element content")  
    )  
);  
XElement gc = xmlTree.Element("Child").Element("GrandChild");  
IEnumerable<XElement> aas = gc.AncestorsAndSelf("Child");  
foreach (XElement el in aas)  
    Console.WriteLine(el.Name);  
```  
  
```vb  
Dim xmlTree As XElement = _   
    <Root>  
        <Child>  
            <GrandChild>element content</GrandChild>  
        </Child>  
    </Root>  
  
Dim GC As XElement = xmlTree.<Child>.<GrandChild>(0)  
Dim aas As IEnumerable(Of XElement) = GC.AncestorsAndSelf("Child")  
For Each el In aas  
    Console.WriteLine(el.Name)  
Next  
```  
  
 <span data-ttu-id="e2d0e-204">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-204">This example produces the following output:</span></span>  
  
```  
Child  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XNode.Ancestors" />
      </Docs>
    </Member>
    <Member MemberName="Attribute">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XAttribute Attribute (System.Xml.Linq.XName name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Linq.XAttribute Attribute(class System.Xml.Linq.XName name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Attribute(System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Public Function Attribute (name As XName) As XAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Linq::XAttribute ^ Attribute(System::Xml::Linq::XName ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XAttribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="e2d0e-205">Имя <see cref="T:System.Xml.Linq.XName" /> атрибута <see cref="T:System.Xml.Linq.XAttribute" /> для получения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-205">The <see cref="T:System.Xml.Linq.XName" /> of the <see cref="T:System.Xml.Linq.XAttribute" /> to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2d0e-206">Возвращает атрибут <see cref="T:System.Xml.Linq.XAttribute" /> данного элемента <see cref="T:System.Xml.Linq.XElement" />, имеющий указанное имя <see cref="T:System.Xml.Linq.XName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-206">Returns the <see cref="T:System.Xml.Linq.XAttribute" /> of this <see cref="T:System.Xml.Linq.XElement" /> that has the specified <see cref="T:System.Xml.Linq.XName" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2d0e-207">
            <see cref="T:System.Xml.Linq.XAttribute" />, имеющий указанное <see cref="T:System.Xml.Linq.XName" />; <see langword="null" />, если не существует атрибута с указанным именем.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-207">An <see cref="T:System.Xml.Linq.XAttribute" /> that has the specified <see cref="T:System.Xml.Linq.XName" />; <see langword="null" /> if there is no attribute with the specified name.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2d0e-208">Некоторые возвращают коллекции элементов или атрибутов.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-208">Some  return collections of elements or attributes.</span></span> <span data-ttu-id="e2d0e-209">Этот метод возвращает только один атрибут.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-209">This method returns only a single attribute.</span></span> <span data-ttu-id="e2d0e-210">Иногда это называется *одноэлементный* (в отличие от к *коллекции*).</span><span class="sxs-lookup"><span data-stu-id="e2d0e-210">Sometimes this is referred to as a *singleton* (in contrast to a *collection*).</span></span>  
  
 <span data-ttu-id="e2d0e-211">Пользователи Visual Basic могут использовать встроенную ось атрибутов для извлечения значения атрибута с указанным именем.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-211">Visual Basic users can use the integrated attribute axis to retrieve the value of an attribute with a specified name.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2d0e-212">В следующем примере создается элемент с атрибутом.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-212">The following example creates an element with an attribute.</span></span> <span data-ttu-id="e2d0e-213">Затем извлекается атрибута с помощью этого метода.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-213">It then retrieves the attribute using this method.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XAttribute("Att", "attribute content")  
);  
XAttribute att = xmlTree.Attribute("Att");  
Console.WriteLine(att);  
```  
  
```vb  
Dim xmlTree As XElement = <Root Att="attribute content"/>  
  
Dim att As XAttribute = xmlTree.Attribute("Att")  
Console.WriteLine(att)  
```  
  
 <span data-ttu-id="e2d0e-214">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-214">This example produces the following output:</span></span>  
  
```  
Att="attribute content"  
```  
  
 <span data-ttu-id="e2d0e-215">Ниже приведен тот же пример, но в этом случае XML находится в пространстве имен.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-215">The following is the same example, but in this case the XML is in a namespace.</span></span> <span data-ttu-id="e2d0e-216">Дополнительные сведения см. в разделе [работа с пространствами имен XML](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span><span class="sxs-lookup"><span data-stu-id="e2d0e-216">For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement xmlTree = new XElement(aw + "Root",  
    new XAttribute(XNamespace.Xmlns + "aw", "http://www.adventure-works.com"),  
    new XAttribute(aw + "Att", "attribute content")  
);  
XAttribute att = xmlTree.Attribute(aw + "Att");  
Console.WriteLine(att);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim xmlTree As XElement = <aw:Root aw:Att="attribute content"/>  
  
        Dim att As XAttribute = xmlTree.Attribute(GetXmlNamespace(aw) + "Att")  
        Console.WriteLine(att)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="e2d0e-217">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-217">This example produces the following output:</span></span>  
  
```  
aw:Att="attribute content"  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Attributes">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e2d0e-218">Возвращает коллекцию атрибутов этого элемента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-218">Returns a collection of attributes of this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2d0e-219">Этот метод использует отложенное выполнение.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-219">This method uses deferred execution.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XAttribute&gt; Attributes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XAttribute&gt; Attributes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public Function Attributes () As IEnumerable(Of XAttribute)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XAttribute ^&gt; ^ Attributes();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XAttribute&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e2d0e-220">Возвращает коллекцию атрибутов этого элемента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-220">Returns a collection of attributes of this element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2d0e-221">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> для <see cref="T:System.Xml.Linq.XAttribute" /> атрибутов этого элемента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-221">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XAttribute" /> of attributes of this element.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2d0e-222">Атрибуты в возвращаемой коллекции отображаются в порядке, в котором они были добавлены к элементу.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-222">The attributes in the returned collection are in the order that they were added to the element.</span></span> <span data-ttu-id="e2d0e-223">При синтаксическом анализе XML-дерева из XML, атрибуты возвращаются в порядке документа.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-223">If the XML tree was parsed from XML, the attributes are returned in document order.</span></span>  
  
 <span data-ttu-id="e2d0e-224">Этот метод использует отложенное выполнение.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-224">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2d0e-225">В следующем примере создается элемент с двумя атрибутами.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-225">The following example creates an element with two attributes.</span></span> <span data-ttu-id="e2d0e-226">Затем это используется для извлечения всех атрибутов элемента.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-226">It then uses this  to retrieve all attributes of the element.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XAttribute("Att1", "content1"),  
    new XAttribute("Att2", "content2")  
);  
IEnumerable<XAttribute> attList =  
    from at in xmlTree.Attributes()  
    select at;  
foreach (XAttribute att in attList)  
    Console.WriteLine(att);  
```  
  
```vb  
Dim xmlTree As XElement = <Root Att1="content1" Att2="content2"/>  
  
Dim attList As IEnumerable(Of XAttribute) = _  
From at In xmlTree.Attributes() _  
Select at  
  
For Each att In attList  
    Console.WriteLine(att)  
Next  
```  
  
 <span data-ttu-id="e2d0e-227">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-227">This example produces the following output:</span></span>  
  
```  
Att1="content1"  
Att2="content2"  
```  
  
 <span data-ttu-id="e2d0e-228">Ниже приведен тот же пример, но в этом случае XML находится в пространстве имен.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-228">The following is the same example, but in this case the XML is in a namespace.</span></span> <span data-ttu-id="e2d0e-229">Дополнительные сведения см. в разделе [работа с пространствами имен XML](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span><span class="sxs-lookup"><span data-stu-id="e2d0e-229">For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement xmlTree = new XElement(aw + "Root",  
    new XAttribute(aw + "Att1", "content1"),  
    new XAttribute(aw + "Att2", "content2"),  
    new XAttribute(XNamespace.Xmlns + "aw", "http://www.adventure-works.com")  
);  
IEnumerable<XAttribute> attList =  
    from at in xmlTree.Attributes()  
    select at;  
foreach (XAttribute att in attList)  
    Console.WriteLine(att);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim xmlTree As XElement = <aw:Root aw:Att1="content1" aw:Att2="content2"/>  
  
        Dim attList As IEnumerable(Of XAttribute) = _  
            From at In xmlTree.Attributes() _  
            Select at  
  
        For Each att In attList  
            Console.WriteLine(att)  
        Next  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="e2d0e-230">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-230">This example produces the following output:</span></span>  
  
```  
aw:Att1="content1"  
aw:Att2="content2"  
xmlns:aw="http://www.adventure-works.com"  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XContainer.Elements" />
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XAttribute&gt; Attributes (System.Xml.Linq.XName name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XAttribute&gt; Attributes(class System.Xml.Linq.XName name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Attributes(System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Public Function Attributes (name As XName) As IEnumerable(Of XAttribute)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XAttribute ^&gt; ^ Attributes(System::Xml::Linq::XName ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XAttribute&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="e2d0e-231">Выражение <see cref="T:System.Xml.Linq.XName" /> для сопоставления.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-231">The <see cref="T:System.Xml.Linq.XName" /> to match.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2d0e-232">Возвращает фильтрованную коллекцию атрибутов этого элемента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-232">Returns a filtered collection of attributes of this element.</span>
          </span>
          <span data-ttu-id="e2d0e-233">В коллекцию включаются только элементы, соответствующие <see cref="T:System.Xml.Linq.XName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-233">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2d0e-234">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> для <see cref="T:System.Xml.Linq.XAttribute" />, содержащий атрибуты этого элемента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-234">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XAttribute" /> that contains the attributes of this element.</span>
          </span>
          <span data-ttu-id="e2d0e-235">В коллекцию включаются только элементы, соответствующие <see cref="T:System.Xml.Linq.XName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-235">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2d0e-236">Имена атрибутов должны быть уникальными внутри элемента.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-236">Attribute names must be unique within an element.</span></span> <span data-ttu-id="e2d0e-237">Таким образом это может возвращать либо коллекцию, содержащую только один атрибут, или она может возвращать пустую коллекцию.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-237">Therefore, this  can return either a collection that contains only one attribute, or it can return an empty collection.</span></span>  
  
 <span data-ttu-id="e2d0e-238">Этот метод использует отложенное выполнение.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-238">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2d0e-239">В следующем примере это.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-239">The following example uses this .</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XAttribute("Att1", "content1"),  
    new XAttribute("Att2", "content2")  
);  
IEnumerable<XAttribute> attList = xmlTree.Attributes("Att1");  
foreach (XAttribute att in attList)  
    Console.WriteLine(att);  
```  
  
```vb  
Dim xmlTree As XElement = <Root Att1="content1" Att2="content2"/>  
  
Dim attList As IEnumerable(Of XAttribute) = xmlTree.Attributes("Att1")  
  
For Each att In attList  
    Console.WriteLine(att)  
Next  
```  
  
 <span data-ttu-id="e2d0e-240">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-240">This example produces the following output:</span></span>  
  
```  
Att1="content1"  
```  
  
 <span data-ttu-id="e2d0e-241">Ниже приведен тот же пример, но в этом случае XML находится в пространстве имен.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-241">The following is the same example, but in this case the XML is in a namespace.</span></span> <span data-ttu-id="e2d0e-242">Дополнительные сведения см. в разделе [работа с пространствами имен XML](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span><span class="sxs-lookup"><span data-stu-id="e2d0e-242">For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement xmlTree = new XElement(aw + "Root",  
    new XAttribute(XNamespace.Xmlns + "aw", "http://www.adventure-works.com"),  
    new XAttribute(aw + "Att1", "content1"),  
    new XAttribute(aw + "Att2", "content2")  
);  
IEnumerable<XAttribute> attList = xmlTree.Attributes(aw + "Att1");  
foreach (XAttribute att in attList)  
    Console.WriteLine(att);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim xmlTree As XElement = <aw:Root aw:Att1="content1" aw:Att2="content2"/>  
  
        Dim attList As IEnumerable(Of XAttribute) = xmlTree.Attributes(GetXmlNamespace(aw) + "Att1")  
  
        For Each att In attList  
            Console.WriteLine(att)  
        Next  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="e2d0e-243">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-243">This example produces the following output:</span></span>  
  
```  
aw:Att1="content1"  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DescendantNodesAndSelf">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XNode&gt; DescendantNodesAndSelf ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XNode&gt; DescendantNodesAndSelf() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.DescendantNodesAndSelf" />
      <MemberSignature Language="VB.NET" Value="Public Function DescendantNodesAndSelf () As IEnumerable(Of XNode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XNode ^&gt; ^ DescendantNodesAndSelf();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XNode&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e2d0e-244">Возвращает коллекцию узлов, содержащих данный элемент или являющихся его потомками, в порядке их следования в документе.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-244">Returns a collection of nodes that contain this element, and all descendant nodes of this element, in document order.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2d0e-245">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> для <see cref="T:System.Xml.Linq.XNode" />, содержащий этот элемент и все узлы-потомки этого элемента в порядке следования документов.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-245">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> that contain this element, and all descendant nodes of this element, in document order.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2d0e-246">Этот метод использует отложенное выполнение.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-246">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2d0e-247">Следующий пример создает XML-дерева и использует его.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-247">The following example creates an XML tree, and then uses this .</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    // Attributes are not nodes, so will not be returned by DescendantNodesAndSelf.  
    new XAttribute("Att1", "AttributeContent"),  
    new XElement("Child",  
        new XText("Some text"),  
        new XElement("GrandChild", "element content")  
    )  
);  
IEnumerable<XNode> dnas =  
    from node in xmlTree.DescendantNodesAndSelf()  
    select node;  
foreach (XNode node in dnas)  
{  
    if (node is XElement)  
        Console.WriteLine((node as XElement).Name);  
    else  
        Console.WriteLine(node);  
}  
```  
  
```vb  
Dim xmlTree As XElement = _  
    <Root Att1="AttributeContent">  
        <Child>Some text<GrandChild>element content</GrandChild>  
        </Child>  
    </Root>  
  
Dim dnas As IEnumerable(Of XNode) = _  
    From node In xmlTree.DescendantNodesAndSelf() _  
    Select node  
  
For Each node In dnas  
    If TypeOf node Is XElement Then  
        Console.WriteLine(DirectCast(node, XElement).Name)  
    Else  
        Console.WriteLine(node)  
    End If  
Next  
```  
  
 <span data-ttu-id="e2d0e-248">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-248">This example produces the following output:</span></span>  
  
```  
Root  
Child  
Some text  
GrandChild  
element content  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="DescendantsAndSelf">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e2d0e-249">Возвращает коллекцию элементов, содержащих данный элемент или являющихся его потомками, в порядке их следования в документе.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-249">Returns a collection of elements that contain this element, and all descendant elements of this element, in document order.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2d0e-250">Этот метод использует отложенное выполнение.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-250">This method uses deferred execution.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="DescendantsAndSelf">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; DescendantsAndSelf ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; DescendantsAndSelf() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.DescendantsAndSelf" />
      <MemberSignature Language="VB.NET" Value="Public Function DescendantsAndSelf () As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ DescendantsAndSelf();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e2d0e-251">Возвращает коллекцию элементов, содержащих данный элемент или являющихся его потомками, в порядке их следования в документе.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-251">Returns a collection of elements that contain this element, and all descendant elements of this element, in document order.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2d0e-252">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> для <see cref="T:System.Xml.Linq.XElement" />, содержащий этот элемент и все элементы-потомки этого элемента в порядке следования документов.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-252">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of elements that contain this element, and all descendant elements of this element, in document order.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2d0e-253">Этот метод использует отложенное выполнение.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-253">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2d0e-254">Следующий пример создает XML-дерева и использует его.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-254">The following example creates an XML tree, and then uses this .</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XAttribute("Att1", "AttributeContent"),  
    new XElement("Child",  
        new XText("Some text"),  
        new XElement("GrandChild", "element content")  
    )  
);  
IEnumerable<XElement> das =  
    from el in xmlTree.DescendantsAndSelf()  
    select el;  
foreach (XElement el in das)  
    Console.WriteLine(el.Name);  
```  
  
```vb  
Dim xmlTree As XElement = _  
    <Root Att1="AttributeContent">  
        <Child>Some text  
            <GrandChild>element content</GrandChild>  
        </Child>  
    </Root>  
  
Dim das As IEnumerable(Of XElement) = _  
    From el In xmlTree.DescendantsAndSelf() _  
    Select el  
  
For Each el In das  
    Console.WriteLine(el.Name)  
Next  
```  
  
 <span data-ttu-id="e2d0e-255">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-255">This example produces the following output:</span></span>  
  
```  
Root  
Child  
GrandChild  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DescendantsAndSelf">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; DescendantsAndSelf (System.Xml.Linq.XName name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; DescendantsAndSelf(class System.Xml.Linq.XName name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.DescendantsAndSelf(System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Public Function DescendantsAndSelf (name As XName) As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ DescendantsAndSelf(System::Xml::Linq::XName ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="e2d0e-256">Выражение <see cref="T:System.Xml.Linq.XName" /> для сопоставления.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-256">The <see cref="T:System.Xml.Linq.XName" /> to match.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2d0e-257">Возвращает фильтрованную коллекцию элементов, содержащих данный элемент или являющихся его потомками, в порядке их следования в документе.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-257">Returns a filtered collection of elements that contain this element, and all descendant elements of this element, in document order.</span>
          </span>
          <span data-ttu-id="e2d0e-258">В коллекцию включаются только элементы, соответствующие <see cref="T:System.Xml.Linq.XName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-258">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2d0e-259">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> для <see cref="T:System.Xml.Linq.XElement" />, содержащий этот элемент и все элементы-потомки этого элемента в порядке следования документов.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-259">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contain this element, and all descendant elements of this element, in document order.</span>
          </span>
          <span data-ttu-id="e2d0e-260">В коллекцию включаются только элементы, соответствующие <see cref="T:System.Xml.Linq.XName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-260">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2d0e-261">Этот метод использует отложенное выполнение.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-261">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2d0e-262">Следующий пример создает XML-дерева и использует его.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-262">The following example creates an XML tree, and then uses this .</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XAttribute("Att1", "AttributeContent"),  
    new XElement("Child",  
        new XText("Some text"),  
        new XElement("GrandChild", "element content")  
    )  
);  
IEnumerable<XElement> das = xmlTree.DescendantsAndSelf("Child");  
foreach (XElement el in das)  
    Console.WriteLine(el.Name);  
```  
  
```vb  
Dim xmlTree As XElement = _  
    <Root Att1="AttributeContent">  
        <Child>Some text  
            <GrandChild>element content</GrandChild>  
        </Child>  
    </Root>  
  
Dim das As IEnumerable(Of XElement) = xmlTree.DescendantsAndSelf("Child")  
  
For Each el In das  
    Console.WriteLine(el.Name)  
Next  
```  
  
 <span data-ttu-id="e2d0e-263">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-263">This example produces the following output:</span></span>  
  
```  
Child  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EmptySequence">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; EmptySequence { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; EmptySequence" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XElement.EmptySequence" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property EmptySequence As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ EmptySequence { System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e2d0e-264">Возвращает пустую коллекцию элементов.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-264">Gets an empty collection of elements.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e2d0e-265">Интерфейс <see cref="T:System.Collections.Generic.IEnumerable`1" /> объекта <see cref="T:System.Xml.Linq.XElement" />, содержащий пустую коллекцию.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-265">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains an empty collection.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2d0e-266">Это свойство обычно используется разработчиками класса при записи метода, возвращающего коллекцию элементов.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-266">This property is typically used by class implementers when writing a method that returns a collection of elements.</span></span> <span data-ttu-id="e2d0e-267">Если метод не должен возвращать элементы, его можно использовать это свойство для получения пустую коллекцию <xref:System.Xml.Linq.XElement> объектов.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-267">If the method must return no elements, it can use this property to get an empty collection of <xref:System.Xml.Linq.XElement> objects.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FirstAttribute">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XAttribute FirstAttribute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Linq.XAttribute FirstAttribute" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XElement.FirstAttribute" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FirstAttribute As XAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Linq::XAttribute ^ FirstAttribute { System::Xml::Linq::XAttribute ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XAttribute</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e2d0e-268">Возвращает первый атрибут этого элемента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-268">Gets the first attribute of this element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e2d0e-269">
            <see cref="T:System.Xml.Linq.XAttribute" />, содержащий первый атрибут этого элемента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-269">An <see cref="T:System.Xml.Linq.XAttribute" /> that contains the first attribute of this element.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2d0e-270">Атрибуты хранятся в элементе в том порядке, в котором они были добавлены к элементу.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-270">Attributes are stored in the element in the order that they were added to the element.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2d0e-271">Следующий пример использует это свойство.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-271">The following example uses this property.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XAttribute("Att3", 3)  
);  
Console.WriteLine(xmlTree.FirstAttribute);  
```  
  
```vb  
Dim xmlTree As XElement = <Root Att1="1" Att2="2" Att3="3"/>  
Console.WriteLine(xmlTree.FirstAttribute)  
```  
  
 <span data-ttu-id="e2d0e-272">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-272">This example produces the following output:</span></span>  
  
```  
Att1="1"  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDefaultNamespace">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XNamespace GetDefaultNamespace ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Linq.XNamespace GetDefaultNamespace() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.GetDefaultNamespace" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDefaultNamespace () As XNamespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Linq::XNamespace ^ GetDefaultNamespace();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNamespace</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e2d0e-273">Получает пространство имен <see cref="T:System.Xml.Linq.XNamespace" /> по умолчанию данного объекта <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-273">Gets the default <see cref="T:System.Xml.Linq.XNamespace" /> of this <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2d0e-274">Пространство имен <see cref="T:System.Xml.Linq.XNamespace" />, содержащее используемое по умолчанию пространство имен объекта <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-274">An <see cref="T:System.Xml.Linq.XNamespace" /> that contains the default namespace of this <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2d0e-275">Объявления пространств имен могут быть сохранены как атрибуты XML-дерева.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-275">Namespace declarations may be persisted as attributes in the XML tree.</span></span> <span data-ttu-id="e2d0e-276">Эти специальные атрибуты объявления пространств имен, включая пространства имен по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-276">These special attributes declare namespaces, including default namespaces.</span></span> <span data-ttu-id="e2d0e-277">Этот метод находит объявление пространства имен, который объявляет пространство имен по умолчанию, если он существует, и возвращает <xref:System.Xml.Linq.XNamespace> для пространства имен по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-277">This method finds the namespace declaration that declares the default namespace, if there is one, and returns the <xref:System.Xml.Linq.XNamespace> for the default namespace.</span></span>  
  
 <span data-ttu-id="e2d0e-278">Если отсутствует атрибут, объявляющий пространство имен по умолчанию, то этот метод возвращает <xref:System.Xml.Linq.XNamespace.None%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-278">If there is no attribute that declares the default namespace, then this method returns <xref:System.Xml.Linq.XNamespace.None%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="e2d0e-279">При создании XML-деревьев с помощью C#, даже если XML-дерево будет сериализовано с пространством имен по умолчанию, если пространство имен не сохраняются в XML-дерево как атрибут, этот метод не сообщает об пространство имен по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-279">When creating XML trees using C#, even if an XML tree would be serialized with a default namespace, if the namespace is not persisted in the XML tree as an attribute, this method will not report the namespace as the default namespace.</span></span>  
  
 <span data-ttu-id="e2d0e-280">Если при создании XML-деревьев с помощью Visual Basic и XML-литералы, создание XML в пространстве имен по умолчанию, используя инструкцию Imports, затем атрибут пространства имен будет создан в дереве компилятором Visual Basic, и этот метод сообщит о пространстве имен.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-280">When creating XML trees using Visual Basic and XML literals, if you create the XML in a default namespace using the Imports statement, then a namespace attribute will be created in the tree by the Visual Basic compiler, and this method will report that namespace.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2d0e-281">Следующий пример создает XML-дерево с пространством имен по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-281">The following example creates an XML tree that has a default namespace.</span></span> <span data-ttu-id="e2d0e-282">Затем этот метод используется для извлечения пространства имен по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-282">It then uses this method to retrieve the default namespace.</span></span>  
  
```csharp  
String xml = "<root xmlns='http://www.adventure-works.com'/>";  
XElement e = XElement.Parse(xml);  
Console.WriteLine("Default namespace: {0}", e.GetDefaultNamespace());  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim e As XElement = <root/>  
        Console.WriteLine("Default namespace: {0}", e.GetDefaultNamespace())  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="e2d0e-283">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-283">This example produces the following output:</span></span>  
  
```  
Default namespace: http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNamespaceOfPrefix">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XNamespace GetNamespaceOfPrefix (string prefix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Linq.XNamespace GetNamespaceOfPrefix(string prefix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.GetNamespaceOfPrefix(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNamespaceOfPrefix (prefix As String) As XNamespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Linq::XNamespace ^ GetNamespaceOfPrefix(System::String ^ prefix);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNamespace</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">
          <span data-ttu-id="e2d0e-284">Строка, содержащая префикс пространства имен для поиска.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-284">A string that contains the namespace prefix to look up.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2d0e-285">Получает пространство имен, связанное с определенным префиксом для данного элемента <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-285">Gets the namespace associated with a particular prefix for this <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2d0e-286">
            <see cref="T:System.Xml.Linq.XNamespace" /> для пространства имен, связанного с префиксом для <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-286">An <see cref="T:System.Xml.Linq.XNamespace" /> for the namespace associated with the prefix for this <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2d0e-287">Этот метод выполняется в XML-дерево для имен атрибутов, которые находятся в области видимости для этого элемента.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-287">This method looks through the XML tree for namespace attributes that are in scope for this element.</span></span> <span data-ttu-id="e2d0e-288">Префиксы пространства имен указаны в атрибутах пространства имен, которые находятся в XML-дерева.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-288">Namespace prefixes are specified in namespace attributes that are in the XML tree.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2d0e-289">Следующий пример создает XML-дерево с пространством имен с ним связан префикс.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-289">The following example creates an XML tree that has a namespace with an associated prefix.</span></span> <span data-ttu-id="e2d0e-290">Затем этот метод используется для получения <xref:System.Xml.Linq.XNamespace> в качестве префикса.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-290">It then uses this method to retrieve the <xref:System.Xml.Linq.XNamespace> for the prefix.</span></span>  
  
```csharp  
XElement xmlTree = XElement.Parse("<Root xmlns:aw='http://www.adventure-works.com'/>");  
XNamespace awNamespace = xmlTree.GetNamespaceOfPrefix("aw");  
Console.WriteLine("Namespace: {0}", awNamespace);  
```  
  
 <span data-ttu-id="e2d0e-291">При использовании Visual Basic, обычно используется [оператор GetXmlNamespace](~/docs/visual-basic/language-reference/operators/getxmlnamespace-operator.md) оператор следующим образом</span><span class="sxs-lookup"><span data-stu-id="e2d0e-291">When using Visual Basic, you would typically use the [GetXmlNamespace Operator](~/docs/visual-basic/language-reference/operators/getxmlnamespace-operator.md) operator, as follows</span></span>  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim xmlTree As XElement = <aw:Root/>  
        Dim awNamespace As XNamespace = GetXmlNamespace(aw)  
        Console.WriteLine("Namespace: {0}", awNamespace)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="e2d0e-292">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-292">This example produces the following output:</span></span>  
  
```  
Namespace: http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPrefixOfNamespace">
      <MemberSignature Language="C#" Value="public string GetPrefixOfNamespace (System.Xml.Linq.XNamespace ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetPrefixOfNamespace(class System.Xml.Linq.XNamespace ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.GetPrefixOfNamespace(System.Xml.Linq.XNamespace)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPrefixOfNamespace (ns As XNamespace) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetPrefixOfNamespace(System::Xml::Linq::XNamespace ^ ns);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ns" Type="System.Xml.Linq.XNamespace" />
      </Parameters>
      <Docs>
        <param name="ns">
          <span data-ttu-id="e2d0e-293">Пространство <see cref="T:System.Xml.Linq.XNamespace" /> для поиска.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-293">An <see cref="T:System.Xml.Linq.XNamespace" /> to look up.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2d0e-294">Получает префикс, связанный с пространством имен для данного элемента <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-294">Gets the prefix associated with a namespace for this <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2d0e-295">Строка <see cref="T:System.String" />, содержащая префикс пространства имен.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-295">A <see cref="T:System.String" /> that contains the namespace prefix.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2d0e-296">Этот метод выполняется в XML-дерево для имен атрибутов, которые находятся в области видимости для этого элемента.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-296">This method looks through the XML tree for namespace attributes that are in scope for this element.</span></span> <span data-ttu-id="e2d0e-297">Префиксы пространства имен указаны в атрибутах пространства имен, которые находятся в XML-дерева.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-297">Namespace prefixes are specified in namespace attributes that are in the XML tree.</span></span>  
  
 <span data-ttu-id="e2d0e-298">Если пространство имен используется по умолчанию, а префикс для пространства имен отсутствует, этот метод возвращает значение null.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-298">If the namespace is the default namespace, and there is no prefix for the namespace, then this method returns null.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2d0e-299">Следующий пример создает XML-дерево, которое содержит пространство имен с префиксом.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-299">The following example creates an XML tree that contains a namespace with a prefix.</span></span> <span data-ttu-id="e2d0e-300">Затем этот метод используется для извлечения префикса для пространства имен.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-300">It then uses this method to retrieve the prefix for the namespace.</span></span> <span data-ttu-id="e2d0e-301">Обратите внимание, что в этом примере используется неявное преобразование из строки в <xref:System.Xml.Linq.XNamespace> при вызове этого метода.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-301">Notice that this example uses the implicit conversion from string to <xref:System.Xml.Linq.XNamespace> when calling this method.</span></span>  
  
```csharp  
XElement xmlTree = XElement.Parse("<Root xmlns:aw='http://www.adventure-works.com'/>");  
string prefix = xmlTree.GetPrefixOfNamespace("http://www.adventure-works.com");  
Console.WriteLine("Prefix: {0}", prefix);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim xmlTree As XElement = <aw:Root/>  
        Dim prefix As String = xmlTree.GetPrefixOfNamespace("http://www.adventure-works.com")  
        Console.WriteLine("Prefix: {0}", prefix)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="e2d0e-302">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-302">This example produces the following output:</span></span>  
  
```  
Prefix: aw  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasAttributes">
      <MemberSignature Language="C#" Value="public bool HasAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XElement.HasAttributes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasAttributes As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasAttributes { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e2d0e-303">Возвращает значение, указывающее, есть ли у этого элемента хотя бы один атрибут.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-303">Gets a value indicating whether this element has at least one attribute.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e2d0e-304">
            <see langword="true" />, если у этого элемента есть хотя бы один атрибут. В противном случае — <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-304">
              <see langword="true" /> if this element has at least one attribute; otherwise <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e2d0e-305">Следующий пример использует это свойство.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-305">The following example uses this property.</span></span>  
  
```csharp  
XElement xmlTree1 = new XElement("Root",  
    new XAttribute("Att1", 1)  
);  
Console.WriteLine(xmlTree1.HasAttributes);  
XElement xmlTree2 = new XElement("Root");  
Console.WriteLine(xmlTree2.HasAttributes);  
```  
  
```vb  
Dim xmlTree1 As XElement = <Root Att1="1"/>  
Console.WriteLine(xmlTree1.HasAttributes)  
  
Dim xmlTree2 As XElement = <Root/>  
Console.WriteLine(xmlTree2.HasAttributes)  
```  
  
 <span data-ttu-id="e2d0e-306">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-306">This example produces the following output:</span></span>  
  
```  
True  
False  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasElements">
      <MemberSignature Language="C#" Value="public bool HasElements { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasElements" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XElement.HasElements" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasElements As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasElements { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e2d0e-307">Возвращает значение, указывающее, есть ли у этого элемента хотя бы один дочерний элемент.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-307">Gets a value indicating whether this element has at least one child element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e2d0e-308">Значение <see langword="true" />, если этот элемент имеет как минимум один дочерний атрибут; в противном случае — значение <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-308">
              <see langword="true" /> if this element has at least one child element; otherwise <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e2d0e-309">Следующий пример использует это свойство.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-309">The following example uses this property.</span></span>  
  
```csharp  
XElement xmlTree1 = new XElement("Root",  
    new XElement("Child", 1)  
);  
Console.WriteLine(xmlTree1.HasElements);  
XElement xmlTree2 = new XElement("Root", "contents");  
Console.WriteLine(xmlTree2.HasElements);  
```  
  
```vb  
Dim xmlTree1 As XElement = _   
        <Root>  
            <Child>1</Child>  
        </Root>  
Console.WriteLine(xmlTree1.HasElements)  
  
Dim xmlTree2 As XElement = <Root>contents</Root>  
Console.WriteLine(xmlTree2.HasElements)  
```  
  
 <span data-ttu-id="e2d0e-310">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-310">This example produces the following output:</span></span>  
  
```  
True  
False  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XElement.IsEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEmpty { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e2d0e-311">Возвращает значение, указывающее, имеет ли данный элемент содержимое.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-311">Gets a value indicating whether this element contains no content.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e2d0e-312">
            <see langword="true" />, если данный элемент не имеет содержимого; в противном случае <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-312">
              <see langword="true" /> if this element contains no content; otherwise <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2d0e-313">Обратите внимание, что элемент, содержащий открывающий и закрывающий теги без содержимого между тегами не считается пустым элементом.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-313">Note that an element that contains a start and end tag with no content between the tags is not considered to be an empty element.</span></span> <span data-ttu-id="e2d0e-314">Он имеет содержимое без длины.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-314">It has content with no length.</span></span> <span data-ttu-id="e2d0e-315">Только элемент, который содержит только открывающий тег и выраженный завершенным пустым элементом, считается пустым.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-315">Only an element that contains only a start tag, and is expressed as a terminated empty element, is considered to be empty.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2d0e-316">Следующий пример создает множество деревьев XML и отображается значение этого свойства для каждого дерева.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-316">The following example creates a variety of XML trees, and shows the value of this property with each tree.</span></span>  
  
```csharp  
XElement el1 = new XElement("Root");  
Console.WriteLine(el1);  
Console.WriteLine(el1.IsEmpty);  
Console.WriteLine();  
XElement el2 = new XElement("Root", "content");  
Console.WriteLine(el2);  
Console.WriteLine(el2.IsEmpty);  
Console.WriteLine();  
XElement el3 = new XElement("Root", "");  
Console.WriteLine(el3);  
Console.WriteLine(el3.IsEmpty);  
Console.WriteLine();  
el3.ReplaceAll(null);  
Console.WriteLine(el3);  
Console.WriteLine(el3.IsEmpty);  
```  
  
```vb  
Dim el1 As XElement = <Root/>  
Console.WriteLine(el1)  
Console.WriteLine(el1.IsEmpty)  
Console.WriteLine()  
Dim el2 As XElement = <Root>content</Root>  
Console.WriteLine(el2)  
Console.WriteLine(el2.IsEmpty)  
Console.WriteLine()  
Dim el3 As XElement = <Root></Root>  
Console.WriteLine(el3)  
Console.WriteLine(el3.IsEmpty)  
Console.WriteLine()  
el3.ReplaceAll(Nothing)  
Console.WriteLine(el3)  
Console.WriteLine(el3.IsEmpty)  
```  
  
 <span data-ttu-id="e2d0e-317">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-317">This example produces the following output:</span></span>  
  
```  
<Root />  
True  
  
<Root>content</Root>  
False  
  
<Root></Root>  
False  
  
<Root />  
True  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LastAttribute">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XAttribute LastAttribute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Linq.XAttribute LastAttribute" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XElement.LastAttribute" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LastAttribute As XAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Linq::XAttribute ^ LastAttribute { System::Xml::Linq::XAttribute ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XAttribute</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e2d0e-318">Возвращает последний атрибут этого элемента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-318">Gets the last attribute of this element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e2d0e-319">Объект <see cref="T:System.Xml.Linq.XAttribute" />, содержащий последний атрибут этого элемента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-319">An <see cref="T:System.Xml.Linq.XAttribute" /> that contains the last attribute of this element.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2d0e-320">Атрибуты хранятся в элементе в том порядке, в котором они были добавлены к элементу.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-320">Attributes are stored in the element in the order that they were added to the element.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2d0e-321">Следующий пример создает XML-дерево с тремя атрибутами.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-321">The following example creates an XML tree with three attributes.</span></span> <span data-ttu-id="e2d0e-322">Затем последний атрибут выводится в качестве выходных данных.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-322">It then writes the last attribute as output.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XAttribute("Att3", 3)  
);  
Console.WriteLine(xmlTree.LastAttribute);  
```  
  
```vb  
Dim xmlTree As XElement = <Root Att1="1" Att2="2" Att3="3"/>  
Console.WriteLine(xmlTree.LastAttribute)  
```  
  
 <span data-ttu-id="e2d0e-323">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-323">This example produces the following output:</span></span>  
  
```  
Att3="3"  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e2d0e-324">Создает новый элемент <see cref="T:System.Xml.Linq.XElement" /> из файла, заданного URI, из объекта <see cref="T:System.IO.TextReader" /> или из объекта <see cref="T:System.Xml.XmlReader" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-324">Creates a new <see cref="T:System.Xml.Linq.XElement" /> from a file specified by a URI, from an <see cref="T:System.IO.TextReader" />, or from an <see cref="T:System.Xml.XmlReader" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2d0e-325">Можно использовать одну из перегрузок этого метода для загрузки <xref:System.Xml.Linq.XElement> из файла, <xref:System.IO.TextReader>, или <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-325">You can use one of the overloads of this method to load an <xref:System.Xml.Linq.XElement> from a file, a <xref:System.IO.TextReader>, or an <xref:System.Xml.XmlReader>.</span></span>  
  
 <span data-ttu-id="e2d0e-326">Для создания <xref:System.Xml.Linq.XElement> из строки, содержащей XML, используйте <xref:System.Xml.Linq.XElement.Parse%2A>.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-326">To create an <xref:System.Xml.Linq.XElement> from a string that contains XML, use <xref:System.Xml.Linq.XElement.Parse%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XDocument.Load" />
        <altmember cref="Overload:System.Xml.Linq.XElement.Parse" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XElement Load (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XElement Load(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Load(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XElement ^ Load(System::IO::Stream ^ stream);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="e2d0e-327">Поток, содержащий XML-данные.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-327">The stream that contains the XML data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2d0e-328">Создает новый экземпляр <see cref="T:System.Xml.Linq.XElement" /> с помощью указанного потока.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-328">Creates a new <see cref="T:System.Xml.Linq.XElement" /> instance by using the specified stream.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2d0e-329">Объект <see cref="T:System.Xml.Linq.XElement" />, который используется для чтения содержащихся в потоке данных.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-329">An <see cref="T:System.Xml.Linq.XElement" /> object used to read the data that is contained in the stream.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2d0e-330">Если вы хотите контролировать параметры загрузки, используйте <xref:System.Xml.Linq.XElement.Load%2A> перегрузку, принимающую <xref:System.Xml.Linq.LoadOptions> как параметр.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-330">If you want to control load options, use the <xref:System.Xml.Linq.XElement.Load%2A> overload that takes <xref:System.Xml.Linq.LoadOptions> as a parameter.</span></span>  
  
 <span data-ttu-id="e2d0e-331">LINQ для функциональных возможностей загрузки по XML построена на основе <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-331">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="e2d0e-332">Таким образом, следует перехватывать все исключения, вызываемые <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> перегрузки методов и <xref:System.Xml.XmlReader> методы, прочитать и проанализировать документ.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-332">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
 <span data-ttu-id="e2d0e-333">Если необходимо изменить <xref:System.Xml.XmlReaderSettings>, выполните следующие действия:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-333">If you have to modify <xref:System.Xml.XmlReaderSettings>, following these steps:</span></span>  
  
1.  <span data-ttu-id="e2d0e-334">Создание <xref:System.Xml.XmlReader> путем вызова одного из <xref:System.Xml.XmlReader.Create%2A> перегрузок, принимающих <xref:System.Xml.XmlReaderSettings> как параметр.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-334">Create an <xref:System.Xml.XmlReader> by calling one of the <xref:System.Xml.XmlReader.Create%2A> overloads that take <xref:System.Xml.XmlReaderSettings> as a parameter.</span></span>  
  
2.  <span data-ttu-id="e2d0e-335">Передайте <xref:System.Xml.XmlReader> к одному из <xref:System.Xml.Linq.XElement> <xref:System.Xml.Linq.XElement.Load%2A> перегрузок, принимающих <xref:System.Xml.XmlReader> как параметр.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-335">Pass the <xref:System.Xml.XmlReader> to one of the <xref:System.Xml.Linq.XElement>'s <xref:System.Xml.Linq.XElement.Load%2A> overloads that takes <xref:System.Xml.XmlReader> as a parameter.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XElement Load (System.IO.TextReader textReader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XElement Load(class System.IO.TextReader textReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Load(System.IO.TextReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XElement ^ Load(System::IO::TextReader ^ textReader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textReader" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="textReader">
          <span data-ttu-id="e2d0e-336">
            <see cref="T:System.IO.TextReader" /> будет прочтен для содержимого <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-336">A <see cref="T:System.IO.TextReader" /> that will be read for the <see cref="T:System.Xml.Linq.XElement" /> content.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2d0e-337">Загружает <see cref="T:System.Xml.Linq.XElement" /> из <see cref="T:System.IO.TextReader" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-337">Loads an <see cref="T:System.Xml.Linq.XElement" /> from a <see cref="T:System.IO.TextReader" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2d0e-338">
            <see cref="T:System.Xml.Linq.XElement" />, содержащий XML, считанный из указанного <see cref="T:System.IO.TextReader" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-338">An <see cref="T:System.Xml.Linq.XElement" /> that contains the XML that was read from the specified <see cref="T:System.IO.TextReader" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2d0e-339">Этот метод считывает необработанный XML в XML-дерево.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-339">This method reads the raw XML into the XML tree.</span></span> <span data-ttu-id="e2d0e-340">Отбрасывает все незначащие пробелы в файле.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-340">It discards all insignificant white space in the file.</span></span>  
  
 <span data-ttu-id="e2d0e-341">LINQ для функциональных возможностей загрузки по XML построена на основе <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-341">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="e2d0e-342">Таким образом, следует перехватывать все исключения, вызываемые <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> перегрузки методов и <xref:System.Xml.XmlReader> методы, прочитать и проанализировать документ.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-342">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2d0e-343">В следующем примере загружается элемент из <xref:System.IO.StringReader>.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-343">The following example loads an element from a <xref:System.IO.StringReader>.</span></span>  
  
```csharp  
TextReader sr = new StringReader("<Root><Child/></Root>");  
XElement xmlTree = XElement.Load(sr);  
sr.Close();  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim sr As TextReader = New StringReader("<Root><Child/></Root>")  
Dim xmlTree As XElement = XElement.Load(sr)  
sr.Close()  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="e2d0e-344">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-344">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child />  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XElement Load (string uri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XElement Load(string uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Load(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (uri As String) As XElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XElement ^ Load(System::String ^ uri);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uri">
          <span data-ttu-id="e2d0e-345">Строка URI ссылается на файл для загрузки в новый <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-345">A URI string referencing the file to load into a new <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2d0e-346">Загружает <see cref="T:System.Xml.Linq.XElement" /> из файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-346">Loads an <see cref="T:System.Xml.Linq.XElement" /> from a file.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2d0e-347">Элемент <see cref="T:System.Xml.Linq.XElement" /> с содержимым указанного файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-347">An <see cref="T:System.Xml.Linq.XElement" /> that contains the contents of the specified file.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2d0e-348">Этот метод считывает необработанный XML в XML-дерево.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-348">This method reads the raw XML into the XML tree.</span></span> <span data-ttu-id="e2d0e-349">Отбрасывает все незначащие пробелы в файле.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-349">It discards all insignificant white space in the file.</span></span>  
  
 <span data-ttu-id="e2d0e-350">LINQ для функциональных возможностей загрузки по XML построена на основе <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-350">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="e2d0e-351">Таким образом, следует перехватывать все исключения, вызываемые <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> перегрузки методов и <xref:System.Xml.XmlReader> методы, прочитать и проанализировать документ.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-351">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2d0e-352">Следующий пример создает XML-дерева, сохраняет его в файл и затем использует этот метод для загрузки <xref:System.Xml.Linq.XElement> из файла.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-352">The following example creates an XML tree, saves it to a file, and then uses this method to load the <xref:System.Xml.Linq.XElement> from the file.</span></span>  
  
```csharp  
XElement xmlTree1 = new XElement("Root",  
    new XElement("Child", "content")  
);  
xmlTree1.Save("Tree.xml");  
  
XElement xmlTree2 = XElement.Load("Tree.xml");  
Console.WriteLine(xmlTree2.Name);  
```  
  
```vb  
Dim xmlTree1 As XElement = _   
        <Root>  
            <Child>Content</Child>  
        </Root>  
xmlTree1.Save("Tree.xml")  
  
Dim xmlTree2 As XElement = XElement.Load("Tree.xml")  
Console.WriteLine(xmlTree2.Name)  
```  
  
 <span data-ttu-id="e2d0e-353">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-353">This example produces the following output:</span></span>  
  
```  
Root  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XDocument.Load" />
        <altmember cref="Overload:System.Xml.Linq.XElement.Parse" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XElement Load (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XElement Load(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Load(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (reader As XmlReader) As XElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XElement ^ Load(System::Xml::XmlReader ^ reader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <span data-ttu-id="e2d0e-354">
            <see cref="T:System.Xml.XmlReader" /> будет прочтен для содержимого <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-354">A <see cref="T:System.Xml.XmlReader" /> that will be read for the content of the <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2d0e-355">Загружает элемент <see cref="T:System.Xml.Linq.XElement" /> из объекта <see cref="T:System.Xml.XmlReader" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-355">Loads an <see cref="T:System.Xml.Linq.XElement" /> from an <see cref="T:System.Xml.XmlReader" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2d0e-356">
            <see cref="T:System.Xml.Linq.XElement" />, содержащий XML, считанный из указанного <see cref="T:System.Xml.XmlReader" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-356">An <see cref="T:System.Xml.Linq.XElement" /> that contains the XML that was read from the specified <see cref="T:System.Xml.XmlReader" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2d0e-357">Создав <xref:System.Xml.XmlNodeReader> из документа DOM, а затем использовав <xref:System.Xml.XmlNodeReader> создание <xref:System.Xml.Linq.XElement>, этот метод можно использовать для создания копии документа DOM в LINQ to XML-дерева.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-357">By creating an <xref:System.Xml.XmlNodeReader> from a DOM document, and then using the <xref:System.Xml.XmlNodeReader> to create an <xref:System.Xml.Linq.XElement>, this method can be used to create a copy of a DOM document in a LINQ to XML tree.</span></span>  
  
 <span data-ttu-id="e2d0e-358">LINQ для функциональных возможностей загрузки по XML построена на основе <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-358">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="e2d0e-359">Таким образом, следует перехватывать все исключения, вызываемые <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> перегрузки методов и <xref:System.Xml.XmlReader> методы, прочитать и проанализировать документ.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-359">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2d0e-360">Следующий пример создает документ DOM, создает <xref:System.Xml.XmlNodeReader> из документа DOM, создает дерево из средства чтения.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-360">The following example creates a DOM document, creates an <xref:System.Xml.XmlNodeReader> from the DOM document, instantiates a tree from the reader.</span></span> <span data-ttu-id="e2d0e-361">Этот код эффективно копирует документ DOM XML-дерево в LINQ.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-361">This code effectively copies a DOM document into a LINQ to XML tree.</span></span>  
  
```csharp  
// Create a DOM document with some content.  
XmlDocument doc = new XmlDocument();  
XmlElement child = doc.CreateElement("Child");  
child.InnerText = "child contents";  
XmlElement root = doc.CreateElement("Root");  
root.AppendChild(child);  
doc.AppendChild(root);  
  
// Create a reader and move to the content.  
using (XmlNodeReader nodeReader = new XmlNodeReader(doc)) {  
    // the reader must be in the Interactive state in order to  
    // Create a LINQ to XML tree from it.  
    nodeReader.MoveToContent();  
  
    XElement xRoot = XElement.Load(nodeReader);  
    Console.WriteLine(xRoot);  
}  
```  
  
```vb  
' Create a DOM document with some content.  
Dim doc As XmlDocument = New XmlDocument()  
Dim child As XmlElement = doc.CreateElement("Child")  
child.InnerText = "child contents"  
Dim root As XmlElement = doc.CreateElement("Root")  
root.AppendChild(child)  
doc.AppendChild(root)  
  
' Create a reader and move to the content.  
Using nodeReader = New XmlNodeReader(doc)  
    ' the reader must be in the Interactive state in order to  
    ' Create a LINQ to XML tree from it.  
    nodeReader.MoveToContent()  
  
    Dim xRoot As XElement = XElement.Load(nodeReader)  
    Console.WriteLine(xRoot)  
End Using  
```  
  
 <span data-ttu-id="e2d0e-362">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-362">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child>child contents</Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XElement Load (System.IO.Stream stream, System.Xml.Linq.LoadOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XElement Load(class System.IO.Stream stream, valuetype System.Xml.Linq.LoadOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Load(System.IO.Stream,System.Xml.Linq.LoadOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XElement ^ Load(System::IO::Stream ^ stream, System::Xml::Linq::LoadOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="e2d0e-363">Поток, содержащий данные XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-363">The stream containing the XML data.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="e2d0e-364">Объект <see cref="T:System.Xml.Linq.LoadOptions" />, указывающий, следует ли загружать базовый URI и сведения о строках.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-364">A <see cref="T:System.Xml.Linq.LoadOptions" /> object that specifies whether to load base URI and line information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2d0e-365">Создает новый экземпляр<see cref="T:System.Xml.Linq.XElement" />, используя указанный поток и при необходимости оставляя пустое пространство, задавая базовый URI и сохраняя сведения о строках.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-365">Creates a new <see cref="T:System.Xml.Linq.XElement" /> instance by using the specified stream, optionally preserving white space, setting the base URI, and retaining line information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2d0e-366">Объект <see cref="T:System.Xml.Linq.XElement" />, который используется для чтения содержащихся в потоке данных.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-366">An <see cref="T:System.Xml.Linq.XElement" /> object used to read the data that the stream contains.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2d0e-367">LINQ для функциональных возможностей загрузки по XML построена на основе <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-367">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="e2d0e-368">Таким образом, следует перехватывать все исключения, вызываемые <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> перегрузки методов и <xref:System.Xml.XmlReader> методы, прочитать и проанализировать документ.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-368">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
 <span data-ttu-id="e2d0e-369">Если необходимо изменить <xref:System.Xml.XmlReaderSettings>, выполните следующие действия:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-369">If you have to modify <xref:System.Xml.XmlReaderSettings>, following these steps:</span></span>  
  
1.  <span data-ttu-id="e2d0e-370">Создание <xref:System.Xml.XmlReader> путем вызова одного из <xref:System.Xml.XmlReader.Create%2A> перегрузок, принимающих <xref:System.Xml.XmlReaderSettings> как параметр.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-370">Create an <xref:System.Xml.XmlReader> by calling one of the <xref:System.Xml.XmlReader.Create%2A> overloads that take <xref:System.Xml.XmlReaderSettings> as a parameter.</span></span>  
  
2.  <span data-ttu-id="e2d0e-371">Передайте <xref:System.Xml.XmlReader> к одному из <xref:System.Xml.Linq.XElement> <xref:System.Xml.Linq.XElement.Load%2A> перегрузок, принимающих <xref:System.Xml.XmlReader> как параметр.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-371">Pass the <xref:System.Xml.XmlReader> to one of the <xref:System.Xml.Linq.XElement>'s <xref:System.Xml.Linq.XElement.Load%2A> overloads that takes <xref:System.Xml.XmlReader> as a parameter.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XElement Load (System.IO.TextReader textReader, System.Xml.Linq.LoadOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XElement Load(class System.IO.TextReader textReader, valuetype System.Xml.Linq.LoadOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XElement ^ Load(System::IO::TextReader ^ textReader, System::Xml::Linq::LoadOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textReader" Type="System.IO.TextReader" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" />
      </Parameters>
      <Docs>
        <param name="textReader">
          <span data-ttu-id="e2d0e-372">
            <see cref="T:System.IO.TextReader" /> будет прочтен для содержимого <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-372">A <see cref="T:System.IO.TextReader" /> that will be read for the <see cref="T:System.Xml.Linq.XElement" /> content.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="e2d0e-373">
            <see cref="T:System.Xml.Linq.LoadOptions" />, указывающий поведение пустого пространства и необходимость загрузки базового URI и сведений о строке.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-373">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies white space behavior, and whether to load base URI and line information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2d0e-374">Загружает элемент <see cref="T:System.Xml.Linq.XElement" /> из объекта <see cref="T:System.IO.TextReader" />, при необходимости сохраняя пробелы и сведения о строке.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-374">Loads an <see cref="T:System.Xml.Linq.XElement" /> from a <see cref="T:System.IO.TextReader" />, optionally preserving white space and retaining line information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2d0e-375">
            <see cref="T:System.Xml.Linq.XElement" />, содержащий XML, считанный из указанного <see cref="T:System.IO.TextReader" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-375">An <see cref="T:System.Xml.Linq.XElement" /> that contains the XML that was read from the specified <see cref="T:System.IO.TextReader" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2d0e-376">Если источник XML с отступами, задание <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> флаг в `options` вызывает модуль чтения для чтения все незначащие пробелы в XML-источник.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-376">If the source XML is indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to read all white space in the source XML.</span></span> <span data-ttu-id="e2d0e-377">Узлы типа <xref:System.Xml.Linq.XText> создаются для значащие и незначащие пробелы.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-377">Nodes of type <xref:System.Xml.Linq.XText> are created for both significant and insignificant white space.</span></span>  
  
 <span data-ttu-id="e2d0e-378">Если источник XML с отступами, не задав <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> флаг в `options` вызывает модуль чтения, пропустить все незначащие пробелы в исходном XML.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-378">If the source XML is indented, not setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to ignore all of the insignificant white space in the source XML.</span></span> <span data-ttu-id="e2d0e-379">Дерево XML создается без текстовых узлов для незначащие пробельные символы.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-379">The XML tree is created without any text nodes for insignificant white space.</span></span>  
  
 <span data-ttu-id="e2d0e-380">Если XML-источник не с отступом, задание <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> флаг в `options` не делает ничего.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-380">If the source XML is not indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` has no effect.</span></span> <span data-ttu-id="e2d0e-381">Значимые пробелы по-прежнему сохраняются, а незначащие пробельные символы, может привести к созданию дополнительных текстовых узлов пробелов, не произведено.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-381">Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.</span></span>  
  
 <span data-ttu-id="e2d0e-382">Дополнительные сведения см. в разделе [сохранения пробелов при загрузке или синтаксическом анализе XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) и [Сохранение пробелов при сериализации](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span><span class="sxs-lookup"><span data-stu-id="e2d0e-382">For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
 <span data-ttu-id="e2d0e-383">Используйте <xref:System.Xml.Linq.XElement.Parse%2A> для создания <xref:System.Xml.Linq.XElement> из строки, которая содержит XML-код.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-383">Use <xref:System.Xml.Linq.XElement.Parse%2A> to create an <xref:System.Xml.Linq.XElement> from a string that contains XML.</span></span>  
  
 <span data-ttu-id="e2d0e-384">Установка <xref:System.Xml.Linq.LoadOptions.SetBaseUri> не будет действовать при загрузке из <xref:System.IO.TextReader>.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-384">Setting <xref:System.Xml.Linq.LoadOptions.SetBaseUri> will have no effect when loading from a <xref:System.IO.TextReader>.</span></span>  
  
 <span data-ttu-id="e2d0e-385">Производительность снижается, если задать <xref:System.Xml.Linq.LoadOptions.SetLineInfo> флаг.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-385">There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flag.</span></span>  
  
 <span data-ttu-id="e2d0e-386">Сведения о строке является точным сразу после загрузки XML-документа.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-386">The line information is accurate immediately after loading the XML document.</span></span> <span data-ttu-id="e2d0e-387">При изменении дерева XML после загрузки документа, сведения о строке могут стать бессмысленной.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-387">If you modify the XML tree after loading the document, the line information may become meaningless.</span></span>  
  
 <span data-ttu-id="e2d0e-388">LINQ для функциональных возможностей загрузки по XML построена на основе <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-388">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="e2d0e-389">Таким образом, следует перехватывать все исключения, вызываемые <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> перегрузки методов и <xref:System.Xml.XmlReader> методы, прочитать и проанализировать документ.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-389">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2d0e-390">В следующем примере загружаются <xref:System.Xml.Linq.XElement> из <xref:System.IO.StringReader> двумя способами: сохранение пробелов и без сохранения пробелов.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-390">The following example loads an <xref:System.Xml.Linq.XElement> from a <xref:System.IO.StringReader> in two different ways: preserving white space, and not preserving white space.</span></span> <span data-ttu-id="e2d0e-391">Затем запрос используется для определения количества узлов пробелов в результирующее дерево XML.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-391">It then uses a query to determine the number of white space nodes in the resulting XML tree.</span></span>  
  
```csharp  
TextReader sr;  
int whiteSpaceNodes;  
  
sr = new StringReader("<Root> <Child> </Child> </Root>");  
XElement xmlTree1 = XElement.Load(sr, LoadOptions.None);  
sr.Close();  
whiteSpaceNodes = xmlTree1  
    .DescendantNodesAndSelf()  
    .OfType<XText>()  
    .Where(tNode => tNode.ToString().Trim().Length == 0)  
    .Count();  
Console.WriteLine("Count of white space nodes (not preserving whitespace): {0}", whiteSpaceNodes);  
  
sr = new StringReader("<Root> <Child> </Child> </Root>");  
XElement xmlTree2 = XElement.Load(sr, LoadOptions.PreserveWhitespace);  
sr.Close();  
whiteSpaceNodes = xmlTree2  
    .DescendantNodesAndSelf()  
    .OfType<XText>()  
    .Where(tNode => tNode.ToString().Trim().Length == 0)  
    .Count();  
Console.WriteLine("Count of white space nodes (preserving whitespace): {0}", whiteSpaceNodes);  
```  
  
```vb  
Dim sr As TextReader  
Dim whiteSpaceNodes As Integer  
  
sr = New StringReader("<Root> <Child> </Child> </Root>")  
Dim xmlTree1 As XElement = XElement.Load(sr, LoadOptions.None)  
sr.Close()  
whiteSpaceNodes = xmlTree1 _  
    .DescendantNodesAndSelf() _  
    .OfType(Of XText)() _  
    .Where(Function(ByVal tNode As XNode) tNode.ToString().Trim().Length = 0) _  
    .Count()  
Console.WriteLine("Count of white space nodes (not preserving whitespace): {0}", whiteSpaceNodes)  
  
sr = New StringReader("<Root> <Child> </Child> </Root>")  
Dim xmlTree2 As XElement = XElement.Load(sr, LoadOptions.PreserveWhitespace)  
sr.Close()  
whiteSpaceNodes = xmlTree2 _  
    .DescendantNodesAndSelf() _  
    .OfType(Of XText)() _  
    .Where(Function(ByVal tNode As XNode) tNode.ToString().Trim().Length = 0) _  
    .Count()  
Console.WriteLine("Count of white space nodes (preserving whitespace): {0}", whiteSpaceNodes)  
```  
  
 <span data-ttu-id="e2d0e-392">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-392">This example produces the following output:</span></span>  
  
```  
Count of white space nodes (not preserving whitespace): 0  
Count of white space nodes (preserving whitespace): 3  
```  
  
 <span data-ttu-id="e2d0e-393">В следующем примере загружаются данные строки, которые загружаются из <xref:System.IO.TextReader>.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-393">The following example loads the line information as it loads from the <xref:System.IO.TextReader>.</span></span> <span data-ttu-id="e2d0e-394">Затем выводятся на печать сведения о строке.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-394">It then prints the line information.</span></span>  
  
```csharp  
TextReader sr = new StringReader(  
@"<Root>  
  <Child>  
    <GrandChild1/>  
    <GrandChild2/>  
  </Child>  
</Root>");  
XElement po = XElement.Load(sr,  
    LoadOptions.SetLineInfo);  
Console.WriteLine("{0}{1}{2}",  
    "Element Name".PadRight(20),  
    "Line".PadRight(5),  
    "Position");  
Console.WriteLine("{0}{1}{2}",  
    "------------".PadRight(20),  
    "----".PadRight(5),  
    "--------");  
foreach (XElement e in po.DescendantsAndSelf())  
    Console.WriteLine("{0}{1}{2}",  
        ("".PadRight(e.Ancestors().Count() * 2) + e.Name).PadRight(20),  
        ((IXmlLineInfo)e).LineNumber.ToString().PadRight(5),  
        ((IXmlLineInfo)e).LinePosition);  
```  
  
```vb  
Dim sr As TextReader = New StringReader( _  
    "<Root>" & Environment.NewLine & _  
    "  <Child>" & Environment.NewLine & _  
    "    <GrandChild1/>" & Environment.NewLine & _  
    "    <GrandChild2/>" & Environment.NewLine & _  
    "  </Child>" & Environment.NewLine & _  
    "</Root>")  
Dim po As XElement = XElement.Load(sr, LoadOptions.SetLineInfo)  
Console.WriteLine("{0}{1}{2}", _  
    "Element Name".PadRight(20), _  
    "Line".PadRight(5), _  
    "Position")  
Console.WriteLine("{0}{1}{2}", _  
    "------------".PadRight(20), _  
    "----".PadRight(5), _  
    "--------")  
For Each e As XElement In po.DescendantsAndSelf()  
    Console.WriteLine("{0}{1}{2}", _  
        ("".PadRight(e.Ancestors().Count() * 2) & e.Name.ToString).PadRight(20), _  
        (DirectCast(e, IXmlLineInfo)).LineNumber.ToString().PadRight(5), _  
        (DirectCast(e, IXmlLineInfo)).LinePosition)  
Next  
```  
  
 <span data-ttu-id="e2d0e-395">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-395">This example produces the following output:</span></span>  
  
```  
Element Name        Line Position  
------------        ---- --------  
Root                1    2  
  Child             2    4  
    GrandChild1     3    6  
    GrandChild2     4    6  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XElement Load (string uri, System.Xml.Linq.LoadOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XElement Load(string uri, valuetype System.Xml.Linq.LoadOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Load(System.String,System.Xml.Linq.LoadOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (uri As String, options As LoadOptions) As XElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XElement ^ Load(System::String ^ uri, System::Xml::Linq::LoadOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.String" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" />
      </Parameters>
      <Docs>
        <param name="uri">
          <span data-ttu-id="e2d0e-396">Строка URI ссылается на файл для загрузки в <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-396">A URI string referencing the file to load into an <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="e2d0e-397">
            <see cref="T:System.Xml.Linq.LoadOptions" />, указывающий поведение пустого пространства и необходимость загрузки базового URI и сведений о строке.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-397">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies white space behavior, and whether to load base URI and line information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2d0e-398">Загружает <see cref="T:System.Xml.Linq.XElement" /> из файла, по требованию сохраняет пустое пространство, задает базовый URI и сведения о строке.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-398">Loads an <see cref="T:System.Xml.Linq.XElement" /> from a file, optionally preserving white space, setting the base URI, and retaining line information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2d0e-399">Элемент <see cref="T:System.Xml.Linq.XElement" /> с содержимым указанного файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-399">An <see cref="T:System.Xml.Linq.XElement" /> that contains the contents of the specified file.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2d0e-400">Если источник XML с отступами, задание <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> флаг в `options` вызывает модуль чтения для чтения все незначащие пробелы в XML-источник.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-400">If the source XML is indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to read all white space in the source XML.</span></span> <span data-ttu-id="e2d0e-401">Узлы типа <xref:System.Xml.Linq.XText> создаются для значащие и незначащие пробелы.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-401">Nodes of type <xref:System.Xml.Linq.XText> are created for both significant and insignificant white space.</span></span>  
  
 <span data-ttu-id="e2d0e-402">Если источник XML с отступами, не задав <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> флаг в `options` вызывает модуль чтения, пропустить все незначащие пробелы в исходном XML.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-402">If the source XML is indented, not setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to ignore all of the insignificant white space in the source XML.</span></span> <span data-ttu-id="e2d0e-403">Дерево XML создается без текстовых узлов для незначащие пробельные символы.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-403">The XML tree is created without any text nodes for insignificant white space.</span></span>  
  
 <span data-ttu-id="e2d0e-404">Если XML-источник не с отступом, задание <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> флаг в `options` не делает ничего.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-404">If the source XML is not indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` has no effect.</span></span> <span data-ttu-id="e2d0e-405">Значимые пробелы по-прежнему сохраняются, а незначащие пробельные символы, может привести к созданию дополнительных текстовых узлов пробелов, не произведено.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-405">Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.</span></span>  
  
 <span data-ttu-id="e2d0e-406">Дополнительные сведения см. в разделе [сохранения пробелов при загрузке или синтаксическом анализе XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) и [Сохранение пробелов при сериализации](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span><span class="sxs-lookup"><span data-stu-id="e2d0e-406">For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
 <span data-ttu-id="e2d0e-407">Используйте <xref:System.Xml.Linq.XElement.Parse%2A> для создания <xref:System.Xml.Linq.XElement> из строки, которая содержит XML-код.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-407">Use <xref:System.Xml.Linq.XElement.Parse%2A> to create an <xref:System.Xml.Linq.XElement> from a string that contains XML.</span></span>  
  
 <span data-ttu-id="e2d0e-408">Производительность снижается, если задать <xref:System.Xml.Linq.LoadOptions.SetBaseUri> и <xref:System.Xml.Linq.LoadOptions.SetLineInfo> флаги.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-408">There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetBaseUri> and the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flags.</span></span>  
  
 <span data-ttu-id="e2d0e-409">Базовый URI и сведения о строке уточняются сразу после загрузки XML-документа.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-409">The base URI and the line information are accurate immediately after loading the XML document.</span></span> <span data-ttu-id="e2d0e-410">При изменении дерева XML после загрузки документа, базовый URI и сведения о строке могут стать бессмысленной.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-410">If you modify the XML tree after loading the document, the base URI and line information may become meaningless.</span></span>  
  
 <span data-ttu-id="e2d0e-411">LINQ для функциональных возможностей загрузки по XML построена на основе <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-411">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="e2d0e-412">Таким образом, следует перехватывать все исключения, вызываемые <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> перегрузки методов и <xref:System.Xml.XmlReader> методы, прочитать и проанализировать документ.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-412">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2d0e-413">В следующем примере загружаются <xref:System.Xml.Linq.XElement> из файла двумя различными способами: сохранение пробелов и без сохранения пробелов.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-413">The following example loads an <xref:System.Xml.Linq.XElement> from a file in two different ways: preserving white space, and not preserving white space.</span></span> <span data-ttu-id="e2d0e-414">Затем запрос используется для определения количества узлов пробелов в результирующее дерево XML.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-414">It then uses a query to determine the number of white space nodes in the resulting XML tree.</span></span>  
  
```csharp  
XElement xmlTree1 = XElement.Parse("<Root> <Child>  </Child> </Root>", LoadOptions.PreserveWhitespace);  
xmlTree1.Save("Tree.xml");  
Console.WriteLine(xmlTree1);  
  
int whiteSpaceNodes;  
XElement xmlTree2 = XElement.Load("Tree.xml",  
    LoadOptions.None);  
whiteSpaceNodes = xmlTree2  
    .DescendantNodesAndSelf()  
    .OfType<XText>()  
    .Where(tNode => tNode.ToString().Trim().Length == 0)  
    .Count();  
Console.WriteLine("Count of white space nodes (not preserving whitespace): {0}", whiteSpaceNodes);  
  
XElement xmlTree3 = XElement.Load("Tree.xml",  
    LoadOptions.PreserveWhitespace);  
whiteSpaceNodes = xmlTree3  
    .DescendantNodesAndSelf()  
    .OfType<XText>()  
    .Where(tNode => tNode.ToString().Trim().Length == 0)  
    .Count();  
Console.WriteLine("Count of white space nodes (preserving whitespace): {0}", whiteSpaceNodes);  
```  
  
```vb  
Dim xmlTree1 As XElement = XElement.Parse("<Root> <Child>  </Child> </Root>", LoadOptions.PreserveWhitespace)  
xmlTree1.Save("Tree.xml")  
Console.WriteLine(xmlTree1)  
  
Dim whiteSpaceNodes As Integer  
Dim xmlTree2 As XElement = XElement.Load("Tree.xml", LoadOptions.None)  
whiteSpaceNodes = xmlTree2 _  
                  .DescendantNodesAndSelf() _  
                  .OfType(Of XText)() _  
                  .Where(Function(ByVal tNode As XNode) tNode.ToString().Trim().Length = 0) _  
                  .Count()  
Console.WriteLine("Count of white space nodes (not preserving whitespace): {0}", whiteSpaceNodes)  
  
Dim xmlTree3 As XElement = XElement.Load("Tree.xml", LoadOptions.PreserveWhitespace)  
whiteSpaceNodes = xmlTree3 _  
                  .DescendantNodesAndSelf() _  
                  .OfType(Of XText)() _  
                  .Where(Function(ByVal tNode As XNode) tNode.ToString().Trim().Length = 0) _  
                  .Count()  
Console.WriteLine("Count of white space nodes (preserving whitespace): {0}", whiteSpaceNodes)  
```  
  
 <span data-ttu-id="e2d0e-415">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-415">This example produces the following output:</span></span>  
  
```  
<Root> <Child>  </Child> </Root>  
Count of white space nodes (not preserving whitespace): 0  
Count of white space nodes (preserving whitespace): 3  
```  
  
 <span data-ttu-id="e2d0e-416">В следующем примере загружаются данные базового URI и строки, при загрузке файла.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-416">The following example loads the base URI and line information as it loads the file.</span></span> <span data-ttu-id="e2d0e-417">Затем выводятся на печать базовый URI и сведения о строке.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-417">It then prints the base URI and the line information.</span></span>  
  
 <span data-ttu-id="e2d0e-418">В этом примере используется следующий файл ресурсов: [пример XML-файла: типичный заказ на покупку (LINQ to XML)](http://msdn.microsoft.com/library/0606c09f-6e43-4f8d-95c8-e8e2e08d2348).</span><span class="sxs-lookup"><span data-stu-id="e2d0e-418">This example uses the following resource file: [Sample XML File: Typical Purchase Order (LINQ to XML)](http://msdn.microsoft.com/library/0606c09f-6e43-4f8d-95c8-e8e2e08d2348).</span></span>  
  
```csharp  
XElement po = XElement.Load("PurchaseOrder.xml",  
    LoadOptions.SetBaseUri | LoadOptions.SetLineInfo);  
string[] splitUri = po.BaseUri.Split('/');  
Console.WriteLine("BaseUri: {0}", splitUri[splitUri.Length - 1]);  
Console.WriteLine();  
Console.WriteLine("{0}{1}{2}",  
    "Element Name".PadRight(20),  
    "Line".PadRight(5),  
    "Position");  
Console.WriteLine("{0}{1}{2}",  
    "------------".PadRight(20),  
    "----".PadRight(5),  
    "--------");  
foreach (XElement e in po.DescendantsAndSelf())  
    Console.WriteLine("{0}{1}{2}",  
        ("".PadRight(e.Ancestors().Count() * 2) + e.Name).PadRight(20),  
        ((IXmlLineInfo)e).LineNumber.ToString().PadRight(5),  
        ((IXmlLineInfo)e).LinePosition);  
```  
  
```vb  
Dim po As XElement = XElement.Load("PurchaseOrder.xml", LoadOptions.SetBaseUri Or LoadOptions.SetLineInfo)  
Dim splitUri() As String = po.BaseUri.Split("/")  
Console.WriteLine("BaseUri: {0}", splitUri(splitUri.Length - 1))  
Console.WriteLine()  
Console.WriteLine("{0}{1}{2}", _  
    "Element Name".PadRight(20), _  
    "Line".PadRight(5), _  
    "Position")  
Console.WriteLine("{0}{1}{2}", _  
    "------------".PadRight(20), _  
    "----".PadRight(5), _  
    "--------")  
For Each e As XElement In po.DescendantsAndSelf()  
    Console.WriteLine("{0}{1}{2}", _  
        ("".PadRight(e.Ancestors().Count() * 2) & e.Name.ToString()).PadRight(20), _  
        (DirectCast(e, IXmlLineInfo)).LineNumber.ToString().PadRight(5), _  
        (DirectCast(e, IXmlLineInfo)).LinePosition)  
Next  
```  
  
 <span data-ttu-id="e2d0e-419">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-419">This example produces the following output:</span></span>  
  
```  
BaseUri: PurchaseOrder.xml  
  
Element Name        Line Position  
------------        ---- --------  
PurchaseOrder       2    2  
  Address           3    4  
    Name            4    6  
    Street          5    6  
    City            6    6  
    State           7    6  
    Zip             8    6  
    Country         9    6  
  Address           11   4  
    Name            12   6  
    Street          13   6  
    City            14   6  
    State           15   6  
    Zip             16   6  
    Country         17   6  
  DeliveryNotes     19   4  
  Items             20   4  
    Item            21   6  
      ProductName   22   8  
      Quantity      23   8  
      USPrice       24   8  
      Comment       25   8  
    Item            27   6  
      ProductName   28   8  
      Quantity      29   8  
      USPrice       30   8  
      ShipDate      31   8  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XElement Load (System.Xml.XmlReader reader, System.Xml.Linq.LoadOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XElement Load(class System.Xml.XmlReader reader, valuetype System.Xml.Linq.LoadOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (reader As XmlReader, options As LoadOptions) As XElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XElement ^ Load(System::Xml::XmlReader ^ reader, System::Xml::Linq::LoadOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" />
      </Parameters>
      <Docs>
        <param name="reader">
          <span data-ttu-id="e2d0e-420">
            <see cref="T:System.Xml.XmlReader" /> будет прочтен для содержимого <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-420">A <see cref="T:System.Xml.XmlReader" /> that will be read for the content of the <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="e2d0e-421">
            <see cref="T:System.Xml.Linq.LoadOptions" />, указывающий поведение пустого пространства и необходимость загрузки базового URI и сведений о строке.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-421">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies white space behavior, and whether to load base URI and line information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2d0e-422">Загружает элемент <see cref="T:System.Xml.Linq.XElement" /> из объекта <see cref="T:System.Xml.XmlReader" />, при необходимости оставляя пустое пространство, задавая базовый URI и сохраняя сведения о строке.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-422">Loads an <see cref="T:System.Xml.Linq.XElement" /> from an <see cref="T:System.Xml.XmlReader" />, optionally preserving white space, setting the base URI, and retaining line information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2d0e-423">
            <see cref="T:System.Xml.Linq.XElement" />, содержащий XML, считанный из указанного <see cref="T:System.Xml.XmlReader" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-423">An <see cref="T:System.Xml.Linq.XElement" /> that contains the XML that was read from the specified <see cref="T:System.Xml.XmlReader" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2d0e-424">Создав <xref:System.Xml.XmlNodeReader> из документа DOM, а затем использовав <xref:System.Xml.XmlNodeReader> создание <xref:System.Xml.Linq.XElement>, этот метод можно использовать для создания копии документа DOM в LINQ to XML-дерева.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-424">By creating an <xref:System.Xml.XmlNodeReader> from a DOM document, and then using the <xref:System.Xml.XmlNodeReader> to create an <xref:System.Xml.Linq.XElement>, this method can be used to create a copy of a DOM document in a LINQ to XML tree.</span></span>  
  
 <span data-ttu-id="e2d0e-425">Используйте <xref:System.Xml.Linq.XElement.Parse%2A> для создания <xref:System.Xml.Linq.XElement> из строки, которая содержит XML-код.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-425">Use <xref:System.Xml.Linq.XElement.Parse%2A> to create an <xref:System.Xml.Linq.XElement> from a string that contains XML.</span></span>  
  
 <span data-ttu-id="e2d0e-426">Установка <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> не является допустимым при загрузке из <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-426">Setting <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> is not valid when loading from a <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="e2d0e-427"><xref:System.Xml.XmlReader> Будет настроен либо читать пустое пространство или нет.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-427">The <xref:System.Xml.XmlReader> will be configured to either read whitespace or not.</span></span> <span data-ttu-id="e2d0e-428">LINQ to XML-дерево будет заполняться узлы пробелов, для чтения.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-428">The LINQ to XML tree will be populated with the whitespace nodes that the reader surfaces.</span></span> <span data-ttu-id="e2d0e-429">Это будет поведение независимо от того, следует ли <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> установлен или нет.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-429">This will be the behavior regardless of whether <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> is set or not.</span></span>  
  
 <span data-ttu-id="e2d0e-430"><xref:System.Xml.XmlReader> , Возможно, является допустимым базовым URI или нет.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-430">The <xref:System.Xml.XmlReader> may have a valid base URI or not.</span></span> <span data-ttu-id="e2d0e-431">Если задать <xref:System.Xml.Linq.LoadOptions.SetBaseUri>, базовый URI будут устанавливаться в XML-дерево из базового URI, который сообщается с помощью <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-431">If you set <xref:System.Xml.Linq.LoadOptions.SetBaseUri>, the base URI will be set in the XML tree from the base URI that is reported by the <xref:System.Xml.XmlReader>.</span></span>  
  
 <span data-ttu-id="e2d0e-432"><xref:System.Xml.XmlReader> , Возможно, сведения действительной строкой или нет.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-432">The <xref:System.Xml.XmlReader> may have a valid line information or not.</span></span> <span data-ttu-id="e2d0e-433">Если задать <xref:System.Xml.Linq.LoadOptions.SetLineInfo>, сведения о строке задается в XML-дерево из информации о строке, полученных от <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-433">If you set <xref:System.Xml.Linq.LoadOptions.SetLineInfo>, the line information will be set in the XML tree from the line information that is reported by the <xref:System.Xml.XmlReader>.</span></span>  
  
 <span data-ttu-id="e2d0e-434">Производительность снижается, если задать <xref:System.Xml.Linq.LoadOptions.SetLineInfo> флаг.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-434">There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flag.</span></span>  
  
 <span data-ttu-id="e2d0e-435">Сведения о строке является точным сразу после загрузки XML-документа.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-435">The line information is accurate immediately after loading the XML document.</span></span> <span data-ttu-id="e2d0e-436">При изменении дерева XML после загрузки документа, сведения о строке могут стать бессмысленной.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-436">If you modify the XML tree after loading the document, the line information may become meaningless.</span></span>  
  
 <span data-ttu-id="e2d0e-437">LINQ для функциональных возможностей загрузки по XML построена на основе <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-437">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="e2d0e-438">Таким образом, следует перехватывать все исключения, вызываемые <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> перегрузки методов и <xref:System.Xml.XmlReader> методы, прочитать и проанализировать документ.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-438">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2d0e-439">В следующем примере загружаются данные строки, которые загружаются из <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-439">The following example loads the line information that it loads from the <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="e2d0e-440">Затем выводятся на печать сведения о строке.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-440">It then prints the line information.</span></span>  
  
```csharp  
string markup =  
@"<Root>  
    <Child>  
        <GrandChild/>  
    </Child>  
</Root>";  
  
// Create a reader and move to the content.  
using (XmlReader nodeReader = XmlReader.Create(new StringReader(markup)))  
{  
    // the reader must be in the Interactive state in order to  
    // Create a LINQ to XML tree from it.  
    nodeReader.MoveToContent();  
  
    XElement xRoot = XElement.Load(nodeReader, LoadOptions.SetLineInfo);  
    Console.WriteLine("{0}{1}{2}",  
        "Element Name".PadRight(20),  
        "Line".PadRight(5),  
        "Position");  
    Console.WriteLine("{0}{1}{2}",  
        "------------".PadRight(20),  
        "----".PadRight(5),  
        "--------");  
    foreach (XElement e in xRoot.DescendantsAndSelf())  
        Console.WriteLine("{0}{1}{2}",  
            ("".PadRight(e.Ancestors().Count() * 2) + e.Name).PadRight(20),  
            ((IXmlLineInfo)e).LineNumber.ToString().PadRight(5),  
            ((IXmlLineInfo)e).LinePosition);  
}  
```  
  
```vb  
Dim markup As String = _  
    "<Root>" & Environment.NewLine & _  
    "    <Child>" & Environment.NewLine & _  
    "        <GrandChild/>" & Environment.NewLine & _  
    "    </Child>" & Environment.NewLine & _  
    "</Root>"  
  
' Create a reader and move to the content.  
Using nodeReader As XmlReader = XmlReader.Create(New StringReader(markup))  
  
    ' the reader must be in the Interactive state in order to  
    ' Create a LINQ to XML tree from it.  
    nodeReader.MoveToContent()  
  
    Dim xRoot As XElement = XElement.Load(nodeReader, LoadOptions.SetLineInfo)  
    Console.WriteLine("{0}{1}{2}", _  
        "Element Name".PadRight(20), _  
        "Line".PadRight(5), _  
        "Position")  
    Console.WriteLine("{0}{1}{2}", _  
        "------------".PadRight(20), _  
        "----".PadRight(5), _  
        "--------")  
    For Each e As XElement In xRoot.DescendantsAndSelf()  
        Console.WriteLine("{0}{1}{2}", _  
            ("".PadRight(e.Ancestors().Count() * 2) & e.Name.ToString).PadRight(20), _  
            (DirectCast(e, IXmlLineInfo)).LineNumber.ToString().PadRight(5), _  
            (DirectCast(e, IXmlLineInfo)).LinePosition)  
    Next  
End Using  
```  
  
 <span data-ttu-id="e2d0e-441">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-441">This example produces the following output:</span></span>  
  
```  
Element Name        Line Position  
------------        ---- --------  
Root                1    2  
  Child             2    6  
    GrandChild      3    10  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Xml.Linq.XElement&gt; LoadAsync (System.IO.Stream stream, System.Xml.Linq.LoadOptions options, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Xml.Linq.XElement&gt; LoadAsync(class System.IO.Stream stream, valuetype System.Xml.Linq.LoadOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.LoadAsync(System.IO.Stream,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task&lt;System::Xml::Linq::XElement ^&gt; ^ LoadAsync(System::IO::Stream ^ stream, System::Xml::Linq::LoadOptions options, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="stream">To be added.</param>
        <param name="options">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Xml.Linq.XElement&gt; LoadAsync (System.IO.TextReader textReader, System.Xml.Linq.LoadOptions options, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Xml.Linq.XElement&gt; LoadAsync(class System.IO.TextReader textReader, valuetype System.Xml.Linq.LoadOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.LoadAsync(System.IO.TextReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task&lt;System::Xml::Linq::XElement ^&gt; ^ LoadAsync(System::IO::TextReader ^ textReader, System::Xml::Linq::LoadOptions options, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textReader" Type="System.IO.TextReader" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="textReader">To be added.</param>
        <param name="options">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Xml.Linq.XElement&gt; LoadAsync (System.Xml.XmlReader reader, System.Xml.Linq.LoadOptions options, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Xml.Linq.XElement&gt; LoadAsync(class System.Xml.XmlReader reader, valuetype System.Xml.Linq.LoadOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.LoadAsync(System.Xml.XmlReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task&lt;System::Xml::Linq::XElement ^&gt; ^ LoadAsync(System::Xml::XmlReader ^ reader, System::Xml::Linq::LoadOptions options, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="reader">To be added.</param>
        <param name="options">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XName Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Linq.XName Name" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XElement.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As XName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Linq::XName ^ Name { System::Xml::Linq::XName ^ get(); void set(System::Xml::Linq::XName ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XName</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e2d0e-442">Возвращает или задает имя этого элемента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-442">Gets or sets the name of this element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e2d0e-443">Объект <see cref="T:System.Xml.Linq.XName" />, содержащий имя данного элемента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-443">An <see cref="T:System.Xml.Linq.XName" /> that contains the name of this element.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2d0e-444">Параметр этого свойства вызовет <xref:System.Xml.Linq.XObject.Changed> и <xref:System.Xml.Linq.XObject.Changing> события.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-444">Setting this property will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2d0e-445">В следующем примере это свойство используется для определения имени элемента.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-445">The following example uses this property to determine the name of an element.</span></span>  
  
```csharp  
XElement el1 = new XElement("Root", "content");  
Console.WriteLine(el1.Name);  
  
XNamespace ns = "http://www.adventure-works.com";  
XElement el2 = new XElement(ns + "Root", "content");  
Console.WriteLine(el2.Name);  
Console.WriteLine(el2.Name.Namespace);  
Console.WriteLine(el2.Name.LocalName);  
el2.Name = ns + "NewName";  
Console.WriteLine(el2.Name);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim el1 As XElement = <Root>content</Root>  
        Console.WriteLine(el1.Name)  
  
        Dim el2 As XElement = <aw:Root>content</aw:Root>  
        Console.WriteLine(el2.Name)  
        Console.WriteLine(el2.Name.Namespace)  
        Console.WriteLine(el2.Name.LocalName)  
        Dim aw as XNamespace = GetXmlNamespace(aw)  
        el2.Name = aw + "NewName"  
        Console.WriteLine(el2.Name)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="e2d0e-446">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-446">This example produces the following output:</span></span>  
  
```  
Root  
{http://www.adventure-works.com}Root  
http://www.adventure-works.com  
Root  
{http://www.adventure-works.com}NewName  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNodeType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlNodeType NodeType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XElement.NodeType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property NodeType As XmlNodeType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::XmlNodeType NodeType { System::Xml::XmlNodeType get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNodeType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e2d0e-447">Возвращает тип узла для этого узла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-447">Gets the node type for this node.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e2d0e-448">Тип узла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-448">The node type.</span>
          </span>
          <span data-ttu-id="e2d0e-449">Для объектов <see cref="T:System.Xml.Linq.XElement" /> это значение равно <see cref="F:System.Xml.XmlNodeType.Element" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-449">For <see cref="T:System.Xml.Linq.XElement" /> objects, this value is <see cref="F:System.Xml.XmlNodeType.Element" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2d0e-450">Так как все классы, производные от <xref:System.Xml.Linq.XObject> содержат <xref:System.Xml.Linq.XObject.NodeType%2A> свойства, можно написать код, который работает с коллекциями конкретный подкласс <xref:System.Xml.Linq.XObject>.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-450">Because all classes that derive from <xref:System.Xml.Linq.XObject> contain a <xref:System.Xml.Linq.XObject.NodeType%2A> property, you can write code that operates on collections of concrete subclass of <xref:System.Xml.Linq.XObject>.</span></span> <span data-ttu-id="e2d0e-451">Затем можно проверить код для типа узла каждого узла в коллекции.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-451">Your code can then test for the node type of each node in the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2d0e-452">В следующем примере это свойство используется для печати тип узла элемента.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-452">The following example uses this property to print the node type of an element.</span></span>  
  
```csharp  
XElement el1 = new XElement("Root", "content");  
Console.WriteLine(el1.NodeType);  
Console.WriteLine();  
```  
  
```vb  
Dim el1 As XElement = <Root>content</Root>  
Console.WriteLine(el1.NodeType.ToString())  
Console.WriteLine()  
```  
  
 <span data-ttu-id="e2d0e-453">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-453">This example produces the following output:</span></span>  
  
```  
Element  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator bool (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Boolean" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator bool(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element">
          <span data-ttu-id="e2d0e-454">Элемент <see cref="T:System.Xml.Linq.XElement" /> для приведения к <see cref="T:System.Boolean" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-454">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Boolean" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2d0e-455">Приведение значение данного элемента <see cref="T:System.Xml.Linq.XElement" /> к <see cref="T:System.Boolean" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-455">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Boolean" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2d0e-456">Объект <see cref="T:System.Boolean" /> с содержимым данного элемента <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-456">A <see cref="T:System.Boolean" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2d0e-457">При преобразовании в <xref:System.Boolean> из атрибута или элемента, допустимые для параметра значения: «0», «1» любую строку, создающий «true» или «false» после сокращения и преобразования в нижний регистр.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-457">When converting to <xref:System.Boolean> from an attribute or element, allowed values are "0", "1", and any string that produces "true" or "false" after trimming and conversion to lower case.</span></span>
  
## Examples  
 <span data-ttu-id="e2d0e-458">В следующем примере создается некоторые элементы с логическими значениями.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-458">The following example creates some elements with boolean values.</span></span> <span data-ttu-id="e2d0e-459">Затем приводит их <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-459">It then casts them to <xref:System.Boolean>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",   
    new XElement("BoolValue1", true),  
    new XElement("BoolValue2", false)  
);  
bool bool1 = (bool)root.Element("BoolValue1");  
bool bool2 = (bool)root.Element("BoolValue2");  
Console.WriteLine("(bool)BoolValue1={0}", bool1);  
Console.WriteLine("(bool)BoolValue2={0}", bool2);  
```  
  
```vb  
Dim root As XElement = _   
        <Root>  
            <BoolValue1>true</BoolValue1>  
            <BoolValue2>false</BoolValue2>  
        </Root>  
Dim bool1 As Boolean = CBool(root.Element("BoolValue1"))  
Dim bool2 As Boolean = CBool(root.Element("BoolValue2"))  
Console.WriteLine("(bool)BoolValue1={0}", bool1)  
Console.WriteLine("(bool)BoolValue2={0}", bool2)  
```  
  
 <span data-ttu-id="e2d0e-460">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-460">This example produces the following output:</span></span>  
  
```  
(bool)BoolValue1=True  
(bool)BoolValue2=False  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="e2d0e-461">Элемент не содержит допустимое значение типа <see cref="T:System.Boolean" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-461">The element does not contain a valid <see cref="T:System.Boolean" /> value.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e2d0e-462">Параметр <paramref name="element" /> имеет значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-462">The <paramref name="element" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator DateTime (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTime op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.DateTime" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator DateTime(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element">
          <span data-ttu-id="e2d0e-463">Элемент <see cref="T:System.Xml.Linq.XElement" /> для приведения к <see cref="T:System.DateTime" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-463">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.DateTime" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2d0e-464">Приведение значение данного элемента <see cref="T:System.Xml.Linq.XElement" /> к <see cref="T:System.DateTime" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-464">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.DateTime" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2d0e-465">Объект <see cref="T:System.DateTime" /> с содержимым данного элемента <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-465">A <see cref="T:System.DateTime" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2d0e-466">Место для значения атрибута или элемента, содержащего даты и времени тесно связана со значениями даты и времени, описанным в ISO 8601.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-466">The value space of an attribute or element that contains date and time content is closely related to the dates and times described in ISO 8601.</span></span> <span data-ttu-id="e2d0e-467">При создании атрибута или элемента, содержащего даты и времени, значения атрибута или элемента форматируются в соответствии со спецификацией W3C.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-467">When creating an attribute or element that contains date and time content, the attribute or element values are formatted per the W3C specification.</span></span> <span data-ttu-id="e2d0e-468">См. в спецификации W3C для получения дополнительных сведений.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-468">See the W3C specification for more details.</span></span>  
  
 <span data-ttu-id="e2d0e-469">Поведение является нестрогим при приведении к <xref:System.DateTime> из атрибута или элемента.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-469">Behavior is lax when casting to a <xref:System.DateTime> from an attribute or element.</span></span> <span data-ttu-id="e2d0e-470">Даже если значение атрибута или элемента не отформатировано в точном соответствии со спецификацией W3C, значение преобразуется к соответствующим образом <xref:System.DateTime>.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-470">Even if the attribute or element value is not formatted exactly per the W3C specification, the value is appropriately converted to a <xref:System.DateTime>.</span></span>  
  
 <span data-ttu-id="e2d0e-471">Использует данного оператора преобразования <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> для преобразования из <xref:System.DateTime>.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-471">This conversion operator uses <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> to convert from a <xref:System.DateTime>.</span></span>

## Examples  
 <span data-ttu-id="e2d0e-472">В следующем примере создается элемент с данными даты и времени.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-472">The following example creates an element with date and time content.</span></span> <span data-ttu-id="e2d0e-473">Затем приводит его к <xref:System.DateTime> для извлечения значения.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-473">It then casts it to <xref:System.DateTime> to retrieve the value.</span></span>  
  
```csharp  
// Behavior is strict when formatting an XML element or attribute from a DateTime,  
// but behavior is lax when casting to a DateTime from an element or attribute.  
XElement root = new XElement("Root", new DateTime(2006, 10, 6, 12, 30, 0));  
Console.WriteLine(root);  
  
// Cast from a strictly formatted XML element.  
DateTime dt = (DateTime)root;  
Console.WriteLine("dt={0}", dt);  
Console.WriteLine("-----");  
  
// If root is formatted in some different way:  
XElement dtElement = new XElement("OrderDate", "October 6, 2006");  
Console.WriteLine(dtElement);  
DateTime orderDate = (DateTime)dtElement;  
Console.WriteLine("orderDate={0:d}", orderDate);  
```  
  
```vb  
' Behavior is strict when formatting an XML element or attribute from a DateTime,  
' but behavior is lax when casting to a DateTime from an element or attribute.  
Dim root As XElement = <Root><%= New DateTime(2006, 10, 6, 12, 30, 0) %></Root>  
Console.WriteLine(root)  
  
' Cast from a strictly formatted XML element.  
Dim dt As DateTime = CType(root, DateTime)  
Console.WriteLine("dt={0}", dt)  
Console.WriteLine("-----")  
  
' If root is formatted in some different way:  
Dim dtElement As XElement = <OrderDate>October 6, 2006</OrderDate>  
Console.WriteLine(dtElement)  
Dim orderDate As DateTime = CType(dtElement, DateTime)  
Console.WriteLine("orderDate={0:d}", orderDate)  
```  
  
 <span data-ttu-id="e2d0e-474">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-474">This example produces the following output:</span></span>  
  
```  
<Root>2006-10-06T12:30:00</Root>  
dt=10/6/2006 12:30:00 PM  
-----  
<OrderDate>October 6, 2006</OrderDate>  
orderDate=10/6/2006  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="e2d0e-475">Элемент не содержит допустимое значение типа <see cref="T:System.DateTime" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-475">The element does not contain a valid <see cref="T:System.DateTime" /> value.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e2d0e-476">Параметр <paramref name="element" /> имеет значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-476">The <paramref name="element" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator DateTimeOffset (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.DateTimeOffset" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator DateTimeOffset(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element">
          <span data-ttu-id="e2d0e-477">Элемент <see cref="T:System.Xml.Linq.XElement" /> для приведения к <see cref="T:System.DateTimeOffset" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-477">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.DateTimeOffset" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2d0e-478">Приведение значение данного элемента <see cref="T:System.Xml.Linq.XAttribute" /> к <see cref="T:System.DateTimeOffset" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-478">Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.DateTimeOffset" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2d0e-479">Объект <see cref="T:System.DateTimeOffset" /> с содержимым данного элемента <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-479">A <see cref="T:System.DateTimeOffset" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2d0e-480">Использует данного оператора преобразования <xref:System.Xml.XmlConvert> класса для выполнения преобразования.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-480">This conversion operator uses the <xref:System.Xml.XmlConvert> class to do the conversion.</span></span>  
  
## Examples  
 <span data-ttu-id="e2d0e-481">В следующем примере создается элемент с данными даты и времени.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-481">The following example creates an element with date and time content.</span></span> <span data-ttu-id="e2d0e-482">Приводит к <xref:System.DateTimeOffset> для извлечения значения.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-482">It then casts to <xref:System.DateTimeOffset> to retrieve the value.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XElement("Child", new DateTimeOffset(new DateTime(2006, 10, 6, 12, 30, 0)))  
);  
Console.WriteLine(root);  
  
DateTimeOffset dt = (DateTimeOffset)root.Element("Child");  
Console.WriteLine("dt={0}", dt);  
```  
  
```vb  
Dim root As XElement = _  
    <Root>  
        <Child><%= New DateTimeOffset(New DateTime(2006, 10, 6, 12, 30, 0)) %></Child>  
    </Root>  
Console.WriteLine(root)  
  
Dim dt As DateTimeOffset = CType(root.<Child>(0), DateTimeOffset)  
Console.WriteLine("dt={0}", dt)  
```  
  
 <span data-ttu-id="e2d0e-483">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-483">This example produces the following output:</span></span>  
  
```  
<Root>  
  <Child>2006-10-06T12:30:00-07:00</Child>  
</Root>  
dt=10/6/2006 12:30:00 PM -07:00  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="e2d0e-484">Элемент не содержит допустимое значение типа <see cref="T:System.DateTimeOffset" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-484">The element does not contain a valid <see cref="T:System.DateTimeOffset" /> value.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e2d0e-485">Параметр <paramref name="element" /> имеет значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-485">The <paramref name="element" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator decimal (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Decimal op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Decimal" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Decimal(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element">
          <span data-ttu-id="e2d0e-486">Элемент <see cref="T:System.Xml.Linq.XElement" /> для приведения к <see cref="T:System.Decimal" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-486">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Decimal" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2d0e-487">Приведение значение данного элемента <see cref="T:System.Xml.Linq.XElement" /> к <see cref="T:System.Decimal" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-487">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Decimal" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2d0e-488">Объект <see cref="T:System.Decimal" /> с содержимым данного элемента <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-488">A <see cref="T:System.Decimal" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
  
## Examples  
 <span data-ttu-id="e2d0e-489">В следующем примере создается элемент с десятичным значением.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-489">The following example creates an element with a decimal value.</span></span> <span data-ttu-id="e2d0e-490">Затем извлекается значение атрибута с помощью приведения к <xref:System.Decimal>.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-490">It then retrieves the value of the attribute by casting to <xref:System.Decimal>.</span></span>  
  
```csharp  
XElement root = new XElement("Root", "79228162514264337593543950335");  
decimal value = (decimal)root;  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root>79228162514264337593543950335</Root>  
Dim value As Decimal = CDec(root)  
Console.WriteLine("value={0}", value)  
  
```  
  
 <span data-ttu-id="e2d0e-491">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-491">This example produces the following output:</span></span>  
  
```  
value=79228162514264337593543950335  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="e2d0e-492">Элемент не содержит допустимое значение типа <see cref="T:System.Decimal" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-492">The element does not contain a valid <see cref="T:System.Decimal" /> value.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e2d0e-493">Параметр <paramref name="element" /> имеет значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-493">The <paramref name="element" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator double (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname float64 op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Double" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator double(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element">
          <span data-ttu-id="e2d0e-494">Элемент <see cref="T:System.Xml.Linq.XElement" /> для приведения к <see cref="T:System.Double" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-494">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Double" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2d0e-495">Приведение значение данного элемента <see cref="T:System.Xml.Linq.XElement" /> к <see cref="T:System.Double" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-495">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Double" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2d0e-496">Объект <see cref="T:System.Double" /> с содержимым данного элемента <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-496">A <see cref="T:System.Double" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
## Examples  
 <span data-ttu-id="e2d0e-497">В следующем примере создается атрибут с `double` содержимого.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-497">The following example creates an attribute with `double` content.</span></span> <span data-ttu-id="e2d0e-498">Затем извлекается значение с помощью приведения к <xref:System.Double>.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-498">It then retrieves the value by casting to <xref:System.Double>.</span></span>  
  
```csharp  
XElement root = new XElement("Root", 1.79769313486231e308);  
double value = (double)root;  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root>1.79769313486231E+308</Root>  
Dim value As Double = CDbl(root)  
Console.WriteLine("value={0}", value)  
```  
  
 <span data-ttu-id="e2d0e-499">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-499">This example produces the following output:</span></span>  
  
```  
value=1.79769313486231E+308  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="e2d0e-500">Элемент не содержит допустимое значение типа <see cref="T:System.Double" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-500">The element does not contain a valid <see cref="T:System.Double" /> value.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e2d0e-501">Параметр <paramref name="element" /> имеет значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-501">The <paramref name="element" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Guid (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Guid op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Guid" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Guid(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element">
          <span data-ttu-id="e2d0e-502">Элемент <see cref="T:System.Xml.Linq.XElement" /> для приведения к <see cref="T:System.Guid" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-502">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Guid" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2d0e-503">Приведение значение данного элемента <see cref="T:System.Xml.Linq.XElement" /> к <see cref="T:System.Guid" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-503">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Guid" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2d0e-504">Объект <see cref="T:System.Guid" /> с содержимым данного элемента <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-504">A <see cref="T:System.Guid" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
  
## Examples  
 <span data-ttu-id="e2d0e-505">В следующем примере создается элемент с идентификатором guid в виде содержимого.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-505">The following example creates an element with a guid as content.</span></span> <span data-ttu-id="e2d0e-506">Затем извлекается значение с помощью приведения к <xref:System.Guid>.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-506">It then retrieves the value by casting to <xref:System.Guid>.</span></span>  
  
```csharp  
XElement root = new XElement("Root", new Guid("3c1cc55b-baff-4b7a-9d17-077af3aa5730"));  
Guid value = (Guid)root;  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root><%= New Guid("3c1cc55b-baff-4b7a-9d17-077af3aa5730") %></Root>  
Dim value As Guid = CType(root, Guid)  
Console.WriteLine("value={0}", value)  
```  
  
 <span data-ttu-id="e2d0e-507">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-507">This example produces the following output:</span></span>  
  
```  
value=3c1cc55b-baff-4b7a-9d17-077af3aa5730  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="e2d0e-508">Элемент не содержит допустимое значение типа <see cref="T:System.Guid" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-508">The element does not contain a valid <see cref="T:System.Guid" /> value.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e2d0e-509">Параметр <paramref name="element" /> имеет значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-509">The <paramref name="element" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator int (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname int32 op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Int32" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator int(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element">
          <span data-ttu-id="e2d0e-510">Элемент <see cref="T:System.Xml.Linq.XElement" /> для приведения к <see cref="T:System.Int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-510">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Int32" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2d0e-511">Приведение значения данного элемента <see cref="T:System.Xml.Linq.XElement" /> к <see cref="T:System.Int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-511">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to an <see cref="T:System.Int32" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2d0e-512">Объект <see cref="T:System.Int32" /> с содержимым данного элемента <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-512">A <see cref="T:System.Int32" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
  
## Examples  
 <span data-ttu-id="e2d0e-513">В следующем примере создается элемент с целое число, как содержимое.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-513">The following example creates an element with an integer as content.</span></span> <span data-ttu-id="e2d0e-514">Затем извлекается значение с помощью приведения к <xref:System.Int32>.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-514">It then retrieves the value by casting to <xref:System.Int32>.</span></span>  
  
```csharp  
XElement root = new XElement("Root", 2147483647);  
int value = (int)root;  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root>2147483647</Root>  
Dim value As Integer = CInt(root)  
Console.WriteLine("value={0}", value)  
```  
  
 <span data-ttu-id="e2d0e-515">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-515">This example produces the following output:</span></span>  
  
```  
value=2147483647  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="e2d0e-516">Элемент не содержит допустимое значение типа <see cref="T:System.Int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-516">The element does not contain a valid <see cref="T:System.Int32" /> value.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e2d0e-517">Параметр <paramref name="element" /> имеет значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-517">The <paramref name="element" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator long (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname int64 op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Int64" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator long(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element">
          <span data-ttu-id="e2d0e-518">Элемент <see cref="T:System.Xml.Linq.XElement" /> для приведения к <see cref="T:System.Int64" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-518">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Int64" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2d0e-519">Приведение значения данного элемента <see cref="T:System.Xml.Linq.XElement" /> к <see cref="T:System.Int64" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-519">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to an <see cref="T:System.Int64" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2d0e-520">Объект <see cref="T:System.Int64" /> с содержимым данного элемента <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-520">A <see cref="T:System.Int64" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
  
## Examples  
 <span data-ttu-id="e2d0e-521">В следующем примере создается элемент с длинное целое число, как содержимое.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-521">The following example creates an element with a long integer as content.</span></span> <span data-ttu-id="e2d0e-522">Затем извлекается значение элемента с помощью приведения к <xref:System.Int64>.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-522">It then retrieves the value of the element by casting to <xref:System.Int64>.</span></span>  
  
```csharp  
XElement root = new XElement("Root", 9223372036854775807);  
long value = (long)root;  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root>9223372036854775807</Root>  
Dim value As Long = CLng(root)  
Console.WriteLine("value={0}", value)  
```  
  
 <span data-ttu-id="e2d0e-523">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-523">This example produces the following output:</span></span>  
  
```  
value=9223372036854775807  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="e2d0e-524">Элемент не содержит допустимое значение типа <see cref="T:System.Int64" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-524">The element does not contain a valid <see cref="T:System.Int64" /> value.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e2d0e-525">Параметр <paramref name="element" /> имеет значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-525">The <paramref name="element" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;bool&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;bool&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Boolean}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;bool&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element">
          <span data-ttu-id="e2d0e-526">Элемент <see cref="T:System.Xml.Linq.XElement" /> для приведения к <see cref="T:System.Nullable`1" /> для <see cref="T:System.Boolean" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-526">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2d0e-527">Приведение значения данного элемента <see cref="T:System.Xml.Linq.XElement" /> к <see cref="T:System.Nullable`1" /><see cref="T:System.Boolean" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-527">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2d0e-528">
            <see cref="T:System.Nullable`1" /> для <see cref="T:System.Boolean" />, содержащий данные этого элемента <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-528">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2d0e-529">При преобразовании в <xref:System.Nullable%601> из <xref:System.Boolean> из атрибута или элемента, допустимые для параметра значения: «0», «1» любую строку, создающий «true» или «false» после сокращения и преобразования в нижний регистр.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-529">When converting to <xref:System.Nullable%601> of <xref:System.Boolean> from an attribute or element, allowed values are "0", "1", and any string that produces "true" or "false" after trimming and conversion to lower case.</span></span>
  
## Examples  
 <span data-ttu-id="e2d0e-530">В следующем примере создается элемент с содержимым типа boolean.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-530">The following example creates an element with boolean content.</span></span> <span data-ttu-id="e2d0e-531">Затем извлекается значение с помощью приведения к <xref:System.Nullable%601> из <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-531">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.Boolean>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",   
    new XElement("BoolValue1", true),  
    new XElement("BoolValue2", false));  
bool? bool1 = (bool?)root.Element("BoolValue1");  
bool? bool2 = (bool?)root.Element("BoolValue2");  
Console.WriteLine("Nullable Boolean: value1={0}", bool1);  
Console.WriteLine("Nullable Boolean: value2={0}", bool2);  
```  
  
```vb  
Dim root As XElement = _   
        <Root>  
            <BoolValue1>true</BoolValue1>  
            <BoolValue2>false</BoolValue2>  
        </Root>  
  
Dim value1 As Nullable(Of Boolean) = CType(root.Element("BoolValue1"), Nullable(Of Boolean))  
Dim value2 As Nullable(Of Boolean) = CType(root.Element("BoolValue2"), Nullable(Of Boolean))  
Console.WriteLine("Nullable Boolean: value1={0}", IIf(value1.HasValue, value1.ToString(), "null"))  
Console.WriteLine("Nullable Boolean: value2={0}", IIf(value2.HasValue, value2.ToString(), "null"))  
```  
  
 <span data-ttu-id="e2d0e-532">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-532">This example produces the following output:</span></span>  
  
```  
Nullable Boolean: value1=True  
Nullable Boolean: value2=False  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="e2d0e-533">Элемент не содержит допустимое значение типа <see cref="T:System.Boolean" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-533">The element does not contain a valid <see cref="T:System.Boolean" /> value.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;DateTime&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.DateTime}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;DateTime&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.DateTime&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element">
          <span data-ttu-id="e2d0e-534">Элемент <see cref="T:System.Xml.Linq.XElement" /> для приведения к <see cref="T:System.Nullable`1" /> для <see cref="T:System.DateTime" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-534">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2d0e-535">Приведение значения данного элемента <see cref="T:System.Xml.Linq.XElement" /> к <see cref="T:System.Nullable`1" /><see cref="T:System.DateTime" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-535">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2d0e-536">
            <see cref="T:System.Nullable`1" /> для <see cref="T:System.DateTime" />, содержащий данные этого элемента <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-536">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2d0e-537">Место для значения атрибута или элемента, содержащего даты и времени тесно связана со значениями даты и времени, описанным в ISO 8601.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-537">The value space of an attribute or element that contains date and time content is closely related to the dates and times described in ISO 8601.</span></span> <span data-ttu-id="e2d0e-538">При создании атрибута или элемента, содержащего даты и времени, значения атрибута или элемента форматируются в соответствии со спецификацией W3C.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-538">When creating an attribute or element that contains date and time content, the attribute or element values are formatted per the W3C specification.</span></span> <span data-ttu-id="e2d0e-539">См. в спецификации W3C для получения дополнительных сведений.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-539">See the W3C specification for more details.</span></span>  
  
 <span data-ttu-id="e2d0e-540">Поведение нестрогой при явном приведении к <xref:System.Nullable%601> из <xref:System.DateTime> из атрибута или элемента.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-540">The behavior is lax when casting to a <xref:System.Nullable%601> of <xref:System.DateTime> from an attribute or element.</span></span> <span data-ttu-id="e2d0e-541">Даже если значение атрибута или элемента не отформатировано в точном соответствии со спецификацией W3C, значение преобразуется к соответствующим образом <xref:System.Nullable%601> из <xref:System.DateTime>.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-541">Even if the attribute or element value is not formatted exactly per the W3C specification, the value is appropriately converted to a <xref:System.Nullable%601> of <xref:System.DateTime>.</span></span>  
  
 <span data-ttu-id="e2d0e-542">Использует данного оператора преобразования <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> для преобразования из <xref:System.DateTime>.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-542">This conversion operator uses <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> to convert from a <xref:System.DateTime>.</span></span>
  
## Examples  
 <span data-ttu-id="e2d0e-543">В следующем примере создается элемент с данными даты и времени.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-543">The following example creates an element with a date and time as content.</span></span> <span data-ttu-id="e2d0e-544">Затем извлекается значение с помощью приведения к <xref:System.Nullable%601> из <xref:System.DateTime>.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-544">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.DateTime>.</span></span>  
  
```csharp
XElement root = new XElement("Root",  
    new XElement("Value", new DateTime(2006, 10, 6, 12, 30, 0))  
);  
DateTime? value = (DateTime?)root.Element("Value");  
Console.WriteLine("Nullable DateTime: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = _   
    <Root>  
        <Value><%= New DateTime(2006, 10, 6, 12, 30, 0) %></Value>  
    </Root>  
Dim value As Nullable(Of DateTime) = CType(root.Element("Value"), Nullable(Of DateTime))  
Console.WriteLine("Nullable DateTime: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 <span data-ttu-id="e2d0e-545">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-545">This example produces the following output:</span></span>  
  
```  
Nullable DateTime: value=10/6/2006 12:30:00 PM  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="e2d0e-546">Элемент не содержит допустимое значение типа <see cref="T:System.DateTime" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-546">The element does not contain a valid <see cref="T:System.DateTime" /> value.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;DateTimeOffset&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.DateTimeOffset}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;DateTimeOffset&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.DateTimeOffset&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element">
          <span data-ttu-id="e2d0e-547">Элемент <see cref="T:System.Xml.Linq.XElement" /> для приведения к значению <see cref="T:System.Nullable`1" /><see cref="T:System.DateTimeOffset" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-547">The <see cref="T:System.Xml.Linq.XElement" /> to cast to an <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2d0e-548">Приведение значения данного элемента <see cref="T:System.Xml.Linq.XElement" /> к <see cref="T:System.Nullable`1" /><see cref="T:System.DateTimeOffset" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-548">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2d0e-549">
            <see cref="T:System.Nullable`1" /> для <see cref="T:System.DateTimeOffset" />, содержащий данные этого элемента <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-549">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2d0e-550">Использует данного оператора преобразования <xref:System.Xml.XmlConvert> класса для выполнения преобразования.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-550">This conversion operator uses the <xref:System.Xml.XmlConvert> class to do the conversion.</span></span>
  
## Examples  
 <span data-ttu-id="e2d0e-551">В следующем примере создается элемент с данными даты и времени.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-551">The following example creates an element with date and time content.</span></span> <span data-ttu-id="e2d0e-552">Приводит к <xref:System.Nullable%601> из <xref:System.DateTimeOffset> требуется извлечь значение.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-552">It then casts to <xref:System.Nullable%601> of <xref:System.DateTimeOffset> to retrieve the value.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XElement("Child", new DateTimeOffset(new DateTime(2006, 10, 6, 12, 30, 0)))  
);  
Console.WriteLine(root);  
  
DateTimeOffset? dt = (DateTimeOffset?)root.Element("Child");  
Console.WriteLine("dt={0}", dt);  
```  
  
```vb  
Dim root As XElement = _  
    <Root>  
        <Child><%= New DateTimeOffset(New DateTime(2006, 10, 6, 12, 30, 0)) %></Child>  
    </Root>  
Console.WriteLine(root)  
  
Dim dt As Nullable(Of DateTimeOffset) = CType(root.<Child>(0), Nullable(Of DateTimeOffset))  
Console.WriteLine("dt={0}", dt)  
```  
  
 <span data-ttu-id="e2d0e-553">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-553">This example produces the following output:</span></span>  
  
```  
<Root>  
  <Child>2006-10-06T12:30:00-07:00</Child>  
</Root>  
dt=10/6/2006 12:30:00 PM -07:00  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="e2d0e-554">Элемент не содержит допустимое значение типа <see cref="T:System.DateTimeOffset" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-554">The element does not contain a valid <see cref="T:System.DateTimeOffset" /> value.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;decimal&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Decimal}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;System::Decimal&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element">
          <span data-ttu-id="e2d0e-555">Элемент <see cref="T:System.Xml.Linq.XElement" /> для приведения к <see cref="T:System.Nullable`1" /> для <see cref="T:System.Decimal" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-555">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2d0e-556">Приведение значения данного элемента <see cref="T:System.Xml.Linq.XElement" /> к <see cref="T:System.Nullable`1" /><see cref="T:System.Decimal" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-556">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2d0e-557">
            <see cref="T:System.Nullable`1" /> для <see cref="T:System.Decimal" />, содержащий данные этого элемента <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-557">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
  
## Examples  
 <span data-ttu-id="e2d0e-558">В следующем примере создается элемент с содержимым десятичное число.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-558">The following example creates an element with decimal content.</span></span> <span data-ttu-id="e2d0e-559">Затем извлекается значение с помощью приведения к <xref:System.Nullable%601> из <xref:System.Decimal>.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-559">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.Decimal>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XElement("Value", "79228162514264337593543950335")  
);  
decimal? value = (decimal?)root.Element("Value");  
Console.WriteLine("Nullable decimal: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = _   
    <Root>  
        <Value>79228162514264337593543950335</Value>  
    </Root>  
Dim value As Nullable(Of Decimal) = CType(root.Element("Value"), Nullable(Of Decimal))  
Console.WriteLine("Nullable decimal: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 <span data-ttu-id="e2d0e-560">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-560">This example produces the following output:</span></span>  
  
```  
Nullable decimal: value=79228162514264337593543950335  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="e2d0e-561">Элемент не содержит допустимое значение типа <see cref="T:System.Decimal" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-561">The element does not contain a valid <see cref="T:System.Decimal" /> value.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;double&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;float64&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Double}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;double&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element">
          <span data-ttu-id="e2d0e-562">Элемент <see cref="T:System.Xml.Linq.XElement" /> для приведения к <see cref="T:System.Nullable`1" /> для <see cref="T:System.Double" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-562">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2d0e-563">Приведение значения данного элемента <see cref="T:System.Xml.Linq.XElement" /> к <see cref="T:System.Nullable`1" /><see cref="T:System.Double" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-563">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2d0e-564">
            <see cref="T:System.Nullable`1" /> для <see cref="T:System.Double" />, содержащий данные этого элемента <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-564">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples  
 <span data-ttu-id="e2d0e-565">В следующем примере создается элемент с числом двойной точности с плавающей запятой.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-565">The following example creates an element with double precision floating point content.</span></span> <span data-ttu-id="e2d0e-566">Затем извлекается значение с помощью приведения к <xref:System.Nullable%601> из <xref:System.Double>.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-566">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.Double>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XElement("Value", 1.79769313486231e308)  
);  
double? value = (double?)root.Element("Value");  
Console.WriteLine("Nullable double: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = _  
        <Root>  
            <Value>1.79769313486231e308</Value>  
        </Root>  
  
Dim value As Nullable(Of Double) = CType(root.Element("Value"), Nullable(Of Double))  
Console.WriteLine("Nullable double: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 <span data-ttu-id="e2d0e-567">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-567">This example produces the following output:</span></span>  
  
```  
Nullable double: value=1.79769313486231E+308  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="e2d0e-568">Элемент не содержит допустимое значение типа <see cref="T:System.Double" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-568">The element does not contain a valid <see cref="T:System.Double" /> value.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;Guid&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;valuetype System.Guid&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Guid}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;Guid&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Guid&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element">
          <span data-ttu-id="e2d0e-569">Элемент <see cref="T:System.Xml.Linq.XElement" /> для приведения к <see cref="T:System.Nullable`1" /> для <see cref="T:System.Guid" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-569">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Guid" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2d0e-570">Приведение значения данного элемента <see cref="T:System.Xml.Linq.XElement" /> к <see cref="T:System.Nullable`1" /><see cref="T:System.Guid" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-570">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Guid" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2d0e-571">
            <see cref="T:System.Nullable`1" /> для <see cref="T:System.Guid" />, содержащий данные этого элемента <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-571">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Guid" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples  
 <span data-ttu-id="e2d0e-572">В следующем примере создается элемент с содержимым guid.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-572">The following example creates an element with guid content.</span></span> <span data-ttu-id="e2d0e-573">Затем извлекается значение с помощью приведения к <xref:System.Nullable%601> из <xref:System.Guid>.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-573">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.Guid>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XElement("Value", new Guid("3c1cc55b-baff-4b7a-9d17-077af3aa5730"))  
);  
Guid? value = (Guid?)root.Element("Value");  
Console.WriteLine("Nullable Guid: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = _   
    <Root>  
        <Value><%= New Guid("3c1cc55b-baff-4b7a-9d17-077af3aa5730") %></Value>  
    </Root>  
Dim value As Nullable(Of Guid) = CType(root.Element("Value"), Nullable(Of Guid))  
Console.WriteLine("Nullable Guid: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 <span data-ttu-id="e2d0e-574">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-574">This example produces the following output:</span></span>  
  
```  
Nullable Guid: value=3c1cc55b-baff-4b7a-9d17-077af3aa5730  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="e2d0e-575">Элемент не содержит допустимое значение типа <see cref="T:System.Guid" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-575">The element does not contain a valid <see cref="T:System.Guid" /> value.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;int&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;int32&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Int32}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;int&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element">
          <span data-ttu-id="e2d0e-576">Элемент <see cref="T:System.Xml.Linq.XElement" /> для приведения к <see cref="T:System.Nullable`1" /> для <see cref="T:System.Int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-576">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2d0e-577">Приведение значения данного элемента <see cref="T:System.Xml.Linq.XElement" /> к <see cref="T:System.Nullable`1" /><see cref="T:System.Int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-577">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2d0e-578">
            <see cref="T:System.Nullable`1" /> для <see cref="T:System.Int32" />, содержащий данные этого элемента <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-578">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples  
 <span data-ttu-id="e2d0e-579">В следующем примере создается элемент с содержимым целое число без знака.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-579">The following example creates an element with unsigned integer content.</span></span> <span data-ttu-id="e2d0e-580">Затем извлекается значение с помощью приведения к <xref:System.Nullable%601> из <xref:System.Int32>.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-580">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.Int32>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",   
    new XElement("Value", 2147483647)  
);  
int? value = (int?)root.Element("Value");  
Console.WriteLine("Nullable integer: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = _   
        <Root>  
            <Value>2147483647</Value>  
        </Root>  
Dim value As Nullable(Of Integer) = CType(root.Element("Value"), Nullable(Of Integer))  
Console.WriteLine("Nullable integer: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
  
```  
  
 <span data-ttu-id="e2d0e-581">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-581">This example produces the following output:</span></span>  
  
```  
Nullable integer: value=2147483647  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="e2d0e-582">Элемент не содержит допустимое значение типа <see cref="T:System.Int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-582">The element does not contain a valid <see cref="T:System.Int32" /> value.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;long&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;int64&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Int64}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;long&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element">
          <span data-ttu-id="e2d0e-583">Элемент <see cref="T:System.Xml.Linq.XElement" /> для приведения к <see cref="T:System.Nullable`1" /> для <see cref="T:System.Int64" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-583">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2d0e-584">Приведение значения данного элемента <see cref="T:System.Xml.Linq.XElement" /> к <see cref="T:System.Nullable`1" /><see cref="T:System.Int64" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-584">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2d0e-585">
            <see cref="T:System.Nullable`1" /> для <see cref="T:System.Int64" />, содержащий данные этого элемента <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-585">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples  
 <span data-ttu-id="e2d0e-586">В следующем примере создается элемент с содержимым типа long integer.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-586">The following example creates an element with long integer content.</span></span> <span data-ttu-id="e2d0e-587">Затем извлекается значение с помощью приведения к <xref:System.Nullable%601> из <xref:System.Int64>.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-587">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.Int64>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",    
    new XElement("Value", 9223372036854775807)  
);  
ulong? value = (ulong?)root.Element("Value");  
Console.WriteLine("Nullable ulong: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = _   
        <Root>  
            <Value>9223372036854775807</Value>  
        </Root>  
Dim value As Nullable(Of ULong) = CType(root.Element("Value"), Nullable(Of ULong))  
Console.WriteLine("Nullable ulong: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 <span data-ttu-id="e2d0e-588">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-588">This example produces the following output:</span></span>  
  
```  
Nullable ulong: value=9223372036854775807  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="e2d0e-589">Элемент не содержит допустимое значение типа <see cref="T:System.Int64" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-589">The element does not contain a valid <see cref="T:System.Int64" /> value.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;float&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;float32&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Single}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;float&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element">
          <span data-ttu-id="e2d0e-590">Элемент <see cref="T:System.Xml.Linq.XElement" /> для приведения к <see cref="T:System.Nullable`1" /> для <see cref="T:System.Single" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-590">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2d0e-591">Приведение значения данного элемента <see cref="T:System.Xml.Linq.XElement" /> к <see cref="T:System.Nullable`1" /><see cref="T:System.Single" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-591">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2d0e-592">
            <see cref="T:System.Nullable`1" /> для <see cref="T:System.Single" />, содержащий данные этого элемента <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-592">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples  
 <span data-ttu-id="e2d0e-593">В следующем примере создается элемент с одинарной точности с плавающей запятой.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-593">The following example creates an element with single precision floating point content.</span></span> <span data-ttu-id="e2d0e-594">Затем извлекается значение с помощью приведения к <xref:System.Nullable%601> из <xref:System.Single>.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-594">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.Single>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",   
    new XElement("Value", 3.402823e38)  
);  
float? value = (float?)root.Element("Value");  
Console.WriteLine("Nullable Single: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = _   
        <Root>  
            <Value>3.402823e38</Value>  
        </Root>  
Dim value As Nullable(Of Single) = CType(root.Element("Value"), Nullable(Of Single))  
Console.WriteLine("Nullable Single: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 <span data-ttu-id="e2d0e-595">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-595">This example produces the following output:</span></span>  
  
```  
Nullable Single: value=3.402823E+38  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="e2d0e-596">Элемент не содержит допустимое значение типа <see cref="T:System.Single" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-596">The element does not contain a valid <see cref="T:System.Single" /> value.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;TimeSpan&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;valuetype System.TimeSpan&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.TimeSpan}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;TimeSpan&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.TimeSpan&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element">
          <span data-ttu-id="e2d0e-597">Элемент <see cref="T:System.Xml.Linq.XElement" /> для приведения к <see cref="T:System.Nullable`1" /> для <see cref="T:System.TimeSpan" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-597">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.TimeSpan" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2d0e-598">Приведение значения данного элемента <see cref="T:System.Xml.Linq.XElement" /> к <see cref="T:System.Nullable`1" /><see cref="T:System.TimeSpan" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-598">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.TimeSpan" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2d0e-599">
            <see cref="T:System.Nullable`1" /> для <see cref="T:System.TimeSpan" />, содержащий данные этого элемента <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-599">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.TimeSpan" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2d0e-600">Пространство значений атрибута или элемента, содержащего интервал времени тесно связана с содержимым времени, описанным в ISO 8601.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-600">The value space of an attribute or element that contains time span content is closely related to duration content as described in ISO 8601.</span></span> <span data-ttu-id="e2d0e-601">При создании атрибута или элемента, содержащего интервал времени, значения атрибута или элемента форматируются в соответствии со спецификацией W3C.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-601">When creating an attribute or element that contains time span content, the attribute or element values are formatted per the W3C specification.</span></span> <span data-ttu-id="e2d0e-602">См. Дополнительные сведения о спецификации консорциума W3C.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-602">Please see the W3C specification for more details.</span></span>  
  
 <span data-ttu-id="e2d0e-603">Поведение является нестрогим при приведении к <xref:System.Nullable%601> из <xref:System.TimeSpan> из атрибута или элемента.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-603">Behavior is lax when casting to a <xref:System.Nullable%601> of <xref:System.TimeSpan> from an attribute or element.</span></span> <span data-ttu-id="e2d0e-604">Даже если значение атрибута или элемента не отформатировано в точном соответствии со спецификацией W3C, значение преобразуется к соответствующим образом <xref:System.Nullable%601> из <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-604">Even if the attribute or element value is not formatted exactly per the W3C specification, the value is appropriately converted to a <xref:System.Nullable%601> of <xref:System.TimeSpan>.</span></span>
  
## Examples  
 <span data-ttu-id="e2d0e-605">В следующем примере создается элемент, содержащий интервал времени.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-605">The following example creates an element with time span content.</span></span> <span data-ttu-id="e2d0e-606">Затем извлекается значение с помощью приведения к <xref:System.Nullable%601> из <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-606">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.TimeSpan>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XElement("Value", new TimeSpan(1, 5, 30))  
);  
TimeSpan? value = (TimeSpan?)root.Element("Value");  
Console.WriteLine("Nullable TimeSpan: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = _  
    <Root>  
        <Value><%= New TimeSpan(1, 5, 30) %></Value>  
    </Root>  
Dim value As Nullable(Of TimeSpan) = CType(root.Element("Value"), Nullable(Of TimeSpan))  
Console.WriteLine("Nullable TimeSpan: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 <span data-ttu-id="e2d0e-607">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-607">This example produces the following output:</span></span>  
  
```  
Nullable TimeSpan: value=01:05:30  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="e2d0e-608">Элемент не содержит допустимое значение типа <see cref="T:System.TimeSpan" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-608">The element does not contain a valid <see cref="T:System.TimeSpan" /> value.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;uint&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;unsigned int32&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.UInt32}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;System::UInt32&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.UInt32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element">
          <span data-ttu-id="e2d0e-609">Элемент <see cref="T:System.Xml.Linq.XElement" /> для приведения к <see cref="T:System.Nullable`1" /> для <see cref="T:System.UInt32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-609">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt32" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2d0e-610">Приведение значения данного элемента <see cref="T:System.Xml.Linq.XElement" /> к <see cref="T:System.Nullable`1" /><see cref="T:System.UInt32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-610">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt32" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2d0e-611">
            <see cref="T:System.Nullable`1" /> для <see cref="T:System.UInt32" />, содержащий данные этого элемента <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-611">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt32" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples  
 <span data-ttu-id="e2d0e-612">В следующем примере создается элемент с содержимым целое число без знака.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-612">The following example creates an element with unsigned integer content.</span></span> <span data-ttu-id="e2d0e-613">Затем извлекается значение с помощью приведения к <xref:System.Nullable%601> из <xref:System.UInt32>.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-613">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.UInt32>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",   
    new XElement("Value", 4294967295)  
);  
uint? value = (uint?)root.Element("Value");  
Console.WriteLine("Nullable uint: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = _   
        <Root>  
            <Value>4294967295</Value>  
        </Root>  
Dim value As Nullable(Of UInteger) = CType(root.Element("Value"), Nullable(Of UInteger))  
Console.WriteLine("Nullable uint: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 <span data-ttu-id="e2d0e-614">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-614">This example produces the following output:</span></span>  
  
```  
Nullable uint: value=4294967295  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="e2d0e-615">Элемент не содержит допустимое значение типа <see cref="T:System.UInt32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-615">The element does not contain a valid <see cref="T:System.UInt32" /> value.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;ulong&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;unsigned int64&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.UInt64}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;System::UInt64&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.UInt64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element">
          <span data-ttu-id="e2d0e-616">Элемент <see cref="T:System.Xml.Linq.XElement" /> для приведения к <see cref="T:System.Nullable`1" /> для <see cref="T:System.UInt64" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-616">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt64" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2d0e-617">Приведение значения данного элемента <see cref="T:System.Xml.Linq.XElement" /> к <see cref="T:System.Nullable`1" /><see cref="T:System.UInt64" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-617">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt64" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2d0e-618">
            <see cref="T:System.Nullable`1" /> для <see cref="T:System.UInt64" />, содержащий данные этого элемента <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-618">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt64" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples  
 <span data-ttu-id="e2d0e-619">В следующем примере создается элемент с содержимым длинное целое без знака.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-619">The following example creates an element with unsigned long integer content.</span></span> <span data-ttu-id="e2d0e-620">Затем извлекается значение с помощью приведения к <xref:System.Nullable%601> из <xref:System.UInt64>.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-620">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.UInt64>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",   
    new XElement("Value", 9223372036854775807)  
);  
ulong? value = (ulong?)root.Element("Value");  
Console.WriteLine("Nullable ulong: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = _   
        <Root>  
            <Value>9223372036854775807</Value>  
        </Root>  
  
Dim value As Nullable(Of ULong) = CType(root.Element("Value"), Nullable(Of ULong))  
Console.WriteLine("Nullable ulong: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 <span data-ttu-id="e2d0e-621">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-621">This example produces the following output:</span></span>  
  
```  
Nullable ulong: value=9223372036854775807  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="e2d0e-622">Элемент не содержит допустимое значение типа <see cref="T:System.UInt64" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-622">The element does not contain a valid <see cref="T:System.UInt64" /> value.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator float (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname float32 op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Single" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator float(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element">
          <span data-ttu-id="e2d0e-623">Элемент <see cref="T:System.Xml.Linq.XElement" /> для приведения к <see cref="T:System.Single" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-623">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Single" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2d0e-624">Приведение значение данного элемента <see cref="T:System.Xml.Linq.XElement" /> к <see cref="T:System.Single" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-624">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Single" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2d0e-625">Объект <see cref="T:System.Single" /> с содержимым данного элемента <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-625">A <see cref="T:System.Single" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
  
## Examples  
 <span data-ttu-id="e2d0e-626">В следующем примере создается элемент с одинарной точности с плавающей запятой.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-626">The following example creates an element with single precision floating point content.</span></span> <span data-ttu-id="e2d0e-627">Затем извлекается значение с помощью приведения к <xref:System.Single>.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-627">It then retrieves the value by casting to <xref:System.Single>.</span></span>  
  
```csharp  
XElement root = new XElement("Root", 3.402823e38);  
float value = (float)root;  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root>3.402823E+38</Root>  
Dim value As Single = CSng(root)  
Console.WriteLine("value={0}", value)  
```  
  
 <span data-ttu-id="e2d0e-628">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-628">This example produces the following output:</span></span>  
  
```  
value=3.402823E+38  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="e2d0e-629">Элемент не содержит допустимое значение типа <see cref="T:System.Single" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-629">The element does not contain a valid <see cref="T:System.Single" /> value.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e2d0e-630">Параметр <paramref name="element" /> имеет значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-630">The <paramref name="element" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator string (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname string op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.String" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::String ^(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element">
          <span data-ttu-id="e2d0e-631">Элемент <see cref="T:System.Xml.Linq.XElement" /> для приведения к <see cref="T:System.String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-631">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.String" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2d0e-632">Приведение значение данного элемента <see cref="T:System.Xml.Linq.XElement" /> к <see cref="T:System.String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-632">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.String" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2d0e-633">Объект <see cref="T:System.String" /> с содержимым данного элемента <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-633">A <see cref="T:System.String" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2d0e-634">Если <xref:System.Xml.Linq.XElement> имеет дочерние элементы, связанное значение строк всех текстов элемента и потомка возвращается.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-634">If the <xref:System.Xml.Linq.XElement> has children, the concatenated string value of all of the element's text and descendant's text is returned.</span></span>  
  
## Examples  
 <span data-ttu-id="e2d0e-635">В следующем примере создается элемент с содержимым строки.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-635">The following example creates an element with string content.</span></span> <span data-ttu-id="e2d0e-636">Затем извлекается значение с помощью приведения к <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-636">It then retrieves the value by casting to <xref:System.String>.</span></span>  
  
```csharp  
XElement root = XElement.Parse("<Root>abc <b>def </b>ghi</Root>");  
Console.WriteLine("(string)root={0}", (string)root);  
```  
  
```vb  
Dim root As XElement = <Root>abc <b>def </b>ghi</Root>  
Console.WriteLine("(string)root={0}", root.Value)  
```  
  
 <span data-ttu-id="e2d0e-637">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-637">This example produces the following output:</span></span>  
  
```  
(string)root=abc def ghi  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator TimeSpan (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.TimeSpan" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator TimeSpan(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element">
          <span data-ttu-id="e2d0e-638">Элемент <see cref="T:System.Xml.Linq.XElement" /> для приведения к <see cref="T:System.TimeSpan" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-638">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.TimeSpan" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2d0e-639">Приведение значение данного элемента <see cref="T:System.Xml.Linq.XElement" /> к <see cref="T:System.TimeSpan" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-639">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.TimeSpan" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2d0e-640">Объект <see cref="T:System.TimeSpan" /> с содержимым данного элемента <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-640">A <see cref="T:System.TimeSpan" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2d0e-641">Пространство значений атрибута или элемента, содержащего интервал времени тесно связана с содержимым времени, описанным в ISO 8601.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-641">The value space of an attribute or element that contains time span content is closely related to duration content as described in ISO 8601.</span></span> <span data-ttu-id="e2d0e-642">При создании атрибута или элемента, содержащего интервал времени, значения атрибута или элемента форматируются в соответствии со спецификацией W3C.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-642">When creating an attribute or element that contains time span content, the attribute or element values are formatted per the W3C specification.</span></span> <span data-ttu-id="e2d0e-643">См. Дополнительные сведения о спецификации консорциума W3C.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-643">Please see the W3C specification for more details.</span></span>  
  
 <span data-ttu-id="e2d0e-644">Поведение является нестрогим при приведении к <xref:System.TimeSpan> из атрибута или элемента.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-644">Behavior is lax when casting to a <xref:System.TimeSpan> from an attribute or element.</span></span> <span data-ttu-id="e2d0e-645">Даже если значение атрибута или элемента не отформатировано в точном соответствии со спецификацией W3C, значение преобразуется к соответствующим образом <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-645">Even if the attribute or element value is not formatted exactly per the W3C specification, the value is appropriately converted to a <xref:System.TimeSpan>.</span></span>
  
## Examples  
 <span data-ttu-id="e2d0e-646">В следующем примере создается элемент, содержащий интервал времени.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-646">The following example creates an element with time span content.</span></span> <span data-ttu-id="e2d0e-647">Затем извлекается значение с помощью приведения к <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-647">It then retrieves the value by casting to <xref:System.TimeSpan>.</span></span>  
  
```csharp  
XElement root = new XElement("Root", new TimeSpan(1, 5, 30));  
TimeSpan value = (TimeSpan)root;  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root><%= New TimeSpan(1, 5, 30) %></Root>  
Dim value As TimeSpan = CType(root, TimeSpan)  
Console.WriteLine("value={0}", value)  
```  
  
 <span data-ttu-id="e2d0e-648">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-648">This example produces the following output:</span></span>  
  
```  
value=01:05:30  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="e2d0e-649">Элемент не содержит допустимое значение типа <see cref="T:System.TimeSpan" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-649">The element does not contain a valid <see cref="T:System.TimeSpan" /> value.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e2d0e-650">Параметр <paramref name="element" /> имеет значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-650">The <paramref name="element" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator uint (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname unsigned int32 op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.UInt32" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::UInt32(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element">
          <span data-ttu-id="e2d0e-651">Элемент <see cref="T:System.Xml.Linq.XElement" /> для приведения к <see cref="T:System.UInt32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-651">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.UInt32" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2d0e-652">Приведение значение данного элемента <see cref="T:System.Xml.Linq.XElement" /> к <see cref="T:System.UInt32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-652">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.UInt32" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2d0e-653">Объект <see cref="T:System.UInt32" /> с содержимым данного элемента <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-653">A <see cref="T:System.UInt32" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples  
 <span data-ttu-id="e2d0e-654">В следующем примере создается элемент с содержимым целое число без знака.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-654">The following example creates an element with unsigned integer content.</span></span> <span data-ttu-id="e2d0e-655">Затем извлекается значение с помощью приведения к <xref:System.UInt32>.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-655">It then retrieves the value by casting to <xref:System.UInt32>.</span></span>  
  
```csharp  
XElement root = new XElement("Root", 4294967295);  
uint value = (uint)root;  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root>4294967295</Root>  
Dim value As UInteger = CUInt(root)  
Console.WriteLine("value={0}", value)  
```  
  
 <span data-ttu-id="e2d0e-656">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-656">This example produces the following output:</span></span>  
  
```  
value=4294967295  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="e2d0e-657">Элемент не содержит допустимое значение типа <see cref="T:System.UInt32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-657">The element does not contain a valid <see cref="T:System.UInt32" /> value.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e2d0e-658">Параметр <paramref name="element" /> имеет значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-658">The <paramref name="element" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator ulong (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname unsigned int64 op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.UInt64" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::UInt64(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element">
          <span data-ttu-id="e2d0e-659">Элемент <see cref="T:System.Xml.Linq.XElement" /> для приведения к <see cref="T:System.UInt64" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-659">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.UInt64" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2d0e-660">Приведение значение данного элемента <see cref="T:System.Xml.Linq.XElement" /> к <see cref="T:System.UInt64" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-660">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.UInt64" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2d0e-661">Объект <see cref="T:System.UInt64" /> с содержимым данного элемента <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-661">A <see cref="T:System.UInt64" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
  
## Examples  
 <span data-ttu-id="e2d0e-662">В следующем примере создается элемент с содержимым длинное целое без знака.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-662">The following example creates an element with unsigned long integer content.</span></span> <span data-ttu-id="e2d0e-663">Затем извлекается значение с помощью приведения к <xref:System.UInt64>.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-663">It then retrieves the value by casting to <xref:System.UInt64>.</span></span>  
  
```csharp  
XElement root = new XElement("Root", 18446744073709551615);  
ulong value = (ulong)root;  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root>18446744073709551615</Root>  
Dim value As ULong = CULng(root)  
Console.WriteLine("value={0}", value)  
```  
  
 <span data-ttu-id="e2d0e-664">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-664">This example produces the following output:</span></span>  
  
```  
value=18446744073709551615  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="e2d0e-665">Элемент не содержит допустимое значение типа <see cref="T:System.UInt64" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-665">The element does not contain a valid <see cref="T:System.UInt64" /> value.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e2d0e-666">Параметр <paramref name="element" /> имеет значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-666">The <paramref name="element" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e2d0e-667">Загрузка элемента <see cref="T:System.Xml.Linq.XElement" /> из строки, содержащей XML, при необходимости с сохранением пробелов и сведений о строке.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-667">Load an <see cref="T:System.Xml.Linq.XElement" /> from a string that contains XML, optionally preserving white space and retaining line information.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XElement Parse (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XElement Parse(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (text As String) As XElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XElement ^ Parse(System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">
          <span data-ttu-id="e2d0e-668">
            <see cref="T:System.String" />, содержащая XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-668">A <see cref="T:System.String" /> that contains XML.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2d0e-669">Загрузка <see cref="T:System.Xml.Linq.XElement" /> из строки, содержащей XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-669">Load an <see cref="T:System.Xml.Linq.XElement" /> from a string that contains XML.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2d0e-670">
            <see cref="T:System.Xml.Linq.XElement" /> заполнен из строки, содержащей XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-670">An <see cref="T:System.Xml.Linq.XElement" /> populated from the string that contains XML.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2d0e-671">Этот метод не сохраняет пробелы.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-671">This method does not preserve white space.</span></span> <span data-ttu-id="e2d0e-672">Если вы хотите сохранить пробелы в XML-дерево, используйте перегруженный <xref:System.Xml.Linq.XElement.Parse%2A> метода, принимающего <xref:System.Xml.Linq.LoadOptions> как параметр.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-672">If you want to preserve white space in the XML tree, use the overload of the <xref:System.Xml.Linq.XElement.Parse%2A> method that takes <xref:System.Xml.Linq.LoadOptions> as a parameter.</span></span> <span data-ttu-id="e2d0e-673">Дополнительные сведения см. в разделе [сохранения пробелов при загрузке или синтаксическом анализе XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) и [Сохранение пробелов при сериализации](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span><span class="sxs-lookup"><span data-stu-id="e2d0e-673">For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
 <span data-ttu-id="e2d0e-674">LINQ для функциональных возможностей загрузки по XML построена на основе <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-674">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="e2d0e-675">Таким образом, следует перехватывать все исключения, вызываемые <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> перегрузки методов и <xref:System.Xml.XmlReader> методы, прочитать и проанализировать документ.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-675">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2d0e-676">В следующем примере создается строка, содержащая XML.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-676">The following example creates a string that contains XML.</span></span> <span data-ttu-id="e2d0e-677">Затем он анализирует строку в <xref:System.Xml.Linq.XElement>.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-677">It then parses the string into an <xref:System.Xml.Linq.XElement>.</span></span>  
  
```csharp  
XElement xmlTree = XElement.Parse("<Root> <Child> </Child> </Root>");  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim xmlTree As XElement = <Root><Child></Child></Root>  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="e2d0e-678">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-678">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child></Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XElement Parse (string text, System.Xml.Linq.LoadOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XElement Parse(string text, valuetype System.Xml.Linq.LoadOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Parse(System.String,System.Xml.Linq.LoadOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (text As String, options As LoadOptions) As XElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XElement ^ Parse(System::String ^ text, System::Xml::Linq::LoadOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" />
      </Parameters>
      <Docs>
        <param name="text">
          <span data-ttu-id="e2d0e-679">
            <see cref="T:System.String" />, содержащая XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-679">A <see cref="T:System.String" /> that contains XML.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="e2d0e-680">
            <see cref="T:System.Xml.Linq.LoadOptions" />, указывающий поведение пустого пространства и необходимость загрузки базового URI и сведений о строке.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-680">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies white space behavior, and whether to load base URI and line information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2d0e-681">Загрузка элемента <see cref="T:System.Xml.Linq.XElement" /> из строки, содержащей XML, при необходимости с сохранением пробелов и сведений о строке.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-681">Load an <see cref="T:System.Xml.Linq.XElement" /> from a string that contains XML, optionally preserving white space and retaining line information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2d0e-682">
            <see cref="T:System.Xml.Linq.XElement" /> заполнен из строки, содержащей XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-682">An <see cref="T:System.Xml.Linq.XElement" /> populated from the string that contains XML.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2d0e-683">Если источник XML с отступами, задание <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> флаг в `options` вызывает модуль чтения для чтения все незначащие пробелы в XML-источник.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-683">If the source XML is indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to read all white space in the source XML.</span></span> <span data-ttu-id="e2d0e-684">Узлы типа <xref:System.Xml.Linq.XText> создаются для значащие и незначащие пробелы.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-684">Nodes of type <xref:System.Xml.Linq.XText> are created for both significant and insignificant white space.</span></span>  
  
 <span data-ttu-id="e2d0e-685">Если источник XML с отступами, не задав <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> флаг в `options` вызывает модуль чтения, пропустить все незначащие пробелы в исходном XML.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-685">If the source XML is indented, not setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to ignore all of the insignificant white space in the source XML.</span></span> <span data-ttu-id="e2d0e-686">Дерево XML создается без текстовых узлов для незначащие пробельные символы.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-686">The XML tree is created without any text nodes for insignificant white space.</span></span>  
  
 <span data-ttu-id="e2d0e-687">Если XML-источник не с отступом, задание <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> флаг в `options` не делает ничего.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-687">If the source XML is not indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` has no effect.</span></span> <span data-ttu-id="e2d0e-688">Значимые пробелы по-прежнему сохраняются, а незначащие пробельные символы, может привести к созданию дополнительных текстовых узлов пробелов, не произведено.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-688">Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.</span></span>  
  
 <span data-ttu-id="e2d0e-689">Дополнительные сведения см. в разделе [сохранения пробелов при загрузке или синтаксическом анализе XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) и [Сохранение пробелов при сериализации](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span><span class="sxs-lookup"><span data-stu-id="e2d0e-689">For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
 <span data-ttu-id="e2d0e-690">Установка <xref:System.Xml.Linq.LoadOptions.SetBaseUri> не будет действовать при синтаксическом анализе из <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-690">Setting <xref:System.Xml.Linq.LoadOptions.SetBaseUri> will have no effect when parsing from a <xref:System.String>.</span></span>  
  
 <span data-ttu-id="e2d0e-691"><xref:System.Xml.XmlReader> , Возможно, сведения действительной строкой или нет.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-691">The <xref:System.Xml.XmlReader> may have a valid line information or not.</span></span> <span data-ttu-id="e2d0e-692">Если задать <xref:System.Xml.Linq.LoadOptions.SetLineInfo>, сведения о строке задается в XML-дерево из информации о строке, полученных от <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-692">If you set <xref:System.Xml.Linq.LoadOptions.SetLineInfo>, the line information will be set in the XML tree from the line information that is reported by the <xref:System.Xml.XmlReader>.</span></span>  
  
 <span data-ttu-id="e2d0e-693">Производительность снижается, если задать <xref:System.Xml.Linq.LoadOptions.SetLineInfo> флаг.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-693">There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flag.</span></span>  
  
 <span data-ttu-id="e2d0e-694">Сведения о строке является точным сразу после загрузки XML-документа.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-694">The line information is accurate immediately after loading the XML document.</span></span> <span data-ttu-id="e2d0e-695">При изменении дерева XML после загрузки документа, сведения о строке могут стать бессмысленной.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-695">If you modify the XML tree after loading the document, the line information may become meaningless.</span></span>  
  
 <span data-ttu-id="e2d0e-696">LINQ для функциональных возможностей загрузки по XML построена на основе <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-696">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="e2d0e-697">Таким образом, следует перехватывать все исключения, вызываемые <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> перегрузки методов и <xref:System.Xml.XmlReader> методы, прочитать и проанализировать документ.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-697">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2d0e-698">В следующем примере анализируется строка в <xref:System.Xml.Linq.XElement> двумя способами: сохранение пробелов и без сохранения пробелов.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-698">The following example parses a string into an <xref:System.Xml.Linq.XElement> in two different ways: preserving white space, and not preserving white space.</span></span> <span data-ttu-id="e2d0e-699">Затем запрос используется для определения количества узлов пробелов в результирующее дерево XML.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-699">It then uses a query to determine the number of white space nodes in the resulting XML tree.</span></span>  
  
```csharp  
int whiteSpaceNodes;  
  
XElement xmlTree1 = XElement.Parse("<Root> <Child> </Child> </Root>",  
    LoadOptions.None);  
whiteSpaceNodes = xmlTree1  
    .DescendantNodesAndSelf()  
    .OfType<XText>()  
    .Where(tNode => tNode.ToString().Trim().Length == 0)  
    .Count();  
Console.WriteLine("Count of white space nodes (not preserving whitespace): {0}",  
    whiteSpaceNodes);  
  
XElement xmlTree2 = XElement.Parse("<Root> <Child> </Child> </Root>",  
    LoadOptions.PreserveWhitespace);  
whiteSpaceNodes = xmlTree2  
    .DescendantNodesAndSelf()  
    .OfType<XText>()  
    .Where(tNode => tNode.ToString().Trim().Length == 0)  
    .Count();  
Console.WriteLine("Count of white space nodes (preserving whitespace): {0}",  
    whiteSpaceNodes);  
```  
  
```vb  
Dim whiteSpaceNodes As Integer  
  
Dim xmlTree1 As XElement = XElement.Parse("<Root> <Child> </Child> </Root>", LoadOptions.None)  
whiteSpaceNodes = xmlTree1 _  
    .DescendantNodesAndSelf() _  
    .OfType(Of XText)() _  
    .Where(Function(ByVal tNode As XNode) tNode.ToString().Trim().Length = 0) _  
    .Count()  
Console.WriteLine("Count of white space nodes (not preserving whitespace): {0}", whiteSpaceNodes)  
  
Dim xmlTree2 As XElement = XElement.Parse("<Root> <Child> </Child> </Root>", LoadOptions.PreserveWhitespace)  
whiteSpaceNodes = xmlTree2 _  
    .DescendantNodesAndSelf() _  
    .OfType(Of XText)() _  
    .Where(Function(ByVal tNode As XNode) tNode.ToString().Trim().Length = 0) _  
    .Count()  
Console.WriteLine("Count of white space nodes (preserving whitespace): {0}", whiteSpaceNodes)  
```  
  
 <span data-ttu-id="e2d0e-700">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-700">This example produces the following output:</span></span>  
  
```  
Count of white space nodes (not preserving whitespace): 0  
Count of white space nodes (preserving whitespace): 3  
```  
  
 <span data-ttu-id="e2d0e-701">Следующий пример сохраняет сведения о строке при синтаксическом разборе строки.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-701">The following example retains line information as it parses the string.</span></span>  
  
```csharp  
string markup =  
@"<Root>  
    <Child>  
        <GrandChild/>  
    </Child>  
</Root>";  
  
XElement xRoot = XElement.Parse(markup, LoadOptions.SetLineInfo);  
Console.WriteLine("{0}{1}{2}",  
    "Element Name".PadRight(20),  
    "Line".PadRight(5),  
    "Position");  
Console.WriteLine("{0}{1}{2}",  
    "------------".PadRight(20),  
    "----".PadRight(5),  
    "--------");  
foreach (XElement e in xRoot.DescendantsAndSelf())  
    Console.WriteLine("{0}{1}{2}",  
        ("".PadRight(e.Ancestors().Count() * 2) + e.Name).PadRight(20),  
        ((IXmlLineInfo)e).LineNumber.ToString().PadRight(5),  
        ((IXmlLineInfo)e).LinePosition);  
```  
  
```vb  
Dim markup As String = _  
"<Root>" & Environment.NewLine & _  
"    <Child>" & Environment.NewLine & _  
"        <GrandChild/>" & Environment.NewLine & _  
"    </Child>" & Environment.NewLine & _  
"</Root>"  
  
Dim xRoot As XElement = XElement.Parse(markup, LoadOptions.SetLineInfo)  
Console.WriteLine("{0}{1}{2}", _  
    "Element Name".PadRight(20), _  
    "Line".PadRight(5), _  
    "Position")  
Console.WriteLine("{0}{1}{2}", _  
    "------------".PadRight(20), _  
    "----".PadRight(5), _  
    "--------")  
For Each e As XElement In xRoot.DescendantsAndSelf()  
    Console.WriteLine("{0}{1}{2}", _  
        ("".PadRight(e.Ancestors().Count() * 2) & e.Name.ToString).PadRight(20), _  
        DirectCast(e, IXmlLineInfo).LineNumber.ToString().PadRight(5), _  
        DirectCast(e, IXmlLineInfo).LinePosition)  
Next  
```  
  
 <span data-ttu-id="e2d0e-702">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-702">This example produces the following output:</span></span>  
  
```  
Element Name        Line Position  
------------        ---- --------  
Root                1    2  
  Child             2    6  
    GrandChild      3    10  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAll">
      <MemberSignature Language="C#" Value="public void RemoveAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAll() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.RemoveAll" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAll ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAll();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e2d0e-703">Удаление узлов и атрибутов из <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-703">Removes nodes and attributes from this <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2d0e-704">Этот метод вызывает <xref:System.Xml.Linq.XObject.Changed> и <xref:System.Xml.Linq.XObject.Changing> события.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-704">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2d0e-705">В следующем примере создается элемент с атрибутами и дочерними элементами.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-705">The following example creates an element with attributes and child elements.</span></span> <span data-ttu-id="e2d0e-706">Затем вызывается метод удаления атрибутов и дочерних элементов.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-706">It then calls this method to remove both the attributes and the child elements.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XAttribute("Att3", 3),  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3)  
);  
root.RemoveAll();   // removes children elements and attributes of root  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = _   
        <Root Attr1="1" Attr2="2" Attr3="3">  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
        </Root>  
  
root.RemoveAll()   ' removes children elements and attributes of root  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="e2d0e-707">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-707">This example produces the following output:</span></span>  
  
```xml  
<Root />  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XElement.RemoveAttributes" />
        <altmember cref="M:System.Xml.Linq.XContainer.RemoveNodes" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAttributes">
      <MemberSignature Language="C#" Value="public void RemoveAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAttributes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.RemoveAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAttributes ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAttributes();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e2d0e-708">Удаляет атрибуты данного элемента <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-708">Removes the attributes of this <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2d0e-709">Этот метод вызывает <xref:System.Xml.Linq.XObject.Changed> и <xref:System.Xml.Linq.XObject.Changing> события.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-709">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2d0e-710">В следующем примере создается элемент с атрибутами и дочерними элементами.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-710">The following example creates an element with attributes and child elements.</span></span> <span data-ttu-id="e2d0e-711">Затем он вызывает этот метод, чтобы удалить атрибуты.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-711">It then calls this method to remove the attributes.</span></span> <span data-ttu-id="e2d0e-712">Дочерние элементы сохраняются.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-712">The child elements remain.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XAttribute("Att3", 3),  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3)  
);  
root.RemoveAttributes();  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = _   
    <Root Attr1="1" Attr2="2" Attr3="3">  
        <Child1>1</Child1>  
        <Child2>2</Child2>  
        <Child3>3</Child3>  
     </Root>  
  
root.RemoveAttributes()  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="e2d0e-713">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-713">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child1>1</Child1>  
  <Child2>2</Child2>  
  <Child3>3</Child3>  
</Root>   
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XElement.RemoveAttributes" />
        <altmember cref="M:System.Xml.Linq.XElement.RemoveAll" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ReplaceAll">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e2d0e-714">Заменяет дочерние узлы и атрибуты этого элемента указанным содержимым.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-714">Replaces the child nodes and the attributes of this element with the specified content.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2d0e-715">Этот метод использует семантику моментального снимка, то есть, создает отдельную копию новое содержимое перед заменой содержимое текущего элемента с новым содержимым.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-715">This method uses snapshot semantics—that is, it creates a separate copy of the new content before replacing the contents of the current element with the new content.</span></span> <span data-ttu-id="e2d0e-716">Это означает, что можно запросить содержимое текущего элемента и использовать результаты запроса в качестве указываемого содержимого.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-716">This means that you can query the contents of the current element and use the results of the query as the specified new content.</span></span>  
  
 <span data-ttu-id="e2d0e-717">Дополнительные сведения о допустимом содержимом, которое может быть передан этой функции см. в разделе [объектов допустимое содержимое XElement и XDocument](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="e2d0e-717">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="e2d0e-718">Этот метод вызывает <xref:System.Xml.Linq.XObject.Changed> и <xref:System.Xml.Linq.XObject.Changing> события.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-718">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2d0e-719">В следующем примере результаты запроса LINQ передаются в этот метод, заменяя содержимое элемента с результатами запроса.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-719">The following example passes the results of a LINQ query to this method, replacing the contents of an element with the query results.</span></span> <span data-ttu-id="e2d0e-720">Он запрашивает элемент, для которого замененным содержимым.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-720">It queries the element that is having its contents replaced.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Data", 1),  
    new XElement("Data", 2),  
    new XElement("Data", 3),  
    new XElement("Data", 4),  
    new XElement("Data", 5)  
);  
  
Console.WriteLine(xmlTree);  
Console.WriteLine("-----");  
  
xmlTree.ReplaceAll(  
    from el in xmlTree.Elements()  
    where (int)el >= 3  
    select new XElement("NewData", (int)el)  
);  
  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim xmlTree As XElement = _  
    <Root>  
        <Data>1</Data>  
        <Data>2</Data>  
        <Data>3</Data>  
        <Data>4</Data>  
        <Data>5</Data>  
    </Root>  
  
Console.WriteLine(xmlTree)  
Console.WriteLine("-----")  
  
xmlTree.ReplaceAll( _  
    From el In xmlTree.Elements _  
    Where el.Value >= 3 _  
    Select <NewData><%= el.Value %></NewData> _  
)  
  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="e2d0e-721">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-721">This example produces the following output:</span></span>  
  
```  
<Root>  
  <Data>1</Data>  
  <Data>2</Data>  
  <Data>3</Data>  
  <Data>4</Data>  
  <Data>5</Data>  
</Root>  
-----  
<Root>  
  <NewData>3</NewData>  
  <NewData>4</NewData>  
  <NewData>5</NewData>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReplaceAll">
      <MemberSignature Language="C#" Value="public void ReplaceAll (object content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReplaceAll(object content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.ReplaceAll(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReplaceAll (content As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReplaceAll(System::Object ^ content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="content">
          <span data-ttu-id="e2d0e-722">Содержимое, которое заменит дочерние узлы и атрибуты этого элемента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-722">The content that will replace the child nodes and attributes of this element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2d0e-723">Заменяет дочерние узлы и атрибуты этого элемента указанным содержимым.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-723">Replaces the child nodes and the attributes of this element with the specified content.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2d0e-724">Этот метод сначала удаляет существующее содержимое и атрибуты.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-724">This method first removes existing content and attributes.</span></span> <span data-ttu-id="e2d0e-725">Затем он добавляет указанный `content`.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-725">It then adds the specified `content`.</span></span>  
  
 <span data-ttu-id="e2d0e-726">Этот метод использует семантику моментального снимка, то есть, создает отдельную копию новое содержимое перед заменой содержимое текущего элемента с новым содержимым.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-726">This method uses snapshot semantics—that is, it creates a separate copy of the new content before replacing the contents of the current element with the new content.</span></span> <span data-ttu-id="e2d0e-727">Это означает, что можно запросить содержимое текущего элемента и использовать результаты запроса в качестве указываемого содержимого.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-727">This means that you can query the contents of the current element and use the results of the query as the specified new content.</span></span>  
  
 <span data-ttu-id="e2d0e-728">Дополнительные сведения о допустимом содержимом, которое может быть передан этой функции см. в разделе [объектов допустимое содержимое XElement и XDocument](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="e2d0e-728">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="e2d0e-729">Этот метод вызывает <xref:System.Xml.Linq.XObject.Changed> и <xref:System.Xml.Linq.XObject.Changing> события.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-729">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2d0e-730">В следующем примере этот метод.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-730">The following example uses this method.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XElement("Child", "child content")  
);  
  
// ReplaceAll with an XElement object.  
root.ReplaceAll(new XElement("NewChild", "n"));  
Console.WriteLine(root);  
  
// ReplaceAll with an XAttribute object.  
root.ReplaceAll(new XAttribute("NewAttribute", "n"));  
Console.WriteLine(root);  
  
// ReplaceAll with a string.  
root.ReplaceAll("Some text");  
Console.WriteLine(root);  
  
// ReplaceAll with a double.  
double dbl = 12.345;  
root.ReplaceAll(dbl);  
Console.WriteLine(root);  
  
// ReplaceAll with a DateTime object.  
DateTime dt = new DateTime(2006, 10, 6, 12, 30, 00);  
root.ReplaceAll(dt);  
Console.WriteLine(root);  
  
// ReplaceAll with a string array.  
// Any collection other than a collection of XElement or XAttribute objects  
// are converted to strings. The strings are concatenated and added.  
string[] stringArray = {  
    "abc",  
    "def",  
    "ghi"  
};  
root.ReplaceAll(stringArray);  
Console.WriteLine(root);  
  
// ReplaceAll with an array of XElement objects.  
XElement[] ellArray = {  
    new XElement("NewChild1", 1),  
    new XElement("NewChild2", 2),  
    new XElement("NewChild3", 3)  
};  
root.ReplaceAll(ellArray);  
Console.WriteLine(root);  
  
// ReplaceAll with an array of XAttribute objects.  
XAttribute[] attArray = {  
    new XAttribute("NewAtt1", 1),  
    new XAttribute("NewAtt2", 2),  
    new XAttribute("NewAtt3", 3)  
};  
root.ReplaceAll(attArray);  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = _   
    <Root>  
        <Child>child content</Child>  
    </Root>  
  
' ReplaceAll with an XElement object.  
root.ReplaceAll(<NewChild>n</NewChild>)  
Console.WriteLine(root)  
  
' ReplaceAll with an XAttribute object.  
root.ReplaceAll(New XAttribute("NewAttribute", "n"))  
Console.WriteLine(root)  
  
' ReplaceAll with a string.  
root.ReplaceAll("Some text")  
Console.WriteLine(root)  
  
' ReplaceAll with a double.  
Dim dbl As Double = 12.345  
root.ReplaceAll(dbl)  
Console.WriteLine(root)  
  
' ReplaceAll with a DateTime object.  
Dim dt As DateTime = New DateTime(2006, 10, 6, 12, 30, 0)  
root.ReplaceAll(dt)  
Console.WriteLine(root)  
  
' ReplaceAll with a string array.  
' Any collection other than a collection of XElement or XAttribute objects  
' are converted to strings. The strings are concatenated and added.  
Dim stringArray As String() = { _  
    "abc", _  
    "def", _  
    "ghi" _  
}  
root.ReplaceAll(stringArray)  
Console.WriteLine(root)  
  
' ReplaceAll with an array of XElement objects.  
Dim ellArray As XElement() = { _  
    New XElement("NewChild1", 1), _  
    New XElement("NewChild2", 2), _  
    New XElement("NewChild3", 3) _  
}  
root.ReplaceAll(ellArray)  
Console.WriteLine(root)  
  
' ReplaceAll with an array of XAttribute objects.  
Dim attArray As XAttribute() = { _  
New XAttribute("NewAtt1", 1), _  
New XAttribute("NewAtt2", 2), _  
New XAttribute("NewAtt3", 3) _  
}  
root.ReplaceAll(attArray)  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="e2d0e-731">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-731">This example produces the following output:</span></span>  
  
```  
<Root>  
  <NewChild>n</NewChild>  
</Root>  
<Root NewAttribute="n" />  
<Root>Some text</Root>  
<Root>12.345</Root>  
<Root>2006-10-06T12:30:00</Root>  
<Root>abcdefghi</Root>  
<Root>  
  <NewChild1>1</NewChild1>  
  <NewChild2>2</NewChild2>  
  <NewChild3>3</NewChild3>  
</Root>  
<Root NewAtt1="1" NewAtt2="2" NewAtt3="3" />  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceAll">
      <MemberSignature Language="C#" Value="public void ReplaceAll (params object[] content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReplaceAll(object[] content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.ReplaceAll(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReplaceAll (ParamArray content As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReplaceAll(... cli::array &lt;System::Object ^&gt; ^ content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="content">
          <span data-ttu-id="e2d0e-732">Список параметров объектов содержимого.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-732">A parameter list of content objects.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2d0e-733">Заменяет дочерние узлы и атрибуты этого элемента указанным содержимым.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-733">Replaces the child nodes and the attributes of this element with the specified content.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2d0e-734">Этот метод сначала удаляет существующее содержимое и атрибуты.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-734">This method first removes existing content and attributes.</span></span> <span data-ttu-id="e2d0e-735">Затем он добавляет указанный `content`.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-735">It then adds the specified `content`.</span></span>  
  
 <span data-ttu-id="e2d0e-736">Этот метод использует семантику моментального снимка, то есть, создает отдельную копию новое содержимое перед заменой содержимое текущего элемента с новым содержимым.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-736">This method uses snapshot semantics—that is, it creates a separate copy of the new content before replacing the contents of the current element with the new content.</span></span> <span data-ttu-id="e2d0e-737">Это означает, что можно запросить содержимое текущего элемента и использовать результаты запроса в качестве указываемого содержимого.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-737">This means that you can query the contents of the current element and use the results of the query as the specified new content.</span></span>  
  
 <span data-ttu-id="e2d0e-738">Дополнительные сведения о допустимом содержимом, которое может быть передан этой функции см. в разделе [объектов допустимое содержимое XElement и XDocument](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="e2d0e-738">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="e2d0e-739">Этот метод вызывает <xref:System.Xml.Linq.XObject.Changed> и <xref:System.Xml.Linq.XObject.Changing> события.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-739">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2d0e-740">В следующем примере результаты запроса LINQ передаются в этот метод, заменяя содержимое элемента с результатами запроса.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-740">The following example passes the results of a LINQ query to this method, replacing the contents of an element with the query results.</span></span>  
  
```csharp  
XElement xmlTree1 = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5),  
    new XElement("Child6", 6)  
);  
  
XElement root = new XElement("Root",  
    new XElement("Child", "child content")  
);  
  
root.ReplaceAll(  
    from el in xmlTree1.Elements()  
    where((int)el >= 3 && (int)el <= 5)  
    select el  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim xmlTree1 As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
            <Child6>6</Child6>  
        </Root>  
  
Dim root As XElement = <Root>  
                           <Child>child content</Child>  
                       </Root>  
  
root.ReplaceAll( _  
    From el In xmlTree1.Elements() _  
    Where el.Value >= 3 And el.Value <= 5 _  
    Select el _  
)  
  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="e2d0e-741">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-741">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReplaceAttributes">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e2d0e-742">Заменяет атрибуты этого элемента указанным содержимым.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-742">Replaces the attributes of this element with the specified content.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2d0e-743">Этот метод вызывает <xref:System.Xml.Linq.XObject.Changed> и <xref:System.Xml.Linq.XObject.Changing> события.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-743">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
 <span data-ttu-id="e2d0e-744">Дополнительные сведения о допустимом содержимом, которое может быть передан этой функции см. в разделе [объектов допустимое содержимое XElement и XDocument](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="e2d0e-744">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2d0e-745">В следующем примере создается элемент с тремя атрибутами.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-745">The following example creates an element with three attributes.</span></span> <span data-ttu-id="e2d0e-746">Затем этот метод используется для замены всех атрибутов элемента с одним атрибутом.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-746">It then uses this method to replace all of the attributes of the element with a single attribute.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XAttribute("Att3", 3)  
);  
root.ReplaceAttributes(  
    new XAttribute("NewAtt1", 101)  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = <Root Att1="1" Att2="2" Att3="3"/>  
root.ReplaceAttributes(New XAttribute("NewAtt1", 101))  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="e2d0e-747">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-747">This example produces the following output:</span></span>  
  
```xml  
<Root NewAtt1="101" />  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReplaceAttributes">
      <MemberSignature Language="C#" Value="public void ReplaceAttributes (object content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReplaceAttributes(object content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.ReplaceAttributes(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReplaceAttributes (content As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReplaceAttributes(System::Object ^ content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="content">
          <span data-ttu-id="e2d0e-748">Содержимое, которое заменит атрибуты этого элемента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-748">The content that will replace the attributes of this element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2d0e-749">Заменяет атрибуты этого элемента указанным содержимым.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-749">Replaces the attributes of this element with the specified content.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2d0e-750">Этот метод сначала удаляет существующие атрибуты.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-750">This method first removes existing attributes.</span></span> <span data-ttu-id="e2d0e-751">Затем он добавляет указанный `content`.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-751">It then adds the specified `content`.</span></span>  
  
 <span data-ttu-id="e2d0e-752">Дополнительные сведения о допустимом содержимом, которое может быть передан этой функции см. в разделе [объектов допустимое содержимое XElement и XDocument](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="e2d0e-752">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="e2d0e-753">Этот метод вызывает <xref:System.Xml.Linq.XObject.Changed> и <xref:System.Xml.Linq.XObject.Changing> события.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-753">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2d0e-754">В следующем примере создается элемент с тремя атрибутами.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-754">The following example creates an element with three attributes.</span></span> <span data-ttu-id="e2d0e-755">Затем этот метод используется для замены всех атрибутов элемента с одним атрибутом.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-755">It then uses this method to replace all of the attributes of the element with a single attribute.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XAttribute("Att3", 3)  
);  
root.ReplaceAttributes(  
    new XAttribute("NewAtt1", 101)  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = <Root Att1="1" Att2="2" Att3="3"/>  
root.ReplaceAttributes(New XAttribute("NewAtt1", 101))  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="e2d0e-756">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-756">This example produces the following output:</span></span>  
  
```xml  
<Root NewAtt1="101" />  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceAttributes">
      <MemberSignature Language="C#" Value="public void ReplaceAttributes (params object[] content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReplaceAttributes(object[] content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.ReplaceAttributes(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReplaceAttributes (ParamArray content As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReplaceAttributes(... cli::array &lt;System::Object ^&gt; ^ content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="content">
          <span data-ttu-id="e2d0e-757">Список параметров объектов содержимого.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-757">A parameter list of content objects.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2d0e-758">Заменяет атрибуты этого элемента указанным содержимым.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-758">Replaces the attributes of this element with the specified content.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2d0e-759">Этот метод сначала удаляет существующие атрибуты.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-759">This method first removes existing attributes.</span></span> <span data-ttu-id="e2d0e-760">Затем он добавляет указанный `content`.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-760">It then adds the specified `content`.</span></span>  
  
 <span data-ttu-id="e2d0e-761">Дополнительные сведения о допустимом содержимом, которое может быть передан этой функции см. в разделе [объектов допустимое содержимое XElement и XDocument](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="e2d0e-761">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="e2d0e-762">Этот метод вызывает <xref:System.Xml.Linq.XObject.Changed> и <xref:System.Xml.Linq.XObject.Changing> события.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-762">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2d0e-763">В следующем примере создается элемент с тремя атрибутами.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-763">The following example creates an element with three attributes.</span></span> <span data-ttu-id="e2d0e-764">Затем атрибуты заменяются другими атрибутами.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-764">It then replaces the attributes with other attributes.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XAttribute("Att3", 3)  
);  
root.ReplaceAttributes(  
    new XAttribute("NewAtt1", 101),  
    new XAttribute("NewAtt2", 102),  
    new XAttribute("NewAtt3", 103)  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = <Root Att1="1" Att2="2" Att3="3"/>  
root.ReplaceAttributes( _  
New XAttribute("NewAtt1", 101), _  
New XAttribute("NewAtt2", 102), _  
New XAttribute("NewAtt3", 103))  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="e2d0e-765">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-765">This example produces the following output:</span></span>  
  
```xml  
<Root NewAtt1="101" NewAtt2="102" NewAtt3="103" />  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Save">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e2d0e-766">Сериализовать базовое дерево XML этого элемента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-766">Serialize this element's underlying XML tree.</span>
          </span>
          <span data-ttu-id="e2d0e-767">Результат может быть сохранен в файле (<see cref="T:System.Xml.XmlTextWriter" />, <see cref="T:System.IO.TextWriter" /> или <see cref="T:System.Xml.XmlWriter" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-767">The output can be saved to a file, an <see cref="T:System.Xml.XmlTextWriter" />, a <see cref="T:System.IO.TextWriter" />, or an <see cref="T:System.Xml.XmlWriter" />.</span>
          </span>
          <span data-ttu-id="e2d0e-768">Если требуется, форматирование (отступ) можно отключить.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-768">Optionally, formatting (indenting) can be disabled.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Save(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::IO::Stream ^ stream);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="e2d0e-769">Поток для вывода данного элемента <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-769">The stream to output this <see cref="T:System.Xml.Linq.XElement" /> to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2d0e-770">Выводит этот документ <see cref="T:System.Xml.Linq.XElement" /> в указанный поток <see cref="T:System.IO.Stream" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-770">Outputs this <see cref="T:System.Xml.Linq.XElement" /> to the specified <see cref="T:System.IO.Stream" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2d0e-771">Будет иметь отступ сериализованный XML.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-771">The serialized XML will be indented.</span></span> <span data-ttu-id="e2d0e-772">Будут удалены все незначащие пробельные символы и будут добавлены дополнительные пробелы, чтобы были правильными XML.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-772">All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented.</span></span> <span data-ttu-id="e2d0e-773">Поведение данного метода заключается в том, незначащий пробел не сохраняется.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-773">The behavior of this method is that insignificant white space will not be preserved.</span></span>  
  
 <span data-ttu-id="e2d0e-774">Если вы хотите управлять пробелов, используйте перегруженный <xref:System.Xml.Linq.XElement.Save%2A> , который принимает <xref:System.Xml.Linq.SaveOptions> как параметр.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-774">If you want to control white space, use the overload of <xref:System.Xml.Linq.XElement.Save%2A> that takes <xref:System.Xml.Linq.SaveOptions> as a parameter.</span></span> <span data-ttu-id="e2d0e-775">Используйте <xref:System.Xml.Linq.SaveOptions.DisableFormatting> можно сохранить выровненных XML.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-775">Use the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> option to save unindented XML.</span></span> <span data-ttu-id="e2d0e-776">Это вызовет в результате все пробелы в точности так, как представлено в дереве XML.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-776">This will cause the writer to write all white spaces exactly as represented in the XML tree.</span></span>  
  
 <span data-ttu-id="e2d0e-777">Используйте <xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces> вариант, если требуется удалить дубликаты объявлений пространств имен.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-777">Use the <xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces> option if you want to remove duplicate namespace declarations.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.IO.TextWriter textWriter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class System.IO.TextWriter textWriter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Save(System.IO.TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::IO::TextWriter ^ textWriter);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textWriter" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="textWriter">
          <span data-ttu-id="e2d0e-778">Объект <see cref="T:System.IO.TextWriter" />, в который будет записан элемент <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-778">A <see cref="T:System.IO.TextWriter" /> that the <see cref="T:System.Xml.Linq.XElement" /> will be written to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2d0e-779">Сериализация этого элемента в <see cref="T:System.IO.TextWriter" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-779">Serialize this element to a <see cref="T:System.IO.TextWriter" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2d0e-780">Будет иметь отступ сериализованный XML.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-780">The serialized XML will be indented.</span></span> <span data-ttu-id="e2d0e-781">Будут удалены все незначащие пробельные символы и будут добавлены дополнительные пробелы, чтобы были правильными XML.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-781">All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented.</span></span> <span data-ttu-id="e2d0e-782">Поведение данного метода заключается в том что пробелы не сохраняются.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-782">The behavior of this method is that white space will not be preserved.</span></span>  
  
 <span data-ttu-id="e2d0e-783">Если вы хотите управлять пробелов, используйте перегруженный <xref:System.Xml.Linq.XElement.Save%2A> , позволяющий указать <xref:System.Xml.Linq.SaveOptions> как параметр.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-783">If you want to control white space, use the overload of <xref:System.Xml.Linq.XElement.Save%2A> that allows you to specify <xref:System.Xml.Linq.SaveOptions> as a parameter.</span></span> <span data-ttu-id="e2d0e-784">Дополнительные сведения см. в разделе [сохранения пробелов при загрузке или синтаксическом анализе XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) и [Сохранение пробелов при сериализации](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span><span class="sxs-lookup"><span data-stu-id="e2d0e-784">For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2d0e-785">В следующем примере создается <xref:System.Xml.Linq.XElement>, сохраняет документ в <xref:System.IO.StringWriter>, а затем выводит на консоль строку.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-785">The following example creates an <xref:System.Xml.Linq.XElement>, saves the document to a <xref:System.IO.StringWriter>, and then prints the string to the console.</span></span>  
  
```csharp  
XElement root = XElement.Parse(@"<Root> <Child> Text </Child> </Root>");  
using (StringWriter sw = new StringWriter()) {  
    root.Save(sw);  
    Console.WriteLine(sw.ToString());  
}  
```  
  
```vb  
Dim root As XElement = <Root><Child> Text </Child></Root>  
Using sw = New StringWriter()  
    root.Save(sw)  
    Console.WriteLine(sw.ToString())  
End Using  
```  
  
 <span data-ttu-id="e2d0e-786">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-786">This example produces the following output:</span></span>  
  
```xml  
<?xml version="1.0" encoding="utf-16"?>  
<Root>  
  <Child> Text </Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Save(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::String ^ fileName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">
          <span data-ttu-id="e2d0e-787">Объект <see cref="T:System.String" />, содержащий имя файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-787">A <see cref="T:System.String" /> that contains the name of the file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2d0e-788">Сериализовать этот элемент в файл.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-788">Serialize this element to a file.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2d0e-789">Будет иметь отступ сериализованный XML.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-789">The serialized XML will be indented.</span></span> <span data-ttu-id="e2d0e-790">Будут удалены все незначащие пробельные символы и будут добавлены дополнительные пробелы, чтобы были правильными XML.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-790">All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented.</span></span> <span data-ttu-id="e2d0e-791">Этот метод выполняется, незначащие пробельные символы, которые узлов в XML-дереве не сохраняются.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-791">The behavior of this method is that insignificant white space nodes in the XML tree will not be preserved.</span></span>  
  
 <span data-ttu-id="e2d0e-792">Если вы хотите управлять пробелов, используйте перегруженный <xref:System.Xml.Linq.XElement.Save%2A> , позволяющий указать <xref:System.Xml.Linq.SaveOptions> как параметр.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-792">If you want to control white space, use the overload of <xref:System.Xml.Linq.XElement.Save%2A> that allows you to specify <xref:System.Xml.Linq.SaveOptions> as a parameter.</span></span> <span data-ttu-id="e2d0e-793">Дополнительные сведения см. в разделе [сохранения пробелов при загрузке или синтаксическом анализе XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) и [Сохранение пробелов при сериализации](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span><span class="sxs-lookup"><span data-stu-id="e2d0e-793">For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2d0e-794">В следующем примере создается <xref:System.Xml.Linq.XElement>, сохраняет документ в файл, а затем выводит файл на консоль.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-794">The following example creates an <xref:System.Xml.Linq.XElement>, saves the document to a file, and then prints the file to the console.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XElement("Child", "child content")  
);  
root.Save("Root.xml");  
string str = File.ReadAllText("Root.xml");  
Console.WriteLine(str);  
```  
  
```vb  
Dim root As XElement = _   
        <Root>  
            <Child>child content</Child>  
        </Root>  
root.Save("Root.xml")  
Dim Str As String = File.ReadAllText("Root.xml")  
Console.WriteLine(Str)  
```  
  
 <span data-ttu-id="e2d0e-795">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-795">This example produces the following output:</span></span>  
  
```xml  
<?xml version="1.0" encoding="utf-8"?>  
<Root>  
  <Child>child content</Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Save(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (writer As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::Xml::XmlWriter ^ writer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer">
          <span data-ttu-id="e2d0e-796">Объект <see cref="T:System.Xml.XmlWriter" />, в который будет записан элемент <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-796">A <see cref="T:System.Xml.XmlWriter" /> that the <see cref="T:System.Xml.Linq.XElement" /> will be written to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2d0e-797">Сериализация этого элемента в <see cref="T:System.Xml.XmlWriter" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-797">Serialize this element to an <see cref="T:System.Xml.XmlWriter" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e2d0e-798">В следующем примере демонстрируется, как сохранять <xref:System.Xml.Linq.XElement> в <xref:System.Xml.XmlWriter>.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-798">The following example shows how to save an <xref:System.Xml.Linq.XElement> to an <xref:System.Xml.XmlWriter>.</span></span>  
  
```csharp  
StringBuilder sb = new StringBuilder();  
XmlWriterSettings xws = new XmlWriterSettings();  
xws.OmitXmlDeclaration = true;  
using (XmlWriter xw = XmlWriter.Create(sb, xws)) {  
    XElement root = new XElement("Root",  
        new XElement("Child", "child content")  
    );  
    root.Save(xw);  
}  
Console.WriteLine(sb.ToString());  
```  
  
```vb  
Dim sb As StringBuilder = New StringBuilder()  
Dim xws As XmlWriterSettings = New XmlWriterSettings()  
xws.OmitXmlDeclaration = True  
Using xw = XmlWriter.Create(sb, xws)  
    Dim root As XElement = <Root>  
                               <Child>child content</Child>  
                           </Root>  
    root.Save(xw)  
End Using  
Console.WriteLine(sb.ToString())  
```  
  
 <span data-ttu-id="e2d0e-799">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-799">This example produces the following output:</span></span>  
  
```xml  
<Root><Child>child content</Child></Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.IO.Stream stream, System.Xml.Linq.SaveOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class System.IO.Stream stream, valuetype System.Xml.Linq.SaveOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::IO::Stream ^ stream, System::Xml::Linq::SaveOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Xml.Linq.SaveOptions" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="e2d0e-800">Поток для вывода данного элемента <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-800">The stream to output this <see cref="T:System.Xml.Linq.XElement" /> to.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="e2d0e-801">Объект <see cref="T:System.Xml.Linq.SaveOptions" />, определяющий форматирование.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-801">A <see cref="T:System.Xml.Linq.SaveOptions" /> object that specifies formatting behavior.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2d0e-802">Выводит данный элемент <see cref="T:System.Xml.Linq.XElement" /> в указанный поток <see cref="T:System.IO.Stream" />, при необходимости задавая поведение форматирования.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-802">Outputs this <see cref="T:System.Xml.Linq.XElement" /> to the specified <see cref="T:System.IO.Stream" />, optionally specifying formatting behavior.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2d0e-803">По умолчанию `options` присваиваются <xref:System.Xml.Linq.SaveOptions.None>.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-803">By default the `options` are set to <xref:System.Xml.Linq.SaveOptions.None>.</span></span> <span data-ttu-id="e2d0e-804">Этот параметр, удалите все лишние незначащие пробельные символы и добавить соответствующие незначащие пробелы, чтобы правильно структурированный XML.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-804">This option will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented.</span></span>  
  
 <span data-ttu-id="e2d0e-805">Если вы хотите сохранить выровненных XML, укажите <xref:System.Xml.Linq.SaveOptions.DisableFormatting> флаг, указывающий `options`.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-805">If you want to save unindented XML, specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`.</span></span> <span data-ttu-id="e2d0e-806">Это вызовет в результате все пробелы в точности так, как представлено в дереве XML.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-806">This will cause the writer to write all white spaces exactly as represented in the XML tree.</span></span>  
  
 <span data-ttu-id="e2d0e-807">Используйте <xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces> вариант, если требуется удалить дубликаты объявлений пространств имен.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-807">Use <xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces> option if you want to remove duplicate namespace declarations.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.IO.TextWriter textWriter, System.Xml.Linq.SaveOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class System.IO.TextWriter textWriter, valuetype System.Xml.Linq.SaveOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::IO::TextWriter ^ textWriter, System::Xml::Linq::SaveOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textWriter" Type="System.IO.TextWriter" />
        <Parameter Name="options" Type="System.Xml.Linq.SaveOptions" />
      </Parameters>
      <Docs>
        <param name="textWriter">
          <span data-ttu-id="e2d0e-808">
            <see cref="T:System.IO.TextWriter" />, в который выводится XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-808">The <see cref="T:System.IO.TextWriter" /> to output the XML to.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="e2d0e-809">Объект <see cref="T:System.Xml.Linq.SaveOptions" />, указывающий поведение форматирования.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-809">A <see cref="T:System.Xml.Linq.SaveOptions" /> that specifies formatting behavior.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2d0e-810">Сериализация этого элемента в <see cref="T:System.IO.TextWriter" /> с отключением форматирования (при необходимости).</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-810">Serialize this element to a <see cref="T:System.IO.TextWriter" />, optionally disabling formatting.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2d0e-811">Если вы хотите сохранить выровненных XML, укажите <xref:System.Xml.Linq.SaveOptions.DisableFormatting> флаг, указывающий `options`.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-811">If you want to save unindented XML, specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`.</span></span> <span data-ttu-id="e2d0e-812">Это вызовет в результате все пробелы точно так, как представлено в дереве XML.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-812">This will cause the writer to write all white space exactly as represented in the XML tree.</span></span>  
  
 <span data-ttu-id="e2d0e-813">Если вы хотите сохранить XML с отступами, не указывайте <xref:System.Xml.Linq.SaveOptions.DisableFormatting> флаг, указывающий `options`.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-813">If you want to save indented XML, do not specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`.</span></span> <span data-ttu-id="e2d0e-814">Это удалит лишние незначащие пробельные символы и добавить соответствующие незначащие пробелы, чтобы правильно структурированный XML.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-814">This will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented.</span></span> <span data-ttu-id="e2d0e-815">Это поведение по умолчанию и поведение перегрузки <xref:System.Xml.Linq.XElement.Save%2A> методы, которые не принимают `options` как параметр.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-815">This is the default behavior, and the behavior of the overloads of the <xref:System.Xml.Linq.XElement.Save%2A> methods that do not take `options` as a parameter.</span></span>  
  
 <span data-ttu-id="e2d0e-816">Дополнительные сведения см. в разделе [сохранения пробелов при загрузке или синтаксическом анализе XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) и [Сохранение пробелов при сериализации](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span><span class="sxs-lookup"><span data-stu-id="e2d0e-816">For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2d0e-817">В следующем примере показано два способа использования этого метода.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-817">The following example shows two uses of this method.</span></span> <span data-ttu-id="e2d0e-818">В первом сохраняется пустое пространство.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-818">The first use preserves white space.</span></span> <span data-ttu-id="e2d0e-819">Сериализует второй <xref:System.Xml.Linq.XElement> с форматированием.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-819">The second serializes the <xref:System.Xml.Linq.XElement> with formatting.</span></span> <span data-ttu-id="e2d0e-820">Так как в документе без пробелов в нем построенный, сохранение пустого пространства выводит XML без отступов.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-820">Because the document has no white space in it as constructed, preserving white space outputs the XML without any indenting.</span></span>  
  
```csharp  
XElement root = XElement.Parse(@"<Root> <Child> Text </Child> </Root>");  
  
using (StringWriter sw = new StringWriter())  
{  
    root.Save(sw, SaveOptions.DisableFormatting);  
    Console.WriteLine(sw.ToString());  
}  
  
Console.WriteLine("=====");  
  
using (StringWriter sw = new StringWriter())  
{  
    root.Save(sw, SaveOptions.None);  
    Console.WriteLine(sw.ToString());  
}  
```  
  
```vb  
Dim root As XElement = <Root><Child> Text </Child></Root>  
  
Using sw = New StringWriter()  
    root.Save(sw, SaveOptions.DisableFormatting)  
    Console.WriteLine(sw.ToString())  
End Using  
  
Console.WriteLine("=====")  
  
Using sw = New StringWriter()  
    root.Save(sw, SaveOptions.None)  
    Console.WriteLine(sw.ToString())  
End Using  
```  
  
 <span data-ttu-id="e2d0e-821">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-821">This example produces the following output:</span></span>  
  
```  
<?xml version="1.0" encoding="utf-16"?><Root><Child> Text </Child></Root>  
=====  
<?xml version="1.0" encoding="utf-16"?>  
<Root>  
  <Child> Text </Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (string fileName, System.Xml.Linq.SaveOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(string fileName, valuetype System.Xml.Linq.SaveOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Save(System.String,System.Xml.Linq.SaveOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (fileName As String, options As SaveOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::String ^ fileName, System::Xml::Linq::SaveOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="options" Type="System.Xml.Linq.SaveOptions" />
      </Parameters>
      <Docs>
        <param name="fileName">
          <span data-ttu-id="e2d0e-822">Объект <see cref="T:System.String" />, содержащий имя файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-822">A <see cref="T:System.String" /> that contains the name of the file.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="e2d0e-823">Объект <see cref="T:System.Xml.Linq.SaveOptions" />, указывающий поведение форматирования.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-823">A <see cref="T:System.Xml.Linq.SaveOptions" /> that specifies formatting behavior.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2d0e-824">Сериализовать этот элемент в файл (с возможным отключением форматирования).</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-824">Serialize this element to a file, optionally disabling formatting.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2d0e-825">Если вы хотите сохранить выровненных XML, укажите <xref:System.Xml.Linq.SaveOptions.DisableFormatting> флаг, указывающий `options`.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-825">If you want to save unindented XML, specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`.</span></span> <span data-ttu-id="e2d0e-826">Это вызовет в результате все пробелы точно так, как представлено в дереве XML.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-826">This will cause the writer to write all white space exactly as represented in the XML tree.</span></span>  
  
 <span data-ttu-id="e2d0e-827">Если вы хотите сохранить XML с отступами, не указывайте <xref:System.Xml.Linq.SaveOptions.DisableFormatting> флаг, указывающий `options`.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-827">If you want to save indented XML, do not specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`.</span></span> <span data-ttu-id="e2d0e-828">Это удалит лишние незначащие пробельные символы и добавить соответствующие незначащие пробелы, чтобы правильно структурированный XML.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-828">This will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented.</span></span> <span data-ttu-id="e2d0e-829">Это поведение по умолчанию и поведение перегрузки <xref:System.Xml.Linq.XElement.Save%2A> методы, которые не принимают `options` как параметр.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-829">This is the default behavior, and the behavior of the overloads of the <xref:System.Xml.Linq.XElement.Save%2A> methods that do not take `options` as a parameter.</span></span>  
  
 <span data-ttu-id="e2d0e-830">Дополнительные сведения см. в разделе [сохранения пробелов при загрузке или синтаксическом анализе XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) и [Сохранение пробелов при сериализации](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span><span class="sxs-lookup"><span data-stu-id="e2d0e-830">For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2d0e-831">В следующем примере показано два способа использования этого метода.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-831">The following example shows two uses of this method.</span></span> <span data-ttu-id="e2d0e-832">В первом сохраняется пустое пространство.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-832">The first use preserves white space.</span></span> <span data-ttu-id="e2d0e-833">Сериализует второй <xref:System.Xml.Linq.XElement> с форматированием.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-833">The second one serializes the <xref:System.Xml.Linq.XElement> with formatting.</span></span>  
  
```csharp  
string str;  
XElement root = XElement.Parse(@"<Root> <Child> Text </Child> </Root>");  
  
root.Save("Root.xml", SaveOptions.DisableFormatting);  
str = File.ReadAllText("Root.xml");  
Console.WriteLine(str);  
  
Console.WriteLine("=====");  
  
root.Save("Root.xml", SaveOptions.None);  
str = File.ReadAllText("Root.xml");  
Console.WriteLine(str);  
```  
  
```vb  
Dim str As String  
Dim root As XElement = <Root><Child> Text </Child></Root>  
  
root.Save("Root.xml", SaveOptions.DisableFormatting)  
str = File.ReadAllText("Root.xml")  
Console.WriteLine(str)  
  
Console.WriteLine("=====")  
  
root.Save("Root.xml", SaveOptions.None)  
str = File.ReadAllText("Root.xml")  
Console.WriteLine(str)  
```  
  
 <span data-ttu-id="e2d0e-834">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-834">This example produces the following output:</span></span>  
  
```  
<?xml version="1.0" encoding="utf-8"?><Root><Child> Text </Child></Root>  
=====  
<?xml version="1.0" encoding="utf-8"?>  
<Root>  
  <Child> Text </Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SaveAsync (System.Xml.XmlWriter writer, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task SaveAsync(class System.Xml.XmlWriter writer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.SaveAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ SaveAsync(System::Xml::XmlWriter ^ writer, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SaveAsync (System.IO.Stream stream, System.Xml.Linq.SaveOptions options, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task SaveAsync(class System.IO.Stream stream, valuetype System.Xml.Linq.SaveOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.SaveAsync(System.IO.Stream,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ SaveAsync(System::IO::Stream ^ stream, System::Xml::Linq::SaveOptions options, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Xml.Linq.SaveOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="stream">To be added.</param>
        <param name="options">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SaveAsync (System.IO.TextWriter textWriter, System.Xml.Linq.SaveOptions options, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task SaveAsync(class System.IO.TextWriter textWriter, valuetype System.Xml.Linq.SaveOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.SaveAsync(System.IO.TextWriter,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ SaveAsync(System::IO::TextWriter ^ textWriter, System::Xml::Linq::SaveOptions options, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textWriter" Type="System.IO.TextWriter" />
        <Parameter Name="options" Type="System.Xml.Linq.SaveOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="textWriter">To be added.</param>
        <param name="options">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAttributeValue">
      <MemberSignature Language="C#" Value="public void SetAttributeValue (System.Xml.Linq.XName name, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAttributeValue(class System.Xml.Linq.XName name, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.SetAttributeValue(System.Xml.Linq.XName,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAttributeValue (name As XName, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAttributeValue(System::Xml::Linq::XName ^ name, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="e2d0e-835">
            <see cref="T:System.Xml.Linq.XName" />, содержащий имя изменяемого атрибута.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-835">An <see cref="T:System.Xml.Linq.XName" /> that contains the name of the attribute to change.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="e2d0e-836">Значение, присваиваемое атрибуту.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-836">The value to assign to the attribute.</span>
          </span>
          <span data-ttu-id="e2d0e-837">Атрибут удален, если значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-837">The attribute is removed if the value is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="e2d0e-838">В противном случае, значение преобразовано в строковое представление и назначено свойству <see cref="P:System.Xml.Linq.XAttribute.Value" /> атрибута.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-838">Otherwise, the value is converted to its string representation and assigned to the <see cref="P:System.Xml.Linq.XAttribute.Value" /> property of the attribute.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2d0e-839">Устанавливает значение атрибута, добавляет или удаляет атрибут.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-839">Sets the value of an attribute, adds an attribute, or removes an attribute.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2d0e-840">Этот метод предназначен для упрощения список пар "имя значение" как набор атрибутов.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-840">This method is designed to make it easy to maintain a list of name/value pairs as a set of attributes.</span></span> <span data-ttu-id="e2d0e-841">Используя этот список необходимо добавить пары, изменять или удалять пары.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-841">When maintaining the list, you need to add pairs, modify pairs, or delete pairs.</span></span> <span data-ttu-id="e2d0e-842">Если вызвать этот метод с именем не существует атрибута, этот метод создает атрибут.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-842">If you call this method passing a name that does not exist as an attribute, this method creates an attribute for you.</span></span> <span data-ttu-id="e2d0e-843">Если вызвать этот метод имени существующего атрибута, метод изменит значение атрибута на значение, которое можно указать.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-843">If you call this method passing the name of an existing attribute, this method modifies the value of the attribute to the value that you specify.</span></span> <span data-ttu-id="e2d0e-844">Если передать `null` для `value`, этот метод удаляет атрибут.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-844">If you pass `null` for `value`, this method removes the attribute.</span></span>  
  
 <span data-ttu-id="e2d0e-845">Этот метод вызывает <xref:System.Xml.Linq.XObject.Changed> и <xref:System.Xml.Linq.XObject.Changing> события.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-845">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
 <span data-ttu-id="e2d0e-846">Значение присваивается атрибуту с указанным именем.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-846">The value is assigned to the attribute with the specified name.</span></span> <span data-ttu-id="e2d0e-847">Если атрибут с указанным именем не существует, добавляется новый атрибут.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-847">If no attribute with the specified name exists, a new attribute is added.</span></span> <span data-ttu-id="e2d0e-848">Если значение равно `null`, атрибут с указанным именем, если таковые имеются, удаляется.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-848">If the value is `null`, the attribute with the specified name, if any, is deleted.</span></span>  
  
 <span data-ttu-id="e2d0e-849">Дополнительные сведения см. в разделе [обслуживание пары имя/значение](http://msdn.microsoft.com/library/fe9798bf-b5e2-4a3c-a86c-7f8638912691).</span><span class="sxs-lookup"><span data-stu-id="e2d0e-849">For more information, see [Maintaining Name/Value Pairs](http://msdn.microsoft.com/library/fe9798bf-b5e2-4a3c-a86c-7f8638912691).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2d0e-850">В следующем примере создается элемент с атрибутом.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-850">The following example creates an element with an attribute.</span></span> <span data-ttu-id="e2d0e-851">Затем этот метод используется для замены содержимого атрибута.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-851">It then uses this method to replace the content of the attribute.</span></span>  
  
```csharp  
// Create an element with no content.  
XElement root = new XElement("Root");  
  
// Add some name/value pairs.  
root.SetAttributeValue("Att1", 1);  
root.SetAttributeValue("Att2", 2);  
root.SetAttributeValue("Att3", 3);  
Console.WriteLine(root);  
  
// Modify one of the name/value pairs.  
root.SetAttributeValue("Att2", 22);  
Console.WriteLine(root);  
  
// Remove one of the name/value pairs.  
root.SetAttributeValue("Att3", null);  
Console.WriteLine(root);  
```  
  
```vb  
' Create an element with no content.  
Dim root As XElement = <Root/>  
  
' Add some name/value pairs.  
root.SetAttributeValue("Att1", 1)  
root.SetAttributeValue("Att2", 2)  
root.SetAttributeValue("Att3", 3)  
Console.WriteLine(root)  
  
' Modify one of the name/value pairs.  
root.SetAttributeValue("Att2", 22)  
Console.WriteLine(root)  
  
' Remove one of the name/value pairs.  
root.SetAttributeValue("Att3", Nothing)  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="e2d0e-852">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-852">This example produces the following output:</span></span>  
  
```  
<Root Att1="1" Att2="2" Att3="3" />  
<Root Att1="1" Att2="22" Att3="3" />  
<Root Att1="1" Att2="22" />  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e2d0e-853">
            <paramref name="value" /> является экземпляром <see cref="T:System.Xml.Linq.XObject" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-853">The <paramref name="value" /> is an instance of <see cref="T:System.Xml.Linq.XObject" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Xml.Linq.XAttribute.SetValue(System.Object)" />
        <altmember cref="M:System.Xml.Linq.XElement.SetElementValue(System.Xml.Linq.XName,System.Object)" />
        <altmember cref="M:System.Xml.Linq.XElement.SetValue(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="SetElementValue">
      <MemberSignature Language="C#" Value="public void SetElementValue (System.Xml.Linq.XName name, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetElementValue(class System.Xml.Linq.XName name, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.SetElementValue(System.Xml.Linq.XName,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetElementValue (name As XName, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetElementValue(System::Xml::Linq::XName ^ name, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="e2d0e-854">
            <see cref="T:System.Xml.Linq.XName" />, содержащий имя изменяемого дочернего элемента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-854">An <see cref="T:System.Xml.Linq.XName" /> that contains the name of the child element to change.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="e2d0e-855">Значение, присваиваемое дочернему элементу.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-855">The value to assign to the child element.</span>
          </span>
          <span data-ttu-id="e2d0e-856">Дочерний элемент удален, если значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-856">The child element is removed if the value is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="e2d0e-857">В противном случае, значение преобразовано в строковое представление и назначено свойству <see cref="P:System.Xml.Linq.XElement.Value" /> дочернего элемента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-857">Otherwise, the value is converted to its string representation and assigned to the <see cref="P:System.Xml.Linq.XElement.Value" /> property of the child element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2d0e-858">Задает значение дочернего элемента, добавляет или удаляет дочерний элемент.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-858">Sets the value of a child element, adds a child element, or removes a child element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2d0e-859">Этот метод предназначен для упрощения список пар имя значение как набора дочерних элементов.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-859">This method is designed to make it easy to maintain a list of name/value pairs as a set of children elements.</span></span> <span data-ttu-id="e2d0e-860">Используя этот список необходимо добавить пары, изменять или удалять пары.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-860">When maintaining the list, you need to add pairs, modify pairs, or delete pairs.</span></span> <span data-ttu-id="e2d0e-861">Если вызвать этот метод с именем не существует дочерний элемент, этот метод создает дочерний элемент.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-861">If you call this method passing a name that does not exist as a child element, this method creates a child element for you.</span></span> <span data-ttu-id="e2d0e-862">Если вызвать этот метод, передав имя существующего дочернего элемента, этот метод изменяет значение дочернего элемента на значение, которое можно указать.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-862">If you call this method passing the name of an existing child element, this method modifies the value of the child element to the value that you specify.</span></span> <span data-ttu-id="e2d0e-863">Если передать `null` для `value`, этот метод удаляет дочерний элемент.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-863">If you pass `null` for `value`, this method removes the child element.</span></span>  
  
 <span data-ttu-id="e2d0e-864">Этот метод вызывает события.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-864">This method will raise events.</span></span>  
  
 <span data-ttu-id="e2d0e-865">Значение присваивается первый дочерний элемент с указанным именем.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-865">The value is assigned to the first child element with the specified name.</span></span> <span data-ttu-id="e2d0e-866">Если дочернего элемента с указанным именем не существует, добавляется новый дочерний элемент.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-866">If no child element with the specified name exists, a new child element is added.</span></span> <span data-ttu-id="e2d0e-867">Если значение равно null, первый дочерний элемент с указанным именем, если таковые имеются, удаляется.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-867">If the value is null, the first child element with the specified name, if any, is deleted.</span></span>  
  
 <span data-ttu-id="e2d0e-868">Этот метод не добавляет дочерние узлы или атрибуты для указанного дочернего элемента.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-868">This method does not add child nodes or attributes to the specified child element.</span></span> <span data-ttu-id="e2d0e-869">Этот метод вызывает исключение, если любой объект, производный от <xref:System.Xml.Linq.XObject> передается в качестве `value`.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-869">This method throws an exception if any object that derives from <xref:System.Xml.Linq.XObject> is passed as `value`.</span></span>  
  
 <span data-ttu-id="e2d0e-870">Дополнительные сведения см. в разделе [обслуживание пары имя/значение](http://msdn.microsoft.com/library/fe9798bf-b5e2-4a3c-a86c-7f8638912691).</span><span class="sxs-lookup"><span data-stu-id="e2d0e-870">For more information, see [Maintaining Name/Value Pairs](http://msdn.microsoft.com/library/fe9798bf-b5e2-4a3c-a86c-7f8638912691).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2d0e-871">В следующем примере создается элемент с дочерним элементом.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-871">The following example creates an element with a child element.</span></span> <span data-ttu-id="e2d0e-872">Затем этот метод используется для задания значения дочернего элемента.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-872">It then uses this method to set the value of the child element.</span></span>  
  
```csharp  
// Create an element with no content  
XElement root = new XElement("Root");  
  
// Add some name/value pairs.  
root.SetElementValue("Ele1", 1);  
root.SetElementValue("Ele2", 2);  
root.SetElementValue("Ele3", 3);  
Console.WriteLine(root);  
  
// Modify one of the name/value pairs.  
root.SetElementValue("Ele2", 22);  
Console.WriteLine(root);  
  
// Remove one of the name/value pairs.  
root.SetElementValue("Ele3", null);  
Console.WriteLine(root);  
```  
  
```vb  
' Create an element with no content.  
Dim root As XElement = <Root/>  
  
' Add some name/value pairs.  
root.SetElementValue("Ele1", 1)  
root.SetElementValue("Ele2", 2)  
root.SetElementValue("Ele3", 3)  
Console.WriteLine(root)  
  
' Modify one of the name/value pairs.  
root.SetElementValue("Ele2", 22)  
Console.WriteLine(root)  
  
' Remove one of the name/value pairs.  
root.SetElementValue("Ele3", Nothing)  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="e2d0e-873">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-873">This example produces the following output:</span></span>  
  
```  
<Root>  
  <Ele1>1</Ele1>  
  <Ele2>2</Ele2>  
  <Ele3>3</Ele3>  
</Root>  
<Root>  
  <Ele1>1</Ele1>  
  <Ele2>22</Ele2>  
  <Ele3>3</Ele3>  
</Root>  
<Root>  
  <Ele1>1</Ele1>  
  <Ele2>22</Ele2>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e2d0e-874">
            <paramref name="value" /> является экземпляром <see cref="T:System.Xml.Linq.XObject" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-874">The <paramref name="value" /> is an instance of <see cref="T:System.Xml.Linq.XObject" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Xml.Linq.XAttribute.SetValue(System.Object)" />
        <altmember cref="M:System.Xml.Linq.XElement.SetElementValue(System.Xml.Linq.XName,System.Object)" />
        <altmember cref="M:System.Xml.Linq.XElement.SetValue(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValue(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.SetValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValue(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="e2d0e-875">Значение, присваиваемое этому элементу.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-875">The value to assign to this element.</span>
          </span>
          <span data-ttu-id="e2d0e-876">Значение преобразовано в строковое представление и назначено свойству <see cref="P:System.Xml.Linq.XElement.Value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-876">The value is converted to its string representation and assigned to the <see cref="P:System.Xml.Linq.XElement.Value" /> property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2d0e-877">Задает значение этого элемента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-877">Sets the value of this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2d0e-878">Этот метод вызывает <xref:System.Xml.Linq.XObject.Changed> и <xref:System.Xml.Linq.XObject.Changing> события.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-878">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
 <span data-ttu-id="e2d0e-879">Не допускается, чтобы передать экземпляр класса, производного от <xref:System.Xml.Linq.XObject>, такие как <xref:System.Xml.Linq.XElement>.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-879">It is invalid to pass an instance of a class that derives from <xref:System.Xml.Linq.XObject>, such as <xref:System.Xml.Linq.XElement>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2d0e-880">В следующем примере создается элемент, содержащий дочерний элемент.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-880">The following example creates an element that contains a child element.</span></span> <span data-ttu-id="e2d0e-881">Затем устанавливается значение элемента, с помощью этого метода.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-881">It then sets the value of the element using this method.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XElement("Child", "child content")  
);  
root.SetValue("new content");  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = _   
        <Root>  
            <Child>child content</Child>  
        </Root>  
  
root.SetValue("new content")  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="e2d0e-882">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-882">This example produces the following output:</span></span>  
  
```xml  
<Root>new content</Root>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e2d0e-883">Значение параметра <paramref name="value" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-883">The <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e2d0e-884">
            <paramref name="value" /> является <see cref="T:System.Xml.Linq.XObject" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-884">The <paramref name="value" /> is an <see cref="T:System.Xml.Linq.XObject" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Xml.Linq.XAttribute.SetValue(System.Object)" />
        <altmember cref="M:System.Xml.Linq.XElement.SetAttributeValue(System.Xml.Linq.XName,System.Object)" />
        <altmember cref="M:System.Xml.Linq.XElement.SetValue(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Xml.Serialization.IXmlSerializable.GetSchema">
      <MemberSignature Language="C#" Value="System.Xml.Schema.XmlSchema IXmlSerializable.GetSchema ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Xml.Schema.XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#GetSchema" />
      <MemberSignature Language="VB.NET" Value="Function GetSchema () As XmlSchema Implements IXmlSerializable.GetSchema" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Xml::Schema::XmlSchema ^ System.Xml.Serialization.IXmlSerializable.GetSchema() = System::Xml::Serialization::IXmlSerializable::GetSchema;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.Serialization.IXmlSerializable.GetSchema</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e2d0e-885">Возвращает определение схемы XML, которое описывает представление XML этого объекта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-885">Gets an XML schema definition that describes the XML representation of this object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2d0e-886">
            <see cref="T:System.Xml.Schema.XmlSchema" />, описывающая представление XML объекта, полученного из метода <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> и включенного в метод <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-886">An <see cref="T:System.Xml.Schema.XmlSchema" /> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2d0e-887">Этот метод является частью реализации <xref:System.Xml.Serialization.IXmlSerializable> интерфейса.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-887">This method is part of implementation of the <xref:System.Xml.Serialization.IXmlSerializable> interface.</span></span>  
  
 <span data-ttu-id="e2d0e-888">Этот метод используется внутренне для сериализации графов объектов, содержащих LINQ для объектов XML.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-888">This method is used internally for serializing object graphs that contain LINQ to XML objects.</span></span> <span data-ttu-id="e2d0e-889">Пример сериализация графа объекта, содержащего LINQ для объектов XML см. в разделе [Serializing объекта диаграммах, содержащих объекты XElement](http://msdn.microsoft.com/library/443d7904-a6f0-450a-b1a4-5d7ed869d1d5).</span><span class="sxs-lookup"><span data-stu-id="e2d0e-889">For an example of serializing an object graph that contains LINQ to XML objects, see [Serializing Object Graphs that Contain XElement Objects](http://msdn.microsoft.com/library/443d7904-a6f0-450a-b1a4-5d7ed869d1d5).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.Serialization.IXmlSerializable.ReadXml">
      <MemberSignature Language="C#" Value="void IXmlSerializable.ReadXml (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Xml.Serialization.IXmlSerializable.ReadXml(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Sub ReadXml (reader As XmlReader) Implements IXmlSerializable.ReadXml" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Xml.Serialization.IXmlSerializable.ReadXml(System::Xml::XmlReader ^ reader) = System::Xml::Serialization::IXmlSerializable::ReadXml;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <span data-ttu-id="e2d0e-890">Объект <see cref="T:System.Xml.XmlReader" />, из которого десериализуется объект.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-890">The <see cref="T:System.Xml.XmlReader" /> from which the object is deserialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2d0e-891">Создает объект из представления XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-891">Generates an object from its XML representation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2d0e-892">Этот метод является частью реализации <xref:System.Xml.Serialization.IXmlSerializable> интерфейса.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-892">This method is part of implementation of the <xref:System.Xml.Serialization.IXmlSerializable> interface.</span></span>  
  
 <span data-ttu-id="e2d0e-893">Этот метод используется внутренне для сериализации графов объектов, содержащих LINQ для объектов XML.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-893">This method is used internally for serializing object graphs that contain LINQ to XML objects.</span></span> <span data-ttu-id="e2d0e-894">Пример сериализация графа объекта, содержащего LINQ для объектов XML см. в разделе [Serializing объекта диаграммах, содержащих объекты XElement](http://msdn.microsoft.com/library/443d7904-a6f0-450a-b1a4-5d7ed869d1d5).</span><span class="sxs-lookup"><span data-stu-id="e2d0e-894">For an example of serializing an object graph that contains LINQ to XML objects, see [Serializing Object Graphs that Contain XElement Objects](http://msdn.microsoft.com/library/443d7904-a6f0-450a-b1a4-5d7ed869d1d5).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.Serialization.IXmlSerializable.WriteXml">
      <MemberSignature Language="C#" Value="void IXmlSerializable.WriteXml (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Xml.Serialization.IXmlSerializable.WriteXml(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Sub WriteXml (writer As XmlWriter) Implements IXmlSerializable.WriteXml" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Xml.Serialization.IXmlSerializable.WriteXml(System::Xml::XmlWriter ^ writer) = System::Xml::Serialization::IXmlSerializable::WriteXml;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer">
          <span data-ttu-id="e2d0e-895">Объект <see cref="T:System.Xml.XmlWriter" />, в который сериализуется этот объект.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-895">The <see cref="T:System.Xml.XmlWriter" /> to which this object is serialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2d0e-896">Преобразует объект в представление XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-896">Converts an object into its XML representation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2d0e-897">Этот метод используется внутренне для маршалинга графов объектов, содержащих LINQ для объектов XML.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-897">This method is used internally for marshaling object graphs that contain LINQ to XML objects.</span></span> <span data-ttu-id="e2d0e-898">Пример сериализация графа объекта, содержащего LINQ для объектов XML см. в разделе [Serializing объекта диаграммах, содержащих объекты XElement](http://msdn.microsoft.com/library/443d7904-a6f0-450a-b1a4-5d7ed869d1d5).</span><span class="sxs-lookup"><span data-stu-id="e2d0e-898">For an example of serializing an object graph that contains LINQ to XML objects, see [Serializing Object Graphs that Contain XElement Objects](http://msdn.microsoft.com/library/443d7904-a6f0-450a-b1a4-5d7ed869d1d5).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public string Value { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XElement.Value" />
      <MemberSignature Language="VB.NET" Value="Public Property Value As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Value { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e2d0e-899">Возвращает или задает сцепленное текстовое содержимое этого элемента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-899">Gets or sets the concatenated text contents of this element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e2d0e-900">Объект <see cref="T:System.String" />, содержащий все текстовое содержимое этого элемента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-900">A <see cref="T:System.String" /> that contains all of the text content of this element.</span>
          </span>
          <span data-ttu-id="e2d0e-901">Если существует несколько текстовых узлов, они будут связаны.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-901">If there are multiple text nodes, they will be concatenated.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2d0e-902">Это свойство можно получить или задать значение элемента.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-902">Using this property, you can get or set the value of an element.</span></span>  
  
 <span data-ttu-id="e2d0e-903">Параметр этого свойства вызовет <xref:System.Xml.Linq.XObject.Changed> и <xref:System.Xml.Linq.XObject.Changing> события.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-903">Setting this property will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
 <span data-ttu-id="e2d0e-904">Если требуется получить значение элемента, но вы не уверены, что файл существует, он является более удобным использовать операторы явного преобразования и назначить элемент обнуляемый тип, такой как `string` или <xref:System.Nullable%601> из <xref:System.Int32>.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-904">If you want to get the value of an element but you are not sure that it exists, it is more convenient to use the explicit conversion operators, and assign the element to a nullable type such as `string` or <xref:System.Nullable%601> of <xref:System.Int32>.</span></span> <span data-ttu-id="e2d0e-905">Если элемент не существует, допускающий значение NULL тип имеет значение `null`.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-905">If the element does not exist, the nullable type is set to `null`.</span></span> <span data-ttu-id="e2d0e-906">Напротив, если вы хотите использовать это свойство, необходимо проверить, <xref:System.Xml.Linq.XContainer.Element%2A> метод не возвращает `null` для доступа к этому свойству.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-906">By contrast, if you want to use this property, you must make sure that the <xref:System.Xml.Linq.XContainer.Element%2A> method does not return `null` before you access this property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2d0e-907">В следующем примере это свойство используется для извлечения текста элемента со смешанным содержимым.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-907">The following example uses this property to retrieve the text of an element with mixed content.</span></span>  
  
```csharp  
XElement el = XElement.Parse("<Root>This is <b>mixed</b> content</Root>");  
Console.WriteLine("{0}", el.Value);  
```  
  
```vb  
Dim el As XElement = <Root>This is <b>mixed</b> content</Root>  
Console.WriteLine("{0}", el.Value)  
```  
  
 <span data-ttu-id="e2d0e-908">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-908">This example produces the following output:</span></span>  
  
```  
This is mixed content  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteTo">
      <MemberSignature Language="C#" Value="public override void WriteTo (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteTo(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.WriteTo(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteTo (writer As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteTo(System::Xml::XmlWriter ^ writer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer">
          <span data-ttu-id="e2d0e-909">Объект <see cref="T:System.Xml.XmlWriter" />, в который данный метод будет выполнять запись.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-909">An <see cref="T:System.Xml.XmlWriter" /> into which this method will write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2d0e-910">Запись этого элемента в объект <see cref="T:System.Xml.XmlWriter" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2d0e-910">Write this element to an <see cref="T:System.Xml.XmlWriter" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e2d0e-911">В следующем примере показан способ записи <xref:System.Xml.Linq.XElement> для <xref:System.Xml.XmlWriter>.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-911">The following example shows how to write an <xref:System.Xml.Linq.XElement> to an <xref:System.Xml.XmlWriter>.</span></span> <span data-ttu-id="e2d0e-912">Обратите внимание, что примере не записывается объявление XML.</span><span class="sxs-lookup"><span data-stu-id="e2d0e-912">Note that the example did not write an XML declaration.</span></span>  
  
```csharp  
StringBuilder sb = new StringBuilder();  
XmlWriterSettings xws = new XmlWriterSettings();  
xws.OmitXmlDeclaration = true;  
xws.Indent = true;  
  
using (XmlWriter xw = XmlWriter.Create(sb, xws)) {  
    xw.WriteStartElement("Root");  
  
    XElement child1 = new XElement("Child",  
        new XElement("GrandChild", "some content")  
    );  
    child1.WriteTo(xw);  
  
    XElement child2 = new XElement("AnotherChild",  
        new XElement("GrandChild", "different content")  
    );  
    child2.WriteTo(xw);  
  
    xw.WriteEndElement();  
}  
  
Console.WriteLine(sb.ToString());  
```  
  
```vb  
Dim sb As StringBuilder = New StringBuilder()  
Dim xws As XmlWriterSettings = New XmlWriterSettings()  
xws.OmitXmlDeclaration = True  
xws.Indent = True  
  
Using xw = XmlWriter.Create(sb, xws)  
    xw.WriteStartElement("Root")  
    Dim child1 As XElement = _  
        <Child>  
            <GrandChild>some content</GrandChild>  
        </Child>  
    child1.WriteTo(xw)  
    Dim child2 As XElement = _   
        <AnotherChild>  
            <GrandChild>different content</GrandChild>  
        </AnotherChild>  
    child2.WriteTo(xw)  
    xw.WriteEndElement()  
End Using  
  
Console.WriteLine(sb.ToString())  
```  
  
 <span data-ttu-id="e2d0e-913">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="e2d0e-913">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child>  
    <GrandChild>some content</GrandChild>  
  </Child>  
  <AnotherChild>  
    <GrandChild>different content</GrandChild>  
  </AnotherChild>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task WriteToAsync (System.Xml.XmlWriter writer, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task WriteToAsync(class System.Xml.XmlWriter writer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task ^ WriteToAsync(System::Xml::XmlWriter ^ writer, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>