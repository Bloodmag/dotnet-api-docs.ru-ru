<Type Name="XName" FullName="System.Xml.Linq.XName">
  <TypeSignature Language="C#" Value="public sealed class XName : IEquatable&lt;System.Xml.Linq.XName&gt;, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit XName extends System.Object implements class System.IEquatable`1&lt;class System.Xml.Linq.XName&gt;, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Linq.XName" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class XName&#xA;Implements IEquatable(Of XName), ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class XName sealed : IEquatable&lt;System::Xml::Linq::XName ^&gt;, System::Runtime::Serialization::ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XDocument</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.Linq</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Xml.Linq.XName&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.Serialization.KnownType(typeof(System.Xml.Linq.NameSerializer))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="be2ab-101">Представляет имя XML-элемента или атрибута.</span><span class="sxs-lookup"><span data-stu-id="be2ab-101">Represents a name of an XML element or attribute.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="be2ab-102">Имена XML включает пространство имен и локального имени.</span><span class="sxs-lookup"><span data-stu-id="be2ab-102">XML names include a namespace and a local name.</span></span> <span data-ttu-id="be2ab-103">Объект *полное имя* представляет собой комбинацию локального имени и пространства имен.</span><span class="sxs-lookup"><span data-stu-id="be2ab-103">A *fully qualified name* is the combination of the namespace and local name.</span></span>  
  
## <a name="creating-an-xname-object"></a><span data-ttu-id="be2ab-104">Для создания объекта XName</span><span class="sxs-lookup"><span data-stu-id="be2ab-104">Creating an XName Object</span></span>  
 <span data-ttu-id="be2ab-105"><xref:System.Xml.Linq.XName> Нет открытых конструкторов.</span><span class="sxs-lookup"><span data-stu-id="be2ab-105"><xref:System.Xml.Linq.XName> does not contain any public constructors.</span></span> <span data-ttu-id="be2ab-106">Вместо этого данный класс предоставляет неявное преобразование из <xref:System.String> , позволяет создавать <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="be2ab-106">Instead, this class provides an implicit conversion from <xref:System.String> that allows you to create an <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="be2ab-107">Наиболее распространенным использовать это преобразование является при создании элемента или атрибута: первый аргумент <xref:System.Xml.Linq.XElement> конструктор является <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="be2ab-107">The most common place you use this conversion is when constructing an element or attribute: The first argument to the <xref:System.Xml.Linq.XElement> constructor is an <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="be2ab-108">Путем передачи строки, можно воспользоваться преимуществами неявного преобразования.</span><span class="sxs-lookup"><span data-stu-id="be2ab-108">By passing a string, you take advantage of the implicit conversion.</span></span> <span data-ttu-id="be2ab-109">Следующий код создает элемент с именем, которое находится вне пространства имен:</span><span class="sxs-lookup"><span data-stu-id="be2ab-109">The following code creates an element with a name that is in no namespace:</span></span>  
  
```csharp  
XElement root = new XElement("ElementName", "content");  
Console.WriteLine(root);  
```  
  
 <span data-ttu-id="be2ab-110">В Visual Basic более целесообразно использовать литералы XML:</span><span class="sxs-lookup"><span data-stu-id="be2ab-110">In Visual Basic, it is more appropriate to use XML literals:</span></span>  
  
```vb  
Dim root As XElement = <ElementName>content</ElementName>  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="be2ab-111">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="be2ab-111">This example produces the following output:</span></span>  
  
```xml  
<ElementName>content</ElementName>  
```  
  
 <span data-ttu-id="be2ab-112">Назначить строку для <xref:System.Xml.Linq.XName> используется неявное преобразование из <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="be2ab-112">Assigning a string to an <xref:System.Xml.Linq.XName> uses the implicit conversion from <xref:System.String>.</span></span>  
  
 <span data-ttu-id="be2ab-113">В примере Visual Basic создает <xref:System.Xml.Linq.XElement> с помощью XML-литералов.</span><span class="sxs-lookup"><span data-stu-id="be2ab-113">The Visual Basic example creates the <xref:System.Xml.Linq.XElement> using XML literals.</span></span> <span data-ttu-id="be2ab-114">Несмотря на то, что используются XML-литералы, <xref:System.Xml.Linq.XName> объекта создается для <xref:System.Xml.Linq.XElement>.</span><span class="sxs-lookup"><span data-stu-id="be2ab-114">Even though XML literals are used, an <xref:System.Xml.Linq.XName> object is created for the <xref:System.Xml.Linq.XElement>.</span></span>  
  
 <span data-ttu-id="be2ab-115">Кроме того, можно вызвать <xref:System.Xml.Linq.XName.Get%2A> метод <xref:System.Xml.Linq.XName> объекта.</span><span class="sxs-lookup"><span data-stu-id="be2ab-115">In addition, you can call the <xref:System.Xml.Linq.XName.Get%2A> method for an <xref:System.Xml.Linq.XName> object.</span></span> <span data-ttu-id="be2ab-116">Тем не менее рекомендуется использовать неявное преобразование из строки.</span><span class="sxs-lookup"><span data-stu-id="be2ab-116">However, the recommended way is to use the implicit conversion from string.</span></span>  
  
## <a name="creating-an-xname-in-a-namespace"></a><span data-ttu-id="be2ab-117">Создание XName в пространстве имен</span><span class="sxs-lookup"><span data-stu-id="be2ab-117">Creating an XName in a Namespace</span></span>  
 <span data-ttu-id="be2ab-118">Как и в XML, <xref:System.Xml.Linq.XName> может находиться в пространстве имен или может быть вне пространства имен.</span><span class="sxs-lookup"><span data-stu-id="be2ab-118">As with XML, an <xref:System.Xml.Linq.XName> can be in a namespace, or it can be in no namespace.</span></span>  
  
 <span data-ttu-id="be2ab-119">Для C#, рекомендуемый подход для создания <xref:System.Xml.Linq.XName> в пространстве имен — объявить <xref:System.Xml.Linq.XNamespace> объекта, а затем использовать переопределение оператора сложения.</span><span class="sxs-lookup"><span data-stu-id="be2ab-119">For C#, the recommended approach for creating an <xref:System.Xml.Linq.XName> in a namespace is to declare the <xref:System.Xml.Linq.XNamespace> object, then use the override of the addition operator.</span></span>  
  
 <span data-ttu-id="be2ab-120">В Visual Basic рекомендуется использовать литералы XML и деклараций глобальных пространств имен для создания XML-ФАЙЛ, в пространстве имен.</span><span class="sxs-lookup"><span data-stu-id="be2ab-120">For Visual Basic, the recommended approach is to use XML literals and global namespace declarations to create XML that is in a namespace.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "ElementName", "content");  
Console.WriteLine(root);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = <ElementName>content</ElementName>  
        Console.WriteLine(root)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="be2ab-121">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="be2ab-121">This example produces the following output:</span></span>  
  
```xml  
<ElementName xmlns="http://www.adventure-works.com">content</ElementName>  
```  
  
## <a name="creating-an-xname-in-no-namespace"></a><span data-ttu-id="be2ab-122">Создание XName вне пространства имен</span><span class="sxs-lookup"><span data-stu-id="be2ab-122">Creating an XName in no Namespace</span></span>  
 <span data-ttu-id="be2ab-123"><xref:System.Xml.Linq.XName.Namespace%2A> Свойство <xref:System.Xml.Linq.XName> объект гарантированно не иметь значение null.</span><span class="sxs-lookup"><span data-stu-id="be2ab-123">The <xref:System.Xml.Linq.XName.Namespace%2A> property of an <xref:System.Xml.Linq.XName> object is guaranteed to not be null.</span></span> <span data-ttu-id="be2ab-124">Если <xref:System.Xml.Linq.XName> находится вне пространства имен, то <xref:System.Xml.Linq.XName.Namespace%2A> свойству будет присвоено <xref:System.Xml.Linq.XNamespace.None%2A>.</span><span class="sxs-lookup"><span data-stu-id="be2ab-124">If the <xref:System.Xml.Linq.XName> is in no namespace, then the <xref:System.Xml.Linq.XName.Namespace%2A> property will be set to <xref:System.Xml.Linq.XNamespace.None%2A>.</span></span> <span data-ttu-id="be2ab-125">Это демонстрируется в следующем коде:</span><span class="sxs-lookup"><span data-stu-id="be2ab-125">The following code demonstrates this:</span></span>  
  
```csharp  
XElement root = new XElement("ElementName", "content");  
if (root.Name.Namespace == XNamespace.None)  
    Console.WriteLine("The element is in no namespace.");  
else  
    Console.WriteLine("The element is in a namespace.");  
```  
  
```vb  
Dim root As XElement = <ElementName>content</ElementName>  
If (root.Name.Namespace Is XNamespace.None) Then  
    Console.WriteLine("The element is in no namespace.")  
Else  
    Console.WriteLine("The element is in a namespace.")  
End If  
```  
  
 <span data-ttu-id="be2ab-126">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="be2ab-126">This example produces the following output:</span></span>  
  
```  
The element is in no namespace.  
```  
  
## <a name="using-expanded-names"></a><span data-ttu-id="be2ab-127">Использование развернутых имен</span><span class="sxs-lookup"><span data-stu-id="be2ab-127">Using Expanded Names</span></span>  
 <span data-ttu-id="be2ab-128">Можно также создать <xref:System.Xml.Linq.XName> из развернутое имя XML в виде `{namespace}localname`:</span><span class="sxs-lookup"><span data-stu-id="be2ab-128">You can also create an <xref:System.Xml.Linq.XName> from a expanded XML name in the form `{namespace}localname`:</span></span>  
  
```csharp  
XElement root = new XElement("{http://www.adventure-works.com}ElementName", "content");  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = New XElement("{http://www.adventure-works.com}ElementName", "content")  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="be2ab-129">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="be2ab-129">This example produces the following output:</span></span>  
  
```xml  
<ElementName xmlns="http://www.adventure-works.com">content</ElementName>  
```  
  
 <span data-ttu-id="be2ab-130">Имейте в виду, что создание <xref:System.Xml.Linq.XName> через развернутое имя является менее эффективным, чем создание <xref:System.Xml.Linq.XNamespace> объекта и используя переопределение оператора сложения.</span><span class="sxs-lookup"><span data-stu-id="be2ab-130">Be aware that creating an <xref:System.Xml.Linq.XName> through an expanded name is less efficient than creating an <xref:System.Xml.Linq.XNamespace> object and using the override of the addition operator.</span></span> <span data-ttu-id="be2ab-131">Это менее эффективно, чем импорт глобального пространства имен и использование литералов XML в Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="be2ab-131">It is also less efficient than importing a global namespace and using XML literals in Visual Basic.</span></span>  
  
 <span data-ttu-id="be2ab-132">Если вы создаете <xref:System.Xml.Linq.XName> с помощью развернутое имя, LINQ to XML необходимо найти атомизированных экземпляр пространства имен.</span><span class="sxs-lookup"><span data-stu-id="be2ab-132">If you create an <xref:System.Xml.Linq.XName> using an expanded name, LINQ to XML must find the atomized instance of a namespace.</span></span> <span data-ttu-id="be2ab-133">Эту работу, необходимо повторить для каждого использования развернутого имени.</span><span class="sxs-lookup"><span data-stu-id="be2ab-133">This work must be repeated for every use of an expanded name.</span></span> <span data-ttu-id="be2ab-134">Это дополнительное время, вероятнее всего можно пренебречь, при написании запросов LINQ; Тем не менее можно значительно при создании большого XML-дерева.</span><span class="sxs-lookup"><span data-stu-id="be2ab-134">This additional time is likely to be negligible when writing LINQ queries; however, it might be significant when creating a large XML tree.</span></span>  
  
## <a name="xname-objects-are-atomized"></a><span data-ttu-id="be2ab-135">Выполняется атомизация объектов XName</span><span class="sxs-lookup"><span data-stu-id="be2ab-135">XName Objects are Atomized</span></span>  
 <span data-ttu-id="be2ab-136"><xref:System.Xml.Linq.XName> объекты гарантированно атомизированы; то есть если два <xref:System.Xml.Linq.XName> объектов есть ровно то же пространство имен и одно и то же имя локального, они будут совместно использовать тот же экземпляр.</span><span class="sxs-lookup"><span data-stu-id="be2ab-136"><xref:System.Xml.Linq.XName> objects are guaranteed to be atomized; that is, if two <xref:System.Xml.Linq.XName> objects have exactly the same namespace and exactly the same local name, they will share the same instance.</span></span> <span data-ttu-id="be2ab-137">Операторы равенства и сравнения также предоставлены именно для этой цели.</span><span class="sxs-lookup"><span data-stu-id="be2ab-137">The equality and comparison operators are also provided explicitly for this purpose.</span></span>  
  
 <span data-ttu-id="be2ab-138">Помимо прочих преимуществ эта функция позволяет быстрее выполнять запросы.</span><span class="sxs-lookup"><span data-stu-id="be2ab-138">Among other benefits, this feature allows for faster execution of queries.</span></span> <span data-ttu-id="be2ab-139">При фильтрации по имени, элементов или атрибутов, выраженное в предикатах сравнения используйте сравнения идентичности, а не для сравнения значений.</span><span class="sxs-lookup"><span data-stu-id="be2ab-139">When filtering on the name of elements or attributes, the comparisons expressed in predicates use identity comparison, not value comparison.</span></span> <span data-ttu-id="be2ab-140">Этот способ гораздо быстрее, чтобы определить, что две ссылки фактически ссылаются на один и тот же объект, чем сравнивать две строки.</span><span class="sxs-lookup"><span data-stu-id="be2ab-140">It is much faster to determine that two references actually refer to the same object than to compare two strings.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="be2ab-141">Объект <see cref="T:System.Xml.Linq.XName" /> для сравнения с текущим объектом <see cref="T:System.Xml.Linq.XName" />.</span><span class="sxs-lookup"><span data-stu-id="be2ab-141">The <see cref="T:System.Xml.Linq.XName" /> to compare to the current <see cref="T:System.Xml.Linq.XName" />.</span></span></param>
        <summary><span data-ttu-id="be2ab-142">Определяет, является ли указанное <see cref="T:System.Xml.Linq.XName" /> равным данному <see cref="T:System.Xml.Linq.XName" />.</span><span class="sxs-lookup"><span data-stu-id="be2ab-142">Determines whether the specified <see cref="T:System.Xml.Linq.XName" /> is equal to this <see cref="T:System.Xml.Linq.XName" />.</span></span></summary>
        <returns>
          <span data-ttu-id="be2ab-143"><see langword="true" />, если указанный <see cref="T:System.Xml.Linq.XName" /> равен текущему <see cref="T:System.Xml.Linq.XName" />; в ином случае — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="be2ab-143"><see langword="true" /> if the specified <see cref="T:System.Xml.Linq.XName" /> is equal to the current <see cref="T:System.Xml.Linq.XName" />; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="be2ab-144">Для двух <xref:System.Xml.Linq.XName> объекты равны, они должны иметь одинаковое развернутое имя.</span><span class="sxs-lookup"><span data-stu-id="be2ab-144">For two <xref:System.Xml.Linq.XName> objects to be equal, they must have the same expanded name.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Get">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="be2ab-145">Вызывает объект <see cref="T:System.Xml.Linq.XName" />.</span><span class="sxs-lookup"><span data-stu-id="be2ab-145">Gets an <see cref="T:System.Xml.Linq.XName" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="be2ab-146">Этот метод предоставляет перегруженные методы, которые позволяют создавать <xref:System.Xml.Linq.XName> из развернутое имя XML.</span><span class="sxs-lookup"><span data-stu-id="be2ab-146">This method provides overloads that allow you to create an <xref:System.Xml.Linq.XName> from a expanded XML name.</span></span> <span data-ttu-id="be2ab-147">Можно создать <xref:System.Xml.Linq.XName> из строки в виде `{namespace}localname`, или из пространства имен и локального имени, указанного отдельно.</span><span class="sxs-lookup"><span data-stu-id="be2ab-147">You can create an <xref:System.Xml.Linq.XName> from a string in the form `{namespace}localname`, or from a namespace and a local name, specified separately.</span></span>  
  
 <span data-ttu-id="be2ab-148">Гораздо более часто применяемый и легкий способ создания <xref:System.Xml.Linq.XName> заключается в использовании неявное преобразование из строки.</span><span class="sxs-lookup"><span data-stu-id="be2ab-148">A much more common and easier way to create an <xref:System.Xml.Linq.XName> is to use the implicit conversion from string.</span></span> <span data-ttu-id="be2ab-149">Создать имя, которое находится в пространстве имен, распространенным подходом является использование перегрузки оператора сложения, которая позволяет объединять <xref:System.Xml.Linq.XNamespace> object и string.</span><span class="sxs-lookup"><span data-stu-id="be2ab-149">To create a name that is in a namespace, the common approach is to use the addition operator overload that allows you to combine an <xref:System.Xml.Linq.XNamespace> object and a string.</span></span>  
  
 <span data-ttu-id="be2ab-150">Дополнительные сведения и примеры см. в разделе [как: Создание документа с пространствами имен (C#) (LINQ to XML)](http://msdn.microsoft.com/library/af4a595e-ffb2-4187-a61b-d5ed71642c4c).</span><span class="sxs-lookup"><span data-stu-id="be2ab-150">For more information and examples, see [How to: Create a Document with Namespaces (C#) (LINQ to XML)](http://msdn.microsoft.com/library/af4a595e-ffb2-4187-a61b-d5ed71642c4c).</span></span>  
  
 <span data-ttu-id="be2ab-151">Дополнительные сведения об использовании пространства имен в Visual Basic см. в разделе [пространства имен в Visual Basic (LINQ to XML)](http://msdn.microsoft.com/library/10b7ba7b-518c-4f14-899f-892575d14dcc).</span><span class="sxs-lookup"><span data-stu-id="be2ab-151">For more information on using namespaces in Visual Basic, see [Namespaces in Visual Basic (LINQ to XML)](http://msdn.microsoft.com/library/10b7ba7b-518c-4f14-899f-892575d14dcc).</span></span>  
  
 <span data-ttu-id="be2ab-152">Поскольку <xref:System.Xml.Linq.XName> объекты разделены, если имеется существующий <xref:System.Xml.Linq.XName> в одно и то же имя, назначенного переменной будет ссылаться на существующие <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="be2ab-152">Because <xref:System.Xml.Linq.XName> objects are atomized, if there is an existing <xref:System.Xml.Linq.XName> with exactly the same name, the assigned variable will refer to the existing <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="be2ab-153">При отсутствии существующих <xref:System.Xml.Linq.XName>, новый один будет создана и инициализирована.</span><span class="sxs-lookup"><span data-stu-id="be2ab-153">If there is no existing <xref:System.Xml.Linq.XName>, a new one will be created and initialized.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XName Get (string expandedName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XName Get(string expandedName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.Get(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Get (expandedName As String) As XName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XName ^ Get(System::String ^ expandedName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XName</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expandedName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expandedName"><span data-ttu-id="be2ab-154">Строка <see cref="T:System.String" />, которая содержит развернутое имя XML в формате <c>{пространство_имен}локальное_имя</c>.</span><span class="sxs-lookup"><span data-stu-id="be2ab-154">A <see cref="T:System.String" /> that contains an expanded XML name in the format <c>{namespace}localname</c>.</span></span></param>
        <summary><span data-ttu-id="be2ab-155">Вызывает объект <see cref="T:System.Xml.Linq.XName" /> из развернутого имени.</span><span class="sxs-lookup"><span data-stu-id="be2ab-155">Gets an <see cref="T:System.Xml.Linq.XName" /> object from an expanded name.</span></span></summary>
        <returns><span data-ttu-id="be2ab-156">Объект <see cref="T:System.Xml.Linq.XName" /> сконструирован из развернутого имени.</span><span class="sxs-lookup"><span data-stu-id="be2ab-156">An <see cref="T:System.Xml.Linq.XName" /> object constructed from the expanded name.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="be2ab-157">Этот метод содержит перегрузки, которые позволяют создавать <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="be2ab-157">This method contains overloads that allow you to create an <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="be2ab-158">Вы можете создать на развернутое имя XML в виде `{namespace}localname`, или из пространства имен и локального имени, указанного отдельно.</span><span class="sxs-lookup"><span data-stu-id="be2ab-158">You can create it from a expanded XML name in the form `{namespace}localname`, or from a namespace and a local name, specified separately.</span></span>  
  
 <span data-ttu-id="be2ab-159">Гораздо более часто применяемый и легкий способ создания <xref:System.Xml.Linq.XName> заключается в использовании неявное преобразование из строки.</span><span class="sxs-lookup"><span data-stu-id="be2ab-159">A much more common and easier way to create an <xref:System.Xml.Linq.XName> is to use the implicit conversion from string.</span></span>  
  
 <span data-ttu-id="be2ab-160">Поскольку <xref:System.Xml.Linq.XName> разделены, если имеется существующий <xref:System.Xml.Linq.XName> в одно и то же имя, назначенного переменной будет ссылаться на существующие <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="be2ab-160">Because <xref:System.Xml.Linq.XName> are atomized, if there is an existing <xref:System.Xml.Linq.XName> with exactly the same name, the assigned variable will refer to the existing <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="be2ab-161">При отсутствии существующих <xref:System.Xml.Linq.XName>, новый один будет создана и инициализирована.</span><span class="sxs-lookup"><span data-stu-id="be2ab-161">If there is no existing <xref:System.Xml.Linq.XName>, a new one will be created and initialized.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="be2ab-162">В следующем примере показано использование этого метода.</span><span class="sxs-lookup"><span data-stu-id="be2ab-162">The following example shows the use of this method.</span></span>  
  
```csharp  
XName name = XName.Get("{http://www.adventure-works.com}Root");  
XElement el = new XElement(name, "content");  
Console.WriteLine(el);  
  
// This is the preferred approach for specifying the XName in the  
// constructor of XElement.  
XNamespace aw = "http://www.adventure-works.com";  
XElement el2 = new XElement(aw + "Root", "content");  
Console.WriteLine(el2);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim name As XName = XName.Get("{http://www.adventure-works.com}Root")  
        Dim el As XElement = New XElement(name, "content")  
        Console.WriteLine(el)  
  
        ' The preferred approach for specifying an XName in a namespace  
        ' for Visual Basic is to import a global namespace.  
        Dim el2 As XElement = <Root>content</Root>  
        Console.WriteLine(el2)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="be2ab-163">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="be2ab-163">This example produces the following output:</span></span>  
  
```  
<Root xmlns="http://www.adventure-works.com">content</Root>  
<Root xmlns="http://www.adventure-works.com">content</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XName Get (string localName, string namespaceName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XName Get(string localName, string namespaceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.Get(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Get (localName As String, namespaceName As String) As XName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XName ^ Get(System::String ^ localName, System::String ^ namespaceName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XName</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName"><span data-ttu-id="be2ab-164">Локальное (неопределенное) имя.</span><span class="sxs-lookup"><span data-stu-id="be2ab-164">A local (unqualified) name.</span></span></param>
        <param name="namespaceName"><span data-ttu-id="be2ab-165">Пространство имен XML.</span><span class="sxs-lookup"><span data-stu-id="be2ab-165">An XML namespace.</span></span></param>
        <summary><span data-ttu-id="be2ab-166">Вызывает объект <see cref="T:System.Xml.Linq.XName" /> из локального имени и пространства имен.</span><span class="sxs-lookup"><span data-stu-id="be2ab-166">Gets an <see cref="T:System.Xml.Linq.XName" /> object from a local name and a namespace.</span></span></summary>
        <returns><span data-ttu-id="be2ab-167">Объект <see cref="T:System.Xml.Linq.XName" />, созданный из указанного локального имени и пространства имен.</span><span class="sxs-lookup"><span data-stu-id="be2ab-167">An <see cref="T:System.Xml.Linq.XName" /> object created from the specified local name and namespace.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="be2ab-168">Этот метод содержит перегрузки, которые позволяют создавать <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="be2ab-168">This method contains overloads that allow you to create an <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="be2ab-169">Вы можете создать на развернутое имя XML в виде `{namespace}localname`, или из пространства имен и локального имени, указанного отдельно.</span><span class="sxs-lookup"><span data-stu-id="be2ab-169">You can create it from an expanded XML name in the form `{namespace}localname`, or from a namespace and a local name, specified separately.</span></span>  
  
 <span data-ttu-id="be2ab-170">Гораздо более часто применяемый и легкий способ создания <xref:System.Xml.Linq.XName> заключается в использовании неявное преобразование из строки.</span><span class="sxs-lookup"><span data-stu-id="be2ab-170">A much more common and easier way to create an <xref:System.Xml.Linq.XName> is to use the implicit conversion from string.</span></span>  
  
 <span data-ttu-id="be2ab-171">Поскольку <xref:System.Xml.Linq.XName> разделены, если имеется существующий <xref:System.Xml.Linq.XName> в одно и то же имя, назначенного переменной будет ссылаться на существующие <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="be2ab-171">Because <xref:System.Xml.Linq.XName> are atomized, if there is an existing <xref:System.Xml.Linq.XName> with exactly the same name, the assigned variable will refer to the existing <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="be2ab-172">При отсутствии существующих <xref:System.Xml.Linq.XName>, новый один будет создана и инициализирована.</span><span class="sxs-lookup"><span data-stu-id="be2ab-172">If there is no existing <xref:System.Xml.Linq.XName>, a new one will be created and initialized.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="be2ab-173">В следующем примере показано использование этого метода.</span><span class="sxs-lookup"><span data-stu-id="be2ab-173">The following example shows the use of this method.</span></span>  
  
```csharp  
XName name = XName.Get("Root", "http://www.adventure-works.com");  
XElement el = new XElement(name, "content");  
Console.WriteLine(el);  
  
// This is the preferred form.  
XNamespace aw = "http://www.adventure-works.com";  
XElement el2 = new XElement(aw + "Root", "content");  
Console.WriteLine(el2);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim name As XName = XName.Get("{http://www.adventure-works.com}Root")  
        Dim el As XElement = New XElement(name, "content")  
        Console.WriteLine(el)  
  
        ' The preferred approach for specifying an XName in a namespace  
        ' for Visual Basic is to import a global namespace.  
        Dim el2 As XElement = <Root>content</Root>  
        Console.WriteLine(el2)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="be2ab-174">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="be2ab-174">This example produces the following output:</span></span>  
  
```  
<Root xmlns="http://www.adventure-works.com">content</Root>  
<Root xmlns="http://www.adventure-works.com">content</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="be2ab-175">Возвращает хэш-код для данного объекта <see cref="T:System.Xml.Linq.XName" />.</span><span class="sxs-lookup"><span data-stu-id="be2ab-175">Gets a hash code for this <see cref="T:System.Xml.Linq.XName" />.</span></span></summary>
        <returns><span data-ttu-id="be2ab-176"><see cref="T:System.Int32" /> содержит хэш-код для <see cref="T:System.Xml.Linq.XName" />.</span><span class="sxs-lookup"><span data-stu-id="be2ab-176">An <see cref="T:System.Int32" /> that contains the hash code for the <see cref="T:System.Xml.Linq.XName" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="be2ab-177">Этот метод служит хэш-функцией для <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="be2ab-177">This method serves as a hash function for <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="be2ab-178">Можно использовать <xref:System.Xml.Linq.XName.GetHashCode%2A> в алгоритмах хэширования или в структурах данных, например в хэш-таблице.</span><span class="sxs-lookup"><span data-stu-id="be2ab-178">You can use <xref:System.Xml.Linq.XName.GetHashCode%2A> in hashing algorithms, or in data structures such as a hash table.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalName">
      <MemberSignature Language="C#" Value="public string LocalName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LocalName" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XName.LocalName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocalName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ LocalName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="be2ab-179">Вызывает локальную (неопределенную) часть имени.</span><span class="sxs-lookup"><span data-stu-id="be2ab-179">Gets the local (unqualified) part of the name.</span></span></summary>
        <value><span data-ttu-id="be2ab-180"><see cref="T:System.String" />, содержащий локальную (неопределенную) часть имени.</span><span class="sxs-lookup"><span data-stu-id="be2ab-180">A <see cref="T:System.String" /> that contains the local (unqualified) part of the name.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="be2ab-181">Это свойство гарантированно не будет `null`.</span><span class="sxs-lookup"><span data-stu-id="be2ab-181">This property is guaranteed to not be `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="be2ab-182">В следующем примере показано использование этого свойства.</span><span class="sxs-lookup"><span data-stu-id="be2ab-182">The following example shows the use of this property.</span></span>  
  
```csharp  
XNamespace ns = "http://www.adventure-works.com";  
XElement root = new XElement(ns + "Root", "content");  
Console.WriteLine(root.Name);  
Console.WriteLine(root.Name.LocalName);  
Console.WriteLine(root.Name.Namespace);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = <Root/>  
        Console.WriteLine(root.Name)  
        Console.WriteLine(root.Name.LocalName)  
        Console.WriteLine(root.Name.Namespace)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="be2ab-183">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="be2ab-183">This example produces the following output:</span></span>  
  
```  
{http://www.adventure-works.com}Root  
Root  
http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.Linq.XName.Namespace" />
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XNamespace Namespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Linq.XNamespace Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XName.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Namespace As XNamespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Linq::XNamespace ^ Namespace { System::Xml::Linq::XNamespace ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNamespace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="be2ab-184">Вызывает часть пространства имен полностью определенного имени.</span><span class="sxs-lookup"><span data-stu-id="be2ab-184">Gets the namespace part of the fully qualified name.</span></span></summary>
        <value><span data-ttu-id="be2ab-185"><see cref="T:System.Xml.Linq.XNamespace" />, содержит часть имени пространства имен.</span><span class="sxs-lookup"><span data-stu-id="be2ab-185">An <see cref="T:System.Xml.Linq.XNamespace" /> that contains the namespace part of the name.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="be2ab-186">Гарантируется, что свойство <xref:System.Xml.Linq.XName.Namespace%2A> не имеет значения `null`.</span><span class="sxs-lookup"><span data-stu-id="be2ab-186">The <xref:System.Xml.Linq.XName.Namespace%2A> property is guaranteed to not be `null`.</span></span> <span data-ttu-id="be2ab-187">Если <xref:System.Xml.Linq.XName> находится вне пространства имен, это свойство возвращает <xref:System.Xml.Linq.XNamespace.None%2A>.</span><span class="sxs-lookup"><span data-stu-id="be2ab-187">If an <xref:System.Xml.Linq.XName> is in no namespace, this property returns <xref:System.Xml.Linq.XNamespace.None%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="be2ab-188">В следующем примере показано использование этого свойства.</span><span class="sxs-lookup"><span data-stu-id="be2ab-188">The following example shows the use of this property.</span></span>  
  
```csharp  
XNamespace ns = "http://www.adventure-works.com";  
XElement root = new XElement(ns + "Root", "content");  
Console.WriteLine(root.Name);  
Console.WriteLine(root.Name.LocalName);  
Console.WriteLine(root.Name.Namespace);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = <Root/>  
        Console.WriteLine(root.Name)  
        Console.WriteLine(root.Name.LocalName)  
        Console.WriteLine(root.Name.Namespace)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="be2ab-189">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="be2ab-189">This example produces the following output:</span></span>  
  
```  
{http://www.adventure-works.com}Root  
Root  
http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NamespaceName">
      <MemberSignature Language="C#" Value="public string NamespaceName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NamespaceName" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XName.NamespaceName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NamespaceName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NamespaceName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="be2ab-190">Возвращает URI <see cref="T:System.Xml.Linq.XNamespace" /> для этого <see cref="T:System.Xml.Linq.XName" />.</span><span class="sxs-lookup"><span data-stu-id="be2ab-190">Returns the URI of the <see cref="T:System.Xml.Linq.XNamespace" /> for this <see cref="T:System.Xml.Linq.XName" />.</span></span></summary>
        <value><span data-ttu-id="be2ab-191">Возвращает URI <see cref="T:System.Xml.Linq.XNamespace" /> для этого <see cref="T:System.Xml.Linq.XName" />.</span><span class="sxs-lookup"><span data-stu-id="be2ab-191">The URI of the <see cref="T:System.Xml.Linq.XNamespace" /> for this <see cref="T:System.Xml.Linq.XName" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="be2ab-192">Это свойство предусмотрено для удобства для получения имени пространства имен из <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="be2ab-192">This is a convenience property to get the namespace name from an <xref:System.Xml.Linq.XName>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="be2ab-193">В этом примере создается элемент в пространстве имен, а затем выводит пространство имен.</span><span class="sxs-lookup"><span data-stu-id="be2ab-193">This example creates an element in a namespace, and then prints the element's namespace.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root");  
Console.WriteLine(root.Name.NamespaceName);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = <Root/>  
        Console.WriteLine(root.Name.NamespaceName)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="be2ab-194">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="be2ab-194">This example produces the following output:</span></span>  
  
```  
http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Xml.Linq.XName left, System.Xml.Linq.XName right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Xml.Linq.XName left, class System.Xml.Linq.XName right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.op_Equality(System.Xml.Linq.XName,System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As XName, right As XName) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Xml::Linq::XName ^ left, System::Xml::Linq::XName ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Xml.Linq.XName" />
        <Parameter Name="right" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="be2ab-195">Первый экземпляр <see cref="T:System.Xml.Linq.XName" /> для сравнения.</span><span class="sxs-lookup"><span data-stu-id="be2ab-195">The first <see cref="T:System.Xml.Linq.XName" /> to compare.</span></span></param>
        <param name="right"><span data-ttu-id="be2ab-196">Второй экземпляр <see cref="T:System.Xml.Linq.XName" /> для сравнения.</span><span class="sxs-lookup"><span data-stu-id="be2ab-196">The second <see cref="T:System.Xml.Linq.XName" /> to compare.</span></span></param>
        <summary><span data-ttu-id="be2ab-197">Возвращает значение, указывающее, равны ли два экземпляра <see cref="T:System.Xml.Linq.XName" />.</span><span class="sxs-lookup"><span data-stu-id="be2ab-197">Returns a value indicating whether two instances of <see cref="T:System.Xml.Linq.XName" /> are equal.</span></span></summary>
        <returns>
          <span data-ttu-id="be2ab-198"><see langword="true" />, если <paramref name="left" /> и <paramref name="right" /> равны; в ином случае — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="be2ab-198"><see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="be2ab-199">Перегрузки операторов `==` и `!=` включены для включения сравнений <xref:System.Xml.Linq.XName> и `string`, такие как`element.Name == "SomeElementName"`.</span><span class="sxs-lookup"><span data-stu-id="be2ab-199">The operator overloads `==` and `!=` are included to enable comparisons between <xref:System.Xml.Linq.XName> and a `string`, such as`element.Name == "SomeElementName"`.</span></span> <span data-ttu-id="be2ab-200">Предопределенная ссылка операторов равенства в C# требует, чтобы один операнд допускать преобразование к типу другого только через преобразования ссылки.</span><span class="sxs-lookup"><span data-stu-id="be2ab-200">The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only.</span></span> <span data-ttu-id="be2ab-201">Эти операторы не учитывают неявное преобразование из строки в <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="be2ab-201">These operators do not consider the implicit conversion from string to <xref:System.Xml.Linq.XName>.</span></span>  
  
## Examples  
 <span data-ttu-id="be2ab-202">Следующий пример показывает некоторые сравнения между <xref:System.Xml.Linq.XName> объекты и строки.</span><span class="sxs-lookup"><span data-stu-id="be2ab-202">The following example shows some comparisons between <xref:System.Xml.Linq.XName> objects and strings.</span></span>  
  
```csharp  
XName xn;  
xn = XName.Get("Root");  
Console.WriteLine(xn == "Root");  
  
xn = XName.Get("Root", "http://www.adventure-works.com");  
Console.WriteLine(xn == "{http://www.adventure-works.com}Root");  
  
XElement root = new XElement("Root", "content");  
Console.WriteLine(root.Name == "Root");  
```  
  
```vb  
Dim xn As XName  
xn = XName.Get("Root")  
Console.WriteLine(xn = "Root")  
  
xn = XName.Get("Root", "http://www.adventure-works.com")  
Console.WriteLine(xn = "{http://www.adventure-works.com}Root")  
  
Dim root As XElement = New XElement("Root", "content")  
Console.WriteLine(root.Name = "Root")  
```  
  
 <span data-ttu-id="be2ab-203">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="be2ab-203">This example produces the following output:</span></span>  
  
```  
True  
True  
True  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Xml.Linq.XName (string expandedName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Xml.Linq.XName op_Implicit(string expandedName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.op_Implicit(System.String)~System.Xml.Linq.XName" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (expandedName As String) As XName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Xml::Linq::XName ^(System::String ^ expandedName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XName</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expandedName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expandedName"><span data-ttu-id="be2ab-204">Строка, которая содержит развернутое имя XML в формате <c>{пространство_имен}локальное_имя</c>.</span><span class="sxs-lookup"><span data-stu-id="be2ab-204">A string that contains an expanded XML name in the format <c>{namespace}localname</c>.</span></span></param>
        <summary><span data-ttu-id="be2ab-205">Преобразует строку, отформатированную как развернутое имя XML (то есть <c>{пространство_имен}локальное_имя</c>), в объект <see cref="T:System.Xml.Linq.XName" />.</span><span class="sxs-lookup"><span data-stu-id="be2ab-205">Converts a string formatted as an expanded XML name (that is,<c>{namespace}localname</c>) to an <see cref="T:System.Xml.Linq.XName" /> object.</span></span></summary>
        <returns><span data-ttu-id="be2ab-206">Объект <see cref="T:System.Xml.Linq.XName" /> сконструирован из развернутого имени.</span><span class="sxs-lookup"><span data-stu-id="be2ab-206">An <see cref="T:System.Xml.Linq.XName" /> object constructed from the expanded name.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="be2ab-207">Вы используете этот неявный оператор при создании <xref:System.Xml.Linq.XElement> или <xref:System.Xml.Linq.XAttribute> путем передачи строки в соответствующий конструктор.</span><span class="sxs-lookup"><span data-stu-id="be2ab-207">You are using this implicit operator when you create an <xref:System.Xml.Linq.XElement> or <xref:System.Xml.Linq.XAttribute> by passing a string to the appropriate constructor.</span></span>  
  
## Examples  
 <span data-ttu-id="be2ab-208">В следующем примере создается <xref:System.Xml.Linq.XName> необходимо назначить строку к нему, который вызывает этот неявный оператор преобразования.</span><span class="sxs-lookup"><span data-stu-id="be2ab-208">The following example creates an <xref:System.Xml.Linq.XName> by assigning a string to it, which invokes this implicit conversion operator.</span></span>  
  
```csharp  
XElement el = new XElement("{http://www.adventure-works.com}Root", "content");  
Console.WriteLine(el);  
  
// The preferred approach is to initialize an XNamespace object  
// and use the overload of the addition operator.  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root", "content");  
Console.WriteLine(root);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim el As XElement = New XElement("{http://www.adventure-works.com}Root", "content")  
        Console.WriteLine(el)  
  
        ' The preferred approach is to import a global namespace and   
        ' use an XML literal.  
        Dim root As XElement = <Root>content</Root>  
        Console.WriteLine(root)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="be2ab-209">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="be2ab-209">This example produces the following output:</span></span>  
  
```  
<Root xmlns="http://www.adventure-works.com">content</Root>  
<Root xmlns="http://www.adventure-works.com">content</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Xml.Linq.XName left, System.Xml.Linq.XName right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Xml.Linq.XName left, class System.Xml.Linq.XName right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.op_Inequality(System.Xml.Linq.XName,System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As XName, right As XName) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Xml::Linq::XName ^ left, System::Xml::Linq::XName ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Xml.Linq.XName" />
        <Parameter Name="right" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="be2ab-210">Первый экземпляр <see cref="T:System.Xml.Linq.XName" /> для сравнения.</span><span class="sxs-lookup"><span data-stu-id="be2ab-210">The first <see cref="T:System.Xml.Linq.XName" /> to compare.</span></span></param>
        <param name="right"><span data-ttu-id="be2ab-211">Второй экземпляр <see cref="T:System.Xml.Linq.XName" /> для сравнения.</span><span class="sxs-lookup"><span data-stu-id="be2ab-211">The second <see cref="T:System.Xml.Linq.XName" /> to compare.</span></span></param>
        <summary><span data-ttu-id="be2ab-212">Возвращает значение, указывающее, являются ли два экземпляра <see cref="T:System.Xml.Linq.XName" /> неравными.</span><span class="sxs-lookup"><span data-stu-id="be2ab-212">Returns a value indicating whether two instances of <see cref="T:System.Xml.Linq.XName" /> are not equal.</span></span></summary>
        <returns>
          <span data-ttu-id="be2ab-213"><see langword="true" />, если <paramref name="left" /> и <paramref name="right" /> не равны; в ином случае — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="be2ab-213"><see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="be2ab-214">Перегрузки операторов `==` и `!=` включены для включения сравнений <xref:System.Xml.Linq.XName> и строку, например`element.Name == "SomeElementName"`.</span><span class="sxs-lookup"><span data-stu-id="be2ab-214">The operator overloads `==` and `!=` are included to enable comparisons between <xref:System.Xml.Linq.XName> and a string, such as`element.Name == "SomeElementName"`.</span></span> <span data-ttu-id="be2ab-215">Предопределенная ссылка операторов равенства в C# требует, чтобы один операнд допускать преобразование к типу другого только через преобразования ссылки.</span><span class="sxs-lookup"><span data-stu-id="be2ab-215">The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only.</span></span> <span data-ttu-id="be2ab-216">Эти операторы не учитывают неявное преобразование из строки в <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="be2ab-216">These operators do not consider the implicit conversion from string to <xref:System.Xml.Linq.XName>.</span></span>  
  
## Examples  
 <span data-ttu-id="be2ab-217">В следующем примере C# сравнивают <xref:System.Xml.Linq.XName> объекта в строку, которая вызывает этот оператор.</span><span class="sxs-lookup"><span data-stu-id="be2ab-217">The following C# example compares an <xref:System.Xml.Linq.XName> object to a string, which invokes this operator.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root", "content");  
  
Console.WriteLine(root.Name != "{http://www.adventure-works.com}Root");  
  
// the following is the preferred idiom  
Console.WriteLine(root.Name != aw + "Root");  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = <Root>content</Root>  
        Console.WriteLine(root.Name <> "{http://www.adventure-works.com}Root")  
  
        ' the following is the preferred idiom  
        Console.WriteLine(root.Name <> GetXmlNamespace() + "Root")  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="be2ab-218">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="be2ab-218">This example produces the following output:</span></span>  
  
```  
False  
False  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IEquatable&lt;System.Xml.Linq.XName&gt;.Equals">
      <MemberSignature Language="C#" Value="bool IEquatable&lt;XName&gt;.Equals (System.Xml.Linq.XName other);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IEquatable&lt;System.Xml.Linq.XName&gt;.Equals(class System.Xml.Linq.XName other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.System#IEquatable&lt;System#Xml#Linq#XName&gt;#Equals(System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Function Equals (other As XName) As Boolean Implements IEquatable(Of XName).Equals" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.IEquatable&lt;System.Xml.Linq.XName&gt;.Equals(System::Xml::Linq::XName ^ other) = IEquatable&lt;System::Xml::Linq::XName ^&gt;::Equals;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="be2ab-219">Объект <see cref="T:System.Xml.Linq.XName" /> для сравнения с данным объектом <see cref="T:System.Xml.Linq.XName" />.</span><span class="sxs-lookup"><span data-stu-id="be2ab-219">The <see cref="T:System.Xml.Linq.XName" /> to compare with this <see cref="T:System.Xml.Linq.XName" />.</span></span></param>
        <summary><span data-ttu-id="be2ab-220">Показывает, является ли текущий <see cref="T:System.Xml.Linq.XName" /> равным указанному <see cref="T:System.Xml.Linq.XName" />.</span><span class="sxs-lookup"><span data-stu-id="be2ab-220">Indicates whether the current <see cref="T:System.Xml.Linq.XName" /> is equal to the specified <see cref="T:System.Xml.Linq.XName" />.</span></span></summary>
        <returns>
          <span data-ttu-id="be2ab-221"><see langword="true" />, если этот <see cref="T:System.Xml.Linq.XName" /> равен указанному <see cref="T:System.Xml.Linq.XName" />, в ином случае — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="be2ab-221"><see langword="true" /> if this <see cref="T:System.Xml.Linq.XName" /> is equal to the specified <see cref="T:System.Xml.Linq.XName" />, otherwise <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="be2ab-222">Объект <see cref="T:System.Runtime.Serialization.SerializationInfo" /> для заполнения данными.</span><span class="sxs-lookup"><span data-stu-id="be2ab-222">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</span></span></param>
        <param name="context"><span data-ttu-id="be2ab-223">Конечный объект (см. <see cref="T:System.Runtime.Serialization.StreamingContext" />) для этой сериализации.</span><span class="sxs-lookup"><span data-stu-id="be2ab-223">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.</span></span></param>
        <summary><span data-ttu-id="be2ab-224">Заполняет объект <see cref="T:System.Runtime.Serialization.SerializationInfo" /> данными, необходимыми для сериализации целевого объекта.</span><span class="sxs-lookup"><span data-stu-id="be2ab-224">Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data required to serialize the target object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="be2ab-225">Этот метод используется внутренне для сериализации графов объектов, содержащих LINQ для объектов XML.</span><span class="sxs-lookup"><span data-stu-id="be2ab-225">This method is used internally to serialize object graphs that contain LINQ to XML objects.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="be2ab-226">Возвращает развернутое имя XML в формате <c>{пространство_имен}локальное_имя</c>.</span><span class="sxs-lookup"><span data-stu-id="be2ab-226">Returns the expanded XML name in the format <c>{namespace}localname</c>.</span></span></summary>
        <returns><span data-ttu-id="be2ab-227">Строка <see cref="T:System.String" />, которая содержит развернутое имя XML в формате <c>{пространство_имен}локальное_имя</c>.</span><span class="sxs-lookup"><span data-stu-id="be2ab-227">A <see cref="T:System.String" /> that contains the expanded XML name in the format <c>{namespace}localname</c>.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="be2ab-228">В следующем примере вызывается <xref:System.Console.WriteLine%2A>, передав <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="be2ab-228">The following example calls <xref:System.Console.WriteLine%2A>, passing an <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="be2ab-229">В результате <xref:System.Xml.Linq.XName.ToString%2A> вызываемого метода.</span><span class="sxs-lookup"><span data-stu-id="be2ab-229">This causes the <xref:System.Xml.Linq.XName.ToString%2A> method to be called.</span></span>  
  
```csharp  
XNamespace ns = "http://www.adventure-works.com";  
XElement root = new XElement(ns + "Root", "content");  
Console.WriteLine(root.Name);  
Console.WriteLine(root.Name.LocalName);  
Console.WriteLine(root.Name.Namespace);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = <Root>content</Root>  
        Console.WriteLine(root.Name)  
        Console.WriteLine(root.Name.LocalName)  
        Console.WriteLine(root.Name.Namespace)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="be2ab-230">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="be2ab-230">This example produces the following output:</span></span>  
  
```  
{http://www.adventure-works.com}Root  
Root  
http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>