<Type Name="XNamespace" FullName="System.Xml.Linq.XNamespace">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="21788161f9433ed2fde6dfdb4b004f6ca2b6edc4" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37486439" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class XNamespace" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit XNamespace extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Linq.XNamespace" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class XNamespace" />
  <TypeSignature Language="C++ CLI" Value="public ref class XNamespace sealed" />
  <TypeSignature Language="F#" Value="type XNamespace = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XDocument</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.Linq</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="f2f0c-101">Представляет пространство имен XML.</span>
      <span class="sxs-lookup">
        <span data-stu-id="f2f0c-101">Represents an XML namespace.</span>
      </span>
      <span data-ttu-id="f2f0c-102">Этот класс не наследуется.</span>
      <span class="sxs-lookup">
        <span data-stu-id="f2f0c-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2f0c-103">Этот класс представляет конструкции XML, пространств имен.</span><span class="sxs-lookup"><span data-stu-id="f2f0c-103">This class represents the XML construct of namespaces.</span></span>  
  
 <span data-ttu-id="f2f0c-104">Каждый <xref:System.Xml.Linq.XName> содержит <xref:System.Xml.Linq.XNamespace>.</span><span class="sxs-lookup"><span data-stu-id="f2f0c-104">Every <xref:System.Xml.Linq.XName> contains an <xref:System.Xml.Linq.XNamespace>.</span></span> <span data-ttu-id="f2f0c-105">Даже если элемент не является пространством имен, имя элемента <xref:System.Xml.Linq.XName> все же содержит пространство имен, <xref:System.Xml.Linq.XNamespace.None%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="f2f0c-105">Even if an element is not in a namespace, the element's <xref:System.Xml.Linq.XName> still contains a namespace, <xref:System.Xml.Linq.XNamespace.None%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="f2f0c-106">Гарантируется, что свойство <xref:System.Xml.Linq.XName.Namespace%2A?displayProperty=nameWithType> не имеет значения `null`.</span><span class="sxs-lookup"><span data-stu-id="f2f0c-106">The <xref:System.Xml.Linq.XName.Namespace%2A?displayProperty=nameWithType> property is guaranteed to not be `null`.</span></span>  
  
## <a name="creating-an-xnamespace-object"></a><span data-ttu-id="f2f0c-107">Создание объекта XNamespace</span><span class="sxs-lookup"><span data-stu-id="f2f0c-107">Creating an XNamespace Object</span></span>  
 <span data-ttu-id="f2f0c-108">Наиболее распространенный способ создания <xref:System.Xml.Linq.XNamespace> объект является просто назначим ему строку к нему.</span><span class="sxs-lookup"><span data-stu-id="f2f0c-108">The most common way to create an <xref:System.Xml.Linq.XNamespace> object is to simply assign a string to it.</span></span> <span data-ttu-id="f2f0c-109">Затем можно объединить пространство имен с локальным именем, используя переопределение оператора сложения.</span><span class="sxs-lookup"><span data-stu-id="f2f0c-109">You can then combine the namespace with a local name by using the override of the addition operator.</span></span> <span data-ttu-id="f2f0c-110">В следующем примере показано эту идиому:</span><span class="sxs-lookup"><span data-stu-id="f2f0c-110">The following example shows this idiom:</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root", "Content");  
Console.WriteLine(root);  
```  
  
```vb  
Dim aw As XNamespace = "http://www.adventure-works.com"  
Dim root As XElement = New XElement(aw + "Root", "Content")  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="f2f0c-111">Тем не менее в Visual Basic обычно объявляется глобальное значение по умолчанию пространство имен, как показано ниже:</span><span class="sxs-lookup"><span data-stu-id="f2f0c-111">However, in Visual Basic, you would typically declare a global default namespace, as follows:</span></span>  
  
```vb  
Imports <xmlns='http://www.adventure-works.com'>  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = _  
            <Root>Content</Root>  
        Console.WriteLine(root)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="f2f0c-112">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="f2f0c-112">This example produces the following output:</span></span>  
  
```xml  
<Root xmlns="http://www.adventure-works.com">Content</Root>  
```  
  
 <span data-ttu-id="f2f0c-113">Назначив строку в <xref:System.Xml.Linq.XNamespace> использует неявное преобразование из <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="f2f0c-113">Assigning a string to an <xref:System.Xml.Linq.XNamespace> uses the implicit conversion from <xref:System.String>.</span></span>  
  
 <span data-ttu-id="f2f0c-114">См. в разделе [как: Создание документа с пространствами имен (C#) (LINQ to XML)](http://msdn.microsoft.com/library/af4a595e-ffb2-4187-a61b-d5ed71642c4c) Дополнительные сведения и примеры.</span><span class="sxs-lookup"><span data-stu-id="f2f0c-114">See [How to: Create a Document with Namespaces (C#) (LINQ to XML)](http://msdn.microsoft.com/library/af4a595e-ffb2-4187-a61b-d5ed71642c4c) for more information and examples.</span></span>  
  
 <span data-ttu-id="f2f0c-115">См. в разделе [пространств имен в Visual Basic (LINQ to XML)](http://msdn.microsoft.com/library/10b7ba7b-518c-4f14-899f-892575d14dcc) Дополнительные сведения об использовании пространства имен в Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="f2f0c-115">See [Namespaces in Visual Basic (LINQ to XML)](http://msdn.microsoft.com/library/10b7ba7b-518c-4f14-899f-892575d14dcc) for more information on using namespaces in Visual Basic.</span></span>  
  
## <a name="controlling-namespace-prefixes"></a><span data-ttu-id="f2f0c-116">Управление префиксами пространства имен</span><span class="sxs-lookup"><span data-stu-id="f2f0c-116">Controlling Namespace Prefixes</span></span>  
 <span data-ttu-id="f2f0c-117">Если создать атрибут, объявляющий пространство имен, префикс, указанный в атрибуте сохраняется в сериализованный XML.</span><span class="sxs-lookup"><span data-stu-id="f2f0c-117">If you create an attribute that declares a namespace, the prefix specified in the attribute will be persisted in the serialized XML.</span></span> <span data-ttu-id="f2f0c-118">Создать атрибут, объявляющий пространство имен с префиксом, можно, указав для имени атрибута пространство имен <xref:System.Xml.Linq.XNamespace.Xmlns%2A>, а само имя атрибута в качестве префикса пространства имен.</span><span class="sxs-lookup"><span data-stu-id="f2f0c-118">To create an attribute that declares a namespace with a prefix, you create an attribute where the namespace of the name of the attribute is <xref:System.Xml.Linq.XNamespace.Xmlns%2A>, and the name of the attribute is the namespace prefix.</span></span> <span data-ttu-id="f2f0c-119">Значение атрибута представляет собой URI пространства имен.</span><span class="sxs-lookup"><span data-stu-id="f2f0c-119">The value of the attribute is the URI of the namespace.</span></span> <span data-ttu-id="f2f0c-120">В следующем примере показано эту идиому:</span><span class="sxs-lookup"><span data-stu-id="f2f0c-120">The following example shows this idiom:</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root",  
    new XAttribute(XNamespace.Xmlns + "aw", "http://www.adventure-works.com"),  
    "Content");  
Console.WriteLine(root);  
```  
  
```vb  
Dim aw As XNamespace = "http://www.adventure-works.com"  
Dim root As XElement = New XElement(aw + "Root", _  
    New XAttribute(XNamespace.Xmlns + "aw", "http://www.adventure-works.com"), _  
    "Content")  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="f2f0c-121">В Visual Basic вместо создания узла пространства имен управлять префиксами пространств имен, обычно используйте объявление глобального пространства имен:</span><span class="sxs-lookup"><span data-stu-id="f2f0c-121">In Visual Basic, instead of creating a namespace node to control namespace prefixes, you would typically use a global namespace declaration:</span></span>  
  
```vb  
Imports <xmlns:aw='http://www.adventure-works.com'>  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = _  
            <aw:Root>Content</aw:Root>  
        Console.WriteLine(root)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="f2f0c-122">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="f2f0c-122">This example produces the following output:</span></span>  
  
```  
<aw:Root xmlns:aw="http://www.adventure-works.com">Content</aw:Root>  
```  
  
 <span data-ttu-id="f2f0c-123">Дополнительные сведения см. в разделе [как: элемент управления префиксы пространств имен (C#) (LINQ to XML)](http://msdn.microsoft.com/library/a40d4479-f1b9-4d8b-8623-445648caed28).</span><span class="sxs-lookup"><span data-stu-id="f2f0c-123">For more information, see [How to: Control Namespace Prefixes (C#) (LINQ to XML)](http://msdn.microsoft.com/library/a40d4479-f1b9-4d8b-8623-445648caed28).</span></span>  
  
## <a name="creating-a-default-namespace"></a><span data-ttu-id="f2f0c-124">При создании пространства имен по умолчанию</span><span class="sxs-lookup"><span data-stu-id="f2f0c-124">Creating a Default Namespace</span></span>  
 <span data-ttu-id="f2f0c-125">При конструировании атрибута, который будет входить пространство имен, если имя атрибута имеет особое значение «xmlns», затем при сериализации XML-дерева, пространство имен будет объявлено как пространство имен по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="f2f0c-125">When constructing an attribute that will be a namespace, if the attribute name has the special value of "xmlns", then when the XML tree is serialized, the namespace will be declared as the default namespace.</span></span> <span data-ttu-id="f2f0c-126">Специальный атрибут с именем «xmlns», сам не в пространстве имен.</span><span class="sxs-lookup"><span data-stu-id="f2f0c-126">The special attribute with the name of "xmlns" itself is not in any namespace.</span></span> <span data-ttu-id="f2f0c-127">Значение атрибута является URI пространства имен.</span><span class="sxs-lookup"><span data-stu-id="f2f0c-127">The value of the attribute is the namespace URI.</span></span>  
  
 <span data-ttu-id="f2f0c-128">В следующем примере создается XML-дерева, содержащего атрибут, объявленный таким образом, что пространство имен станет пространством имен по умолчанию:</span><span class="sxs-lookup"><span data-stu-id="f2f0c-128">The following example creates an XML tree that contains an attribute that is declared in such a way that the namespace will become the default namespace:</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root",  
    new XAttribute("xmlns", "http://www.adventure-works.com"),  
    new XElement(aw + "Child", "content")  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim aw As XNamespace = "http://www.adventure-works.com"  
Dim root As XElement = New XElement(aw + "Root", _  
    New XAttribute("xmlns", "http://www.adventure-works.com"), _  
    New XElement(aw + "Child", "content") _  
)  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="f2f0c-129">В Visual Basic вместо создания узла пространства имен, чтобы создать пространство имен по умолчанию, обычно используется глобальное значение по умолчанию объявления пространства имен:</span><span class="sxs-lookup"><span data-stu-id="f2f0c-129">In Visual Basic, instead of creating a namespace node to create a default namespace, you would typically use a global default namespace declaration:</span></span>  
  
```vb  
Imports <xmlns='http://www.adventure-works.com'>  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = _  
            <Root>  
                <Child>content</Child>  
            </Root>  
        Console.WriteLine(root)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="f2f0c-130">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="f2f0c-130">This example produces the following output:</span></span>  
  
```  
<Root xmlns="http://www.adventure-works.com">  
  <Child>content</Child>  
</Root>  
```  
  
## <a name="xnamespace-atomization"></a><span data-ttu-id="f2f0c-131">Атомизация XNamespace</span><span class="sxs-lookup"><span data-stu-id="f2f0c-131">XNamespace Atomization</span></span>  
 <span data-ttu-id="f2f0c-132">Объекты <xref:System.Xml.Linq.XNamespace> гарантированно атомизированы; иными словами, если два объекта <xref:System.Xml.Linq.XNamespace> имеют идентичный идентифиактор URI, они будут разделять один и тот же экземпляр.</span><span class="sxs-lookup"><span data-stu-id="f2f0c-132"><xref:System.Xml.Linq.XNamespace> objects are guaranteed to be atomized; that is, if two <xref:System.Xml.Linq.XNamespace> objects have exactly the same URI, they will share the same instance.</span></span> <span data-ttu-id="f2f0c-133">Операторы равенства и сравнения предоставляются явным образом для этой цели.</span><span class="sxs-lookup"><span data-stu-id="f2f0c-133">The equality and comparison operators are provided explicitly for this purpose.</span></span>  
  
## <a name="using-expanded-names"></a><span data-ttu-id="f2f0c-134">С помощью развернутых имен</span><span class="sxs-lookup"><span data-stu-id="f2f0c-134">Using Expanded Names</span></span>  
 <span data-ttu-id="f2f0c-135">Еще один способ указать пространство имен и локального имени является использование развернутое имя в форме `{namespace}name`:</span><span class="sxs-lookup"><span data-stu-id="f2f0c-135">Another way to specify a namespace and a local name is to use an expanded name in the form `{namespace}name`:</span></span>  
  
```csharp  
XElement e = new XElement("{http://www.adventure-works.com}Root",  
     new XAttribute("{http://www.adventure-works.com}Att", "content")  
);  
Console.WriteLine(e);  
```  
  
```vb  
Dim e As XElement = New XElement("{http://www.adventure-works.com}Root", _  
     New XAttribute("{http://www.adventure-works.com}Att", "content") _  
)  
Console.WriteLine(e)  
```  
  
 <span data-ttu-id="f2f0c-136">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="f2f0c-136">This example produces the following output:</span></span>  
  
```  
<Root p1:Att="content" xmlns:p1="http://www.adventure-works.com" xmlns="http://www.adventure-works.com" />  
```  
  
 <span data-ttu-id="f2f0c-137">Этот подход влияет на производительность.</span><span class="sxs-lookup"><span data-stu-id="f2f0c-137">This approach has performance implications.</span></span> <span data-ttu-id="f2f0c-138">Всякий раз при передаче [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] строки, содержащей развернутое имя, система должна проанализировать это имя, обнаружить атомизированное пространство имен и атомизированное имя.</span><span class="sxs-lookup"><span data-stu-id="f2f0c-138">Each time that you pass a string that contains an expanded name to [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)], it must parse the name, find the atomized namespace, and find the atomized name.</span></span> <span data-ttu-id="f2f0c-139">Этот процесс требует затрат процессорного времени.</span><span class="sxs-lookup"><span data-stu-id="f2f0c-139">This process takes CPU time.</span></span> <span data-ttu-id="f2f0c-140">Если производительность является важным фактором, может потребоваться использовать другой подход.</span><span class="sxs-lookup"><span data-stu-id="f2f0c-140">If performance is important, you may want to use a different approach.</span></span>  
  
 <span data-ttu-id="f2f0c-141">С помощью Visual Basic рекомендуется использовать XML-литералы, которые не предусматривают использование развернутых имен.</span><span class="sxs-lookup"><span data-stu-id="f2f0c-141">With Visual Basic, the recommended approach is to use XML literals, which does not involve the use of expanded names.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="xNamespace.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="f2f0c-142">Объект <see cref="T:System.Xml.Linq.XNamespace" /> для сравнения с текущим объектом <see cref="T:System.Xml.Linq.XNamespace" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2f0c-142">The <see cref="T:System.Xml.Linq.XNamespace" /> to compare to the current <see cref="T:System.Xml.Linq.XNamespace" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2f0c-143">Определяет, равен ли указанный объект <see cref="T:System.Xml.Linq.XNamespace" /> текущему объекту <see cref="T:System.Xml.Linq.XNamespace" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2f0c-143">Determines whether the specified <see cref="T:System.Xml.Linq.XNamespace" /> is equal to the current <see cref="T:System.Xml.Linq.XNamespace" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f2f0c-144">
            <see cref="T:System.Boolean" /> показывает, является ли указанное <see cref="T:System.Xml.Linq.XNamespace" /> эквивалентным текущему <see cref="T:System.Xml.Linq.XNamespace" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2f0c-144">A <see cref="T:System.Boolean" /> that indicates whether the specified <see cref="T:System.Xml.Linq.XNamespace" /> is equal to the current <see cref="T:System.Xml.Linq.XNamespace" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2f0c-145">Для двух <xref:System.Xml.Linq.XNamespace> объекты равны, они должны иметь такой же URI.</span><span class="sxs-lookup"><span data-stu-id="f2f0c-145">For two <xref:System.Xml.Linq.XNamespace> objects to be equal, they must have the same URI.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2f0c-146">В следующем примере сравниваются два пространства имен, которые ссылаются на тот же URI.</span><span class="sxs-lookup"><span data-stu-id="f2f0c-146">The following example compares two namespaces that refer to the same URI.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
Console.WriteLine(aw == "http://www.adventure-works.com");  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Console.WriteLine(GetXmlNamespace(aw) = "http://www.adventure-works.com")  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="f2f0c-147">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="f2f0c-147">This example produces the following output:</span></span>  
  
```  
True  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XNamespace Get (string namespaceName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XNamespace Get(string namespaceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.Get(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Get (namespaceName As String) As XNamespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XNamespace ^ Get(System::String ^ namespaceName);" />
      <MemberSignature Language="F#" Value="static member Get : string -&gt; System.Xml.Linq.XNamespace" Usage="System.Xml.Linq.XNamespace.Get namespaceName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNamespace</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="namespaceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="namespaceName">
          <span data-ttu-id="f2f0c-148">
            <see cref="T:System.String" /> содержит пространство имен URI.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2f0c-148">A <see cref="T:System.String" /> that contains a namespace URI.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2f0c-149">Вызывает <see cref="T:System.Xml.Linq.XNamespace" /> для указанного Uniform Resource Identifier (URI).</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2f0c-149">Gets an <see cref="T:System.Xml.Linq.XNamespace" /> for the specified Uniform Resource Identifier (URI).</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f2f0c-150">
            <see cref="T:System.Xml.Linq.XNamespace" /> создан из указанного URI.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2f0c-150">An <see cref="T:System.Xml.Linq.XNamespace" /> created from the specified URI.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2f0c-151">Возвращенный <xref:System.Xml.Linq.XNamespace> объекта гарантированно atomic (он является единственным в системе для этого отдельного URI).</span><span class="sxs-lookup"><span data-stu-id="f2f0c-151">The returned <xref:System.Xml.Linq.XNamespace> object is guaranteed to be atomic (that is, it is the only one in the system for that particular URI).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2f0c-152">В следующем примере возвращается <xref:System.Xml.Linq.XNamespace> из указанного URI.</span><span class="sxs-lookup"><span data-stu-id="f2f0c-152">The following example gets a <xref:System.Xml.Linq.XNamespace> from a specified URI.</span></span>  
  
```csharp  
XNamespace aw = XNamespace.Get("http://www.adventure-works.com");  
  
// This is the preferred form.  
XNamespace aw2 = "http://www.adventure-works.com";  
Console.WriteLine(aw);  
Console.WriteLine(aw2);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = XNamespace.Get("http://www.adventure-works.com")  
  
        ' This is the preferred form.  
        Dim aw2 As XNamespace = GetXmlNamespace(aw)  
        Console.WriteLine(aw)  
        Console.WriteLine(aw2)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="f2f0c-153">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="f2f0c-153">This example produces the following output:</span></span>  
  
```  
http://www.adventure-works.com  
http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="xNamespace.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f2f0c-154">Возвращает хэш-код для данного объекта <see cref="T:System.Xml.Linq.XNamespace" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2f0c-154">Gets a hash code for this <see cref="T:System.Xml.Linq.XNamespace" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f2f0c-155">
            <see cref="T:System.Int32" /> содержит хэш-код для <see cref="T:System.Xml.Linq.XNamespace" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2f0c-155">An <see cref="T:System.Int32" /> that contains the hash code for the <see cref="T:System.Xml.Linq.XNamespace" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2f0c-156">Этот метод служит хэш-функцией <xref:System.Xml.Linq.XNamespace>.</span><span class="sxs-lookup"><span data-stu-id="f2f0c-156">This method serves as a hash function for <xref:System.Xml.Linq.XNamespace>.</span></span> <span data-ttu-id="f2f0c-157">Можно использовать <xref:System.Xml.Linq.XNamespace.GetHashCode%2A> в алгоритмах и структурах данных подобных хэш-таблицу хэширования.</span><span class="sxs-lookup"><span data-stu-id="f2f0c-157">You can use <xref:System.Xml.Linq.XNamespace.GetHashCode%2A> in hashing algorithms and data structures like a hash table.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetName">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XName GetName (string localName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Linq.XName GetName(string localName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.GetName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetName (localName As String) As XName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Linq::XName ^ GetName(System::String ^ localName);" />
      <MemberSignature Language="F#" Value="member this.GetName : string -&gt; System.Xml.Linq.XName" Usage="xNamespace.GetName localName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XName</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">
          <span data-ttu-id="f2f0c-158">
            <see cref="T:System.String" /> содержит локальное имя.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2f0c-158">A <see cref="T:System.String" /> that contains a local name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2f0c-159">Возвращает объект <see cref="T:System.Xml.Linq.XName" />, созданный из этого<see cref="T:System.Xml.Linq.XNamespace" />, и указанное локальное имя.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2f0c-159">Returns an <see cref="T:System.Xml.Linq.XName" /> object created from this <see cref="T:System.Xml.Linq.XNamespace" /> and the specified local name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f2f0c-160">
            <see cref="T:System.Xml.Linq.XName" />, созданный из этого  <see cref="T:System.Xml.Linq.XNamespace" />, и указанное локальное имя.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2f0c-160">An <see cref="T:System.Xml.Linq.XName" /> created from this <see cref="T:System.Xml.Linq.XNamespace" /> and the specified local name.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2f0c-161">Возвращенный <xref:System.Xml.Linq.XName> объекта гарантированно атомарной (то есть является единственным в системе для этого конкретного развернутого имени).</span><span class="sxs-lookup"><span data-stu-id="f2f0c-161">The returned <xref:System.Xml.Linq.XName> object is guaranteed to be atomic (that is, it is the only one in the system for a specific expanded name).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2f0c-162">В следующем примере используется это свойство для извлечения <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="f2f0c-162">The following example uses this property to retrieve an <xref:System.Xml.Linq.XName>.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XName name = aw.GetName("Root");  
Console.WriteLine("{0}", name);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = GetXmlNamespace(aw)  
        Dim name As XName = aw.GetName("Root")  
        Console.WriteLine("{0}", name)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="f2f0c-163">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="f2f0c-163">This example produces the following output:</span></span>  
  
```  
{http://www.adventure-works.com}Root  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NamespaceName">
      <MemberSignature Language="C#" Value="public string NamespaceName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NamespaceName" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XNamespace.NamespaceName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NamespaceName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NamespaceName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NamespaceName : string" Usage="System.Xml.Linq.XNamespace.NamespaceName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f2f0c-164">Вызывает Uniform Resource Identifier (URI) этого пространства имен.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2f0c-164">Gets the Uniform Resource Identifier (URI) of this namespace.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f2f0c-165">
            <see cref="T:System.String" /> содержит URI пространства имен.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2f0c-165">A <see cref="T:System.String" /> that contains the URI of the namespace.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f2f0c-166">В следующем примере показано, как использовать это свойство:</span><span class="sxs-lookup"><span data-stu-id="f2f0c-166">The following example shows how to use this property:</span></span>  
  
```csharp  
string markup =  
@"<aw:Root  
    xmlns:aw='http://www.adventure-works.com'/>";  
XElement root = XElement.Parse(markup);  
Console.WriteLine(root.Name.Namespace.NamespaceName);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = GetXmlNamespace(aw)  
        Dim root As XElement = <aw:Root/>  
        Console.WriteLine(root.Name.Namespace.NamespaceName)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="f2f0c-167">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="f2f0c-167">This example produces the following output:</span></span>  
  
```  
http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XNamespace None { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Xml.Linq.XNamespace None" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XNamespace.None" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property None As XNamespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Xml::Linq::XNamespace ^ None { System::Xml::Linq::XNamespace ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.None : System.Xml.Linq.XNamespace" Usage="System.Xml.Linq.XNamespace.None" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNamespace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f2f0c-168">Вызывает объект <see cref="T:System.Xml.Linq.XNamespace" />, не соответствующий какому-либо пространству имен.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2f0c-168">Gets the <see cref="T:System.Xml.Linq.XNamespace" /> object that corresponds to no namespace.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f2f0c-169">
            <see cref="T:System.Xml.Linq.XNamespace" /> не соответствует пространству имен.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2f0c-169">The <see cref="T:System.Xml.Linq.XNamespace" /> that corresponds to no namespace.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2f0c-170">Если элемент или атрибут вне пространства имен, его пространство имен будет присвоено пространство имен, возвращаемый этим свойством.</span><span class="sxs-lookup"><span data-stu-id="f2f0c-170">If an element or attribute is in no namespace, its namespace will be set to the namespace returned by this property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2f0c-171">В следующем примере показано использует это свойство, чтобы определить, какие элементы находятся вне пространства имен.</span><span class="sxs-lookup"><span data-stu-id="f2f0c-171">The following example shows uses this property to determine which elements are in no namespace.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
  
XElement root = new XElement("Root",  
    new XElement(aw + "ChildInNamespace", "content"),  
    new XElement("ChildInNoNamespace", "content")  
);  
  
if (root.Name.Namespace == XNamespace.None)  
    Console.WriteLine("Root element is in no namespace");  
else  
    Console.WriteLine("Root element is in a namespace");  
  
if (root.Element(aw + "ChildInNamespace").Name.Namespace == XNamespace.None)  
    Console.WriteLine("ChildInNamespace element is in no namespace");  
else  
    Console.WriteLine("ChildInNamespace element is in a namespace");  
  
if (root.Element("ChildInNoNamespace").Name.Namespace == XNamespace.None)  
    Console.WriteLine("ChildInNoNamespace element is in no namespace");  
else  
    Console.WriteLine("ChildInNoNamespace element is in a namespace");  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = _  
            <Root>  
                <aw:ChildInNamespace>content</aw:ChildInNamespace>  
                <ChildInNoNamespace>content</ChildInNoNamespace>  
            </Root>  
  
        If (root.Name.Namespace Is XNamespace.None) Then  
            Console.WriteLine("Root element is in no namespace")  
        Else  
            Console.WriteLine("Root element is in a namespace")  
        End If  
  
        If (root.Element(GetXmlNamespace(aw) + "ChildInNamespace") _  
                .Name.Namespace Is XNamespace.None) Then  
            Console.WriteLine("ChildInNamespace element is in no namespace")  
        Else  
            Console.WriteLine("ChildInNamespace element is in a namespace")  
        End If  
  
        If (root.Element("ChildInNoNamespace") _  
                .Name.Namespace Is XNamespace.None) Then  
            Console.WriteLine("ChildInNoNamespace element is in no namespace")  
        Else  
            Console.WriteLine("ChildInNoNamespace element is in a namespace")  
        End If  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="f2f0c-172">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="f2f0c-172">This example produces the following output:</span></span>  
  
```  
Root element is in no namespace  
ChildInNamespace element is in a namespace  
ChildInNoNamespace element is in no namespace  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XName operator + (System.Xml.Linq.XNamespace ns, string localName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Xml.Linq.XName op_Addition(class System.Xml.Linq.XNamespace ns, string localName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.op_Addition(System.Xml.Linq.XNamespace,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (ns As XNamespace, localName As String) As XName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XName ^ operator +(System::Xml::Linq::XNamespace ^ ns, System::String ^ localName);" />
      <MemberSignature Language="F#" Value="static member ( + ) : System.Xml.Linq.XNamespace * string -&gt; System.Xml.Linq.XName" Usage="ns + localName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XName</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ns" Type="System.Xml.Linq.XNamespace" />
        <Parameter Name="localName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ns">
          <span data-ttu-id="f2f0c-173">
            <see cref="T:System.Xml.Linq.XNamespace" /> содержит пространство имен.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2f0c-173">An <see cref="T:System.Xml.Linq.XNamespace" /> that contains the namespace.</span>
          </span>
        </param>
        <param name="localName">
          <span data-ttu-id="f2f0c-174">
            <see cref="T:System.String" /> содержит локальное имя.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2f0c-174">A <see cref="T:System.String" /> that contains the local name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2f0c-175">Объединяет объект <see cref="T:System.Xml.Linq.XNamespace" /> с локальным именем для создания <see cref="T:System.Xml.Linq.XName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2f0c-175">Combines an <see cref="T:System.Xml.Linq.XNamespace" /> object with a local name to create an <see cref="T:System.Xml.Linq.XName" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f2f0c-176">Новое <see cref="T:System.Xml.Linq.XName" /> сконструировано из пространства имен и локального имени.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2f0c-176">The new <see cref="T:System.Xml.Linq.XName" /> constructed from the namespace and local name.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2f0c-177">Этот оператор позволяет распространенных случаях объединения пространства имен и локальное имя в конструкции элемента или атрибута.</span><span class="sxs-lookup"><span data-stu-id="f2f0c-177">This operator enables the common idiom of combining a namespace and a local name in the construction of an element or attribute.</span></span> <span data-ttu-id="f2f0c-178">Эту идиому предоставляет некоторые преимущества использования префиксов пространства имен, в том, что можно ссылаться на пространство имен, используя переменную, которая короткий.</span><span class="sxs-lookup"><span data-stu-id="f2f0c-178">This idiom provides some of the benefits of having namespace prefixes, in that you can refer to a namespace using a variable that is short.</span></span> <span data-ttu-id="f2f0c-179">Это устраняет синтаксические уровня шума в код, создающий XML-деревьев.</span><span class="sxs-lookup"><span data-stu-id="f2f0c-179">This eliminates syntactic noise in the code that creates XML trees.</span></span>  
  
## Examples  
 <span data-ttu-id="f2f0c-180">В следующем примере показано использование `+` оператор может создавать <xref:System.Xml.Linq.XName> из <xref:System.Xml.Linq.XNamespace> и локального имени.</span><span class="sxs-lookup"><span data-stu-id="f2f0c-180">The following example shows the use of the `+` operator to create an <xref:System.Xml.Linq.XName> from an <xref:System.Xml.Linq.XNamespace> and a local name.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root",  
    new XElement(aw + "Child")  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim aw As XNamespace = "http://www.adventure-works.com"  
Dim root As XElement = New XElement(aw + "Root", _  
    New XElement(aw + "Child") _  
)  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="f2f0c-181">В Visual Basic это предпочтительный идиому:</span><span class="sxs-lookup"><span data-stu-id="f2f0c-181">In Visual Basic, this is the preferred idiom:</span></span>  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = GetXmlNamespace()  
        Dim root As XElement = _  
            <Root>  
                <Child/>  
            </Root>  
        Console.WriteLine(root)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="f2f0c-182">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="f2f0c-182">This example produces the following output:</span></span>  
  
```  
<Root xmlns="http://www.adventure-works.com">  
  <Child />  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Xml.Linq.XNamespace left, System.Xml.Linq.XNamespace right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Xml.Linq.XNamespace left, class System.Xml.Linq.XNamespace right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.op_Equality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As XNamespace, right As XNamespace) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Xml::Linq::XNamespace ^ left, System::Xml::Linq::XNamespace ^ right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Xml.Linq.XNamespace * System.Xml.Linq.XNamespace -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Xml.Linq.XNamespace" />
        <Parameter Name="right" Type="System.Xml.Linq.XNamespace" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="f2f0c-183">Первый экземпляр <see cref="T:System.Xml.Linq.XNamespace" /> для сравнения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2f0c-183">The first <see cref="T:System.Xml.Linq.XNamespace" /> to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="f2f0c-184">Второй экземпляр <see cref="T:System.Xml.Linq.XNamespace" /> для сравнения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2f0c-184">The second <see cref="T:System.Xml.Linq.XNamespace" /> to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2f0c-185">Возвращает значение, указывающее, равны ли два экземпляра <see cref="T:System.Xml.Linq.XNamespace" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2f0c-185">Returns a value indicating whether two instances of <see cref="T:System.Xml.Linq.XNamespace" /> are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f2f0c-186">
            <see cref="T:System.Boolean" /> показывает, являются ли <paramref name="left" /> и <paramref name="right" /> эквивалентными.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2f0c-186">A <see cref="T:System.Boolean" /> that indicates whether <paramref name="left" /> and <paramref name="right" /> are equal.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2f0c-187">Перегрузки операторов `==` и `!=` позволяет использовать сравнение <xref:System.Xml.Linq.XNamespace> и строки (например, `element.Name.Namespace == "http://www.adventure-works.com"`).</span><span class="sxs-lookup"><span data-stu-id="f2f0c-187">The operator overloads `==` and `!=` are provided to enable comparisons between <xref:System.Xml.Linq.XNamespace> and string (for example, `element.Name.Namespace == "http://www.adventure-works.com"`).</span></span> <span data-ttu-id="f2f0c-188">Предопределенная ссылка операторов равенства в C# требует, чтобы один операнд допускать преобразование к типу другого только через преобразования ссылки и неявное преобразование из строки, не учитывают <xref:System.Xml.Linq.XNamespace>.</span><span class="sxs-lookup"><span data-stu-id="f2f0c-188">The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only, and do not consider the implicit conversion from string to <xref:System.Xml.Linq.XNamespace>.</span></span>  
   
## Examples  
 <span data-ttu-id="f2f0c-189">В следующем примере показано сравнение <xref:System.Xml.Linq.XNamespace> и строку.</span><span class="sxs-lookup"><span data-stu-id="f2f0c-189">The following example shows the comparison of an <xref:System.Xml.Linq.XNamespace> and a string.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
Console.WriteLine(aw == "http://www.adventure-works.com");  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = GetXmlNamespace()  
        Console.WriteLine(aw = "http://www.adventure-works.com")  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="f2f0c-190">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="f2f0c-190">This example produces the following output:</span></span>  
  
```  
True  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Xml.Linq.XNamespace (string namespaceName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Xml.Linq.XNamespace op_Implicit(string namespaceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.op_Implicit(System.String)~System.Xml.Linq.XNamespace" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (namespaceName As String) As XNamespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Xml::Linq::XNamespace ^(System::String ^ namespaceName);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : string -&gt; System.Xml.Linq.XNamespace" Usage="System.Xml.Linq.XNamespace.op_Implicit namespaceName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNamespace</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="namespaceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="namespaceName">
          <span data-ttu-id="f2f0c-191">
            <see cref="T:System.String" /> содержит пространство имен URI.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2f0c-191">A <see cref="T:System.String" /> that contains the namespace URI.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2f0c-192">Преобразует строку, содержащую Uniform Resource Identifier (URI), в <see cref="T:System.Xml.Linq.XNamespace" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2f0c-192">Converts a string containing a Uniform Resource Identifier (URI) to an <see cref="T:System.Xml.Linq.XNamespace" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f2f0c-193">
            <see cref="T:System.Xml.Linq.XNamespace" /> создан из строки URI.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2f0c-193">An <see cref="T:System.Xml.Linq.XNamespace" /> constructed from the URI string.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[## Examples  
 <span data-ttu-id="f2f0c-194">В следующем примере показано инициализации <xref:System.Xml.Linq.XNamespace> переменной необходимо назначить строку к нему.</span><span class="sxs-lookup"><span data-stu-id="f2f0c-194">The following example shows the initialization of an <xref:System.Xml.Linq.XNamespace> variable by assigning a string to it.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
Console.WriteLine(aw);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = GetXmlNamespace()  
        Console.WriteLine(aw)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="f2f0c-195">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="f2f0c-195">This example produces the following output:</span></span>  
  
```  
http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Xml.Linq.XNamespace left, System.Xml.Linq.XNamespace right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Xml.Linq.XNamespace left, class System.Xml.Linq.XNamespace right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.op_Inequality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As XNamespace, right As XNamespace) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Xml::Linq::XNamespace ^ left, System::Xml::Linq::XNamespace ^ right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Xml.Linq.XNamespace * System.Xml.Linq.XNamespace -&gt; bool" Usage="System.Xml.Linq.XNamespace.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Xml.Linq.XNamespace" />
        <Parameter Name="right" Type="System.Xml.Linq.XNamespace" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="f2f0c-196">Первый экземпляр <see cref="T:System.Xml.Linq.XNamespace" /> для сравнения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2f0c-196">The first <see cref="T:System.Xml.Linq.XNamespace" /> to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="f2f0c-197">Второй экземпляр <see cref="T:System.Xml.Linq.XNamespace" /> для сравнения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2f0c-197">The second <see cref="T:System.Xml.Linq.XNamespace" /> to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2f0c-198">Возвращает значение, указывающее, являются ли два экземпляра <see cref="T:System.Xml.Linq.XNamespace" /> неравными.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2f0c-198">Returns a value indicating whether two instances of <see cref="T:System.Xml.Linq.XNamespace" /> are not equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f2f0c-199">
            <see cref="T:System.Boolean" /> показывает, являются ли <paramref name="left" /> и <paramref name="right" /> неэквивалентными.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2f0c-199">A <see cref="T:System.Boolean" /> that indicates whether <paramref name="left" /> and <paramref name="right" /> are not equal.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2f0c-200">Перегрузки операторов `==` и `!=` позволяет использовать сравнение <xref:System.Xml.Linq.XNamespace> и строки (например, `element.Name.Namespace == "http://www.adventure-works.com"`).</span><span class="sxs-lookup"><span data-stu-id="f2f0c-200">The operator overloads `==` and `!=` are provided to enable comparisons between <xref:System.Xml.Linq.XNamespace> and string (for example, `element.Name.Namespace == "http://www.adventure-works.com"`).</span></span> <span data-ttu-id="f2f0c-201">Предопределенная ссылка операторов равенства в C# требует, чтобы один операнд допускать преобразование к типу другого только через преобразования ссылки и неявное преобразование из строки, не учитывают <xref:System.Xml.Linq.XNamespace>.</span><span class="sxs-lookup"><span data-stu-id="f2f0c-201">The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only, and do not consider the implicit conversion from string to <xref:System.Xml.Linq.XNamespace>.</span></span>   
  
## Examples  
 <span data-ttu-id="f2f0c-202">В следующем примере показано сравнение <xref:System.Xml.Linq.XNamespace> в строку.</span><span class="sxs-lookup"><span data-stu-id="f2f0c-202">The following example shows a comparison of a <xref:System.Xml.Linq.XNamespace> to a string.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
Console.WriteLine(aw != "http://www.adventure-works.com");  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = GetXmlNamespace()  
        Console.WriteLine(aw <> "http://www.adventure-works.com")  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="f2f0c-203">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="f2f0c-203">This example produces the following output:</span></span>  
  
```  
False  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="xNamespace.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f2f0c-204">Возвращает URI этого <see cref="T:System.Xml.Linq.XNamespace" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2f0c-204">Returns the URI of this <see cref="T:System.Xml.Linq.XNamespace" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f2f0c-205">URI этого <see cref="T:System.Xml.Linq.XNamespace" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2f0c-205">The URI of this <see cref="T:System.Xml.Linq.XNamespace" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f2f0c-206">В следующем примере этот метод используется для печати пространства имен на консоль.</span><span class="sxs-lookup"><span data-stu-id="f2f0c-206">The following example uses this method to print a namespace on the console.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
Console.WriteLine("{0}", aw.ToString());  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = GetXmlNamespace()  
        Console.WriteLine("{0}", aw)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="f2f0c-207">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="f2f0c-207">This example produces the following output:</span></span>  
  
```  
http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Xml">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XNamespace Xml { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Xml.Linq.XNamespace Xml" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XNamespace.Xml" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Xml As XNamespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Xml::Linq::XNamespace ^ Xml { System::Xml::Linq::XNamespace ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Xml : System.Xml.Linq.XNamespace" Usage="System.Xml.Linq.XNamespace.Xml" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNamespace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f2f0c-208">Вызывает объект <see cref="T:System.Xml.Linq.XNamespace" />, соответствующий XML URI (<c>http://www.w3.org/XML/1998/namespace</c>).</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2f0c-208">Gets the <see cref="T:System.Xml.Linq.XNamespace" /> object that corresponds to the XML URI (<c>http://www.w3.org/XML/1998/namespace</c>).</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f2f0c-209">
            <see cref="T:System.Xml.Linq.XNamespace" /> , Соответствующий XML URI (<c>http://www.w3.org/XML/1998/namespace</c>).</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2f0c-209">The <see cref="T:System.Xml.Linq.XNamespace" /> that corresponds to the XML URI (<c>http://www.w3.org/XML/1998/namespace</c>).</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2f0c-210">Определенные стандартизированный атрибуты, такие как `space`, находятся в `http://www.w3.org/XML/1998/namespace` пространства имен.</span><span class="sxs-lookup"><span data-stu-id="f2f0c-210">Certain standardized attributes, such as `space`, are in the `http://www.w3.org/XML/1998/namespace` namespace.</span></span> <span data-ttu-id="f2f0c-211">Стандарт W3C указывает, что это пространство имен не должны быть объявлены как атрибут в дереве XML.</span><span class="sxs-lookup"><span data-stu-id="f2f0c-211">The W3C standard specifies that this namespace does not have to be declared as an attribute in the XML tree.</span></span> <span data-ttu-id="f2f0c-212">Это зарезервированному пространству имен, который доступен всегда автоматически в средство синтаксического анализа XML.</span><span class="sxs-lookup"><span data-stu-id="f2f0c-212">It is a reserved namespace that is always automatically available in the XML parser.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2f0c-213">В следующем примере показано, как создать `xml:space="preserve"` атрибут в XML-дерева:</span><span class="sxs-lookup"><span data-stu-id="f2f0c-213">The following example shows how to create an `xml:space="preserve"` attribute in an XML tree:</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute(XNamespace.Xml + "space", "preserve"),  
    new XElement("Child", "content")  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = _  
    <Root xml:space="preserve">  
        <Child>content</Child>  
    </Root>  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="f2f0c-214">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="f2f0c-214">This example produces the following output:</span></span>  
  
```  
<Root xml:space="preserve">  
  <Child>content</Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Xmlns">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XNamespace Xmlns { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Xml.Linq.XNamespace Xmlns" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XNamespace.Xmlns" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Xmlns As XNamespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Xml::Linq::XNamespace ^ Xmlns { System::Xml::Linq::XNamespace ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Xmlns : System.Xml.Linq.XNamespace" Usage="System.Xml.Linq.XNamespace.Xmlns" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNamespace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f2f0c-215">Вызывает объект <see cref="T:System.Xml.Linq.XNamespace" />, соответствующий xmlns URI (<c>http://www.w3.org/2000/xmlns/</c>).</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2f0c-215">Gets the <see cref="T:System.Xml.Linq.XNamespace" /> object that corresponds to the xmlns URI (<c>http://www.w3.org/2000/xmlns/</c>).</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f2f0c-216">
            <see cref="T:System.Xml.Linq.XNamespace" /> , Соответствующий ** xmlns ** URI (<c>http://www.w3.org/2000/xmlns/</c>).</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2f0c-216">The <see cref="T:System.Xml.Linq.XNamespace" /> that corresponds to the **xmlns** URI (<c>http://www.w3.org/2000/xmlns/</c>).</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2f0c-217">При объявлении пространства имен, атрибуты пространства имен, сами находятся в **xmlns** пространства имен.</span><span class="sxs-lookup"><span data-stu-id="f2f0c-217">When you declare namespaces, the namespace attributes themselves are in the **xmlns** namespace.</span></span> <span data-ttu-id="f2f0c-218">Стандарт W3C указывает, что это пространство имен не должны быть объявлены как атрибут в дереве XML.</span><span class="sxs-lookup"><span data-stu-id="f2f0c-218">The W3C standard specifies that this namespace does not have to be declared as an attribute in the XML tree.</span></span> <span data-ttu-id="f2f0c-219">Это зарезервированному пространству имен, который доступен всегда автоматически в средство синтаксического анализа XML.</span><span class="sxs-lookup"><span data-stu-id="f2f0c-219">It is a reserved namespace that is always automatically available in the XML parser.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2f0c-220">В следующем примере показано, как добавить пространство имен XML-дерева.</span><span class="sxs-lookup"><span data-stu-id="f2f0c-220">The following example shows how to add a namespace to an XML tree.</span></span> <span data-ttu-id="f2f0c-221">Пространство имен для атрибута, который объявляет пространство имен является пространством имен, возвращаемый этим свойством.</span><span class="sxs-lookup"><span data-stu-id="f2f0c-221">The namespace for the attribute that declares the namespace is the namespace returned by this property.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root",  
    new XAttribute(XNamespace.Xmlns + "aw", "http://www.adventure-works.com"),  
    new XElement(aw + "Child", "content")  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim root = <aw:Root xmlns:aw="http://www.adventure-works.com">  
               <aw:Child>content</aw:Child>  
           </aw:Root>  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="f2f0c-222">В Visual Basic является предпочтительной идиому:</span><span class="sxs-lookup"><span data-stu-id="f2f0c-222">In Visual Basic, the preferred idiom is:</span></span>  
  
```vb  
Imports <xmlns:aw='http://www.adventure-works.com'>  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = _  
            <aw:Root>  
                <aw:Child>content</aw:Child>  
            </aw:Root>  
        Console.WriteLine(root)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="f2f0c-223">В этом примере выводятся следующие данные:</span><span class="sxs-lookup"><span data-stu-id="f2f0c-223">This example produces the following output:</span></span>  
  
```  
<aw:Root xmlns:aw="http://www.adventure-works.com">  
  <aw:Child>content</aw:Child>  
</aw:Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>