<Type Name="XmlSchemaSet" FullName="System.Xml.Schema.XmlSchemaSet">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="de049e0953bd01f68f7214056a7531dd4c85931d" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30720928" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XmlSchemaSet" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlSchemaSet extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Schema.XmlSchemaSet" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlSchemaSet" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlSchemaSet" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Содержит кэш схем языка определения схем XML (XSD).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  -   Не используйте схем из неизвестных или ненадежных источников или расположения. Это приведет к компрометации вашего кода.  
> -   XML-схем (включая встроенные схемы) по своей природе уязвимы для атак; не принимать их в недоверенных сценариях.  
> -   Сообщения об ошибках проверки схемы и исключения могут предоставлять конфиденциальных сведений о модели содержимого или пути URI к файлу схемы. Будьте внимательны и не предоставлять эту информацию для ненадежных вызывающих объектов.  
> -   Дополнительные вопросы безопасности описаны в разделе «Вопросы безопасности».  
  
 <xref:System.Xml.Schema.XmlSchemaSet> — Это кэша или библиотеки, где можно хранить параметров (XSD) языка определения схемы XML. Использование <xref:System.Xml.Schema.XmlSchemaSet> повышает производительность за счет кэширования схем в памяти вместо обращения к ним из файла или по URL-адресу. Каждая схема идентифицируется URI пространства имен и расположения, который был указан во время добавления схемы в наборе. Вы используете <xref:System.Xml.XmlReaderSettings.Schemas%2A?displayProperty=nameWithType> свойство <xref:System.Xml.Schema.XmlSchemaSet> объекта средства чтения XML следует использовать для проверки данных.  
  
## <a name="security-considerations"></a>Вопросы безопасности  
  
-   Не используйте схемы из неизвестных или ненадежных источников. Это приведет к компрометации вашего кода. Включить внешние пространства имен или расположения, на которые ссылается, импорта и переопределение элементов схемы разрешаются относительно базового URI схемы, их включающей или импортирующей. Например, если базовый URI включающей или импортирующей схемы пуст или `null`, то внешние расположения разрешаются относительно текущего каталога. <xref:System.Xml.XmlUrlResolver> Класс используется для разрешения внешних схем по умолчанию. Чтобы отключить разрешение включения, импорта и переопределить элементы схемы, установите <xref:System.Xml.Schema.XmlSchemaSet.XmlResolver%2A?displayProperty=nameWithType> свойства `null`.  
  
-   <xref:System.Xml.Schema.XmlSchemaSet> Класс использует <xref:System.Text.RegularExpressions.Regex?displayProperty=nameWithType> класса для синтаксического анализа и регулярные выражения в XML-схемы. Проверка аспектов шаблонов с помощью регулярных выражений в схеме XML может привести к повышенной загрузке ЦП и в сценариях высокого уровня доступности следует избегать.  
  
-   Исключения, вызванные в результате использования <xref:System.Xml.Schema.XmlSchemaSet> класса, такие как <xref:System.Xml.Schema.XmlSchemaException> класса могут содержать конфиденциальные сведения, которые не должны быть предоставлены в недоверенных сценариях. Например <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A> свойство <xref:System.Xml.Schema.XmlSchemaException> Возвращает пути URI к файлу схемы, вызвавшего исключение. <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A> Свойство не должно быть предоставлено в недоверенных сценариях. Исключения следует обрабатывать надлежащим образом, чтобы эти конфиденциальные сведения не раскрывались в недоверенных сценариях.  
  
   
  
## Examples  
 В следующем примере XML-файл проверяется с использованием схем, хранимых в классе <xref:System.Xml.Schema.XmlSchemaSet>. Пространство имен в XML-файле, `urn:bookstore-schema`, идентифицирует схему в классе <xref:System.Xml.Schema.XmlSchemaSet> для использования при проверке.  
  
 [!code-cpp[XmlReader_Validate_SchemaSet#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReader_Validate_SchemaSet/CPP/XmlReader_Validate_SchemaSet.cpp#1)]
 [!code-csharp[XmlReader_Validate_SchemaSet#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader_Validate_SchemaSet/CS/validschemaset.cs#1)]
 [!code-vb[XmlReader_Validate_SchemaSet#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader_Validate_SchemaSet/VB/validschemaset.vb#1)]  
  
## <a name="input"></a>Входные данные  
 Образец использует следующие два входных файла.  
  
 **booksSchemaFail.xml:**  
  
 [!code-xml[XmlReader_Validate_SchemaSet#2](~/samples/snippets/xml/VS_Snippets_Data/XmlReader_Validate_SchemaSet/XML/booksschemafail.xml#2)]  
  
 **books.xsd:**  
  
 [!code-xml[XmlReader_Validate_SchemaSet#3](~/samples/snippets/xml/VS_Snippets_Data/XmlReader_Validate_SchemaSet/XML/books.xsd#3)]  
  
## <a name="output"></a>Вывод  
 Ошибка проверки. Элемент «book» в пространстве имен «urn:bookstore-schema» имеет недопустимый дочерний элемент «author» в пространстве имен «urn:bookstore-schema». Ожидался элемент «title» в пространстве имен «urn:bookstore-schema».  
  
 Ошибка проверки. Элемент «author» в пространстве имен «urn:bookstore-schema» имеет недопустимый дочерний элемент «name» в пространстве имен «urn:bookstore-schema». Ожидался элемент «first-name» в пространстве имен «urn:bookstore-schema».  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlSchemaSet ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlSchemaSet();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlSchemaSet (System.Xml.XmlNameTable nameTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlNameTable nameTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.#ctor(System.Xml.XmlNameTable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (nameTable As XmlNameTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlSchemaSet(System::Xml::XmlNameTable ^ nameTable);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="nameTable" Type="System.Xml.XmlNameTable" />
      </Parameters>
      <Docs>
        <param name="nameTable">Используемый объект <see cref="T:System.Xml.XmlNameTable" />.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Xml.Schema.XmlSchemaSet" /> указанным значением <see cref="T:System.Xml.XmlNameTable" />.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Объект <see cref="T:System.Xml.XmlNameTable" />, переданный в качестве параметра, является <see langword="null" />.</exception>
        <altmember cref="T:System.Xml.XmlNameTable" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Добавляет заданную схему языка определения схем XML (XSD) в <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchema Add (System.Xml.Schema.XmlSchema schema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchema Add(class System.Xml.Schema.XmlSchema schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Add(System.Xml.Schema.XmlSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (schema As XmlSchema) As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Schema::XmlSchema ^ Add(System::Xml::Schema::XmlSchema ^ schema);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.Xml.Schema.XmlSchema" />
      </Parameters>
      <Docs>
        <param name="schema">Объект <see cref="T:System.Xml.Schema.XmlSchema" />, добавляемый в коллекцию <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</param>
        <summary>Добавляет указанную <see cref="T:System.Xml.Schema.XmlSchema" /> в <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <returns>Объект <see cref="T:System.Xml.Schema.XmlSchema" />, если схема успешно прошла проверку. Если схема не прошла проверку и задан <see cref="T:System.Xml.Schema.ValidationEventHandler" />, тогда возвращается <see langword="null" /> и возникает соответствующее событие проверки. В противном случае возникает исключение <see cref="T:System.Xml.Schema.XmlSchemaException" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если <xref:System.Xml.Schema.XmlSchema> объект уже существует в <xref:System.Xml.Schema.XmlSchemaSet>, <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> метод не выполняет никаких действий.  
  
 Функциональность этого метода идентично <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> метод.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">Схема не прошла проверку.</exception>
        <exception cref="T:System.ArgumentNullException">Объект <see cref="T:System.Xml.Schema.XmlSchema" />, переданный в качестве параметра, является <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Xml.Schema.XmlSchemaSet schemas);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Xml.Schema.XmlSchemaSet schemas) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Add(System.Xml.Schema.XmlSchemaSet)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (schemas As XmlSchemaSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::Xml::Schema::XmlSchemaSet ^ schemas);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
      </Parameters>
      <Docs>
        <param name="schemas">Объект <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</param>
        <summary>Добавляет все схемы языка определения схем XML (XSD), содержащиеся в заданном <see cref="T:System.Xml.Schema.XmlSchemaSet" />, в <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Перед добавлением схемы для <xref:System.Xml.Schema.XmlSchemaSet>, он должен быть предварительно обработаны успешно. При предварительной обработке выполняются следующие основные задачи.  
  
1.  Схема проверяется правильность структуры в соответствии с правилами XML-схемы W3C, но схемы не полностью проверена.  
  
2.  Разрешаются ссылки на внутренние и внешние компоненты схемы. Импортированный или включенный схемы, которые успешно получены, также добавляются в <xref:System.Xml.Schema.XmlSchemaSet>. Импортированные схемы добавляются в качестве отдельных <xref:System.Xml.Schema.XmlSchema> объектов и включенных схем являются неотъемлемой частью включая <xref:System.Xml.Schema.XmlSchema>.  
  
 Если <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> свойство <xref:System.Xml.Schema.XmlSchemaSet> для добавления — `true`, все схемы в <xref:System.Xml.Schema.XmlSchemaSet> добавление добавляются <xref:System.Xml.Schema.XmlSchemaSet>. Если <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> свойство <xref:System.Xml.Schema.XmlSchemaSet> для добавления — `false`, количество предварительно обработанных каждой схемы, добавленной до его добавления. Если любой из схем в только что добавленном <xref:System.Xml.Schema.XmlSchemaSet> завершается ошибкой для предварительной обработки, схемы добавляются; вместо этого <xref:System.Xml.Schema.XmlSchemaException> возникает исключение. Поэтому в следующем примере кода два не эквивалентны.  
  
```vb  
' First example  
schemaSet.Add(schemaSet1)  
  
' Second example  
Dim schema As XmlSchema  
  
For Each schema in schemaSet.Schemas()  
  
    schemaSet.Add(schema)  
  
Next  
```  
  
```csharp  
// First example  
schemaSet.Add(schemaSet1);  
  
// Second example  
foreach(XmlSchema schema in schemaSet.Schemas())  
{  
    schemaSet.Add(schema);  
}  
```  
  
 В предыдущих двух примерах кода не эквивалентны. В первом примере, если схема существует в `schemaSet1` и его <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> свойству `false`, нет схемы будут добавлены `schemaSet`. Во втором примере, можно добавить несколько схем для `schemaSet` перед обнаружена недопустимая схема, и возникает исключение.  
  
   
  
## Examples  
 В следующем примере кода показано добавление схем для <xref:System.Xml.Schema.XmlSchemaSet>, добавляя <xref:System.Xml.Schema.XmlSchemaSet> в новую <xref:System.Xml.Schema.XmlSchemaSet> с помощью <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> метод.  
  
```vb  
Dim schemaSet1 As XmlSchemaSet = New XmlSchemaSet  
schemaSet1.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd")  
schemaSet1.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet1.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd")  
  
Dim schemaSet2 As XmlSchemaSet = New XmlSchemaSet  
schemaSet2.Add(schemaSet1)  
```  
  
```csharp  
XmlSchemaSet schemaSet1 = new XmlSchemaSet();  
schemaSet1.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd");  
schemaSet1.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet1.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd");  
  
XmlSchemaSet schemaSet2 = new XmlSchemaSet();  
schemaSet2.Add(schemaSet1);  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">Схема в <see cref="T:System.Xml.Schema.XmlSchemaSet" /> недействительна.</exception>
        <exception cref="T:System.ArgumentNullException">Объект <see cref="T:System.Xml.Schema.XmlSchemaSet" />, переданный в качестве параметра, является <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchema Add (string targetNamespace, string schemaUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchema Add(string targetNamespace, string schemaUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Add(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (targetNamespace As String, schemaUri As String) As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Schema::XmlSchema ^ Add(System::String ^ targetNamespace, System::String ^ schemaUri);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetNamespace" Type="System.String" />
        <Parameter Name="schemaUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetNamespace">Свойство <c>targetNamespace</c> схемы или <see langword="null" /> для использования свойства <c>targetNamespace</c>, указанного в схеме.</param>
        <param name="schemaUri">URL-адрес, ссылающийся на схему, которую необходимо загрузить.</param>
        <summary>Добавляет схему языка определения схем XML (XSD), расположенную по указанному URL-адресу, в <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <returns>Объект <see cref="T:System.Xml.Schema.XmlSchema" />, если схема успешно прошла проверку. Если схема не прошла проверку и задан <see cref="T:System.Xml.Schema.ValidationEventHandler" />, тогда возвращается <see langword="null" /> и возникает соответствующее событие проверки. В противном случае возникает исключение <see cref="T:System.Xml.Schema.XmlSchemaException" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Перед добавлением схемы для <xref:System.Xml.Schema.XmlSchemaSet>, он должен быть предварительно обработаны успешно. При предварительной обработке выполняются следующие основные задачи.  
  
1.  Схема проверяется правильность структуры в соответствии с правилами XML-схемы W3C, но схемы не полностью проверена.  
  
2.  Разрешаются ссылки на внутренние и внешние компоненты схемы. Импортированный или включенный схемы, которые успешно получены, также добавляются в <xref:System.Xml.Schema.XmlSchemaSet>. Импортированные схемы добавляются в качестве отдельных <xref:System.Xml.Schema.XmlSchema> объектов и включенных схем являются неотъемлемой частью включая <xref:System.Xml.Schema.XmlSchema>.  
  
 Ниже перечислены важные замечания, которые необходимо учитывать при использовании <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> метода.  
  
-   Добавление схемы для <xref:System.Xml.Schema.XmlSchemaSet> с тем же целевой URL-адрес расположения пространства имен и схемы как схема, уже содержащихся в <xref:System.Xml.Schema.XmlSchemaSet> возвращает исходный объект схемы.  
  
-   Когда создается новая схема успешно добавлен <xref:System.Xml.Schema.XmlSchemaSet>, <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> свойство <xref:System.Xml.Schema.XmlSchemaSet> равно `false`.  
  
-   Включения и импорта элементов, в XML-схемы не будут разрешены при <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> вызывается метод. Ошибка при разрешении включения и импорта элементов приводит предупреждение проверки схемы и, если не <xref:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler> был указан для <xref:System.Xml.Schema.XmlSchemaSet> объекта, это предупреждение не будут отображаться.  
  
-   Если схема с того же целевого пространства имен, как схему, которая уже существует в <xref:System.Xml.Schema.XmlSchemaSet> добавляется <xref:System.Xml.Schema.XmlSchemaSet>, обе схемы будут добавлены.  
  
    > [!NOTE]
    >  Это поведение отличается от устаревшего <xref:System.Xml.Schema.XmlSchemaCollection> объекта.  
  
-   <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> Метод <xref:System.Xml.Schema.XmlSchemaSet> имеет возможность использовать целевое пространство имен, определенных в схеме, а не требуется указать целевое пространство имен в качестве параметра при <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> вызывается метод. Указание `null` в `targetNamespace` параметр <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> указывает, что метод <xref:System.Xml.Schema.XmlSchemaSet> использовать целевое пространство имен, определенных в схеме, как показано в следующем примере кода.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add(Nothing, "books.xsd")  
  
Dim schema As XmlSchema  
For Each schema In schemaSet.Schemas("http://www.contoso.com/books")  
    schema.Write(Console.Out)  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add(null, "books.xsd");  
  
foreach(XmlSchema schema in schemaSet.Schemas("http://www.contoso.com/books"))  
{  
    schema.Write(Console.Out);  
}  
```  
  
 В приведенном выше примере кода `null` указывается как `targetNamespace` параметр <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> метода. В результате `targetNamespace` определены в файле books.xml файл используется. В этом случае результатом вызова метода <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> метод будет совпадать Если http://www.contoso.com/books бы был задан как `targetNamespace` параметр.  
  
-   XML-схемы W3C позволяет схемы без целевого пространства имен должны быть включены в схемы с целевым пространством имен определен. В этом случае схемы без целевого пространства имен определены приводится в целевое пространство имен схемы, включая. Включенная схема рассматривается, как если бы у нее было определено целевое пространство имен. Аналогичным образом можно добавить схемы без целевого пространства имен <xref:System.Xml.Schema.XmlSchemaSet> и приведенное в целевое пространство имен, определяемое <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> метода, как показано в следующем примере.  
  
```  
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">  
    <xs:element name="A" type="xs:string" />  
</xs:schema>  
```  
  
 Если схема добавляется к <xref:System.Xml.Schema.XmlSchemaSet> с целевым пространством имен http://www.contoso.com/new/targetnamespace (как показано в приведенном ниже примере кода), он интерпретируется как в случае целевое пространство имен, объявленный в схеме `http://www.contoso.com/new/targetnamespace`.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/new/targetnamespace", "http://www.contoso.com/targetnamespace.xsd")  
  
Dim schema As XmlSchema  
  
For Each schema in schemaSet.Schemas()  
  
    Console.WriteLine(schema.TargetNamespace)     
  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/new/targetnamespace", "http://www.contoso.com/targetnamespace.xsd");  
foreach(XmlSchema schema in schemaSet.Schemas())  
{  
    Console.WriteLine(schema.TargetNamespace);  
}  
```  
  
   
  
## Examples  
 В следующем примере кода добавляется http://www.contoso.com/books.xsd схемы с целевым пространством имен из http://www.contoso.com/books для <xref:System.Xml.Schema.XmlSchemaSet>.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
```  
  
 В примере в качестве входных данных используется файл `books.xsd`.  
  
 [!code-xml[XmlSchemaSetOverall Example#3](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaSetOverall Example/XML/books.xsd#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">Схема не прошла проверку.</exception>
        <exception cref="T:System.ArgumentNullException">URL-адрес, переданный в качестве параметра, равен <see langword="null" /> или <see cref="F:System.String.Empty" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchema Add (string targetNamespace, System.Xml.XmlReader schemaDocument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchema Add(string targetNamespace, class System.Xml.XmlReader schemaDocument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Add(System.String,System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (targetNamespace As String, schemaDocument As XmlReader) As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Schema::XmlSchema ^ Add(System::String ^ targetNamespace, System::Xml::XmlReader ^ schemaDocument);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetNamespace" Type="System.String" />
        <Parameter Name="schemaDocument" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="targetNamespace">Свойство <c>targetNamespace</c> схемы или <see langword="null" /> для использования свойства <c>targetNamespace</c>, указанного в схеме.</param>
        <param name="schemaDocument">Объект <see cref="T:System.Xml.XmlReader" />.</param>
        <summary>Добавляет схему языка определения схем XML (XSD), содержащуюся в <see cref="T:System.Xml.XmlReader" />, в <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <returns>Объект <see cref="T:System.Xml.Schema.XmlSchema" />, если схема успешно прошла проверку. Если схема не прошла проверку и задан <see cref="T:System.Xml.Schema.ValidationEventHandler" />, тогда возвращается <see langword="null" /> и возникает соответствующее событие проверки. В противном случае возникает исключение <see cref="T:System.Xml.Schema.XmlSchemaException" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Перед добавлением схемы для <xref:System.Xml.Schema.XmlSchemaSet>, он должен быть предварительно обработаны успешно. При предварительной обработке выполняются следующие основные задачи.  
  
1.  Схема проверяется правильность структуры в соответствии с правилами XML-схемы W3C, но схемы не полностью проверена.  
  
2.  Разрешаются ссылки на внутренние и внешние компоненты схемы. Импортированный или включенный схемы, которые успешно получены, также добавляются в <xref:System.Xml.Schema.XmlSchemaSet>. Импортированные схемы добавляются в качестве отдельных <xref:System.Xml.Schema.XmlSchema> объектов и включенных схем являются неотъемлемой частью включая <xref:System.Xml.Schema.XmlSchema>.  
  
 Ниже перечислены важные замечания, которые необходимо учитывать при использовании <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> метода.  
  
-   Успешно извлечено схемы импортирован или включены по схемам, содержащимся в <xref:System.Xml.XmlReader> также добавляются <xref:System.Xml.Schema.XmlSchemaSet>.  
  
-   Если <xref:System.Xml.XmlReader> не находится в корневом элементе <xref:System.Xml.Schema.XmlSchemaException> возникает, если текущий элемент является элементом. Если текущий элемент не `xs:schema` элемент, в документе схемы считываются в <xref:System.Xml.Schema.XmlSchemaSet>; в противном случае <xref:System.Xml.Schema.XmlSchemaException> возникает, поскольку схема является недопустимым.  
  
-   Если <xref:System.Xml.XmlReader> располагается над последовательность узлов XML, добавляется только первый узел в последовательности.  
  
-   Если схема была создана из <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> вызова метода, значение <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> свойство игнорируется, поскольку обработка встроенных схем не применяются для документов схемы XML W3C.  
  
-   <xref:System.Xml.XmlResolver> Свойство <xref:System.Xml.XmlReader> не используется для разрешения ссылок на пространства имен и схем в элементы включения и импорта. Вместо этого <xref:System.Xml.XmlResolver> свойство <xref:System.Xml.Schema.XmlSchemaSet> используется.  
  
-   <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> Метод <xref:System.Xml.Schema.XmlSchemaSet> имеет возможность использовать целевое пространство имен, определенных в схеме, а не требуется указать целевое пространство имен в качестве параметра при <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> вызывается метод. Указание `null` или <xref:System.String.Empty?displayProperty=nameWithType> для <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> указывает, что метод <xref:System.Xml.Schema.XmlSchemaSet> использовать целевое пространство имен, определенных в схеме. Пример такого поведения см. в разделе <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> метод.  
  
 Остальные функциональные возможности этого метода идентично <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> метод.  
  
   
  
## Examples  
 В следующем примере кода добавляется books.xsd схемы, содержащейся в <xref:System.Xml.XmlTextReader> с целевым пространством имен из http://www.contoso.com/books для <xref:System.Xml.Schema.XmlSchemaSet>.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/books", New XmlTextReader("books.xsd")  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/books", new XmlTextReader("books.xsd");  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">Схема не прошла проверку.</exception>
        <exception cref="T:System.ArgumentNullException">Объект <see cref="T:System.Xml.XmlReader" />, переданный в качестве параметра, является <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CompilationSettings">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaCompilationSettings CompilationSettings { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaCompilationSettings CompilationSettings" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.CompilationSettings" />
      <MemberSignature Language="VB.NET" Value="Public Property CompilationSettings As XmlSchemaCompilationSettings" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaCompilationSettings ^ CompilationSettings { System::Xml::Schema::XmlSchemaCompilationSettings ^ get(); void set(System::Xml::Schema::XmlSchemaCompilationSettings ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaCompilationSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" /> для объекта <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <value>Объект <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" /> для <see cref="T:System.Xml.Schema.XmlSchemaSet" />. По умолчанию у экземпляра <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" /> свойство <see cref="P:System.Xml.Schema.XmlSchemaCompilationSettings.EnableUpaCheck" /> принимает значение <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Schema.XmlSchemaCompilationSettings> Класс задает параметры проверки уникальный однозначного соответствия примитивов (UPA) для <xref:System.Xml.Schema.XmlSchemaSet>. Дополнительные сведения о включении проверок см. в разделе <xref:System.Xml.Schema.XmlSchemaCompilationSettings.EnableUpaCheck%2A> свойство.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Compile">
      <MemberSignature Language="C#" Value="public void Compile ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Compile() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Compile" />
      <MemberSignature Language="VB.NET" Value="Public Sub Compile ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Compile();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Компилирует схемы языка определения схем XML (XSD) <see cref="T:System.Xml.Schema.XmlSchemaSet" /> в одну логическую схему.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод вызывается автоматически при необходимости проверки и <xref:System.Xml.Schema.XmlSchemaSet> ранее не были скомпилированы — например, когда <xref:System.Xml.Schema.XmlSchemaSet> используется в качестве входных данных для создания <xref:System.Xml.XmlReader> объекта в <xref:System.Xml.Schema.XmlSchemaSet.Schemas%2A> свойство <xref:System.Xml.XmlReaderSettings> объект. Если <xref:System.Xml.Schema.XmlSchemaSet> является уже в компилированное состояние, этот метод не перекомпилируется схемы. Если этот метод выполняется успешно, <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> свойству `true`.  
  
 Схемы, которые ранее были скомпилированы с <xref:System.Xml.Schema.XmlSchemaSet> , не компилируются повторно. Тем не менее схемы, которые были скомпилированы с помощью <xref:System.Xml.Schema.XmlSchemaSet.Compile%2A> метод <xref:System.Xml.Schema.XmlSchema> будут перекомпилированы.  
  
> [!NOTE]
>  Необходимо вызвать <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> метод, если схемой (или один из его содержит, импорта) был изменен после его добавления в <xref:System.Xml.Schema.XmlSchemaSet>. <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> Метод будет проверять правильность структуры в соответствии с правилами XML-схемы W3C схемы. Он не будет выполнять полную проверку. Он также разрешит ссылки на внутренние и внешние компоненты схемы. Импортированный или включенный схемы, которые успешно получены, также добавляются в <xref:System.Xml.Schema.XmlSchemaSet>. Импортированные схемы добавляются в качестве отдельных <xref:System.Xml.Schema.XmlSchema> объектов при включенных схем становятся частью включая <xref:System.Xml.Schema.XmlSchema>. При успешном повторно обработать вызов <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> свойство имеет значение false.  
  
   
  
## Examples  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet.Compile()  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet.Compile();  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">Возникла ошибка при проверке и компиляции схем в <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Contains">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Определяет, находится ли схема языка определения схем XML (XSD) в <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (string targetNamespace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(string targetNamespace) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Contains(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (targetNamespace As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::String ^ targetNamespace);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetNamespace" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetNamespace">Свойство <c>targetNamespace</c> схемы.</param>
        <summary>Определяет, находится ли схема языка определения схем XML (XSD) с указанным идентификатором URI целевого пространства имен в <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <returns>
          Значение <see langword="true" />, если схема с указанным универсальным кодом ресурса (URI) целевого пространства имен находится в <see cref="T:System.Xml.Schema.XmlSchemaSet" />; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Схемы, которые косвенно добавляются <xref:System.Xml.Schema.XmlSchemaSet> определяются <xref:System.Xml.Schema.XmlSchemaSet.Contains%2A> метода, например импортируемых схем. В результате, если схема для http://www.contoso.com/retail пространства имен, который импортирует схему для http://www.contoso.com/books добавляется пространство имен <xref:System.Xml.Schema.XmlSchemaSet>, вызов <xref:System.Xml.Schema.XmlSchemaSet.Contains%2A> с `http://www.contoso.com/books` как параметр, он возвращает `true`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.Xml.Schema.XmlSchema schema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(class System.Xml.Schema.XmlSchema schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Contains(System.Xml.Schema.XmlSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (schema As XmlSchema) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::Xml::Schema::XmlSchema ^ schema);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.Xml.Schema.XmlSchema" />
      </Parameters>
      <Docs>
        <param name="schema">Объект <see cref="T:System.Xml.Schema.XmlSchema" />.</param>
        <summary>Определяет, находится ли указанный объект языка определения схем XML (XSD) <see cref="T:System.Xml.Schema.XmlSchema" /> в <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <returns>
          Значение <see langword="true" />, если объект <see cref="T:System.Xml.Schema.XmlSchema" /> находится в <see cref="T:System.Xml.Schema.XmlSchemaSet" />; в противном случае — значение <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <see cref="T:System.Xml.Schema.XmlSchemaSet" />, передаваемый в качестве параметра, равен <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (System.Xml.Schema.XmlSchema[] schemas, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(class System.Xml.Schema.XmlSchema[] schemas, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.CopyTo(System.Xml.Schema.XmlSchema[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (schemas As XmlSchema(), index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(cli::array &lt;System::Xml::Schema::XmlSchema ^&gt; ^ schemas, int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchema[]" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="schemas">Массив, в который копируются объекты.</param>
        <param name="index">Индекс массива, начиная с которого будут копироваться объекты.</param>
        <summary>Копирует все объекты <see cref="T:System.Xml.Schema.XmlSchema" /> из <see cref="T:System.Xml.Schema.XmlSchemaSet" /> в заданный массив, начиная с заданного индекса.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример копирует все <xref:System.Xml.Schema.XmlSchema> объекты в <xref:System.Xml.Schema.XmlSchemaSet> на массив <xref:System.Xml.Schema.XmlSchema> объектов.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd")  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd")  
  
Dim schemas(schemaSet.Count) As XmlSchema  
schemaSet.CopyTo(schemas, 0)  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd");  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd");  
  
XmlSchema[] schemas = new XmlSchema[schemaSet.Count];  
schemaSet.CopyTo(schemas, 0);  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает количество логических схем языка определения схем XML (XSD) в <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <value>Количество логических схем в <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если существуют две схемы для пространства имен `http://www.contoso.com` в <xref:System.Xml.Schema.XmlSchemaSet>, <xref:System.Xml.Schema.XmlSchemaSet.Count%2A> свойство возвратит 1, так как схемы, рассматриваются как единую логическую схему для целей проверки. Тем не менее если схемы для пространства имен `http://www.contoso.com/retail` импорта схемы для `http://www.contoso.com/books` пространства имен, значение <xref:System.Xml.Schema.XmlSchemaSet.Count%2A> свойство бы 2.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GlobalAttributes">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaObjectTable GlobalAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaObjectTable GlobalAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.GlobalAttributes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GlobalAttributes As XmlSchemaObjectTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaObjectTable ^ GlobalAttributes { System::Xml::Schema::XmlSchemaObjectTable ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaObjectTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает все глобальные атрибуты всех схем языка определения схем XML (XSD) в <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <value>Коллекция глобальных атрибутов.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalElements" />
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalTypes" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaObjectTable" />
      </Docs>
    </Member>
    <Member MemberName="GlobalElements">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaObjectTable GlobalElements { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaObjectTable GlobalElements" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.GlobalElements" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GlobalElements As XmlSchemaObjectTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaObjectTable ^ GlobalElements { System::Xml::Schema::XmlSchemaObjectTable ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaObjectTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает все глобальные элементы всех схем языка определения схем XML (XSD) в <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <value>Коллекция глобальных элементов.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalTypes" />
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalAttributes" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaObjectTable" />
      </Docs>
    </Member>
    <Member MemberName="GlobalTypes">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaObjectTable GlobalTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaObjectTable GlobalTypes" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.GlobalTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GlobalTypes As XmlSchemaObjectTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaObjectTable ^ GlobalTypes { System::Xml::Schema::XmlSchemaObjectTable ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaObjectTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает все глобальные простые и сложные типы из всех схем языка определения схем XML (XSD) в <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <value>Коллекция глобальных простых и сложных типов.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Schema.XmlSchemaSet.GlobalTypes%2A> Свойство всегда возвращает тип, представляющий `xs:anyType` сложного типа.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalElements" />
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalAttributes" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaObjectTable" />
      </Docs>
    </Member>
    <Member MemberName="IsCompiled">
      <MemberSignature Language="C#" Value="public bool IsCompiled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCompiled" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.IsCompiled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCompiled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCompiled { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, были ли скомпилированы все схемы языка определения схем XML (XSD) в <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <value>
          Значение <see langword="true" />, если схемы в <see cref="T:System.Xml.Schema.XmlSchemaSet" /> были скомпилированы с момента последнего добавления или удаления схемы из <see cref="T:System.Xml.Schema.XmlSchemaSet" />; в противном случае — значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Свойство <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> не изменяется, если изменяются схемы в классе <xref:System.Xml.Schema.XmlSchemaSet>. Обновления отдельных схем в классе <xref:System.Xml.Schema.XmlSchemaSet> не отслеживаются. В результате свойство <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> может иметь значение `true`, даже если одна из схем в классе <xref:System.Xml.Schema.XmlSchemaSet> была изменена, но схемы не добавлялись и не удалялись из класса <xref:System.Xml.Schema.XmlSchemaSet>.  
  
   
  
## Examples  
 Пример <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> свойство, в разделе <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> метод.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Schema.XmlSchemaSet.Compile" />
        <altmember cref="M:System.Xml.Schema.XmlSchemaSet.Reprocess(System.Xml.Schema.XmlSchema)" />
      </Docs>
    </Member>
    <Member MemberName="NameTable">
      <MemberSignature Language="C#" Value="public System.Xml.XmlNameTable NameTable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlNameTable NameTable" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.NameTable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NameTable As XmlNameTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlNameTable ^ NameTable { System::Xml::XmlNameTable ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNameTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает имя <see cref="T:System.Xml.XmlNameTable" /> по умолчанию, используемое <see cref="T:System.Xml.Schema.XmlSchemaSet" /> при загрузке новых схем языка определения схем XML (XSD).</summary>
        <value>Таблица атомизированных строчных объектов.</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Xml.XmlNameTable" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchema Remove (System.Xml.Schema.XmlSchema schema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchema Remove(class System.Xml.Schema.XmlSchema schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Remove(System.Xml.Schema.XmlSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (schema As XmlSchema) As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Schema::XmlSchema ^ Remove(System::Xml::Schema::XmlSchema ^ schema);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.Xml.Schema.XmlSchema" />
      </Parameters>
      <Docs>
        <param name="schema">Объект <see cref="T:System.Xml.Schema.XmlSchema" />, который необходимо удалить из коллекции <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</param>
        <summary>Удаляет заданную схему языка определения схем XML (XSD) из <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <returns>Объект <see cref="T:System.Xml.Schema.XmlSchema" />, удаленный из <see cref="T:System.Xml.Schema.XmlSchemaSet" />, или <see langword="null" />, если схема не была найдена в <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Удаление схемы из <xref:System.Xml.Schema.XmlSchemaSet> задает <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> свойства `false`.  
  
   
  
## Examples  
 В следующем примере показано добавление нескольких схем в <xref:System.Xml.Schema.XmlSchemaSet>, а затем удалить одну из схем, с помощью <xref:System.Xml.Schema.XmlSchemaSet.Remove%2A> метод.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd")  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd")  
  
Dim schema As XmlSchema  
  
For Each schema In schemaSet.Schemas()  
  
    If schema.TargetNamespace = "http://www.contoso.com/music" Then  
        schemaSet.Remove(schema)  
    End If  
  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd");  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd");  
  
foreach (XmlSchema schema in schemaSet.Schemas())  
{  
    if (schema.TargetNamespace == "http://www.contoso.com/music")  
    {  
        schemaSet.Remove(schema);  
    }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">Схема не является действительной схемой.</exception>
        <exception cref="T:System.ArgumentNullException">
          <see cref="T:System.Xml.Schema.XmlSchema" />, передаваемый в качестве параметра, равен <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveRecursive">
      <MemberSignature Language="C#" Value="public bool RemoveRecursive (System.Xml.Schema.XmlSchema schemaToRemove);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RemoveRecursive(class System.Xml.Schema.XmlSchema schemaToRemove) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.RemoveRecursive(System.Xml.Schema.XmlSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveRecursive (schemaToRemove As XmlSchema) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool RemoveRecursive(System::Xml::Schema::XmlSchema ^ schemaToRemove);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemaToRemove" Type="System.Xml.Schema.XmlSchema" />
      </Parameters>
      <Docs>
        <param name="schemaToRemove">Объект <see cref="T:System.Xml.Schema.XmlSchema" />, который необходимо удалить из коллекции <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</param>
        <summary>Удаляет указанную схему языка определения схем XML (XSD) и все импортируемые ей схемы из <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <returns>
          Значение <see langword="true" />, если объект <see cref="T:System.Xml.Schema.XmlSchema" /> и все импортируемые им объекты были успешно удалены; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Schema.XmlSchemaSet.RemoveRecursive%2A> Метод удаляет указанную схему и все схемы, он импортирует из <xref:System.Xml.Schema.XmlSchemaSet>, при условии, что не существуют зависимости в схему или ее импортируемых схем. Если есть зависимости от схемы или его импортированные схемы в <xref:System.Xml.Schema.XmlSchemaSet>, ничего не удаляется и <xref:System.Xml.Schema.XmlSchemaSet.RemoveRecursive%2A> возвращает `false`. Если `false` возвращается и <xref:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler> будет определено, в обработчик события, описывающие зависимости отправляется предупреждение.  
  
 Если указанная схема импортирует другие схемы и указанной схемы ранее была удалена с <xref:System.Xml.Schema.XmlSchemaSet.Remove%2A> метода <xref:System.Xml.Schema.XmlSchemaSet.RemoveRecursive%2A> метод не удалит импортированные схемы и вернет `false`. Например если `parentSchema` импортирует `childSchema1` и `childSchema2` удаляется только следующий код `parentSchema`, но не импортированных `childSchema1` и `childSchema2` схемы:  
  
```  
XmlSchemaSet ss = new XmlSchemaSet();  
XmlSchema xs = XmlSchema.Read(XmlReader.Create("parentSchema.xsd"), null);  
ss.Add(xs);  
ss.Compile();  
ss.Remove(xs);  
ss.Compile();  
ss.RemoveRecursive(xs);  
ss.Compile();  
```  
  
 Следующий код приведет к удалению `parentSchema` и импортируемых схем:  
  
```  
XmlSchemaSet ss = new XmlSchemaSet();  
XmlSchema xs = XmlSchema.Read(XmlReader.Create("parentSchema.xsd"), null);  
ss.Add(xs);  
ss.Compile();  
ss.RemoveRecursive(xs);  
ss.Compile();  
```  
  
 <xref:System.Xml.Schema.XmlSchemaSet.RemoveRecursive%2A> Метод не оказывает влияния на состояние <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> свойство.  
  
   
  
## Examples  
 В следующем примере кода показано добавление нескольких схем в <xref:System.Xml.Schema.XmlSchemaSet>, а затем удаление одной из схем, а также соответствующие схемы, он импортируется с помощью <xref:System.Xml.Schema.XmlSchemaSet.RemoveRecursive%2A> метод.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd")  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd")  
  
Dim schema As XmlSchema  
  
For Each schema In schemaSet.Schemas()  
  
    If schema.TargetNamespace = "http://www.contoso.com/music" Then  
        schemaSet.RemoveRecursive(schema)  
    End If  
  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd");  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd");  
  
foreach (XmlSchema schema in schemaSet.Schemas())  
{  
    if (schema.TargetNamespace == "http://www.contoso.com/music")  
    {  
        schemaSet.RemoveRecursive(schema);  
    }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <see cref="T:System.Xml.Schema.XmlSchema" />, передаваемый в качестве параметра, равен <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Reprocess">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchema Reprocess (System.Xml.Schema.XmlSchema schema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchema Reprocess(class System.Xml.Schema.XmlSchema schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Reprocess(System.Xml.Schema.XmlSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Function Reprocess (schema As XmlSchema) As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Schema::XmlSchema ^ Reprocess(System::Xml::Schema::XmlSchema ^ schema);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.Xml.Schema.XmlSchema" />
      </Parameters>
      <Docs>
        <param name="schema">Схема, которую необходимо обработать повторно.</param>
        <summary>Выполняет повторную обработку схемы языка определения схем XML (XSD), которая уже находится в <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <returns>Объект <see cref="T:System.Xml.Schema.XmlSchema" />, если схема успешно прошла проверку. Если схема не прошла проверку и задан <see cref="T:System.Xml.Schema.ValidationEventHandler" />, тогда возвращается <see langword="null" /> и порождается соответствующее событие проверки. В противном случае возникает исключение <see cref="T:System.Xml.Schema.XmlSchemaException" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Повторная обработка схемы, выполняющий все шаги предварительной обработки, выполнения для схемы при <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> вызывается метод. Если вызов <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> прошла успешно, <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> свойству `false`.  
  
 Повторная обработка метод следует использовать после схемы в <xref:System.Xml.Schema.XmlSchemaSet> была изменена, после <xref:System.Xml.Schema.XmlSchemaSet> выполнения компиляции.  
  
> [!NOTE]
>  Необходимо вызвать <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> метод, если схемой (или один из его содержит, импорта) был изменен после его добавления в <xref:System.Xml.Schema.XmlSchemaSet>. <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> Метод будет проверять правильность структуры в соответствии с правилами XML-схемы W3C схемы. Он не будет выполнять полную проверку. Он также разрешит ссылки на внутренние и внешние компоненты схемы. Импортированный или включенный схемы, которые успешно получены, также добавляются в <xref:System.Xml.Schema.XmlSchemaSet>. Импортированные схемы добавляются в качестве отдельных <xref:System.Xml.Schema.XmlSchema> объектов при включенных схем становятся частью включая <xref:System.Xml.Schema.XmlSchema>. При успешном повторно обработать вызов <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> свойство имеет значение false.  
  
   
  
## Examples  
 В следующем примере показано, повторная обработка схемы, добавленной в <xref:System.Xml.Schema.XmlSchemaSet>. После <xref:System.Xml.Schema.XmlSchemaSet> компилируется с помощью <xref:System.Xml.Schema.XmlSchemaSet.Compile%2A> метод и схема, добавленная <xref:System.Xml.Schema.XmlSchemaSet> при изменении <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> свойству будет присвоено `true`, несмотря на то что схемы в <xref:System.Xml.Schema.XmlSchemaSet> был изменен. Вызов <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> метод выполняется вся предварительная выполненных <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> метод и наборы <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> свойства `false`.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
Dim schema As XmlSchema = schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet.Compile()  
  
Dim element As XmlSchemaElement = New XmlSchemaElement()  
schema.Items.Add(element)  
element.Name = "book"  
element.SchemaTypeName = New XmlQualifiedName("string", "http://www.w3.org/2001/XMLSchema")  
  
schemaSet.Reprocess(schema)  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
XmlSchema schema = schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet.Compile();  
  
XmlSchemaElement element = new XmlSchemaElement();  
schema.Items.Add(element);  
element.Name = "book";  
element.SchemaTypeName = new XmlQualifiedName("string", "http://www.w3.org/2001/XMLSchema");  
  
schemaSet.Reprocess(schema);  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">Схема не прошла проверку.</exception>
        <exception cref="T:System.ArgumentNullException">Объект <see cref="T:System.Xml.Schema.XmlSchema" />, переданный в качестве параметра, является <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Объект <see cref="T:System.Xml.Schema.XmlSchema" />, передаваемый в качестве параметра, еще не существует в <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Schemas">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает коллекцию схем языка определения схем XML (XSD), содержащихся в <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Schemas">
      <MemberSignature Language="C#" Value="public System.Collections.ICollection Schemas ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ICollection Schemas() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Schemas" />
      <MemberSignature Language="VB.NET" Value="Public Function Schemas () As ICollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ICollection ^ Schemas();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает коллекцию всех схем языка определения схем XML (XSD), содержащихся в <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <returns>Объект <see cref="T:System.Collections.ICollection" />, содержащий все схемы, добавленные в <see cref="T:System.Xml.Schema.XmlSchemaSet" />. Если в <see cref="T:System.Xml.Schema.XmlSchemaSet" /> не были добавлены схемы, возвращается пустой объект <see cref="T:System.Collections.ICollection" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод возвращает схемы, которые были добавлены к косвенно <xref:System.Xml.Schema.XmlSchemaSet> так, как они были импортированы.  
  
> [!NOTE]
>  <xref:System.Xml.Schema.XmlSchemaSet.Schemas%2A> Метод является эквивалентом <xref:System.Xml.Schema.XmlSchemaCollection.GetEnumerator%2A> метод устаревшие <xref:System.Xml.Schema.XmlSchemaCollection>.  
  
   
  
## Examples  
 Следующий пример показывает, как проходить по всем схемам в <xref:System.Xml.Schema.XmlSchemaSet>.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
  
Dim schema As XmlSchema  
  
For Each schema In schemaSet.Schemas()  
  
    schema.Write(Console.Out)  
  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
  
foreach (XmlSchema schema in schemaSet.Schemas())  
{  
    schema.Write(Console.Out);  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Schemas">
      <MemberSignature Language="C#" Value="public System.Collections.ICollection Schemas (string targetNamespace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ICollection Schemas(string targetNamespace) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Schemas(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Schemas (targetNamespace As String) As ICollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ICollection ^ Schemas(System::String ^ targetNamespace);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetNamespace" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetNamespace">Свойство <c>targetNamespace</c> схемы.</param>
        <summary>Возвращает коллекцию всех схем языка определения схем XML (XSD) в <see cref="T:System.Xml.Schema.XmlSchemaSet" />, принадлежащих заданному пространству имен.</summary>
        <returns>Объект <see cref="T:System.Collections.ICollection" />, содержащий все схемы, которые были добавлены к <see cref="T:System.Xml.Schema.XmlSchemaSet" />, принадлежащие заданному пространству имен. Если в <see cref="T:System.Xml.Schema.XmlSchemaSet" /> не были добавлены схемы, возвращается пустой объект <see cref="T:System.Collections.ICollection" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если `targetNamespace` параметр `null` или <xref:System.String.Empty>, то возвращаются все схемы без пространства имен.  
  
 Этот метод возвращает схемы, которые были добавлены к косвенно <xref:System.Xml.Schema.XmlSchemaSet> так, как они были импортированы.  
  
> [!NOTE]
>  <xref:System.Xml.Schema.XmlSchemaSet.Schemas%2A> Метод является эквивалентом <xref:System.Xml.Schema.XmlSchemaCollection.Item%2A> метод устаревшие <xref:System.Xml.Schema.XmlSchemaCollection>.  
  
   
  
## Examples  
 Следующий пример показывает, как проходить по всем схемам в http://www.contoso.com/books пространства имен в <xref:System.Xml.Schema.XmlSchemaSet>.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
  
Dim schema As XmlSchema  
  
For Each schema In schemaSet.Schemas("http://www.contoso.com/books")  
  
    schema.Write(Console.Out)  
  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
  
foreach (XmlSchema schema in schemaSet.Schemas("http://www.contoso.com/books"))  
{  
    schema.Write(Console.Out);  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidationEventHandler">
      <MemberSignature Language="C#" Value="public event System.Xml.Schema.ValidationEventHandler ValidationEventHandler;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Xml.Schema.ValidationEventHandler ValidationEventHandler" />
      <MemberSignature Language="DocId" Value="E:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Xml::Schema::ValidationEventHandler ^ ValidationEventHandler;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.ValidationEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Указывает обработчик событий, получающий сведения об ошибках проверки схем языка определения схем XML (XSD).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Задает обработчик событий для получения сведений об ошибках проверки схемы при <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> или <xref:System.Xml.Schema.XmlSchemaSet.Compile%2A> методы <xref:System.Xml.Schema.XmlSchemaSet> вызываются.  
  
 Если не определен обработчик событий, <xref:System.Xml.Schema.XmlSchemaException> создается для ошибок проверки где <xref:System.Xml.Schema.XmlSeverityType> — <xref:System.Xml.Schema.XmlSeverityType.Error>. Ошибок проверки не вызываются исключения <xref:System.Xml.Schema.XmlSeverityType> из <xref:System.Xml.Schema.XmlSeverityType.Warning>.  
  
   
  
## Examples  
 В следующем примере кода показано добавление <xref:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler> для записи ошибок и предупреждений при проверке XML-документа в схеме.  
  
 [!code-cpp[XmlSchemaSetOverall Example#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlSchemaSetOverall Example/CPP/xmlschemasetexample.cpp#1)]
 [!code-csharp[XmlSchemaSetOverall Example#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaSetOverall Example/CS/xmlschemasetexample.cs#1)]
 [!code-vb[XmlSchemaSetOverall Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaSetOverall Example/VB/xmlschemasetexample.vb#1)]  
  
 В примере используется файл books.xml в качестве входных данных.  
  
 [!code-xml[XmlSchemaSetOverall Example#2](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaSetOverall Example/XML/books.xml#2)]  
  
 В примере используется файлу books.xsd в качестве входных данных.  
  
 [!code-xml[XmlSchemaSetOverall Example#3](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaSetOverall Example/XML/books.xsd#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlResolver">
      <MemberSignature Language="C#" Value="public System.Xml.XmlResolver XmlResolver { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlResolver XmlResolver" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.XmlResolver" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlResolver As XmlResolver" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlResolver ^ XmlResolver {  void set(System::Xml::XmlResolver ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlResolver</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Задает <see cref="T:System.Xml.XmlResolver" />, используемый при разрешении пространств имен и расположений, на которые ссылаются элементы включения и импорта схемы.</summary>
        <value>
          <see cref="T:System.Xml.XmlResolver" />, используемый при разрешении пространств имен и расположений, на которые ссылаются элементы включения и импорта схемы.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.XmlResolver> Из <xref:System.Xml.Schema.XmlSchemaSet> используется для разрешения пространства имен или расположения, на которые ссылается элементы включения и импорта схемы, любое время, схема добавляется с помощью <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> или <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> методы.  
  
> [!IMPORTANT]
>  Включить внешние пространства имен или расположения, на которые ссылается, импорта и переопределение элементов схемы разрешаются относительно базового URI схемы, их включающей или импортирующей. Например, если базовый URI включающей или импортирующей схемы пуст или `null`, то внешние расположения разрешаются относительно текущего каталога. <xref:System.Xml.XmlUrlResolver> Класс используется для разрешения внешних схем по умолчанию. Чтобы отключить разрешение включения, импорта и переопределить элементы схемы, установите <xref:System.Xml.Schema.XmlSchemaSet.XmlResolver%2A> свойства `null`.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlResolver" />
      </Docs>
    </Member>
  </Members>
</Type>