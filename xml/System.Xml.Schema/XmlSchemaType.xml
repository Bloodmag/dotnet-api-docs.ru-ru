<Type Name="XmlSchemaType" FullName="System.Xml.Schema.XmlSchemaType">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="85bac839dd366a43eb786976e61e86cdc516f147" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30720378" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XmlSchemaType : System.Xml.Schema.XmlSchemaAnnotated" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlSchemaType extends System.Xml.Schema.XmlSchemaAnnotated" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Schema.XmlSchemaType" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlSchemaType&#xA;Inherits XmlSchemaAnnotated" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlSchemaType : System::Xml::Schema::XmlSchemaAnnotated" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Xml.Schema.XmlSchemaAnnotated</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Базовый класс для всех простых и сложных типов.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 В разделе <xref:System.Xml.Schema.XmlSchemaSimpleType> класса и <xref:System.Xml.Schema.XmlSchemaComplexType> класса в качестве примера использования этого класса.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlSchemaType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaType.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlSchemaType();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Xml.Schema.XmlSchemaType" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseSchemaType">
      <MemberSignature Language="C#" Value="public object BaseSchemaType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object BaseSchemaType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaType.BaseSchemaType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseSchemaType As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ BaseSchemaType { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This property has been deprecated. Please use BaseXmlSchemaType property that returns a strongly typed base schema type. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Xml.Serialization.XmlIgnore</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает тип объекта после компиляции или встроенный тип данных XSD, элемент simpleType или элемент complexType. Свойство набора сведений после компиляции схемы.</summary>
        <value>Встроенный тип данных XSD, элемент simpleType или элемент complexType.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ComplexType является производным от типа, заданного базовым значением. Базовое значение должно быть QName.  
  
> [!IMPORTANT]
>  <xref:System.Xml.Schema.XmlSchemaType.BaseSchemaType%2A> Свойство является устаревшим и будет заменен <xref:System.Xml.Schema.XmlSchemaType.BaseXmlSchemaType%2A> свойство.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseXmlSchemaType">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaType BaseXmlSchemaType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaType BaseXmlSchemaType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaType.BaseXmlSchemaType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseXmlSchemaType As XmlSchemaType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaType ^ BaseXmlSchemaType { System::Xml::Schema::XmlSchemaType ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Xml.Serialization.XmlIgnore</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение после компиляции для базового типа данного типа схемы.</summary>
        <value>Объект <see cref="T:System.Xml.Schema.XmlSchemaType" />, представляющий базовый тип данного типа схемы.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Schema.XmlSchemaType.BaseXmlSchemaType%2A> Свойство всегда имеет значение, поскольку все типы схемы иметь базовый тип. Это значение после компиляции схемы, сделав его частью набора сведений после компиляции схемы.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Datatype">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaDatatype Datatype { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaDatatype Datatype" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaType.Datatype" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Datatype As XmlSchemaDatatype" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaDatatype ^ Datatype { System::Xml::Schema::XmlSchemaDatatype ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Xml.Serialization.XmlIgnore</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaDatatype</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение типа данных после компиляции для данного сложного типа.</summary>
        <value>Значение <see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> после компиляции схемы.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DerivedBy">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaDerivationMethod DerivedBy { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.Schema.XmlSchemaDerivationMethod DerivedBy" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaType.DerivedBy" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DerivedBy As XmlSchemaDerivationMethod" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaDerivationMethod DerivedBy { System::Xml::Schema::XmlSchemaDerivationMethod get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Xml.Serialization.XmlIgnore</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaDerivationMethod</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает сведения после компиляции о способе создания данного элемента из его базового типа.</summary>
        <value>Одно из допустимых значений <see cref="T:System.Xml.Schema.XmlSchemaDerivationMethod" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В следующей таблице представлены значения, что это свойство может содержать.  
  
|Значение <xref:System.Xml.Schema.XmlSchemaDerivationMethod>|Описание:|  
|----------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------|  
|<xref:System.Xml.Schema.XmlSchemaDerivationMethod.None>|Метод вывода не задан.|  
|<xref:System.Xml.Schema.XmlSchemaDerivationMethod.Substitution>|Значение вычисляется путем подстановки.|  
|<xref:System.Xml.Schema.XmlSchemaDerivationMethod.Extension>|Наследуемых через расширение.|  
|<xref:System.Xml.Schema.XmlSchemaDerivationMethod.Restriction>|Производные путем ограничения.|  
|<xref:System.Xml.Schema.XmlSchemaDerivationMethod.List>|Производный по списку.|  
|<xref:System.Xml.Schema.XmlSchemaDerivationMethod.Union>|Значение вычисляется путем объединения.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Final">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaDerivationMethod Final { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.Schema.XmlSchemaDerivationMethod Final" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaType.Final" />
      <MemberSignature Language="VB.NET" Value="Public Property Final As XmlSchemaDerivationMethod" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaDerivationMethod Final { System::Xml::Schema::XmlSchemaDerivationMethod get(); void set(System::Xml::Schema::XmlSchemaDerivationMethod value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Xml.Serialization.XmlAttribute("final")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaDerivationMethod</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает финальный атрибут создания производной типа, указывающий, разрешены ли создание дальнейших производных.</summary>
        <value>Одно из допустимых значений <see cref="T:System.Xml.Schema.XmlSchemaDerivationMethod" />. Значение по умолчанию: <see cref="F:System.Xml.Schema.XmlSchemaDerivationMethod.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В следующей таблице представлены значения, что это свойство может содержать для простого типа.  
  
|Значение <xref:System.Xml.Schema.XmlSchemaDerivationMethod>|Описание:|  
|----------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------|  
|<xref:System.Xml.Schema.XmlSchemaDerivationMethod.Empty>|Переопределяет значение схемы `blockDefault` разрешая любые выводы посредством ограничения, расширения или замещения.|  
|<xref:System.Xml.Schema.XmlSchemaDerivationMethod.None>|Метод вывода не указывается. Это значение по умолчанию. Правила вывода берутся из параметра blockDefault схемы.|  
|<xref:System.Xml.Schema.XmlSchemaDerivationMethod.Substitution>|Не может быть замещен типом, производным от подстановки.|  
|<xref:System.Xml.Schema.XmlSchemaDerivationMethod.Extension>|Не может быть замещен типом, производным от расширения.|  
|<xref:System.Xml.Schema.XmlSchemaDerivationMethod.Restriction>|Не может быть замещен типом, производным от ограничения.|  
|<xref:System.Xml.Schema.XmlSchemaDerivationMethod.All>|`#all`. Не может быть замещен типом, производным от любого производного метода.|  
  
 Следующая таблица показывает значения, это свойство может содержать для сложного типа.  
  
|Значение <xref:System.Xml.Schema.XmlSchemaDerivationMethod>|Описание:|  
|----------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------|  
|<xref:System.Xml.Schema.XmlSchemaDerivationMethod.Empty>|Переопределяет значение схемы `blockDefault` разрешая любые выводы посредством ограничения, расширения или замещения.|  
|<xref:System.Xml.Schema.XmlSchemaDerivationMethod.None>|Метод вывода не указывается. Это значение по умолчанию. Правила вывода берутся из схемы `blockDefault` параметр.|  
|<xref:System.Xml.Schema.XmlSchemaDerivationMethod.Substitution>|Не может быть замещен типом, производным от подстановки.|  
|<xref:System.Xml.Schema.XmlSchemaDerivationMethod.Extension>|Не может быть замещен типом, производным от расширения.|  
|<xref:System.Xml.Schema.XmlSchemaDerivationMethod.Restriction>|Не может быть замещен типом, производным от ограничения.|  
|<xref:System.Xml.Schema.XmlSchemaDerivationMethod.All>|`#all`. Не может быть замещен типом, производным от любого производного метода.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FinalResolved">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaDerivationMethod FinalResolved { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.Schema.XmlSchemaDerivationMethod FinalResolved" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaType.FinalResolved" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FinalResolved As XmlSchemaDerivationMethod" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaDerivationMethod FinalResolved { System::Xml::Schema::XmlSchemaDerivationMethod get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Xml.Serialization.XmlIgnore</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaDerivationMethod</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение свойства <see cref="P:System.Xml.Schema.XmlSchemaType.Final" /> после компиляции.</summary>
        <value>Значение свойства <see cref="P:System.Xml.Schema.XmlSchemaType.Final" />, полученное после компиляции. По умолчанию используется значение атрибута <see langword="finalDefault" /> элемента <see langword="schema" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это значение указывает, каким образом ограничивается при расширении типа посредством ограничения. Если тип помечен как `final`, этот тип не может быть расширен.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetBuiltInComplexType">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает <see cref="T:System.Xml.Schema.XmlSchemaComplexType" />, который представляет встроенный сложный тип указанного сложного типа.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetBuiltInComplexType">
      <MemberSignature Language="C#" Value="public static System.Xml.Schema.XmlSchemaComplexType GetBuiltInComplexType (System.Xml.Schema.XmlTypeCode typeCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Schema.XmlSchemaComplexType GetBuiltInComplexType(valuetype System.Xml.Schema.XmlTypeCode typeCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaType.GetBuiltInComplexType(System.Xml.Schema.XmlTypeCode)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetBuiltInComplexType (typeCode As XmlTypeCode) As XmlSchemaComplexType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Schema::XmlSchemaComplexType ^ GetBuiltInComplexType(System::Xml::Schema::XmlTypeCode typeCode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaComplexType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeCode" Type="System.Xml.Schema.XmlTypeCode" />
      </Parameters>
      <Docs>
        <param name="typeCode">Одно из значений <see cref="T:System.Xml.Schema.XmlTypeCode" />, представляющее сложный тип.</param>
        <summary>Возвращает <see cref="T:System.Xml.Schema.XmlSchemaComplexType" />, который представляет встроенный сложный тип указанного сложного типа.</summary>
        <returns>
          <see cref="T:System.Xml.Schema.XmlSchemaComplexType" />, представляющий встроенный сложный тип.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBuiltInComplexType">
      <MemberSignature Language="C#" Value="public static System.Xml.Schema.XmlSchemaComplexType GetBuiltInComplexType (System.Xml.XmlQualifiedName qualifiedName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Schema.XmlSchemaComplexType GetBuiltInComplexType(class System.Xml.XmlQualifiedName qualifiedName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaType.GetBuiltInComplexType(System.Xml.XmlQualifiedName)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetBuiltInComplexType (qualifiedName As XmlQualifiedName) As XmlSchemaComplexType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Schema::XmlSchemaComplexType ^ GetBuiltInComplexType(System::Xml::XmlQualifiedName ^ qualifiedName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaComplexType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="qualifiedName" Type="System.Xml.XmlQualifiedName" />
      </Parameters>
      <Docs>
        <param name="qualifiedName">
          <see cref="T:System.Xml.XmlQualifiedName" /> сложного типа.</param>
        <summary>Возвращает <see cref="T:System.Xml.Schema.XmlSchemaComplexType" />, который представляет встроенный сложный тип, заданный полным именем.</summary>
        <returns>
          <see cref="T:System.Xml.Schema.XmlSchemaComplexType" />, представляющий встроенный сложный тип.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <see cref="T:System.Xml.XmlQualifiedName" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetBuiltInSimpleType">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает тип <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" />, который представляет встроенный простой тип указанного простого типа.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetBuiltInSimpleType">
      <MemberSignature Language="C#" Value="public static System.Xml.Schema.XmlSchemaSimpleType GetBuiltInSimpleType (System.Xml.Schema.XmlTypeCode typeCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Schema.XmlSchemaSimpleType GetBuiltInSimpleType(valuetype System.Xml.Schema.XmlTypeCode typeCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaType.GetBuiltInSimpleType(System.Xml.Schema.XmlTypeCode)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetBuiltInSimpleType (typeCode As XmlTypeCode) As XmlSchemaSimpleType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Schema::XmlSchemaSimpleType ^ GetBuiltInSimpleType(System::Xml::Schema::XmlTypeCode typeCode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaSimpleType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeCode" Type="System.Xml.Schema.XmlTypeCode" />
      </Parameters>
      <Docs>
        <param name="typeCode">Одно из значений <see cref="T:System.Xml.Schema.XmlTypeCode" />, представляющее простой тип.</param>
        <summary>Возвращает тип <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" />, который представляет встроенный простой тип указанного простого типа.</summary>
        <returns>
          <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" />, представляющий встроенный простой тип.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Не удается сериализовать встроенный тип напрямую. Если необходимо сериализовать тип, создайте новый простой тип, который является производным от встроенного типа и сериализации простого типа.  
  
   
  
## Examples  
 Приведенный ниже показано, как создать тип и добавить его в схему.  
  
 [!code-csharp[XmlSchemaType#1](~/samples/snippets/csharp/VS_Snippets_Data/xmlschematype/cs/xmlschematype.cs#1)]
 [!code-vb[XmlSchemaType#1](~/samples/snippets/visualbasic/VS_Snippets_Data/xmlschematype/vb/getbuiltinsimpletype.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBuiltInSimpleType">
      <MemberSignature Language="C#" Value="public static System.Xml.Schema.XmlSchemaSimpleType GetBuiltInSimpleType (System.Xml.XmlQualifiedName qualifiedName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Schema.XmlSchemaSimpleType GetBuiltInSimpleType(class System.Xml.XmlQualifiedName qualifiedName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaType.GetBuiltInSimpleType(System.Xml.XmlQualifiedName)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetBuiltInSimpleType (qualifiedName As XmlQualifiedName) As XmlSchemaSimpleType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Schema::XmlSchemaSimpleType ^ GetBuiltInSimpleType(System::Xml::XmlQualifiedName ^ qualifiedName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaSimpleType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="qualifiedName" Type="System.Xml.XmlQualifiedName" />
      </Parameters>
      <Docs>
        <param name="qualifiedName">
          <see cref="T:System.Xml.XmlQualifiedName" /> данного простого типа.</param>
        <summary>Возвращает <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" />, который представляет встроенный простой тип простого типа, заданного полным именем.</summary>
        <returns>
          <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" />, представляющий встроенный простой тип.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Не удается сериализовать встроенный тип напрямую. Если необходимо сериализовать тип, создайте новый простой тип, который является производным от встроенного типа и сериализации простого типа.  
  
   
  
## Examples  
 Приведенный ниже показано, как создать тип и добавить его в схему.  
  
 [!code-csharp[XmlSchemaType#1](~/samples/snippets/csharp/VS_Snippets_Data/xmlschematype/cs/xmlschematype.cs#1)]
 [!code-vb[XmlSchemaType#1](~/samples/snippets/visualbasic/VS_Snippets_Data/xmlschematype/vb/getbuiltinsimpletype.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <see cref="T:System.Xml.XmlQualifiedName" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsDerivedFrom">
      <MemberSignature Language="C#" Value="public static bool IsDerivedFrom (System.Xml.Schema.XmlSchemaType derivedType, System.Xml.Schema.XmlSchemaType baseType, System.Xml.Schema.XmlSchemaDerivationMethod except);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDerivedFrom(class System.Xml.Schema.XmlSchemaType derivedType, class System.Xml.Schema.XmlSchemaType baseType, valuetype System.Xml.Schema.XmlSchemaDerivationMethod except) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaType.IsDerivedFrom(System.Xml.Schema.XmlSchemaType,System.Xml.Schema.XmlSchemaType,System.Xml.Schema.XmlSchemaDerivationMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsDerivedFrom (derivedType As XmlSchemaType, baseType As XmlSchemaType, except As XmlSchemaDerivationMethod) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDerivedFrom(System::Xml::Schema::XmlSchemaType ^ derivedType, System::Xml::Schema::XmlSchemaType ^ baseType, System::Xml::Schema::XmlSchemaDerivationMethod except);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="derivedType" Type="System.Xml.Schema.XmlSchemaType" />
        <Parameter Name="baseType" Type="System.Xml.Schema.XmlSchemaType" />
        <Parameter Name="except" Type="System.Xml.Schema.XmlSchemaDerivationMethod" />
      </Parameters>
      <Docs>
        <param name="derivedType">Производный <see cref="T:System.Xml.Schema.XmlSchemaType" /> для тестирования.</param>
        <param name="baseType">Базовый <see cref="T:System.Xml.Schema.XmlSchemaType" /> для тестирования на соответствие производному <see cref="T:System.Xml.Schema.XmlSchemaType" />.</param>
        <param name="except">Одно из значений <see cref="T:System.Xml.Schema.XmlSchemaDerivationMethod" />, представляющее метод создания производного типа, который требуется исключить из тестирования.</param>
        <summary>Возвращает значение, указывающее, является ли указанный тип схемы производным от указанного типа базовой схемы.</summary>
        <returns>
          <see langword="true" />, если производный тип создан от базового типа; в противном случае — <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Ниже приведен пример <xref:System.Xml.Schema.XmlSchemaType.IsDerivedFrom%2A> метод.  
  
```csharp  
XmlSchemaType xsdInteger = XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer);  
XmlSchemaType xsdPositiveInteger = XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger);  
  
// true  
Console.WriteLine(XmlSchemaType.IsDerivedFrom(xsdPositiveInteger, xsdInteger, XmlSchemaDerivationMethod.None));  
  
// false  
Console.WriteLine(XmlSchemaType.IsDerivedFrom(xsdPositiveInteger, xsdInteger, XmlSchemaDerivationMethod.Restriction));  
```  
  
```vb  
Dim xsdInteger As XmlSchemaType = XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer)  
Dim xsdPositiveInteger As XmlSchemaType = XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger)  
  
' True  
Console.WriteLine(XmlSchemaType.IsDerivedFrom(xsdPositiveInteger, xsdInteger, XmlSchemaDerivationMethod.None))  
  
' False  
Console.WriteLine(XmlSchemaType.IsDerivedFrom(xsdPositiveInteger, xsdInteger, XmlSchemaDerivationMethod.Restriction))  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMixed">
      <MemberSignature Language="C#" Value="public virtual bool IsMixed { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMixed" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaType.IsMixed" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property IsMixed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsMixed { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Xml.Serialization.XmlIgnore</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает значение, указывающее, имеет ли данный тип смешанную модель содержимого. Это свойство доступно только в сложных типах.</summary>
        <value>
          <see langword="true" />, если тип имеет смешанную модель содержимого; в противном случае — <see langword="false" />. Значение по умолчанию: <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот виртуальный метод переопределяется в производных классах.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaType.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Xml.Serialization.XmlAttribute("name")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает имя типа.</summary>
        <value>Имя типа.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Имя должно быть именем без двоеточий (NCName), как определено в спецификации пространств имен XML консорциума World Wide Web (W3C). Указываемое имя должно быть уникальным среди всех `simpleType` и `complexType` элементы.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QualifiedName">
      <MemberSignature Language="C#" Value="public System.Xml.XmlQualifiedName QualifiedName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlQualifiedName QualifiedName" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaType.QualifiedName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property QualifiedName As XmlQualifiedName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlQualifiedName ^ QualifiedName { System::Xml::XmlQualifiedName ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Xml.Serialization.XmlIgnore</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlQualifiedName</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает полное имя для типа, построенного из атрибута <see langword="Name" /> данного типа. Свойство после компиляции схемы.</summary>
        <value>
          <see cref="T:System.Xml.XmlQualifiedName" /> для типа, построенного из атрибута <see langword="Name" /> данного типа.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeCode">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlTypeCode TypeCode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.Schema.XmlTypeCode TypeCode" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaType.TypeCode" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeCode As XmlTypeCode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlTypeCode TypeCode { System::Xml::Schema::XmlTypeCode get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Xml.Serialization.XmlIgnore</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlTypeCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает <see cref="T:System.Xml.Schema.XmlTypeCode" /> данного типа.</summary>
        <value>Одно из значений перечисления <see cref="T:System.Xml.Schema.XmlTypeCode" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>