<Type Name="XmlElementAttribute" FullName="System.Xml.Serialization.XmlElementAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="43848081dc33d6961ce9a4aca16c8940293a9226" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30720898" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XmlElementAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlElementAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Serialization.XmlElementAttribute" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlElementAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlElementAttribute : Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Field | System.AttributeTargets.Parameter | System.AttributeTargets.Property | System.AttributeTargets.ReturnValue, AllowMultiple=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Указывает, что открытое поле или свойство представляет XML-элемент, когда <see cref="T:System.Xml.Serialization.XmlSerializer" /> сериализует или десериализует объект, содержащий его.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Serialization.XmlElementAttribute> Принадлежит к семейству атрибутов, управляющих как <xref:System.Xml.Serialization.XmlSerializer> сериализует или десериализует объект. Полный список аналогичных атрибутов см. в разделе [атрибуты, управляющие сериализацией XML](~/docs/standard/serialization/attributes-that-control-xml-serialization.md).  
  
 XML-документ обычно содержит элементы XML, каждый из которых состоит из трех частей: открывающий тег с возможными атрибутами, закрывающий тег и данные между тегами. XML-теги могут быть вложенными, т.е, данные между тегами также может быть XML-элементов. Это способность одного элемента содержать другой позволяет документу содержать иерархии данных. Элемент XML может также включать атрибуты.  
  
 Применить <xref:System.Xml.Serialization.XmlElementAttribute> открытые поля или свойства чтения/записи для управления характеристиками элементов XML, такие как имя элемента и пространства имен.  
  
 <xref:System.Xml.Serialization.XmlElementAttribute> Может применяться несколько раз в поле, возвращающее массив объектов. Это предназначено для указания (через <xref:System.Xml.Serialization.XmlElementAttribute.Type%2A> свойство) различных типов, которые могут быть вставлены в массив. Например массив, в следующем коде C# принимает строки и целые числа.  
  
```  
public class Things{  
   [XmlElement(Type = typeof(string)),  
   XmlElement(Type = typeof(int))]  
   public object[] StringsAndInts;  
}  
```  
  
 Это приводит к XML-ФАЙЛ, как показано ниже.  
  
```  
<Things>  
   <string>Hello</string>  
   <int>999</int>  
   <string>World</string>  
</Things>  
```  
  
 Обратите внимание, что при применении <xref:System.Xml.Serialization.XmlElementAttribute> несколько раз без указания <xref:System.Xml.Serialization.XmlElementAttribute.ElementName%2A> значение свойства элементов соответствуют именам тип допустимых объектов.  
  
 Если применить <xref:System.Xml.Serialization.XmlElementAttribute> поле или свойство, которое возвращает массив, элементы массива кодируются как последовательность элементов XML.  
  
 В противоположность этому при <xref:System.Xml.Serialization.XmlElementAttribute> не применяется для такого поля или свойства, элементы массива кодируются как последовательность элементов, вложенных в элемент с именем поля или свойства. (Используйте <xref:System.Xml.Serialization.XmlArrayAttribute> и <xref:System.Xml.Serialization.XmlArrayItemAttribute> атрибуты для управления способом сериализации массива.)  
  
 Можно задать <xref:System.Xml.Serialization.XmlElementAttribute.Type%2A> свойство, чтобы указать тип, который является производным от типа исходного поля или свойства — то есть, поле или свойство для которого установлен <xref:System.Xml.Serialization.XmlElementAttribute>.  
  
 Если поле или свойство возвращает <xref:System.Collections.ArrayList>, можно применить несколько экземпляров <xref:System.Xml.Serialization.XmlElementAttribute> к элементу. Для каждого экземпляра, установите <xref:System.Xml.Serialization.XmlElementAttribute.Type%2A> свойство с типом объекта, который может быть вставлен в массив.  
  
 Дополнительные сведения об использовании атрибутов см. в разделе [атрибуты](~/docs/standard/attributes/index.md).  
  
> [!NOTE]
>  Можно использовать слово `XmlElement` в коде вместо более длинного <xref:System.Xml.Serialization.XmlElementAttribute>.  
  
   
  
## Examples  
 В следующем примере сериализуется класс с именем `Group` и применяет <xref:System.Xml.Serialization.XmlElementAttribute> в несколько его элементов. Поля с названием `Employees` возвращает массив `Employee` объектов. В этом случае <xref:System.Xml.Serialization.XmlElementAttribute> указывает, что результирующий XML не будут вложены (это поведение по умолчанию элементов в массиве).  
  
 [!code-cpp[Classic XmlElementAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlElementAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlElementAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlElementAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic XmlElementAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlElementAttribute Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xml.Serialization.XmlArrayAttribute" />
    <altmember cref="T:System.Xml.Serialization.XmlAttributeOverrides" />
    <altmember cref="T:System.Xml.Serialization.XmlAttributes" />
    <altmember cref="T:System.Xml.Serialization.XmlElementAttributes" />
    <altmember cref="P:System.Xml.Serialization.XmlAttributes.XmlElements" />
    <altmember cref="T:System.Xml.Serialization.XmlRootAttribute" />
    <altmember cref="T:System.Xml.Serialization.XmlSerializer" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Xml.Serialization.XmlElementAttribute" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlElementAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlElementAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlElementAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Xml.Serialization.XmlElementAttribute" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере применяется <xref:System.Xml.Serialization.XmlElementAttribute> к классу.  
  
 [!code-cpp[Classic XmlElementAttribute.XmlElementAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlElementAttribute.XmlElementAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic XmlElementAttribute.XmlElementAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlElementAttribute (string elementName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string elementName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlElementAttribute.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (elementName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlElementAttribute(System::String ^ elementName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementName">Имя XML-элемента сериализованного члена.</param>
        <summary>Инициализация нового экземпляра  класса <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> и указывает имя элемента XML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 По умолчанию <xref:System.Xml.Serialization.XmlSerializer> использует имя члена в качестве имени XML-элемента при сериализации экземпляра класса. Например, поле с именем `Vehicle` создает XML-элемента с именем `Vehicle`. Однако если требуется другой элемент, `Cars`, передайте его в `elementName` параметра.  
  
   
  
## Examples  
 В примере показан простой класс, который содержит одно поле с именем `Vehicles`. В примере применяется <xref:System.Xml.Serialization.XmlElementAttribute> полю и включает `elementName` параметра, тем самым указывая <xref:System.Xml.Serialization.XmlSerializer> для создания XML-элементов с именем «Автомобили» вместо «Средства».  
  
 [!code-cpp[Classic XmlElementAttribute.XmlElementAttribute1 Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlElementAttribute.XmlElementAttribute1 Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute1 Example/CS/source.cs#1)]
 [!code-vb[Classic XmlElementAttribute.XmlElementAttribute1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlElementAttribute (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlElementAttribute.#ctor(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlElementAttribute(Type ^ type);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">
          <see cref="T:System.Type" /> объекта, являющегося производным от типа члена.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> и указывает тип для члена, к которому применяется <see cref="T:System.Xml.Serialization.XmlElementAttribute" />. Данный тип используется при сериализации или десериализации <see cref="T:System.Xml.Serialization.XmlSerializer" /> содержащего его объекта.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте `type` параметр, чтобы указать тип, производный от базового класса. Например, предположим, что свойство с именем `MyAnimal` возвращает `Animal` объекта. Чтобы улучшить объект, то создается новый класс с именем `Mammal` , наследуемый от `Animal` класса. Чтобы дать указание <xref:System.Xml.Serialization.XmlSerializer> принимать `Mammal` класс при сериализации `MyAnimal` свойства, передайте <xref:System.Type> из `Mammal` в конструктор.  
  
   
  
## Examples  
 В следующем примере сериализуется класс с именем `Orchestra` , содержащий одно поле с именем `Instruments`, который возвращает массив `Instrument` объектов. Второй класс с именем `Brass` наследует от `Instrument` класса. В примере применяется <xref:System.Xml.Serialization.XmlElementAttribute> для `Instruments` и указывает `Brass` типа, позволяя `Instruments` полю принимать `Brass` объектов. В примере также указывается имя элемента XML, задав <xref:System.Xml.Serialization.XmlElementAttribute.ElementName%2A> свойство.  
  
 [!code-cpp[Classic XmlElementAttribute.XmlElementAttribute2 Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlElementAttribute.XmlElementAttribute2 Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute2 Example/CS/source.cs#1)]
 [!code-vb[Classic XmlElementAttribute.XmlElementAttribute2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlElementAttribute (string elementName, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string elementName, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlElementAttribute.#ctor(System.String,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlElementAttribute(System::String ^ elementName, Type ^ type);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="elementName">Имя XML-элемента сериализованного члена.</param>
        <param name="type">
          <see cref="T:System.Type" /> объекта, являющегося производным от типа члена.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> и указывает имя XML-элемента и производного типа для члена, к которому применяется <see cref="T:System.Xml.Serialization.XmlElementAttribute" />. Данный тип члена используйте при сериализации <see cref="T:System.Xml.Serialization.XmlSerializer" /> содержащего его объекта.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 По умолчанию <xref:System.Xml.Serialization.XmlSerializer> использует имя члена в качестве имени XML-элемента при сериализации экземпляра класса. Например, поле с именем `Vehicle` создает XML-элемента с именем `Vehicle`. Тем не менее если требуется другой элемент, `Cars`, передайте его в `elementName` параметра.  
  
 Используйте `type` параметр, чтобы указать тип, производный от базового класса. Например, предположим, что свойство с именем `MyAnimal` возвращает `Animal` объекта. Чтобы улучшить объект, то создается новый класс с именем `Mammal` , наследуемый от `Animal` класса. Чтобы дать указание <xref:System.Xml.Serialization.XmlSerializer> принимать `Mammal` класс при сериализации `MyAnimal` свойства, передайте <xref:System.Type> из `Mammal` в конструктор.  
  
   
  
## Examples  
 В следующем примере сериализуется класс с именем `Orchestra` , содержащий одно поле с именем `Instruments`, который возвращает массив `Instrument` объектов. Второй класс с именем `Brass` наследует от `Instrument` класса. В примере применяется <xref:System.Xml.Serialization.XmlElementAttribute> для `Instruments` и указывает `Brass` типа, позволяя `Instruments` полю принимать `Brass` объектов. В примере также указывается имя элемента XML, задав <xref:System.Xml.Serialization.XmlElementAttribute.ElementName%2A> свойство.  
  
 [!code-cpp[Classic XmlElementAttribute.XmlElementAttribute2 Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlElementAttribute.XmlElementAttribute2 Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute2 Example/CS/source.cs#1)]
 [!code-vb[Classic XmlElementAttribute.XmlElementAttribute2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataType">
      <MemberSignature Language="C#" Value="public string DataType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlElementAttribute.DataType" />
      <MemberSignature Language="VB.NET" Value="Public Property DataType As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DataType { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает тип данных определения схемы XML (XSD), сгенерированного <see cref="T:System.Xml.Serialization.XmlSerializer" /> элемента XML.</summary>
        <value>Тип данных XML-схемы в соответствии с документом консорциума W3C (www.w3.org) "XML Schema Part 2: Datatypes".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ниже перечислены типы простых данных схемы XML с их эквивалентами.  
  
 XML-схемы `base64Binary` и `hexBinary` типов данных, используйте массив <xref:System.Byte> структуры и применения <xref:System.Xml.Serialization.XmlElementAttribute> с <xref:System.Xml.Serialization.XmlElementAttribute.DataType%2A> присвоено значение «base64Binary» или «hexBinary». XML-схемы `time` и `date` типов данных используйте <xref:System.DateTime> введите и применить <xref:System.Xml.Serialization.XmlElementAttribute> с <xref:System.Xml.Serialization.XmlElementAttribute.DataType%2A> присвоено значение «date» или «время».  
  
 Для каждого типа схемы XML, отраженного в строке, примените <xref:System.Xml.Serialization.XmlElementAttribute> с его <xref:System.Xml.Serialization.XmlElementAttribute.DataType%2A> значение свойства типа схемы XML. Это возможно, это можно изменить формат сериализации, а не только схему для члена.  
  
> [!NOTE]
>  Свойство учитывает регистр, поэтому его необходимо задать ровно на один из типов данных схемы XML.  
  
> [!NOTE]
>  Передача двоичных данных в виде XML-элемент является более эффективным, чем передача в качестве атрибута схемы XML.  
  
 Дополнительные сведения о типах данных см. в документе консорциума World Wide Web (www.w3.org) с именем «XML схема часть 2: типы данных».  
  
|Тип данных XSD|Тип данных .NET|  
|-------------------|--------------------|  
|anyURI|<xref:System.String>|  
|base64Binary|Массив <xref:System.Byte> объектов|  
|boolean|<xref:System.Boolean>|  
|byte|<xref:System.SByte>|  
|date|<xref:System.DateTime>|  
|dateTime|<xref:System.DateTime>|  
|decimal|<xref:System.Decimal>|  
|double|<xref:System.Double>|  
|ENTITY|<xref:System.String>|  
|СУЩНОСТИ|<xref:System.String>|  
|float|<xref:System.Single>|  
|gDay|<xref:System.String>|  
|gMonth|<xref:System.String>|  
|gMonthDay|<xref:System.String>|  
|типа gYear|<xref:System.String>|  
|gYearMonth|<xref:System.String>|  
|hexBinary|Массив <xref:System.Byte> объектов|  
|ID|<xref:System.String>|  
|IDREF|<xref:System.String>|  
|IDREFS|<xref:System.String>|  
|int|<xref:System.Int32>|  
|целочисленный|<xref:System.String>|  
|язык|<xref:System.String>|  
|long|<xref:System.Int64>|  
|name|<xref:System.String>|  
|NCName|<xref:System.String>|  
|negativeInteger|<xref:System.String>|  
|NMTOKEN|<xref:System.String>|  
|NMTOKENS|<xref:System.String>|  
|normalizedString|<xref:System.String>|  
|nonNegativeInteger|<xref:System.String>|  
|nonPositiveInteger|<xref:System.String>|  
|NOTATION|<xref:System.String>|  
|positiveInteger|<xref:System.String>|  
|QName|<xref:System.Xml.XmlQualifiedName>|  
|длительность|<xref:System.String>|  
|string|<xref:System.String>|  
|short|<xref:System.Int16>|  
|время|<xref:System.DateTime>|  
|token|<xref:System.String>|  
|unsignedByte|<xref:System.Byte>|  
|unsignedInt|<xref:System.UInt32>|  
|unsignedLong|<xref:System.UInt64>|  
|unsignedShort|<xref:System.UInt16>|  
  
   
  
## Examples  
 В следующем примере сериализуется класс с именем `Group` , содержащий поле с именем `ExtraInfo`, который возвращает <xref:System.Collections.ArrayList>. В примере применяются два экземпляра <xref:System.Xml.Serialization.XmlElementAttribute> в поле и определяет различные <xref:System.Xml.Serialization.XmlElementAttribute.DataType%2A> значений для каждого экземпляра. Каждый экземпляр разрешает <xref:System.Xml.Serialization.XmlSerializer> для сериализации указанных типов, вставляемого в массив.  
  
 [!code-cpp[Classic XmlElementAttribute.DataType Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlElementAttribute.DataType Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlElementAttribute.DataType Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlElementAttribute.DataType Example/CS/source.cs#1)]
 [!code-vb[Classic XmlElementAttribute.DataType Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlElementAttribute.DataType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">Указанный тип данных XML-схемы не может иметь соответствия в типах данных .NET.</exception>
      </Docs>
    </Member>
    <Member MemberName="ElementName">
      <MemberSignature Language="C#" Value="public string ElementName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ElementName" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlElementAttribute.ElementName" />
      <MemberSignature Language="VB.NET" Value="Public Property ElementName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ElementName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает имя созданного XML-элемента</summary>
        <value>Имя созданного XML-элемента. По умолчанию используется идентификатор члена</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Укажите <xref:System.Xml.Serialization.XmlArrayItemAttribute.ElementName%2A> Если требуется, чтобы имя создаваемого элемента XML отличалось от идентификатора члена.  
  
 Можно задать же <xref:System.Xml.Serialization.XmlArrayAttribute.ElementName%2A> значение на более чем один член класса, если созданный XML-документ использует пространства имен XML, чтобы различать члены с одинаковыми именами. Дополнительные сведения об использовании пространства имен и имен с префиксами в документе XML см. в разделе <xref:System.Xml.Serialization.XmlSerializerNamespaces> класса.  
  
   
  
## Examples  
 В следующем примере задается <xref:System.Xml.Serialization.XmlElementAttribute.ElementName%2A> свойство <xref:System.Xml.Serialization.XmlElementAttribute> новое значение.  
  
 [!code-cpp[Classic XmlElementAttribute.ElementName Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlElementAttribute.ElementName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlElementAttribute.ElementName Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlElementAttribute.ElementName Example/CS/source.cs#1)]
 [!code-vb[Classic XmlElementAttribute.ElementName Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlElementAttribute.ElementName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.Serialization.XmlAttributeAttribute.AttributeName" />
      </Docs>
    </Member>
    <Member MemberName="Form">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaForm Form { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.Schema.XmlSchemaForm Form" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlElementAttribute.Form" />
      <MemberSignature Language="VB.NET" Value="Public Property Form As XmlSchemaForm" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaForm Form { System::Xml::Schema::XmlSchemaForm get(); void set(System::Xml::Schema::XmlSchemaForm value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaForm</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает значение, указывающее квалифицирован ли элемент.</summary>
        <value>Одно из значений перечисления <see cref="T:System.Xml.Schema.XmlSchemaForm" />. Значение по умолчанию: <see cref="F:System.Xml.Schema.XmlSchemaForm.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Serialization.XmlAttributeAttribute.Form%2A> Свойство определяет, является ли элемент XML полным или неполным. <xref:System.Xml.Serialization.XmlAttributeAttribute.Form%2A> Свойства соответствует спецификации 1999 консорциума World Wide Web (www.w3.org), «Пространства имен в XML».  
  
 Если <xref:System.Xml.Serialization.XmlAttributeAttribute.Namespace%2A> задано любое значение, попытка задать <xref:System.Xml.Serialization.XmlElementAttribute.Form%2A> свойства `XmlSchemaForm.Unqualified` приводит к возникновению исключения. Значение по умолчанию `XmlSchemaForm.None`, указывает, что <xref:System.Xml.Serialization.XmlSerializer> для проверки схемы для XML-документа определить, является ли пространство имен полным. Если схема не задает значение для отдельного элемента или атрибута, <xref:System.Xml.Serialization.XmlSerializer> использует `elementFormDefault` и `attributeFormDefault` значения, чтобы определить, является ли элемент или атрибут полным. Приведенный ниже код XML показывает схему:  
  
```  
<schema elementFormDefault="qualified"   
attributeFormDefault="unqualified"... >  
 <element name="Name"/>  
 <attribute name="Number"/>  
</schema>  
```  
  
 При <xref:System.Xml.Serialization.XmlSerializer> считывает схему, <xref:System.Xml.Serialization.XmlAttributeAttribute.Form%2A> для обоих `Name` и `Number` — `XmlSchemaForm.None`, но `Name` полным элемента во время `Number` элемент является неполным.  
  
   
  
## Examples  
 В следующем примере задается <xref:System.Xml.Serialization.XmlElementAttribute.Form%2A> свойства `XmlSchemaForm.Unqualified`.  
  
 [!code-cpp[Classic XmlElementAttribute.Form Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlElementAttribute.Form Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlElementAttribute.Form Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlElementAttribute.Form Example/CS/source.cs#1)]
 [!code-vb[Classic XmlElementAttribute.Form Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlElementAttribute.Form Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNullable">
      <MemberSignature Language="C#" Value="public bool IsNullable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNullable" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlElementAttribute.IsNullable" />
      <MemberSignature Language="VB.NET" Value="Public Property IsNullable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNullable { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает значение, которое указывает, должен ли <see cref="T:System.Xml.Serialization.XmlSerializer" /> сериализовать члена, имеющего значение <see langword="null" />, в качестве пустого тега с атрибутом <see langword="xsi:nil" /> со значением <see langword="true" />.</summary>
        <value>
          <see langword="true" />, если <see cref="T:System.Xml.Serialization.XmlSerializer" /> создает атрибут <see langword="xsi:nil" />; в противном случае — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Спецификация схемы XML для структур позволяет явным образом указывать, что отсутствует содержимое элемента в XML-документа. Такой элемент содержит атрибут `xsi:nil` значение `true`. Дополнительные сведения см. в спецификации консорциума World Wide Web (www.w3.org), «XML-схема часть 1: структуры».  
  
 Если <xref:System.Xml.Serialization.XmlElementAttribute.IsNullable%2A> свойству `true`, `xsi:nil` атрибут создается для членов класса, имеющих значение `null`. Например, если значение поля с именем `MyStringArray` для `null`, <xref:System.Xml.Serialization.XmlSerializer> создает следующий код XML.  
  
```  
<MyStringArray xsi:nil = "true" />  
```  
  
 Если <xref:System.Xml.Serialization.XmlElementAttribute.IsNullable%2A> свойство `false`, элемент XML, создается для членов класса, имеющих значение `null`.  
  
> [!NOTE]
>  Не удается применить <xref:System.Xml.Serialization.XmlElementAttribute.IsNullable%2A> свойство члену имеющему тип значения, потому что тип значения не может содержать `null`. Кроме того, невозможно задать это свойство `false` для типов значений, допускающие значение NULL. Когда такие типы являются `null`, они будут сериализованы, задав `xsi:nil` для `true`.  
  
   
  
## Examples  
 В следующем примере показано поле с <xref:System.Xml.Serialization.XmlElementAttribute> применяемый к нему и <xref:System.Xml.Serialization.XmlElementAttribute.IsNullable%2A> свойство `false`.  
  
 [!code-cpp[Classic XmlElementAttribute.IsNullable Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlElementAttribute.IsNullable Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlElementAttribute.IsNullable Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlElementAttribute.IsNullable Example/CS/source.cs#1)]
 [!code-vb[Classic XmlElementAttribute.IsNullable Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlElementAttribute.IsNullable Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlElementAttribute.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает пространство имен, присвоенное элементу XML, получаемому при сериализации класса.</summary>
        <value>Пространство имен XML-элемента.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Serialization.XmlArrayItemAttribute.Namespace%2A> Свойства соответствует спецификации консорциума World Wide Web (www.w3.org), «Пространства имен в XML».  
  
 Для создания пространств имен, связанных с префиксом, необходимо создать <xref:System.Xml.Serialization.XmlSerializerNamespaces> , содержащий пространства имен и префиксы, используемые в XML-документе. Как задать пространство имен для каждого <xref:System.Xml.Serialization.XmlArrayAttribute>, он должен соответствовать одному из пространств имен в <xref:System.Xml.Serialization.XmlSerializerNamespaces>. При генерации XML каждый массив получает префикс, связанный с указанным пространством имен.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Order">
      <MemberSignature Language="C#" Value="public int Order { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Order" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlElementAttribute.Order" />
      <MemberSignature Language="VB.NET" Value="Public Property Order As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Order { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает явный порядок сериализации или десериализации элементов.</summary>
        <value>Порядок генерирования кода.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте <xref:System.Xml.Serialization.CodeGenerationOptions.GenerateOrder> перечисления, чтобы дать указание <xref:System.Web.Services.Description.ServiceDescriptionImporter> для создания кода, который задает <xref:System.Xml.Serialization.XmlElementAttribute.Order%2A> свойства.  
  
> [!IMPORTANT]
>  Один раз <xref:System.Xml.Serialization.XmlElementAttribute.Order%2A> свойство было использовано для одного общего свойства или поля в типе, применимые ко всем открытым свойствам и полям для этого типа и всех наследуемых типов.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public Type Type { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type Type" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlElementAttribute.Type" />
      <MemberSignature Language="VB.NET" Value="Public Property Type As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ Type { Type ^ get(); void set(Type ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает тип объекта, используемый для представления элемента XML.</summary>
        <value>
          <see cref="T:System.Type" /> члена.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте <xref:System.Xml.Serialization.XmlElementAttribute.Type%2A> свойство, чтобы указать производного типа для поля или свойства.  
  
 Если поле или свойство возвращает <xref:System.Collections.ArrayList>, можно применить несколько экземпляров <xref:System.Xml.Serialization.XmlElementAttribute> к элементу. Для каждого экземпляра, установите <xref:System.Xml.Serialization.XmlElementAttribute.Type%2A> свойство с типом объекта, который может быть вставлен в массив.  
  
   
  
## Examples  
 В следующем примере используется <xref:System.Xml.Serialization.XmlElementAttribute.Type%2A> для указания производного объекта для <xref:System.Xml.Serialization.XmlElementAttribute>. В следующем примере применяются три экземпляра <xref:System.Xml.Serialization.XmlElementAttribute> к полю, которое возвращает <xref:System.Collections.ArrayList>. Каждый экземпляр указывает тип, допустимый в поле.  
  
 [!code-cpp[Classic XmlElementAttribute.Type Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlElementAttribute.Type Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlElementAttribute.Type Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlElementAttribute.Type Example/CS/source.cs#1)]
 [!code-vb[Classic XmlElementAttribute.Type Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlElementAttribute.Type Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>