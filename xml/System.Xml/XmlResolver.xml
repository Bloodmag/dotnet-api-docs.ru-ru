<Type Name="XmlResolver" FullName="System.Xml.XmlResolver">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6608ed650142dfc7e42aa29db37fe405e2f2c237" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="06/14/2018" />
    <Meta Name="ms.locfileid" Value="34241934" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class XmlResolver" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit XmlResolver extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.XmlResolver" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class XmlResolver" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlResolver abstract" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Разрешает внешние ресурсы XML, имена которых заданы с помощью универсального кода ресурса (URI).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.XmlResolver> Типа используется для разрешения внешних ресурсов XML, таких как сущности, определения типа документа (DTD) или схемы. Он также используется для обработки, добавления и импорта элементов, найденных в таблицы стилей Extensible Stylesheet Language (XSL) или параметров (XSD) языка определения схемы XML.  
  
 <xref:System.Xml.XmlResolver> обрабатывает все аспекты согласования подключения к ресурсам, включая обработку учетных данных безопасности, открытие подключения к источнику данных и возврат ресурса в форме потока или другого типа объектов. Объект, который вызывает <xref:System.Xml.XmlResolver> имеет интерпретацию потока.  
  
 <xref:System.Xml> Пространство имен включает два конкретных реализаций <xref:System.Xml.XmlResolver> класса:  
  
-   <xref:System.Xml.XmlUrlResolver> является арбитром по умолчанию для всех классов в <xref:System.Xml> пространства имен. Поддерживаются протоколы `file://` и `http://` и запросы из класса <xref:System.Net.WebRequest?displayProperty=nameWithType>. Примеры расширения класса для повышения производительности, в разделе <xref:System.Xml.XmlUrlResolver> справочной странице.  
  
-   <xref:System.Xml.XmlSecureResolver> помогает защитить другой <xref:System.Xml.XmlResolver> объекта упаковки объект object и ограничения ресурсов, которые могут обращаться к. Например <xref:System.Xml.XmlSecureResolver> можно запретить доступ конкретного веб-сайты или зоны.  
  
 Можно создать и указать собственное средство разрешения. Если не указать Сопоставитель, средство чтения использует значение по умолчанию <xref:System.Xml.XmlUrlResolver> без учетных данных пользователя.  
  
 Использование <xref:System.Xml.XmlResolver> указывается путем настройки свойства <xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=nameWithType> и передачи объекта <xref:System.Xml.XmlReaderSettings> методу <xref:System.Xml.XmlReader.Create%2A>.  
  
 Если ресурс хранится в системе, которая требует проверки подлинности, используйте <xref:System.Xml.XmlResolver.Credentials%2A?displayProperty=nameWithType> свойство, чтобы указать необходимые учетные данные.  
  
## <a name="supplying-authentication-credentials"></a>Передача учетных данных проверки подлинности  
 Файл, содержащий считываемые XML-данные могут иметь доступ ограничен. Если для доступа к сетевому ресурсу требуется проверка подлинности, можно задать нужные учетные данные с помощью свойства <xref:System.Xml.XmlResolver.Credentials%2A>. Если <xref:System.Xml.XmlResolver.Credentials%2A> свойство не задано, учетные данные будут `null`.  
  
 Например предположим, что учетные данные требуются при запросе данных из Интернета для проверки подлинности. Если виртуальный веб-каталог не разрешает анонимный доступ, необходимо задать <xref:System.Xml.XmlResolver.Credentials%2A> свойства, чтобы ввести учетные данные. В следующем примере создается <xref:System.Xml.XmlReader> объект, который использует <xref:System.Xml.XmlUrlResolver> с учетными данными по умолчанию для доступа к http://localhost/bookstore/inventory.xml сайта.  
  
 [!code-cpp[XmlReaderSettings.cctor#2](~/samples/snippets/cpp/VS_Snippets_Data/XmlReaderSettings.cctor/CPP/XmlReaderSettings.cctor.cpp#2)]
 [!code-csharp[XmlReaderSettings.cctor#2](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.cctor/CS/factory_rdr_cctor2.cs#2)]
 [!code-vb[XmlReaderSettings.cctor#2](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.cctor/VB/factory_rdr_cctor2.vb#2)]  
  
 Можно указать другие учетные данные для разных URI и добавление их в кэш. Эти учетные данные используются для проверки подлинности на различных URI-идентификаторах ресурсов вне зависимости от первоначального источника XML. Следующий пример демонстрирует добавление учетных данных в кэш.  
  
 [!code-csharp[XslCompiledTransform.Load#11](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Load/CS/Xslt_Load_v2.cs#11)]
 [!code-vb[XslCompiledTransform.Load#11](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Load/VB/Xslt_Load_v2.vb#11)]  
  
## <a name="security-considerations"></a>Замечания по безопасности  
 Рассмотрим следующие элементы, при работе с <xref:System.Xml.XmlResolver> класса.  
  
-   Объекты <xref:System.Xml.XmlResolver> могут содержать конфиденциальные сведения, например учетные данные пользователей. Следует соблюдать осторожность при кэшировании <xref:System.Xml.XmlResolver> объекты и не следует передавать <xref:System.Xml.XmlResolver> объекта недоверенному компоненту.  
  
-   При разработке свойства класса, в котором используется класс <xref:System.Xml.XmlResolver>, оно должно быть определено как свойство, доступное только на запись. Это свойство можно использовать, чтобы указывать используемый объект <xref:System.Xml.XmlResolver>, однако его нельзя использовать, чтобы вернуть объект <xref:System.Xml.XmlResolver>.  
  
-   Если приложение принимает <xref:System.Xml.XmlResolver> объектов от ненадежного кода нельзя предполагать, что URI, переданный в <xref:System.Xml.XmlResolver.GetEntity%2A> метод будет таким же, как возвращаемые <xref:System.Xml.XmlResolver.ResolveUri%2A> метод. Классы, являющиеся производными от класса <xref:System.Xml.XmlResolver>, могут переопределять метод <xref:System.Xml.XmlResolver.GetEntity%2A> и возвращать данные, отличающиеся от тех, которые содержались в исходном URI.  
  
-   Приложение может уменьшить память отказ службы угроз для <xref:System.Xml.XmlResolver.GetEntity%2A> метод путем реализации <xref:System.Runtime.InteropServices.ComTypes.IStream> , ограничивающее число считанных байтов. Это помогает защищаться от ситуации, когда вредоносный код пытается передать бесконечный поток байтов, <xref:System.Xml.XmlResolver.GetEntity%2A> метод.  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Xml.XmlUrlResolver> с учетными данными по умолчанию. Объект <xref:System.Xml.XmlReader> используется для чтения и отображения результирующего потока данных.  
  
 [!code-csharp[XmlResolver_ex#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlResolver_ex/CS/XmlResolver_ex.cs#1)]
 [!code-vb[XmlResolver_ex#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlResolver_ex/VB/XmlResolver_ex.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XmlResolver ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlResolver.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; XmlResolver();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Xml.XmlResolver" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Данный конструктор вызывается конструкторами производных классов для инициализации состояния данного типа.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Credentials">
      <MemberSignature Language="C#" Value="public virtual System.Net.ICredentials Credentials { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.ICredentials Credentials" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlResolver.Credentials" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Credentials As ICredentials" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Net::ICredentials ^ Credentials {  void set(System::Net::ICredentials ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.ICredentials</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>При переопределении в производном классе задает учетные данные для проверки подлинности веб-запросов.</summary>
        <value>Учетные данные, используемые для аутентификации веб-запросов. Если свойство не задано, значением по умолчанию становится <see langword="null" /> — <see langword="XmlResolver" /> не имеет учетных данных пользователя.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если виртуальный каталог не требует проверки подлинности, не нужно задавать это свойство. В противном случае необходимо указать учетные данные пользователя.  
  
 Следующий код C# задает учетные данные на <xref:System.Xml.XmlResolver> объекта.  
  
```csharp  
NetworkCredential nc = new NetworkCredential(UserName, SecurelyStoredPassword, Domain);  
XmlUrlResolver resolver = new XmlUrlResolver();  
resolver.Credentials = nc;  
```  
  
 Можно связать другие учетные данные с различными URI и добавление их в кэш. Затем можно использовать учетные данные для проверки подлинности для различных URI независимо от исходного источника XML.  
  
```csharp  
NetworkCredential myCred = new NetworkCredential(UserName, SecurelyStoredPassword, Domain);   
CredentialCache myCache = new CredentialCache();   
myCache.Add(new Uri("http://www.contoso.com/"), "Basic", myCred);   
myCache.Add(new Uri("http://app.contoso.com/"), "Basic", myCred);  
XmlUrlResolver resolver = new XmlUrlResolver();  
resolver.Credentials = myCache;  
```  
  
   
  
## Examples  
 В разделе <xref:System.Xml.XmlUrlResolver.Credentials%2A?displayProperty=nameWithType> пример, который использует это свойство.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Net.NetworkCredential" />
      </Docs>
    </Member>
    <Member MemberName="GetEntity">
      <MemberSignature Language="C#" Value="public abstract object GetEntity (Uri absoluteUri, string role, Type ofObjectToReturn);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetEntity(class System.Uri absoluteUri, string role, class System.Type ofObjectToReturn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlResolver.GetEntity(System.Uri,System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetEntity (absoluteUri As Uri, role As String, ofObjectToReturn As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ GetEntity(Uri ^ absoluteUri, System::String ^ role, Type ^ ofObjectToReturn);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="absoluteUri" Type="System.Uri" />
        <Parameter Name="role" Type="System.String" />
        <Parameter Name="ofObjectToReturn" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="absoluteUri">URI, возвращаемый методом <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" />.</param>
        <param name="role">В настоящий момент не используется.</param>
        <param name="ofObjectToReturn">Тип возвращаемого объекта. В текущей версии возвращаются только объекты System.IO.Stream.</param>
        <summary>При переопределении в производном классе отображает URI в объект, содержащий текущий ресурс.</summary>
        <returns>Объект потока или значение <see langword="null" />, если в качестве типа не указан поток.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод используется, когда вызывающий объект хочет отобразить заданный URI в объект, содержащий фактический ресурс, представленный этим URI. Тип объекта является согласованным; Однако реализация всегда должен поддерживать <xref:System.IO.Stream?displayProperty=nameWithType>.  
  
 Асинхронная версия данного метода, в разделе <xref:System.Xml.XmlResolver.GetEntityAsync%2A>.  
  
> [!IMPORTANT]
>  Приложение может уменьшить память отказ службы угроз для <xref:System.Xml.XmlResolver.GetEntity%2A> метод путем реализации <xref:System.Runtime.InteropServices.ComTypes.IStream> , ограничивающее число считанных байтов. Это помогает защищаться от ситуации, когда вредоносный код пытается передать бесконечный поток байтов, <xref:System.Xml.XmlResolver.GetEntity%2A> метод.  
  
   
  
## Examples  
 В разделе <xref:System.Xml.XmlUrlResolver.GetEntity%2A?displayProperty=nameWithType> пример использования этого метода.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">Параметр <paramref name="ofObjectToReturn" /> не относится к типу <see langword="Stream" />.</exception>
        <exception cref="T:System.UriFormatException">Заданный URI не является абсолютным.</exception>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="absoluteUri" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.Exception">Есть ошибка среды выполнения (например, разрыв подключения к серверу).</exception>
      </Docs>
    </Member>
    <Member MemberName="GetEntityAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;object&gt; GetEntityAsync (Uri absoluteUri, string role, Type ofObjectToReturn);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;object&gt; GetEntityAsync(class System.Uri absoluteUri, string role, class System.Type ofObjectToReturn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlResolver.GetEntityAsync(System.Uri,System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEntityAsync (absoluteUri As Uri, role As String, ofObjectToReturn As Type) As Task(Of Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task&lt;System::Object ^&gt; ^ GetEntityAsync(Uri ^ absoluteUri, System::String ^ role, Type ^ ofObjectToReturn);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="absoluteUri" Type="System.Uri" />
        <Parameter Name="role" Type="System.String" />
        <Parameter Name="ofObjectToReturn" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="absoluteUri">URI, возвращаемый методом <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" />.</param>
        <param name="role">В настоящий момент не используется.</param>
        <param name="ofObjectToReturn">Тип возвращаемого объекта. В текущей версии возвращаются только объекты <see cref="T:System.IO.Stream" />.</param>
        <summary>Асинхронно сопоставляет URI с объектом, содержащим фактический ресурс.</summary>
        <returns>Объект потока или значение <see langword="null" />, если в качестве типа не указан поток.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это асинхронная версия объекта <xref:System.Xml.XmlResolver.GetEntity%2A>, с той же функции. Чтобы использовать этот метод, необходимо задать <xref:System.Xml.XmlReaderSettings.Async%2A> флаг `true`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolveUri">
      <MemberSignature Language="C#" Value="public virtual Uri ResolveUri (Uri baseUri, string relativeUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Uri ResolveUri(class System.Uri baseUri, string relativeUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ResolveUri (baseUri As Uri, relativeUri As String) As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Uri ^ ResolveUri(Uri ^ baseUri, System::String ^ relativeUri);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseUri" Type="System.Uri" />
        <Parameter Name="relativeUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="baseUri">Базовый URI, используемый для разрешения относительного URI.</param>
        <param name="relativeUri">URI, которые нужно разрешить. URI может быть как абсолютным, так и относительным. Если код URI является абсолютным, это значение замещает значение <c>baseUri</c>. Если относительным, то абсолютный код URI является сочетанием этого значения и <c>baseUri</c>.</param>
        <summary>Когда переопределено в производном классе, разрешает абсолютный URI из базового и относительного URI.</summary>
        <returns>Абсолютный код URI или значение <see langword="null" />, если невозможно разрешить относительный URI.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Абсолютный URI может использоваться как базовый URI для последующих запросов для сущностей, которые относятся к данному URI.  
  
   
  
## Examples  
 В разделе <xref:System.Xml.XmlUrlResolver.GetEntity%2A?displayProperty=nameWithType> пример использования этого метода.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Свойство <paramref name="relativeUri" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SupportsType">
      <MemberSignature Language="C#" Value="public virtual bool SupportsType (Uri absoluteUri, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SupportsType(class System.Uri absoluteUri, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlResolver.SupportsType(System.Uri,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool SupportsType(Uri ^ absoluteUri, Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="absoluteUri" Type="System.Uri" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="absoluteUri">Универсальный код ресурса.</param>
        <param name="type">Возвращаемый тип.</param>
        <summary>Позволяет сопоставителю возвращать типы, отличные от <see cref="T:System.IO.Stream" />.</summary>
        <returns>Значение <see langword="true" />, если <paramref name="type" /> поддерживается; в противном случае — значение <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>