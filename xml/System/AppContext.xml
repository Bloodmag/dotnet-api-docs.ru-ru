<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="AppContext.xml" source-language="en-US" target-language="ru-RU">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5de2b5eddaaa2bb43dcc7b608c490b41f3a8c1713.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">de2b5eddaaa2bb43dcc7b608c490b41f3a8c1713</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.AppContext">
          <source>Provides members for setting and retrieving data about an application's context.</source>
          <target state="translated">Предоставляет члены для задания и получения данных о контексте приложения.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppContext">
          <source>The <ph id="ph1">&lt;xref:System.AppContext&gt;</ph> class enables library writers to provide a uniform opt-out mechanism for new functionality for their users.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.AppContext&gt;</ph> Класс позволяет авторам библиотек предоставлять согласованный механизм явного отказа для новых функциональных возможностей.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppContext">
          <source>It establishes a loosely-coupled contract between components in order to communicate an opt-out request.</source>
          <target state="translated">Он устанавливает слабо связанный контракт между компонентами для передачи запроса на явный отказ.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppContext">
          <source>This capability is typically important when a change is made to existing functionality.</source>
          <target state="translated">Эта возможность обычно важна при внесении изменений в существующие функции.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppContext">
          <source>Conversely, there is already an implicit opt-in for new functionality.</source>
          <target state="translated">В свою очередь, режим неявного согласия для новых функциональных возможностей уже существует.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppContext">
          <source>AppContext for library developers</source>
          <target state="translated">Параметров AppContext разработчикам библиотек</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppContext">
          <source>Libraries use  the <ph id="ph1">&lt;xref:System.AppContext&gt;</ph> class to define and expose compatibility switches, while library users can set those switches to affect the library behavior.</source>
          <target state="translated">Использование библиотек <ph id="ph1">&lt;xref:System.AppContext&gt;</ph> переключается класса для определения и предоставления совместимости, во время библиотеки пользователи могут задавать эти параметры для влияния на поведение библиотек.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppContext">
          <source>By default, libraries provide the new functionality, and they only alter it (that is, they provide the previous functionality) if the switch is set.</source>
          <target state="translated">По умолчанию библиотеки предоставляют новые функции и изменяют их (то есть предоставляют прежние функции) только в том случае, если установлен параметр.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppContext">
          <source>This allows libraries to provide new behavior for an existing API while continuing to support callers who depend on the previous behavior.</source>
          <target state="translated">Это позволяет библиотекам для предоставления новое поведение для существующих API, продолжая поддерживать вызывающим объектам, которые зависят от предыдущего поведения.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppContext">
          <source>Defining the switch name</source>
          <target state="translated">Определение имени параметра</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppContext">
          <source>The most common way to allow consumers of your library to opt out of a change of behavior is to define a named switch.</source>
          <target state="translated">Наиболее распространенный способ позволяют потребителям библиотеки отказаться от изменений поведения является определение именованного переключателя.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppContext">
          <source>Its <ph id="ph1">`value`</ph> element is a name/value pair that consists of the name of a switch and its <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> value.</source>
          <target state="translated">Его <ph id="ph1">`value`</ph> элемент представляет собой пару имя значение, состоящее из имени параметра и его <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> значение.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppContext">
          <source>By default, the switch is always implicitly <ph id="ph1">`false`</ph>, which provides the new behavior (and makes the new behavior opt-in by default).</source>
          <target state="translated">По умолчанию параметр всегда имеет неявное <ph id="ph1">`false`</ph>, который определяет новое поведение (и определяет новое поведение участия в программе по умолчанию).</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppContext">
          <source>Setting the switch to <ph id="ph1">`true`</ph> enables it, which provides the legacy behavior.</source>
          <target state="translated">Установите значение параметра <ph id="ph1">`true`</ph> позволяет ему, который содержит устаревшее поведение.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppContext">
          <source>Explicitly setting the switch to <ph id="ph1">`false`</ph> also provides the new behavior.</source>
          <target state="translated">После явного задания коммутатор <ph id="ph1">`false`</ph> также определяет новое поведение.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppContext">
          <source>It's beneficial to use a consistent format for switch names, since they are a formal contract exposed by a library.</source>
          <target state="translated">Рекомендуется использовать согласованный формат для имен коммутатора, так как они представляют собой формальный контракт, предоставляемый библиотекой.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppContext">
          <source>The following are two obvious formats.</source>
          <target state="translated">Ниже приведены два очевидных формата:</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppContext">
          <source><bpt id="p1">*</bpt>Switch<ept id="p1">*</ept>.<bpt id="p2">*</bpt>namespace<ept id="p2">*</ept>.<bpt id="p3">*</bpt>switchname<ept id="p3">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>параметр<ept id="p1">*</ept>.<bpt id="p2">*</bpt>пространство_имен<ept id="p2">*</ept> <bpt id="p3">*</bpt> имя_параметра<ept id="p3">*</ept></target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppContext">
          <source><bpt id="p1">*</bpt>Switch<ept id="p1">*</ept>.<bpt id="p2">*</bpt>library<ept id="p2">*</ept>.<bpt id="p3">*</bpt>switchname<ept id="p3">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>параметр<ept id="p1">*</ept>.<bpt id="p2">*</bpt>библиотека<ept id="p2">*</ept>.<bpt id="p3">*</bpt>имя_параметра<ept id="p3">*</ept></target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppContext">
          <source>Once you define and document the switch, callers can use it by using the registry, by adding an  <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>AppContextSwitchOverrides&gt;<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md)</ept> element to their application configuration file, or by calling the  <ph id="ph2">&lt;xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType&gt;</ph> method programmatically.</source>
          <target state="translated">После определения и документов коммутатора, вызывающая сторона может использовать его с помощью реестра, добавив <bpt id="p1">[</bpt> <ph id="ph1">\&lt;</ph>AppContextSwitchOverrides &gt;<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md)</ept> элемент их файл конфигурации приложения или путем вызова <ph id="ph2">&lt;xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType&gt;</ph> метод программными средствами.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppContext">
          <source>See the <bpt id="p1">[</bpt>AppContext for library consumers<ept id="p1">](#ForConsumers)</ept> section for more information about how callers use and set the value of <ph id="ph1">&lt;xref:System.AppContext&gt;</ph> configuration switches.</source>
          <target state="translated">В разделе <bpt id="p1">[</bpt>параметров AppContext для пользователей библиотеки<ept id="p1">](#ForConsumers)</ept> Дополнительные сведения о способах вызывающим объектам использовать и задать значение <ph id="ph1">&lt;xref:System.AppContext&gt;</ph> параметров конфигурации.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppContext">
          <source>When the common language runtime runs an application, it automatically reads the registry's compatibility settings and loads the application configuration file in order to populate the application's <ph id="ph1">&lt;xref:System.AppContext&gt;</ph> instance.</source>
          <target state="translated">При запуске приложения общеязыковая среда выполнения автоматически считывает параметры совместимости реестра и загружает файл конфигурации приложения для заполнения приложения <ph id="ph1">&lt;xref:System.AppContext&gt;</ph> экземпляра.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppContext">
          <source>Because the <ph id="ph1">&lt;xref:System.AppContext&gt;</ph> instance is populated either programmatically by the caller or by the runtime, you do not have to take any action, such as calling the <ph id="ph2">&lt;xref:System.AppContext.SetSwitch%2A&gt;</ph> method,  to configure the <ph id="ph3">&lt;xref:System.AppContext&gt;</ph> instance.</source>
          <target state="translated">Поскольку <ph id="ph1">&lt;xref:System.AppContext&gt;</ph> экземпляр заполняется программно вызывающим или средой выполнения, не нужно предпринимать никаких действий, например при вызове <ph id="ph2">&lt;xref:System.AppContext.SetSwitch%2A&gt;</ph> метод для настройки <ph id="ph3">&lt;xref:System.AppContext&gt;</ph> экземпляра.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppContext">
          <source>Checking the setting</source>
          <target state="translated">Проверка параметра</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppContext">
          <source>You can then check if a consumer has declared the value of the switch and act appropriately by calling the <ph id="ph1">&lt;xref:System.AppContext.TryGetSwitch%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Затем можно проверить, если потребитель объявило значение коммутатора и соответствующим образом путем вызова act <ph id="ph1">&lt;xref:System.AppContext.TryGetSwitch%2A?displayProperty=nameWithType&gt;</ph> метод.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppContext">
          <source>The method returns <ph id="ph1">`true`</ph> if the <ph id="ph2">`switchName`</ph> argument is found, and when the method returns, its <ph id="ph3">`isEnabled`</ph> argument indicates the value of the switch.</source>
          <target state="translated">Метод возвращает <ph id="ph1">`true`</ph> Если <ph id="ph2">`switchName`</ph> аргумента найдено, и когда этот метод возвращает его <ph id="ph3">`isEnabled`</ph> аргумент указывает значение переключателя.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppContext">
          <source>Otherwise, the method returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">В противном случае метод возвращает значение <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppContext">
          <source>An example</source>
          <target state="translated">Пример</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppContext">
          <source>The following example illustrates the use of the <ph id="ph1">&lt;xref:System.AppContext&gt;</ph> class to allow the customer to choose the original behavior of a library method.</source>
          <target state="translated">Следующий пример иллюстрирует использование <ph id="ph1">&lt;xref:System.AppContext&gt;</ph> класс, позволяющий выбрать метод библиотеки исходного поведения клиент.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppContext">
          <source>The following is version 1.0 of a library named <ph id="ph1">`StringLibrary`</ph>.</source>
          <target state="translated">Ниже приведен версии 1.0 библиотеки с именем <ph id="ph1">`StringLibrary`</ph>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppContext">
          <source>It defines a <ph id="ph1">`SubstringStartsAt`</ph> method that performs an ordinal comparison to determine the starting index of a substring within a larger string.</source>
          <target state="translated">Он определяет <ph id="ph1">`SubstringStartsAt`</ph> метод, который выполняет порядковое сравнение, чтобы определить начальный индекс подстроки в длинной строке.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppContext">
          <source>The following example then uses the library to find the starting index of the substring "archæ" in "The archaeologist".</source>
          <target state="translated">В следующем примере затем используется библиотеки для поиска начальный индекс подстроки «archæ» в «archaeologist».</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppContext">
          <source>Because the method performs an ordinal comparison, the substring cannot be found.</source>
          <target state="translated">Так как этот метод выполняет порядковое сравнение, не удается найти подстроку.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppContext">
          <source>Version 2 of the library, however, changes the <ph id="ph1">`SubstringStartsAt`</ph> method to use culture-sensitive comparison.</source>
          <target state="translated">Версия 2 библиотеки, однако изменения <ph id="ph1">`SubstringStartsAt`</ph> метод, используемый для сравнения с учетом языка и региональных параметров.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppContext">
          <source>When the app is recompiled to run against the new version of the library, it now reports that the substring "archæ" is found at index 4 in "The archaeologist".</source>
          <target state="translated">При повторной компиляции приложения для запуска в новую версию библиотеки, теперь сообщает обнаружения подстроку «archæ» с индексом 4 в «archaeologist».</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppContext">
          <source>This change can be prevented from breaking the applications that depend on the original behavior by defining an <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>AppContextSwitchOverrides&gt;<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md)</ept> switch.</source>
          <target state="translated">Это изменение может быть запрещено работу приложений, зависящих от исходное поведение, определив <bpt id="p1">[</bpt> <ph id="ph1">\&lt;</ph>AppContextSwitchOverrides &gt;<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md)</ept> переключения.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppContext">
          <source>In this case, the switch is named <ph id="ph1">`StringLibrary.DoNotUseCultureSensitiveComparison`</ph>.</source>
          <target state="translated">В этом случае параметр с именем <ph id="ph1">`StringLibrary.DoNotUseCultureSensitiveComparison`</ph>.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppContext">
          <source>Its default value, <ph id="ph1">`false`</ph>, indicates that the library should perform its version 2.0 culture-sensitive comparison.</source>
          <target state="translated">Значением по умолчанию <ph id="ph1">`false`</ph>, указывает, что библиотеки должен выполнить его сравнение с учетом языка и региональных параметров версии 2.0.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppContext">
          <source><ph id="ph1">`true`</ph> indicates that the library should perform its version 1.0 ordinal comparison.</source>
          <target state="translated"><ph id="ph1">`true`</ph> Указывает, что библиотеке должен выполнить порядковое сравнение его версии 1.0.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppContext">
          <source>A slight modification of the previous code allows the library consumer to set the switch to determine the kind of comparison the method performs.</source>
          <target state="translated">Незначительное изменение приведенного выше кода позволяет задать переключатель, чтобы определить тип сравнения, который выполняет метод потребителю библиотеки.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppContext">
          <source>If application can then use the following configuration file to restore the version 1.0 behavior.</source>
          <target state="translated">Если приложение затем может использовать следующий файл конфигурации для восстановления поведения версии 1.0.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppContext">
          <source>When the application is run with the configuration file present, it produces the following output:</source>
          <target state="translated">При запуске приложения в файле конфигурации отсутствует, она дает следующий результат:</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppContext">
          <source>AppContext for library consumers</source>
          <target state="translated">Параметров AppContext для пользователей библиотеки</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppContext">
          <source>If you are the consumer of a library, the <ph id="ph1">&lt;xref:System.AppContext&gt;</ph> class  allows you to take advantage of a library or library method's opt-out mechanism for new functionality.</source>
          <target state="translated">Если потребитель библиотеки <ph id="ph1">&lt;xref:System.AppContext&gt;</ph> позволяет воспользоваться преимуществами библиотеки или метод библиотеки механизм явного отказа для новых функциональных возможностей.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppContext">
          <source>Individual methods of the class library that you are calling define particular switches that enable or disable a new behavior.</source>
          <target state="translated">Отдельные методы библиотеки классов, который вы вызываете определить конкретного коммутаторов, включающие или отключающие новое поведение.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppContext">
          <source>The value of the switch  is a Boolean.</source>
          <target state="translated">Значение параметра является логическим.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppContext">
          <source>If it is <ph id="ph1">`false`</ph>, which is typically the default value, the new behavior is enabled; if it is <ph id="ph2">`true`</ph>, the new behavior is disabled, and the member behaves as it did previously.</source>
          <target state="translated">Если это <ph id="ph1">`false`</ph>, которой обычно является значение по умолчанию, новое поведение включено; Если это <ph id="ph2">`true`</ph>, новое поведение отключена, и элемент ведет себя по-другому.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppContext">
          <source>You can set the value of a switch in one of three ways:</source>
          <target state="translated">Значение параметра можно задать одним из трех способов:</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppContext">
          <source>By calling the <ph id="ph1">&lt;xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType&gt;</ph> method in your code.</source>
          <target state="translated">Путем вызова <ph id="ph1">&lt;xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType&gt;</ph> метод в коде.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppContext">
          <source>The <ph id="ph1">`switchName`</ph> argument defines the switch name, and the <ph id="ph2">`isEnabled`</ph> property defines the value of the switch.</source>
          <target state="translated"><ph id="ph1">`switchName`</ph> Аргумент определяет имя коммутатора и <ph id="ph2">`isEnabled`</ph> свойство определяет значение переключателя.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppContext">
          <source>Because <ph id="ph1">&lt;xref:System.AppContext&gt;</ph> is a static class, it is available on a per-application domain basis.</source>
          <target state="translated">Поскольку <ph id="ph1">&lt;xref:System.AppContext&gt;</ph> является статическим классом, он доступен на основе на уровне домена приложения.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppContext">
          <source>Calling the <ph id="ph1">&lt;xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType&gt;</ph> has application scope; that is, it affects only the application.</source>
          <target state="translated">Вызов <ph id="ph1">&lt;xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType&gt;</ph> имеет область приложения; то есть, он влияет только приложение.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppContext">
          <source>By adding an <ph id="ph1">`&lt;AppContextSwitchOverrides&gt;`</ph> element to the <bpt id="p1">[</bpt><ph id="ph2">\&lt;</ph>runtime&gt;<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md)</ept> section of your app.config file.</source>
          <target state="translated">Добавив <ph id="ph1">`&lt;AppContextSwitchOverrides&gt;`</ph> элемент <bpt id="p1">[</bpt> <ph id="ph2">\&lt;</ph>среды выполнения &gt;<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md)</ept> раздел файла app.config.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppContext">
          <source>The switch has a single attribute, <ph id="ph1">`value`</ph>, whose value is a string that represents a key/value pair containing both the switch name and its value.</source>
          <target state="translated">Параметр имеет один атрибут, <ph id="ph1">`value`</ph>, значение которого является строка, которая представляет пару ключ значение, содержащее имя параметра и его значение.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppContext">
          <source>To define multiple switches, separate each switch's key/value pair in the <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>AppContextSwitchOverrides&gt;<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md)</ept> element's <ph id="ph2">`value`</ph> attribute with a semicolon.</source>
          <target state="translated">Для определения нескольких коммутаторов, разделения пары ключ значение каждого коммутатора в <bpt id="p1">[</bpt> <ph id="ph1">\&lt;</ph>AppContextSwitchOverrides &gt;<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md)</ept> элемента <ph id="ph2">`value`</ph> атрибут точкой с запятой.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppContext">
          <source>In that case, the <ph id="ph1">`&lt;AppContextSwitchOverrides&gt;`</ph> element has the following format:</source>
          <target state="translated">В этом случае <ph id="ph1">`&lt;AppContextSwitchOverrides&gt;`</ph> элемент имеет следующий формат:</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppContext">
          <source>Using the <ph id="ph1">`&lt;AppContextSwitchOverrides&gt;`</ph> element to define a configuration setting has application scope; that is, it affects only the application.</source>
          <target state="translated">С помощью <ph id="ph1">`&lt;AppContextSwitchOverrides&gt;`</ph> у элемента для определения параметра конфигурации области приложения, то есть оно влияет на только приложение.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppContext">
          <source>For information on the switches defined by the .NET Framework, see the <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>AppContextSwitchOverrides&gt; element<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md)</ept>.</source>
          <target state="translated">Сведения на коммутаторах, определенные в .NET Framework см. в разделе <bpt id="p1">[</bpt> <ph id="ph1">\&lt;</ph>AppContextSwitchOverrides &gt; элемент<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md)</ept>.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppContext">
          <source>By adding a string value whose name is the name of the switch to the <ph id="ph1">`HKLM\SOFTWARE\Microsoft\.NETFramework\AppContext`</ph> key in the registry.</source>
          <target state="translated">Добавив строковое значение, имя которой представляет имя коммутатора для <ph id="ph1">`HKLM\SOFTWARE\Microsoft\.NETFramework\AppContext`</ph> ключа в реестре.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppContext">
          <source>Its value must be the string representation of a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> that can be parsed by the <ph id="ph2">&lt;xref:System.Boolean.Parse%2A?displayProperty=nameWithType&gt;</ph> method; that is, it must be "True", "true", "False", or "false".</source>
          <target state="translated">Его значение должно быть строковым представлением <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> , может быть проанализирован <ph id="ph2">&lt;xref:System.Boolean.Parse%2A?displayProperty=nameWithType&gt;</ph> метода, то есть он должен быть «True», «true», «False» или «false».</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppContext">
          <source>If the runtime encounters any other value, it ignores the switch.</source>
          <target state="translated">Если среда выполнения обнаруживает любое другое значение, он игнорирует ключ.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppContext">
          <source>Using the registry to define an <ph id="ph1">&lt;xref:System.AppContext&gt;</ph> switch has machine scope; that is, it affects every application running on the machine.</source>
          <target state="translated">Использование реестра для определения <ph id="ph1">&lt;xref:System.AppContext&gt;</ph> коммутатор имеет область машины; то есть, он влияет на каждое приложение выполняется на компьютере.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppContext">
          <source>If you set the same switch in more than one way, the order of precedence for determining which setting overrides the others is:</source>
          <target state="translated">Если же коммутатору задано более чем одним способом, является порядок очередности для определения параметра, который переопределяет другие:</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppContext">
          <source>The programmatic setting.</source>
          <target state="translated">Программный параметр.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppContext">
          <source>The setting in the app config file.</source>
          <target state="translated">Параметр в файле конфигурации приложения.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppContext">
          <source>The registry setting.</source>
          <target state="translated">Параметр реестра.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppContext">
          <source>The following is a simple application that passes a file URI to the <ph id="ph1">&lt;xref:System.IO.Path.GetDirectoryName%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Вот простое приложение, которое передает файл URI для <ph id="ph1">&lt;xref:System.IO.Path.GetDirectoryName%2A?displayProperty=nameWithType&gt;</ph> метод.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppContext">
          <source>When run under the .NET Framework 4.6, it throws an <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph> because <ph id="ph2">`file://`</ph> is no longer a valid part of a file path.</source>
          <target state="translated">Когда работает в среде .NET Framework 4.6, она вызывает <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph> из-за <ph id="ph2">`file://`</ph> больше не является допустимой частью пути к файлу.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppContext">
          <source>To restore the method's previous behavior and prevent the exception, you can add the <ph id="ph1">`Switch.System.IO.UseLegacyPathHandling`</ph> switch to the application configuration file for the example:</source>
          <target state="translated">Чтобы восстановить прежнее поведение данного метода и избежать возникновения исключения, можно добавить <ph id="ph1">`Switch.System.IO.UseLegacyPathHandling`</ph> переключитесь в файле конфигурации приложения, например:</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppContext">
          <source>See also</source>
          <target state="translated">См. также</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppContext">
          <source><bpt id="p1">[</bpt>AppContext switch<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Коммутатор параметров AppContext<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md)</ept></target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="P:System.AppContext.BaseDirectory">
          <source>Gets the pathname of the base directory that the assembly resolver uses to probe for assemblies.</source>
          <target state="translated">Возвращает путь к базовому каталогу, в котором сопоставитель сборок производит поиск.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppContext.BaseDirectory">
          <source>the pathname of the base directory that the assembly resolver uses to probe for assemblies.</source>
          <target state="translated">Путь к базовому каталогу, в котором сопоставитель сборок производит поиск.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppContext.BaseDirectory">
          <source>This is a per application domain property.</source>
          <target state="translated">Это каждого свойства домена приложения.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppContext.BaseDirectory">
          <source>Its value corresponds to the <ph id="ph1">&lt;xref:System.AppDomain.BaseDirectory%2A?displayProperty=nameWithType&gt;</ph> property of the current application domain.</source>
          <target state="translated">Его значение соответствует <ph id="ph1">&lt;xref:System.AppDomain.BaseDirectory%2A?displayProperty=nameWithType&gt;</ph> свойства текущего домена приложения.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.AppContext.GetData(System.String)">
          <source>The name of the data element.</source>
          <target state="translated">Имя элемента данных.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.AppContext.GetData(System.String)">
          <source>Returns the value of the named data element assigned to the current application domain.</source>
          <target state="translated">Возвращает значение именованного элемента данных, назначенное текущему домену приложения.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.AppContext.GetData(System.String)">
          <source>The value of <ph id="ph1">&lt;paramref name="name" /&gt;</ph>, if <ph id="ph2">&lt;paramref name="name" /&gt;</ph> identifies a named value; otherwise, <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Значение <ph id="ph1">&lt;paramref name="name" /&gt;</ph>, если <ph id="ph2">&lt;paramref name="name" /&gt;</ph> определяет именованное значение; в противном случае — <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.AppContext.SetSwitch(System.String,System.Boolean)">
          <source>The name of the switch.</source>
          <target state="translated">Имя переключателя.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.AppContext.SetSwitch(System.String,System.Boolean)">
          <source>The value of the switch.</source>
          <target state="translated">Значение переключателя.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.AppContext.SetSwitch(System.String,System.Boolean)">
          <source>Sets the value of a switch.</source>
          <target state="translated">Задает значение переключателя.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppContext.SetSwitch(System.String,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.AppContext&gt;</ph> class enables library writers to provide a uniform opt-out mechanism for new functionality for their users.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.AppContext&gt;</ph> Класс позволяет авторам библиотек предоставлять согласованный механизм явного отказа для новых функциональных возможностей.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppContext.SetSwitch(System.String,System.Boolean)">
          <source>It establishes a loosely-coupled contract between components in order to communicate an opt-out request.</source>
          <target state="translated">Он устанавливает слабо связанный контракт между компонентами для передачи запроса на явный отказ.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppContext.SetSwitch(System.String,System.Boolean)">
          <source>This capability is typically important when a change is made to existing functionality.</source>
          <target state="translated">Эта возможность обычно важна при внесении изменений в существующие функции.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppContext.SetSwitch(System.String,System.Boolean)">
          <source>Conversely, there is already an implicit opt-in for new functionality.</source>
          <target state="translated">В свою очередь, режим неявного согласия для новых функциональных возможностей уже существует.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppContext.SetSwitch(System.String,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.AppContext.SetSwitch%2A&gt;</ph> method is called by an application (or a library) to declare the value of a switch (which is always a <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> value) that a dependent library defines.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.AppContext.SetSwitch%2A&gt;</ph> Метод вызывается методом приложения (или библиотека), чтобы объявить значение параметра (который всегда имеет <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> значение), определяемое зависимой библиотекой.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppContext.SetSwitch(System.String,System.Boolean)">
          <source>The switch is always implicitly <ph id="ph1">`false`</ph>, which provides the new behavior.</source>
          <target state="translated">Параметр всегда имеет неявное <ph id="ph1">`false`</ph>, который определяет новое поведение.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppContext.SetSwitch(System.String,System.Boolean)">
          <source>Setting the switch to <ph id="ph1">`true`</ph> enables it, which provides the legacy behavior.</source>
          <target state="translated">Установите значение параметра <ph id="ph1">`true`</ph> позволяет ему, который содержит устаревшее поведение.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppContext.SetSwitch(System.String,System.Boolean)">
          <source>Explicitly setting the switch to <ph id="ph1">`false`</ph> also provides the new behavior.</source>
          <target state="translated">После явного задания коммутатор <ph id="ph1">`false`</ph> также определяет новое поведение.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppContext.SetSwitch(System.String,System.Boolean)">
          <source>The dependent library can then check the value of the switch by calling the <ph id="ph1">&lt;xref:System.AppContext.TryGetSwitch%2A&gt;</ph> method.</source>
          <target state="translated">Зависимые библиотеки затем можно проверить значение переключателя, вызвав <ph id="ph1">&lt;xref:System.AppContext.TryGetSwitch%2A&gt;</ph> метод.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppContext.SetSwitch(System.String,System.Boolean)">
          <source>It's beneficial to use a consistent format for switch names, since they are a formal contract exposed by a library.</source>
          <target state="translated">Рекомендуется использовать согласованный формат для имен коммутатора, так как они представляют собой формальный контракт, предоставляемый библиотекой.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppContext.SetSwitch(System.String,System.Boolean)">
          <source>The following are two obvious formats.</source>
          <target state="translated">Ниже приведены два очевидных формата:</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppContext.SetSwitch(System.String,System.Boolean)">
          <source><bpt id="p1">*</bpt>Switch<ept id="p1">*</ept>.<bpt id="p2">*</bpt>namespace<ept id="p2">*</ept>.<bpt id="p3">*</bpt>switchname<ept id="p3">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>параметр<ept id="p1">*</ept>.<bpt id="p2">*</bpt>пространство_имен<ept id="p2">*</ept> <bpt id="p3">*</bpt> имя_параметра<ept id="p3">*</ept></target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppContext.SetSwitch(System.String,System.Boolean)">
          <source><bpt id="p1">*</bpt>Switch<ept id="p1">*</ept>.<bpt id="p2">*</bpt>library<ept id="p2">*</ept>.<bpt id="p3">*</bpt>switchname<ept id="p3">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>параметр<ept id="p1">*</ept>.<bpt id="p2">*</bpt>библиотека<ept id="p2">*</ept>.<bpt id="p3">*</bpt>имя_параметра<ept id="p3">*</ept></target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppContext.SetSwitch(System.String,System.Boolean)">
          <source>In addition to setting the value of a switch programmatically, it can also be set:</source>
          <target state="translated">Помимо Программная установка значения параметра, его можно также задать:</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppContext.SetSwitch(System.String,System.Boolean)">
          <source>By adding the switch name and value to the <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>AppContextSwitchOverrides&gt;<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md)</ept> element in the <bpt id="p2">[</bpt><ph id="ph2">\&lt;</ph>runtime&gt;<ept id="p2">](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md)</ept> section of an application configuration file.</source>
          <target state="translated">Путем добавления имени параметра и значение для <bpt id="p1">[</bpt> <ph id="ph1">\&lt;</ph>AppContextSwitchOverrides &gt;<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md)</ept> элемент в <bpt id="p2">[</bpt> <ph id="ph2">\&lt;</ph>среды выполнения &gt;<ept id="p2">](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md)</ept> раздел файла конфигурации приложения.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppContext.SetSwitch(System.String,System.Boolean)">
          <source>For example, the following defines a switch named <ph id="ph1">`Libraries.FPLibrary.UseExactFloatingPointComparison`</ph> whose value is <ph id="ph2">`False`</ph>.</source>
          <target state="translated">Например, следующий код определяет параметр с именем <ph id="ph1">`Libraries.FPLibrary.UseExactFloatingPointComparison`</ph> , значение которого является <ph id="ph2">`False`</ph>.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppContext.SetSwitch(System.String,System.Boolean)">
          <source>By adding a string value whose name is the name of the switch to the <ph id="ph1">`HKLM\SOFTWARE\Microsoft\.NETFramework\AppContext`</ph> key in the registry.</source>
          <target state="translated">Добавив строковое значение, имя которой представляет имя коммутатора для <ph id="ph1">`HKLM\SOFTWARE\Microsoft\.NETFramework\AppContext`</ph> ключа в реестре.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppContext.SetSwitch(System.String,System.Boolean)">
          <source>Its value must be the string representation of a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> that can be parsed by the <ph id="ph2">&lt;xref:System.Boolean.Parse%2A?displayProperty=nameWithType&gt;</ph> method; that is, it must be "True", "true", "False", or "false".</source>
          <target state="translated">Его значение должно быть строковым представлением <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> , может быть проанализирован <ph id="ph2">&lt;xref:System.Boolean.Parse%2A?displayProperty=nameWithType&gt;</ph> метода, то есть он должен быть «True», «true», «False» или «false».</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppContext.SetSwitch(System.String,System.Boolean)">
          <source>If <ph id="ph1">`switchName`</ph> already exists, its value is overwritten by the <ph id="ph2">`isEnabled`</ph> argument.</source>
          <target state="translated">Если <ph id="ph1">`switchName`</ph> уже существует, его значение перезаписывается <ph id="ph2">`isEnabled`</ph> аргумент.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppContext.SetSwitch(System.String,System.Boolean)">
          <source>That is, the most recent call to the <ph id="ph1">&lt;xref:System.AppContext.SetSwitch%2A&gt;</ph> method overrides the value defined in the registry, in an app configuration file, or by previous calls to the <ph id="ph2">&lt;xref:System.AppContext.SetSwitch%2A&gt;</ph> method.</source>
          <target state="translated">То есть, последний вызов <ph id="ph1">&lt;xref:System.AppContext.SetSwitch%2A&gt;</ph> метод переопределяет значение, определенное в реестре, в файле конфигурации приложения или с предыдущих вызовов <ph id="ph2">&lt;xref:System.AppContext.SetSwitch%2A&gt;</ph> метод.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppContext.SetSwitch(System.String,System.Boolean)">
          <source>The following line of code sets a switch named <ph id="ph1">`Switch.AmazingLib.ThrowOnException`</ph> to <ph id="ph2">`true`</ph>, which enables a legacy behavior.</source>
          <target state="translated">Следующий код задает параметр с именем <ph id="ph1">`Switch.AmazingLib.ThrowOnException`</ph> для <ph id="ph2">`true`</ph>, который позволяет устаревшее поведение.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppContext.SetSwitch(System.String,System.Boolean)">
          <source>The library can then check whether a library consumer has set the value of the switch by calling the <ph id="ph1">&lt;xref:System.AppContext.TryGetSwitch%2A&gt;</ph> method.</source>
          <target state="translated">Библиотеку можно затем проверить, установлен ли потребитель библиотека значение переключателя путем вызова <ph id="ph1">&lt;xref:System.AppContext.TryGetSwitch%2A&gt;</ph> метод.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.AppContext.SetSwitch(System.String,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="switchName" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Свойство <ph id="ph1">&lt;paramref name="switchName" /&gt;</ph> имеет значение <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.AppContext.SetSwitch(System.String,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="switchName" /&gt;</ph> is <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>.</source>
          <target state="translated">Свойство <ph id="ph1">&lt;paramref name="switchName" /&gt;</ph> имеет значение <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="P:System.AppContext.TargetFrameworkName">
          <source>Gets the name of the framework version targeted by the current application.</source>
          <target state="translated">Получает имя целевой версии платформы текущего приложения.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppContext.TargetFrameworkName">
          <source>The name of the framework version targeted by the current application.</source>
          <target state="translated">Имя целевой версии платформы текущего приложения.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppContext.TargetFrameworkName">
          <source>The name of the target framework version corresponds to the value of the <ph id="ph1">&lt;xref:System.Runtime.Versioning.TargetFrameworkAttribute.FrameworkName%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">Имя требуемой версии .NET framework, соответствует значению <ph id="ph1">&lt;xref:System.Runtime.Versioning.TargetFrameworkAttribute.FrameworkName%2A?displayProperty=nameWithType&gt;</ph> свойство.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppContext.TargetFrameworkName">
          <source>For a list of target framework names for the .NET Framework, see the <bpt id="p1">[</bpt><ph id="ph1">&amp;lt;</ph>supportedRuntime<ph id="ph2">&amp;gt;</ph> Element<ept id="p1">](~/docs/framework/configure-apps/file-schema/startup/supportedruntime-element.md)</ept> element.</source>
          <target state="translated">Список имен платформы .NET framework для платформы .NET Framework см. в разделе <bpt id="p1">[</bpt> <ph id="ph1">&amp;lt;</ph>supportedRuntime<ph id="ph2">&amp;gt;</ph> элемент<ept id="p1">](~/docs/framework/configure-apps/file-schema/startup/supportedruntime-element.md)</ept> элемента.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.AppContext.TryGetSwitch(System.String,System.Boolean@)">
          <source>The name of the switch.</source>
          <target state="translated">Имя переключателя.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.AppContext.TryGetSwitch(System.String,System.Boolean@)">
          <source>When this method returns, contains the value of <bpt id="p1">&lt;c&gt;</bpt>switchName<ept id="p1">&lt;/c&gt;</ept> if <bpt id="p2">&lt;c&gt;</bpt>switchName<ept id="p2">&lt;/c&gt;</ept> was found, or <ph id="ph1">&lt;see langword="false" /&gt;</ph> if <bpt id="p3">&lt;c&gt;</bpt>switchName<ept id="p3">&lt;/c&gt;</ept> was not found.</source>
          <target state="translated">При возвращении этого метода содержит значение для <bpt id="p1">&lt;c&gt;</bpt>switchName<ept id="p1">&lt;/c&gt;</ept>, если <bpt id="p2">&lt;c&gt;</bpt>switchName<ept id="p2">&lt;/c&gt;</ept> найден, или <ph id="ph1">&lt;see langword="false" /&gt;</ph>, если <bpt id="p3">&lt;c&gt;</bpt>switchName<ept id="p3">&lt;/c&gt;</ept> не найден.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.AppContext.TryGetSwitch(System.String,System.Boolean@)">
          <source>This parameter is passed uninitialized.</source>
          <target state="translated">Этот параметр передается неинициализированным.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.AppContext.TryGetSwitch(System.String,System.Boolean@)">
          <source>Tries to get the value of a switch.</source>
          <target state="translated">Предпринимает попытку получения значения переключателя.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.AppContext.TryGetSwitch(System.String,System.Boolean@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="switchName" /&gt;</ph> was set and the <ph id="ph3">&lt;paramref name="isEnabled" /&gt;</ph> argument contains the value of the switch; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, если для <ph id="ph2">&lt;paramref name="switchName" /&gt;</ph> задано значение и аргумент <ph id="ph3">&lt;paramref name="isEnabled" /&gt;</ph> содержит значение переключателя; в противном случае — <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppContext.TryGetSwitch(System.String,System.Boolean@)">
          <source>The <ph id="ph1">&lt;xref:System.AppContext&gt;</ph> class enables library writers to provide a uniform opt-out mechanism for new functionality for their users.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.AppContext&gt;</ph> Класс позволяет авторам библиотек предоставлять согласованный механизм явного отказа для новых функциональных возможностей.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppContext.TryGetSwitch(System.String,System.Boolean@)">
          <source>It establishes a loosely-coupled contract between components in order to communicate an opt-out request.</source>
          <target state="translated">Он устанавливает слабо связанный контракт между компонентами для передачи запроса на явный отказ.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppContext.TryGetSwitch(System.String,System.Boolean@)">
          <source>This capability is typically important when a change is made to existing functionality.</source>
          <target state="translated">Эта возможность обычно важна при внесении изменений в существующие функции.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppContext.TryGetSwitch(System.String,System.Boolean@)">
          <source>Conversely, there is already an implicit opt-in for new functionality.</source>
          <target state="translated">В свою очередь, режим неявного согласия для новых функциональных возможностей уже существует.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppContext.TryGetSwitch(System.String,System.Boolean@)">
          <source>The common language runtime automatically populates the switches assigned to an <ph id="ph1">&lt;xref:System.AppContext&gt;</ph> instance by reading the registry and the application's configuration file.</source>
          <target state="translated">Общеязыковая среда выполнения автоматически заполняет коммутаторов, назначенный <ph id="ph1">&lt;xref:System.AppContext&gt;</ph> экземпляра путем чтения реестра и файл конфигурации приложения.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppContext.TryGetSwitch(System.String,System.Boolean@)">
          <source>The value of these switches can then be overridden, and new switches added, by calling the <ph id="ph1">&lt;xref:System.AppContext.SetSwitch%2A&gt;</ph> method.</source>
          <target state="translated">Затем можно переопределить значения этих параметров, и добавлены новые параметры, путем вызова <ph id="ph1">&lt;xref:System.AppContext.SetSwitch%2A&gt;</ph> метод.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppContext.TryGetSwitch(System.String,System.Boolean@)">
          <source>A library calls the <ph id="ph1">&lt;xref:System.AppContext.TryGetSwitch%2A&gt;</ph> method to check whether its consumers have declared the value of the switch and then act appropriately on it.</source>
          <target state="translated">Вызывает библиотеку <ph id="ph1">&lt;xref:System.AppContext.TryGetSwitch%2A&gt;</ph> метод для проверки ли ее пользователей было объявлено значение переключателя, а затем соответствующим образом реагировать на него.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppContext.TryGetSwitch(System.String,System.Boolean@)">
          <source>By default, if the switch is not defined, the new functionality is enabled..</source>
          <target state="translated">По умолчанию параметр не определен, новые функциональные возможности включения...</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppContext.TryGetSwitch(System.String,System.Boolean@)">
          <source>If the switch is defined and its value is <ph id="ph1">`false`</ph>, the new functionality is also enabled.</source>
          <target state="translated">Если определен параметр и его значение равно <ph id="ph1">`false`</ph>, новые функциональные возможности включена.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppContext.TryGetSwitch(System.String,System.Boolean@)">
          <source>If its value is <ph id="ph1">`true`</ph>, the legacy behavior is enabled.</source>
          <target state="translated">Если его значение равно <ph id="ph1">`true`</ph>, устаревшее поведение включен.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppContext.TryGetSwitch(System.String,System.Boolean@)">
          <source>The following example determines whether a library consumer has set a switch named <ph id="ph1">`Switch.AmazingLib.ThrowOnException`</ph>.</source>
          <target state="translated">В следующем примере определяется, задан ли потребитель библиотеки коммутатор с именем <ph id="ph1">`Switch.AmazingLib.ThrowOnException`</ph>.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.AppContext.TryGetSwitch(System.String,System.Boolean@)">
          <source><ph id="ph1">&lt;paramref name="switchName" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Свойство <ph id="ph1">&lt;paramref name="switchName" /&gt;</ph> имеет значение <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.AppContext.TryGetSwitch(System.String,System.Boolean@)">
          <source><ph id="ph1">&lt;paramref name="switchName" /&gt;</ph> is <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>.</source>
          <target state="translated">Свойство <ph id="ph1">&lt;paramref name="switchName" /&gt;</ph> имеет значение <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>