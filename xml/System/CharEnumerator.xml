<Type Name="CharEnumerator" FullName="System.CharEnumerator">
  <TypeSignature Language="C#" Value="public sealed class CharEnumerator : ICloneable, System.Collections.Generic.IEnumerator&lt;char&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit CharEnumerator extends System.Object implements class System.Collections.Generic.IEnumerator`1&lt;char&gt;, class System.Collections.IEnumerator, class System.ICloneable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.CharEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CharEnumerator&#xA;Implements ICloneable, IEnumerator(Of Char)" />
  <TypeSignature Language="C++ CLI" Value="public ref class CharEnumerator sealed : ICloneable, System::Collections::Generic::IEnumerator&lt;char&gt;" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerator&lt;System.Char&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="c9bc4-101">Поддерживает итерацию по объекту <see cref="T:System.String" /> и чтение отдельных его символов.</span><span class="sxs-lookup"><span data-stu-id="c9bc4-101">Supports iterating over a <see cref="T:System.String" /> object and reading its individual characters.</span></span> <span data-ttu-id="c9bc4-102">Этот класс не наследуется.</span><span class="sxs-lookup"><span data-stu-id="c9bc4-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9bc4-103">Объект <xref:System.CharEnumerator> предоставляет доступ только для чтения к символов в указанный <xref:System.String> объекта.</span><span class="sxs-lookup"><span data-stu-id="c9bc4-103">A <xref:System.CharEnumerator> provides read-only access to the characters in a referenced <xref:System.String> object.</span></span> <span data-ttu-id="c9bc4-104">Например `foreach` оператор из языков программирования Microsoft Visual Basic и C#, который выполняется перебор элементов коллекции, извлекает <xref:System.CharEnumerator> из <xref:System.String> объект для просмотра всех знаков в том, что объект.</span><span class="sxs-lookup"><span data-stu-id="c9bc4-104">For example, the `foreach` statement of the Microsoft Visual Basic and C# programming languages, which iterates through the elements of a collection, retrieves a <xref:System.CharEnumerator> from a <xref:System.String> object in order to iterate through the characters in that object.</span></span>  
  
 <span data-ttu-id="c9bc4-105">Нет открытого конструктора для <xref:System.CharEnumerator>.</span><span class="sxs-lookup"><span data-stu-id="c9bc4-105">There is no public constructor for <xref:System.CharEnumerator>.</span></span> <span data-ttu-id="c9bc4-106">Вместо этого необходимо вызвать <xref:System.String> объекта <xref:System.String.GetEnumerator%2A> метод, чтобы получить <xref:System.CharEnumerator> , инициализируется для ссылки на строку.</span><span class="sxs-lookup"><span data-stu-id="c9bc4-106">Instead, call a <xref:System.String> object's <xref:System.String.GetEnumerator%2A> method to obtain a <xref:System.CharEnumerator> that is initialized to reference the string.</span></span>  
  
 <span data-ttu-id="c9bc4-107">Объект <xref:System.CharEnumerator> обслуживает внутренний индекс для символов в строке <xref:System.CharEnumerator> ссылки.</span><span class="sxs-lookup"><span data-stu-id="c9bc4-107">A <xref:System.CharEnumerator> maintains an internal index to the characters in the string the <xref:System.CharEnumerator> references.</span></span> <span data-ttu-id="c9bc4-108">Состояние индекса будет недопустимым, если оно ссылается на позицию знака логически перед первым символом или после последнего символа в строке и допустимым, если символ в строке.</span><span class="sxs-lookup"><span data-stu-id="c9bc4-108">The state of the index is invalid when it references a character position logically before the first character or after the last character in the string, and valid when it references a character within the string.</span></span> <span data-ttu-id="c9bc4-109">Индекс инициализируется на позицию логически перед первым символом и устанавливается на позицию после последнего символа после завершения итерации.</span><span class="sxs-lookup"><span data-stu-id="c9bc4-109">The index is initialized to a position logically before the first character, and is set to a position after the last character when the iteration is complete.</span></span> <span data-ttu-id="c9bc4-110">Исключение при попытке доступа к символу, пока используется недопустимый индекс.</span><span class="sxs-lookup"><span data-stu-id="c9bc4-110">An exception is thrown if you attempt to access a character while the index is invalid.</span></span>  
  
 <span data-ttu-id="c9bc4-111"><xref:System.CharEnumerator.MoveNext%2A> Метод индекс увеличивает на единицу, поэтому первый и последующие символы осуществляется в свою очередь.</span><span class="sxs-lookup"><span data-stu-id="c9bc4-111">The <xref:System.CharEnumerator.MoveNext%2A> method increments the index by one, so the first and subsequent characters are accessed in turn.</span></span> <span data-ttu-id="c9bc4-112"><xref:System.CharEnumerator.Reset%2A> Метод задает индекс на позицию логически перед первым знаком.</span><span class="sxs-lookup"><span data-stu-id="c9bc4-112">The <xref:System.CharEnumerator.Reset%2A> method sets the index to a position logically before the first character.</span></span> <span data-ttu-id="c9bc4-113"><xref:System.CharEnumerator.Current%2A> Свойство возвращает символ, в настоящее время обращается по индексу.</span><span class="sxs-lookup"><span data-stu-id="c9bc4-113">The <xref:System.CharEnumerator.Current%2A> property retrieves the character currently referenced by index.</span></span> <span data-ttu-id="c9bc4-114"><xref:System.CharEnumerator.Clone%2A> Метод создает копию объекта <xref:System.CharEnumerator>.</span><span class="sxs-lookup"><span data-stu-id="c9bc4-114">The <xref:System.CharEnumerator.Clone%2A> method creates a copy of the <xref:System.CharEnumerator>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c9bc4-115">Несколько независимых экземпляров <xref:System.CharEnumerator> через один или несколько потоков могут получать доступ к одному экземпляру из <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="c9bc4-115">Several independent instances of <xref:System.CharEnumerator> across one or more threads can have access to a single instance of <xref:System.String>.</span></span> <span data-ttu-id="c9bc4-116">Этот класс применяется для поддержки <xref:System.Collections.IEnumerator> интерфейса.</span><span class="sxs-lookup"><span data-stu-id="c9bc4-116">This class is implemented to support the <xref:System.Collections.IEnumerator> interface.</span></span> <span data-ttu-id="c9bc4-117">Дополнительные сведения об использовании перечислителя см. в разделе <xref:System.Collections.IEnumerator> раздела.</span><span class="sxs-lookup"><span data-stu-id="c9bc4-117">For more information regarding the use of an enumerator, see the <xref:System.Collections.IEnumerator> topic.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c9bc4-118">В следующем примере используется <xref:System.CharEnumerator> класса для перечисления отдельных символов в строке.</span><span class="sxs-lookup"><span data-stu-id="c9bc4-118">The following example uses the <xref:System.CharEnumerator> class to enumerate the individual characters in a string.</span></span> <span data-ttu-id="c9bc4-119">Он создает <xref:System.CharEnumerator> путем вызова метода <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> метода переходит от одного символа к следующему путем вызова <xref:System.CharEnumerator.MoveNext%2A> метода и отображает текущий символ, получая значение <xref:System.CharEnumerator.Current%2A> свойства.</span><span class="sxs-lookup"><span data-stu-id="c9bc4-119">It instantiates a <xref:System.CharEnumerator> object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> method, moves from one character to the next by calling the <xref:System.CharEnumerator.MoveNext%2A> method, and displays the current character by retrieving the value of the <xref:System.CharEnumerator.Current%2A> property.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 <span data-ttu-id="c9bc4-120">Обратите внимание, что та же операция может быть более интуитивно выполнена с помощью `foreach` (в C#) или `For Each` (в Visual Basic), как приведенный ниже пример показывает.</span><span class="sxs-lookup"><span data-stu-id="c9bc4-120">Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.String" />
    <altmember cref="T:System.Collections.IEnumerator" />
    <altmember cref="T:System.Collections.IEnumerable" />
    <altmember cref="T:System.Collections.ICollection" />
  </Docs>
  <Members>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c9bc4-121">Создает копию текущего объекта <see cref="T:System.CharEnumerator" />.</span><span class="sxs-lookup"><span data-stu-id="c9bc4-121">Creates a copy of the current <see cref="T:System.CharEnumerator" /> object.</span></span></summary>
        <returns><span data-ttu-id="c9bc4-122">Объект <see cref="T:System.Object" />, являющийся копией текущего объекта <see cref="T:System.CharEnumerator" />.</span><span class="sxs-lookup"><span data-stu-id="c9bc4-122">An <see cref="T:System.Object" /> that is a copy of the current <see cref="T:System.CharEnumerator" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9bc4-123">Возвращаемое значение является копией данного экземпляра <xref:System.CharEnumerator> и его текущего состояния.</span><span class="sxs-lookup"><span data-stu-id="c9bc4-123">The return value is a copy of this instance of <xref:System.CharEnumerator> and its current state.</span></span> <span data-ttu-id="c9bc4-124">Это полезно для сохранения состояния во время итерации по <xref:System.String> объекта.</span><span class="sxs-lookup"><span data-stu-id="c9bc4-124">This is useful for saving your state while iterating through a <xref:System.String> object.</span></span>  
  
 <span data-ttu-id="c9bc4-125">Например, предположим, что приложение использует исходный экземпляр <xref:System.CharEnumerator> для итерации по каждому символу в <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="c9bc4-125">For example, suppose your application uses an original instance of <xref:System.CharEnumerator> to iterate through each character in a <xref:System.String>.</span></span> <span data-ttu-id="c9bc4-126">При обнаружении уникального знака, приложение приостанавливает обработку и вызывает <xref:System.CharEnumerator.Clone%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="c9bc4-126">When some unique character is encountered, your application pauses processing and invokes the <xref:System.CharEnumerator.Clone%2A> method.</span></span> <span data-ttu-id="c9bc4-127">По сути, это экономит <xref:System.CharEnumerator> индекс объекта в <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="c9bc4-127">In effect, this saves the <xref:System.CharEnumerator> object's index in the <xref:System.String>.</span></span>  
  
 <span data-ttu-id="c9bc4-128">Приложение использует копию, чтобы перейти к другой части `String` для выполнения вспомогательной обработки.</span><span class="sxs-lookup"><span data-stu-id="c9bc4-128">Your application uses the clone to navigate to another part of the `String` to perform some auxiliary processing.</span></span> <span data-ttu-id="c9bc4-129">Копия теряет позицию, где остановилась обработка является побочным эффектом данного перемещения.</span><span class="sxs-lookup"><span data-stu-id="c9bc4-129">The side-effect of this navigation is the clone loses track of the position where processing stopped.</span></span> <span data-ttu-id="c9bc4-130">Однако после завершения вспомогательной обработки приложение удаляет копию и использует исходный <xref:System.CharEnumerator> экземпляра для продолжения работы с <xref:System.String> где остановилась исходная обработка.</span><span class="sxs-lookup"><span data-stu-id="c9bc4-130">However, when the auxiliary processing is complete, your application discards the clone and uses the original <xref:System.CharEnumerator> instance to resume working on the <xref:System.String> where the original processing stopped.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c9bc4-131">Этот метод реализуется для поддержки <xref:System.ICloneable> интерфейса.</span><span class="sxs-lookup"><span data-stu-id="c9bc4-131">This method is implemented to support the <xref:System.ICloneable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public char Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char Current" />
      <MemberSignature Language="DocId" Value="P:System.CharEnumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char Current { char get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IEnumerator`1.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c9bc4-132">Возвращает текущий символ в строке, обходимой данным объектом <see cref="T:System.CharEnumerator" />.</span><span class="sxs-lookup"><span data-stu-id="c9bc4-132">Gets the currently referenced character in the string enumerated by this <see cref="T:System.CharEnumerator" /> object.</span></span></summary>
        <value><span data-ttu-id="c9bc4-133">Возвращает символ Юникод, на которой указывает данный объект <see cref="T:System.CharEnumerator" />.</span><span class="sxs-lookup"><span data-stu-id="c9bc4-133">The Unicode character currently referenced by this <see cref="T:System.CharEnumerator" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9bc4-134"><xref:System.CharEnumerator> Класс обслуживает внутренний индекс перечисленной строки и <xref:System.CharEnumerator.Current%2A> свойство возвращает символ, который в данный момент ссылается индекс.</span><span class="sxs-lookup"><span data-stu-id="c9bc4-134">The <xref:System.CharEnumerator> class maintains an internal index to the enumerated string, and the <xref:System.CharEnumerator.Current%2A> property returns the character that is currently referenced by the index.</span></span> <span data-ttu-id="c9bc4-135">Данное свойство должно вызывается только в том случае, если индекс является допустимым; в противном случае создается исключение.</span><span class="sxs-lookup"><span data-stu-id="c9bc4-135">This property should be invoked only when the index is valid; otherwise, an exception is thrown.</span></span>  
  
 <span data-ttu-id="c9bc4-136">Индекс всегда является недопустимым для пустой строки (»»).</span><span class="sxs-lookup"><span data-stu-id="c9bc4-136">The index is always invalid for an empty string ("").</span></span> <span data-ttu-id="c9bc4-137">Индекс также является недопустимым после <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> или <xref:System.CharEnumerator.Reset%2A> вызывается метод.</span><span class="sxs-lookup"><span data-stu-id="c9bc4-137">The index is also invalid after the <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> or <xref:System.CharEnumerator.Reset%2A> method is called.</span></span> <span data-ttu-id="c9bc4-138">После вызова одного из этих методов вызова неуправляемого кода <xref:System.CharEnumerator.MoveNext%2A> метод, чтобы настроить индекс первого символа в перечисленной строки.</span><span class="sxs-lookup"><span data-stu-id="c9bc4-138">After either of these methods is called, invoke the <xref:System.CharEnumerator.MoveNext%2A> method to adjust the index to the first character in the enumerated string.</span></span> <span data-ttu-id="c9bc4-139">Индекс является допустимым всякий раз, когда <xref:System.CharEnumerator.MoveNext%2A> возвращает `true`.</span><span class="sxs-lookup"><span data-stu-id="c9bc4-139">The index is valid whenever the <xref:System.CharEnumerator.MoveNext%2A> method returns `true`.</span></span>  
  
 <span data-ttu-id="c9bc4-140"><xref:System.CharEnumerator.Current%2A> Перемещение индекса и последовательных вызовов не <xref:System.CharEnumerator.Current%2A> возвращают один и тот же знак до <xref:System.CharEnumerator.MoveNext%2A>, <xref:System.CharEnumerator.Reset%2A>, или <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> вызывается.</span><span class="sxs-lookup"><span data-stu-id="c9bc4-140"><xref:System.CharEnumerator.Current%2A> does not move the index, and consecutive calls to <xref:System.CharEnumerator.Current%2A> return the same character until <xref:System.CharEnumerator.MoveNext%2A>, <xref:System.CharEnumerator.Reset%2A>, or <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> is called.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c9bc4-141">В следующем примере используется <xref:System.CharEnumerator> класса для перечисления отдельных символов в строке.</span><span class="sxs-lookup"><span data-stu-id="c9bc4-141">The following example uses the <xref:System.CharEnumerator> class to enumerate the individual characters in a string.</span></span> <span data-ttu-id="c9bc4-142">Он создает <xref:System.CharEnumerator> путем вызова метода <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> метода переходит от одного символа к следующему путем вызова <xref:System.CharEnumerator.MoveNext%2A> метода и отображает текущий символ, получая значение <xref:System.CharEnumerator.Current%2A> свойства.</span><span class="sxs-lookup"><span data-stu-id="c9bc4-142">It instantiates a <xref:System.CharEnumerator> object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> method, moves from one character to the next by calling the <xref:System.CharEnumerator.MoveNext%2A> method, and displays the current character by retrieving the value of the <xref:System.CharEnumerator.Current%2A> property.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 <span data-ttu-id="c9bc4-143">Обратите внимание, что та же операция может быть более интуитивно выполнена с помощью `foreach` (в C#) или `For Each` (в Visual Basic), как приведенный ниже пример показывает.</span><span class="sxs-lookup"><span data-stu-id="c9bc4-143">Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c9bc4-144">Индекс является недопустимым; это означает, что он находится перед первым или после последнего символа обходимой строки.</span><span class="sxs-lookup"><span data-stu-id="c9bc4-144">The index is invalid; that is, it is before the first or after the last character of the enumerated string.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c9bc4-145">Освобождает все ресурсы, используемые текущим экземпляром класса <see cref="T:System.CharEnumerator" />.</span><span class="sxs-lookup"><span data-stu-id="c9bc4-145">Releases all resources used by the current instance of the <see cref="T:System.CharEnumerator" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9bc4-146">Вызовите метод <xref:System.CharEnumerator.Dispose%2A> по окончании использования класса <xref:System.CharEnumerator>.</span><span class="sxs-lookup"><span data-stu-id="c9bc4-146">Call <xref:System.CharEnumerator.Dispose%2A> when you are finished using the <xref:System.CharEnumerator>.</span></span> <span data-ttu-id="c9bc4-147">Метод <xref:System.CharEnumerator.Dispose%2A> оставляет класс <xref:System.CharEnumerator> в непригодном для использования состоянии.</span><span class="sxs-lookup"><span data-stu-id="c9bc4-147">The <xref:System.CharEnumerator.Dispose%2A> method leaves the <xref:System.CharEnumerator> in an unusable state.</span></span> <span data-ttu-id="c9bc4-148">После вызова метода <xref:System.CharEnumerator.Dispose%2A>, необходимо освободить все ссылки на <xref:System.CharEnumerator> , сборщик мусора мог освободить память, <xref:System.CharEnumerator> занимаемую.</span><span class="sxs-lookup"><span data-stu-id="c9bc4-148">After calling <xref:System.CharEnumerator.Dispose%2A>, you must release all references to the <xref:System.CharEnumerator> so the garbage collector can reclaim the memory that the <xref:System.CharEnumerator> was occupying.</span></span>  
  
 <span data-ttu-id="c9bc4-149">Дополнительные сведения см. в разделе [очистки неуправляемых ресурсов](~/docs/standard/garbage-collection/unmanaged.md) и [метода](~/docs/standard/garbage-collection/implementing-dispose.md).</span><span class="sxs-lookup"><span data-stu-id="c9bc4-149">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c9bc4-150">Всегда вызывайте метод <xref:System.CharEnumerator.Dispose%2A> перед освобождением последней ссылки на класс <xref:System.CharEnumerator>.</span><span class="sxs-lookup"><span data-stu-id="c9bc4-150">Always call <xref:System.CharEnumerator.Dispose%2A> before you release your last reference to the <xref:System.CharEnumerator>.</span></span> <span data-ttu-id="c9bc4-151">В противном случае используемые им ресурсы не будут освобождены до тех пор, пока сборщик мусора не вызовет для объекта <xref:System.CharEnumerator> метод `Finalize`.</span><span class="sxs-lookup"><span data-stu-id="c9bc4-151">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.CharEnumerator> object's `Finalize` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveNext();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.MoveNext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c9bc4-152">Увеличивает внутренний индекс текущего объекта <see cref="T:System.CharEnumerator" />, чтобы он указывал на следующий символ перечисляемой строки.</span><span class="sxs-lookup"><span data-stu-id="c9bc4-152">Increments the internal index of the current <see cref="T:System.CharEnumerator" /> object to the next character of the enumerated string.</span></span></summary>
        <returns>
          <span data-ttu-id="c9bc4-153">Значение <see langword="true" /> если индекс успешно увеличен и находится в пределах перечисляемой строки; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="c9bc4-153"><see langword="true" /> if the index is successfully incremented and within the enumerated string; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9bc4-154"><xref:System.CharEnumerator> Класс обслуживает внутренний индекс перечисленной строки и <xref:System.CharEnumerator.MoveNext%2A> метод индекс увеличивает на единицу.</span><span class="sxs-lookup"><span data-stu-id="c9bc4-154">The <xref:System.CharEnumerator> class maintains an internal index to the enumerated string, and the <xref:System.CharEnumerator.MoveNext%2A> method increments the index by one.</span></span> <span data-ttu-id="c9bc4-155">Вызовите <xref:System.CharEnumerator.MoveNext%2A> после вызова <xref:System.String.GetEnumerator%2A> или <xref:System.CharEnumerator.Reset%2A> увеличивается текущее положение символа на первый символ в перечисленной строки.</span><span class="sxs-lookup"><span data-stu-id="c9bc4-155">Call <xref:System.CharEnumerator.MoveNext%2A> after calling <xref:System.String.GetEnumerator%2A> or <xref:System.CharEnumerator.Reset%2A> to increment the current character position to the first character in the enumerated string.</span></span> <span data-ttu-id="c9bc4-156">Убедитесь, что возвращается значение `true` определить допустимость текущая позиция символа.</span><span class="sxs-lookup"><span data-stu-id="c9bc4-156">Check that the return value is `true` to determine that the current character position is valid.</span></span>  
  
 <span data-ttu-id="c9bc4-157">Если индекс уже после последнего символа обходимой строки, он не изменяется и `false` возвращается.</span><span class="sxs-lookup"><span data-stu-id="c9bc4-157">If the index is already beyond the last character of the enumerated string, the index is not changed and `false` is returned.</span></span>  
  
 <span data-ttu-id="c9bc4-158">Обратите внимание, что, если перечисленная строка пуста ("»), состояние <xref:System.CharEnumerator> всегда является недопустимым.</span><span class="sxs-lookup"><span data-stu-id="c9bc4-158">Notice that if the enumerated string is empty (""), the state of the <xref:System.CharEnumerator> is always invalid.</span></span> <span data-ttu-id="c9bc4-159">Это обусловлено внутренний индекс <xref:System.CharEnumerator> изначально находится перед первым символом обходимой строки и поэтому является недопустимым.</span><span class="sxs-lookup"><span data-stu-id="c9bc4-159">This is because the internal index for the <xref:System.CharEnumerator> is initially before the first character of the enumerated string and is therefore invalid.</span></span> <span data-ttu-id="c9bc4-160"><xref:System.CharEnumerator.MoveNext%2A> логически устанавливает индекс после последнего (несуществующего) знака перечисленной строки, который также является недопустимым.</span><span class="sxs-lookup"><span data-stu-id="c9bc4-160"><xref:System.CharEnumerator.MoveNext%2A> logically sets the index after the last (nonexistent) character of the enumerated string which is also invalid.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c9bc4-161">В следующем примере используется <xref:System.CharEnumerator> класса для перечисления отдельных символов в строке.</span><span class="sxs-lookup"><span data-stu-id="c9bc4-161">The following example uses the <xref:System.CharEnumerator> class to enumerate the individual characters in a string.</span></span> <span data-ttu-id="c9bc4-162">Он создает <xref:System.CharEnumerator> путем вызова метода <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> метода переходит от одного символа к следующему путем вызова <xref:System.CharEnumerator.MoveNext%2A> метода и отображает текущий символ, получая значение <xref:System.CharEnumerator.Current%2A> свойства.</span><span class="sxs-lookup"><span data-stu-id="c9bc4-162">It instantiates a <xref:System.CharEnumerator> object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> method, moves from one character to the next by calling the <xref:System.CharEnumerator.MoveNext%2A> method, and displays the current character by retrieving the value of the <xref:System.CharEnumerator.Current%2A> property.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 <span data-ttu-id="c9bc4-163">Обратите внимание, что та же операция может быть более интуитивно выполнена с помощью `foreach` (в C#) или `For Each` (в Visual Basic), как приведенный ниже пример показывает.</span><span class="sxs-lookup"><span data-stu-id="c9bc4-163">Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c9bc4-164">Инициализирует индекс позицией, логически расположенной перед первым символом обходимой строки.</span><span class="sxs-lookup"><span data-stu-id="c9bc4-164">Initializes the index to a position logically before the first character of the enumerated string.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9bc4-165"><xref:System.CharEnumerator> Класс обслуживает внутренний индекс перечисленной строки и <xref:System.CharEnumerator.Reset%2A> метод задает индекс в недопустимом состоянии.</span><span class="sxs-lookup"><span data-stu-id="c9bc4-165">The <xref:System.CharEnumerator> class maintains an internal index to the enumerated string, and the <xref:System.CharEnumerator.Reset%2A> method sets the index to the invalid state.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Current">
      <MemberSignature Language="C#" Value="object System.Collections.IEnumerator.Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IEnumerator.Current" />
      <MemberSignature Language="DocId" Value="P:System.CharEnumerator.System#Collections#IEnumerator#Current" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Current As Object Implements IEnumerator.Current" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.IEnumerator.Current { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IEnumerator.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c9bc4-166">Возвращает текущий символ в строке, обходимой данным объектом <see cref="T:System.CharEnumerator" />.</span><span class="sxs-lookup"><span data-stu-id="c9bc4-166">Gets the currently referenced character in the string enumerated by this <see cref="T:System.CharEnumerator" /> object.</span></span> <span data-ttu-id="c9bc4-167">Описание этого члена см. в разделе <see cref="P:System.Collections.IEnumerator.Current" />.</span><span class="sxs-lookup"><span data-stu-id="c9bc4-167">For a description of this member, see <see cref="P:System.Collections.IEnumerator.Current" />.</span></span></summary>
        <value><span data-ttu-id="c9bc4-168">Упакованный символ Юникод, на которой указывает данный объект <see cref="T:System.CharEnumerator" />.</span><span class="sxs-lookup"><span data-stu-id="c9bc4-168">The boxed Unicode character currently referenced by this <see cref="T:System.CharEnumerator" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9bc4-169">Этот член представляет собой явную реализацию члена интерфейса.</span><span class="sxs-lookup"><span data-stu-id="c9bc4-169">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="c9bc4-170">Он может использоваться, только если экземпляр <xref:System.CharEnumerator> приведен к типу интерфейса <xref:System.Collections.IEnumerator>.</span><span class="sxs-lookup"><span data-stu-id="c9bc4-170">It can be used only when the <xref:System.CharEnumerator> instance is cast to an <xref:System.Collections.IEnumerator> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c9bc4-171">Перечисление не начиналось.</span><span class="sxs-lookup"><span data-stu-id="c9bc4-171">Enumeration has not started.</span></span>  
  
 <span data-ttu-id="c9bc4-172">- или -</span><span class="sxs-lookup"><span data-stu-id="c9bc4-172">-or-</span></span>  
  
 <span data-ttu-id="c9bc4-173">Обход завершен.</span><span class="sxs-lookup"><span data-stu-id="c9bc4-173">Enumeration has ended.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>