<Type Name="DateTime" FullName="System.DateTime">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0e0f91e3e6e3eea5c50028b600eadc103187a955" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30731468" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct DateTime : IComparable, IComparable&lt;DateTime&gt;, IConvertible, IEquatable&lt;DateTime&gt;, IFormattable, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit DateTime extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.DateTime&gt;, class System.IConvertible, class System.IEquatable`1&lt;valuetype System.DateTime&gt;, class System.IFormattable, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.DateTime" />
  <TypeSignature Language="VB.NET" Value="Public Structure DateTime&#xA;Implements IComparable, IComparable(Of DateTime), IConvertible, IEquatable(Of DateTime), IFormattable, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public value class DateTime : IComparable, IComparable&lt;DateTime&gt;, IConvertible, IEquatable&lt;DateTime&gt;, IFormattable, System::Runtime::Serialization::ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.DateTime&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IConvertible</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.DateTime&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Представляет текущее время, обычно выраженное как дата и время суток.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

## <a name="quick-links-to-example-code"></a>Быстрые ссылки на пример кода

[!INCLUDE[interactive-note](~/includes/csharp-interactive-note.md)]

Здесь приведено несколько примеров использования `DateTime` типа:

**Примеры инициализации**      
 [Вызова конструктора](#initialization-01)     
 [Вызвать конструктор по умолчанию](#initialization-02)     
 [Назначение на основе возвращаемого значения](#initialization-03)     
 [Строка, представляющая дату и время синтаксического анализа](#initialization-04)     
 [Синтаксис Visual Basic для инициализации даты и времени](#initialization-05)     

**Форматирование `DateTime` объектов в виде строк**  
 [Используйте этот формат времени по умолчанию](#formatting-01)     
 [Формат даты и времени с использованием определенного языка и региональных параметров](#formatting-02)     
 [Формат даты-времени, используя строку стандартного или пользовательского формата](#formatting-03)     
 [Укажите строку формата и определенного языка и региональных параметров](#formatting-04)     
 [Формат даты-времени, по стандарту ISO 8601 для веб-служб](#formatting-05)     

**Разбор строк как `DateTime` объектов**  
 [Используйте `Parse` или `TryParse` для преобразования строки в дату и время](#parsing-01)     
 [Используйте `ParseExact` или `TryParseExact` для преобразования строки в формате известного](#parsing-02)     
 [Преобразования из ISO 8601 строковое представление даты и времени](#parsing-03)     

**`DateTime` Разрешение**  
 [Просмотр по разрешению значений даты и времени](#resolution-01)     
 [Сравнение на равенство в допустимых пределах](#comparison-01)     

**Язык и региональные параметры и календари**  
 [Отображение значений даты и времени с помощью календарей конкретного языка и региональных параметров](#calendars-01)     
 [Синтаксический анализ строки в соответствии с языком и региональными параметрами конкретного календаря](#calendars-02)     
 [Инициализация даты и времени из определенной культуры календаря](#calendars-03)     
 [Доступ к свойствам даты и времени с помощью календаря определенного языка и региональных параметров](#calendars-04)     
 [Получение недели года, с помощью календарей конкретного языка и региональных параметров](#calendars-05)     

**Сохраняемость**  
 [Сохранение значений даты и времени в виде строк в местном часовом поясе](#persistence-01)     
 [Сохранение значений даты и времени, как строки в формате инвариантного языка и региональных параметров и времени](#persistence-02)     
 [Сохранение значений даты и времени как целые числа](#persistence-03)     
 [Сохранение даты и времени значения с помощью `XmlSerializer`](#persistence-04)     
 [Сохранение даты и времени значения с помощью `BinaryFormatter`](#persistence-05)     
 [Сохранение значений даты и времени с данными часового пояса](#persistence-06)     

## <a name="quick-links-to-remarks-topics"></a>Быстрые ссылки на разделы, примечания.

Этот раздел содержит подразделы для наиболее распространенных случаев использования `DateTime` структуры:
  
 [Инициализация `DateTime` объекта](#initializing-a-datetime-object)   
 [Значения DateTime и их строковые представления](#datetime-values-and-their-string-representations)   
 [Синтаксический анализ значений типа DateTime из строки](#parsing-datetime-values-from-strings)   
 [Значения даты и времени](#datetime-values)   
 [Операции типа DateTime](#datetime-operations)   
 [Разрешение типа DateTime](#datetime-resolution)   
 [Значения даты и времени и календарей](#datetime-values-and-calendars)   
 [Сохранение значений даты и времени](#persisting-datetime-values)   
 [Vs даты и времени. TimeSpan](#datetime-vs-timespan)   
 [Сравнение на равенство в допустимых пределах](#comparing-for-equality-within-tolerance) [вопросы взаимодействия COM](#com-interop-considerations)  
   
<xref:System.DateTime> Тип значения представляет дату и время в диапазоне от 00:00:00 (полночь) 1 января 0001 года (нашей эры) до 23:59:59, 31 декабря 9999 года н. э. (Н.Э.) по григорианскому календарю.  
  
Значения времени измеряются в 100-наносекундных единицах, называемых тактами. Точная Дата представляется числом тактов с 00:00 1 января 0001 года нашей эры. (Н.Э.) в <xref:System.Globalization.GregorianCalendar> календаря. Номер исключает тактов, которое будет добавлено по корректировочных секунд. Например значение тактов, равное 31241376000000000L представляет дату Пятница, 1 января, 0100 12:00:00 (полночь). Объект <xref:System.DateTime> всегда выражается в контексте явно определенного или календаря по умолчанию.  
  
> [!NOTE]
>  Если вы работаете со значением тактов, который нужно преобразовать в другой интервал времени, например минут или секунд, следует использовать <xref:System.TimeSpan.TicksPerDay?displayProperty=nameWithType>, <xref:System.TimeSpan.TicksPerHour?displayProperty=nameWithType>, <xref:System.TimeSpan.TicksPerMinute?displayProperty=nameWithType>, <xref:System.TimeSpan.TicksPerSecond?displayProperty=nameWithType>, или <xref:System.TimeSpan.TicksPerMillisecond?displayProperty=nameWithType> константу, чтобы выполнить преобразование. Например, чтобы добавить время в секундах представлен на заданное число тактов, <xref:System.DateTime.Second%2A> компонент <xref:System.DateTime> значение, можно использовать выражение `dateValue.Second + nTicks/Timespan.TicksPerSecond`.  

Источник для всего набора примеров из этой статьи можно просмотреть либо [Visual Basic](https://github.com/dotnet/samples/tree/master/snippets/visualbasic/System.DateTime/) или [C#](https://github.com/dotnet/samples/tree/master/snippets/csharp/System.DateTime/) из репозитория документы на сайте GitHub.

> [!NOTE]
>  Это альтернатива <xref:System.DateTime> структуры для работы со значениями даты и времени и в частности часовых поясов <xref:System.DateTimeOffset> структуры. <xref:System.DateTimeOffset> Структура сохраняет сведения о дате и времени в закрытом <xref:System.DateTime> поля и время в минутах, по которым, Дата и время отличается от времени UTC в закрытом <xref:System.Int16> поля. Это делает возможным для <xref:System.DateTimeOffset> значение, отражающее время в заданном часовом поясе, тогда как <xref:System.DateTime> значение однозначно может отражают только временем UTC и временем местного часового пояса. Для получения сведений о необходимости использования <xref:System.DateTime> структуры или <xref:System.DateTimeOffset> структуры при работе со значениями даты и времени см. в разделе [Choosing Between DateTime, DateTimeOffset, TimeSpan и TimeZoneInfo](~/docs/standard/datetime/choosing-between-datetime.md).  
  
### <a name="initializing-a-datetime-object"></a>Инициализация объекта типа DateTime  

Можно назначить начальное значение в новую `DateTime` значение различными способами:

- Вызов конструктора, либо один, где указываются аргументы для значения, или использовать неявный конструктор по умолчанию.
- Назначение `DateTime` к возвращаемому значению свойства или метода.
- Синтаксический анализ `DateTime` значение из строкового представления.
- С помощью функции языка Visual Basic для создания экземпляра `DateTime`. 

В следующих фрагментах кода показаны примеры каждого:

#### <a name="invoke-constructors"></a>Вызывать конструкторы

Можно вызывать любую из перегрузок <xref:System.DateTime> конструктор, который задает элементы, значения даты и времени (например, год, месяц и день месяца или количества тактов). В следующем коде создается в определенную дату с помощью <xref:System.DateTime> конструктор, указав год, месяц, день, час, минуту и секунду.  

<a name="initialization-01"></a> [!code-vb[System.DateTime.Instantiation#1](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#1)]  
[!code-csharp-interactive[System.DateTime.Instantiation#1](~/samples/snippets/csharp/System.DateTime/Instantiation.cs#1)]

Вызвать `DateTime` структуры неявного конструктора по умолчанию при необходимости `DateTime` присвоены значения по умолчанию. (Подробнее неявного конструктора по умолчанию тип значения в разделе [типы значений](~/docs/csharp/language-reference/keywords/value-types.md).) Некоторые компиляторы также поддерживает объявление <xref:System.DateTime> значение без явно присваивается значение. Создание значения без явная инициализация также приводит значение по умолчанию. В следующем примере демонстрируется <xref:System.DateTime> неявного конструктора по умолчанию в C# и Visual Basic, а также <xref:System.DateTime> объявления без назначения в Visual Basic.  

<a name="initialization-02"></a> [!code-vb[System.DateTime.Instantiation#5](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#5)]  
[!code-csharp-interactive[System.DateTime.Instantiation#5](~/samples/snippets/csharp/System.DateTime/Instantiation.cs#5)]
    
#### <a name="assigning-a-computed-value"></a>Назначение вычисляемое значение

Можно назначить <xref:System.DateTime> значение даты и времени, возвращенные свойства или метода объекта. В следующем примере присваивается текущая дата и время, текущую дату по Гринвичу (UTC) и времени и текущей даты до трех новых <xref:System.DateTime> переменных.  

<a name="initialization-03"></a> [!code-vb[System.DateTime.Instantiation#3](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#3)]  
[!code-csharp[System.DateTime.Instantiation#3](~/samples/snippets/csharp/System.DateTime/Instantiation.cs#3)]

#### <a name="parsing-a-string-that-represents-a-datetime"></a>Синтаксический анализ строковое представление даты и времени

<xref:System.DateTime.Parse%2A>, <xref:System.DateTime.ParseExact%2A>, <xref:System.DateTime.TryParse%2A>, И <xref:System.DateTime.TryParseExact%2A> все методы преобразования строки в его эквивалентное значение даты и времени. В следующих примерах используется <xref:System.DateTime.Parse%2A> и <xref:System.DateTime.ParseExact%2A> методы для разбора строки и преобразовать его в <xref:System.DateTime> значение. Второй формат используется форма поддерживаемые [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) стандартные для представления даты и времени в формате строки. Это стандартное представление часто используется для передачи данных в веб-службы.

<a name="initialization-04"></a> [!code-vb[System.DateTime.Instantiation#4](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#4)]  
[!code-csharp[System.DateTime.Instantiation#4](~/samples/snippets/csharp/System.DateTime/Instantiation.cs#4)]

<xref:System.DateTime.TryParse%2A> И <xref:System.DateTime.TryParseExact%2A> методы указывает, является ли строка допустимым представлением <xref:System.DateTime> значение и если да, выполняет преобразование.  

#### <a name="language-specific-syntax-for-visual-basic"></a>Синтаксис конкретного языка Visual Basic

Инициализирует новую инструкцию Visual Basic <xref:System.DateTime> значение.  

<a name="initialization-05"></a> [!code-vb[System.DateTime.Instantiation#2](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#2)]  

### <a name="datetime-values-and-their-string-representations"></a>Значения DateTime и их строковые представления  

На внутреннем уровне все <xref:System.DateTime> значения представлены в виде количества тактов (количество 100-наносекундных интервалов), прошедших с полуночи в 12:00:00, 1 января 0001 г. Фактический <xref:System.DateTime> значение не зависит от того, появляется это значение, при отображении. Внешний вид <xref:System.DateTime> значение является результатом операции форматирования, который преобразует значение в строковое представление.  
  
Внешний вид значений даты и времени зависит от языка и региональных параметров, международные стандарты, требования приложения и предпочтениями. <xref:System.DateTime> Структура обеспечивает гибкость при форматировании значений даты и времени путем перегрузки <xref:System.DateTime.ToString%2A>. Значение по умолчанию <xref:System.DateTime.ToString?displayProperty=nameWithType> метод возвращает строковое представление значения даты и времени, с помощью короткого формата даты и длинный формат времени текущего языка и региональных параметров. В следующем примере используется значение по умолчанию <xref:System.DateTime.ToString?displayProperty=nameWithType> метод. Оно отображает дату и время с помощью короткого формата даты и длинный формат времени для текущего языка и региональных параметров. Язык en US — текущий язык и региональные параметры на компьютере, на котором выполняется.  
  
<a name="formatting-01"></a> [!code-csharp-interactive[System.DateTime.Formatting#1](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#1)]
[!code-vb[System.DateTime.Formatting#1](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#1)]  

Может потребоваться форматирование даты в конкретном языке для поддержки сценариев web, сервер может быть в другой язык и региональные параметры, от клиента. Укажите язык и региональные параметры с помощью <xref:System.DateTime.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> метод для создания короткого формата даты и представление длительное время в конкретном языке. В следующем примере используется <xref:System.DateTime.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> метод для отображения даты и времени с помощью короткого формата даты и длинный формат времени региональных параметров fr-FR.  
  
<a name="formatting-02"></a> [!code-csharp-interactive[System.DateTime.Formatting#2](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#2)]
[!code-vb[System.DateTime.Formatting#2](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#2)]  

 Другие приложения может потребоваться различные строковые представления даты. <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> Метод возвращает строковое представление определяемой описателя стандартного или пользовательского формата, с использованием соглашений о форматировании текущего языка и региональных параметров. В следующем примере используется <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> метод, чтобы отобразить полный шаблон даты и времени для en US язык и региональные параметры, текущего языка и региональных параметров на компьютере, на котором выполняется.  
  
<a name="formatting-03"></a> [!code-csharp-interactive[System.DateTime.Formatting#3](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#3)]
[!code-vb[System.DateTime.Formatting#3](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#3)]  

 Наконец, можно указать язык и региональные параметры и формат с помощью <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> метод. В следующем примере используется <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> метод, чтобы отобразить полный шаблон даты и времени для региональных параметров fr-FR.  

<a name="formatting-04"></a> [!code-csharp-interactive[System.DateTime.Formatting#4](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#4)]
[!code-vb[System.DateTime.Formatting#4](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#4)]  

<xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> Перегрузка может также использоваться со строкой пользовательского формата для указания других форматов. В следующем примере показано, как для форматирования строки с помощью [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) стандартного формата, часто используется для веб-служб. Формат Iso 8601 не имеет соответствующих строке стандартного формата.

<a name="formatting05"></a> [!code-csharp-interactive[System.DateTime.Formatting#5](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#5)]
[!code-vb[System.DateTime.Formatting#5](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#5)]  

Дополнительные сведения о форматировании <xref:System.DateTime> значения, в разделе [стандартной строки даты и времени формат](~/docs/standard/base-types/standard-date-and-time-format-strings.md) и [пользовательских строк даты и времени формат](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  

### <a name="parsing-datetime-values-from-strings"></a>Синтаксический анализ значений типа DateTime из строки

Анализ Преобразует строковое представление даты и времени в <xref:System.DateTime> значение. Строки даты и времени, как правило, имеют два разных способа использования в приложениях:  
  
-   Дата и время принимает различные формы и отражает соглашения о конкретных языка и региональных параметров или текущего языка и региональных параметров. Например приложение позволяет пользователю которого текущими региональными параметрами являются en US для ввода значения даты как «12/15/2013» или «15 декабря 2013 г.». Благодаря этому пользователь, которого текущими региональными параметрами являются en-gb для ввода значения даты как «12/15/2013» или «15 декабря 2013 г.»  
  
-   Дата и время представляется в стандартных форматов. Например приложение сериализует даты в виде «20130103», независимо от языка и региональных параметров, на котором выполняется приложение. Приложению может потребоваться быть ввода даты в формате короткой даты текущего языка и региональных параметров.
  
Вы используете <xref:System.DateTime.Parse%2A> или <xref:System.DateTime.TryParse%2A> метод для преобразования строки в один из стандартных форматов даты и времени для языка и региональных параметров <xref:System.DateTime> значение. В следующем примере показано, как использовать <xref:System.DateTime.TryParse%2A> для преобразования строки даты в различных форматах конкретного языка и региональных параметров для <xref:System.DateTime> значение. Он сменит текущий язык на английский (Великобритания) и вызывает метод <xref:System.DateTime.GetDateTimeFormats> метод для создания массива строк даты и времени. Затем передает каждого элемента в массиве, с которой <xref:System.DateTime.TryParse%2A> метод. Выходные данные примера показано, что метод синтаксического анализа был успешно преобразовать каждый из конкретного языка и региональных параметров строки даты и времени.  
  
<a name="parsing-01"></a> [!code-csharp-interactive[System.DateTime.Parsing#1](~/samples/snippets/csharp/System.DateTime/Parsing.cs#1)]
[!code-vb[System.DateTime.Parsing#1](~/samples/snippets/visualbasic/System.DateTime/Parsing.vb#1)]  

Вы используете <xref:System.DateTime.ParseExact%2A> и <xref:System.DateTime.TryParseExact%2A> методы для преобразования строки, которое должно соответствовать определенному формату или форматы <xref:System.DateTime> значение. Укажите один или несколько строки даты и времени формата как параметр в качестве метода анализа. В следующем примере используется <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> метод для преобразования строк, которые должны быть в формате «ГГГГММДД» или в формате «ЧЧММСС» в <xref:System.DateTime> значения.  
  
<a name="parsing-02"></a> [!code-csharp-interactive[System.DateTime.Parsing#2](~/samples/snippets/csharp/System.DateTime/Parsing.cs#2)]
[!code-vb[System.DateTime.Parsing#2](~/samples/snippets/visualbasic/System.DateTime/Parsing.vb#2)]  

Часто используются для <xref:System.DateTime.ParseExact%2A> — преобразование строкового представления из веб-службы, обычно в [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) стандартного формата. В следующем коде показано строка правильный формат для использования:

<a name="parsing-03"></a> [!code-csharp-interactive[System.DateTime.Parsing#3](~/samples/snippets/csharp/System.DateTime/Parsing.cs#3)]
[!code-vb[System.DateTime.Parsing#3](~/samples/snippets/visualbasic/System.DateTime/Parsing.vb#3)]  

Если строка не может быть проанализирован, <xref:System.DateTime.Parse%2A> и <xref:System.DateTime.ParseExact%2A> методы создания исключения. <xref:System.DateTime.TryParse%2A> И <xref:System.DateTime.TryParseExact%2A> методы возвращают <xref:System.Boolean> значение, указывающее, успешно ли выполнено преобразование. Следует использовать <xref:System.DateTime.TryParse%2A> или <xref:System.DateTime.TryParseExact%2A> методы в сценариях, где важна производительность. Операции анализа строк даты и времени, как правило, имеют высокий коэффициент, и обработка исключений является ресурсоемкой. Использовать эти методы, если строки являются входными данными пользователями или из неизвестного источника. 
  
Дополнительные сведения о синтаксическом разборе значений даты и времени см. в разделе [строк синтаксического анализа дат и времени](~/docs/standard/base-types/parsing-datetime.md).  

### <a name="datetime-values"></a>Значения даты и времени

Описания значений времени в <xref:System.DateTime> типа часто выражаются с использованием стандарта по Гринвичу (UTC). Время является международное название среднего времени по Гринвичу (GMT). Время — это время по нулевой долготе, координат UTC. Летнее время не применим в формате UTC.  
  
Местное время относится к определенному часовому поясу. Часовой пояс связан со смещением часового пояса. Смещение часового пояса является смещения часового пояса, измеренное в часах из координат UTC. Кроме того местное время может влиять на летнее время, который прибавляет или вычитает корректировка интервала времени. Местное время вычисляется путем добавления смещения часового пояса времени UTC и коррекции для летнего времени при необходимости. Смещение часового пояса в координат UTC равно нулю.  
  
Время в формате UTC, подходит для вычисления, сравнения и хранение даты и времени в файлах. Местное время подходит для отображения в пользовательском интерфейсе приложений для настольных систем. Часовыми поясами (например, многие веб-приложения) также нужен для работы с несколькими другими часовыми поясами.  
  
Если <xref:System.DateTime.Kind%2A> свойство <xref:System.DateTime> объект <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>, он не указан, является ли времени, представленного местное время, время в формате UTC или время в другом часовом поясе.  

### <a name="datetime-resolution"></a>Разрешение типа DateTime
  
> [!NOTE]
>  В качестве альтернативы для выполнения арифметических операций на <xref:System.DateTime> значения для измерения затраченного времени, можно использовать <xref:System.Diagnostics.Stopwatch> класса.  
  
<xref:System.DateTime.Ticks%2A> Свойство выражает значений даты и времени в единицах одной десятимиллионной секунды. <xref:System.DateTime.Millisecond%2A> Свойство возвращает тысячные доли секунды в значении даты и времени. С помощью повторные вызовы <xref:System.DateTime.Now%2A?displayProperty=nameWithType> свойства для измерения затраченного времени зависит от системных часов. Системные часы в системах Windows 7 и Windows 8 с разрешением примерно 15 миллисекунд. Это решение влияет на интервалы времени менее 100 миллисекунд. 
  
В следующем примере демонстрируется зависимость от текущей даты и значения времени от разрешения системных часов. В примере внешний цикл повторяется в 20 раз, а во внутреннем цикле служит для задержки внешнего цикла. Если значение счетчика внешнего цикла равно 10, вызов <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> метод вводит 5 миллисекунд. В следующем примере показано число миллисекунд, возвращенных `DateTime.Now.Milliseconds` изменения свойств только после вызова <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType>.  

<a name="resolution-01"></a> [!code-csharp-interactive[System.DateTime.Resolution#1](~/samples/snippets/csharp/System.DateTime/Resolution.cs#1)]
[!code-vb[System.DateTime.Resolution#1](~/samples/snippets/visualbasic/System.DateTime/Resolution.vb#1)]  

### <a name="datetime-operations"></a>Операции типа DateTime  

Вычисления с помощью <xref:System.DateTime> структуры, таких как <xref:System.DateTime.Add%2A> или <xref:System.DateTime.Subtract%2A>, не изменяйте значение структуры. Вместо этого вычисление возвращает новый <xref:System.DateTime> структуры, значение которого является результатом вычисления.  
  
Операции преобразования между часовыми поясами (например, между временем UTC и местным или между одного часового пояса) учитывать летнего времени, но арифметические и сравнение операции — нет.  
  
<xref:System.DateTime> Самой структуры предоставляет ограниченную поддержку преобразования из одного часового пояса в другой. Можно использовать <xref:System.DateTime.ToLocalTime%2A> можно использовать метод преобразования UTC в местное время, или <xref:System.DateTime.ToUniversalTime%2A> метод для преобразования из местного времени в формате UTC. Однако доступен полный набор методов преобразования часового пояса в <xref:System.TimeZoneInfo> класса. Время, в любом часовых поясов в мире преобразовать во время в любой другой часовой пояс, с помощью этих методов.  
  
Вычисления и сравнения <xref:System.DateTime> объектов имеют значение только в том случае, если они представляют время в одном часовом поясе. Можно использовать <xref:System.TimeZoneInfo> объект для представления <xref:System.DateTime> значения часового пояса, несмотря на то, что два слабо связаны. Объект <xref:System.DateTime> объект не имеет свойства, которое возвращает объект, представляющий часовой пояс, значения даты и времени. <xref:System.DateTime.Kind%2A> Указывает свойство, если `DateTime` представляет UTC в местное время, или не определено. В приложении часовому поясу приходится полагаться на некоторый внешний механизм для определения часового пояса, в котором <xref:System.DateTime> был создан объект. Можно использовать структуру, которая служит оболочкой для обоих <xref:System.DateTime> значение и <xref:System.TimeZoneInfo> , представляющий <xref:System.DateTime> часовой пояс этого значения. Дополнительные сведения о формате UTC в вычислениях и сравнениях <xref:System.DateTime> значения, в разделе [Выполнение арифметических операций с датами и временем](~/docs/standard/datetime/performing-arithmetic-operations.md).  
  
Каждый <xref:System.DateTime> член неявно использует григорианский календарь для выполнения своей работы. Исключениями являются методы, которые полностью определяют календарь. К ним относятся конструкторов, задающих календарь и методы, с параметром, производных от <xref:System.IFormatProvider>, такие как <xref:System.Globalization.DateTimeFormatInfo?displayProperty=nameWithType>.  
  
Операции членами <xref:System.DateTime> тип учитывают подробные сведения, такие как високосный год или количество дней в месяце.  

## <a name="datetime-values-and-calendars"></a>Значения даты и времени и календарей  

Библиотека классов .NET Framework включает ряд классов календарей, которые являются производными от <xref:System.Globalization.Calendar> класса.  Они приведены ниже.  
  
-   класс <xref:System.Globalization.ChineseLunisolarCalendar>;  
-   класс <xref:System.Globalization.EastAsianLunisolarCalendar>;  
-   класс <xref:System.Globalization.GregorianCalendar>;  
-   класс <xref:System.Globalization.HebrewCalendar>;  
-   класс <xref:System.Globalization.HijriCalendar>;  
-   класс <xref:System.Globalization.JapaneseCalendar>;  
-   класс <xref:System.Globalization.JapaneseLunisolarCalendar>;  
-   класс <xref:System.Globalization.JulianCalendar>;  
-   класс <xref:System.Globalization.KoreanCalendar>;  
-   класс <xref:System.Globalization.KoreanLunisolarCalendar>;  
-   класс <xref:System.Globalization.PersianCalendar>;  
-   класс <xref:System.Globalization.TaiwanCalendar>;  
-   класс <xref:System.Globalization.TaiwanLunisolarCalendar>;  
-   класс <xref:System.Globalization.ThaiBuddhistCalendar>;  
-   класс <xref:System.Globalization.UmAlQuraCalendar>;  
  
Каждый язык и региональные параметры использует календарь по умолчанию определяется его только для чтения <xref:System.Globalization.CultureInfo.Calendar%2A?displayProperty=nameWithType> свойство. Каждый язык и региональные параметры могут поддерживать один или несколько календарей, определяется его только для чтения <xref:System.Globalization.CultureInfo.OptionalCalendars%2A?displayProperty=nameWithType> свойство. Календарь, используемый в данный момент конкретного <xref:System.Globalization.CultureInfo> объект определяется его <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType> свойство. Он должен быть одним из календарей в <xref:System.Globalization.CultureInfo.OptionalCalendars%2A?displayProperty=nameWithType> массива.  
  
Для региональных параметров текущего календаря используется во всех операциях форматирования для этого языка и региональных параметров. Например, культуры Тай-буддистский календарь по умолчанию — эры тайского буддистского календаря, которое представляется <xref:System.Globalization.ThaiBuddhistCalendar> класса.  Если <xref:System.Globalization.CultureInfo> объект, который представляет Тай-буддистский культуры используется в форматировании даты и времени операции, эры тайского буддистского календаря используется по умолчанию. Григорианский календарь используется только в том случае, если культуры <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType> изменения свойств, как показано в следующем примере:  

<a name="calendars-01"></a> [!code-csharp-interactive[System.DateTime.Calendar#1](~/samples/snippets/csharp/System.DateTime/Calendar.cs#1)]
[!code-vb[System.DateTime.Calendar#1](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#1)]  

Для региональных параметров текущего календаря также используется во всех операциях синтаксического анализа для этого языка и региональных параметров, как показано в следующем примере.  
  
<a name="calendars-02"></a> [!code-csharp-interactive[System.DateTime.Calendar#2](~/samples/snippets/csharp/System.DateTime/Calendar.cs#2)]
[!code-vb[System.DateTime.Calendar#2](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#2)]  

Можно создать <xref:System.DateTime> с использованием элементы даты и времени (количество год, месяц и день) конкретного календаря путем вызова [конструктора DateTime](xref:System.DateTime.%23ctor%2A) , включающего `calendar` параметра и его передачи <xref:System.Globalization.CultureInfo.Calendar%2A>объекта, представляющего календарь. В следующем примере элементы даты и времени из <xref:System.Globalization.ThaiBuddhistCalendar> календаря.  
  
<a name="calendars-03"></a> [!code-csharp-interactive[System.DateTime.Calendar#3](~/samples/snippets/csharp/System.DateTime/Calendar.cs#3)]
[!code-vb[System.DateTime.Calendar#3](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#3)]  

<xref:System.DateTime> конструкторы, которые не включают `calendar` параметр предполагается, что элементы даты и времени представляют собой единицы по григорианскому календарю.  
  
Все остальные <xref:System.DateTime> свойства и методы используют григорианский календарь. Например <xref:System.DateTime.Year%2A?displayProperty=nameWithType> свойство возвращает год по григорианскому календарю и <xref:System.DateTime.IsLeapYear%28System.Int32%29?displayProperty=nameWithType> метод предполагает, что `year` параметр — год по григорианскому календарю.  Каждый <xref:System.DateTime> элемента, который использует григорианского календаря имеет соответствующий член <xref:System.Globalization.CultureInfo.Calendar%2A> класс, который использует конкретного календаря. Например <xref:System.Globalization.Calendar.GetYear%2A?displayProperty=nameWithType> метод возвращает год в календаре конкретного и <xref:System.Globalization.Calendar.IsLeapYear%2A?displayProperty=nameWithType> метод интерпретирует `year` номер года в календаре конкретного параметра. В следующем примере используются оба <xref:System.DateTime> и соответствующими элементами <xref:System.Globalization.ThaiBuddhistCalendar> класса.  
  
<a name="calendars-04"></a> [!code-csharp-interactive[System.DateTime.Calendar#4](~/samples/snippets/csharp/System.DateTime/Calendar.cs#4)]
[!code-vb[System.DateTime.Calendar#4](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#4)]  

<xref:System.DateTime> Структура включает в себя <xref:System.DateTime.DayOfWeek%2A> свойство, которое возвращает день недели в григорианском календаре. Он не включает член, который позволяет получить номер недели года. Для извлечения неделю года, вызовите отдельных календаря <xref:System.Globalization.Calendar.GetWeekOfYear%2A?displayProperty=nameWithType> метод. Ниже приведен пример.  
  
<a name="calendars-05"></a> [!code-csharp-interactive[System.DateTime.Calendar#5](~/samples/snippets/csharp/System.DateTime/Calendar.cs#5)]
[!code-vb[System.DateTime.Calendar#5](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#5)]  

Дополнительные сведения о даты и календари см. в разделе [работа с календарями](~/docs/standard/datetime/working-with-calendars.md).  
  
### <a name="persisting-datetime-values"></a>Сохранение значений даты и времени  

Можно сохранить <xref:System.DateTime> значения четырьмя способами:  
  
-   Вы [преобразовать их в строки](#persisting-values-as-strings) и сохранения строки.  
-   Вы [преобразовать их в 64-разрядных целых значений](#persisting-values-as-integers) (значение <xref:System.DateTime.Ticks%2A> свойства) и сохранять целые числа.  
-   Вы [сериализации значения даты и времени](#serializing-dateTime-values).  
-   Вы [сериализации значения даты и времени, а также сведения о часовом поясе](#serializing-datetime-and-time-zone-data).  
  
Необходимо убедиться, что подпрограмму, которая восстанавливает <xref:System.DateTime> значения не потерять данные или создает исключение, независимо от того, какой метод выбран. <xref:System.DateTime> значения должны приема-передачи. То есть, исходное значение и восстановленное значение должно совпадать. Если исходный <xref:System.DateTime> представляет одного момента времени, его следует определить один и тот же момент времени, когда восстанавливается.  
  
#### <a name="persisting-values-as-strings"></a>Сохранение значений в виде строк  

Для успешного восстановления <xref:System.DateTime> значения, которые сохраняются в виде строки, соответствующие этим правилам:  
  
-   Делайте же предположения о при восстановлении строки как при сохранении форматирования с учетом языка и региональных параметров. Чтобы убедиться, что строка может быть восстановлена на компьютере с региональными отличается от языка и региональных параметров системы, он был сохранен на, вызовите <xref:System.DateTime.ToString%2A> перегрузку, чтобы сохранить строку с использованием соглашений инвариантного языка и региональных параметров. Вызовите <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> или <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> перегрузку, чтобы восстановить строки с использованием соглашений инвариантного языка и региональных параметров. Никогда не используйте <xref:System.DateTime.ToString>, <xref:System.DateTime.Parse%28System.String%29>, или <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29> перегрузок, которые используются соглашения текущих региональных параметров потока.  
  
-   Дата представляет один момент времени, убедитесь, что он представляет один и тот же момент времени, когда он восстанавливается, даже в другом часовом поясе. Преобразовать <xref:System.DateTime> значение в формате UTC, до его сохранения. Можно сериализовать значение, а также сведения о часовом поясе. Дополнительные сведения об этом подходе см. в разделе [данные сериализации даты и времени и часового пояса](#TimeZone).  
  
 Наиболее распространенной ошибкой при сохранении <xref:System.DateTime> значений в виде строк — использовать правила форматирования по умолчанию или текущего языка и региональных параметров. Проблемы возникают, если различаются, при сохранении и восстановлении строки текущего языка и региональных параметров. В следующем примере эти проблемы. Она сохраняет пять дат, используя правила форматирования текущей культуры, в данном случае это английский язык (США). Он восстанавливает дат, используя правила форматирования различных языка и региональных параметров, в данном случае это английский язык (Великобритания). Поскольку соглашения о форматировании двух языков и региональных параметров не совпадают, две даты не могут быть восстановлены, и неправильной интерпретации остальные три даты. Кроме того Если исходные значения даты и времени представляют один моментам времени, восстановленный время неверны, так как сведения о часовом поясе теряются.  
  
<a name="persistence-01"></a> [!code-csharp[System.DateTime.Persistence#1](~/samples/snippets/csharp/System.DateTime/Persistence.cs#1)]
[!code-vb[System.DateTime.Persistence#1](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#1)]  

Для приема-передачи <xref:System.DateTime> параметры успешно, выполните следующие действия:  
  
1.  Если значения представляют один моменты времени, преобразуются из местного времени в формате UTC, вызвав <xref:System.DateTime.ToUniversalTime%2A> метод.  
1.  Преобразование даты в их строковые представления путем вызова <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29> или <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> перегрузки. Использовать правила форматирования для инвариантного языка и региональных параметров, указав <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> как `provider` аргумент. Укажите значение следует приема-передачи с помощью строки стандартного формата «O» или «R».  
  
Восстановление сохраненного <xref:System.DateTime> значения без потери данных, выполните следующие действия:  
  
1.  Синтаксический анализ данных, вызвав <xref:System.DateTime.ParseExact%2A> или <xref:System.DateTime.TryParseExact%2A> перегрузки. Укажите <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> как `provider` аргумента и используется тот же формат стандартной строки вы использовали для `format` аргумента во время преобразования. Включить <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> значение в `styles` аргумент.  
1.  Если <xref:System.DateTime> значения представляют один моментам времени, вызов <xref:System.DateTime.ToLocalTime%2A> метод преобразования анализируемых данных от времени UTC в местное время.  
  
В следующем примере используется инвариантный язык и региональные параметры и со строкой стандартного формата «O», чтобы убедиться, что <xref:System.DateTime> значения сохраняется и восстанавливается представляют один и тот же момент времени независимо от системы, язык и региональные параметры или часовой пояс для исходной и целевой системами.  
  
<a name="persistence-02"></a> [!code-csharp[System.DateTime.Persistence#2](~/samples/snippets/csharp/System.DateTime/Persistence.cs#2)]
[!code-vb[System.DateTime.Persistence#2](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#2)]  

#### <a name="persisting-values-as-integers"></a>Сохранение значений как целые числа  

Можно сохранить дату и время в виде <xref:System.Int64> значение, представляющее число тактов. В этом случае не нужно учитывать язык и региональные параметры системы <xref:System.DateTime> сохраняются и восстановлены на значения.  
  
Для сохранения <xref:System.DateTime> значение как целое число:  
  
-   Если <xref:System.DateTime> значения представляют один моментам времени, преобразовать их в формате UTC, вызвав <xref:System.DateTime.ToUniversalTime%2A> метод.  
-   Число тактов, представленного параметром <xref:System.DateTime> значение из его <xref:System.DateTime.Ticks%2A> свойство.  
  
Чтобы восстановить <xref:System.DateTime> значения, который сохранен как целое число:  
  
1.  Создания нового экземпляра <xref:System.DateTime> путем передачи <xref:System.Int64> значение <xref:System.DateTime.%23ctor%28System.Int64%29> конструктор.  
1.  Если <xref:System.DateTime> представляет один момент времени, преобразовать его от времени UTC в местное время, вызвав <xref:System.DateTime.ToLocalTime%2A> метод.  
  
Следующий пример сохраняет массив <xref:System.DateTime> значения как целые числа в системе в США. тихоокеанском стандартном часовом поясе США. Он восстанавливает в системе в поясе UTC. Файл, содержащий целые числа включает <xref:System.Int32> значение, указывающее общее количество <xref:System.Int64> значения, которые непосредственно следуют за.  
  
<a name="persistence-03"></a> [!code-csharp[System.DateTime.Persistence#3](~/samples/snippets/csharp/System.DateTime/Persistence.cs#3)]
[!code-vb[System.DateTime.Persistence#3](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#3)]  

#### <a name="serializing-datetime-values"></a>Сериализация значений даты и времени  

Можно сохранить <xref:System.DateTime> значения посредством сериализации поток или файл и затем восстановить их через десериализации. <xref:System.DateTime> данных сериализуется в формат некоторые указанного объекта. Объекты будут восстановлены при десериализации. Модуль форматирования или сериализатора, таких как <xref:System.Xml.Serialization.XmlSerializer> или <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter>, обрабатывает процесс сериализации и десериализации. Дополнительные сведения о сериализации и типы сериализации, поддерживаемые платформой .NET Framework см. в разделе [сериализации](~/docs/standard/serialization/index.md).
  
В следующем примере используется <xref:System.Xml.Serialization.XmlSerializer> классы для сериализации и десериализации <xref:System.DateTime> значения. Значения представляют все дни-21-го века високосным годом. Выходные данные представляет результат, если пример выполняется в системе, которого текущий язык — английский (Великобритания). Так как десериализован <xref:System.DateTime> самому объекту, код не должен обрабатывать региональные отличия в форматы даты и времени.  
  
<a name="persistence-04"></a> [!code-csharp[System.DateTime.Persistence#4](~/samples/snippets/csharp/System.DateTime/Persistence.cs#4)]
[!code-vb[System.DateTime.Persistence#4](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#4)]  

Предыдущий пример не включает сведения о времени. Если <xref:System.DateTime> значение представляет момент времени и представляется в формате местного времени, преобразования его из местного времени в формате UTC перед сериализацией его путем вызова <xref:System.DateTime.ToUniversalTime%2A> метод. После десериализации, преобразовать ее от времени UTC в местное время, вызвав <xref:System.DateTime.ToLocalTime%2A> метод. В следующем примере используется <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter> класс для сериализации <xref:System.DateTime> данных в системе в США. Тихоокеанском стандартном часовом поясе и десериализуемые в системе в США. Центра стандартной зоны.  
  
<a name="persistence-05"></a> [!code-csharp[System.DateTime.Persistence#5](~/samples/snippets/csharp/System.DateTime/Persistence.cs#5)]
[!code-vb[System.DateTime.Persistence#5](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#5)]  

#### <a name="serializing-datetime-and-time-zone-data"></a>Сериализация данных даты и времени и часового пояса  

Предполагается, что все предыдущие примеры <xref:System.DateTime> значения выражаются как местное время. Код преобразования значений между временем UTC и местным временем, они отражают один и тот же момент времени в исходных и целевых системах. <xref:System.DateTime> значения также может отражают моментам времени в формате UTC и часовой пояс, отличный от local. Поскольку <xref:System.DateTime> структура несовместима с часовыми поясами, необходимо сериализовать как <xref:System.DateTime> значение и <xref:System.TimeZoneInfo> объекта, представляющего его часовой пояс. Создать тип, поля включаются как <xref:System.DateTime> значение и его часовым поясом. В следующем примере определяется `DateWithTimeZone` структуры.  
  
<a name="persistence-06"></a> [!code-csharp[System.DateTime.Persistence#6](~/samples/snippets/csharp/System.DateTime/DateWithTimeZone.cs#6)]
[!code-vb[System.DateTime.Persistence#6](~/samples/snippets/visualbasic/System.DateTime/DateWithTimeZone.vb#6)]  

> [!IMPORTANT]
>  `DateWithTimeZone` Структуры используется в следующих двух примерах, в которых сериализации и десериализации массив `DateWithTimeZone` объектов. Источник для всего набора примеров из этой статьи можно просмотреть либо [Visual Basic](https://github.com/dotnet/samples/tree/master/snippets/visualbasic/System.DateTime/) или [C#](https://github.com/dotnet/samples/tree/master/snippets/csharp/System.DateTime/) из репозитория документы на сайте GitHub.
  
С помощью `DateWithTimeZone` структуры, могут затем сохраняться даты и времени, а также сведения о часовом поясе. В следующем примере используется <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter> класс для сериализации массив `DateWithTimeZone` объектов.  
  
[!code-csharp[System.DateTime.Persistence#7](~/samples/snippets/csharp/System.DateTime/Persistence.cs#7)]
[!code-vb[System.DateTime.Persistence#7](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#7)]  

Следующий пример вызывает <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize%2A?displayProperty=nameWithType> метод для десериализации.  
  
[!code-csharp[System.DateTime.Persistence#8](~/samples/snippets/csharp/System.DateTime/Persistence.cs#8)]
[!code-vb[System.DateTime.Persistence#8](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#8)]  

### <a name="datetime-vs-timespan"></a>Vs даты и времени. TimeSpan  

<xref:System.DateTime> И <xref:System.TimeSpan> типы значений отличаются в том, что <xref:System.DateTime> представляет момент времени, а <xref:System.TimeSpan> представляет интервал времени. Можно вычесть один экземпляр <xref:System.DateTime> из другого для получения <xref:System.TimeSpan> , представляющий интервал времени между ними. Или можно добавить положительное <xref:System.TimeSpan> с текущим <xref:System.DateTime> для получения <xref:System.DateTime> значение, которое представляет дату в будущем.  
  
Можно добавить или вычесть временной интервал из <xref:System.DateTime> объекта. Интервалы времени может быть положительным или отрицательным, и их можно выразить в единицах измерения, такие как количество тактов, секунд, или как <xref:System.TimeSpan> объект.  

### <a name="comparing-for-equality-within-tolerance"></a>Сравнение на равенство в допустимых пределах

Сравнения на равенство для <xref:System.DateTime> значения являются точными. Это означает, что два значения должен быть выражен как же количество тактов, считается равны. Точность часто является лишние или даже неверен для многих приложений. Часто необходимо, чтобы для проверки, если <xref:System.DateTime> объектов **примерно равно**. 

В следующем примере показано, как сравнивать приблизительно эквивалентные <xref:System.DateTime> . Он принимает небольшую погрешность при объявлении их равенства.  
  
<a name="comparison-02"></a> [!code-csharp[System.DateTime.Comparisons#1](~/samples/snippets/csharp/System.DateTime/DateTimeComparisons.cs#1)]
[!code-vb[System.DateTime.Comparisons#1](~/samples/snippets/visualbasic/System.DateTime/DateTimeComparisons.vb#1)]  

### <a name="com-interop-considerations"></a>Вопросы взаимодействия COM  

Объект <xref:System.DateTime> обратного преобразования, называется значение, которое передается в COM-приложение, а затем передается обратно в управляемом приложении. Однако <xref:System.DateTime> не содержит значение, которое указывает только время приема-передачи, как и следует ожидать.  
  
При каждом обращении только время, например по 3, конечная дата и время 30 декабря 1899 г. нашей эры в 3:00, а не 1 января 0001 года нашей эры в 3:00. .NET Framework и COM предполагают дату по умолчанию, если задан только раз. Однако система COM предполагает базовую дату 30 декабря 1899 г. нашей эры, хотя .NET Framework предполагает базовую дату 1 января 0001 года нашей эры  
  
Если передается только время от платформы .NET Framework для COM, специальная обработка выполняется, преобразует время в формат, используемый в модели COM. Когда из COM в .NET Framework передается только время, никакая специальная обработка не выполняется, поскольку, может привести к повреждению допустимых дат и времени до 30 декабря 1899 г. Дата начала круговой путь из COM, .NET Framework и COM сохраняют эту дату.  
  
Поведение платформы .NET Framework и COM означает, что если циклов приема-передачи вашего приложения <xref:System.DateTime> , указывает только время, приложение должно обязательно изменить или проигнорировать ошибочные даты с последней <xref:System.DateTime> объекта.  
     
 ]]></format>
    </remarks>
    <threadsafe>Все члены этого типа являются потокобезопасными. Элементы, используемые для изменения состояния экземпляра на самом деле возвращается новый экземпляр инициализирован с новым значением. Как с любым другим типом, чтения и записи к общей переменной, содержащий экземпляр этого типа должны быть защищены блокировкой, чтобы гарантировать потокобезопасность.</threadsafe>
    <altmember cref="T:System.DateTimeOffset" />
    <altmember cref="T:System.TimeSpan" />
    <altmember cref="T:System.Globalization.Calendar" />
    <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
    <altmember cref="T:System.TimeZoneInfo" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Инициализирует новый экземпляр структуры <see cref="T:System.DateTime" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (long ticks);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 ticks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ticks As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(long ticks);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="ticks">Дата и время, представленные в виде нескольких 100-наносекундных интервалов, завершившихся с момента 00:00:00.000 1 января 0001 г. по григорианскому календарю.</param>
        <summary>Инициализирует новый экземпляр структуры <see cref="T:System.DateTime" /> заданным числом тактов.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Свойство <xref:System.DateTime.Kind%2A> инициализировано значением параметра <xref:System.DateTimeKind.Unspecified>.  
  
 Для приложений, в какие переносимость данных даты и времени или ограниченная часового пояса важно осведомленности, можно использовать соответствующие <xref:System.DateTimeOffset> конструктор.  
  
   
  
## Examples  
 В следующем примере демонстрируется один из <xref:System.DateTime> конструкторы.  
  
 [!code-cpp[datetime.ctor_Int64#1](~/samples/snippets/cpp/VS_Snippets_CLR/datetime.ctor_Int64/CPP/ticks.cpp#1)]
 [!code-csharp[datetime.ctor_Int64#1](~/samples/snippets/csharp/VS_Snippets_CLR/datetime.ctor_Int64/CS/ticks.cs#1)]
 [!code-vb[datetime.ctor_Int64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/datetime.ctor_Int64/VB/ticks.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          Значение <paramref name="ticks" /> меньше <see cref="F:System.DateTime.MinValue" /> или больше <see cref="F:System.DateTime.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (long ticks, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 ticks, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int64,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ticks As Long, kind As DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(long ticks, DateTimeKind kind);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
        <Parameter Name="kind" Type="System.DateTimeKind" />
      </Parameters>
      <Docs>
        <param name="ticks">Дата и время, представленные в виде нескольких 100-наносекундных интервалов, завершившихся с момента 00:00:00.000 1 января 0001 г. по григорианскому календарю.</param>
        <param name="kind">Одно из значений перечисления, указывающее, какое время задает параметр <c>ticks</c>: локальное, в формате UTC или ни то, ни другое.</param>
        <summary>Инициализирует новый экземпляр структуры <see cref="T:System.DateTime" /> заданным числом тактов и временем UTC или местным временем.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Для приложений, в какие переносимость данных даты и времени или ограниченная часового пояса важно осведомленности, можно использовать соответствующие <xref:System.DateTimeOffset> конструктор.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          Значение <paramref name="ticks" /> меньше <see cref="F:System.DateTime.MinValue" /> или больше <see cref="F:System.DateTime.MaxValue" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="kind" /> не является одним из значений <see cref="T:System.DateTimeKind" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">Год (от 1 до 9999).</param>
        <param name="month">Месяц (от 1 до 12).</param>
        <param name="day">День (от 1 до количества дней в <c>month</c>).</param>
        <summary>Инициализирует новый экземпляр структуры <see cref="T:System.DateTime" /> заданными значениями года, месяца и дня.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот конструктор интерпретирует `year`, `month`, и `day` как год, месяц и день по григорианскому календарю. Для создания экземпляра <xref:System.DateTime> значение с помощью год, месяц и день в календаре другого вызова <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> конструктор.  
  
 Время дня для результирующего <xref:System.DateTime> запланирован на полночь (00: 00:00). Свойство <xref:System.DateTime.Kind%2A> инициализировано значением параметра <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>.  
  
   
  
## Examples  
 В следующем примере используется <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%29> конструктора для создания <xref:System.DateTime> значение. В примере также показано, что эта перегрузка создает <xref:System.DateTime> значение которого компонент времени равен полночи (или 0:00).  
  
 [!code-csharp[System.DateTime.Constructor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#1)]
 [!code-vb[System.DateTime.Constructor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          Параметр <paramref name="year" /> меньше 1 или больше 9999.  
  
 - или -  
  
 Параметр <paramref name="month" /> имеет значение меньше 1 или больше 12.  
  
 - или -  
  
 Параметр <paramref name="day" /> имеет значение меньше 1 или больше, чем число дней в <paramref name="month" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, System.Globalization.Calendar calendar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, class System.Globalization.Calendar calendar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, System::Globalization::Calendar ^ calendar);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" />
      </Parameters>
      <Docs>
        <param name="year">Год (от 1 до количества лет в <c>calendar</c>).</param>
        <param name="month">Месяц (от 1 до количества месяцев в <c>calendar</c>).</param>
        <param name="day">День (от 1 до количества дней в <c>month</c>).</param>
        <param name="calendar">Календарь, используемый для анализа параметров <c>year</c>, <c>month</c> и <c>day</c>.</param>
        <summary>Инициализирует новый экземпляр структуры <see cref="T:System.DateTime" /> заданным годом, месяцем и днем для указанного календаря.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Время дня для результирующего <xref:System.DateTime> запланирован на полночь (00: 00:00). Свойство <xref:System.DateTime.Kind%2A> инициализировано значением параметра <xref:System.DateTimeKind.Unspecified>.  
  
 Допустимые значения для `year`, `month`, и `day` зависят от `calendar`. Если исключение указанной даты и времени не могут быть выражены с помощью `calendar`.  
  
 <xref:System.Globalization> Несколько календарей, включая пространство имен предоставляет <xref:System.Globalization.GregorianCalendar> и <xref:System.Globalization.JulianCalendar>.  
  
   
  
## Examples  
 В следующем примере вызывается <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> конструктора два раза, чтобы создать два <xref:System.DateTime> значения. Первый вызов создает <xref:System.DateTime> значение с помощью <xref:System.Globalization.PersianCalendar> объекта. Поскольку персидский календарь нельзя назначить в качестве календаря по умолчанию для языка и региональных параметров, отображение даты в персидском календаре требует отдельных вызовов его <xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>, <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType>, и <xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType> методы. Создает второй вызов конструктора <xref:System.DateTime> значение с помощью <xref:System.Globalization.HijriCalendar> объекта. В примере изменяется на арабский (Сирия) текущего языка и региональных параметров и текущий язык и региональные параметры по умолчанию календарь изменяется на календарь хиджра. Так как исламский календарь по умолчанию для текущего языка и региональных параметров, <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> метод использует его для форматирования даты. При восстановлении предыдущей текущего языка и региональных параметров (который в данном случае является английский (США)) <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> метод использует текущий язык и региональные параметры по умолчанию григорианский календарь для форматирования даты.  
  
 [!code-csharp[System.DateTime.Constructor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample2.cs#2)]
 [!code-vb[System.DateTime.Constructor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="calendar" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> не входит в диапазон, поддерживаемый <paramref name="calendar" />.  
  
 - или -  
  
 <paramref name="month" /> меньше 1 или больше числа месяцев в <paramref name="calendar" />.  
  
 - или -  
  
 Параметр <paramref name="day" /> имеет значение меньше 1 или больше, чем число дней в <paramref name="month" />.</exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">Год (от 1 до 9999).</param>
        <param name="month">Месяц (от 1 до 12).</param>
        <param name="day">День (от 1 до количества дней в <c>month</c>).</param>
        <param name="hour">Часы (от 0 до 23).</param>
        <param name="minute">Минуты (от 0 до 59).</param>
        <param name="second">Секунды (от 0 до 59).</param>
        <summary>Инициализирует новый экземпляр структуры <see cref="T:System.DateTime" /> заданным годом, месяцем, днем, часом, минутой и секундой.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Свойство <xref:System.DateTime.Kind%2A> инициализировано значением параметра <xref:System.DateTimeKind.Unspecified>.  
  
 Этот конструктор интерпретирует`year`, `month`, и `day` как год, месяц и день по григорианскому календарю. Для создания экземпляра <xref:System.DateTime> значение с помощью год, месяц и день в календаре другого вызова <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> конструктор.  
  
 Для приложений, в какие переносимость данных даты и времени или ограниченная часового пояса важно осведомленности, можно использовать соответствующие <xref:System.DateTimeOffset> конструктор.  
  
   
  
## Examples  
 В следующем примере используется <xref:System.DateTime.%23ctor%2A> конструктора для создания <xref:System.DateTime> значение.  
  
 [!code-csharp[System.DateTime.Constructor#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#3)]
 [!code-vb[System.DateTime.Constructor#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          Параметр <paramref name="year" /> меньше 1 или больше 9999.  
  
 - или -  
  
 Параметр <paramref name="month" /> имеет значение меньше 1 или больше 12.  
  
 - или -  
  
 Параметр <paramref name="day" /> имеет значение меньше 1 или больше, чем число дней в <paramref name="month" />.  
  
 - или -  
  
 Параметр <paramref name="hour" /> меньше 0 или больше 23.  
  
 - или -  
  
 Параметр <paramref name="minute" /> меньше 0 или больше 59.  
  
 -или-  
  
 Параметр <paramref name="second" /> меньше 0 или больше 59.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, kind As DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, DateTimeKind kind);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="kind" Type="System.DateTimeKind" />
      </Parameters>
      <Docs>
        <param name="year">Год (от 1 до 9999).</param>
        <param name="month">Месяц (от 1 до 12).</param>
        <param name="day">День (от 1 до количества дней в <c>month</c>).</param>
        <param name="hour">Часы (от 0 до 23).</param>
        <param name="minute">Минуты (от 0 до 59).</param>
        <param name="second">Секунды (от 0 до 59).</param>
        <param name="kind">Одно из значений перечисления, указывающее, что задаются параметры <c>year</c>, <c>month</c>, <c>day</c>, <c>hour</c>, <c>minute</c> и <c>second</c>: локальное время, время в формате UTC или ни то, ни другое.</param>
        <summary>Инициализирует новый экземпляр структуры <see cref="T:System.DateTime" /> заданными значениями года, месяца, дня, часа, минуты и секунды, а также временем UTC или местным временем.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот конструктор интерпретирует`year`, `month`, и `day` как год, месяц и день по григорианскому календарю. Для создания экземпляра <xref:System.DateTime> значение с помощью год, месяц и день в календаре другого вызова <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.DateTimeKind%29> конструктор.  
  
 Для приложений, в какие переносимость данных даты и времени или ограниченная часового пояса важно осведомленности, можно использовать соответствующие <xref:System.DateTimeOffset> конструктор.  
  
   
  
## Examples  
 В следующем примере используется <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.DateTimeKind%29> конструктора для создания <xref:System.DateTime> значение.  
  
 [!code-csharp[System.DateTime.Constructor#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#7)]
 [!code-vb[System.DateTime.Constructor#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          Параметр <paramref name="year" /> меньше 1 или больше 9999.  
  
 - или -  
  
 Параметр <paramref name="month" /> имеет значение меньше 1 или больше 12.  
  
 - или -  
  
 Параметр <paramref name="day" /> имеет значение меньше 1 или больше, чем число дней в <paramref name="month" />.  
  
 - или -  
  
 Параметр <paramref name="hour" /> меньше 0 или больше 23.  
  
 - или -  
  
 Параметр <paramref name="minute" /> меньше 0 или больше 59.  
  
 -или-  
  
 Параметр <paramref name="second" /> имеет значение меньше 0 или больше 59.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="kind" /> не является одним из значений <see cref="T:System.DateTimeKind" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, System.Globalization.Calendar calendar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, class System.Globalization.Calendar calendar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, System::Globalization::Calendar ^ calendar);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" />
      </Parameters>
      <Docs>
        <param name="year">Год (от 1 до количества лет в <c>calendar</c>).</param>
        <param name="month">Месяц (от 1 до количества месяцев в <c>calendar</c>).</param>
        <param name="day">День (от 1 до количества дней в <c>month</c>).</param>
        <param name="hour">Часы (от 0 до 23).</param>
        <param name="minute">Минуты (от 0 до 59).</param>
        <param name="second">Секунды (от 0 до 59).</param>
        <param name="calendar">Календарь, используемый для анализа параметров <c>year</c>, <c>month</c> и <c>day</c>.</param>
        <summary>Инициализирует новый экземпляр структуры <see cref="T:System.DateTime" /> указанным годом, месяцем, днем, часом, минутой и секундой для заданного календаря.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Свойство <xref:System.DateTime.Kind%2A> инициализировано значением параметра <xref:System.DateTimeKind.Unspecified>.  
  
 Допустимые значения для `year`, `month`, и `day` зависят от `calendar`. Если исключение указанной даты и времени не могут быть выражены с помощью `calendar`.  
  
 <xref:System.Globalization> Несколько календарей, включая пространство имен предоставляет <xref:System.Globalization.GregorianCalendar> и <xref:System.Globalization.JulianCalendar>.  
  
   
  
## Examples  
 В следующем примере вызывается <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> конструктора два раза, чтобы создать два <xref:System.DateTime> значения. Первый вызов создает <xref:System.DateTime> значение с помощью <xref:System.Globalization.PersianCalendar> объекта. Поскольку персидский календарь нельзя назначить в качестве календаря по умолчанию для языка и региональных параметров, отображение даты в персидском календаре требует отдельных вызовов его <xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>, <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType>, и <xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType> методы. Создает второй вызов конструктора <xref:System.DateTime> значение с помощью <xref:System.Globalization.HijriCalendar> объекта. В примере изменяется на арабский (Сирия) текущего языка и региональных параметров и текущий язык и региональные параметры по умолчанию календарь изменяется на календарь хиджра. Так как исламский календарь по умолчанию для текущего языка и региональных параметров, <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> метод использует его для форматирования даты. При восстановлении предыдущей текущего языка и региональных параметров (который в данном случае является английский (США)) <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> метод использует текущий язык и региональные параметры по умолчанию григорианский календарь для форматирования даты.  
  
 [!code-csharp[System.DateTime.Constructor#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample4.cs#4)]
 [!code-vb[System.DateTime.Constructor#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="calendar" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> не входит в диапазон, поддерживаемый <paramref name="calendar" />.  
  
 - или -  
  
 <paramref name="month" /> меньше 1 или больше числа месяцев в <paramref name="calendar" />.  
  
 - или -  
  
 Параметр <paramref name="day" /> имеет значение меньше 1 или больше, чем число дней в <paramref name="month" />.  
  
 - или -  
  
 Параметр <paramref name="hour" /> имеет значение меньше 0 или больше 23.  
  
 - или -  
  
 Параметр <paramref name="minute" /> меньше 0 или больше 59.  
  
 -или-  
  
 Параметр <paramref name="second" /> меньше 0 или больше 59.</exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">Год (от 1 до 9999).</param>
        <param name="month">Месяц (от 1 до 12).</param>
        <param name="day">День (от 1 до количества дней в <c>month</c>).</param>
        <param name="hour">Часы (от 0 до 23).</param>
        <param name="minute">Минуты (от 0 до 59).</param>
        <param name="second">Секунды (от 0 до 59).</param>
        <param name="millisecond">Миллисекунды (от 0 до 999).</param>
        <summary>Инициализирует новый экземпляр структуры <see cref="T:System.DateTime" /> заданным годом, месяцем, днем, часом, минутой, секундой и миллисекундой.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот конструктор интерпретирует`year`, `month`, и `day` как год, месяц и день по григорианскому календарю. Для создания экземпляра <xref:System.DateTime> значение с помощью год, месяц и день в календаре другого вызова <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> конструктор.  
  
 Свойство <xref:System.DateTime.Kind%2A> инициализировано значением параметра <xref:System.DateTimeKind.Unspecified>.  
  
 Для приложений, в какие переносимость данных даты и времени или ограниченная часового пояса важно осведомленности, можно использовать соответствующие <xref:System.DateTimeOffset> конструктор.  
  
   
  
## Examples  
 В следующем примере используется <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%29> конструктора для создания <xref:System.DateTime> значение.  
  
 [!code-csharp[System.DateTime.Constructor#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#5)]
 [!code-vb[System.DateTime.Constructor#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          Параметр <paramref name="year" /> меньше 1 или больше 9999.  
  
 - или -  
  
 Параметр <paramref name="month" /> имеет значение меньше 1 или больше 12.  
  
 - или -  
  
 Параметр <paramref name="day" /> имеет значение меньше 1 или больше, чем число дней в <paramref name="month" />.  
  
 - или -  
  
 Параметр <paramref name="hour" /> меньше 0 или больше 23.  
  
 - или -  
  
 Параметр <paramref name="minute" /> меньше 0 или больше 59.  
  
 -или-  
  
 Параметр <paramref name="second" /> меньше 0 или больше 59.  
  
 - или -  
  
 Параметр <paramref name="millisecond" /> имеет значение меньше 0 или больше 999.</exception>
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer, kind As DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, DateTimeKind kind);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="kind" Type="System.DateTimeKind" />
      </Parameters>
      <Docs>
        <param name="year">Год (от 1 до 9999).</param>
        <param name="month">Месяц (от 1 до 12).</param>
        <param name="day">День (от 1 до количества дней в <c>month</c>).</param>
        <param name="hour">Часы (от 0 до 23).</param>
        <param name="minute">Минуты (от 0 до 59).</param>
        <param name="second">Секунды (от 0 до 59).</param>
        <param name="millisecond">Миллисекунды (от 0 до 999).</param>
        <param name="kind">Одно из значений перечисления, указывающее, что задаются параметры <c>year</c>, <c>month</c>, <c>day</c>, <c>hour</c>, <c>minute</c>, <c>second</c> и <c>millisecond</c>: локальное время, время в формате UTC или ни то, ни другое.</param>
        <summary>Инициализирует новый экземпляр структуры <see cref="T:System.DateTime" /> заданными значениями года, месяца, дня, часа, минуты, секунды и миллисекунды, а также временем UTC или местным временем.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот конструктор интерпретирует`year`, `month`, и `day` как год, месяц и день по григорианскому календарю. Для создания экземпляра <xref:System.DateTime> значение с помощью год, месяц и день в календаре другого вызова <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.DateTimeKind%29> конструктор.  
  
 Для приложений, в какие переносимость данных даты и времени или ограниченная часового пояса важно осведомленности, можно использовать соответствующие <xref:System.DateTimeOffset> конструктор.  
  
   
  
## Examples  
 В следующем примере используется <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.DateTimeKind%29> конструктора для создания <xref:System.DateTime> значение.  
  
 [!code-csharp[System.DateTime.Constructor#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#8)]
 [!code-vb[System.DateTime.Constructor#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          Параметр <paramref name="year" /> меньше 1 или больше 9999.  
  
 - или -  
  
 Параметр <paramref name="month" /> имеет значение меньше 1 или больше 12.  
  
 - или -  
  
 Параметр <paramref name="day" /> имеет значение меньше 1 или больше, чем число дней в <paramref name="month" />.  
  
 - или -  
  
 Параметр <paramref name="hour" /> меньше 0 или больше 23.  
  
 - или -  
  
 Параметр <paramref name="minute" /> меньше 0 или больше 59.  
  
 -или-  
  
 Параметр <paramref name="second" /> меньше 0 или больше 59.  
  
 - или -  
  
 Параметр <paramref name="millisecond" /> имеет значение меньше 0 или больше 999.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="kind" /> не является одним из значений <see cref="T:System.DateTimeKind" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, System.Globalization.Calendar calendar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, class System.Globalization.Calendar calendar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, System::Globalization::Calendar ^ calendar);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" />
      </Parameters>
      <Docs>
        <param name="year">Год (от 1 до количества лет в <c>calendar</c>).</param>
        <param name="month">Месяц (от 1 до количества месяцев в <c>calendar</c>).</param>
        <param name="day">День (от 1 до количества дней в <c>month</c>).</param>
        <param name="hour">Часы (от 0 до 23).</param>
        <param name="minute">Минуты (от 0 до 59).</param>
        <param name="second">Секунды (от 0 до 59).</param>
        <param name="millisecond">Миллисекунды (от 0 до 999).</param>
        <param name="calendar">Календарь, используемый для анализа параметров <c>year</c>, <c>month</c> и <c>day</c>.</param>
        <summary>Инициализирует новый экземпляр структуры <see cref="T:System.DateTime" /> указанным годом, месяцем, днем, часом, минутой, секундой и миллисекундой для заданного календаря.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Свойство <xref:System.DateTime.Kind%2A> инициализировано значением параметра <xref:System.DateTimeKind.Unspecified>.  
  
 Допустимые значения для `year`, `month`, и `day` зависят от `calendar`. Если исключение указанной даты и времени не могут быть выражены с помощью `calendar`.  
  
 Для приложений, в какие переносимость данных даты и времени или ограниченная часового пояса важно осведомленности, можно использовать соответствующие <xref:System.DateTimeOffset> конструктор.  
  
 <xref:System.Globalization> Несколько календарей, включая пространство имен предоставляет <xref:System.Globalization.GregorianCalendar> и <xref:System.Globalization.JulianCalendar>.  
  
   
  
## Examples  
 В следующем примере вызывается <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> конструктора два раза, чтобы создать два <xref:System.DateTime> значения. Первый вызов создает <xref:System.DateTime> значение с помощью <xref:System.Globalization.PersianCalendar> объекта. Поскольку персидский календарь нельзя назначить в качестве календаря по умолчанию для языка и региональных параметров, отображение даты в персидском календаре требует отдельных вызовов его <xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>, <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType>, и <xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType> методы. Создает второй вызов конструктора <xref:System.DateTime> значение с помощью <xref:System.Globalization.HijriCalendar> объекта. В примере изменяется на арабский (Сирия) текущего языка и региональных параметров и текущий язык и региональные параметры по умолчанию календарь изменяется на календарь хиджра. Так как исламский календарь по умолчанию для текущего языка и региональных параметров, <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> метод использует его для форматирования даты. При восстановлении предыдущей текущего языка и региональных параметров (который в данном случае является английский (США)) <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> метод использует текущий язык и региональные параметры по умолчанию григорианский календарь для форматирования даты.  
  
 [!code-csharp[System.DateTime.Constructor#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample6.cs#6)]
 [!code-vb[System.DateTime.Constructor#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample6.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="calendar" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> не входит в диапазон, поддерживаемый <paramref name="calendar" />.  
  
 - или -  
  
 <paramref name="month" /> меньше 1 или больше числа месяцев в <paramref name="calendar" />.  
  
 - или -  
  
 Параметр <paramref name="day" /> имеет значение меньше 1 или больше, чем число дней в <paramref name="month" />.  
  
 - или -  
  
 Параметр <paramref name="hour" /> меньше 0 или больше 23.  
  
 - или -  
  
 Параметр <paramref name="minute" /> меньше 0 или больше 59.  
  
 -или-  
  
 Параметр <paramref name="second" /> меньше 0 или больше 59.  
  
 - или -  
  
 Параметр <paramref name="millisecond" /> имеет значение меньше 0 или больше 999.</exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, System.Globalization.Calendar calendar, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, class System.Globalization.Calendar calendar, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar,System.DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, System::Globalization::Calendar ^ calendar, DateTimeKind kind);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" />
        <Parameter Name="kind" Type="System.DateTimeKind" />
      </Parameters>
      <Docs>
        <param name="year">Год (от 1 до количества лет в <c>calendar</c>).</param>
        <param name="month">Месяц (от 1 до количества месяцев в <c>calendar</c>).</param>
        <param name="day">День (от 1 до количества дней в <c>month</c>).</param>
        <param name="hour">Часы (от 0 до 23).</param>
        <param name="minute">Минуты (от 0 до 59).</param>
        <param name="second">Секунды (от 0 до 59).</param>
        <param name="millisecond">Миллисекунды (от 0 до 999).</param>
        <param name="calendar">Календарь, используемый для анализа параметров <c>year</c>, <c>month</c> и <c>day</c>.</param>
        <param name="kind">Одно из значений перечисления, указывающее, что задаются параметры <c>year</c>, <c>month</c>, <c>day</c>, <c>hour</c>, <c>minute</c>, <c>second</c> и <c>millisecond</c>: локальное время, время в формате UTC или ни то, ни другое.</param>
        <summary>Инициализирует новый экземпляр структуры <see cref="T:System.DateTime" /> заданными значениями года, месяца, дня, часа, минуты, секунды и миллисекунды, а также временем UTC или местным временем для заданного календаря.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Допустимые значения для `year`, `month`, и `day` параметры зависят от `calendar` параметра. Если исключение указанной даты и времени не могут быть выражены с помощью `calendar`.  
  
 Для приложений, в какие переносимость данных даты и времени или ограниченная часового пояса важно осведомленности, можно использовать соответствующие <xref:System.DateTimeOffset> конструктор.  
  
 <xref:System.Globalization> Несколько календарей, включая пространство имен предоставляет <xref:System.Globalization.GregorianCalendar> и <xref:System.Globalization.JulianCalendar>.  
  
   
  
## Examples  
 В следующем примере вызывается <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.DateTimeKind%29> конструктора два раза, чтобы создать два <xref:System.DateTime> значения. Первый вызов создает <xref:System.DateTime> значение с помощью <xref:System.Globalization.PersianCalendar> объекта. Поскольку персидский календарь нельзя назначить в качестве календаря по умолчанию для языка и региональных параметров, отображение даты в персидском календаре требует отдельных вызовов его <xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>, <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType>, и <xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType> методы. Создает второй вызов конструктора <xref:System.DateTime> значение с помощью <xref:System.Globalization.HijriCalendar> объекта. В примере изменяется на арабский (Сирия) текущего языка и региональных параметров и текущий язык и региональные параметры по умолчанию календарь изменяется на календарь хиджра. Так как исламский календарь по умолчанию для текущего языка и региональных параметров, <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> метод использует его для форматирования даты. При восстановлении предыдущей текущего языка и региональных параметров (который в данном случае является английский (США)) <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> метод использует текущий язык и региональные параметры по умолчанию григорианский календарь для форматирования даты.  
  
 [!code-csharp[System.DateTime.Constructor#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample9.cs#9)]
 [!code-vb[System.DateTime.Constructor#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample9.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="calendar" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> не входит в диапазон, поддерживаемый <paramref name="calendar" />.  
  
 - или -  
  
 <paramref name="month" /> меньше 1 или больше числа месяцев в <paramref name="calendar" />.  
  
 - или -  
  
 Параметр <paramref name="day" /> имеет значение меньше 1 или больше, чем число дней в <paramref name="month" />.  
  
 - или -  
  
 Параметр <paramref name="hour" /> меньше 0 или больше 23.  
  
 - или -  
  
 Параметр <paramref name="minute" /> меньше 0 или больше 59.  
  
 -или-  
  
 Параметр <paramref name="second" /> меньше 0 или больше 59.  
  
 - или -  
  
 Параметр <paramref name="millisecond" /> имеет значение меньше 0 или больше 999.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="kind" /> не является одним из значений <see cref="T:System.DateTimeKind" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public DateTime Add (TimeSpan value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime Add(valuetype System.TimeSpan value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Add(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (value As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime Add(TimeSpan value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="value">Положительный или отрицательный интервал времени.</param>
        <summary>Возвращает новый объект <see cref="T:System.DateTime" />, добавляющий значение заданного объекта <see cref="T:System.TimeSpan" /> к значению данного экземпляра.</summary>
        <returns>Объект, значение которого равно сумме даты и времени, представленных текущим экземпляром, и интервала времени, представленного параметром <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Можно использовать <xref:System.DateTime.Add%2A> метод, чтобы добавить более одного вида интервал времени (дней, часов, минут, секунд или миллисекунд) в одной операции. Этот метод идентичен, оператора сложения. <xref:System.DateTime> Структура также поддерживает добавление специализированные методы (такие как <xref:System.DateTime.AddDays%2A>, <xref:System.DateTime.AddHours%2A>, и <xref:System.DateTime.AddMinutes%2A>) для каждого интервала времени.  
  
 <xref:System.DateTime.Add%2A> Метод принимает в учетной записи високосный год или количество дней в месяце, при выполнении арифметических операций даты.  
  
 Этот метод не изменяет значение этой <xref:System.DateTime>. Вместо этого он возвращает новый <xref:System.DateTime> , значение которого является результатом этой операции. <xref:System.DateTime.Kind%2A> Нового <xref:System.DateTime> экземпляра совпадает с текущим экземпляром.  
  
   
  
## Examples  
 В следующем примере демонстрируется <xref:System.DateTime.Add%2A> метод. Он вычисляет день недели, 36 дней (864 часа) с текущего момента.  
  
 [!code-cpp[DateTime.Add#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Add/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Add#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Add/CS/class1.cs#1)]
 [!code-vb[DateTime.Add#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Add/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Итоговое значение <see cref="T:System.DateTime" /> меньше <see cref="F:System.DateTime.MinValue" /> или больше <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="M:System.TimeSpan.Add(System.TimeSpan)" />
      </Docs>
    </Member>
    <Member MemberName="AddDays">
      <MemberSignature Language="C#" Value="public DateTime AddDays (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddDays(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddDays(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddDays (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddDays(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Число полных и неполных дней. Параметр <c>value</c> может быть положительным или отрицательным.</param>
        <summary>Возвращает новый объект <see cref="T:System.DateTime" />, добавляющий заданное число дней к значению данного экземпляра.</summary>
        <returns>Объект, значение которого равно сумме даты и времени, представленных текущим экземпляром, и количества дней, представленного параметром <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод не изменяет значение этой <xref:System.DateTime>. Вместо этого он возвращает новый <xref:System.DateTime> , значение которого является результатом этой операции.  
  
 Дробная часть `value` дробная часть дня. Например 4.5 соответствует 4 дням, 12 часов, 0 минут, 0 секундам, 0 миллисекундам и 0 тактов.  
  
 `value` Значения округляются до ближайшей миллисекунды.  
  
 <xref:System.DateTime.AddDays%2A> Метод принимает в учетной записи високосный год или количество дней в месяце, при выполнении арифметических операций даты.  
  
   
  
## Examples  
 В следующем примере используется <xref:System.DateTime.AddDays%2A> метод определение дня недели 36 дней после текущей даты.  
  
 [!code-cpp[DateTime.AddDays#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.AddDays/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.AddDays#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.AddDays/CS/class1.cs#1)]
 [!code-vb[DateTime.AddDays#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.AddDays/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Итоговое значение <see cref="T:System.DateTime" /> меньше <see cref="F:System.DateTime.MinValue" /> или больше <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.Double" />
      </Docs>
    </Member>
    <Member MemberName="AddHours">
      <MemberSignature Language="C#" Value="public DateTime AddHours (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddHours(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddHours(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddHours (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddHours(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Число полных и неполных часов. Параметр <c>value</c> может быть положительным или отрицательным.</param>
        <summary>Возвращает новый объект <see cref="T:System.DateTime" />, добавляющий заданное число часов к значению данного экземпляра.</summary>
        <returns>Объект, значение которого равно сумме даты и времени, представленных текущим экземпляром, и количества часов, представленного параметром <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод не изменяет значение этой <xref:System.DateTime>. Вместо этого он возвращает новый <xref:System.DateTime> , значение которого является результатом этой операции. <xref:System.DateTime.Kind%2A> Свойство возвращаемого <xref:System.DateTime> объект является так же, как `value`.  
  
 Дробная часть `value` дробная часть часа. Например 4.5 соответствует 4 часов, 30 минут, 0 секунд, 0 миллисекунд и 0 тактов.  
  
 `value` Значения округляются до ближайшей миллисекунды.  
  
 Преобразование временных интервалов менее часа в дробную часть может приводить к потере точности, если результатом является бесконечно повторяющееся десятичное число. (Например, — одна минута 0.016667 часа.) Если это создает проблему, можно использовать <xref:System.DateTime.Add%2A> метод, который позволяет указать более одного вида интервал времени в одном методе и избавляет от необходимости преобразовывать интервалы времени в дробные части часа.  
  
   
  
## Examples  
 В следующем примере используется <xref:System.DateTime.AddHours%2A> метод, чтобы добавить число полных и неполных значений даты и времени. Также показывает потерю точности, вызванную передачей метод значением, которое содержит дробного компонента.  
  
 [!code-csharp[System.DateTime.AddHours#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.AddHours/cs/AddHours1.cs#1)]
 [!code-vb[System.DateTime.AddHours#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.AddHours/vb/AddHours1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Итоговое значение <see cref="T:System.DateTime" /> меньше <see cref="F:System.DateTime.MinValue" /> или больше <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="M:System.DateTime.Add(System.TimeSpan)" />
      </Docs>
    </Member>
    <Member MemberName="AddMilliseconds">
      <MemberSignature Language="C#" Value="public DateTime AddMilliseconds (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddMilliseconds(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddMilliseconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMilliseconds (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddMilliseconds(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Число полных и неполных миллисекунд. Параметр <c>value</c> может быть положительным или отрицательным. Заметьте, что это значение округляется до ближайшего целого числа.</param>
        <summary>Возвращает новый объект <see cref="T:System.DateTime" />, добавляющий заданное число миллисекунд к значению данного экземпляра.</summary>
        <returns>Объект, значение которого равно сумме даты и времени, представленных текущим экземпляром, и количества миллисекунд, представленного параметром <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод не изменяет значение этой <xref:System.DateTime>. Вместо этого он возвращает новый <xref:System.DateTime> , значение которого является результатом этой операции.  
  
 Дробная часть `value` дробная часть миллисекунды. Например, 4.5 соответствует 4 миллисекундам и 5000 тактов, где 1 миллисекунда = 10000 тактов.  
  
 `value` Значения округляются до ближайшего целого числа.  
  
   
  
## Examples  
 В следующем примере используется <xref:System.DateTime.AddMilliseconds%2A> метод для добавления одной миллисекунды, а 1,5 миллисекунд <xref:System.DateTime> значение. Затем отображает каждое новое значение и показывает отношение разности между ним и исходное значение. Разница отображается как промежуток времени и как число тактов. Пример позволяет понять, что один миллисекунда равна 10 000 тактов. Он также показывает, что дробное количество миллисекунд округляется перед выполнением сложения; <xref:System.DateTime> значение, полученное в результате добавления 1,5 миллисекунд к исходной даты — 2 миллисекунды больше исходной даты.  
  
 [!code-csharp[System.DateTime.AddMilliseconds#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addmilliseconds/cs/addmilliseconds2.cs#1)]
 [!code-vb[System.DateTime.AddMilliseconds#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addmilliseconds/vb/addmilliseconds2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Итоговое значение <see cref="T:System.DateTime" /> меньше <see cref="F:System.DateTime.MinValue" /> или больше <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.Double" />
      </Docs>
    </Member>
    <Member MemberName="AddMinutes">
      <MemberSignature Language="C#" Value="public DateTime AddMinutes (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddMinutes(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddMinutes(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMinutes (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddMinutes(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Число полных и неполных минут. Параметр <c>value</c> может быть положительным или отрицательным.</param>
        <summary>Возвращает новый объект <see cref="T:System.DateTime" />, добавляющий заданное число минут к значению данного экземпляра.</summary>
        <returns>Объект, значение которого равно сумме даты и времени, представленных текущим экземпляром, и количества минут, представленного параметром <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод не изменяет значение этой <xref:System.DateTime>. Вместо этого он возвращает новый <xref:System.DateTime> , значение которого является результатом этой операции.  
  
 Дробная часть `value` дробная часть минуты. Например 4.5 соответствует 4 минутам, 30 секундам, 0 миллисекундам и 0 тактов.  
  
 `value` Значения округляются до ближайшей миллисекунды.  
  
   
  
## Examples  
 В следующем примере используется <xref:System.DateTime.AddMinutes%2A> метод, чтобы добавить число полных и неполных значений даты и времени.  
  
 [!code-cpp[System.DateTime.AddMinutes#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.datetime.addminutes/cpp/addminutes1.cpp#1)]
 [!code-csharp[System.DateTime.AddMinutes#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addminutes/cs/addminutes1.cs#1)]
 [!code-vb[System.DateTime.AddMinutes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addminutes/vb/addminutes1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Итоговое значение <see cref="T:System.DateTime" /> меньше <see cref="F:System.DateTime.MinValue" /> или больше <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.Double" />
      </Docs>
    </Member>
    <Member MemberName="AddMonths">
      <MemberSignature Language="C#" Value="public DateTime AddMonths (int months);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddMonths(int32 months) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddMonths(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMonths (months As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddMonths(int months);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="months" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="months">Число месяцев. Параметр <c>months</c> может быть положительным или отрицательным.</param>
        <summary>Возвращает новый объект <see cref="T:System.DateTime" />, добавляющий заданное число месяцев к значению данного экземпляра.</summary>
        <returns>Объект, значением которого является сумма даты и времени, представленных этим экземпляром, и значения, представленного параметром <paramref name="months" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод не изменяет значение этой <xref:System.DateTime> объекта. Вместо этого он возвращает новый <xref:System.DateTime> объект, значение которого является результатом этой операции.  
  
 <xref:System.DateTime.AddMonths%2A> Метод вычисляет результирующее месяц и год, с учетом високосного года учетной записи и количество дней в месяце, затем изменяет составляющая дня <xref:System.DateTime> объекта. Если результирующий день не является допустимым днем конечного месяца, используется последний допустимый день результирующего месяца. Например, 31 марта + 1 месяц = 30 апреля и 31 марта - 1 месяц = 28 февраля для не являющегося високосным и феврале 29 для високосного.  
  
 Компонент времени суток <xref:System.DateTime> объект остается тем же, что и данный экземпляр.  
  
   
  
## Examples  
 В следующем примере добавляется от 0 до 15 месяцев до последнего дня декабря 2015 г. В этом случае метод AddMonths возвращает дату последнего дня каждого месяца и успешно обрабатывает високосного года.  
  
 [!code-csharp[System.DateTime.AddMonths#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addmonths/cs/addmonths1.cs#1)]
 [!code-vb[System.DateTime.AddMonths#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addmonths/vb/addmonths1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Итоговое значение <see cref="T:System.DateTime" /> меньше <see cref="F:System.DateTime.MinValue" /> или больше <see cref="F:System.DateTime.MaxValue" />.  
  
 - или -  
  
 Параметр <paramref name="months" /> имеет значение меньше –120 000 или больше 120 000.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddSeconds">
      <MemberSignature Language="C#" Value="public DateTime AddSeconds (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddSeconds(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddSeconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddSeconds (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddSeconds(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Число полных и неполных секунд. Параметр <c>value</c> может быть положительным или отрицательным.</param>
        <summary>Возвращает новый объект <see cref="T:System.DateTime" />, добавляющий заданное число секунд к значению данного экземпляра.</summary>
        <returns>Объект, значение которого равно сумме даты и времени, представленных текущим экземпляром, и количества секунд, представленного параметром <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод не изменяет значение этой <xref:System.DateTime>. Вместо этого он возвращает новый <xref:System.DateTime> , значение которого является результатом этой операции.  
  
 Дробная часть `value` является долей секунды. Например 4.5 соответствует 4 секундам, 500 миллисекунд и 0 тактов.  
  
 `value` Значения округляются до ближайшей миллисекунды.  
  
   
  
## Examples  
 В следующем примере используется <xref:System.DateTime.AddSeconds%2A> метод, чтобы добавить 30 секунд и число секунд в один день для <xref:System.DateTime> значение. Затем отображает каждое новое значение и показывает отношение разности между ним и исходное значение. Разница отображается как промежуток времени и как число тактов.  
  
 [!code-csharp[System.DateTime.AddSeconds#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addseconds/cs/addseconds1.cs#1)]
 [!code-vb[System.DateTime.AddSeconds#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addseconds/vb/addseconds1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Итоговое значение <see cref="T:System.DateTime" /> меньше <see cref="F:System.DateTime.MinValue" /> или больше <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.Double" />
      </Docs>
    </Member>
    <Member MemberName="AddTicks">
      <MemberSignature Language="C#" Value="public DateTime AddTicks (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddTicks(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddTicks(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddTicks (value As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddTicks(long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">Число 100-наносекундных тактов. Параметр <c>value</c> может быть положительным или отрицательным.</param>
        <summary>Возвращает новый объект <see cref="T:System.DateTime" />, добавляющий заданное число тактов к значению данного экземпляра.</summary>
        <returns>Объект, значение которого равно сумме даты и времени, представленных текущим экземпляром, и времени, представленного параметром <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод не изменяет значение этой <xref:System.DateTime>. Вместо этого он возвращает новый <xref:System.DateTime> , значение которого является результатом этой операции.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Итоговое значение <see cref="T:System.DateTime" /> меньше <see cref="F:System.DateTime.MinValue" /> или больше <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.Int64" />
        <altmember cref="P:System.DateTime.Ticks" />
      </Docs>
    </Member>
    <Member MemberName="AddYears">
      <MemberSignature Language="C#" Value="public DateTime AddYears (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddYears(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddYears(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddYears (value As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddYears(int value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">Число лет. Параметр <c>value</c> может быть положительным или отрицательным.</param>
        <summary>Возвращает новый объект <see cref="T:System.DateTime" />, добавляющий заданное число лет к значению данного экземпляра.</summary>
        <returns>Объект, значение которого равно сумме даты и времени, представленных текущим экземпляром, и количества лет, представленного параметром <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод не изменяет значение этой <xref:System.DateTime> объекта. Вместо этого он возвращает новый <xref:System.DateTime> объект, значение которого является результатом этой операции.  
  
 <xref:System.DateTime.AddYears%2A> Метод вычисляет конечного года, принимая во внимание високосного года. Часть результирующего месяца и дня время <xref:System.DateTime> объект остается тем же, что и данный экземпляр.  
  
 Если текущий экземпляр представляет день високосным на високосный год, возвращаемое значение зависит от конечная дата.  
  
-   Если `value`  +  <xref:System.DateTime.Year%2A?displayProperty=nameWithType> также является високосным годом, возвращаемое значение представляет день високосным в этом году. Например если четыре года добавляется 29 февраля 2012 г., даты, возвращенной — 29 февраля 2016 г.  
  
-   Если `value`  +  <xref:System.DateTime.Year%2A?displayProperty=nameWithType> не является високосным годом, возвращаемое значение представляет днем високосным в этом году. Например если добавляется один год 29 февраля 2012 г., даты, возвращенной — 28 февраля 2013 г.  
  
 В следующем примере демонстрируется использование <xref:System.DateTime.AddYears%2A> метод с <xref:System.DateTime> значение, представляющее день високосным годом. Он отображает дату для 15 лет до появления и 15 лет, приводимые 29 февраля 2000 г.  
  
 [!code-csharp[System.DateTime.AddYears#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addyears/cs/addyears1.cs#1)]
 [!code-vb[System.DateTime.AddYears#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addyears/vb/addyears1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="value" /> или результирующий объект <see cref="T:System.DateTime" /> меньше, чем <see cref="F:System.DateTime.MinValue" /> или больше, чем <see cref="F:System.DateTime.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (t1 As DateTime, t2 As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(DateTime t1, DateTime t2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">Первый из сравниваемых объектов.</param>
        <param name="t2">Второй из сравниваемых объектов.</param>
        <summary>Сравнивает два экземпляра объекта <see cref="T:System.DateTime" /> и возвращает целое число, которое показывает, предшествует ли первый экземпляр второму, совпадает или расположен позже.</summary>
        <returns>Число со знаком, обозначающее относительные значения параметров <paramref name="t1" /> и <paramref name="t2" />.  
  
 <list type="table"><listheader><term> Тип значения  
  
 </term><description> Условие  
  
 </description></listheader><item><term> Меньше нуля  
  
 </term><description> Момент, указанный в параметре <paramref name="t1" />, наступает раньше, чем момент, указанный в параметре <paramref name="t2" />.  
  
 </description></item><item><term> Нуль  
  
 </term><description> Параметр <paramref name="t1" /> совпадает с параметром <paramref name="t2" />.  
  
 </description></item><item><term> Больше нуля  
  
 </term><description> Момент, указанный в параметре <paramref name="t1" />, наступает позже, чем момент, указанный в параметре <paramref name="t2" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Чтобы определить связь между `t1` для `t2`, <xref:System.DateTime.Compare%2A> метод сравнивает <xref:System.DateTime.Ticks%2A> свойство `t1` и `t2` , но не учитывает их <xref:System.DateTime.Kind%2A> свойство. Перед сравнением <xref:System.DateTime> объектов, убедитесь, что они представляют время в одном часовом поясе.  
  
   
  
## Examples  
 В следующем примере демонстрируется <xref:System.DateTime.Compare%2A> метод.  
  
 [!code-csharp[System.DateTime.Compare#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.compare/cs/compare1.cs#1)]
 [!code-vb[System.DateTime.Compare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.compare/vb/compare1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CompareTo">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Сравнивает значение данного экземпляра с заданным значением <see cref="T:System.DateTime" /> и указывает, когда наступает момент, заданный в данном экземпляре: раньше, позже или одновременно с моментом, заданным значением <see cref="T:System.DateTime" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Два перегрузки <xref:System.DateTime.CompareTo%2A> метод возвращает число со знаком, указывающее относительное значение этого экземпляра и `value` аргумент, как показано в следующей таблице.  
  
|Значение|Описание:|  
|-----------|-----------------|  
|Меньше нуля|Данный экземпляр раньше `value`.|  
|Нуль|Данный экземпляр равен `value`.|  
|Больше нуля|Этот экземпляр позже `value`.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.CompareTo(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(DateTime value);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">Объект, сравниваемый с текущим экземпляром.</param>
        <summary>Сравнивает значение данного экземпляра с заданным значением <see cref="T:System.DateTime" /> и возвращает целочисленное значение, указывающее, когда наступает момент, заданный в данном экземпляре: раньше, позже или одновременно с моментом, заданным значением <see cref="T:System.DateTime" />.</summary>
        <returns>Число со знаком, представляющее результат сравнения значений этого экземпляра и параметра <paramref name="value" />.  
  
 <list type="table"><listheader><term> Значение  
  
 </term><description> Описание  
  
 </description></listheader><item><term> Меньше нуля  
  
 </term><description> Данный экземпляр раньше <paramref name="value" />.  
  
 </description></item><item><term> Нуль  
  
 </term><description> Данный экземпляр равен <paramref name="value" />.  
  
 </description></item><item><term> Больше нуля  
  
 </term><description> Данный экземпляр позже <paramref name="value" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Чтобы определить связь текущего экземпляра на `value`, <xref:System.DateTime.CompareTo%2A> метод сравнивает <xref:System.DateTime.Ticks%2A> свойство текущего экземпляра и `value` , но не учитывает их <xref:System.DateTime.Kind%2A> свойство.  Перед сравнением <xref:System.DateTime> объектов, убедитесь, что они представляют время в одном часовом поясе. Это можно сделать путем сравнения значений их <xref:System.DateTime.Kind%2A> свойства.  
  
 Этот метод реализует <xref:System.IComparable%601?displayProperty=nameWithType> интерфейс, а также выполняет немного быстрее, чем <xref:System.DateTime.CompareTo%28System.Object%29?displayProperty=nameWithType> перегрузку метода, так как его не нужно выполнять преобразование `value` параметр объекта.  
  
   
  
## Examples  
 В следующем примере создаются три <xref:System.DateTime> объектов, один из них представляет текущую дату, другой, представляющий дату ранее один год, а третий, представляющий дату в будущем в один год. Затем он вызывает <xref:System.DateTime.CompareTo%28System.DateTime%29> метод и отображает результат сравнения.  
  
 [!code-csharp[DateTime.CompareTo.2#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.CompareTo.2/CS/CompareTo_CS1_24564.cs#1)]
 [!code-vb[DateTime.CompareTo.2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.CompareTo.2/VB/CompareTo_VB1_24564.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Сравниваемый упакованный объект или значение <see langword="null" />.</param>
        <summary>Сравнивает значение данного экземпляра с заданным объектом, содержащим указанное значение <see cref="T:System.DateTime" />, и возвращает целочисленное значение, указывающее, когда наступает момент, заданный в данном экземпляре: раньше, позже или одновременно с моментом, заданным значением <see cref="T:System.DateTime" />.</summary>
        <returns>Знаковое число, представляющее относительные значения этого экземпляра и параметра <paramref name="value" />.  
  
 <list type="table"><listheader><term> Значение  
  
 </term><description> Описание  
  
 </description></listheader><item><term> Меньше нуля  
  
 </term><description> Данный экземпляр раньше <paramref name="value" />.  
  
 </description></item><item><term> Нуль  
  
 </term><description> Данный экземпляр равен <paramref name="value" />.  
  
 </description></item><item><term> Больше нуля  
  
 </term><description> Данный экземпляр позже <paramref name="value" />, или параметр <paramref name="value" /> имеет значение <see langword="null" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Чтобы определить связь текущего экземпляра на `value`, <xref:System.DateTime.CompareTo%2A> метод сравнивает <xref:System.DateTime.Ticks%2A> свойство текущего экземпляра и `value` , но не учитывает их <xref:System.DateTime.Kind%2A> свойство. Перед сравнением <xref:System.DateTime> объектов, убедитесь, что они представляют время в одном часовом поясе. Это можно сделать путем сравнения значений их <xref:System.DateTime.Kind%2A> свойства.  
  
 Любой экземпляр <xref:System.DateTime>, независимо от его значения, считается больше, чем `null`.  
  
   
  
## Examples  
 В следующем примере демонстрируется <xref:System.DateTime.CompareTo%2A> метод.  
  
 [!code-cpp[DateTime.CompareTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.CompareTo/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.CompareTo/CS/class1.cs#1)]
 [!code-vb[DateTime.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.CompareTo/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> не является объектом <see cref="T:System.DateTime" />.</exception>
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Date">
      <MemberSignature Language="C#" Value="public DateTime Date { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime Date" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Date" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Date As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime Date { DateTime get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает компоненту даты этого экземпляра.</summary>
        <value>Новый объект с такой же датой, как этот экземпляр и значением времени, равным полуночи (00:00:00).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Значение <xref:System.DateTime.Kind%2A> свойство возвращаемого <xref:System.DateTime> значение совпадает со значением, текущего экземпляра.  
  
 Поскольку <xref:System.DateTime> тип представляет обе даты и времени в одном типе, важно избежать неправильной интерпретации даты, возвращенной командой <xref:System.DateTime.Date%2A> свойства в виде даты и времени.  
  
   
  
## Examples  
 В следующем примере используется <xref:System.DateTime.Date%2A> свойство для извлечения компоненту даты <xref:System.DateTime> значение с его компонент времени равен нулю (или 0:00:00 или полночь). Он также показывает, что, в зависимости от строки формата, используемый при отображении <xref:System.DateTime> значения, компонент времени может продолжать отображаться в отформатированном значении.  
  
 [!code-cpp[System.DateTime.Date#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Date/cpp/date1.cpp#1)]
 [!code-csharp[System.DateTime.Date#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Date/cs/Date1.cs#1)]
 [!code-vb[System.DateTime.Date#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Date/vb/Date1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Day">
      <MemberSignature Language="C#" Value="public int Day { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Day" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Day" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Day As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Day { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает день месяца, представленный этим экземпляром.</summary>
        <value>Компонент, представляющий день, выраженный как значение от 1 до 31.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.Day%2A> Свойство всегда возвращает день месяца по григорианскому календарю, даже если текущий <xref:System.DateTime> значение был создан с помощью некоторых других календаря или если текущий поток календарь культуры по умолчанию не григорианского календаря. Для получения числа месяца для определенной даты с помощью некоторых других календаря, вызов этого календаря <xref:System.Globalization.Calendar.GetDayOfMonth%2A?displayProperty=nameWithType> метод. В следующем примере используются оба <xref:System.DateTime.Day%2A> свойство и <xref:System.Globalization.HijriCalendar.GetDayOfMonth%2A?displayProperty=nameWithType> метод для извлечения день месяца для <xref:System.DateTime> значение, экземпляр которого создается с помощью календаря Хиджра.  
  
 [!code-csharp[System.DateTime.Day#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Day/cs/Day1.cs#1)]
 [!code-vb[System.DateTime.Day#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Day/vb/Day1.vb#1)]  
  
 Аналогичным образом, в следующем примере используются оба <xref:System.DateTime.Day%2A> свойство и <xref:System.Globalization.HijriCalendar.GetDayOfMonth%2A?displayProperty=nameWithType> метод для извлечения день месяца, после ar-SA, который использует в качестве его по умолчанию календарь хиджра языком и региональными параметрами текущего потока.  
  
 [!code-csharp[System.DateTime.Day#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Day/cs/Day2.cs#2)]
 [!code-vb[System.DateTime.Day#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Day/vb/Day2.vb#2)]  
  
   
  
## Examples  
 В следующем примере демонстрируется <xref:System.DateTime.Day%2A> свойство.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DayOfWeek">
      <MemberSignature Language="C#" Value="public DayOfWeek DayOfWeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DayOfWeek DayOfWeek" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.DayOfWeek" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DayOfWeek As DayOfWeek" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DayOfWeek DayOfWeek { DayOfWeek get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DayOfWeek</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает день недели, представленный этим экземпляром.</summary>
        <value>Перечислимая константа, которая указывает на день недели для этого значения <see cref="T:System.DateTime" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Значение константы в <xref:System.DayOfWeek> перечисления в диапазоне от <xref:System.DayOfWeek.Sunday?displayProperty=nameWithType> для <xref:System.DayOfWeek.Saturday?displayProperty=nameWithType>. Если приведение в целое число, его значение лежит в диапазоне от нуля (указывающая <xref:System.DayOfWeek.Sunday?displayProperty=nameWithType>) до 6 (что означает <xref:System.DayOfWeek.Saturday?displayProperty=nameWithType>).  
  
 <xref:System.DateTime.DayOfWeek%2A> Свойство возвращает Перечислимая константа; он не отражает язык и региональные параметры системы. Чтобы получить строка, представляющая локализованное название дня недели для определенной даты, вызовите одну из перегрузок <xref:System.DateTime.ToString%2A> метод, который включает в себя `format` параметр и передать его либо `ddd` или `dddd` строк настраиваемого формата. Дополнительные сведения см. в разделе [как: извлечение дня недели из определенной даты](~/docs/standard/base-types/how-to-extract-the-day-of-the-week-from-a-specific-date.md).  
  
   
  
## Examples  
 В следующем примере демонстрируется <xref:System.DateTime.DayOfWeek%2A> свойство и <xref:System.DayOfWeek?displayProperty=nameWithType> перечисления.  
  
 [!code-cpp[DateTime.DayOfWeek#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.DayOfWeek/CPP/dow.cpp#1)]
 [!code-csharp[DateTime.DayOfWeek#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.DayOfWeek/CS/dow.cs#1)]
 [!code-vb[DateTime.DayOfWeek#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.DayOfWeek/VB/dow.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTime.Ticks" />
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <Member MemberName="DayOfYear">
      <MemberSignature Language="C#" Value="public int DayOfYear { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DayOfYear" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.DayOfYear" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DayOfYear As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int DayOfYear { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает день года, представленный этим экземпляром.</summary>
        <value>Компонент, представляющий день года, выраженный как значение от 1 до 366.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.DayOfYear%2A> Свойство учитывает високосного года при вычислении день года. Значение свойства всегда отражает день года по григорианскому календарю независимо от текущей культурой потока, текущий календарь. Чтобы получить день года по другому календарю, вызовите <xref:System.Globalization.Calendar.GetDayOfYear%2A?displayProperty=nameWithType> метод этого календаря.  
  
   
  
## Examples  
 В следующем примере отображается за день года, 31 декабря 2010 2020 лет по григорианскому календарю. Обратите внимание, что в примере показано, что 31 декабря — 366-й день года в високосного года.  
  
 [!code-csharp[System.DateTime.DayOfYear#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.dayofyear/cs/dayofyear2.cs#1)]
 [!code-vb[System.DateTime.DayOfYear#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.dayofyear/vb/dayofyear2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Globalization.Calendar.GetDayOfYear(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="DaysInMonth">
      <MemberSignature Language="C#" Value="public static int DaysInMonth (int year, int month);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 DaysInMonth(int32 year, int32 month) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.DaysInMonth(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DaysInMonth (year As Integer, month As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int DaysInMonth(int year, int month);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">Год.</param>
        <param name="month">Месяц (число в диапазоне от 1 до 12).</param>
        <summary>Возвращает число дней в указанном месяце указанного года.</summary>
        <returns>Число дней в <paramref name="month" /> для заданного <paramref name="year" />.  
  
 Например, если параметр <paramref name="month" /> равен 2 для февраля, возвращаемым значением является 28 или 29 в зависимости от того, является ли <paramref name="year" /> високосным годом.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.DaysInMonth%2A> Метод всегда интерпретирует `month` и `year` как месяц и год григорианского календаря, даже если григорианский календарь не текущего календаря текущего языка и региональных параметров. Чтобы получить число дней в указанном месяце конкретного календаря, вызов этого календаря <xref:System.Globalization.Calendar.GetDaysInMonth%2A> метод.  
  
   
  
## Examples  
 В следующем примере демонстрируется использование <xref:System.DateTime.DaysInMonth%2A> метод для определения числа дней июля 2001 года февраля 1998 (- високосном году) и февраля 1996 г. (високосный год).  
  
 [!code-cpp[DateTime.DaysInMonth#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.DaysInMonth/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.DaysInMonth#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.DaysInMonth/CS/class1.cs#1)]
 [!code-vb[DateTime.DaysInMonth#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.DaysInMonth/VB/class1.vb#1)]  
  
 Следующий пример отображает количество дней, в каждый месяц в году, указанный в массив целых чисел.  
  
 [!code-csharp[System.DateTime.DaysInMonth#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.daysinmonth/cs/daysinmonth3.cs#1)]
 [!code-vb[System.DateTime.DaysInMonth#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.daysinmonth/vb/daysinmonth3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          Параметр <paramref name="month" /> имеет значение меньше 1 или больше 12.  
  
 - или -  
  
 Параметр <paramref name="year" /> меньше 1 или больше 9999.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает значение, указывающее, имеют ли два объекта <see cref="T:System.DateTime" /> или экземпляр <see cref="T:System.DateTime" /> и другой объект либо <see cref="T:System.DateTime" /> одинаковые значения.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Equals(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (value As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(DateTime value);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">Объект, сравниваемый с этим экземпляром.</param>
        <summary>Возвращает значение, указывающее, равно ли значение данного экземпляра значению указанного экземпляра <see cref="T:System.DateTime" />.</summary>
        <returns>
          Значение <see langword="true" />, если параметр <paramref name="value" /> равен значению данного экземпляра; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Текущий экземпляр и `value` равны, если их <xref:System.DateTime.Ticks%2A> значения свойства равны. Их <xref:System.DateTime.Kind%2A> значения свойств, не считаются проверка на равенство.  
  
 Этот метод реализует <xref:System.IEquatable%601?displayProperty=nameWithType> интерфейсов и выполняет немного быстрее, чем <xref:System.DateTime.Equals%2A> метод поскольку `value` параметр не должен преобразовываться в объект.  
  
   
  
## Examples  
 В следующем примере демонстрируется <xref:System.DateTime.Equals%2A> метод.  
  
 [!code-csharp[System.DateTime.Equals-Instance#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/cs/sample.cs#1)]
 [!code-vb[System.DateTime.Equals-Instance#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Объект, сравниваемый с этим экземпляром.</param>
        <summary>Возвращает значение, показывающее, равен ли данный экземпляр заданному объекту.</summary>
        <returns>
          Значение <see langword="true" />, если параметр <paramref name="value" /> является экземпляром типа <see cref="T:System.DateTime" /> и равен значению данного экземпляра; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Текущий экземпляр и `value` равны, если их <xref:System.DateTime.Ticks%2A> значения свойства равны. Их <xref:System.DateTime.Kind%2A> значения свойств, не считаются проверка на равенство.  
  
   
  
## Examples  
 В следующем примере демонстрируется <xref:System.DateTime.Equals%2A> метод.  
  
 [!code-csharp[System.DateTime.Equals-Instance#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/cs/sample.cs#1)]
 [!code-vb[System.DateTime.Equals-Instance#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Equals(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Equals(DateTime t1, DateTime t2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">Первый из сравниваемых объектов.</param>
        <param name="t2">Второй из сравниваемых объектов.</param>
        <summary>Возвращает значение, указывающее, содержат ли два экземпляра <see cref="T:System.DateTime" /> одно и то же значение даты и времени.</summary>
        <returns>
          Значение <see langword="true" />, если два значения равны; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `t1` и `t2` равны, если их <xref:System.DateTime.Ticks%2A> значения свойства равны. Их <xref:System.DateTime.Kind%2A> значения свойств, не считаются проверка на равенство.  
  
   
  
## Examples  
 В следующем примере демонстрируется <xref:System.DateTime.Equals%2A> метод.  
  
 [!code-cpp[DateTime.Equals#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Equals/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Equals/CS/class1.cs#1)]
 [!code-vb[DateTime.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Equals/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="FromBinary">
      <MemberSignature Language="C#" Value="public static DateTime FromBinary (long dateData);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromBinary(int64 dateData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromBinary(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromBinary (dateData As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromBinary(long dateData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateData" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="dateData">64-разрядное целое число со знаком, кодирующее свойство <see cref="P:System.DateTime.Kind" /> в 2-разрядное поле и свойство <see cref="P:System.DateTime.Ticks" /> в 62-разрядное поле.</param>
        <summary>Десериализует 64-разрядное значение и воссоздает исходный сериализованный объект <see cref="T:System.DateTime" />.</summary>
        <returns>Объект, который эквивалентен объекту <see cref="T:System.DateTime" />, сериализованному методом <see cref="M:System.DateTime.ToBinary" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте <xref:System.DateTime.ToBinary%2A> метод для преобразования значения текущего <xref:System.DateTime> в двоичное значение. Впоследствии использовать двоичного значения и <xref:System.DateTime.FromBinary%2A> метод для повторного создания исходного <xref:System.DateTime> объекта.  
  
> [!IMPORTANT]
>  В некоторых случаях <xref:System.DateTime> значения, возвращенного <xref:System.DateTime.FromBinary%2A> метод не идентичный исходному <xref:System.DateTime> значение, передаваемое <xref:System.DateTime.ToBinary%2A> метод. Дополнительные сведения см. в следующем разделе «Коррекция местного времени».  
  
## <a name="local-time-adjustment"></a>Коррекция местного времени  
 Местное время, в которой находится в формате UTC, изменены для местного часового пояса, представленного <xref:System.DateTime> структура которого <xref:System.DateTime.Kind%2A> свойство имеет значение <xref:System.DateTimeKind.Local>. При восстановлении локальный <xref:System.DateTime> значение из двоичного представления, произведенное <xref:System.DateTime.ToBinary%2A> метода <xref:System.DateTime.FromBinary%2A> метод может изменить восстановленное значение, чтобы оно не равно исходное значение. Это может произойти в следующих случаях.  
  
-   Если локальный <xref:System.DateTime> из одного часового пояса путем сериализации объекта <xref:System.DateTime.ToBinary%2A> метод и затем десериализуется в другой часовой пояс по <xref:System.DateTime.FromBinary%2A> метод, представленный итоговый местное время <xref:System.DateTime> объект автоматически корректируется второй часовой пояс.  
  
     Например, рассмотрим <xref:System.DateTime> , представляющий местное время 15: 00. Приложение, которое выполняется в США. Тихоокеанском стандартном часовом поясе использует <xref:System.DateTime.ToBinary%2A> метод преобразования, <xref:System.DateTime> в двоичное значение. Другое приложение, которое выполняется в США. Затем используется в восточном часовом поясе <xref:System.DateTime.FromBinary%2A> метод преобразования двоичное значение в новый <xref:System.DateTime> объекта. Значение нового <xref:System.DateTime> объект — 18: 00, представляющее тот же момент времени в качестве исходного 15. значение, но откорректированное по местному времени в восточном часовом поясе.  
  
-   Если двоичное представление локального <xref:System.DateTime> значение представляет недопустимое время в местном часовом поясе системы, на котором <xref:System.DateTime.FromBinary%2A> — вызывается, время определяется, чтобы он допустим.  
  
     Например переход со стандартного времени на летнее время происходит в тихоокеанском часовом поясе США 14 марта 2010 г., в 2:00, когда время увеличивается на один час до 3:00. Этот часовой интервал является недопустимым временем, то есть интервал времени, не существует в данном часовом поясе. В следующем примере показано, что при времени, которые попадают в этот диапазон преобразуются в двоичное значение с <xref:System.DateTime.ToBinary%2A> метода и затем восстанавливается с <xref:System.DateTime.FromBinary%2A> метод исходное значение корректируется, чтобы стать допустимым. Можно определить ли определенная дата и время значения могут применяться изменения, передайте ее в <xref:System.TimeZoneInfo.IsInvalidTime%2A?displayProperty=nameWithType> метода, как показано в примере.  
  
     [!code-csharp[System.DateTime.FromBinary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.frombinary/cs/frombinary1.cs#1)]
     [!code-vb[System.DateTime.FromBinary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.frombinary/vb/frombinary1.vb#1)]  
  
## <a name="version-considerations"></a>Описание версии  
 Начиная с .NET Framework версии 2.0, <xref:System.DateTime> структура состоит из закрытого поля Kind, который указывает ли заданное время местное время, универсальное глобальное (UTC) или ни одного, объединяется закрытое поле тактов, которая содержит количество 100-наносекундных тактов, укажите дату и время. Число тактов можно осуществить с помощью <xref:System.DateTime.Ticks%2A> свойство и theKind поля можно осуществить с помощью <xref:System.DateTime.Kind%2A> свойство.  
  
 До .NET Framework 2.0, если вы сериализовать <xref:System.DateTime> объекта вручную, а не с помощью интерфейса сериализации, например <xref:System.Runtime.Serialization.ISerializable?displayProperty=nameWithType>, необходимыми для сериализации только данные в тактах <xref:System.DateTime>. Начиная с .NET Framework 2.0, необходимо сериализовать также типа данных.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          Значение <paramref name="dateData" /> меньше <see cref="F:System.DateTime.MinValue" /> или больше <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="M:System.DateTime.ToBinary" />
      </Docs>
    </Member>
    <Member MemberName="FromFileTime">
      <MemberSignature Language="C#" Value="public static DateTime FromFileTime (long fileTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromFileTime(int64 fileTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromFileTime(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromFileTime (fileTime As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromFileTime(long fileTime);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileTime" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="fileTime">Временная характеристика файла Windows, выраженная в тактах.</param>
        <summary>Преобразует заданное время файла Windows в его эквивалент по местному времени.</summary>
        <returns>Объект, представляющий местное время, эквивалентное дате и времени, которые определяются параметром <paramref name="fileTime" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Временная характеристика файла Windows является 64-разрядное значение, представляющее количество 100-наносекундных интервалов, прошедших с 00:00 1 января 1601 г. нашей эры (C.E.) Гринвичу (UTC). Windows использует временную характеристику файла для записи, когда приложение создает, обращается к или записывает в файл.  
  
 `fileTime` Параметр указывает файл время, выраженное в 100-наносекундных тактов.  
  
 Начиная с .NET Framework версии 2.0, возвращаемым значением является <xref:System.DateTime> которого <xref:System.DateTime.Kind%2A> свойство <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.  
  
   
  
## Examples  
 В следующем примере демонстрируется <xref:System.DateTime.FromFileTime%2A> метод.  
  
 [!code-cpp[DateTime.FromFileTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.FromFileTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.FromFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.FromFileTime/CS/class1.cs#1)]
 [!code-vb[DateTime.FromFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.FromFileTime/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          Значение параметра <paramref name="fileTime" /> меньше 0 или представляет время, большее <see cref="F:System.DateTime.MaxValue" />.</exception>
        <block subset="none" type="usage">
          <para>Как правило <see cref="M:System.DateTime.FromFileTime(System.Int64)" /> восстановление метод <see cref="T:System.DateTime" /> значения, которые были сохранены в <see cref="M:System.DateTime.ToFileTime" /> метод. Тем не менее эти два значения могут отличаться при следующих условиях:  
  
-   Если для сериализации и десериализации <see cref="T:System.DateTime" /> значение происходят в разных часовых поясах. Например если <see cref="T:System.DateTime" /> значение со временем 12:30 по в США. Восточное часовой пояс сериализуется и затем десериализуется в США. Тихоокеанском стандартном часовом поясе, исходное значение 12:30 по настраивается в 9:30:00 с учетом разницу между двумя часовыми поясами.  
  
-   Если <see cref="T:System.DateTime" /> значение, которое сериализуется представляет недопустимое время в местном часовом поясе. В этом случае <see cref="M:System.DateTime.ToFileTime" /> метод корректирует восстановленной <see cref="T:System.DateTime" /> значение, чтобы он предоставлял допустимое время в местном часовом поясе.  
  
     Например в США происходит переход со стандартного времени на летнее время Тихоокеанском стандартном часовом поясе на 14 марта 2010 г. в 2:00 утра, когда время увеличивается на один час до 3:00. Этот часовой интервал является недопустимым временем, то есть интервал времени, не существует в данном часовом поясе. В следующем примере показано, что при времени, которые попадают в этот диапазон преобразуются в длинное целое, <see cref="M:System.DateTime.ToFileTime" /> метода и затем восстанавливается с <see cref="M:System.DateTime.FromFileTime(System.Int64)" /> метод исходное значение корректируется, чтобы стать допустимым. Можно определить ли определенная дата и время значения могут применяться изменения, передайте ее в <see cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" /> метода, как показано в примере.  
  
     [!code-csharp[System.DateTime.FromFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.fromfiletime/cs/fromfiletime1.cs#1)]
     [!code-vb[System.DateTime.FromFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.fromfiletime/vb/fromfiletime1.vb#1)]</para>
        </block>
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="FromFileTimeUtc">
      <MemberSignature Language="C#" Value="public static DateTime FromFileTimeUtc (long fileTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromFileTimeUtc(int64 fileTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromFileTimeUtc(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromFileTimeUtc (fileTime As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromFileTimeUtc(long fileTime);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileTime" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="fileTime">Временная характеристика файла Windows, выраженная в тактах.</param>
        <summary>Преобразует заданное время файла Windows в его UTC-эквивалент.</summary>
        <returns>Объект, представляющий время в формате UTC, эквивалентное дате и времени, которые определяются параметром <paramref name="fileTime" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Временная характеристика файла Windows является 64-разрядное значение, представляющее количество 100-наносекундных интервалов, прошедших с 00:00 1 января 1601 г. нашей эры (C.E.) Гринвичу (UTC). Windows использует временную характеристику файла для записи, когда приложение создает, обращается к или записывает в файл.  
  
 `fileTime` Параметр указывает файл время, выраженное в 100-наносекундных тактов.  
  
 Начиная с .NET Framework версии 2.0, возвращаемым значением является <xref:System.DateTime> которого <xref:System.DateTime.Kind%2A> свойство <xref:System.DateTimeKind.Utc>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          Значение параметра <paramref name="fileTime" /> меньше 0 или представляет время, большее <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
        <altmember cref="M:System.DateTime.FromFileTime(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FromOADate">
      <MemberSignature Language="C#" Value="public static DateTime FromOADate (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromOADate(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromOADate(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromOADate (d As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromOADate(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d">Значение даты OLE-автоматизации.</param>
        <summary>Возвращает объект <see cref="T:System.DateTime" />, эквивалентный заданному значению даты OLE-автоматизации.</summary>
        <returns>Объект, представляющий дату и время, которые совпадают с датой и временем, определяемыми параметром <paramref name="d" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `d` Параметр является число с плавающей запятой двойной точности, которое представляет дату, как количество дней до или после базовой даты, полночь 30 декабря 1899 г. Вход и целочисленного часть `d` кодирование даты в виде положительного или отрицательного смещения от 30 декабря 1899 г. и абсолютным значением дробной части `d` кодирует время суток как доля смещения времени суток от полуночи. `d` должно быть значение в диапазоне от 657435.0 2958465.99999999 положительные и отрицательные.  
  
 Обратите внимание, что из-за способа кодирования дат, существует два способа представления любого времени суток 30 декабря 1899 г. Например -0,5 и 0,5 означает полдень 30 декабря 1899 г, так как смещения плюс-минус 0 дней от базовой даты по-прежнему является базовой даты, а смещение в полдня от полуночи — полудня.  
  
 В разделе <xref:System.DateTime.ToOADate%2A> Дополнительные сведения об OLE-автоматизации.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Дата не является допустимым значением даты OLE-автоматизации.</exception>
        <altmember cref="M:System.DateTime.ToOADate" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDateTimeFormats">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Преобразует значение этого экземпляра во все строковые представления, поддерживаемые стандартным форматом даты и времени.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  Не следует предполагать, что несколько вызовов <xref:System.DateTime.GetDateTimeFormats%2A> перегрузки будут возвращать одинаковые данные. В зависимости от его перегруженной версии Если текущий язык и региональные параметры изменены, пользователь переопределяет отдельные языковые и региональные параметры и системные данные обновляются можно изменить данные, возвращаемые этим методом.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Преобразует значение этого экземпляра во все строковые представления, поддерживаемые стандартным форматом даты и времени.</summary>
        <returns>Массив строк, каждый элемент которого является представлением значения этого экземпляра, отформатированным с использованием одного из стандартных спецификаторов формата даты и времени.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Массив строк, возвращенных <xref:System.DateTime.GetDateTimeFormats?displayProperty=nameWithType> метод эквивалентен методу объединение массивы строк, возвращенных отдельные вызовы <xref:System.DateTime.GetDateTimeFormats%28System.Char%29?displayProperty=nameWithType> метод с «d», «D», «f», «F», «g», «G», «m», «o», «r», «s», «t», «T», «u», «U» и строки стандартного формата «y». Дополнительные сведения о стандартных описателей форматов см. в разделе [стандартной строки даты и времени формат](~/docs/standard/base-types/standard-date-and-time-format-strings.md).  
  
 Каждый элемент возвращаемого значения отформатирован с использованием информации из текущего языка и региональных параметров. Дополнительные сведения о языком и региональными параметрами сведения о форматировании для текущего языка и региональных параметров см. в разделе <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>.  
  
> [!IMPORTANT]
>  Так как этот метод использует данные с учетом языка и региональных параметров, не предполагается, что несколько вызовов к методу будут возвращать одинаковые данные. Можно изменить данные, возвращаемые этим методом, если текущий язык и региональные параметры изменены, пользователь переопределяет отдельные языковые и региональные параметры и системные данные обновляются.  
  
   
  
## Examples  
 В следующем примере демонстрируется <xref:System.DateTime.GetDateTimeFormats?displayProperty=nameWithType> метод. Он отображает строковое представление даты с использованием всех возможных стандартных форматов даты и времени в текущей культуры компьютера, которая в данном случае является en US.  
  
 [!code-cpp[DateTime.GetDateTimeFormats#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.GetDateTimeFormats#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#1)]
 [!code-vb[DateTime.GetDateTimeFormats#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#1)]  
  
 В примере отображаются следующие выходные данные:  
  
```  
7/28/2009  
7/28/09  
07/28/09  
07/28/2009  
09/07/28  
2009-07-28  
28-Jul-09  
Tuesday, July 28, 2009  
July 28, 2009  
Tuesday, 28 July, 2009  
28 July, 2009  
Tuesday, July 28, 2009 5:23 AM  
Tuesday, July 28, 2009 05:23 AM  
Tuesday, July 28, 2009 5:23  
Tuesday, July 28, 2009 05:23  
July 28, 2009 5:23 AM  
July 28, 2009 05:23 AM  
July 28, 2009 5:23  
July 28, 2009 05:23  
Tuesday, 28 July, 2009 5:23 AM  
Tuesday, 28 July, 2009 05:23 AM  
Tuesday, 28 July, 2009 5:23  
Tuesday, 28 July, 2009 05:23  
28 July, 2009 5:23 AM  
28 July, 2009 05:23 AM  
28 July, 2009 5:23  
28 July, 2009 05:23  
Tuesday, July 28, 2009 5:23:15 AM  
Tuesday, July 28, 2009 05:23:15 AM  
Tuesday, July 28, 2009 5:23:15  
Tuesday, July 28, 2009 05:23:15  
July 28, 2009 5:23:15 AM  
July 28, 2009 05:23:15 AM  
July 28, 2009 5:23:15  
July 28, 2009 05:23:15  
Tuesday, 28 July, 2009 5:23:15 AM  
Tuesday, 28 July, 2009 05:23:15 AM  
Tuesday, 28 July, 2009 5:23:15  
Tuesday, 28 July, 2009 05:23:15  
28 July, 2009 5:23:15 AM  
28 July, 2009 05:23:15 AM  
28 July, 2009 5:23:15  
28 July, 2009 05:23:15  
7/28/2009 5:23 AM  
7/28/2009 05:23 AM  
7/28/2009 5:23  
7/28/2009 05:23  
7/28/09 5:23 AM  
7/28/09 05:23 AM  
7/28/09 5:23  
7/28/09 05:23  
07/28/09 5:23 AM  
07/28/09 05:23 AM  
07/28/09 5:23  
07/28/09 05:23  
07/28/2009 5:23 AM  
07/28/2009 05:23 AM  
07/28/2009 5:23  
07/28/2009 05:23  
09/07/28 5:23 AM  
09/07/28 05:23 AM  
09/07/28 5:23  
09/07/28 05:23  
2009-07-28 5:23 AM  
2009-07-28 05:23 AM  
2009-07-28 5:23  
2009-07-28 05:23  
28-Jul-09 5:23 AM  
28-Jul-09 05:23 AM  
28-Jul-09 5:23  
28-Jul-09 05:23  
7/28/2009 5:23:15 AM  
7/28/2009 05:23:15 AM  
7/28/2009 5:23:15  
7/28/2009 05:23:15  
7/28/09 5:23:15 AM  
7/28/09 05:23:15 AM  
7/28/09 5:23:15  
7/28/09 05:23:15  
07/28/09 5:23:15 AM  
07/28/09 05:23:15 AM  
07/28/09 5:23:15  
07/28/09 05:23:15  
07/28/2009 5:23:15 AM  
07/28/2009 05:23:15 AM  
07/28/2009 5:23:15  
07/28/2009 05:23:15  
09/07/28 5:23:15 AM  
09/07/28 05:23:15 AM  
09/07/28 5:23:15  
09/07/28 05:23:15  
2009-07-28 5:23:15 AM  
2009-07-28 05:23:15 AM  
2009-07-28 5:23:15  
2009-07-28 05:23:15  
28-Jul-09 5:23:15 AM  
28-Jul-09 05:23:15 AM  
28-Jul-09 5:23:15  
28-Jul-09 05:23:15  
July 28  
July 28  
2009-07-28T05:23:15.0160000  
2009-07-28T05:23:15.0160000  
Tue, 28 Jul 2009 05:23:15 GMT  
Tue, 28 Jul 2009 05:23:15 GMT  
2009-07-28T05:23:15  
5:23 AM  
05:23 AM  
5:23  
05:23  
5:23:15 AM  
05:23:15 AM  
5:23:15  
05:23:15  
2009-07-28 05:23:15Z  
Tuesday, July 28, 2009 12:23:15 PM  
Tuesday, July 28, 2009 12:23:15 PM  
Tuesday, July 28, 2009 12:23:15  
Tuesday, July 28, 2009 12:23:15  
July 28, 2009 12:23:15 PM  
July 28, 2009 12:23:15 PM  
July 28, 2009 12:23:15  
July 28, 2009 12:23:15  
Tuesday, 28 July, 2009 12:23:15 PM  
Tuesday, 28 July, 2009 12:23:15 PM  
Tuesday, 28 July, 2009 12:23:15  
Tuesday, 28 July, 2009 12:23:15  
28 July, 2009 12:23:15 PM  
28 July, 2009 12:23:15 PM  
28 July, 2009 12:23:15  
28 July, 2009 12:23:15  
July, 2009  
July, 2009  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats (char format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats(char format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats (format As Char) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats(char format);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="format">Строка стандартного формата даты и времени.</param>
        <summary>Преобразует значение этого экземпляра во все строковые представления, поддерживаемые указанным стандартным спецификатором формата даты и времени.</summary>
        <returns>Массив строк, каждый элемент которого является представлением значения этого экземпляра, отформатированным с использованием стандартного спецификатора формата даты и времени <paramref name="format" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `format` Параметр может иметь любой из стандартных даты и времени описателей формата. К ним относятся d, D, f, F, g, G, M (или m), O (или o), R (или r), s, t, T, u, U и Y (или y). Дополнительные сведения см. в разделе [стандартной строки даты и времени формат](~/docs/standard/base-types/standard-date-and-time-format-strings.md).  
  
 Каждый элемент возвращаемого значения отформатирован с использованием информации из текущего языка и региональных параметров. Дополнительные сведения о языком и региональными параметрами сведения о форматировании для текущего языка и региональных параметров см. в разделе <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>.  
  
> [!IMPORTANT]
>  Так как этот метод использует данные с учетом языка и региональных параметров, не предполагается, что несколько вызовов к методу будут возвращать одинаковые данные. Можно изменить данные, возвращаемые этим методом, если текущий язык и региональные параметры изменены, пользователь переопределяет отдельные языковые и региональные параметры и системные данные обновляются.  
  
   
  
## Examples  
 В следующем примере демонстрируется <xref:System.DateTime.GetDateTimeFormats%28System.Char%29> метод. Он отображает строковое представление даты с использованием Описатель полного формата даты («D») для текущего языка и региональных параметров.  
  
 [!code-csharp[DateTime.GetDateTimeFormats#3](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#3)]
 [!code-vb[DateTime.GetDateTimeFormats#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          Параметр <paramref name="format" /> не является допустимым символом описателя стандартного формата даты и времени.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats (provider As IFormatProvider) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats(IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Объект, который представляет связанную с языком и региональными параметрами информацию о форматировании этого экземпляра.</param>
        <summary>Преобразует значение этого экземпляра во все строковые представления, поддерживаемые стандартными спецификаторами формата даты и времени и указанными сведениями о форматировании, связанными с языком и региональными параметрами.</summary>
        <returns>Массив строк, каждый элемент которого является представлением значения этого экземпляра, отформатированным с использованием одного из стандартных спецификаторов формата даты и времени.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Массив строк, возвращенных <xref:System.DateTime.GetDateTimeFormats%28System.IFormatProvider%29?displayProperty=nameWithType> метод эквивалентен методу объединение массивы строк, возвращенных отдельные вызовы <xref:System.DateTime.GetDateTimeFormats%28System.Char%2CSystem.IFormatProvider%29?displayProperty=nameWithType> метод с «d», «D», «f», «F», «g», «G», «m», «o», «r», «s», «t», «T», «u», «U» и строки стандартного формата «y». Дополнительные сведения о стандартных описателей форматов см. в разделе [стандартной строки даты и времени формат](~/docs/standard/base-types/standard-date-and-time-format-strings.md).  
  
 Каждый элемент возвращаемого значения отформатирован с использованием региональных сведений, предоставленных службой `provider`.  
  
> [!IMPORTANT]
>  Поскольку этот метод использует данные с учетом языка и региональных параметров, вам не следует предполагать, что несколько вызовов к методу будут возвращать одинаковые данные, если `provider` — <xref:System.Globalization.CultureInfo> , представляющий инвариантного языка и региональных параметров. Можно изменить данные, возвращаемые этим методом, если пользователь переопределяет отдельные региональные параметры `provider` или если происходит обновление системные данные для `provider`.  
  
   
  
## Examples  
 В следующем примере демонстрируется <xref:System.DateTime.GetDateTimeFormats%28System.IFormatProvider%29?displayProperty=nameWithType> метод. Он отображает строковое представление даты с использованием всех возможных стандартных форматов даты и времени для региональных параметров fr-FR.  
  
 [!code-cpp[DateTime.GetDateTimeFormats#2](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CPP/class1.cpp#2)]
 [!code-csharp[DateTime.GetDateTimeFormats#2](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#2)]
 [!code-vb[DateTime.GetDateTimeFormats#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#2)]  
  
 В примере отображаются следующие выходные данные:  
  
```  
28/07/2009  
28/07/09  
28.07.09  
28-07-09  
2009-07-28  
mardi 28 juillet 2009  
28 juil. 09  
28 juillet 2009  
mardi 28 juillet 2009 05:23  
mardi 28 juillet 2009 5:23  
mardi 28 juillet 2009 05.23  
mardi 28 juillet 2009 05 h 23  
28 juil. 09 05:23  
28 juil. 09 5:23  
28 juil. 09 05.23  
28 juil. 09 05 h 23  
28 juillet 2009 05:23  
28 juillet 2009 5:23  
28 juillet 2009 05.23  
28 juillet 2009 05 h 23  
mardi 28 juillet 2009 05:23:15  
mardi 28 juillet 2009 5:23:15  
mardi 28 juillet 2009 05.23  
mardi 28 juillet 2009 05 h 23  
28 juil. 09 05:23:15  
28 juil. 09 5:23:15  
28 juil. 09 05.23  
28 juil. 09 05 h 23  
28 juillet 2009 05:23:15  
28 juillet 2009 5:23:15  
28 juillet 2009 05.23  
28 juillet 2009 05 h 23  
28/07/2009 05:23  
28/07/2009 5:23  
28/07/2009 05.23  
28/07/2009 05 h 23  
28/07/09 05:23  
28/07/09 5:23  
28/07/09 05.23  
28/07/09 05 h 23  
28.07.09 05:23  
28.07.09 5:23  
28.07.09 05.23  
28.07.09 05 h 23  
28-07-09 05:23  
28-07-09 5:23  
28-07-09 05.23  
28-07-09 05 h 23  
2009-07-28 05:23  
2009-07-28 5:23  
2009-07-28 05.23  
2009-07-28 05 h 23  
28/07/2009 05:23:15  
28/07/2009 5:23:15  
28/07/2009 05.23  
28/07/2009 05 h 23  
28/07/09 05:23:15  
28/07/09 5:23:15  
28/07/09 05.23  
28/07/09 05 h 23  
28.07.09 05:23:15  
28.07.09 5:23:15  
28.07.09 05.23  
28.07.09 05 h 23  
28-07-09 05:23:15  
28-07-09 5:23:15  
28-07-09 05.23  
28-07-09 05 h 23  
2009-07-28 05:23:15  
2009-07-28 5:23:15  
2009-07-28 05.23  
2009-07-28 05 h 23  
28 juillet  
28 juillet  
2009-07-28T05:23:15.0160000  
2009-07-28T05:23:15.0160000  
Tue, 28 Jul 2009 05:23:15 GMT  
Tue, 28 Jul 2009 05:23:15 GMT  
2009-07-28T05:23:15  
05:23  
5:23  
05.23  
05 h 23  
05:23:15  
5:23:15  
05.23  
05 h 23  
2009-07-28 05:23:15Z  
mardi 28 juillet 2009 12:23:15  
mardi 28 juillet 2009 12:23:15  
mardi 28 juillet 2009 12.23  
mardi 28 juillet 2009 12 h 23  
28 juil. 09 12:23:15  
28 juil. 09 12:23:15  
28 juil. 09 12.23  
28 juil. 09 12 h 23  
28 juillet 2009 12:23:15  
28 juillet 2009 12:23:15  
28 juillet 2009 12.23  
28 juillet 2009 12 h 23  
juillet 2009  
juillet 2009  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats (char format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats(char format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats(System.Char,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats (format As Char, provider As IFormatProvider) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats(char format, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Char" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">Строка формата даты и времени.</param>
        <param name="provider">Объект, который представляет связанную с языком и региональными параметрами информацию о форматировании этого экземпляра.</param>
        <summary>Преобразует значение этого экземпляра во все строковые представления, поддерживаемые указанным стандартным спецификатором формата даты и времени и сведениями о форматировании, связанными с языком и региональными параметрами.</summary>
        <returns>Массив строк, каждый элемент которого является представлением значения этого экземпляра, отформатированным с использованием одного из стандартных спецификаторов формата даты и времени.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Параметр формата может быть любой из стандартных даты и времени описателей формата. К ним относятся d, D, f, F, g, G, M (или m), O (или o), R (или r), s, t, T, u, U и Y (или y). Дополнительные сведения см. в разделе [стандартной строки даты и времени формат](~/docs/standard/base-types/standard-date-and-time-format-strings.md).  
  
 Каждый элемент возвращаемого значения отформатирован с использованием региональных сведений, предоставленных службой `provider`.  
  
> [!IMPORTANT]
>  Поскольку этот метод использует данные с учетом языка и региональных параметров, вам не следует предполагать, что несколько вызовов к методу будут возвращать одинаковые данные, если `provider` — <xref:System.Globalization.CultureInfo> , представляющий инвариантного языка и региональных параметров. Можно изменить данные, возвращаемые этим методом, если пользователь переопределяет отдельные региональные параметры `provider` или если происходит обновление системные данные для `provider`.  
  
   
  
## Examples  
 В следующем примере демонстрируется <xref:System.DateTime.GetDateTimeFormats%28System.Char%2CSystem.IFormatProvider%29> метод. Он отображает строковые представления даты с использованием описателя формата короткого формата даты («d») для языка и региональных параметров fr-FR.  
  
 [!code-csharp[DateTime.GetDateTimeFormats#4](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#4)]
 [!code-vb[DateTime.GetDateTimeFormats#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          Параметр <paramref name="format" /> не является допустимым символом описателя стандартного формата даты и времени.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает хэш-код данного экземпляра.</summary>
        <returns>Хэш-код в виде 32-разрядного целого числа со знаком.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public TypeCode GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TypeCode GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTypeCode () As TypeCode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual TypeCode GetTypeCode();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает <see cref="T:System.TypeCode" /> для типа значения <see cref="T:System.DateTime" />.</summary>
        <returns>Константа перечислимого типа, <see cref="F:System.TypeCode.DateTime" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Hour">
      <MemberSignature Language="C#" Value="public int Hour { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Hour" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Hour" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Hour As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Hour { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает компонент часа даты, представленной этим экземпляром.</summary>
        <value>Компонент, представляющий час, выраженный как значение от 0 до 23.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Значение <xref:System.DateTime.Hour%2A> свойства всегда выражается в 24-часовом формате. Чтобы получить строку, которая представляет час, даты и времени в 12-часовом формате, вызовите <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> или <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> метод с описатель настраиваемого формата «h». Пример:  
  
 [!code-csharp[System.DateTime.Hour#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Hour/cs/Hour1.cs#1)]
 [!code-vb[System.DateTime.Hour#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Hour/vb/Hour1.vb#1)]  
  
   
  
## Examples  
 В следующем примере демонстрируется <xref:System.DateTime.Hour%2A> свойство.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool IsDaylightSavingTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsDaylightSavingTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.IsDaylightSavingTime" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDaylightSavingTime () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsDaylightSavingTime();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Указывает, попадает ли данный экземпляр объекта <see cref="T:System.DateTime" /> в диапазон летнего времени для текущего часового пояса.</summary>
        <returns>
          Значение <see langword="true" />, если значение свойства <see cref="P:System.DateTime.Kind" /> — <see cref="F:System.DateTimeKind.Local" /> или <see cref="F:System.DateTimeKind.Unspecified" /> и значение этого экземпляра <see cref="T:System.DateTime" /> находится в диапазоне летнего времени для локального часового пояса; значение <see langword="false" />, если <see cref="P:System.DateTime.Kind" /> — <see cref="F:System.DateTimeKind.Utc" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод определяет, является ли текущий <xref:System.DateTime> попадает в диапазон летнего времени часового пояса, который возвращается методом <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> свойство. Можно определить, поддерживает ли часового пояса на летнее время, получая значение его <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A?displayProperty=nameWithType> свойство. Для часовых поясах летнего времени, можно определить при возникновении переход на и с летнего времени, получая <xref:System.TimeZoneInfo.AdjustmentRule?displayProperty=nameWithType> массиве, возвращенном часового пояса <xref:System.TimeZoneInfo.GetAdjustmentRules%2A?displayProperty=nameWithType> свойство.  
  
 Если текущий <xref:System.DateTime> значение представляет неоднозначное или недопустимое время в местном часовом поясе, метод возвращает `false`.  
  
 На [!INCLUDE[winxp](~/includes/winxp-md.md)] систем, <xref:System.DateTime.IsDaylightSavingTime%2A> метод распознает только текущее правило коррекции определить, является ли текущий экземпляр летнее время. В результате метод может неточно сообщать ли текущий экземпляр является летнего времени для периодов, когда текущее правило коррекции еще вступают в силу.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="IsLeapYear">
      <MemberSignature Language="C#" Value="public static bool IsLeapYear (int year);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLeapYear(int32 year) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.IsLeapYear(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLeapYear (year As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLeapYear(int year);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">4-значный номер года.</param>
        <summary>Возвращает сведения о том, является ли указанный год високосным.</summary>
        <returns>
          <see langword="true" />, если <paramref name="year" /> является високосным годом; в противном случае — <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `year` задается как 4-значное десятичное число; Например, 1996 г.  
  
 `year` всегда интерпретируется как год по григорианскому календарю. Чтобы определить, успешно ли за определенный год високосным годом в некоторых других календарей, вызовите объект календаря `IsLeapYear` метод.  
  
   
  
## Examples  
 В следующем примере используется <xref:System.DateTime.IsLeapYear%2A> метод, чтобы определить, какие лет между 1994 и 2014 високосного года. В примере также демонстрируется результат при <xref:System.DateTime.AddYears%2A> метод используется для добавления в день високосного года.  
  
 [!code-csharp[System.DateTime.IsLeapYear#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.IsLeapYear/cs/IsLeapYear1.cs#1)]
 [!code-vb[System.DateTime.IsLeapYear#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.IsLeapYear/vb/IsLeapYear1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          Параметр <paramref name="year" /> меньше 1 или больше 9999.</exception>
      </Docs>
    </Member>
    <Member MemberName="Kind">
      <MemberSignature Language="C#" Value="public DateTimeKind Kind { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTimeKind Kind" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Kind" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Kind As DateTimeKind" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTimeKind Kind { DateTimeKind get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeKind</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, указывающее, на каком времени основано время, представленное этим экземпляром: местном, UTC или ни на том, ни на другом.</summary>
        <value>Одно из значений перечисления, определяющее значение текущего времени. Значение по умолчанию: <see cref="F:System.DateTimeKind.Unspecified" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Можно явно задать <xref:System.DateTime.Kind%2A> свойства нового <xref:System.DateTime> значение к конкретному <xref:System.DateTimeKind> , вызвав <xref:System.DateTime.SpecifyKind%2A> метод.  
  
 <xref:System.DateTime.Kind%2A> Свойство позволяет <xref:System.DateTime> значение в соответствии с четко временем в формате UTC или местного времени. Напротив <xref:System.DateTimeOffset> структуру может однозначно отражать любое время в любой часовой пояс как единственный момент времени.  
  
   
  
## Examples  
 В следующем примере используется <xref:System.DateTime.SpecifyKind%2A> метод, чтобы продемонстрировать, как <xref:System.DateTime.Kind%2A> влияет на то <xref:System.DateTime.ToLocalTime%2A> и <xref:System.DateTime.ToUniversalTime%2A> методы преобразования.  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.SpecifyKind(System.DateTime,System.DateTimeKind)" />
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="C#" Value="public static readonly DateTime MaxValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTime MaxValue" />
      <MemberSignature Language="DocId" Value="F:System.DateTime.MaxValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MaxValue As DateTime " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTime MaxValue;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Представляет наибольшее возможное значение типа <see cref="T:System.DateTime" />. Это поле доступно только для чтения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Значение этой константы эквивалентно 23:59:59.9999999 UTC, 31 декабря 9999 года по григорианскому календарю ровно один 100-наносекундных тактов перед 00:00:00 UTC 1 января, 10000.  
  
 В одних календарях, таких как <xref:System.Globalization.ThaiBuddhistCalendar>, поддерживает диапазон верхний даты, предшествующей <xref:System.DateTime.MaxValue>. В этих случаях при обращении к <xref:System.DateTime.MaxValue> в присваивания значений переменным или форматирование и операциях синтаксического анализа может вызывать <xref:System.ArgumentOutOfRangeException>. Вместо того, чтобы получить значение <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, можно получить значение указанного языка и региональных параметров последнюю допустимое значение даты из <xref:System.Globalization.Calendar.MaxSupportedDateTime?displayProperty=nameWithType> свойство.  
  
   
  
## Examples  
 В следующем примере создается <xref:System.DateTime> объекта путем передачи его конструктору <xref:System.Int64> значение, представляющее число тактов. Перед вызовом конструктора, в примере проверяется, что это значение больше или равно `DateTime.MinValue.Ticks` и меньше или равно `DateTime.MaxValue.Ticks`. Если нет, он вызывает <xref:System.ArgumentOutOfRangeException>.  
  
 [!code-csharp[System.DateTime.MinValue#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.MinValue/cs/MinValue.cs#2)]
 [!code-vb[System.DateTime.MinValue#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.MinValue/vb/MinValue.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.DateTime.MinValue" />
      </Docs>
    </Member>
    <Member MemberName="Millisecond">
      <MemberSignature Language="C#" Value="public int Millisecond { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Millisecond" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Millisecond" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Millisecond As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Millisecond { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает компонент миллисекунд для даты, представленной в данном экземпляре.</summary>
        <value>Компонент, представляющий миллисекунды, выраженный как значение от 0 до 999.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Можно отображать строковое представление <xref:System.DateTime.Millisecond%2A> свойства с помощью описателя формата «fff». Например следующий код отображает строку, содержащую число миллисекунд в дате и времени на консоль.  
  
 [!code-csharp[System.DateTime.Millisecond#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Millisecond/cs/Millisecond.cs#1)]
 [!code-vb[System.DateTime.Millisecond#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Millisecond/vb/Millisecond.vb#1)]  
  
 Можно также отобразить компонент миллисекунд вместе с другими компонентами значения даты и времени с помощью описателя стандартного формата «o». Пример:  
  
 [!code-csharp[System.DateTime.Millisecond#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Millisecond/cs/Millisecond.cs#2)]
 [!code-vb[System.DateTime.Millisecond#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Millisecond/vb/Millisecond.vb#2)]  
  
 Тем не менее, описатель формата «o» предназначен для отображения, а для циклической обработки и хранения менее <xref:System.DateTime> значение. Можно также отобразить миллисекунды вместе с другими компонентами даты и времени с использованием строки настраиваемого формата, как показано в следующем примере.  
  
 [!code-csharp[System.DateTime.Millisecond#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Millisecond/cs/Millisecond.cs#3)]
 [!code-vb[System.DateTime.Millisecond#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Millisecond/vb/Millisecond.vb#3)]  
  
   
  
## Examples  
 В следующем примере демонстрируется <xref:System.DateTime.Millisecond%2A> свойство.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Minute">
      <MemberSignature Language="C#" Value="public int Minute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Minute" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Minute" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Minute As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Minute { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает компонент минуты даты, представленной этим экземпляром.</summary>
        <value>Компонент, представляющий минуту, выраженный как значение от 0 до 59.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере демонстрируется <xref:System.DateTime.Minute%2A> свойство.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="C#" Value="public static readonly DateTime MinValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTime MinValue" />
      <MemberSignature Language="DocId" Value="F:System.DateTime.MinValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MinValue As DateTime " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTime MinValue;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Представляет минимально допустимое значение типа <see cref="T:System.DateTime" />. Это поле доступно только для чтения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Значение этой константы эквивалентно 00:00:00.0000000 время в формате UTC 1 января 0001 года по григорианскому календарю.  
  
 <xref:System.DateTime.MinValue> Определяет дату и время, назначенный для неинициализированного <xref:System.DateTime> переменной. Это показано в следующем примере.  
  
 [!code-csharp[System.DateTime.MinValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.MinValue/cs/MinValue.cs#1)]
 [!code-vb[System.DateTime.MinValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.MinValue/vb/MinValue.vb#1)]  
  
 <xref:System.DateTime.MinValue> И <xref:System.DateTime.MaxValue> свойства можно использовать для убедитесь, что значение лежит в пределах допустимого диапазона перед передачей <xref:System.DateTime> конструктор. В следующем примере кода демонстрируется использование этой привязки.  
  
   
  
## Examples  
 В следующем примере создается <xref:System.DateTime> объекта путем передачи его конструктору <xref:System.Int64> значение, представляющее число тактов. Перед вызовом конструктора, в примере проверяется, что это значение больше или равно `DateTime.MinValue.Ticks` и меньше или равно `DateTime.MaxValue.Ticks`. Если нет, он вызывает <xref:System.ArgumentOutOfRangeException>.  
  
 [!code-csharp[System.DateTime.MinValue#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.MinValue/cs/MinValue.cs#2)]
 [!code-vb[System.DateTime.MinValue#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.MinValue/vb/MinValue.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Month">
      <MemberSignature Language="C#" Value="public int Month { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Month" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Month" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Month As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Month { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает компонент месяца даты, представленной этим экземпляром.</summary>
        <value>Компонент, представляющий месяц, выраженный как значение от 1 до 12.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере демонстрируется <xref:System.DateTime.Month%2A> свойство.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Now">
      <MemberSignature Language="C#" Value="public static DateTime Now { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime Now" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Now" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Now As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime Now { DateTime get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает объект <see cref="T:System.DateTime" />, которому присвоены текущие дата и время данного компьютера, выраженные как местное время.</summary>
        <value>Объект, значение которого является текущим значением местной даты и времени.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.Now%2A> Возвращает <xref:System.DateTime> значение, представляющее текущую дату и время на локальном компьютере. Обратите внимание, что разница между <xref:System.DateTime> значение, представляющее количество тактов, прошедших с полуночи 1 января 0001 года, и строковое представление, <xref:System.DateTime> значение, которое представляет значение даты и времени в формат для конкретной культуры. Сведения о форматировании значений даты и времени см. в разделе <xref:System.DateTime.ToString%2A> метод. Следующий пример отображает краткий формат даты и времени в несколько форматов, зависящих от языка и региональных параметров.  
  
 [!code-cpp[System.DateTime.Now#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.datetime.now/cpp/now1.cpp#2)]
 [!code-csharp[System.DateTime.Now#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.now/cs/now1.cs#2)]
 [!code-vb[System.DateTime.Now#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.now/vb/now1.vb#2)]  
  
 Разрешение для данного свойства зависит от системного таймера, который зависит от операционной системы. Он обычно от 0,5 до 15 миллисекунд. В результате повторные вызовы <xref:System.DateTime.Now%2A> свойство в короткий интервал, например в цикле, могут возвращать то же значение.  
  
 <xref:System.DateTime.Now%2A> Свойство часто используется для измерения производительности. Однако из-за его низкое разрешение не подходит для использования в качестве средства оценки эффективности. Лучшим вариантом является использование <xref:System.Diagnostics.Stopwatch> класса.  
  
 Начиная с .NET Framework версии 2.0, возвращаемым значением является <xref:System.DateTime> которого <xref:System.DateTime.Kind%2A> возвращает <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.  
  
> [!NOTE]
>  Можно также использовать <xref:System.DateTimeOffset.Now%2A?displayProperty=nameWithType> свойство для получения текущей локальной даты и времени. Она позволяет местное время однозначно выразить как единственный момент времени, что в свою очередь делает значение времени переносимой на нескольких компьютерах.  
  
   
  
## Examples  
 В следующем примере используется <xref:System.DateTime.Now%2A> и <xref:System.DateTime.UtcNow%2A> свойства для получения текущей локальной даты и времени и текущее универсальное координируемой Дата и время (UTC). Затем использует соглашения о форматировании числа языков и региональных параметров для отображения строк, вместе со значениями их <xref:System.DateTime.Kind%2A> свойства.  
  
 [!code-cpp[System.DateTime.Now#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.datetime.now/cpp/now2.cpp#3)]
 [!code-csharp[System.DateTime.Now#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.now/cs/now2.cs#3)]
 [!code-vb[System.DateTime.Now#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.now/vb/now2.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.Now" />
        <altmember cref="P:System.DateTime.UtcNow" />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static DateTime operator + (DateTime d, TimeSpan t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTime op_Addition(valuetype System.DateTime d, valuetype System.TimeSpan t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Addition(System.DateTime,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (d As DateTime, t As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime operator +(DateTime d, TimeSpan t);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.DateTime" />
        <Parameter Name="t" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="d">Добавляемое значение даты и времени.</param>
        <param name="t">Добавляемый интервал времени.</param>
        <summary>Прибавляет указанный временной интервал к заданной дате и времени, возвращая новую дату и время.</summary>
        <returns>Объект, значение которого является суммой значений <paramref name="d" /> и <paramref name="t" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[Эквивалентный метод для этого оператора <xref:System.DateTime.Add%28System.TimeSpan%29?displayProperty=nameWithType>  
  
## Examples  
 Ниже приведен пример оператора сложения.  
  
 [!code-cpp[DateTime Operators#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime Operators/CPP/class1.cpp#1)]
 [!code-csharp[DateTime Operators#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime Operators/CS/class1.cs#1)]
 [!code-vb[DateTime Operators#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime Operators/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Итоговое значение <see cref="T:System.DateTime" /> меньше <see cref="F:System.DateTime.MinValue" /> или больше <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="M:System.DateTime.Add(System.TimeSpan)" />
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="P:System.DateTime.Ticks" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (DateTime d1, DateTime d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.DateTime d1, valuetype System.DateTime d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Equality(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (d1 As DateTime, d2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(DateTime d1, DateTime d2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.DateTime" />
        <Parameter Name="d2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="d1">Первый из сравниваемых объектов.</param>
        <param name="d2">Второй из сравниваемых объектов.</param>
        <summary>Определяет, равны ли два заданных экземпляра класса <see cref="T:System.DateTime" />.</summary>
        <returns>
          Значение <see langword="true" />, если параметры <paramref name="d1" /> и <paramref name="d2" /> представляют одинаковую дату и время; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.op_Equality%2A> Оператор определяет неравенство двух <xref:System.DateTime> значения равны, сравнивая их число тактов. Перед сравнением <xref:System.DateTime> объектов, убедитесь, что они представляют время в одном часовом поясе. Это можно сделать путем сравнения значений их свойства <xref:System.DateTime.Kind%2A>.  
  
 Эквивалентный метод для этого оператора <xref:System.DateTime.Equals%28System.Object%29?displayProperty=nameWithType>  
  
## Examples  
 Ниже приведен пример оператора равенства.  
  
 [!code-cpp[DateTime Operators#2](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime Operators/CPP/class1.cpp#2)]
 [!code-csharp[DateTime Operators#2](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime Operators/CS/class1.cs#2)]
 [!code-vb[DateTime Operators#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime Operators/VB/class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Equals(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_GreaterThan(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(DateTime t1, DateTime t2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">Первый из сравниваемых объектов.</param>
        <param name="t2">Второй из сравниваемых объектов.</param>
        <summary>Определяет, является ли значение одного заданного объекта <see cref="T:System.DateTime" /> более поздним относительно другого заданного объекта <see cref="T:System.DateTime" />.</summary>
        <returns>
          Значение <see langword="true" />, если значение <paramref name="t1" /> позже значения <paramref name="t2" />; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.op_GreaterThan%2A> Оператор определяет связь между двумя <xref:System.DateTime> значения, сравнивая их число тактов. Перед сравнением <xref:System.DateTime> объектов, убедитесь, что они представляют время в одном часовом поясе. Это можно сделать путем сравнения значений их свойства <xref:System.DateTime.Kind%2A>.  
  
 Эквивалентный метод для этого оператора <xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_GreaterThanOrEqual(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(DateTime t1, DateTime t2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">Первый из сравниваемых объектов.</param>
        <param name="t2">Второй из сравниваемых объектов.</param>
        <summary>Определяет, представляет ли заданный объект <see cref="T:System.DateTime" /> дату и время, которые совпадают со значением другого заданного объекта <see cref="T:System.DateTime" /> или являются более поздними относительно него.</summary>
        <returns>
          Значение <see langword="true" />, если <paramref name="t1" /> происходит одновременно или позже <paramref name="t2" />; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.op_GreaterThanOrEqual%2A> Оператор определяет связь между двумя <xref:System.DateTime> значения, сравнивая их число тактов. Перед сравнением <xref:System.DateTime> объектов, убедитесь, что они представляют время в одном часовом поясе. Это можно сделать путем сравнения значений их свойства <xref:System.DateTime.Kind%2A>.  
  
 Эквивалентный метод для этого оператора <xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (DateTime d1, DateTime d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.DateTime d1, valuetype System.DateTime d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Inequality(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (d1 As DateTime, d2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(DateTime d1, DateTime d2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.DateTime" />
        <Parameter Name="d2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="d1">Первый из сравниваемых объектов.</param>
        <param name="d2">Второй из сравниваемых объектов.</param>
        <summary>Определяет, являются ли два заданных экземпляра класса <see cref="T:System.DateTime" /> неравными.</summary>
        <returns>
          Значение <see langword="true" />, если параметры <paramref name="d1" /> и <paramref name="d2" /> не представляют одинаковую дату и время; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.op_Inequality%2A> Оператор определяет неравенство двух <xref:System.DateTime> значения не равны, сравнивая их число тактов. Перед сравнением <xref:System.DateTime> объектов, убедитесь, что они представляют время в одном часовом поясе. Это можно сделать путем сравнения значений их свойства <xref:System.DateTime.Kind%2A>.  
  
 Эквивалентный метод для этого оператора <xref:System.DateTime.Equals%28System.Object%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_LessThan(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(DateTime t1, DateTime t2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">Первый из сравниваемых объектов.</param>
        <param name="t2">Второй из сравниваемых объектов.</param>
        <summary>Определяет, является ли значение одного заданного объекта <see cref="T:System.DateTime" /> более ранним относительно другого заданного объекта <see cref="T:System.DateTime" />.</summary>
        <returns>
          Значение <see langword="true" />, если значение <paramref name="t1" /> раньше значения <paramref name="t2" />; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.op_LessThan%2A> Оператор определяет связь между двумя <xref:System.DateTime> значения, сравнивая их число тактов. Перед сравнением <xref:System.DateTime> объектов, убедитесь, что они представляют время в одном часовом поясе. Это можно сделать путем сравнения значений их свойства <xref:System.DateTime.Kind%2A>.  
  
 Эквивалентный метод для этого оператора <xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_LessThanOrEqual(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(DateTime t1, DateTime t2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">Первый из сравниваемых объектов.</param>
        <param name="t2">Второй из сравниваемых объектов.</param>
        <summary>Определяет, представляет ли заданный объект <see cref="T:System.DateTime" /> дату и время, которые совпадают со значением другого заданного объекта <see cref="T:System.DateTime" /> или являются более ранними относительно него.</summary>
        <returns>
          Значение <see langword="true" />, если <paramref name="t1" /> происходит одновременно с <paramref name="t2" /> или раньше; в противном случае значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.op_LessThanOrEqual%2A> Оператор определяет связь между двумя <xref:System.DateTime> значения, сравнивая их число тактов. Перед сравнением <xref:System.DateTime> объектов, убедитесь, что они представляют время в одном часовом поясе. Это можно сделать путем сравнения значений их свойства <xref:System.DateTime.Kind%2A>.  
  
 Эквивалентный метод для этого оператора <xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Subtraction">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Вычитает заданный объект <see cref="T:System.DateTime" /> или <see cref="T:System.TimeSpan" /> из заданного объекта <see cref="T:System.DateTime" />.</summary>
        <altmember cref="M:System.DateTime.Subtract(System.DateTime)" />
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static TimeSpan operator - (DateTime d1, DateTime d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Subtraction(valuetype System.DateTime d1, valuetype System.DateTime d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Subtraction(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (d1 As DateTime, d2 As DateTime) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan operator -(DateTime d1, DateTime d2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.DateTime" />
        <Parameter Name="d2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="d1">Значение даты и времени, из которого вычитается интервал (уменьшаемое).</param>
        <param name="d2">Значение даты и времени, которое вычитается (вычитаемое).</param>
        <summary>Вычитает указанную дату и время из другой указанной даты и времени и возвращает временной интервал.</summary>
        <returns>Временной интервал между значениями <paramref name="d1" /> и <paramref name="d2" />, то есть <paramref name="d1" /> минус <paramref name="d2" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.op_Subtraction%28System.DateTime%2CSystem.DateTime%29> Метод не учитывает значение <xref:System.DateTime.Kind%2A> свойства двух <xref:System.DateTime> значений при выполнении операции вычитания. До вычитания <xref:System.DateTime> объектов, убедитесь, что они представляют время в одном часовом поясе. В противном случае результат будет включать разницу между часовыми поясами.  
  
> [!NOTE]
>  <xref:System.DateTimeOffset.op_Subtraction%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType> Метод внимание на различия между часовых поясов, при выполнении операции вычитания.  
  
 Эквивалентный метод для этого оператора <xref:System.DateTime.Subtract%28System.DateTime%29?displayProperty=nameWithType>  
  
## Examples  
 В следующем примере демонстрируется <xref:System.DateTime.Subtract%2A> метода и оператор вычитания.  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Subtract(System.DateTime)" />
        <altmember cref="P:System.DateTime.Ticks" />
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static DateTime operator - (DateTime d, TimeSpan t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTime op_Subtraction(valuetype System.DateTime d, valuetype System.TimeSpan t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Subtraction(System.DateTime,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (d As DateTime, t As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime operator -(DateTime d, TimeSpan t);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.DateTime" />
        <Parameter Name="t" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="d">Значение даты и времени, из которого производится вычитание.</param>
        <param name="t">Вычитаемый интервал времени.</param>
        <summary>Вычитает заданный временной интервал из указанной даты и времени и возвращает новую дату и время.</summary>
        <returns>Объект, значение которого является разностью значений <paramref name="d" /> и <paramref name="t" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод вычитает значение импульсов `t` из значения тактов `d`.  
  
 Эквивалентный метод для этого оператора <xref:System.DateTime.Subtract%28System.DateTime%29?displayProperty=nameWithType>  
  
## Examples  
 В следующем примере демонстрируется <xref:System.DateTime.Subtract%2A> метода и оператор вычитания.  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Итоговое значение <see cref="T:System.DateTime" /> меньше <see cref="F:System.DateTime.MinValue" /> или больше <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="M:System.DateTime.Subtract(System.TimeSpan)" />
        <altmember cref="P:System.DateTime.Ticks" />
        <altmember cref="T:System.TimeSpan" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Преобразует строковое представление даты и времени в его эквивалент <see cref="T:System.DateTime" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Содержание  
  
 [Какой метод нужно вызывать?](#Tasks)   
 [Строка для анализа](#StringToParse)   
 [Синтаксический анализ и региональные стандарты](#Culture)   
 [Синтаксический анализ и стиля элементов](#Styles)   
 [Возвращаемое значение и DateTime.Kind](#kind)
 
<a name="Tasks"></a>   
### <a name="which-method-do-i-call"></a>Какой метод нужно вызывать?  
  
|Кому|Call|  
|--------|----------|  
|Синтаксический анализ строки даты и времени с использованием правил текущего языка и региональных параметров.|Перегрузка <xref:System.DateTime.Parse%28System.String%29>|  
|Синтаксический анализ строки даты и времени, используя правила конкретного языка и региональных параметров.|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> перегрузки (см. [синтаксический анализ, а также национальные стандарты](#Culture))|  
|Синтаксический анализ строки даты и времени с помощью специальных стилей элементов (например, пробел или пробелы).|Перегрузка <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|  
|Синтаксический анализ строки даты и времени, который должен быть в определенном формате.|<xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType> или <xref:System.DateTime.TryParseExact%2A?displayProperty=nameWithType>|
|Синтаксический анализ строки даты и времени и выполнить преобразование в формате UTC или местным временем.|Перегрузка <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|  
|Синтаксический анализ строки даты и времени без обработки исключений.|Метод <xref:System.DateTime.TryParse%2A?displayProperty=nameWithType>|  
|Восстановите значение даты и времени создания (приема-передачи), операции форматирования.|Строки стандартного формата «o» или «r», чтобы передать <xref:System.DateTime.ToString%28System.String%29> метода и вызовите метод <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> перегрузка с <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType>|  
|Синтаксический анализ строки даты и времени в фиксированном формате через границы между компьютерами (и возможно региональные).|<xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType> или <xref:System.DateTime.TryParseExact%2A?displayProperty=nameWithType> метод|  
  
<a name="StringToParse"></a>   
### <a name="the-string-to-parse"></a>Строка для анализа  
 <xref:System.DateTime.Parse%2A> Метод предпринимает попытку преобразования строкового представления значения даты и времени в его <xref:System.DateTime> эквивалент. Пытается преобразовать входную строку полностью, без выдачи <xref:System.FormatException> исключение.  
  
> [!IMPORTANT]
>  Если операция анализа завершается неудачей из-за неизвестный формат строки, <xref:System.DateTime.Parse%2A> вызывает исключение <xref:System.FormatException>, тогда как <xref:System.DateTime.TryParse%2A> возвращает `false`. Так как обработка исключений могут потреблять много ресурсов, следует использовать <xref:System.DateTime.Parse%2A> при операции анализа ожидается успешное выполнение, так как источник входных данных является доверенным. <xref:System.DateTime.TryParse%2A> После анализа ошибки, скорее всего, особенно в том случае, поскольку источник входных данных не является доверенным, или у вас есть значения разумное значение по умолчанию для строк, которые не выполнился является предпочтительным.   

 Анализируемая строка может принимать любую из следующих форм:  
  
-   Строка с датой и компонента времени.  
  
-   Строка с датой, но без компонента времени. Если отсутствует компонент времени, метод принимает 12:00 (полночь). Если компонент даты двух цифр года, он преобразуется в года, основываясь на <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> текущего календаря текущего языка и региональных параметров или текущего календаря для указанного языка и региональных параметров (Если вы используете перегрузки с ненулевой `provider` аргумент).  
  
- Строка с компонентом даты, который включает в себя только месяц и год, но ни один компонент дня. Метод предполагает первый день месяца.

- Строка с компонентом даты, который включает в себя только месяц и день, но без компонента года. Метод предполагает текущего года.

-   Строка со временем, но без компонента даты. Метод использует текущую дату только при вызове <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> перегружать и включить <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> в `styles` аргумент, в котором регистр метод предполагает дату 1 января 0001.  

- Строка с компонентом времени, который включает в себя только часов и обозначение AM/PM, с без компонента даты. Метод предполагает текущей даты и времени с не минуты и секунды, нет. Это поведение можно изменить путем вызова <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> перегружать и включить <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> в `styles` аргумент, в котором регистр метод предполагает дату 1 января 0001.

-   Строка, которая включает сведения о часовом поясе и соответствует стандарту ISO 8601. В следующих примерах, первая строка определяет по Гринвичу (UTC), а вторая — время в часовом поясе, составляет семь часов раньше UTC:  
  
    "2008-11-01T19:35:00.0000000Z"   
    "2008-11-01T19:35:00.0000000-07:00"  
  
-   Строка, которая включает обозначение GMT и соответствует формату времени RFC 1123; Например:  
  
     «Sat 01 ноября 2008 г. 19:35:00 по Гринвичу»  
  
-   Строка, которая содержит дату и время, а также сведения о смещении часового пояса; Например:  
  
     "03/01/2009 05:42:00 -5:00"  

Следующий пример выполняет синтаксический анализ строк в каждом из этих форматов, используя соглашения о форматировании текущего языка и региональных параметров, который в данном случае является региональных параметров en US:

[!code-csharp-interactive[Default parsing](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse6.cs)]
[!code-vb[Default parsing](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse6.vb)]  
  
 Если входная строка представляет день високосным на високосный год в календарь, используемый в качестве метода анализа (в разделе [синтаксического анализа и региональные стандарты](#Culture)), <xref:System.DateTime.Parse%2A> метода успешно выполняет синтаксический анализ строки. Если входная строка представляет день в не високосный год високосным, метод вызывает <xref:System.FormatException>.  
  
 Поскольку <xref:System.DateTime.Parse%2A> метод пытается обработать строковое представление даты и времени, используя правила форматирования текущей или заданной культуры, попытка анализа строки для разных языков и региональных параметров может завершиться ошибкой. Чтобы проанализировать определенную дату и время для разных языковых стандартов, используйте одну из перегрузок <xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType> метод и задать описатель формата.  
  
<a name="Culture"></a>   
### <a name="parsing-and-cultural-conventions"></a>Синтаксический анализ и региональные стандарты  
 Все перегрузки <xref:System.DateTime.Parse%2A> метод учитывают язык и региональные Если анализируемая строка (представленный `s` в следующей таблице) соответствует шаблону ISO 8601. Операция синтаксического анализа использует сведения о форматировании в <xref:System.Globalization.DateTimeFormatInfo> , являющийся производным следующим образом:  
  
|Если вызван|И `provider` —|Сведения о форматировании является производным от|  
|-----------------|-----------------------|--------------------------------------------|  
|<xref:System.DateTime.Parse%28System.String%29>|-|Текущая культура потока (<xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A?displayProperty=nameWithType> свойство)|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> или <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|Объект <xref:System.Globalization.DateTimeFormatInfo> объекта|Указанный <xref:System.Globalization.DateTimeFormatInfo> объекта|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> или <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|`null`|Текущая культура потока (<xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A?displayProperty=nameWithType> свойство)|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> или <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|Объект <xref:System.Globalization.CultureInfo> объекта|Свойство <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>.|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> или <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|Настраиваемый <xref:System.IFormatProvider> реализации|метод <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>;|  
  
 Если сведения о форматировании является производным от <xref:System.Globalization.DateTimeFormatInfo> объекта, <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType> свойство определяет календарь, используемый в операции анализа.  
  
 Если синтаксический анализ строки даты и времени с помощью <xref:System.Globalization.DateTimeFormatInfo> объект с пользовательские параметры, которые отличаются от стандартных языка и региональных параметров, используйте <xref:System.DateTime.ParseExact%2A> вместо метода <xref:System.DateTime.Parse%2A> способ повышения вероятности успешного преобразования. Строка стандартным даты и времени может быть сложным и сложной для анализа. <xref:System.DateTime.Parse%2A> Метод пытается выполнить синтаксический анализ строки с помощью нескольких неявных шаблонов анализа, каждый из которых может завершиться ошибкой. Напротив <xref:System.DateTime.ParseExact%2A> метода необходимо явно назначить один или несколько шаблонов анализа, которые, скорее всего, для успешного выполнения. Дополнительные сведения см. в разделе «DateTimeFormatInfo и динамические данные» в <xref:System.Globalization.DateTimeFormatInfo> разделе.  
  
> [!IMPORTANT]
>  Обратите внимание, что соглашения о форматировании для определенного языка и региональных параметров являются динамическими и могут быть изменены. Это означает, что операции анализа, зависящих от соглашения о форматировании (текущего) язык и региональные параметры по умолчанию или, для указания <xref:System.IFormatProvider> объекта, представляющего региональные параметры, отличающихся от инвариантных неожиданно может завершиться ошибкой, если возникает какое-либо из следующих действий:  
>   
> -   Данные, зависящие от языка и региональных параметров изменилась между основной и дополнительный номер версии платформы .NET Framework или в результате обновления существующей версии платформы .NET Framework.  
> -   Данные, зависящие от языка и региональных параметров отражает пользовательские настройки, которые можно изменять от компьютера или сеансами.  
> -   Данные, зависящие от языка и региональных параметров представляет замены языка и региональных параметров, которое переопределяет параметры стандартный язык и региональные параметры или пользовательского языка и региональных параметров.  
>   
>  Чтобы предотвратить проблемы при синтаксическом анализе строки даты и времени, которые связаны с изменениями в региональные данные, можно выполнить синтаксический анализ строки даты и времени с помощью инвариантного языка и региональных параметров, или можно вызвать <xref:System.DateTime.ParseExact%2A> или <xref:System.DateTime.TryParseExact%2A> метод и укажите точный формат строки для синтаксического анализа. При сериализации и десериализации данных даты и времени, вы можете использовать правила форматирования для инвариантного языка и региональных параметров или могут сериализовать и десериализовать <xref:System.DateTime> значение в двоичном формате.  
>   
>  Дополнительные сведения см. в разделе «динамический язык и региональные параметры данных» в <xref:System.Globalization.CultureInfo> разделе и «значения Persisting DateTime» раздела <xref:System.DateTime> раздела.  
  
<a name="Styles"></a>   
### <a name="parsing-and-style-elements"></a>Синтаксический анализ и стиля элементов  
 Все <xref:System.DateTime.Parse%2A> перегрузки игнорировать начальные, внутренние и конечные пробелы в строке ввода (представленный `s` в таблице ниже). Дата и время могут быть заключены между парой начальных и конечных символов («#», U + 0023) и может быть после которого идет с одним или более символов NULL (U + 0000).  
  
 Кроме того <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> перегрузка имеет `styles` параметр, который состоит из одного или нескольких членов <xref:System.Globalization.DateTimeStyles> перечисления. Этот параметр определяет, каким образом `s` должны интерпретироваться и как следует преобразовывать операции синтаксического анализа `s` даты и времени. В следующей таблице описаны эффект каждого <xref:System.Globalization.DateTimeStyles> член в операции синтаксического анализа.  
  
|Элемент параметра DateTimeStyles|Влияние на преобразование|  
|---------------------------|--------------------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Выполняет синтаксический анализ `s` и, если необходимо, преобразует его в формат UTC, следующим образом:<br /><br /> -Если `s` включает смещение часового пояса, или если `s` содержит не данные о часовом поясе, но `styles` включает <xref:System.Globalization.DateTimeStyles.AssumeLocal> флаг, метод выполняет синтаксический анализ строки, вызовы <xref:System.DateTime.ToUniversalTime%2A> для преобразования возвращаемого <xref:System.DateTime> значение UTC и наборы <xref:System.DateTime.Kind%2A> свойства <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.<br />-Если `s` указывает, что он представляет время в формате UTC или если `s` не содержит сведения о часовом поясе, но `styles` включает <xref:System.Globalization.DateTimeStyles.AssumeUniversal> флаг, метод выполняет синтаксический анализ строки, выполняет преобразование часового пояса в возвращенном <xref:System.DateTime> значение, а свойству <xref:System.DateTime.Kind%2A> свойства <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.<br />-Во всех остальных случаях флаг не оказывает влияния.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Это значение игнорируется. Внутренние пробелы всегда разрешается в элементах даты и времени `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Это значение игнорируется. Начальные пробелы всегда разрешается в элементах даты и времени `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Это значение игнорируется. Конечные пробелы всегда разрешается в элементах даты и времени `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Указывает, что `s` может содержать начальные, внутренние и конечные пробелы. Это поведение установлено по умолчанию. Его нельзя переопределить, указав более строгий <xref:System.Globalization.DateTimeStyles> значение перечисления, например <xref:System.Globalization.DateTimeStyles.None>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Указывает, что если `s` сведений о часовом поясе, местное время предполагается отсутствуют. Если не <xref:System.Globalization.DateTimeStyles.AdjustToUniversal> флаг представлен <xref:System.DateTime.Kind%2A> свойство возвращаемого <xref:System.DateTime> имеет значение <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Указывает, что если `s` отсутствует, подразумевается данные часового пояса UTC. Если не <xref:System.Globalization.DateTimeStyles.AdjustToUniversal> флаг отсутствует, этот метод преобразует возвращаемый <xref:System.DateTime> значение от времени UTC в местное время, а также задает его <xref:System.DateTime.Kind%2A> свойства <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.None>|Несмотря на допустимость, это значение игнорируется.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Для строк, содержащих сведения о часовом поясе, пытается предотвратить преобразование строки даты и времени для <xref:System.DateTime> значение, которое представляет местное время, с его <xref:System.DateTime.Kind%2A> свойство <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Как правило, такая строка создается путем вызова <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> метод и с помощью описателя стандартного формата «o», «r» или «u».|  

<a name="kind"></a>   
### <a name="the-return-value-and-datetimekind"></a>Возвращаемое значение и DateTime.Kind

`DateTime.Parse` Перегрузки возвращают <xref:System.DateTime> которого <xref:System.DateTime.Kind> свойства включают сведения о часовом поясе. Он может указать, что время:

- Всеобщего скоординированного времени (<xref:System.DateTimeKind.Utc?displayProperty=fullName>).
- Время в местном часовом поясе (<xref:System.DateTimeKind.Local?displayProperty=fullName>).
- Время в неизвестном часовом поясе (xref:System.DateTimeKind.Unspecified?displayProperty=fullName >).
 
 Как правило <xref:System.DateTime.Parse%2A> возвращает <xref:System.DateTime> которого <xref:System.DateTime.Kind%2A> свойство <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Тем не менее <xref:System.DateTime.Parse%2A> метод также может выполнить преобразование часового пояса и задать значение <xref:System.DateTime.Kind%2A> свойство по-разному, в зависимости от значения `s` и `styles` параметры:  
  
|If|Преобразование часового пояса|Свойство Kind|  
|--------|--------------------------|-------------------|  
|`s` содержит сведения о часовом поясе.|Дата и время преобразуется во время в местном часовом поясе.|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|  
|`s` содержит сведения о часовом поясе, а `styles` включает <xref:System.Globalization.DateTimeStyles.AdjustToUniversal> флаг.|Дата и время преобразуются в формате UTC.|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|`s` содержит обозначение часового пояса Z или GMT и `styles` включает <xref:System.Globalization.DateTimeStyles.RoundtripKind> флаг.|Дата и время, интерпретируются как время UTC.|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
  
 В следующем примере преобразование строки даты, которые содержат сведения о часовом поясе во время в местном часовом поясе:  
  
 [!code-csharp-interactive[System.DateTime.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse2.cs#2)]
 [!code-vb[System.DateTime.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse2.vb#2)]  

  Вы также можете сохранить значение даты и времени <xref:System.DateTime.Kind%2A> во время форматирования и синтаксического анализа с помощью <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> флаг. В следующем примере показано как <xref:System.Globalization.DateTimeStyles.RoundtripKind> флага влияет операция синтаксического анализа для <xref:System.DateTime> значения, которые преобразуются в строки с помощью описателя формата «o», «r» или «u».  
  
 [!code-csharp-interactive[System.DateTime.Parse#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse5.cs#5)]
 [!code-vb[System.DateTime.Parse#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse5.vb#5)]  
  
### Examples

Многочисленные примеры, которые вызывают `DateTime.Parse` метод смешиваются в [примечания](#remarks) разделе данной статьи и в документации для отдельных `DateTime.Parse` перегрузки.

[!INCLUDE[interactive-note](~/includes/csharp-interactive-note.md)]

Вы также можете скачать полный набор `DateTime.Parse` примеры, которые входят в состав [проект .NET Core 2.0 для C#](https://github.com/dotnet/docs/raw/master/samples/snippets/csharp/downloads/api/System/DateTime.Parse.zip) и [проект .NET Core 2.0 для Visual Basic](https://github.com/dotnet/docs/raw/master/samples/snippets/visualbasic/downloads/api/System/DateTime.Parse.zip), из [dotnet/docs Репозитории GitHub](https://github.com/dotnet/docs).

 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)" />
        <altmember cref="Overload:System.DateTime.TryParse" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime Parse(System::String ^ s);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">Строка, содержащая дату и время, которые нужно преобразовать. Дополнительные сведения см. в разделе [Строка для анализа](#StringToParse).</param>
        <summary>Преобразует строковое представление даты и времени в его эквивалент <see cref="T:System.DateTime" />, используя соглашения для языка и региональных параметров текущего потока.</summary>
        <returns>Объект, эквивалентный дате и времени, содержащимся в параметре <paramref name="s" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
Если `s` содержит сведения о часовом поясе, этот метод возвращает <xref:System.DateTime> которого <xref:System.DateTime.Kind%2A> свойство <xref:System.DateTimeKind.Local?displayProperty=nameWithType> и преобразует дату и время в `s` по местному времени. В противном случае преобразование часового пояса не выполняется и возвращает <xref:System.DateTime> которого <xref:System.DateTime.Kind%2A> свойство <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>.

Эта перегрузка пытается выполнить синтаксический анализ `s` с использованием соглашений о форматировании текущего языка и региональных параметров. Указывает текущий язык и региональные параметры <xref:System.Globalization.CultureInfo.CurrentCulture> свойство. Для анализа строки с использованием соглашений о форматировании для определенного языка и региональных параметров, вызовите <xref:System.DateTime.Parse(System.String,System.IFormatProvider)> или <xref:System.DateTime.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)> перегрузки.

Эта перегрузка пытается выполнить синтаксический анализ `s` с помощью <xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWithType> стиля.

## <a name="example"></a>Пример

В следующем примере анализируется строковое представление нескольких значений даты и времени с:

- Поставщик формата по умолчанию, которые предоставляют соглашения о форматировании текущего языка и региональных параметров потока компьютера, используемого для создания выходных данных примера. Выходные данные в этом примере отражает соглашения о форматировании языка и региональных параметров en US.

- Значение по умолчанию стиль, который является <xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWIthType>. 

Он обрабатывает <xref:System.FormatException> исключение, возникающее, когда метод пытается выполнить анализ строкового представления даты и времени с помощью некоторых других язык и региональные параметры соглашения о форматировании. Также показано, как успешно проанализировать значение даты и времени, которые не используют соглашения о форматировании языка и региональных параметров текущего потока.  
  
 [!code-csharp-interactive[System.DateTime.Parse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse1.cs#1)]
 [!code-vb[System.DateTime.Parse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse1.vb#1)]  

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="s" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          Параметр <paramref name="s" /> не содержит допустимое строковое представление даты и времени.</exception>
        <altmember cref="Overload:System.DateTime.TryParse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (string s, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(string s, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, provider As IFormatProvider) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime Parse(System::String ^ s, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">Строка, содержащая дату и время, которые нужно преобразовать. Дополнительные сведения см. в разделе [Строка для анализа](#StringToParse).</param>
        <param name="provider">Объект, предоставляющий сведения о формате параметра <c>s</c> для определенного языка и региональных параметров.  См. раздел [Анализ и соглашения для языка и региональных параметров](#Culture)</param>
        <summary>Преобразует строковое представление даты и времени в его эквивалент <see cref="T:System.DateTime" />, используя сведения о форматировании, связанные с языком и региональными параметрами.</summary>
        <returns>Объект, эквивалентный дате и времени, которые содержатся в параметре <paramref name="s" />, определяемом параметром <paramref name="provider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
Если `s` содержит сведения о часовом поясе, этот метод возвращает <xref:System.DateTime> которого <xref:System.DateTime.Kind%2A> свойство <xref:System.DateTimeKind.Local?displayProperty=nameWithType> и преобразует дату и время в `s` по местному времени. В противном случае преобразование часового пояса не выполняется и возвращает <xref:System.DateTime> которого <xref:System.DateTime.Kind%2A> свойство <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>.

Эта перегрузка пытается выполнить синтаксический анализ `s` с помощью <xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWithType> стиля.

## <a name="example"></a>Пример

В следующем примере анализируется массив строк даты с использованием соглашений о en US, fr-FR и de-DE языков и региональных параметров. Он показывает, можно по-разному интерпретировать строковые представления одной даты для разных языков и региональных параметров.  
  
[!code-csharp-interactive[System.DateTime.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse3.cs#3)]
[!code-vb[System.DateTime.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="s" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          Параметр <paramref name="s" /> не содержит допустимое строковое представление даты и времени.</exception>
        <altmember cref="Overload:System.DateTime.TryParse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (ReadOnlySpan&lt;char&gt; s, IFormatProvider provider = null, System.Globalization.DateTimeStyles styles = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As ReadOnlySpan(Of Char), Optional provider As IFormatProvider = null, Optional styles As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="styles">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (string s, IFormatProvider provider, System.Globalization.DateTimeStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(string s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, provider As IFormatProvider, styles As DateTimeStyles) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime Parse(System::String ^ s, IFormatProvider ^ provider, System::Globalization::DateTimeStyles styles);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">Строка, содержащая дату и время, которые нужно преобразовать. Дополнительные сведения см. в разделе [Строка для анализа](#StringToParse).</param>
        <param name="provider">Объект, который предоставляет сведения о форматировании параметра <c>s</c> в зависимости от языка и региональных параметров.  См. раздел [Анализ и соглашения для языка и региональных параметров](#Culture)</param>
        <param name="styles">Побитовая комбинация значений перечисления, определяющая элементы стиля, которые могут присутствовать в параметре <c>s</c> для того, чтобы операция анализа прошла успешно. Эта комбинация определяет способ интерпретации анализируемых данных с учетом текущего часового пояса или текущей даты. Обычно указывается значение <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <summary>Преобразует строковое представление даты и времени в его эквивалент <see cref="T:System.DateTime" />, используя сведения о форматировании, связанные с языком и региональными параметрами, а также стиль форматирования.</summary>
        <returns>Объект, эквивалентный дате и времени, которые содержатся в параметре <paramref name="s" />, определяемом параметрами <paramref name="provider" /> и <paramref name="styles" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

Эта перегрузка метода преобразует дату и время в `s` и задает <xref:System.DateTime.Kind%2A> свойство возвращаемого <xref:System.DateTime> значение следующим образом:

|If |Преобразование часового пояса|Свойство Kind|   
|-----|-----|-----|  
|`s` содержит не данные о часовом поясе.|Отсутствует.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|
|`s` содержит сведения о часовом поясе.|Во время в местном часовом поясе|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|
|`s` содержит сведения о часовом поясе, а "включает стили <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> флаг.|Чтобы координация универсальной времени (UTC)|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|
|`s` содержит обозначение часового пояса Z или GMT и `styles` включает <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType>.|Отсутствует.|<xref:System.DateTimeKind.Utc>| 

## <a name="example"></a>Пример

В следующем примере демонстрируется <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> метод и отображает значение <xref:System.DateTime.Kind%2A> результирующего <xref:System.DateTime> значения.  
  
[!code-csharp-interactive[System.DateTime.Parse#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse4.cs#4)]
[!code-vb[System.DateTime.Parse#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="s" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          Параметр <paramref name="s" /> не содержит допустимое строковое представление даты и времени.</exception>
        <exception cref="T:System.ArgumentException">
          Параметр <paramref name="styles" /> содержит недопустимое сочетание значений <see cref="T:System.Globalization.DateTimeStyles" />. Например, и <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" />, и <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />.</exception>
        <altmember cref="Overload:System.DateTime.TryParse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Преобразует заданное строковое представление даты и времени в его эквивалент <see cref="T:System.DateTime" />. Формат строкового представления должен полностью соответствовать заданному формату. В противном случае возникает исключение.</summary>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
      </Docs>
    </MemberGroup>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (string s, string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(string s, string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As String, format As String, provider As IFormatProvider) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ParseExact(System::String ^ s, System::String ^ format, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">Строка, содержащая дату и время, которые нужно преобразовать.</param>
        <param name="format">Описатель формата, задающий требуемый формат <c>s</c>. Дополнительные сведения см. в разделе "Примечания".</param>
        <param name="provider">Объект, предоставляющий сведения о формате параметра <c>s</c> для определенного языка и региональных параметров.</param>
        <summary>Преобразует заданное строковое представление даты и времени в его эквивалент <see cref="T:System.DateTime" />, используя указанные сведения о форматировании, связанные с языком и региональными параметрами. Формат строкового представления должен полностью соответствовать заданному формату.</summary>
        <returns>Объект, эквивалентный дате и времени, которые содержатся в параметре <paramref name="s" />, определяемом параметрами <paramref name="format" /> и <paramref name="provider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> Метод анализирует строковое представление даты, которое должно быть в формате, заданном параметром `format` параметр. Также требует, \<Дата > и \<время > элементы строкового представления даты и времени отображаются в порядке, указанном `format`и что `s` не пробелами, отличный от того, допускаемой `format`. Если `format` определяет дату без элемента времени и синтаксический анализ операция завершилась успешно, итоговый <xref:System.DateTime> значение имеет время, соответствующее полуночи (00: 00:00). Если `format` определяет время, ни один элемент даты и синтаксический анализ операция завершается успешно, итоговый <xref:System.DateTime> значение имеет дату `DateTime.Now.Date`.  
  
 Если `s` не представляет время в заданном часовом поясе и операция анализа прошла успешно, <xref:System.DateTime.Kind%2A> свойство возвращаемого <xref:System.DateTime> значение <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Если `s` представляет время в заданном часовом поясе и `format` позволяет присутствовать данные часового пояса (например, если `format` равен «o», «r» или описатели стандартного формата «u», или если он содержит «z», «zz» или «zzz» настраиваемых описателей формата), <xref:System.DateTime.Kind%2A> свойство возвращаемого <xref:System.DateTime> значение <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.  
  
 `format` Параметр является строкой, содержащей либо один стандартный, одного или нескольких настраиваемых описателей формата, определяющих требуемый формат параметра `s`. Дополнительные сведения о допустимых кодах форматирования см. в разделе [стандартной строки даты и времени формат](~/docs/standard/base-types/standard-date-and-time-format-strings.md) или [пользовательских строк даты и времени формат](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  
  
> [!NOTE]
>  Если `format` — это шаблон пользовательского формата, который не включать разделители даты или времени (например, «Ггггммддччмм»), использующие инвариантный язык для `provider` параметр и широкую форму каждый настраиваемый описатель формата. Например если вы хотите указать часы в шаблоне, укажите широкую форму, «HH» вместо более узкой формы «H».  
  
 Определенная дата и время символы и строки (например, названия дней недели на определенном языке), используемые в `s` определяются `provider` параметра, как точный формат из `s` Если `format` — это стандартный формат Описатель строка. `provider` Параметр может быть любым из следующих действий:  
  
-   Объект <xref:System.Globalization.CultureInfo> , представляющий язык и региональные параметры, используемые для интерпретации `s`. <xref:System.Globalization.DateTimeFormatInfo> Объект, возвращаемый его <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> свойство определяет символы и форматирование в `s`.  
  
-   Объект <xref:System.Globalization.DateTimeFormatInfo> объект, который определяет формат данных даты и времени.  
  
-   Настраиваемый <xref:System.IFormatProvider> реализация которого <xref:System.IFormatProvider.GetFormat%2A> метод возвращает либо <xref:System.Globalization.CultureInfo> объекта или <xref:System.Globalization.DateTimeFormatInfo> объект, предоставляющий сведения о форматировании.  
  
 Если `provider` — `null`, <xref:System.Globalization.CultureInfo> используется объект, соответствующий текущего языка и региональных параметров.  
  
   
  
## Examples  
 В следующем примере демонстрируется <xref:System.DateTime.ParseExact%2A> метод.  
  
 [!code-csharp[System.DateTime.ParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ParseExact/cs/ParseExact1.cs#1)]
 [!code-vb[System.DateTime.ParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ParseExact/vb/ParseExact1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Параметр <paramref name="s" /> или <paramref name="format" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> или <paramref name="format" /> является пустой строкой.  
  
 - или -  
  
 Строка <paramref name="s" /> не содержит дату и время, соответствующие формату, заданному в параметре <paramref name="format" />.  
  
 - или -  
  
 Компонент часов и обозначение AM/PM в <paramref name="s" /> не совпадают.</exception>
        <block subset="none" type="usage">
          <para>В [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], <see cref="Overload:System.DateTime.ParseExact" /> вызывает исключение <see cref="T:System.FormatException" /> Если анализируемая строка содержит компонент часов и обозначение AM/PM, которых нет в соглашении. В [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] и более ранних версиях обозначение AM/PM игнорируется.</para>
        </block>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (ReadOnlySpan&lt;char&gt; s, ReadOnlySpan&lt;char&gt; format, IFormatProvider provider, System.Globalization.DateTimeStyles style = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), provider As IFormatProvider, Optional style As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="format">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="style">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (ReadOnlySpan&lt;char&gt; s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As ReadOnlySpan(Of Char), formats As String(), provider As IFormatProvider, Optional style As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="formats">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="style">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (string s, string format, IFormatProvider provider, System.Globalization.DateTimeStyles style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(string s, string format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As String, format As String, provider As IFormatProvider, style As DateTimeStyles) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ParseExact(System::String ^ s, System::String ^ format, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">Строка, содержащая дату и время, которые нужно преобразовать.</param>
        <param name="format">Описатель формата, задающий требуемый формат <c>s</c>. Дополнительные сведения см. в разделе "Примечания".</param>
        <param name="provider">Объект, который предоставляет сведения о форматировании параметра <c>s</c> в зависимости от языка и региональных параметров.</param>
        <param name="style">Побитовая комбинация значений перечисления, которая предоставляет дополнительную информацию о параметре <c>s</c>, об элементах стиля, которые могут присутствовать в параметре <c>s</c>, или о преобразовании из параметра <c>s</c> в значение <see cref="T:System.DateTime" />. Обычно указывается значение <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <summary>Преобразует заданное строковое представление даты и времени в его эквивалент <see cref="T:System.DateTime" />, используя заданный формат, указанные сведения о форматировании, связанные с языком и региональными параметрами, а также стиль. Формат строкового представления должен полностью соответствовать заданному формату. В противном случае возникает исключение.</summary>
        <returns>Объект, эквивалентный дате и времени, которые содержатся в параметре <paramref name="s" />, определяемом параметрами <paramref name="format" />, <paramref name="provider" /> и <paramref name="style" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> Метод анализирует строковое представление даты, которое должно быть в формате, заданном параметром `format` параметр. Он также требует, элементы даты и времени в `s` отображаются в порядке, заданном свойством `format`. Если `s` не соответствует шаблону `format` параметр с любыми изменениями, определяется `style` параметр, метод создает <xref:System.FormatException>. Напротив <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> метод анализирует строковое представление даты в любом из форматов, распознаваемые поставщика формата <xref:System.Globalization.DateTimeFormatInfo> объекта. <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> Метод также позволяет элементы даты и времени в `s` могут появляться в любом порядке.  
  
 Если `s` параметр содержит только время и дата не текущая дата используется, если не `style` включает параметр <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> флаг, в этом случае по умолчанию (`DateTime.Date.MinValue`) используется. Если `s` параметр содержит только дату и нет времени, полночь (00: 00:00) используется. `style` Параметр также определяет, является ли `s` параметр может содержать начальные, внутренние и конечные пробелы.  
  
 Если `s` содержит без сведений о часовом поясе, <xref:System.DateTime.Kind%2A> свойство возвращаемого <xref:System.DateTime> объект <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Это поведение можно изменить с помощью <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> флаг, который возвращает <xref:System.DateTime> которого <xref:System.DateTime.Kind%2A> свойство <xref:System.DateTimeKind.Local?displayProperty=nameWithType>, или с помощью <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> и <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> флаги, который возвращает <xref:System.DateTime> которого <xref:System.DateTime.Kind%2A> свойство <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Если `s` содержит сведения о часовом поясе, время преобразуется в местное время, при необходимости и <xref:System.DateTime.Kind%2A> свойство возвращаемого <xref:System.DateTime> , присваивается значение <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Это поведение можно изменить с помощью <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> флаг не преобразуются в местное время по Гринвичу (UTC) и задать <xref:System.DateTime.Kind%2A> свойства <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
 `format` Необходимый шаблон определяет параметр `s` параметр. Может состоять из одного или нескольких настраиваемых описателей формата из [пользовательские строки даты и времени формат](~/docs/standard/base-types/custom-date-and-time-format-strings.md) таблицы или один стандартный описатель формата, который определяет предопределенному шаблону из [стандартный формат даты и Строки формата времени](~/docs/standard/base-types/standard-date-and-time-format-strings.md) таблицы.  
  
 Если не использовать разделители даты или времени в шаблона пользовательского формата, использующие инвариантный язык для `provider` параметр и широкую форму каждый настраиваемый описатель формата. Например если вы хотите задать в шаблоне часы, укажите широкую форму, «HH» вместо более узкой формы «H».  
  
> [!NOTE]
>  Не требует от, `s` соответствует единый формат для успешного выполнения операции синтаксического анализа, вы можете вызвать <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> метод и указать несколько разрешенных форматов. Это делает скорее всего, для успешного выполнения операции синтаксического анализа.  
  
 `styles` Параметр включает один или несколько членов <xref:System.Globalization.DateTimeStyles> перечисления, которые определяют, каким образом и где пробелы не определены в `format` могут присутствовать в `s` и управляют точным поведением операции синтаксического анализа. В следующей таблице описаны как каждый член <xref:System.Globalization.DateTimeStyles> перечисление влияет на работу <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> метод.  
  
|Элемент параметра DateTimeStyles|Описание:|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Выполняет синтаксический анализ `s` и, если необходимо, преобразует его в формат UTC. Если `s` включает смещение часового пояса, или если `s` содержит не данные о часовом поясе, но `styles` включает <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> флаг, метод выполняет синтаксический анализ строки, вызовы <xref:System.DateTime.ToUniversalTime%2A> для преобразования возвращаемого <xref:System.DateTime> значение в формате UTC и задает <xref:System.DateTime.Kind%2A> свойства <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Если `s` указывает, что он представляет время в формате UTC или если `s` не содержит сведения о часовом поясе, но `styles` включает <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> флаг, метод выполняет синтаксический анализ строки, выполняет преобразование часового пояса в возвращенном <xref:System.DateTime> значение, а свойству <xref:System.DateTime.Kind%2A> свойства <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Во всех остальных случаях флаг не оказывает влияния.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Указывает, что пробелы не определены в `format` могут появляться между любой отдельными элементами даты или времени.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Указывает, что пробелы не определены в `format` может находиться в начале `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Указывает, что пробелы не определены в `format` может находиться в конце `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Указывает, что `s` может содержать начальные, внутренние и конечные пробелы, не заданные `format`.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Указывает, что если `s` отсутствуют данные о часовом поясе, предполагается представляет местное время. Если не <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> флаг представлен <xref:System.DateTime.Kind%2A> свойство возвращаемого <xref:System.DateTime> имеет значение <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Указывает, что если `s` отсутствуют данные о часовом поясе, предполагается для представления в формате UTC. Если не <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> флаг отсутствует, этот метод преобразует возвращаемый <xref:System.DateTime> значение от времени UTC в местное время, а также задает его <xref:System.DateTime.Kind%2A> свойства <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|Если `s` содержит время без сведений о даты, дата возвращаемого значения устанавливается `DateTime.MinValue.Date`.|  
|<xref:System.Globalization.DateTimeStyles.None>|`s` Анализируется с помощью значений по умолчанию. Не пробелы, кроме тех, которые указаны в `format` разрешено. Если `s` отсутствует компонент даты, дата возвращаемого <xref:System.DateTime> имеет значение 1/1/0001. Если `s` содержит без сведений о часовом поясе, <xref:System.DateTime.Kind%2A> свойство возвращаемого <xref:System.DateTime> , присваивается значение <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. При наличии сведений о часовом поясе в `s`, время преобразуется в местное время и <xref:System.DateTime.Kind%2A> свойство возвращаемого <xref:System.DateTime> , присваивается значение <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Для строк, содержащих сведения о часовом поясе, пытается предотвратить преобразование в <xref:System.DateTime> значение даты и времени с его <xref:System.DateTime.Kind%2A> свойство <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. В основном этот флаг запрещает преобразование время в формате UTC в местное время.|  
  
 Определенная дата и время символы и строки (например, названия дней недели на определенном языке), используемые в `s` определяются `provider` параметра, как точный формат из `s` Если `format` — это стандартный формат Описатель строка. `provider` Параметр может быть любым из следующих действий:  
  
-   Объект <xref:System.Globalization.CultureInfo> , представляющий язык и региональные параметры, используемые для интерпретации `s`. <xref:System.Globalization.DateTimeFormatInfo> Объект, возвращаемый его <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> свойство определяет символы и форматирование в `s`.  
  
-   Объект <xref:System.Globalization.DateTimeFormatInfo> объект, который определяет формат данных даты и времени.  
  
-   Настраиваемый <xref:System.IFormatProvider> реализация которого <xref:System.IFormatProvider.GetFormat%2A> метод возвращает либо <xref:System.Globalization.CultureInfo> объекта или <xref:System.Globalization.DateTimeFormatInfo> объект, предоставляющий сведения о форматировании.  
  
 Если `provider` — `null`, <xref:System.Globalization.CultureInfo> используется объект, соответствующий текущего языка и региональных параметров.  
  
   
  
## Examples  
 В следующем примере демонстрируется <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29> метод. Обратите внимание, что строка "5/01/2009 8:30:00» не может быть успешно обработан при `styles` параметр равен <xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType> поскольку начальные пробелы не допускаются `format`. Кроме того, строка «5/01/2009 09:00» не может быть проанализирован с `format` из «мм/дд/yyyyhh:mm», так как строка даты не предшествует номер месяца с нулем в начале, как `format` требует.  
  
 [!code-csharp[System.DateTime.ParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ParseExact/cs/parseexact2.cs#2)]
 [!code-vb[System.DateTime.ParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ParseExact/vb/parseexact2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Параметр <paramref name="s" /> или <paramref name="format" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> или <paramref name="format" /> является пустой строкой.  
  
 - или -  
  
 Строка <paramref name="s" /> не содержит дату и время, соответствующие формату, заданному в параметре <paramref name="format" />.  
  
 - или -  
  
 Компонент часов и обозначение AM/PM в <paramref name="s" /> не совпадают.</exception>
        <exception cref="T:System.ArgumentException">
          Параметр <paramref name="style" /> содержит недопустимое сочетание значений <see cref="T:System.Globalization.DateTimeStyles" />. Например, и <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" />, и <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />.</exception>
        <block subset="none" type="usage">
          <para>В [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], <see cref="Overload:System.DateTime.ParseExact" /> вызывает исключение <see cref="T:System.FormatException" /> Если анализируемая строка содержит компонент часов и обозначение AM/PM, которых нет в соглашении. В [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] и более ранних версиях обозначение AM/PM игнорируется.</para>
        </block>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (string s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(string s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As String, formats As String(), provider As IFormatProvider, style As DateTimeStyles) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ParseExact(System::String ^ s, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">Строка, содержащая дату и время, которые нужно преобразовать.</param>
        <param name="formats">Массив разрешенных форматов <c>s</c>. Дополнительные сведения см. в разделе "Примечания".</param>
        <param name="provider">Объект, предоставляющий сведения о формате параметра <c>s</c> для определенного языка и региональных параметров.</param>
        <param name="style">Побитовая комбинация значений перечисления, которая определяет разрешенный формат параметра <c>s</c>. Обычно указывается значение <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <summary>Преобразует заданное строковое представление даты и времени в его эквивалент <see cref="T:System.DateTime" />, используя заданный массив форматов, указанные сведения о форматировании, связанные с языком и региональными параметрами, и стиль форматирования. Формат строкового представления должен полностью соответствовать по крайней мере одному из заданных форматов. В противном случае возникает исключение.</summary>
        <returns>Объект, эквивалентный дате и времени, которые содержатся в параметре <paramref name="s" />, определяемом параметрами <paramref name="formats" />, <paramref name="provider" /> и <paramref name="style" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> Метод анализирует строковое представление даты, не соответствует ни одному из шаблонов, назначенных `formats` параметра. Если строка `s` не соответствует ни одному из этих шаблонов с любыми вариациями определяется `styles` параметр, метод создает <xref:System.FormatException>. Помимо сравнение `s` для нескольких шаблонов форматирования, а не одному шаблону форматирования, эта перегрузка работает идентично <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> метод.  
  
 `s` Параметр содержит дату и время для синтаксического анализа. Если `s` параметр содержит только время и дата не текущая дата используется, если не `style` включает параметр <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> флаг, в этом случае по умолчанию (`DateTime.Date.MinValue`) используется. Если `s` параметр содержит только дату и нет времени, полночь (00: 00:00) используется. `style` Параметр также определяет, является ли `s` параметр может содержать начальные, конечные или внутренние пробелы символы, отличные от тех, которые допускаются одной из строк формата в `formats`.  
  
 Если `s` содержит без сведений о часовом поясе, <xref:System.DateTime.Kind%2A> свойство возвращаемого <xref:System.DateTime> объект <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Это поведение можно изменить с помощью <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> флаг, который возвращает <xref:System.DateTime> которого <xref:System.DateTime.Kind%2A> свойство <xref:System.DateTimeKind.Local?displayProperty=nameWithType>, или с помощью <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> и <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> флаги, который возвращает <xref:System.DateTime> которого <xref:System.DateTime.Kind%2A> свойство <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Если `s` содержит сведения о часовом поясе, время преобразуется в местное время, при необходимости и <xref:System.DateTime.Kind%2A> свойство возвращаемого <xref:System.DateTime> , присваивается значение <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Это поведение можно изменить с помощью <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> не преобразования в местное время по Гринвичу (UTC) и установите флаг <xref:System.DateTime.Kind%2A> свойства <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
 `formats` Параметр содержит массив шаблонов, один из которых `s` должен точно соответствовать — операция синтаксического анализа для успешного выполнения. Закономерности в `formats` параметр состоит из одного или нескольких настраиваемых описателей формата из [пользовательские строки даты и времени формат](~/docs/standard/base-types/custom-date-and-time-format-strings.md) таблицы или один стандартный описатель формата, который определяет предопределенному шаблону из [Стандартной строки даты и времени формат](~/docs/standard/base-types/standard-date-and-time-format-strings.md) таблицы.  
  
 Если не использовать разделители даты или времени в шаблона пользовательского формата, использующие инвариантный язык для `provider` параметр и широкую форму каждый настраиваемый описатель формата. Например если вы хотите задать в шаблоне часы, укажите широкую форму, «HH» вместо более узкой формы «H».  
  
 `styles` Параметр включает один или несколько членов <xref:System.Globalization.DateTimeStyles> перечисления, которые определяют, каким образом и где пробелы не определены в `format` могут присутствовать в `s` и управляют точным поведением операции синтаксического анализа. В следующей таблице описаны как каждый член <xref:System.Globalization.DateTimeStyles> перечисление влияет на работу <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> метод.  
  
|Элемент параметра DateTimeStyles|Описание:|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Выполняет синтаксический анализ `s` и, если необходимо, преобразует его в формат UTC. Если `s` включает смещение часового пояса, или если `s` содержит не данные о часовом поясе, но `styles` включает <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> флаг, метод выполняет синтаксический анализ строки, вызовы <xref:System.DateTime.ToUniversalTime%2A> для преобразования возвращаемого <xref:System.DateTime> значение в формате UTC и задает <xref:System.DateTime.Kind%2A> свойства <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Если `s` указывает, что он представляет время в формате UTC или если `s` не содержит сведения о часовом поясе, но `styles` включает <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> флаг, метод выполняет синтаксический анализ строки, выполняет преобразование часового пояса в возвращенном <xref:System.DateTime> значение, а свойству <xref:System.DateTime.Kind%2A> свойства <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Во всех остальных случаях флаг не оказывает влияния.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Указывает, что пробелы не определены в `format` могут появляться между любой отдельными элементами даты или времени.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Указывает, что пробелы не определены в `format` может находиться в начале `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Указывает, что пробелы не определены в `format` может находиться в конце `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Указывает, что `s` может содержать начальные, внутренние и конечные пробелы, не заданные `format`.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Указывает, что если `s` отсутствуют данные о часовом поясе, предполагается представляет местное время. Если не <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> флаг представлен <xref:System.DateTime.Kind%2A> свойство возвращаемого <xref:System.DateTime> имеет значение <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Указывает, что если `s` отсутствуют данные о часовом поясе, предполагается для представления в формате UTC. Если не <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> флаг отсутствует, этот метод преобразует возвращаемый <xref:System.DateTime> значение от времени UTC в местное время, а также задает его <xref:System.DateTime.Kind%2A> свойства <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|Если `s` содержит время без сведений о даты, дата возвращаемого значения устанавливается `DateTime.MinValue.Date`.|  
|<xref:System.Globalization.DateTimeStyles.None>|`s` Анализируется с помощью значений по умолчанию. Не пробелы, кроме тех, которые указаны в `format` разрешено. Если `s` отсутствует компонент даты, дата возвращаемого <xref:System.DateTime> имеет значение 1/1/0001. Если `s` содержит без сведений о часовом поясе, <xref:System.DateTime.Kind%2A> свойство возвращаемого <xref:System.DateTime> , присваивается значение <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. При наличии сведений о часовом поясе в `s`, время преобразуется в местное время и <xref:System.DateTime.Kind%2A> свойство возвращаемого <xref:System.DateTime> , присваивается значение <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Для строк, содержащих сведения о часовом поясе, пытается избежать преобразования даты и времени с его <xref:System.DateTime.Kind%2A> свойство <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. В основном этот флаг запрещает преобразование время в формате UTC в местное время.|  
  
 Определенная дата и время символы и строки (например, названия дней недели на определенном языке), используемые в `s` определяются `provider` параметра, как точный формат из `s` Если `format` — это стандартный формат Описатель строка. `provider` Параметр может быть любым из следующих действий:  
  
-   Объект <xref:System.Globalization.CultureInfo> , представляющий язык и региональные параметры, используемые для интерпретации `s`. <xref:System.Globalization.DateTimeFormatInfo> Объект, возвращаемый его <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> свойство определяет символы и форматирование в `s`.  
  
-   Объект <xref:System.Globalization.DateTimeFormatInfo> объект, который определяет формат данных даты и времени.  
  
-   Настраиваемый <xref:System.IFormatProvider> реализация которого <xref:System.IFormatProvider.GetFormat%2A> метод возвращает либо <xref:System.Globalization.CultureInfo> объекта или <xref:System.Globalization.DateTimeFormatInfo> объект, предоставляющий сведения о форматировании.  
  
 Если `provider` — `null`, <xref:System.Globalization.CultureInfo> используется объект, соответствующий текущего языка и региональных параметров.  
  
   
  
## Examples  
 В следующем примере используется <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> метод, чтобы гарантировать удается успешно обработать строку в число Возможные форматы.  
  
 [!code-csharp[System.Datetime.ParseExact#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ParseExact/cs/parseexact3.cs#3)]
 [!code-vb[System.Datetime.ParseExact#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ParseExact/vb/parseexact3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Параметр <paramref name="s" /> или <paramref name="formats" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          Параметр <paramref name="s" /> равен пустой строке.  
  
 - или -  
  
 Элемент параметра <paramref name="formats" /> является пустой строкой.  
  
 - или -  
  
 Строка <paramref name="s" /> не содержит дату и время, соответствующие какому-либо элементу параметра <paramref name="formats" />.  
  
 - или -  
  
 Компонент часов и обозначение AM/PM в <paramref name="s" /> не совпадают.</exception>
        <exception cref="T:System.ArgumentException">
          Параметр <paramref name="style" /> содержит недопустимое сочетание значений <see cref="T:System.Globalization.DateTimeStyles" />. Например, и <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" />, и <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />.</exception>
        <block subset="none" type="usage">
          <para>В [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], <see cref="Overload:System.DateTime.ParseExact" /> вызывает исключение <see cref="T:System.FormatException" /> Если анализируемая строка содержит компонент часов и обозначение AM/PM, которых нет в соглашении. В [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] и более ранних версиях обозначение AM/PM игнорируется.</para>
        </block>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="Second">
      <MemberSignature Language="C#" Value="public int Second { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Second" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Second" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Second As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Second { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает компонент секунды даты, представленной этим экземпляром.</summary>
        <value>Компонент, представляющий секунды, выраженный как значение от 0 до 59.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере демонстрируется <xref:System.DateTime.Second%2A> свойство.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpecifyKind">
      <MemberSignature Language="C#" Value="public static DateTime SpecifyKind (DateTime value, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime SpecifyKind(valuetype System.DateTime value, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.SpecifyKind(System.DateTime,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SpecifyKind (value As DateTime, kind As DateTimeKind) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime SpecifyKind(DateTime value, DateTimeKind kind);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
        <Parameter Name="kind" Type="System.DateTimeKind" />
      </Parameters>
      <Docs>
        <param name="value">Дата и время.</param>
        <param name="kind">Одно из значений перечисления, указывающее, что представляет новый объект: локальное время, универсальное глобальное время (UTC), или ни то, ни другое.</param>
        <summary>Создает объект <see cref="T:System.DateTime" />, имеющий то же количество тактов, что и заданный объект <see cref="T:System.DateTime" />, но предназначенный для использования с местным временем, со стандартом UTC, либо ни с тем, ни с другим, как определено значением <see cref="T:System.DateTimeKind" />.</summary>
        <returns>Новый объект, имеющий то же количество тактов, что и объект, представленный параметром <paramref name="value" />, и значение <see cref="T:System.DateTimeKind" />, заданное параметром <paramref name="kind" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Объект <xref:System.DateTime> объект состоит из поля Kind, указывает ли значение времени зависит от местного времени по Гринвичу (UTC) и ни одно, а тактов поле, содержащее значение времени измеряется в 100-наносекундных тактов. <xref:System.DateTime.SpecifyKind%2A> Метод создает новый <xref:System.DateTime> с помощью указанной `kind` параметра и исходное значения времени.  
  
> [!IMPORTANT]
>  Возвращенный <xref:System.DateTime> значение не представляют одинаковую меру мгновенных времени в качестве `value` параметра, и <xref:System.DateTime.SpecifyKind%2A> не является методом преобразования часового пояса. Вместо этого он оставляет времени, заданного параметром `value` параметр без изменений и наборы <xref:System.DateTime.Kind%2A> свойства `kind`. Сведения о преобразованиях часового пояса см. в разделе [преобразование раз между часовых поясов](~/docs/standard/datetime/converting-between-time-zones.md).  
  
 <xref:System.DateTime.SpecifyKind%2A> Метод полезен в сценариях взаимодействия, где происходит получение <xref:System.DateTime> объекта с неизвестной поля Kind, но можно определить, независимые означает, что поле тактов представляет местное или UTC.  
  
   
  
## Examples  
 В следующем примере используется <xref:System.DateTime.SpecifyKind%2A> метод, чтобы продемонстрировать, как <xref:System.DateTime.Kind%2A> влияет на то <xref:System.DateTime.ToLocalTime%2A> и <xref:System.DateTime.ToUniversalTime%2A> методы преобразования.  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Subtract">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Вычитает из этого экземпляра указанное время или длительность.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public TimeSpan Subtract (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Subtract(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Subtract(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtract (value As DateTime) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan Subtract(DateTime value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">Вычитаемые дата и время.</param>
        <summary>Вычитает из этого экземпляра указанную дату и время.</summary>
        <returns>Интервал времени, равный разнице между датой и временем, представленными этим экземпляром, и датой и временем, представленными параметром <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.Subtract%28System.DateTime%29> Метод определяет разницу между двумя датами. Вычитаемый интервал времени из текущего экземпляра, вызовите <xref:System.DateTime.Subtract%28System.TimeSpan%29> метод. Вычитаемый интервал времени, определенный в текущем экземпляре, вызвать метод, который добавляет этого интервала времени до текущей даты, а затем укажите отрицательное значение в качестве аргумента метода. Например, чтобы вычесть два месяца от текущей даты, вызвать <xref:System.DateTime.AddMonths%28System.Int32%29> метод со значением от -2.  
  
 Если дата и время текущего экземпляра более ранняя, чем `value`, метод возвращает <xref:System.TimeSpan> , представляющий отрицательный временной промежуток. То есть, значения всех его ненулевое значение свойства (такие как <xref:System.TimeSpan.Days%2A> или <xref:System.TimeSpan.Ticks%2A>) является отрицательным значением.  
  
 <xref:System.DateTime.Subtract%28System.DateTime%29> Метод не учитывает значение <xref:System.DateTime.Kind%2A> свойства двух <xref:System.DateTime> значений при выполнении операции вычитания. До вычитания <xref:System.DateTime> объектов, убедитесь, что они представляют время в одном часовом поясе. В противном случае результат будет включать разницу между часовыми поясами.  
  
> [!NOTE]
>  <xref:System.DateTimeOffset.Subtract%28System.DateTimeOffset%29?displayProperty=nameWithType> Метод внимание на различия между часовых поясов, при выполнении операции вычитания.  
  
   
  
## Examples  
 В следующем примере демонстрируется <xref:System.DateTime.Subtract%2A> метода и оператор вычитания.  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Результат меньше <see cref="F:System.DateTime.MinValue" /> или больше <see cref="F:System.DateTime.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public DateTime Subtract (TimeSpan value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime Subtract(valuetype System.TimeSpan value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Subtract(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtract (value As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime Subtract(TimeSpan value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="value">Вычитаемый интервал времени.</param>
        <summary>Вычитает из этого экземпляра указанную длительность.</summary>
        <returns>Объект, равный разнице между датой и временем, представленными этим экземпляром, и интервалом времени, представленным параметром <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.Subtract%28System.TimeSpan%29> Метод возвращает дату на указанное время интервала отличие от текущего экземпляра. Чтобы определить интервал времени между двумя датами, вызовите <xref:System.DateTime.Subtract%28System.DateTime%29> метод. Вычитаемый интервал времени, определенный в текущем экземпляре, вызвать метод, который добавляет этого интервала времени до текущей даты, а затем укажите отрицательное значение в качестве аргумента метода. Например, чтобы вычесть два месяца от текущей даты, вызвать <xref:System.DateTime.AddMonths%28System.Int32%29> метод со значением от -2.  
  
 Этот метод не изменяет значение этой <xref:System.DateTime>. Вместо этого он возвращает новый <xref:System.DateTime> , значение которого является результатом этой операции.  
  
 Как правило <xref:System.DateTime.Subtract%28System.TimeSpan%29?displayProperty=nameWithType> метод вычитает <xref:System.TimeSpan> объект, представляющий положительный промежуток времени и возвращает <xref:System.DateTime> значение, более ранняя, чем дата и время текущего экземпляра. Однако если <xref:System.TimeSpan> представляет отрицательный временной промежуток, <xref:System.DateTime.Subtract%28System.TimeSpan%29?displayProperty=nameWithType> возвращает <xref:System.DateTime> значение, которое является более поздней, чем дата и время текущего экземпляра.  
  
 <xref:System.DateTime.Subtract%28System.TimeSpan%29?displayProperty=nameWithType> Метод позволяет Вычитаемый интервал времени, состоящее более чем одной единицы времени, например (заданного числа часов) и заданное количество минут. Из которого вычитается единица времени (например года, месяцев или дней) <xref:System.DateTime> экземпляр, можно передать отрицательное числовое значение как параметр в любой из следующих методов:  
  
-   <xref:System.DateTime.AddYears%2A>, вычитаемый определенное число лет от текущего экземпляра даты и времени.  
  
-   <xref:System.DateTime.AddMonths%2A>, для вычитания указанного числа месяцев от текущего экземпляра даты и времени.  
  
-   <xref:System.DateTime.AddDays%2A>, вычитаемый определенное число дней в текущем экземпляре даты и времени.  
  
-   <xref:System.DateTime.AddHours%2A>, вычитаемый определенное число часов от текущего экземпляра даты и времени.  
  
-   <xref:System.DateTime.AddMinutes%2A>, вычитаемый определенное число минут от текущего экземпляра даты и времени.  
  
-   <xref:System.DateTime.AddSeconds%2A>, вычитаемый определенное количество секунд от текущего экземпляра даты и времени.  
  
-   <xref:System.DateTime.AddMilliseconds%2A>, вычитаемый определенное количество миллисекунд из текущего экземпляра даты и времени.  
  
-   <xref:System.DateTime.AddTicks%2A>, вычитаемый определенное количество тактов в текущем экземпляре даты и времени.  
  
   
  
## Examples  
 В следующем примере демонстрируется <xref:System.DateTime.Subtract%2A> метода и оператор вычитания.  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Результат меньше <see cref="F:System.DateTime.MinValue" /> или больше <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.TimeSpan" />
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (value As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ value) = IComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.GetTypeCode">
      <MemberSignature Language="C#" Value="TypeCode IConvertible.GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.TypeCode System.IConvertible.GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Function GetTypeCode () As TypeCode Implements IConvertible.GetTypeCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual TypeCode System.IConvertible.GetTypeCode() = IConvertible::GetTypeCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToBoolean">
      <MemberSignature Language="C#" Value="bool IConvertible.ToBoolean (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToBoolean(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToBoolean (provider As IFormatProvider) As Boolean Implements IConvertible.ToBoolean" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.IConvertible.ToBoolean(IFormatProvider ^ provider) = IConvertible::ToBoolean;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToBoolean(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Объект, реализующий интерфейс <see cref="T:System.IFormatProvider" />. (Этот параметр не используется; задайте значение <see langword="null" />.)</param>
        <summary>Данное преобразование не поддерживается. При попытке использовать этот метод выбрасывается исключение <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Возвращаемое значение для этого члена не используется.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Во всех случаях.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToByte">
      <MemberSignature Language="C#" Value="byte IConvertible.ToByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int8 System.IConvertible.ToByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToByte (provider As IFormatProvider) As Byte Implements IConvertible.ToByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Byte System.IConvertible.ToByte(IFormatProvider ^ provider) = IConvertible::ToByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Объект, реализующий интерфейс <see cref="T:System.IFormatProvider" />. (Этот параметр не используется; задайте значение <see langword="null" />.)</param>
        <summary>Данное преобразование не поддерживается. При попытке использовать этот метод выбрасывается исключение <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Возвращаемое значение для этого члена не используется.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Во всех случаях.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToChar">
      <MemberSignature Language="C#" Value="char IConvertible.ToChar (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance char System.IConvertible.ToChar(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToChar(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToChar (provider As IFormatProvider) As Char Implements IConvertible.ToChar" />
      <MemberSignature Language="C++ CLI" Value=" virtual char System.IConvertible.ToChar(IFormatProvider ^ provider) = IConvertible::ToChar;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToChar(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Объект, реализующий интерфейс <see cref="T:System.IFormatProvider" />. (Этот параметр не используется; задайте значение <see langword="null" />.)</param>
        <summary>Данное преобразование не поддерживается. При попытке использовать этот метод выбрасывается исключение <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Возвращаемое значение для этого члена не используется.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Во всех случаях.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDateTime">
      <MemberSignature Language="C#" Value="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToDateTime(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDateTime (provider As IFormatProvider) As DateTime Implements IConvertible.ToDateTime" />
      <MemberSignature Language="C++ CLI" Value=" virtual DateTime System.IConvertible.ToDateTime(IFormatProvider ^ provider) = IConvertible::ToDateTime;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDateTime(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Объект, реализующий интерфейс <see cref="T:System.IFormatProvider" />. (Этот параметр не используется; задайте значение <see langword="null" />.)</param>
        <summary>Возвращает текущий объект <see cref="T:System.DateTime" />.</summary>
        <returns>Текущий объект.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDecimal">
      <MemberSignature Language="C#" Value="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToDecimal(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDecimal (provider As IFormatProvider) As Decimal Implements IConvertible.ToDecimal" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Decimal System.IConvertible.ToDecimal(IFormatProvider ^ provider) = IConvertible::ToDecimal;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDecimal(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Объект, реализующий интерфейс <see cref="T:System.IFormatProvider" />. (Этот параметр не используется; задайте значение <see langword="null" />.)</param>
        <summary>Данное преобразование не поддерживается. При попытке использовать этот метод выбрасывается исключение <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Возвращаемое значение для этого члена не используется.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Во всех случаях.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDouble">
      <MemberSignature Language="C#" Value="double IConvertible.ToDouble (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToDouble(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDouble (provider As IFormatProvider) As Double Implements IConvertible.ToDouble" />
      <MemberSignature Language="C++ CLI" Value=" virtual double System.IConvertible.ToDouble(IFormatProvider ^ provider) = IConvertible::ToDouble;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDouble(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Объект, реализующий интерфейс <see cref="T:System.IFormatProvider" />. (Этот параметр не используется; задайте значение <see langword="null" />.)</param>
        <summary>Данное преобразование не поддерживается. При попытке использовать этот метод выбрасывается исключение <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Возвращаемое значение для этого члена не используется.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Во всех случаях.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt16">
      <MemberSignature Language="C#" Value="short IConvertible.ToInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt16 (provider As IFormatProvider) As Short Implements IConvertible.ToInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual short System.IConvertible.ToInt16(IFormatProvider ^ provider) = IConvertible::ToInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Объект, реализующий интерфейс <see cref="T:System.IFormatProvider" />. (Этот параметр не используется; задайте значение <see langword="null" />.)</param>
        <summary>Данное преобразование не поддерживается. При попытке использовать этот метод выбрасывается исключение <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Возвращаемое значение для этого члена не используется.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Во всех случаях.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt32">
      <MemberSignature Language="C#" Value="int IConvertible.ToInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt32 (provider As IFormatProvider) As Integer Implements IConvertible.ToInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IConvertible.ToInt32(IFormatProvider ^ provider) = IConvertible::ToInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Объект, реализующий интерфейс <see cref="T:System.IFormatProvider" />. (Этот параметр не используется; задайте значение <see langword="null" />.)</param>
        <summary>Данное преобразование не поддерживается. При попытке использовать этот метод выбрасывается исключение <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Возвращаемое значение для этого члена не используется.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Во всех случаях.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt64">
      <MemberSignature Language="C#" Value="long IConvertible.ToInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt64 (provider As IFormatProvider) As Long Implements IConvertible.ToInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual long System.IConvertible.ToInt64(IFormatProvider ^ provider) = IConvertible::ToInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Объект, реализующий интерфейс <see cref="T:System.IFormatProvider" />. (Этот параметр не используется; задайте значение <see langword="null" />.)</param>
        <summary>Данное преобразование не поддерживается. При попытке использовать этот метод выбрасывается исключение <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Возвращаемое значение для этого члена не используется.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Во всех случаях.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSByte">
      <MemberSignature Language="C#" Value="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToSByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSByte (provider As IFormatProvider) As SByte Implements IConvertible.ToSByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::SByte System.IConvertible.ToSByte(IFormatProvider ^ provider) = IConvertible::ToSByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Объект, реализующий интерфейс <see cref="T:System.IFormatProvider" />. (Этот параметр не используется; задайте значение <see langword="null" />.)</param>
        <summary>Данное преобразование не поддерживается. При попытке использовать этот метод выбрасывается исключение <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Возвращаемое значение для этого члена не используется.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Во всех случаях.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSingle">
      <MemberSignature Language="C#" Value="float IConvertible.ToSingle (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToSingle(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSingle (provider As IFormatProvider) As Single Implements IConvertible.ToSingle" />
      <MemberSignature Language="C++ CLI" Value=" virtual float System.IConvertible.ToSingle(IFormatProvider ^ provider) = IConvertible::ToSingle;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSingle(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Объект, реализующий интерфейс <see cref="T:System.IFormatProvider" />. (Этот параметр не используется; задайте значение <see langword="null" />.)</param>
        <summary>Данное преобразование не поддерживается. При попытке использовать этот метод выбрасывается исключение <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Возвращаемое значение для этого члена не используется.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Во всех случаях.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToType">
      <MemberSignature Language="C#" Value="object IConvertible.ToType (Type type, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.IConvertible.ToType(class System.Type type, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToType(System.Type,System.IFormatProvider)" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.IConvertible.ToType(Type ^ type, IFormatProvider ^ provider) = IConvertible::ToType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToType(System.Type,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="type">Требуемый тип.</param>
        <param name="provider">Объект, реализующий интерфейс <see cref="T:System.IFormatProvider" />. (Этот параметр не используется; задайте значение <see langword="null" />.)</param>
        <summary>Преобразует текущий объект <see cref="T:System.DateTime" /> в объект заданного типа.</summary>
        <returns>Объект типа, заданного параметром <paramref name="type" />, значение которого эквивалентно значению текущего объекта <see cref="T:System.DateTime" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="type" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.InvalidCastException">Для типа <see cref="T:System.DateTime" /> преобразование не поддерживается.</exception>
        <altmember cref="T:System.Convert" />
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt16">
      <MemberSignature Language="C#" Value="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int16 System.IConvertible.ToUInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToUInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt16 (provider As IFormatProvider) As UShort Implements IConvertible.ToUInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt16 System.IConvertible.ToUInt16(IFormatProvider ^ provider) = IConvertible::ToUInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Объект, реализующий интерфейс <see cref="T:System.IFormatProvider" />. (Этот параметр не используется; задайте значение <see langword="null" />.)</param>
        <summary>Данное преобразование не поддерживается. При попытке использовать этот метод выбрасывается исключение <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Возвращаемое значение для этого члена не используется.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Во всех случаях.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt32">
      <MemberSignature Language="C#" Value="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int32 System.IConvertible.ToUInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToUInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt32 (provider As IFormatProvider) As UInteger Implements IConvertible.ToUInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt32 System.IConvertible.ToUInt32(IFormatProvider ^ provider) = IConvertible::ToUInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Объект, реализующий интерфейс <see cref="T:System.IFormatProvider" />. (Этот параметр не используется; задайте значение <see langword="null" />.)</param>
        <summary>Данное преобразование не поддерживается. При попытке использовать этот метод выбрасывается исключение <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Возвращаемое значение для этого члена не используется.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Во всех случаях.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt64">
      <MemberSignature Language="C#" Value="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int64 System.IConvertible.ToUInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToUInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt64 (provider As IFormatProvider) As ULong Implements IConvertible.ToUInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt64 System.IConvertible.ToUInt64(IFormatProvider ^ provider) = IConvertible::ToUInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Объект, реализующий интерфейс <see cref="T:System.IFormatProvider" />. (Этот параметр не используется; задайте значение <see langword="null" />.)</param>
        <summary>Данное преобразование не поддерживается. При попытке использовать этот метод выбрасывается исключение <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Возвращаемое значение для этого члена не используется.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Во всех случаях.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">Объект, который требуется заполнить данными.</param>
        <param name="context">Целевой объект этой сериализации. (Этот параметр не используется; задайте значение <see langword="null" />.)</param>
        <summary>Заполняет объект <see cref="T:System.Runtime.Serialization.SerializationInfo" /> данными, необходимыми для сериализации текущего объекта <see cref="T:System.DateTime" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод заполняет `info` параметр с <xref:System.DateTime.Ticks%2A> и <xref:System.DateTime.Kind%2A> значения свойств.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="info" /> имеет значение <see langword="null" />.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">требуется полное доверие для непосредственно вызывающего метода. Этот член не может использоваться частично доверенным или прозрачным кодом.</permission>
      </Docs>
    </Member>
    <Member MemberName="Ticks">
      <MemberSignature Language="C#" Value="public long Ticks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Ticks" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Ticks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Ticks As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long Ticks { long get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает число тактов, которое представляет дату и время этого экземпляра.</summary>
        <value>Число тактов, которое представляет дату и время этого экземпляра. Это значение находится в диапазоне от <see langword="DateTime.MinValue.Ticks" /> до <see langword="DateTime.MaxValue.Ticks" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Один такт соответствует 100 наносекундам или одной десятимиллионной секунды. Существует 10 000 тактов в миллисекунды или 10 миллионов тактов в секунду.  
  
 Значение этого свойства представляет количество 100-наносекундных интервалов, прошедших с полуночи в 12:00:00, 1 января 0001 года (0: 00:00 UTC 1 января 0001 по григорианскому календарю), который представляет <xref:System.DateTime.MinValue?displayProperty=nameWithType>. Он не включает число тактов, которое относится к leap секунд.  
  
   
  
## Examples  
 В следующем примере используется <xref:System.DateTime.Ticks%2A> свойство для отображения количества тактов, прошедших с момента начала-21-го века и для создания экземпляра <xref:System.TimeSpan> объекта. <xref:System.TimeSpan> Объект затем используется для отображения истекшего времени, с помощью нескольких других временных интервалов.  
  
 [!code-csharp[System.DateTime.Ticks#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Ticks/cs/Ticks.cs#1)]
 [!code-vb[System.DateTime.Ticks#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Ticks/vb/Ticks.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TimeOfDay">
      <MemberSignature Language="C#" Value="public TimeSpan TimeOfDay { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan TimeOfDay" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.TimeOfDay" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TimeOfDay As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan TimeOfDay { TimeSpan get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает время дня для этого экземпляра.</summary>
        <value>Интервал времени, представляющий часть дня, прошедшую с полуночи.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В отличие от <xref:System.DateTime.Date%2A> свойство. возвращающий <xref:System.DateTime> значение, представляющее дату без его компонент времени <xref:System.DateTime.TimeOfDay%2A> возвращает <xref:System.TimeSpan> значение, представляющее <xref:System.DateTime> компонент значения времени.  
  
 Если вы хотите отобразить время суток, или получить строковое представление времени дня <xref:System.DateTime> значение, можно вместо этого вызовите перегрузку <xref:System.DateTime.ToString%2A> метода, имеющего `format` параметра или использование [составное форматирование ](~/docs/standard/base-types/composite-formatting.md) компонент со строкой стандартного формата «T» или «t».  
  
   
  
## Examples  
 В следующем примере отображается значение <xref:System.DateTime.TimeOfDay%2A> свойство для массива <xref:System.DateTime> значения. Возвращаемое значение также сопоставляются с строка, возвращаемая строка стандартного формата «t» в составной операции форматирования.  
  
 [!code-csharp[System.DateTime.TimeOfDay#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.timeofday/cs/timeofday1.cs#1)]
 [!code-vb[System.DateTime.TimeOfDay#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.timeofday/vb/timeofday1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TimeSpan" />
      </Docs>
    </Member>
    <Member MemberName="ToBinary">
      <MemberSignature Language="C#" Value="public long ToBinary ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToBinary() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToBinary" />
      <MemberSignature Language="VB.NET" Value="Public Function ToBinary () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToBinary();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Сериализует текущий объект <see cref="T:System.DateTime" /> в 64-разрядное двоичное значение, которое может использоваться в дальнейшем для воссоздания объекта <see cref="T:System.DateTime" />.</summary>
        <returns>64-разрядное целое число со знаком, кодирующее свойства <see cref="P:System.DateTime.Kind" /> и <see cref="P:System.DateTime.Ticks" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте <xref:System.DateTime.ToBinary%2A> метод для преобразования значения текущего <xref:System.DateTime> в двоичное значение. Впоследствии использовать двоичного значения и <xref:System.DateTime.FromBinary%2A> метод для повторного создания исходного <xref:System.DateTime> объекта.  
  
> [!IMPORTANT]
>  В некоторых случаях <xref:System.DateTime> значения, возвращенного <xref:System.DateTime.FromBinary%2A> метод не идентичный исходному <xref:System.DateTime> значение, передаваемое <xref:System.DateTime.ToBinary%2A> метод. Дополнительные сведения см. в следующем разделе «Коррекция местного времени».  
  
## <a name="local-time-adjustment"></a>Коррекция местного времени  
 Местное время, в которой находится в формате UTC, изменены для местного часового пояса, представленного <xref:System.DateTime> структура которого <xref:System.DateTime.Kind%2A> свойство имеет значение <xref:System.DateTimeKind.Local>. При восстановлении локальный <xref:System.DateTime> значение из двоичного представления, произведенное <xref:System.DateTime.ToBinary%2A> метода <xref:System.DateTime.FromBinary%2A> метод может изменить восстановленное значение, чтобы оно не равно исходное значение. Это может произойти в следующих случаях.  
  
-   Если локальный <xref:System.DateTime> из одного часового пояса путем сериализации объекта <xref:System.DateTime.ToBinary%2A> метод и затем десериализуется в другой часовой пояс по <xref:System.DateTime.FromBinary%2A> метод, представленный итоговый местное время <xref:System.DateTime> объект автоматически корректируется второй часовой пояс.  
  
     Например, рассмотрим <xref:System.DateTime> , представляющий местное время 15: 00. Приложение, которое выполняется в США. Тихоокеанском стандартном часовом поясе использует <xref:System.DateTime.ToBinary%2A> метод преобразования, <xref:System.DateTime> в двоичное значение. Другое приложение, которое выполняется в США. Использует восточном часовом поясе <xref:System.DateTime.FromBinary%2A> метод преобразования двоичное значение в новый <xref:System.DateTime> объекта. Значение нового <xref:System.DateTime> объект — 18: 00, представляющее тот же момент времени в качестве исходного 15. значение, но откорректированное по местному времени в восточном часовом поясе.  
  
-   Если двоичное представление локального <xref:System.DateTime> значение представляет недопустимое время в местном часовом поясе системы, на котором <xref:System.DateTime.FromBinary%2A> — вызывается, время определяется, чтобы он допустим.  
  
     Например в США происходит переход со стандартного времени на летнее время Тихоокеанском стандартном часовом поясе на 14 марта 2010 г. в 2:00 утра, когда время увеличивается на один час до 3:00. Этот часовой интервал является недопустимым временем, то есть интервал времени, не существует в данном часовом поясе. В следующем примере показано, что при времени, которые попадают в этот диапазон преобразуются в двоичное значение с <xref:System.DateTime.ToBinary%2A> метода и затем восстанавливается с <xref:System.DateTime.FromBinary%2A> метод исходное значение корректируется, чтобы стать допустимым. Можно определить ли определенная дата и время значения могут применяться изменения, передайте ее в <xref:System.TimeZoneInfo.IsInvalidTime%2A?displayProperty=nameWithType> метода, как показано в примере.  
  
     [!code-csharp[System.DateTime.FromBinary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.frombinary/cs/frombinary1.cs#1)]
     [!code-vb[System.DateTime.FromBinary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.frombinary/vb/frombinary1.vb#1)]  
  
## <a name="version-considerations"></a>Описание версии  
 Начиная с .NET Framework версии 2.0, <xref:System.DateTime> структура состоит из закрытого поля Kind, который указывает, является ли указанное значение времени основан на местное время, универсальное глобальное (UTC) или ни один и закрытое поле тактов, которая содержит количество 100-наносекундных тактов, укажите дату и время. Поле тактов можно осуществить с помощью <xref:System.DateTime.Ticks%2A> свойство и поле Kind можно осуществить с помощью <xref:System.DateTime.Kind%2A> свойство.  
  
 До .NET Framework 2.0, если вы сериализовать <xref:System.DateTime> объекта вручную, а не с помощью интерфейса сериализации, например <xref:System.Runtime.Serialization.ISerializable?displayProperty=nameWithType>, только необходимые для сериализации данных в тактах <xref:System.DateTime> структуры. Начиная с версии 2.0, необходимо сериализовать также типа данных.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.FromBinary(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="Today">
      <MemberSignature Language="C#" Value="public static DateTime Today { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime Today" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Today" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Today As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime Today { DateTime get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает текущую дату.</summary>
        <value>Объект, которому присвоена сегодняшняя дата, с компонентом времени, равным 00:00:00.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Начиная с .NET Framework версии 2.0, возвращаемым значением является <xref:System.DateTime> которого <xref:System.DateTime.Kind%2A> возвращает <xref:System.DateTimeKind.Local>.  
  
 Так как он возвращает текущую дату без текущего времени <xref:System.DateTime.Today%2A> свойство подходит для использования в приложениях, которые работают только с датами. Дополнительные сведения см. в разделе [Choosing Between DateTime, DateTimeOffset, TimeSpan и TimeZoneInfo](~/docs/standard/datetime/choosing-between-datetime.md). Напротив <xref:System.DateTime.TimeOfDay%2A> свойство возвращает текущее время без текущую дату и <xref:System.DateTime.Now%2A> свойство возвращает текущую дату и текущее время.  
  
   
  
## Examples  
 В следующем примере используется <xref:System.DateTime.Date%2A> свойство для получения текущей даты. Здесь также показано, как <xref:System.DateTime> значение форматируется с помощью некоторых стандартных даты и времени строки формата. Обратите внимание, что, программа третьего вызова <xref:System.DateTime.ToString%28System.String%29> метод используется описатель формата g для включения компонента времени, которое равно нулю.  
  
 [!code-csharp[System.DateTime.Today#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Today/cs/Today1.cs#1)]
 [!code-vb[System.DateTime.Today#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Today/vb/Today1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTime.Now" />
        <altmember cref="P:System.DateTime.TimeOfDay" />
      </Docs>
    </Member>
    <Member MemberName="ToFileTime">
      <MemberSignature Language="C#" Value="public long ToFileTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToFileTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToFileTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToFileTime () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToFileTime();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Преобразует значение текущего объекта <see cref="T:System.DateTime" /> во временную характеристику файла Windows.</summary>
        <returns>Значение текущего объекта <see cref="T:System.DateTime" />, представленное в виде временной характеристики файла Windows.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Временная характеристика файла Windows является 64-разрядное значение, представляющее количество 100-наносекундных интервалов, прошедших с 00:00 1 января 1601 г. нашей эры (C.E.) Гринвичу (UTC). Windows использует временную характеристику файла для записи, когда приложение создает, обращается к или записывает в файл.  
  
 <xref:System.DateTime.ToFileTime%2A> Использует метод <xref:System.DateTime.Kind%2A> свойства, чтобы определить является ли текущий <xref:System.DateTime> объект является местное время, время в формате UTC или неопределенная вида времени, который рассматривается как местное время.  
  
   
  
## Examples  
 В следующем примере демонстрируется <xref:System.DateTime.ToFileTime%2A> метод.  
  
 [!code-cpp[DateTime.ToFileTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.ToFileTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.ToFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToFileTime/CS/class1.cs#1)]
 [!code-vb[DateTime.ToFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToFileTime/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Получившееся время файла представит дату и время до 0:00 1 января 1601 года нашей эры в формате UTC.</exception>
        <block subset="none" type="usage">
          <para>Как правило <see cref="M:System.DateTime.FromFileTime(System.Int64)" /> восстановление метод <see cref="T:System.DateTime" /> значения, которые были сохранены в <see cref="M:System.DateTime.ToFileTime" /> метод. Тем не менее эти два значения могут отличаться при следующих условиях:  
  
-   Если для сериализации и десериализации <see cref="T:System.DateTime" /> значение происходят в разных часовых поясах. Например если <see cref="T:System.DateTime" /> значение со временем 12:30 по в США. Восточное часовой пояс сериализуется и затем десериализуется в США. Тихоокеанском стандартном часовом поясе, исходное значение 12:30 по настраивается в 9:30:00 с учетом разницу между двумя часовыми поясами.  
  
-   Если <see cref="T:System.DateTime" /> значение, которое сериализуется представляет недопустимое время в местном часовом поясе. В этом случае <see cref="M:System.DateTime.ToFileTime" /> метод корректирует восстановленной <see cref="T:System.DateTime" /> значение, чтобы он предоставлял допустимое время в местном часовом поясе.  
  
     Например в США происходит переход со стандартного времени на летнее время Тихоокеанском стандартном часовом поясе на 14 марта 2010 г. в 2:00 утра, когда время увеличивается на один час до 3:00. Этот часовой интервал является недопустимым временем, то есть интервал времени, не существует в данном часовом поясе. В следующем примере показано, что при времени, которые попадают в этот диапазон преобразуются в длинное целое, <see cref="M:System.DateTime.ToFileTime" /> метода и затем восстанавливается с <see cref="M:System.DateTime.FromFileTime(System.Int64)" /> метод исходное значение корректируется, чтобы стать допустимым. Можно определить ли определенная дата и время значения могут применяться изменения, передайте ее в <see cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" /> метода, как показано в примере.  
  
     [!code-csharp[System.DateTime.FromFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.fromfiletime/cs/fromfiletime1.cs#1)]
     [!code-vb[System.DateTime.FromFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.fromfiletime/vb/fromfiletime1.vb#1)]</para>
        </block>
        <altmember cref="M:System.DateTime.ToFileTimeUtc" />
        <altmember cref="T:System.Int64" />
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="ToFileTimeUtc">
      <MemberSignature Language="C#" Value="public long ToFileTimeUtc ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToFileTimeUtc() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToFileTimeUtc" />
      <MemberSignature Language="VB.NET" Value="Public Function ToFileTimeUtc () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToFileTimeUtc();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Преобразует значение текущего объекта <see cref="T:System.DateTime" /> во временную характеристику файла Windows.</summary>
        <returns>Значение текущего объекта <see cref="T:System.DateTime" />, представленное в виде временной характеристики файла Windows.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Временная характеристика файла Windows является 64-разрядное значение, представляющее количество 100-наносекундных интервалов, прошедших с 00:00 1 января 1601 г. нашей эры (C.E.) Гринвичу (UTC). Windows использует временную характеристику файла для записи, когда приложение создает, обращается к или записывает в файл.  
  
 <xref:System.DateTime.ToFileTimeUtc%2A> Использует метод <xref:System.DateTime.Kind%2A> свойства, чтобы определить является ли текущий <xref:System.DateTime> объект является местное время, время в формате UTC или неопределенная вида времени, интерпретируемое как время в формате UTC. Если это местное время, оно преобразует время в формате UTC перед выполнением преобразования во временную характеристику файла Windows.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Получившееся время файла представит дату и время до 0:00 1 января 1601 года нашей эры в формате UTC.</exception>
        <block subset="none" type="usage">
          <para>
            <see cref="M:System.DateTime.ToFileTimeUtc" /> Метод иногда используется для преобразования в местное время в UTC, а затем восстановить его путем вызова <see cref="M:System.DateTime.FromFileTimeUtc(System.Int64)" /> метода, за которым следует <see cref="M:System.DateTime.ToLocalTime" /> метод. Тем не менее если исходное время представляет недопустимое время в местном часовом поясе, два значения местного времени не будут равны. Дополнительные сведения см. в разделе <see cref="M:System.DateTime.ToLocalTime" /> метод.</para>
        </block>
        <altmember cref="M:System.DateTime.ToFileTime" />
        <altmember cref="T:System.Int64" />
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="ToLocalTime">
      <MemberSignature Language="C#" Value="public DateTime ToLocalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime ToLocalTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToLocalTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLocalTime () As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime ToLocalTime();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Преобразует значение текущего объекта <see cref="T:System.DateTime" /> в местное время.</summary>
        <returns>Объект, свойство <see cref="P:System.DateTime.Kind" /> которого имеет значение <see cref="F:System.DateTimeKind.Local" />, а значение является либо местным временем, эквивалентным значению текущего объекта <see cref="T:System.DateTime" />, либо значением <see cref="F:System.DateTime.MaxValue" />, если преобразованное значение слишком велико для представления объектом <see cref="T:System.DateTime" />, либо значением <see cref="F:System.DateTime.MinValue" />, если преобразованное значение слишком мало для представления объектом <see cref="T:System.DateTime" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Местное время равно времени по Гринвичу (UTC), а также смещение относительно UTC. Дополнительные сведения о смещении UTC см. в разделе <xref:System.TimeZone.GetUtcOffset%2A?displayProperty=nameWithType>. Преобразование также учитывается летнее время правило, которое применяется ко времени, представленных текущим <xref:System.DateTime> объекта.  
  
> [!IMPORTANT]
>  На [!INCLUDE[winxp](~/includes/winxp-md.md)] систем, <xref:System.DateTime.ToLocalTime%2A> метод распознает только текущее правило коррекции, при преобразовании от времени UTC в местное время. В результате преобразование для периодов, когда текущее правило коррекции еще в силу может не отражать точное различие между временем UTC и местным временем.  
  
 Начиная с .NET Framework версии 2.0, значение, возвращаемое <xref:System.DateTime.ToLocalTime%2A> метод определяется <xref:System.DateTime.Kind%2A> текущего элемента <xref:System.DateTime> объекта. В следующей таблице описаны возможные результаты.  
  
|Тип|Результаты|  
|----------|-------------|  
|<xref:System.DateTimeKind.Utc>|Этот экземпляр <xref:System.DateTime> преобразуется в местное время.|  
|<xref:System.DateTimeKind.Local>|Преобразование не выполняется.|  
|<xref:System.DateTimeKind.Unspecified>|Этот экземпляр <xref:System.DateTime> считается временем UTC, и выполнить преобразование как если бы <xref:System.DateTime.Kind%2A> были <xref:System.DateTimeKind.Utc>.|  
  
> [!NOTE]
>  <xref:System.DateTime.ToLocalTime%2A> Метод преобразует <xref:System.DateTime> значения от времени UTC в местное время. Чтобы преобразовать время любого часового пояса в местное время, используйте <xref:System.TimeZoneInfo.ConvertTime%2A?displayProperty=nameWithType> метод.  
  
 Значение, возвращаемое при преобразовании — <xref:System.DateTime> которого <xref:System.DateTime.Kind%2A> свойство всегда возвращает <xref:System.DateTimeKind.Local>. Следовательно, возвращение допустимого результата даже в том случае, если <xref:System.DateTime.ToLocalTime%2A> многократно применяется к тому же <xref:System.DateTime>.  
  
   
  
## Examples  
 В следующем примере демонстрируется <xref:System.DateTime.ToLocalTime%2A> метод. Обратите внимание, что точный результат зависит от текущего языка и региональных параметров и местный часовой пояс системы, на котором он выполняется.  
  
 [!code-cpp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CS/class1.cs#1)]
 [!code-vb[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/VB/class1.vb#1)]  
  
 В следующем примере используется <xref:System.DateTime.SpecifyKind%2A> метод, чтобы продемонстрировать, как <xref:System.DateTime.Kind%2A> влияет на то <xref:System.DateTime.ToLocalTime%2A> и <xref:System.DateTime.ToUniversalTime%2A> методы преобразования.  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Можно использовать <see cref="M:System.DateTime.ToLocalTime" /> метод восстановления локального значения даты и времени, которые были преобразованы в формат UTC, <see cref="M:System.DateTime.ToUniversalTime" /> или <see cref="M:System.DateTime.FromFileTimeUtc(System.Int64)" /> метод. Тем не менее если исходное время представляет недопустимое время в местном часовом поясе, оно не будет соответствовать восстановленное значение. Когда <see cref="M:System.DateTime.ToLocalTime" /> метод преобразует время от времени UTC в местный часовой пояс, он также настраивает, чтобы оно допустимым время в местном часовом поясе.  
  
 Например в США происходит переход со стандартного времени на летнее время Тихоокеанском стандартном часовом поясе на 14 марта 2010 г. в 2:00 утра, когда время увеличивается на один час до 3:00. Этот часовой интервал является недопустимым временем, то есть интервал времени, не существует в данном часовом поясе. В следующем примере показано, что при времени, которые попадают в этот диапазон преобразуется в формат UTC, <see cref="M:System.DateTime.ToUniversalTime" /> метода и затем восстанавливается с <see cref="M:System.DateTime.ToLocalTime" /> метод исходное значение корректируется, чтобы стать допустимым. Можно определить ли определенная дата и время значения могут применяться изменения, передайте ее в <see cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" /> метода, как показано в примере.  
  
 [!code-csharp[System.DateTime.ToLocalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tolocaltime/cs/tolocaltime1.cs#1)]
 [!code-vb[System.DateTime.ToLocalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tolocaltime/vb/tolocaltime1.vb#1)]</para>
        </block>
        <altmember cref="T:System.TimeZone" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
        <altmember cref="M:System.TimeZone.GetDaylightChanges(System.Int32)" />
        <altmember cref="M:System.DateTime.ToUniversalTime" />
      </Docs>
    </Member>
    <Member MemberName="ToLongDateString">
      <MemberSignature Language="C#" Value="public string ToLongDateString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToLongDateString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToLongDateString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLongDateString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToLongDateString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Преобразует значение текущего объекта <see cref="T:System.DateTime" /> в эквивалентное ему длинное строковое представление даты.</summary>
        <returns>Строка, содержащая длинное строковое представление даты текущего объекта <see cref="T:System.DateTime" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Значение текущего <xref:System.DateTime> объекта форматируется с использованием шаблону, заданному <xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A> свойства, связанные с языком и региональными параметрами текущего потока. Возвращаемое значение идентично значению значение, возвращаемое, указав «D» [строка стандартного формата DateTime](~/docs/standard/base-types/standard-date-and-time-format-strings.md) с <xref:System.DateTime.ToString%28System.String%29> метод.  
  
> [!IMPORTANT]
>  Строка, возвращаемая функцией <xref:System.DateTime.ToLongDateString%2A> метод язык и региональные параметры. Он соответствует шаблону, заданному для текущего языка и региональных параметров <xref:System.Globalization.DateTimeFormatInfo> объекта. Например, для региональных параметров en US, стандартная длинный формат даты — «дддд, MMMMdd, yyyy»; для культуры de-DE он является «дддд, d. MMMMyyyy»; для региональных параметров ja-JP это «гггг '?' M "?" d'? '». Конкретную строку формата для определенного компьютера можно также настроить, чтобы она отличается от стандартной строки длинного формата даты.  
  
 Дополнительные сведения о текущей культурой потока см. в разделе <xref:System.Threading.Thread.CurrentCulture%2A> свойство. Дополнительные сведения о символах формата, шаблоны форматирования и выходных данных, создают см. в разделе [типы форматирования](~/docs/standard/base-types/formatting-types.md) раздела. Дополнительные сведения об изменении шаблона формата, связанного с символом формата см. в разделе <xref:System.Globalization.DateTimeFormatInfo> класса.  
  
   
  
## Examples  
 В следующем примере демонстрируется <xref:System.DateTime.ToLongDateString%2A> метод.  
  
 [!code-csharp[DateTime.ToShortLongString#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToShortLongString/cs/sls.cs#1)]
 [!code-vb[DateTime.ToShortLongString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToShortLongString/vb/sls.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
      </Docs>
    </Member>
    <Member MemberName="ToLongTimeString">
      <MemberSignature Language="C#" Value="public string ToLongTimeString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToLongTimeString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToLongTimeString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLongTimeString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToLongTimeString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Преобразует значение текущего объекта <see cref="T:System.DateTime" /> в эквивалентное ему длинное строковое представление времени.</summary>
        <returns>Строка, содержащая длинное строковое представление времени текущего объекта <see cref="T:System.DateTime" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Значение текущего <xref:System.DateTime> объекта форматируется с использованием шаблону, заданному <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A?displayProperty=nameWithType> свойства, связанные с языком и региональными параметрами текущего потока. Возвращаемое значение идентично значению значение, возвращаемое, указав «T» [стандартных форматов даты и времени строка](~/docs/standard/base-types/standard-date-and-time-format-strings.md) с <xref:System.DateTime.ToString%28System.String%29> метод.  
  
> [!IMPORTANT]
>  Строка, возвращаемая функцией <xref:System.DateTime.ToLongTimeString%2A> метод язык и региональные параметры. Он соответствует шаблону, заданному <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A> свойства текущего языка и региональных параметров <xref:System.Globalization.DateTimeFormatInfo> объекта. Например для региональных параметров en US, шаблон Стандартная много времени — «: mm: ss»; для культуры de-DE это «Чч»; для региональных параметров ja-JP это «Ч: мин:». Конкретную строку формата для определенного компьютера можно также настроить, чтобы она отличается от стандартной строки длинного формата времени.  
  
 Дополнительные сведения о текущей культурой потока см. в разделе <xref:System.Threading.Thread.CurrentCulture%2A> свойство. Дополнительные сведения о символах формата, шаблоны форматирования и выходных данных, создают см. в разделе [типы форматирования](~/docs/standard/base-types/formatting-types.md) раздела. Дополнительные сведения об изменении шаблона формата, связанного с символом формата см. в разделе <xref:System.Globalization.DateTimeFormatInfo> класса.  
  
   
  
## Examples  
 В следующем примере демонстрируется <xref:System.DateTime.ToLongTimeString%2A> метод.  
  
 [!code-csharp[System.DateTime.ToLongTimeString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tolongtimestring/cs/sls.cs#1)]
 [!code-vb[System.DateTime.ToLongTimeString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tolongtimestring/vb/sls.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
      </Docs>
    </Member>
    <Member MemberName="ToOADate">
      <MemberSignature Language="C#" Value="public double ToOADate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 ToOADate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToOADate" />
      <MemberSignature Language="VB.NET" Value="Public Function ToOADate () As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ToOADate();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Преобразует числовое значение этого экземпляра в эквивалентное ему значение даты OLE-автоматизации.</summary>
        <returns>Число двойной точности с плавающей запятой, содержащее значение даты OLE-автоматизации, эквивалентное значению этого экземпляра.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Значение даты OLE-автоматизации реализовано как число с плавающей запятой, которого интегрированный компонент — количество дней до или после полночь 30 декабря 1899 г., а которых дробная представляет время в этот день, разделенное на 24. Например полночь 31 декабря 1899 г. представляется 1.0; 06: 00 1 января 1900 г. представляется 2.25; полночь 29 декабря 1899 г. представляется по -1,0; и 06: 00 29 декабря 1899 г. представляется-1.25.  
  
 Базовый даты OLE-автоматизации является полночь 30 декабря 1899 г. Минимальное даты OLE-автоматизации является полночь 1 января 0100. Максимальное даты OLE-автоматизации является таким же, как <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, последний момент 31 декабря 9999 года.  
  
 <xref:System.DateTime.ToOADate%2A> Вызывает исключение <xref:System.OverflowException> Если текущий экземпляр представляет дату, которая является более поздней, чем <xref:System.DateTime.MinValue> и более ранних версий, чем полуночи January1, 0100. Тем не менее если значение текущего экземпляра <xref:System.DateTime.MinValue>, метод возвращает значение 0.  
  
 Дополнительные сведения об OLE-автоматизации см. в разделе [библиотеки MSDN](http://go.microsoft.com/fwlink/?linkid=37118).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">Значение этого экземпляра невозможно представить в виде даты автоматизации OLE.</exception>
        <altmember cref="T:System.Double" />
        <altmember cref="M:System.DateTime.FromOADate(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="ToShortDateString">
      <MemberSignature Language="C#" Value="public string ToShortDateString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToShortDateString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToShortDateString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToShortDateString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToShortDateString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Преобразует значение текущего объекта <see cref="T:System.DateTime" /> в эквивалентное ему короткое строковое представление даты.</summary>
        <returns>Строка, содержащая короткое строковое представление даты текущего объекта <see cref="T:System.DateTime" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Значение текущего <xref:System.DateTime> объекта форматируется с использованием шаблону, заданному <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A?displayProperty=nameWithType> свойства, связанные с языком и региональными параметрами текущего потока. Возвращаемое значение идентично значению значение, возвращаемое, указав «d» [строка стандартного формата DateTime](~/docs/standard/base-types/standard-date-and-time-format-strings.md) с <xref:System.DateTime.ToString%28System.String%29> метод.  
  
> [!IMPORTANT]
>  Строка, возвращаемая функцией <xref:System.DateTime.ToShortDateString%2A> метод язык и региональные параметры. Он соответствует шаблону, заданному для текущего языка и региональных параметров <xref:System.Globalization.DateTimeFormatInfo> объекта. Например для региональных параметров en US, шаблон Стандартная короткого формата даты — «M/d/yyyy»; для культуры de-DE это «дд. MM.yyyy»; для региональных параметров ja-JP это «гггг/M/d». Конкретную строку формата для определенного компьютера можно также настроить, чтобы она отличается от стандартной строки короткого формата даты.  
  
 Дополнительные сведения о текущей культурой потока см. в разделе <xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType> свойство. Дополнительные сведения о символах формата, шаблоны форматирования и выходных данных, создают см. в разделе [типы форматирования](~/docs/standard/base-types/formatting-types.md) раздела. Дополнительные сведения об изменении шаблона формата, связанного с символом формата см. в разделе <xref:System.Globalization.DateTimeFormatInfo> класса.  
  
   
  
## Examples  
 В следующем примере демонстрируется <xref:System.DateTime.ToShortDateString%2A> метод. Он также показывает, что результатом вызова метода <xref:System.DateTime.ToShortDateString%2A> метода совпадает с вызовом метода <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> метод с «d» в качестве параметра format.  
  
 [!code-csharp[System.DateTime.ToShortDateString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToShortDateString/cs/ToShortDateString.cs#1)]
 [!code-vb[System.DateTime.ToShortDateString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToShortDateString/vb/ToShortDateString.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
      </Docs>
    </Member>
    <Member MemberName="ToShortTimeString">
      <MemberSignature Language="C#" Value="public string ToShortTimeString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToShortTimeString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToShortTimeString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToShortTimeString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToShortTimeString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Преобразует значение текущего объекта <see cref="T:System.DateTime" /> в эквивалентное ему короткое строковое представление времени.</summary>
        <returns>Строка, содержащая короткое строковое представление времени текущего объекта <see cref="T:System.DateTime" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Значение текущего <xref:System.DateTime> объекта форматируется с использованием шаблону, заданному <xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern%2A?displayProperty=nameWithType> свойства, связанные с языком и региональными параметрами текущего потока. Возвращаемое значение идентично значению значение, возвращаемое, указав «t» [строка стандартного формата DateTime](~/docs/standard/base-types/standard-date-and-time-format-strings.md) с <xref:System.DateTime.ToString%28System.String%29> метод.  
  
> [!IMPORTANT]
>  Строка, возвращаемая функцией <xref:System.DateTime.ToShortTimeString%2A> метод язык и региональные параметры. Он соответствует шаблону, заданному для текущего языка и региональных параметров <xref:System.Globalization.DateTimeFormatInfo> объекта. Например для региональных параметров en US, стандартная короткий шаблон времени является «чч: мм»; для культуры de-DE он является «Чч: мм»; для региональных параметров ja-JP это «Ч: мм». Конкретную строку формата для определенного компьютера можно также настроить, чтобы она отличается от стандартной строки короткого формата времени.  
  
 Дополнительные сведения о текущей культурой потока см. в разделе <xref:System.Threading.Thread.CurrentCulture%2A> свойство. Дополнительные сведения о символах формата, шаблоны форматирования и выходных данных, создают см. в разделе [типы форматирования](~/docs/standard/base-types/formatting-types.md) раздела. Дополнительные сведения об изменении шаблона формата, связанного с символом формата см. в разделе <xref:System.Globalization.DateTimeFormatInfo> класса.  
  
   
  
## Examples  
 В следующем примере демонстрируется <xref:System.DateTime.ToShortTimeString%2A> метод.  
  
 [!code-csharp[DateTime.ToShortLongString#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToShortLongString/cs/sls.cs#1)]
 [!code-vb[DateTime.ToShortLongString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToShortLongString/vb/sls.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Преобразует значение текущего объекта <see cref="T:System.DateTime" /> в эквивалентное ему строковое представление.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Преобразует значение текущего объекта <see cref="T:System.DateTime" /> в эквивалентное строковое представление с помощью соглашений о форматировании для текущего языка и региональных параметров.</summary>
        <returns>Строковое представление значения текущего объекта <see cref="T:System.DateTime" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Значение текущего <xref:System.DateTime> объекта форматируется с использованием Описатель полного формата времени («G») и даты. Чтобы отформатировать его, используя указанные Дата и время описатель формата, вызовите <xref:System.DateTime.ToString%28System.String%29> метод. Чтобы отформатировать его с помощью Описатель полного формата времени («G») и даты для определенного языка и региональных параметров, вызовите <xref:System.DateTime.ToString%28System.IFormatProvider%29> метод. Чтобы отформатировать его с помощью определенной даты и Описатель полного формата времени и соглашений для определенного языка и региональных параметров, вызовите <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29> метод.  
  
 Этот метод использует сведения о форматировании, производным от текущего языка и региональных параметров. В частности, он объединяет строки пользовательского формата, возвращаемый <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A> и <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A> свойства <xref:System.Globalization.DateTimeFormatInfo> объект, возвращаемый `Thread.CurrentThread.CurrentCulture.DateTimeFormat` свойство. Дополнительные сведения см. в разделе <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>. Другие перегрузки <xref:System.DateTime.ToString%2A> метод позволяют задать язык и региональные параметры, соответствующее которым форматирование для использования и определить шаблон выходные данные из <xref:System.DateTime> значение.  
  
   
  
## Examples  
 В следующем примере показано как строковое представление <xref:System.DateTime> значения, возвращенного <xref:System.DateTime.ToString> метод зависит от текущего языка и региональных параметров потока. Он изменяет текущий язык и региональные параметры потока с en US, fr-FR, ja-JP. и в каждом случае вызывает <xref:System.DateTime.ToString> метод для возврата строковое представление значения даты и времени, с помощью этого языка и региональных параметров.  
  
 [!code-csharp[System.DateTime.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/ToString1.cs#1)]
 [!code-vb[System.DateTime.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/ToString1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Дата и время находятся за пределами диапазона дат, поддерживаемого календарем, принятым для текущего языка и региональных параметров.</exception>
        <block subset="none" type="usage">
          <para>
            <see cref="M:System.DateTime.ToString" /> Метод возвращает строковое представление даты и времени в календаре текущего языка и региональных параметров. Если значение текущей <see cref="T:System.DateTime" /> экземпляре: раньше, чем <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> или более поздней, чем <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, метод создает <see cref="T:System.ArgumentOutOfRangeException" />. Ниже приведен пример. Предпринимается попытка форматировать дату, которая находится за пределами диапазона <see cref="T:System.Globalization.HijriCalendar" /> класса, если текущий язык — арабский (Сирия).  
  
 [!code-csharp[System.DateTime.ToString.ArgumentOutOfRangeException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception2.cs#2)]
 [!code-vb[System.DateTime.ToString.ArgumentOutOfRangeException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/datetime.tostring.argumentoutofrangeexception2.vb#2)]</para>
        </block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Объект, предоставляющий сведения о форматировании для определенного языка и региональных параметров.</param>
        <summary>Преобразует значение текущего объекта <see cref="T:System.DateTime" /> в эквивалентное ему строковое представление с использованием указанных сведений о форматировании, связанных с языком и региональными параметрами.</summary>
        <returns>Строковое представление значения текущего объекта <see cref="T:System.DateTime" />, заданное параметром <paramref name="provider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Значение текущего <xref:System.DateTime> объекты форматируются с помощью спецификатора формата времени («G»), который форматирует вывод с использованием шаблона короткого формата даты и длинный шаблон времени и даты.  
  
 Формат короткого формата даты и полный шаблон времени определяется `provider` параметра. `provider` Параметр может быть любым из следующих действий:  
  
-   Объект <xref:System.Globalization.CultureInfo> , представляющий язык и региональные параметры, соглашения о форматировании которых должны быть отражены в возвращаемую строку. <xref:System.Globalization.DateTimeFormatInfo> Объект, возвращаемый <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> свойство определяет формат возвращаемой строки.  
  
-   Объект <xref:System.Globalization.DateTimeFormatInfo> объект, который определяет формат данных даты и времени.  
  
-   Пользовательский объект, который реализует <xref:System.IFormatProvider> интерфейса. Его <xref:System.IFormatProvider.GetFormat%2A> возвращает <xref:System.Globalization.DateTimeFormatInfo> объект, предоставляющий сведения о форматировании.  
  
 Если `provider` — `null`, <xref:System.Globalization.DateTimeFormatInfo> используется объект, связанный с текущей культурой. Дополнительные сведения см. в разделе <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Следующий пример отображает строковое представление даты и времени с помощью <xref:System.Globalization.CultureInfo> объекты, которые представляют пять различных языков и региональных параметров.  
  
 [!code-csharp[System.DateTime.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/ToString4.cs#3)]
 [!code-vb[System.DateTime.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/ToString4.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Дата и время находятся за пределами диапазона дат, поддерживаемых календарем, который используется <paramref name="provider" />.</exception>
        <block subset="none" type="usage">
          <para>
            <see cref="M:System.DateTime.ToString(System.IFormatProvider)" /> Метод возвращает строковое представление даты и времени в календаре, языка и региональных параметров, представленных <paramref name="provider" /> параметра. Его календарь определяется <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> свойство. Если значение текущей <see cref="T:System.DateTime" /> экземпляре: раньше, чем <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> или более поздней, чем <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, метод создает <see cref="T:System.ArgumentOutOfRangeException" />. Ниже приведен пример. Предпринимается попытка форматировать дату, которая находится за пределами диапазона <see cref="T:System.Globalization.JapaneseCalendar" /> класса.  
  
 [!code-csharp[System.DateTime.ToString.ArgumentOutOfRangeException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception1.cs#1)]
 [!code-vb[System.DateTime.ToString.ArgumentOutOfRangeException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/datetime.tostring.argumentoutofrangeexception1.vb#1)]</para>
        </block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">Строка стандартного или пользовательского формата даты и времени.</param>
        <summary>Преобразует значение текущего объекта <see cref="T:System.DateTime" /> в эквивалентное строковое представление с использованием указанного формата и соглашений о форматировании, принятых для текущего языка и региональных параметров.</summary>
        <returns>Строковое представление значения текущего объекта <see cref="T:System.DateTime" />, заданное параметром <paramref name="format" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.ToString%28System.String%29> Метод возвращает строковое представление значения даты и времени в определенном формате, который использует соглашения о форматировании текущего языка и региональных параметров; Дополнительные сведения см. в разделе <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>.  
  
 `format` Параметр должен содержать описатель символов в одном формате (см. [стандартной строки даты и времени формат](~/docs/standard/base-types/standard-date-and-time-format-strings.md)) или шаблона пользовательского формата (см. [пользовательские строки даты и времени формат](~/docs/standard/base-types/custom-date-and-time-format-strings.md) ), определяющий формат возвращаемой строки. Если `format` — `null` или является пустой строкой, Описатель общего формата «G» используется.  
  
 Некоторые варианты использования этого метода относятся:  
  
-   Начало строки, которая отображает дату и время в формате времени и короткого формата даты для текущего языка и региональных параметров. Чтобы сделать это, используйте описатель формата «G».  
  
-   Получение строки, которая содержит месяц и год. Для этого используется строка формата «Мм/гггг». Строка формата использует разделитель компонентов даты для текущего языка и региональных параметров.  
  
-   Получение строки, которая содержит дату и время в определенном формате. Например «мм/дд/yyyyHH:mm» строка формата отображает строки даты и времени в фиксированном формате, например «19 / / 03 / / 2013 18:06». Используется строка формата «/» в качестве разделителя фиксированной даты независимо от региональных параметров.  
  
-   Получение дату в сжатый формат, может использоваться для сериализации Строка даты. Например строка формата «ГГГГММДД» отображает четырехзначным годом и двузначным месяцем и двузначным днем без разделителя даты.  
  
 В следующем примере этих трех строк формата для отображения значения даты и времени с использованием правил языков и региональных параметров en US и fr-FR.  
  
 [!code-csharp[System.DateTime.ToString#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/tostring5.cs#5)]
 [!code-vb[System.DateTime.ToString#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/tostring5.vb#5)]  
  
   
  
## Examples  
 В следующем примере используется каждая из стандартных строк даты и времени формат и выбор пользовательских строк даты и времени формат, чтобы отобразить строковое представление <xref:System.DateTime> значение. Региональные параметры текущего потока в примере — en US.  
  
 [!code-csharp[System.DateTime.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/ToString2.cs#2)]
 [!code-vb[System.DateTime.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/ToString2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">Длина параметра <paramref name="format" /> равна 1, но он не является одним из символов описания формата, определенных для объекта <see cref="T:System.Globalization.DateTimeFormatInfo" />.  
  
 - или -  
  
 Параметр <paramref name="format" /> не содержит допустимый пользовательский шаблон формата.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Дата и время находятся за пределами диапазона дат, поддерживаемого календарем, принятым для текущего языка и региональных параметров.</exception>
        <block subset="none" type="usage">
          <para>
            <see cref="M:System.DateTime.ToString(System.String)" /> Метод возвращает строковое представление даты и времени в календаре текущего языка и региональных параметров. Если значение текущей <see cref="T:System.DateTime" /> экземпляре: раньше, чем <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> или более поздней, чем <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, метод создает <see cref="T:System.ArgumentOutOfRangeException" />. Ниже приведен пример. Предпринимается попытка форматировать дату, которая находится за пределами диапазона <see cref="T:System.Globalization.HebrewCalendar" /> класса, если текущий язык — иврит (Израиль).  
  
 [!code-csharp[System.DateTime.ToString.ArgumentOutOfRangeException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception3.cs#3)]
 [!code-vb[System.DateTime.ToString.ArgumentOutOfRangeException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/datetime.tostring.argumentoutofrangeexception3.vb#3)]</para>
        </block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(System::String ^ format, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">Строка стандартного или пользовательского формата даты и времени.</param>
        <param name="provider">Объект, предоставляющий сведения о форматировании для определенного языка и региональных параметров.</param>
        <summary>Преобразует значение текущего объекта <see cref="T:System.DateTime" /> в эквивалентное ему строковое представление с использованием указанного формата и сведений об особенностях формата для данного языка и региональных параметров.</summary>
        <returns>Строковое представление значения текущего объекта <see cref="T:System.DateTime" />, заданное параметрами <paramref name="format" /> и <paramref name="provider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `format` Параметр может содержать спецификатор символов в одном формате (см. [стандартной строки даты и времени формат](~/docs/standard/base-types/standard-date-and-time-format-strings.md)) или шаблона пользовательского формата (см. [пользовательские строки даты и времени формат](~/docs/standard/base-types/custom-date-and-time-format-strings.md)). Если `format` — `null` или пустая строка ("»), описатель стандартного формата «G» используется.  
  
 `provider` Параметр определяет шаблон, который соответствует к спецификаторы стандартных форматов, а также символы и имена компонентов даты и времени. `provider` Параметр может быть любым из следующих действий:  
  
-   Объект <xref:System.Globalization.CultureInfo> , представляющий язык и региональные параметры, соглашения о форматировании которых должны быть отражены в возвращаемую строку. <xref:System.Globalization.DateTimeFormatInfo> Объект, возвращаемый <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> свойство определяет формат возвращаемой строки.  
  
-   Объект <xref:System.Globalization.DateTimeFormatInfo> объект, который определяет формат данных даты и времени.  
  
-   Пользовательский объект, который реализует <xref:System.IFormatProvider> интерфейса. Его <xref:System.IFormatProvider.GetFormat%2A> возвращает <xref:System.Globalization.DateTimeFormatInfo> объект, предоставляющий сведения о форматировании.  
  
 Если `provider` — `null`, <xref:System.Globalization.DateTimeFormatInfo> связанную с текущим языком и региональными параметрами, используется. Дополнительные сведения см. в разделе <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 В следующем примере каждая строка формата времени стандартный формат даты для отображения строковое представление даты и времени для четырех разных языков и региональных параметров.  
  
 [!code-csharp[System.DateTime.ToString#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/tostring3.cs#4)]
 [!code-vb[System.DateTime.ToString#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/tostring3.vb#4)]  
  
 В следующем примере демонстрируется различные способы форматирования <xref:System.DateTime> с использованием инвариантный <xref:System.Globalization.DateTimeFormatInfo>.  
  
 [!code-cpp[Classic DateTime.ToString2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic DateTime.ToString2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic DateTime.ToString2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic DateTime.ToString2 Example/CS/source.cs#1)]
 [!code-vb[Classic DateTime.ToString2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic DateTime.ToString2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">Длина параметра <paramref name="format" /> равна 1, но он не является одним из символов описания формата, определенных для объекта <see cref="T:System.Globalization.DateTimeFormatInfo" />.  
  
 - или -  
  
 Параметр <paramref name="format" /> не содержит допустимый пользовательский шаблон формата.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Дата и время находятся за пределами диапазона дат, поддерживаемых календарем, который используется <paramref name="provider" />.</exception>
        <block subset="none" type="usage">
          <para>
            <see cref="M:System.DateTime.ToString(System.String,System.IFormatProvider)" /> Метод возвращает строковое представление даты и времени в календарь, используемый <paramref name="provider" /> параметра. Его календарь определяется <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> свойство. Если значение текущей <see cref="T:System.DateTime" /> экземпляре: раньше, чем <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> или более поздней, чем <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, метод создает <see cref="T:System.ArgumentOutOfRangeException" />. Ниже приведен пример. Предпринимается попытка форматировать дату, которая находится за пределами диапазона <see cref="T:System.Globalization.UmAlQuraCalendar" /> класса.  
  
 [!code-csharp[System.DateTime.ToString.ArgumentOutOfRangeException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception4.cs#4)]
 [!code-vb[System.DateTime.ToString.ArgumentOutOfRangeException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/datetime.tostring.argumentoutofrangeexception4.vb#4)]</para>
        </block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="ToUniversalTime">
      <MemberSignature Language="C#" Value="public DateTime ToUniversalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime ToUniversalTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToUniversalTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUniversalTime () As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime ToUniversalTime();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Преобразует значение текущего объекта <see cref="T:System.DateTime" /> во время UTC.</summary>
        <returns>Объект, свойство <see cref="P:System.DateTime.Kind" /> которого имеет значение <see cref="F:System.DateTimeKind.Utc" />, а значение является либо временем в формате UTC, эквивалентным значению текущего объекта <see cref="T:System.DateTime" />, либо значением <see cref="F:System.DateTime.MaxValue" />, если преобразованное значение слишком велико для представления объектом <see cref="T:System.DateTime" />, либо значением <see cref="F:System.DateTime.MinValue" />, если преобразованное значение слишком мало для представления объектом <see cref="T:System.DateTime" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Местное время минус смещение относительно UTC равно по Гринвичу (UTC). Дополнительные сведения о смещении UTC см. в разделе <xref:System.TimeZone.GetUtcOffset%2A?displayProperty=nameWithType>. Преобразование также учитывается летнее время правило, которое применяется ко времени, представленных текущим <xref:System.DateTime> объекта.  
  
> [!IMPORTANT]
>  На [!INCLUDE[winxp](~/includes/winxp-md.md)] систем, <xref:System.DateTime.ToUniversalTime%2A> метод распознает только текущее правило коррекции при преобразовании из местного времени в формате UTC. В результате преобразование для периодов, когда текущее правило коррекции еще в силу может не отражать точной разница между местным временем и временем UTC.  
  
 Начиная с .NET Framework версии 2.0, значение, возвращаемое <xref:System.DateTime.ToUniversalTime%2A> метод определяется <xref:System.DateTime.Kind%2A> текущего элемента <xref:System.DateTime> объекта. В следующей таблице описаны возможные результаты.  
  
|Тип|Результаты|  
|----------|-------------|  
|<xref:System.DateTimeKind.Utc>|Преобразование не выполняется.|  
|<xref:System.DateTimeKind.Local>|Текущий <xref:System.DateTime> объект преобразуется в формат UTC.|  
|<xref:System.DateTimeKind.Unspecified>|Текущий <xref:System.DateTime> предполагается, что объект является местное время, а преобразование выполняется как если бы <xref:System.DateTime.Kind%2A> были <xref:System.DateTimeKind.Local>.|  
  
> [!NOTE]
>  <xref:System.DateTime.ToUniversalTime%2A> Метод преобразует <xref:System.DateTime> значение из местного времени в формате UTC. Чтобы преобразовать время в зоне местное время в формате UTC, используйте <xref:System.TimeZoneInfo.ConvertTimeToUtc%28System.DateTime%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> метод. Чтобы преобразовать время, смещение от времени UTC которого известна, используйте <xref:System.DateTimeOffset.ToUniversalTime%2A> метод.  
  
 Если значения даты и времени является неоднозначным, этот метод предполагает, что это стандартное время. (Неоднозначное время — это, можно сопоставить стандартное время или летнее время в местном часовом поясе) Если значение экземпляра даты и времени является недопустимым временем, этот метод просто вычитает местное время от времени UTC местного часового пояса для возврата времени UTC. (Недопустимое время —, не существует из-за применения правил коррекции для летнего времени.)  
  
   
  
## Examples  
 В следующем примере демонстрируется <xref:System.DateTime.ToUniversalTime%2A> метод.  
  
 [!code-cpp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CS/class1.cs#1)]
 [!code-vb[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/VB/class1.vb#1)]  
  
 В следующем примере используется <xref:System.DateTime.SpecifyKind%2A> метод, чтобы продемонстрировать, как <xref:System.DateTime.Kind%2A> влияет на то <xref:System.DateTime.ToLocalTime%2A> и <xref:System.DateTime.ToUniversalTime%2A> методы преобразования.  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>
            <see cref="M:System.DateTime.ToUniversalTime" /> Метод иногда используется для преобразования местного времени в формате UTC. <see cref="M:System.DateTime.ToLocalTime" /> Затем вызывается метод для восстановления исходного местное время. Тем не менее если исходное время представляет недопустимое время в местном часовом поясе, два значения местного времени не будут равны. Дополнительные сведения и пример см. в разделе <see cref="M:System.DateTime.ToLocalTime" /> метод.  
  
 На [!INCLUDE[winxp](~/includes/winxp-md.md)] систем, <see cref="M:System.DateTime.ToUniversalTime" /> метод распознает только текущее правило коррекции для местного часового пояса он применяется ко всем датам, включая даты низкого уровня (т. е дат, предшествующих дату начала текущего коррекции правило). Приложения, запущенные на [!INCLUDE[winxp](~/includes/winxp-md.md)] , требующих Исторически точные локальной даты и вычисления времени должен обойти это поведение, используя <see cref="M:System.TimeZoneInfo.FindSystemTimeZoneById(System.String)" /> метод для извлечения <see cref="T:System.TimeZoneInfo" /> объекта, соответствующий местный часовой пояс и вызова его <see cref="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)" /> метод.  
  
 В следующем примере показано различие между <see cref="M:System.DateTime.ToUniversalTime" /> и <see cref="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)" /> методы [!INCLUDE[winxp](~/includes/winxp-md.md)] системы в США. тихоокеанском стандартном часовом поясе США. Сначала вызывает метод с двумя применяются текущее правило коррекции часового пояса (который вступает в силу с 2007) в дату в 2006 г. Предоставляет текущее правило коррекции для перехода на летнее время на второе воскресенье марта; предыдущее правило, которая была действующей в 2006 г. для перехода на летнее время на первое воскресенье апреля. Третий вызов метода точно выполняет исторических Дата и время преобразования.  
  
 [!code-csharp[System.DateTime.ToUniversalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.touniversaltime/cs/touniversaltime.cs#1)]
 [!code-vb[System.DateTime.ToUniversalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.touniversaltime/vb/touniversaltime.vb#1)]</para>
        </block>
        <altmember cref="M:System.DateTime.ToLocalTime" />
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public bool TryFormat (Span&lt;char&gt; destination, out int charsWritten, ReadOnlySpan&lt;char&gt; format = null, IFormatProvider provider = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryFormat(valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFormat (destination As Span(Of Char), ByRef charsWritten As Integer, Optional format As ReadOnlySpan(Of Char) = null, Optional provider As IFormatProvider = null) As Boolean" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" />
        <Parameter Name="charsWritten" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <param name="charsWritten">To be added.</param>
        <param name="format">To be added.</param>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Преобразовывает указанное строковое представление даты и времени в его эквивалент <see cref="T:System.DateTime" /> и возвращает значение, позволяющее определить успешность преобразования.</summary>
        <altmember cref="Overload:System.DateTime.Parse" />
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.ReadOnlySpan{System.Char},System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.String,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">Строка, содержащая дату и время, которые нужно преобразовать.</param>
        <param name="result">После возврата из этого метода содержит значение <see cref="T:System.DateTime" />, эквивалентное дате и времени, заданным в параметре <c>s</c>, если преобразование прошло успешно, или значение <see cref="F:System.DateTime.MinValue" />, если преобразование выполнить не удалось. Преобразование не удается выполнить, если значение параметра <c>s</c> равно <see langword="null" />, является пустой строкой ("") или не содержит допустимого строкового представления даты и времени. Этот параметр передается неинициализированным.</param>
        <summary>Преобразовывает указанное строковое представление даты и времени в его эквивалент <see cref="T:System.DateTime" /> и возвращает значение, позволяющее определить успешность преобразования.</summary>
        <returns>
          Значение <see langword="true" />, если параметр <paramref name="s" /> успешно преобразован, в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType> Аналогичен методу <xref:System.DateTime.Parse%28System.String%29?displayProperty=nameWithType> метода, за исключением того, что <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29> метод не вызывает исключение при сбое преобразования.  
  
 Строка `s` анализируется с использованием сведений о форматировании в текущем <xref:System.Globalization.DateTimeFormatInfo> объекта, который неявно предоставляется свойством языка и региональных параметров текущего потока.  
  
 Этот метод пытается игнорировать нераспознанные данные, если это возможно и заполняет отсутствующий месяц, день или года с текущей даты. Если `s` содержит только дату, без времени, этот метод предполагает время 12:00 (полночь). Если `s` включает компонент даты с двумя цифрами, оно преобразуется в год в зависимости от значения текущего календаря текущего языка и региональных параметров <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> свойство. Все начальные, внутренние и конечные пробелы в `s` игнорируется. Дата и время могут быть заключены между парой начальных и конечных символов («#», U + 0023) и может быть после которого идет с одним или более символов NULL (U + 0000).  
  
 Поскольку <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType> метод пытается обработать строковое представление даты и времени, используя правила форматирования текущей культуры, попытка анализа одной строки для разных языков и региональных параметров может завершиться ошибкой или возвращать различные результаты. Если определенные формат даты и времени будет анализироваться для разных языковых стандартов, используйте <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> метод или одну из перегрузок <xref:System.DateTime.TryParseExact%2A> метод и задать описатель формата.  
  
 Если `s` является строковым представлением день високосным високосного года в текущем календаре анализирует метод `s` успешно. Если `s` строковое представление дня в не високосный год високосным в текущего календаря текущего языка и региональных параметров, операция анализа завершается неудачно, а метод возвращает `false`.  
  
 Если `s` содержит без сведений о часовом поясе, `result` содержит <xref:System.DateTime> которого <xref:System.DateTime.Kind%2A> свойство <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> когда этот метод возвращает. Если анализируемая строка содержит сведения о часовом поясе, `result` содержит <xref:System.DateTime> которого <xref:System.DateTime.Kind%2A> свойство <xref:System.DateTimeKind.Local?displayProperty=nameWithType> когда этот метод возвращает.  
  
   
  
## Examples  
 В следующем примере передается номер строки даты и времени для <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType> метод.  
  
 [!code-cpp[System.DateTime.TryParse#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.TryParse/cpp/datetime.tryparse1.cpp#1)]
 [!code-csharp[System.DateTime.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParse/cs/TryParse1.cs#1)]
 [!code-vb[System.DateTime.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParse/vb/TryParse1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Форматирование влияют свойства текущего <see cref="T:System.Globalization.DateTimeFormatInfo" /> объекта, который по умолчанию являются производными от **язык и региональные стандарты** элемента панели управления. <see cref="Overload:System.DateTime.TryParse" /> Метод может неожиданно завершиться ошибкой и возвращать <see langword="False" /> если текущего <see cref="P:System.Globalization.DateTimeFormatInfo.DateSeparator" /> и <see cref="P:System.Globalization.DateTimeFormatInfo.TimeSeparator" /> задано то же значение.</para>
        </block>
        <altmember cref="Overload:System.DateTime.Parse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, IFormatProvider provider, System.Globalization.DateTimeStyles styles, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), provider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, IFormatProvider ^ provider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="styles">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, IFormatProvider provider, System.Globalization.DateTimeStyles styles, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, provider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, IFormatProvider ^ provider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">Строка, содержащая дату и время, которые нужно преобразовать.</param>
        <param name="provider">Объект, который предоставляет сведения о форматировании параметра <c>s</c> в зависимости от языка и региональных параметров.</param>
        <param name="styles">Побитовая комбинация значений перечисления, которая определяет, как интерпретировать проанализированную дату по отношению к текущему часовому поясу или текущей дате. Обычно указывается значение <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <param name="result">После возврата из этого метода содержит значение <see cref="T:System.DateTime" />, эквивалентное дате и времени, заданным в параметре <c>s</c>, если преобразование прошло успешно, или значение <see cref="F:System.DateTime.MinValue" />, если преобразование выполнить не удалось. Преобразование не удается выполнить, если значение параметра <c>s</c> равно <see langword="null" />, является пустой строкой ("") или не содержит допустимого строкового представления даты и времени. Этот параметр передается неинициализированным.</param>
        <summary>Преобразует заданное строковое представление даты и времени в его эквивалент <see cref="T:System.DateTime" />, используя указанную информацию о форматировании, связанную с языком и региональными параметрами, и возвращает значение, которое показывает успешность преобразования.</summary>
        <returns>
          Значение <see langword="true" />, если параметр <paramref name="s" /> успешно преобразован, в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> Метод анализирует строку, которая может содержать сведения о дате, времени и часового пояса. Это похоже на <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> метода, за исключением того, что <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType> метод не вызывает исключение при сбое преобразования.  
  
 Этот метод пытается игнорировать нераспознанные данные и синтаксический анализ `s` полностью. Если `s` содержит время, но нет даты, метод по умолчанию заменяет текущую дату или если `styles` включает <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault> флаг, он подставляет `DateTime.Date.MinValue`. Если `s` содержит дату, но нет времени 12:00, полночь используется как время по умолчанию. Если дата присутствует, но его компонент года включает в себя только две цифры, он преобразуется в году в `provider` параметра текущий календарь основан на значение <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> свойства. Все начальные, внутренние и конечные пробелы в `s` игнорируются. Дата и время могут быть заключены между парой начальных и конечных символов («#», U + 0023) и может быть после которого идет с одним или более символов NULL (U + 0000).  
  
 Конкретные действительные форматы даты элементы времени, а также имена и символы, используемые в даты и времени, определяются `provider` параметр, который может быть любым из следующих действий:  
  
-   Объект <xref:System.Globalization.CultureInfo> , представляющий язык и региональные параметры, форматирование которого используется в `s` параметра. <xref:System.Globalization.DateTimeFormatInfo> Объект, возвращаемый <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> свойство определяет форматирования, используемые в `s`.  
  
-   Объект <xref:System.Globalization.DateTimeFormatInfo> объект, определяющий форматирования, используемые в `s`.  
  
-   Пользовательская реализация интерфейса <xref:System.IFormatProvider>. Его <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> возвращает <xref:System.Globalization.DateTimeFormatInfo> объект, определяющий форматирования, используемые в `s`.  
  
 Если значением параметра `provider` является `null`, используется текущий язык и региональные параметры.  
  
 Если `s` является строковым представлением день високосным високосного года в текущем календаре анализирует метод `s` успешно. Если `s` является строковым представлением день високосным в не високосного года в текущем календаре из `provider`, операция анализа завершается неудачно, а метод возвращает `false`.  
  
 `styles` Параметр определяет точную реализацию анализируемой строке и как он должен обрабатывать операции синтаксического анализа. Он может быть один или несколько членов <xref:System.Globalization.DateTimeStyles> перечисления, как описано в следующей таблице.  
  
|Элемент параметра DateTimeStyles|Описание:|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Выполняет синтаксический анализ `s` и, если необходимо, преобразует его в формат UTC. Если `s` включает смещение часового пояса, или если `s` содержит не данные о часовом поясе, но `styles` включает <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> флаг, метод выполняет синтаксический анализ строки, вызовы <xref:System.DateTime.ToUniversalTime%2A> для преобразования возвращаемого <xref:System.DateTime> значение в формате UTC и задает <xref:System.DateTime.Kind%2A> свойства <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Если `s` указывает, что он представляет время в формате UTC или если `s` не содержит сведения о часовом поясе, но `styles` включает <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> флаг, метод выполняет синтаксический анализ строки, выполняет преобразование часового пояса в возвращенном <xref:System.DateTime> значение, а свойству <xref:System.DateTime.Kind%2A> свойства <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Во всех остальных случаях флаг не оказывает влияния.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Несмотря на допустимость, это значение игнорируется. Внутренние пробелы допустимо использовать в элементах даты и времени из `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Несмотря на допустимость, это значение игнорируется. Начальные пробелы допустимо использовать в элементах даты и времени из `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Несмотря на допустимость, это значение игнорируется. Конечные пробелы допустимо использовать в элементах даты и времени из `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Указывает, что `s` может содержать начальные, внутренние и конечные пробелы. Это поведение установлено по умолчанию. Его нельзя переопределить, указав более строгий <xref:System.Globalization.DateTimeStyles> значение перечисления, например <xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Указывает, что если `s` отсутствуют данные о часовом поясе, предполагается представляет местное время. Если не <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> флаг представлен <xref:System.DateTime.Kind%2A> свойство возвращаемого <xref:System.DateTime> имеет значение <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Указывает, что если `s` отсутствуют данные о часовом поясе, предполагается для представления в формате UTC. Если не <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> флаг отсутствует, этот метод преобразует возвращаемый <xref:System.DateTime> значение от времени UTC в местное время, а также задает его <xref:System.DateTime.Kind%2A> свойства <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.None>|Несмотря на допустимость, это значение игнорируется.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Для строк, содержащих сведения о часовом поясе, пытается предотвратить преобразование строки даты и времени для <xref:System.DateTime> значение с его <xref:System.DateTime.Kind%2A> свойство <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Как правило, такая строка создается путем вызова <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> метод, с помощью описателей стандартного формата «o», «r» или «u».|  
  
 Если `s` содержит без сведений о часовом поясе, <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> возвращает <xref:System.DateTime> которого <xref:System.DateTime.Kind%2A> свойство <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> Если `styles` флаг указывает, в противном случае. Если `s` включает в себя часовой пояс или сведения о смещении часового пояса, <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> метод выполняет какие-либо необходимое время преобразования и возвращает одно из следующих действий:  
  
-   Объект <xref:System.DateTime> , Дата и время отражают местное время, для которых значение <xref:System.DateTime.Kind%2A> свойство <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.  
  
-   Либо, если `styles` включает <xref:System.Globalization.DateTimeStyles.AdjustToUniversal> флаг <xref:System.DateTime> , Дата и время отражают UTC, для которых значение <xref:System.DateTime.Kind%2A> свойство <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
 Это поведение можно переопределить с помощью <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> флаг.  
  
## <a name="parsing-custom-cultures"></a>Синтаксический анализ пользовательские языки и региональные параметры  
 При синтаксическом анализе строки даты и времени, созданный для пользовательского языка и региональных параметров, используйте <xref:System.DateTime.TryParseExact%2A> вместо метода <xref:System.DateTime.TryParse%2A> метод, чтобы повысить вероятность того, что будет выполнена успешно операция синтаксического анализа. Строки даты и времени пользовательского языка и региональных параметров может быть сложным и сложной для анализа. <xref:System.DateTime.TryParse%2A> Метод пытается выполнить синтаксический анализ строки с помощью нескольких неявных шаблонов анализа, каждый из которых может завершиться ошибкой. Напротив <xref:System.DateTime.TryParseExact%2A> метода необходимо явно назначить один или несколько шаблонов анализа, которые, скорее всего, для успешного выполнения.  
  
 Дополнительные сведения о пользовательских языков и региональных параметров см. в разделе <xref:System.Globalization.CultureAndRegionInfoBuilder?displayProperty=nameWithType> класса.  
  
   
  
## Examples  
 В следующем примере демонстрируется <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> метод.  
  
 [!code-csharp[System.DateTime.TryParse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParse/cs/tryparse2.cs#2)]
 [!code-vb[System.DateTime.TryParse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParse/vb/tryparse2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> не является допустимым значением <see cref="T:System.Globalization.DateTimeStyles" />.  
  
 - или -  
  
 Параметр <paramref name="styles" /> содержит недопустимое сочетание значений <see cref="T:System.Globalization.DateTimeStyles" /> (например, и <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" />, и <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />).</exception>
        <exception cref="T:System.NotSupportedException">
          Параметр <paramref name="provider" /> имеет нейтральные региональные параметры и не может использоваться в операции анализа.</exception>
        <block subset="none" type="usage">
          <para>Форматирование влияют свойства текущего <see cref="T:System.Globalization.DateTimeFormatInfo" /> объекта, который является результатом <paramref name="provider" /> параметра. <see cref="Overload:System.DateTime.TryParse" /> Метод может неожиданно завершиться ошибкой и возвращать <see langword="False" /> если текущего <see cref="P:System.Globalization.DateTimeFormatInfo.DateSeparator" /> и <see cref="P:System.Globalization.DateTimeFormatInfo.TimeSeparator" /> задано то же значение.</para>
        </block>
        <altmember cref="Overload:System.DateTime.Parse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Преобразует заданное строковое представление даты и времени в его эквивалент <see cref="T:System.DateTime" />. Формат строкового представления должен полностью соответствовать заданному формату. Метод возвращает значение, указывающее, успешно ли выполнено преобразование.</summary>
        <altmember cref="Overload:System.DateTime.ParseExact" />
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; s, ReadOnlySpan&lt;char&gt; format, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; s, ReadOnlySpan&lt;char&gt; format, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="format">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="style">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As ReadOnlySpan(Of Char), formats As String(), provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; s, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="formats">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="style">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string s, string format, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string s, string format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As String, format As String, provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ s, System::String ^ format, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">Строка, содержащая дату и время, которые нужно преобразовать.</param>
        <param name="format">Необходимый формат параметра <c>s</c>.</param>
        <param name="provider">Объект, который предоставляет сведения о форматировании параметра <c>s</c> в зависимости от языка и региональных параметров.</param>
        <param name="style">Побитовая комбинация одного или нескольких значений перечисления, которые указывают на разрешенный формат параметра <c>s</c>.</param>
        <param name="result">После возврата из этого метода содержит значение <see cref="T:System.DateTime" />, эквивалентное дате и времени, заданным в параметре <c>s</c>, если преобразование прошло успешно, или значение <see cref="F:System.DateTime.MinValue" />, если преобразование выполнить не удалось. Преобразование выполнить не удается, если значением параметра <c>s</c> или <c>format</c> является <see langword="null" /> либо пустая строка или не является дата и время, соответствующие шаблону, заданному в параметре <c>format</c>. Этот параметр передается неинициализированным.</param>
        <summary>Преобразует заданное строковое представление даты и времени в его эквивалент <see cref="T:System.DateTime" />, используя заданный формат, указанные сведения о форматировании, связанные с языком и региональными параметрами, а также стиль. Формат строкового представления должен полностью соответствовать заданному формату. Метод возвращает значение, указывающее, успешно ли выполнено преобразование.</summary>
        <returns>
          Значение <see langword="true" />, если параметр <paramref name="s" /> успешно преобразован; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> Метод анализирует строковое представление даты, которое должно быть в формате, заданном параметром `format` параметр. Это похоже на <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> метода, за исключением того, что <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> метод не вызывает исключение при сбое преобразования.  
  
 `s` Параметр содержит дату и время для анализа и должно быть в формате, заданном параметром `format` параметр. Если дата, время и часовой пояс элементы присутствуют в `s`, они должны отображаться в порядке, заданном свойством `format`. Если `format` определяет дату без элемента времени и синтаксический анализ операция завершилась успешно, итоговый <xref:System.DateTime> значение имеет время, соответствующее полуночи (00: 00:00). Если `format` определяет время, ни один элемент даты и синтаксический анализ операция завершается успешно, полученный <xref:System.DateTime> значение по умолчанию имеет дату `DateTime.Now.Date`, или он имеет дату `DateTime.MinValue.Date` Если `styles` включает <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> флаг. `style` Параметр определяет, является ли `s` параметр может содержать начальные, внутренние и конечные пробелы.  
  
 Если `s` содержит без сведений о часовом поясе, <xref:System.DateTime.Kind%2A> свойство возвращаемого <xref:System.DateTime> объект <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Это поведение можно изменить с помощью <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> флаг, который возвращает <xref:System.DateTime> которого <xref:System.DateTime.Kind%2A> свойство <xref:System.DateTimeKind.Local?displayProperty=nameWithType>, или с помощью <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> и <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> флаги, который возвращает <xref:System.DateTime> которого <xref:System.DateTime.Kind%2A> свойство <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Если s содержит сведения о часовом поясе, время преобразуется в местное время, при необходимости и <xref:System.DateTime.Kind%2A> свойство возвращаемого <xref:System.DateTime> , присваивается значение <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Это поведение можно изменить с помощью <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> не преобразования в местное время по Гринвичу (UTC) и установите флаг <xref:System.DateTime.Kind%2A> свойства <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
 `format` Параметр содержит шаблон, соответствующий ожидаемому формату `s` параметра. Шаблон в `format` параметр состоит из одного или нескольких настраиваемых описателей формата из [пользовательские строки даты и времени формат](~/docs/standard/base-types/custom-date-and-time-format-strings.md) таблицы или один стандартный описатель формата, который определяет предопределенному шаблону из [Стандартной строки даты и времени формат](~/docs/standard/base-types/standard-date-and-time-format-strings.md) таблицы.  
  
 Если не использовать разделители даты или времени в шаблона пользовательского формата, использующие инвариантный язык для `provider` параметр и широкую форму каждый настраиваемый описатель формата. Например если вы хотите задать в шаблоне часы, укажите широкую форму, «HH» вместо более узкой формы «H».  
  
> [!NOTE]
>  Не требует от, `s` соответствует единый формат для успешного выполнения операции синтаксического анализа, вы можете вызвать <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> метод и указать несколько разрешенных форматов. Это делает скорее всего, для успешного выполнения операции синтаксического анализа.  
  
 Определенная дата и время символы и строки (например, названия дней недели на определенном языке), используемые в `s` определяются `provider` параметра, как точный формат из `s` Если `format` — это стандартный формат Описатель строка. `provider` Параметр может быть любым из следующих действий:  
  
-   Объект <xref:System.Globalization.CultureInfo> , представляющий язык и региональные параметры, используемые для интерпретации `s`. <xref:System.Globalization.DateTimeFormatInfo> Объект, возвращаемый его <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> свойство определяет символы и форматирование в `s`.  
  
-   Объект <xref:System.Globalization.DateTimeFormatInfo> объект, который определяет формат данных даты и времени.  
  
-   Настраиваемый <xref:System.IFormatProvider> реализация которого <xref:System.IFormatProvider.GetFormat%2A> метод возвращает либо <xref:System.Globalization.CultureInfo> объекта или <xref:System.Globalization.DateTimeFormatInfo> объект, предоставляющий сведения о форматировании.  
  
 Если `provider` — `null`, <xref:System.Globalization.CultureInfo> используется объект, соответствующий текущего языка и региональных параметров.  
  
 `styles` Параметр включает один или несколько членов <xref:System.Globalization.DateTimeStyles> перечисления, которые определяют, каким образом и где пробелы не определены в `format` могут присутствовать в `s` и управляют точным поведением операции синтаксического анализа. В следующей таблице описаны как каждый член <xref:System.Globalization.DateTimeStyles> перечисление влияет на работу <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> метод.  
  
|Элемент параметра DateTimeStyles|Описание:|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Выполняет синтаксический анализ `s` и, если необходимо, преобразует его в формат UTC. Если `s` включает смещение часового пояса, или если `s` содержит не данные о часовом поясе, но `styles` включает <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> флаг, метод выполняет синтаксический анализ строки, вызовы <xref:System.DateTime.ToUniversalTime%2A> для преобразования возвращаемого <xref:System.DateTime> значение в формате UTC и задает <xref:System.DateTime.Kind%2A> свойства <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Если `s` указывает, что он представляет время в формате UTC или если `s` не содержит сведения о часовом поясе, но `styles` включает <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> флаг, метод выполняет синтаксический анализ строки, выполняет преобразование часового пояса в возвращенном <xref:System.DateTime> значение, а свойству <xref:System.DateTime.Kind%2A> свойства <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Во всех остальных случаях флаг не оказывает влияния.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Указывает, что пробелы не определены в `format` могут появляться между любой отдельными элементами даты или времени.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Указывает, что пробелы не определены в `format` может находиться в начале `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Указывает, что пробелы не определены в `format` может находиться в конце `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Указывает, что `s` может содержать начальные, внутренние и конечные пробелы, не заданные `format`.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Указывает, что если `s` отсутствуют данные о часовом поясе, предполагается представляет местное время. Если не <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> флаг представлен <xref:System.DateTime.Kind%2A> свойство возвращаемого <xref:System.DateTime> имеет значение <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Указывает, что если `s` отсутствуют данные о часовом поясе, предполагается для представления в формате UTC. Если не <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> флаг отсутствует, этот метод преобразует возвращаемый <xref:System.DateTime> значение от времени UTC в местное время, а также задает его <xref:System.DateTime.Kind%2A> свойства <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|Если `s` содержит время без сведений о даты, дата возвращаемого значения устанавливается `DateTime.MinValue.Date`.|  
|<xref:System.Globalization.DateTimeStyles.None>|`s` Анализируется с помощью значений по умолчанию. Не пробелы, кроме тех, которые указаны в `format` разрешено. Если `s` отсутствует компонент даты, дата возвращаемого <xref:System.DateTime> имеет значение 1/1/0001. Если `s` содержит без сведений о часовом поясе, <xref:System.DateTime.Kind%2A> свойство возвращаемого <xref:System.DateTime> , присваивается значение <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. При наличии сведений о часовом поясе в `s`, время преобразуется в местное время и <xref:System.DateTime.Kind%2A> свойство возвращаемого <xref:System.DateTime> , присваивается значение <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Для строк, содержащих сведения о часовом поясе, пытается предотвратить преобразование в <xref:System.DateTime> значение с его <xref:System.DateTime.Kind%2A> свойство <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. В основном этот флаг запрещает преобразование время в формате UTC в местное время.|  
  
   
  
## Examples  
 В следующем примере демонстрируется <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> метод. Обратите внимание, что строка "5/01/2009 8:30:00» не может быть успешно обработан при `styles` параметр равен <xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType> поскольку начальные пробелы не допускаются `format`. Кроме того, строка «5/01/2009 09:00» не может быть проанализирован с `format` из «мм/дд/yyyyhh:mm», так как строка даты не предшествует номер месяца с нулем в начале, как `format` требует.  
  
 [!code-csharp[System.DateTime.TryParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParseExact/cs/TryParseExact1.cs#1)]
 [!code-vb[System.DateTime.TryParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParseExact/vb/TryParseExact1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> не является допустимым значением <see cref="T:System.Globalization.DateTimeStyles" />.  
  
 - или -  
  
 Параметр <paramref name="styles" /> содержит недопустимое сочетание значений <see cref="T:System.Globalization.DateTimeStyles" /> (например, и <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" />, и <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />).</exception>
        <block subset="none" type="usage">
          <para>В [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], <see cref="Overload:System.DateTime.TryParseExact" /> возвращает <see langword="false" /> Если анализируемая строка содержит компонент часов и обозначение AM/PM, которых нет в соглашении. В [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] и более ранних версиях обозначение AM/PM игнорируется.</para>
        </block>
        <altmember cref="Overload:System.DateTime.ParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As String, formats As String(), provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ s, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">Строка, содержащая дату и время, которые нужно преобразовать.</param>
        <param name="formats">Массив разрешенных форматов <c>s</c>.</param>
        <param name="provider">Объект, предоставляющий сведения о формате параметра <c>s</c> для определенного языка и региональных параметров.</param>
        <param name="style">Побитовая комбинация значений перечисления, которая определяет разрешенный формат параметра <c>s</c>. Обычно указывается значение <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <param name="result">После возврата из этого метода содержит значение <see cref="T:System.DateTime" />, эквивалентное дате и времени, заданным в параметре <c>s</c>, если преобразование прошло успешно, или значение <see cref="F:System.DateTime.MinValue" />, если преобразование выполнить не удалось. Преобразование выполнить не удается, если параметр <c>s</c> или <c>formats</c> имеет значение <see langword="null" />, либо если параметр <c>s</c> или элемент <c>formats</c> является пустой строкой, либо если формат параметра <c>s</c> не в точности соответствует хотя бы одному из шаблонов формата в <c>formats</c>. Этот параметр передается неинициализированным.</param>
        <summary>Преобразует заданное строковое представление даты и времени в его эквивалент <see cref="T:System.DateTime" />, используя заданный массив форматов, указанные сведения о форматировании, связанные с языком и региональными параметрами, и стиль форматирования. Формат представления строки должен полностью соответствовать хотя бы одному заданному формату. Метод возвращает значение, указывающее, успешно ли выполнено преобразование.</summary>
        <returns>
          Значение <see langword="true" />, если параметр <paramref name="s" /> успешно преобразован, в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> Метод анализирует строковое представление даты, не соответствует ни одному из шаблонов, назначенных `formats` параметра. Он аналогичен <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> метода, за исключением <xref:System.DateTime.TryParseExact%2A> метод не вызывает исключение при сбое преобразования.  
  
 `s` Параметр содержит дату и время для синтаксического анализа. Если `s` параметр содержит только время и дата не текущая дата используется, если не `style` включает параметр <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> флаг, в этом случае по умолчанию (`DateTime.Date.MinValue`) используется. Если `s` параметр содержит только дату и нет времени, полночь (00: 00:00) используется. `style` Параметр также определяет, является ли `s` параметр может содержать начальные, конечные или внутренние пробелы символы, отличные от тех, которые допускаются одной из строк формата в `formats`.  
  
 Если `s` содержит без сведений о часовом поясе, <xref:System.DateTime.Kind%2A> свойство возвращаемого <xref:System.DateTime> объект <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Это поведение можно изменить с помощью <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> флаг, который возвращает <xref:System.DateTime> которого <xref:System.DateTime.Kind%2A> свойство <xref:System.DateTimeKind.Local?displayProperty=nameWithType>, или с помощью <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> и <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> флаги, который возвращает <xref:System.DateTime> которого <xref:System.DateTime.Kind%2A> свойство <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Если s содержит сведения о часовом поясе, время преобразуется в местное время, при необходимости и <xref:System.DateTime.Kind%2A> свойство возвращаемого <xref:System.DateTime> , присваивается значение <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Это поведение можно изменить с помощью <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> не преобразования в местное время по Гринвичу (UTC) и установите флаг <xref:System.DateTime.Kind%2A> свойства <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
 `formats` Параметр содержит массив шаблонов, один из которых `s` должен точно соответствовать — операция синтаксического анализа для успешного выполнения. Шаблоны в `formats` параметр состоят из одного или нескольких настраиваемых описателей формата из [пользовательские строки даты и времени формат](~/docs/standard/base-types/custom-date-and-time-format-strings.md) таблицы или один стандартный описатель формата, который определяет предопределенному шаблону из [Стандартной строки даты и времени формат](~/docs/standard/base-types/standard-date-and-time-format-strings.md) таблицы.  
  
 Если не использовать разделители даты или времени в шаблона пользовательского формата, использующие инвариантный язык для `provider` параметр и широкую форму каждый настраиваемый описатель формата. Например если вы хотите задать в шаблоне часы, укажите широкую форму, «HH» вместо более узкой формы «H».  
  
 Определенная дата и время символы и строки (например, названия дней недели на определенном языке), используемые в `s` определяются `provider` параметра, как точный формат из `s` Если `format` — это стандартный формат Описатель строка. `provider` Параметр может быть любым из следующих действий:  
  
-   Объект <xref:System.Globalization.CultureInfo> , представляющий язык и региональные параметры, используемые для интерпретации `s`. <xref:System.Globalization.DateTimeFormatInfo> Объект, возвращаемый его <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> свойство определяет символы и форматирование в `s`.  
  
-   Объект <xref:System.Globalization.DateTimeFormatInfo> объект, который определяет формат данных даты и времени.  
  
-   Настраиваемый <xref:System.IFormatProvider> реализация которого <xref:System.IFormatProvider.GetFormat%2A> метод возвращает либо <xref:System.Globalization.CultureInfo> объекта или <xref:System.Globalization.DateTimeFormatInfo> объект, предоставляющий сведения о форматировании.  
  
 Если `provider` — `null`, <xref:System.Globalization.CultureInfo> используется объект, соответствующий текущего языка и региональных параметров.  
  
 `styles` Параметр включает один или несколько членов <xref:System.Globalization.DateTimeStyles> перечисления, которые определяют, каким образом и где пробелы не определены в `format` могут присутствовать в `s` и управляют точным поведением операции синтаксического анализа. В следующей таблице описаны как каждый член <xref:System.Globalization.DateTimeStyles> перечисление влияет на работу <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> метод.  
  
|Элемент параметра DateTimeStyles|Описание:|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Выполняет синтаксический анализ `s` и, если необходимо, преобразует его в формат UTC. Если `s` включает смещение часового пояса, или если `s` содержит не данные о часовом поясе, но `styles` включает <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> флаг, метод выполняет синтаксический анализ строки, вызовы <xref:System.DateTime.ToUniversalTime%2A> для преобразования возвращаемого <xref:System.DateTime> значение в формате UTC и задает <xref:System.DateTime.Kind%2A> свойства <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Если `s` указывает, что он представляет время в формате UTC или если `s` не содержит сведения о часовом поясе, но `styles` включает <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> флаг, метод выполняет синтаксический анализ строки, выполняет преобразование часового пояса в возвращенном <xref:System.DateTime> значение, а свойству <xref:System.DateTime.Kind%2A> свойства <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Во всех остальных случаях флаг не оказывает влияния.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Указывает, что пробелы не определены в `format` могут появляться между любой отдельными элементами даты или времени.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Указывает, что пробелы не определены в `format` может находиться в начале `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Указывает, что пробелы не определены в `format` может находиться в конце `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Указывает, что `s` может содержать начальные, внутренние и конечные пробелы, не заданные `format`.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Указывает, что если `s` отсутствуют данные о часовом поясе, предполагается представляет местное время. Если не <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> флаг представлен <xref:System.DateTime.Kind%2A> свойство возвращаемого <xref:System.DateTime> имеет значение <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Указывает, что если `s` отсутствуют данные о часовом поясе, предполагается для представления в формате UTC. Если не <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> флаг отсутствует, этот метод преобразует возвращаемый <xref:System.DateTime> значение от времени UTC в местное время, а также задает его <xref:System.DateTime.Kind%2A> свойства <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|Если `s` содержит время без сведений о даты, дата возвращаемого значения устанавливается `DateTime.MinValue.Date`.|  
|<xref:System.Globalization.DateTimeStyles.None>|`s` Анализируется с помощью значений по умолчанию. Не пробелы, кроме тех, которые указаны в `format` разрешено. Если `s` отсутствует компонент даты, дата возвращаемого <xref:System.DateTime> имеет значение 1/1/0001. Если `s` содержит без сведений о часовом поясе, <xref:System.DateTime.Kind%2A> свойство возвращаемого <xref:System.DateTime> , присваивается значение <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. При наличии сведений о часовом поясе в `s`, время преобразуется в местное время и <xref:System.DateTime.Kind%2A> свойство возвращаемого <xref:System.DateTime> , присваивается значение <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Для строк, содержащих сведения о часовом поясе, пытается предотвратить преобразование в <xref:System.DateTime> значение с его <xref:System.DateTime.Kind%2A> свойство <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. В основном этот флаг запрещает преобразование время в формате UTC в местное время.|  
  
   
  
## Examples  
 В следующем примере используется <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> метод, чтобы гарантировать удается успешно обработать строку в число Возможные форматы.  
  
 [!code-csharp[System.Datetime.TryParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParseExact/cs/TryParseExact2.cs#2)]
 [!code-vb[System.Datetime.TryParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParseExact/vb/TryParseExact2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> не является допустимым значением <see cref="T:System.Globalization.DateTimeStyles" />.  
  
 - или -  
  
 Параметр <paramref name="styles" /> содержит недопустимое сочетание значений <see cref="T:System.Globalization.DateTimeStyles" /> (например, и <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" />, и <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />).</exception>
        <block subset="none" type="usage">
          <para>В [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], <see cref="Overload:System.DateTime.TryParseExact" /> возвращает <see langword="false" /> Если анализируемая строка содержит компонент часов и обозначение AM/PM, которых нет в соглашении. В [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] и более ранних версиях обозначение AM/PM игнорируется.</para>
        </block>
        <altmember cref="Overload:System.DateTime.ParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="UnixEpoch">
      <MemberSignature Language="C#" Value="public static readonly DateTime UnixEpoch;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTime UnixEpoch" />
      <MemberSignature Language="DocId" Value="F:System.DateTime.UnixEpoch" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UnixEpoch As DateTime " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTime UnixEpoch;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UtcNow">
      <MemberSignature Language="C#" Value="public static DateTime UtcNow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime UtcNow" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.UtcNow" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UtcNow As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime UtcNow { DateTime get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает объект <see cref="T:System.DateTime" />, которому присвоены текущие дата и время данного компьютера, выраженные в формате UTC.</summary>
        <value>Объект, значение которого является текущим значением даты и времени в формате UTC.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Разрешение для данного свойства зависит от системного таймера, который зависит от операционной системы. Он обычно от 0,5 до 15 миллисекунд.

 Начиная с .NET Framework версии 2.0, возвращаемым значением является <xref:System.DateTime> которого <xref:System.DateTime.Kind%2A> возвращает <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.

 Вместо использования <xref:System.DateTime.UtcNow%2A> — <xref:System.DateTimeOffset.UtcNow%2A?displayProperty=nameWithType>. Хотя первое указывает, что значение даты и времени по Гринвичу (UTC) путем назначения <xref:System.DateTimeKind.Utc?displayProperty=nameWithType> для его <xref:System.DateTime.Kind%2A> , последний присваивает дату и смещение по времени UTC значение времени (равно <xref:System.TimeSpan.Zero?displayProperty=nameWithType>).
  
## Examples  
 В следующем примере используется <xref:System.DateTime.SpecifyKind%2A> метод, чтобы продемонстрировать, как <xref:System.DateTime.Kind%2A> влияет на то <xref:System.DateTime.ToLocalTime%2A> и <xref:System.DateTime.ToUniversalTime%2A> методы преобразования.  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.UtcNow" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="Year">
      <MemberSignature Language="C#" Value="public int Year { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Year" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Year" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Year As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Year { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает компонент года даты, представленной этим экземпляром.</summary>
        <value>Значение года в диапазоне от 1 до 9999.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.Year%2A> Свойство возвращает год для текущего экземпляра в григорианском календаре. Оно не возвращает год, с помощью календаря текущего языка и региональных параметров по умолчанию. Чтобы получить год с помощью конкретного календаря, можно вызвать этот календарь `GetYear` метода, как показано в следующем коде.  
  
 [!code-csharp[System.DateTime.Year#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Year/cs/Year.cs#1)]
 [!code-vb[System.DateTime.Year#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Year/vb/Year.vb#1)]  
  
   
  
## Examples  
 В следующем примере демонстрируется <xref:System.DateTime.Year%2A> свойство.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
  </Members>
</Type>