<Type Name="Enum" FullName="System.Enum">
  <TypeSignature Language="C#" Value="public abstract class Enum : ValueType, IComparable, IConvertible, IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit Enum extends System.ValueType implements class System.IComparable, class System.IConvertible, class System.IFormattable" />
  <TypeSignature Language="DocId" Value="T:System.Enum" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Enum&#xA;Inherits ValueType&#xA;Implements IComparable, IConvertible, IFormattable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Enum abstract : ValueType, IComparable, IConvertible, IFormattable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IConvertible</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="47ec5-101">Предоставляет базовый класс для перечислений.</span><span class="sxs-lookup"><span data-stu-id="47ec5-101">Provides the base class for enumerations.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47ec5-102">Перечисление — это набор именованных констант, базовый тип которого равен любой целочисленный тип.</span><span class="sxs-lookup"><span data-stu-id="47ec5-102">An enumeration is a set of named constants whose underlying type is any integral type.</span></span> <span data-ttu-id="47ec5-103">Если базовый тип не определен явно, <xref:System.Int32> используется.</span><span class="sxs-lookup"><span data-stu-id="47ec5-103">If no underlying type is explicitly declared, <xref:System.Int32> is used.</span></span> <span data-ttu-id="47ec5-104"><xref:System.Enum> является базовым классом для всех перечислений в .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="47ec5-104"><xref:System.Enum> is the base class for all enumerations in the .NET Framework.</span></span> <span data-ttu-id="47ec5-105">Типы перечисления определяются `enum` ключевого слова C# и `Enum`... `End Enum` построения в Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="47ec5-105">Enumeration types are defined by the `enum` keyword in C# and the `Enum`...`End Enum` construct in Visual Basic.</span></span>  
  
 <span data-ttu-id="47ec5-106"><xref:System.Enum> Предоставляет методы для сравнения экземпляров этого класса, преобразования значения экземпляра в строковое представление, преобразование строковое представление числа в экземпляр этого класса и создание экземпляра заданного перечисления и значения.</span><span class="sxs-lookup"><span data-stu-id="47ec5-106"><xref:System.Enum> provides methods for comparing instances of this class, converting the value of an instance to its string representation, converting the string representation of a number to an instance of this class, and creating an instance of a specified enumeration and value.</span></span>  
  
 <span data-ttu-id="47ec5-107">Перечисление можно интерпретировать как битовое поле.</span><span class="sxs-lookup"><span data-stu-id="47ec5-107">You can also treat an enumeration as a bit field.</span></span> <span data-ttu-id="47ec5-108">Дополнительные сведения см. в разделе [не только элементы и атрибут Flags](#Flags) раздел и <xref:System.FlagsAttribute> раздела.</span><span class="sxs-lookup"><span data-stu-id="47ec5-108">For more information, see the [Non-Exclusive Members and the Flags Attribute](#Flags) section and the <xref:System.FlagsAttribute> topic.</span></span>  
  
 <span data-ttu-id="47ec5-109">В этом разделе.</span><span class="sxs-lookup"><span data-stu-id="47ec5-109">In this topic:</span></span>  
  
 <span data-ttu-id="47ec5-110">[Создание типа перечисления](#Creating) </span><span class="sxs-lookup"><span data-stu-id="47ec5-110">[Creating an enumeration type](#Creating) </span></span>  
 <span data-ttu-id="47ec5-111">[При создании экземпляра типа перечисления](#Instantiating) </span><span class="sxs-lookup"><span data-stu-id="47ec5-111">[Instantiating an enumeration type](#Instantiating) </span></span>  
 <span data-ttu-id="47ec5-112">[Перечисление советы и рекомендации](#BestPractices) </span><span class="sxs-lookup"><span data-stu-id="47ec5-112">[Enumeration best practices](#BestPractices) </span></span>  
 <span data-ttu-id="47ec5-113">[Выполнение операций с перечисления](#Operations) </span><span class="sxs-lookup"><span data-stu-id="47ec5-113">[Performing operations with enumerations](#Operations) </span></span>  
 [<span data-ttu-id="47ec5-114">Выполнение преобразования</span><span class="sxs-lookup"><span data-stu-id="47ec5-114">Performing conversions</span></span>](#conversions)  
 [<span data-ttu-id="47ec5-115">Синтаксический анализ значения перечисления</span><span class="sxs-lookup"><span data-stu-id="47ec5-115">Parsing enumeration values</span></span>](#parsing)  
 [<span data-ttu-id="47ec5-116">Форматирование значения перечисления</span><span class="sxs-lookup"><span data-stu-id="47ec5-116">Formatting enumeration values</span></span>](#formatting)  
[<span data-ttu-id="47ec5-117">Перебор элементов перечисления</span><span class="sxs-lookup"><span data-stu-id="47ec5-117">Iterating enumeration members</span></span>](#iterating)  
[<span data-ttu-id="47ec5-118">Не только элементы и атрибут Flags</span><span class="sxs-lookup"><span data-stu-id="47ec5-118">Non-exclusive members and the Flags attribute</span></span>](#Flags)  
[<span data-ttu-id="47ec5-119">Добавление методов перечисления</span><span class="sxs-lookup"><span data-stu-id="47ec5-119">Adding enumeration methods</span></span>](#methods)  
  
<a name="Creating"></a>   
## <a name="creating-an-enumeration-type"></a><span data-ttu-id="47ec5-120">Создание типа перечисления</span><span class="sxs-lookup"><span data-stu-id="47ec5-120">Creating an enumeration type</span></span>  
 <span data-ttu-id="47ec5-121">Языки программирования обычно предоставляют синтаксис для объявления перечисления, состоящего из набора именованных констант и их значений.</span><span class="sxs-lookup"><span data-stu-id="47ec5-121">Programming languages typically provide syntax to declare an enumeration that consists of a set of named constants and their values.</span></span> <span data-ttu-id="47ec5-122">В следующем примере синтаксис C# и Visual Basic для определение перечисления.</span><span class="sxs-lookup"><span data-stu-id="47ec5-122">The following example illustrates the syntax used by C# and Visual Basic to define an enumeration.</span></span> <span data-ttu-id="47ec5-123">Он создает перечисление с именем `ArrivalStatus` , содержит три члена: `ArrivalStatus.Early`, `ArrivalStatus.OnTime`, и `ArrivalStatus.Late`.</span><span class="sxs-lookup"><span data-stu-id="47ec5-123">It creates an enumeration named `ArrivalStatus` that has three members: `ArrivalStatus.Early`, `ArrivalStatus.OnTime`, and `ArrivalStatus.Late`.</span></span> <span data-ttu-id="47ec5-124">Обратите внимание, что в обоих случаях перечисления не наследует явным образом <xref:System.Enum>; отношение наследования неявно обрабатывается компилятором.</span><span class="sxs-lookup"><span data-stu-id="47ec5-124">Note that in both cases, the enumeration does not explicitly inherit from <xref:System.Enum>; the inheritance relationship is handled implicitly by the compiler.</span></span>  
  
 [!code-csharp[System.Enum.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/class1.cs#1)]
 [!code-vb[System.Enum.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/class1.vb#1)]  
  
> [!WARNING]
>  <span data-ttu-id="47ec5-125">Тип перечисления неинтегрируемый базовый тип которого не следует создавать или <xref:System.Char>.</span><span class="sxs-lookup"><span data-stu-id="47ec5-125">You should never create an enumeration type whose underlying type is non-integral or <xref:System.Char>.</span></span> <span data-ttu-id="47ec5-126">Несмотря на то, что можно создать такой тип перечисления с помощью отражения, вызовы методов, использующих результирующего типа не гарантируется и может также создавать дополнительные исключения.</span><span class="sxs-lookup"><span data-stu-id="47ec5-126">Although you can create such an enumeration type by using reflection, method calls that use the resulting type are unreliable and may also throw additional exceptions.</span></span>  
  
<a name="Instantiating"></a>   
## <a name="instantiating-an-enumeration-type"></a><span data-ttu-id="47ec5-127">При создании экземпляра типа перечисления</span><span class="sxs-lookup"><span data-stu-id="47ec5-127">Instantiating an enumeration type</span></span>  
 <span data-ttu-id="47ec5-128">Можно создать экземпляр типа перечисления так же, как можно создать другие значения любого типа: объявление переменной и ее присваивание одна из констант перечисления.</span><span class="sxs-lookup"><span data-stu-id="47ec5-128">You can instantiate an enumeration type just as you instantiate any other value type: by declaring a variable and assigning one of the enumeration's constants to it.</span></span> <span data-ttu-id="47ec5-129">В следующем примере создается `ArrivalStatus` , значение которого является `ArrivalStatus.OnTime`.</span><span class="sxs-lookup"><span data-stu-id="47ec5-129">The following example instantiates an `ArrivalStatus` whose value is `ArrivalStatus.OnTime`.</span></span>  
  
 [!code-csharp[System.Enum.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/class1.cs#2)]
 [!code-vb[System.Enum.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/class1.vb#2)]  
  
 <span data-ttu-id="47ec5-130">Значение перечисления также можно создать одним из следующих способов:</span><span class="sxs-lookup"><span data-stu-id="47ec5-130">You can also instantiate an enumeration value in the following ways:</span></span>  
  
-   <span data-ttu-id="47ec5-131">С помощью функций в конкретном языке программирования приведите (как в C#) или преобразуйте (как в Visual Basic) целочисленное значение для значения перечисления.</span><span class="sxs-lookup"><span data-stu-id="47ec5-131">By using a particular programming language's features to cast (as in C#) or convert (as in Visual Basic) an integer value to an enumeration value.</span></span> <span data-ttu-id="47ec5-132">В следующем примере создается `ArrivalStatus` объект, значение которого является `ArrivalStatus.Early` таким образом.</span><span class="sxs-lookup"><span data-stu-id="47ec5-132">The following example creates an `ArrivalStatus` object whose value is `ArrivalStatus.Early` in this way.</span></span>  
  
     [!code-csharp[System.Enum.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/class2.cs#4)]
     [!code-vb[System.Enum.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/class2.vb#4)]  
  
-   <span data-ttu-id="47ec5-133">Путем вызова его неявного конструктора по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="47ec5-133">By calling its implicit default constructor.</span></span> <span data-ttu-id="47ec5-134">Как показано в следующем примере, в этом случае экземпляр перечисления базовое значение — 0.</span><span class="sxs-lookup"><span data-stu-id="47ec5-134">As the following example shows, in this case the underlying value of the enumeration instance is 0.</span></span> <span data-ttu-id="47ec5-135">Однако это не обязательно значение допустимым константы перечисления.</span><span class="sxs-lookup"><span data-stu-id="47ec5-135">However, this is not necessarily the value of a valid constant in the enumeration.</span></span>  
  
     [!code-csharp[System.Enum.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/class2.cs#3)]
     [!code-vb[System.Enum.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/class2.vb#3)]  
  
-   <span data-ttu-id="47ec5-136">Путем вызова <xref:System.Enum.Parse%2A> или <xref:System.Enum.TryParse%2A> метода для синтаксического анализа строка, содержащая имя константы перечисления.</span><span class="sxs-lookup"><span data-stu-id="47ec5-136">By calling the <xref:System.Enum.Parse%2A> or <xref:System.Enum.TryParse%2A> method to parse a string that contains the name of a constant in the enumeration.</span></span> <span data-ttu-id="47ec5-137">Дополнительные сведения см. в разделе [синтаксический анализ значения перечисления](#parsing) раздела.</span><span class="sxs-lookup"><span data-stu-id="47ec5-137">For more information, see the [Parsing Enumeration Values](#parsing) section.</span></span>  
  
-   <span data-ttu-id="47ec5-138">Путем вызова <xref:System.Enum.ToObject%2A> метод, чтобы преобразовать целочисленное значение в тип перечисления.</span><span class="sxs-lookup"><span data-stu-id="47ec5-138">By calling the <xref:System.Enum.ToObject%2A> method to convert an integral value to an enumeration type.</span></span> <span data-ttu-id="47ec5-139">Дополнительные сведения см. в разделе [выполнение преобразования](#conversions) раздела.</span><span class="sxs-lookup"><span data-stu-id="47ec5-139">For more information, see the [Performing Conversions](#conversions) section.</span></span>  
  
<a name="BestPractices"></a>   
## <a name="enumeration-best-practices"></a><span data-ttu-id="47ec5-140">Перечисление советы и рекомендации</span><span class="sxs-lookup"><span data-stu-id="47ec5-140">Enumeration best practices</span></span>  
 <span data-ttu-id="47ec5-141">Рекомендуется использовать следующие рекомендации при определении типов перечислений.</span><span class="sxs-lookup"><span data-stu-id="47ec5-141">We recommend that you use the following best practices when you define enumeration types:</span></span>  
  
-   <span data-ttu-id="47ec5-142">Если вы не определили член перечисления, значение которого равно 0, рассмотрите возможность создания `None` константы перечисления.</span><span class="sxs-lookup"><span data-stu-id="47ec5-142">If you have not defined an enumeration member whose value is 0, consider creating a `None` enumerated constant.</span></span> <span data-ttu-id="47ec5-143">По умолчанию, объем памяти, используемый для перечисления инициализируется нулевым значением средой CLR.</span><span class="sxs-lookup"><span data-stu-id="47ec5-143">By default, the memory used for the enumeration is initialized to zero by the common language runtime.</span></span> <span data-ttu-id="47ec5-144">Следовательно Если не определена константа, значение которого равно нулю, перечисление будет содержать недопустимое значение при его создании.</span><span class="sxs-lookup"><span data-stu-id="47ec5-144">Consequently, if you do not define a constant whose value is zero, the enumeration will contain an illegal value when it is created.</span></span>  
  
-   <span data-ttu-id="47ec5-145">При наличии очевидного случая по умолчанию, приложение должно представлять, можно использовать перечисленные константой, значение которого равно нулю для его отображения.</span><span class="sxs-lookup"><span data-stu-id="47ec5-145">If there is an obvious default case that your application has to represent, consider using an enumerated constant whose value is zero to represent it.</span></span> <span data-ttu-id="47ec5-146">Если ни одному варианту по умолчанию, рассмотрите возможность использования Перечислимая константа, равное нулю, чтобы указать обращение, не представленных каким-либо перечислимых констант.</span><span class="sxs-lookup"><span data-stu-id="47ec5-146">If there is no default case, consider using an enumerated constant whose value is zero to specify the case that is not represented by any of the other enumerated constants.</span></span>  
  
-   <span data-ttu-id="47ec5-147">Указывает перечислимые константы, которые зарезервированы для будущего использования.</span><span class="sxs-lookup"><span data-stu-id="47ec5-147">Do not specify enumerated constants that are reserved for future use.</span></span>  
  
-   <span data-ttu-id="47ec5-148">При определении метода или свойства, которое принимает как значение константы перечисления, рекомендуется выполнить проверку значения.</span><span class="sxs-lookup"><span data-stu-id="47ec5-148">When you define a method or property that takes an enumerated constant as a value, consider validating the value.</span></span> <span data-ttu-id="47ec5-149">Причина в том, можно привести числовое значение в тип перечисления, даже если это числовое значение не определены в перечислении.</span><span class="sxs-lookup"><span data-stu-id="47ec5-149">The reason is that you can cast a numeric value to the enumeration type even if that numeric value is not defined in the enumeration.</span></span>  
  
 <span data-ttu-id="47ec5-150">Дополнительные рекомендации для типов перечисления, константы, битовые поля перечислены в [не только элементы и атрибут Flags](#Flags) раздела.</span><span class="sxs-lookup"><span data-stu-id="47ec5-150">Additional best practices for enumeration types whose constants are bit fields are listed in the [Non-Exclusive Members and the Flags Attribute](#Flags) section.</span></span>  
  
<a name="Operations"></a>   
## <a name="performing-operations-with-enumerations"></a><span data-ttu-id="47ec5-151">Выполнение операций с перечисления</span><span class="sxs-lookup"><span data-stu-id="47ec5-151">Performing operations with enumerations</span></span>  
 <span data-ttu-id="47ec5-152">При создании перечисления не может определять новые методы.</span><span class="sxs-lookup"><span data-stu-id="47ec5-152">You cannot define new methods when you are creating an enumeration.</span></span> <span data-ttu-id="47ec5-153">Тем не менее, тип перечисления наследует полный набор статических и методы экземпляра из <xref:System.Enum> класса.</span><span class="sxs-lookup"><span data-stu-id="47ec5-153">However, an enumeration type inherits a complete set of static and instance methods from the <xref:System.Enum> class.</span></span> <span data-ttu-id="47ec5-154">Следующие разделы опрос большинство из этих методов, помимо методов, которые широко используются при работе со значениями перечисления.</span><span class="sxs-lookup"><span data-stu-id="47ec5-154">The following sections survey most of these methods, in addition to several other methods that are commonly used when working with enumeration values.</span></span>  
  
<a name="conversions"></a>   
### <a name="performing-conversions"></a><span data-ttu-id="47ec5-155">Выполнение преобразования</span><span class="sxs-lookup"><span data-stu-id="47ec5-155">Performing conversions</span></span>  
 <span data-ttu-id="47ec5-156">Между элементом перечисления и его базового типа можно преобразовать с помощью приведения (в C#) или оператор преобразования (в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="47ec5-156">You can convert between an enumeration member and its underlying type by using a casting (in C#) or conversion (in Visual Basic) operator.</span></span> <span data-ttu-id="47ec5-157">В следующем примере операторы приведения или преобразования выполняют преобразования из целого числа в значение перечисления и из значения перечисления в целое число.</span><span class="sxs-lookup"><span data-stu-id="47ec5-157">The following example uses casting or conversion operators to perform conversions both from an integer to an enumeration value and from an enumeration value to an integer.</span></span>  
  
 [!code-csharp[System.Enum.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/class2.cs#5)]
 [!code-vb[System.Enum.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/class2.vb#5)]  
  
 <span data-ttu-id="47ec5-158"><xref:System.Enum> Класс также содержит <xref:System.Enum.ToObject%2A> метод, который преобразует значение любого целочисленного типа в значение перечисления.</span><span class="sxs-lookup"><span data-stu-id="47ec5-158">The <xref:System.Enum> class also includes a <xref:System.Enum.ToObject%2A> method that converts a value of any integral type to an enumeration value.</span></span> <span data-ttu-id="47ec5-159">В следующем примере используется <xref:System.Enum.ToObject%28System.Type%2CSystem.Int32%29> метод преобразования <xref:System.Int32> для `ArrivalStatus` значение.</span><span class="sxs-lookup"><span data-stu-id="47ec5-159">The following example uses the <xref:System.Enum.ToObject%28System.Type%2CSystem.Int32%29> method to convert an <xref:System.Int32> to an `ArrivalStatus` value.</span></span> <span data-ttu-id="47ec5-160">Обратите внимание, что, поскольку <xref:System.Enum.ToObject%2A> возвращает значение типа <xref:System.Object>, использование оператора приведения или преобразования может быть по-прежнему необходимо, чтобы привести объект к типу перечисления.</span><span class="sxs-lookup"><span data-stu-id="47ec5-160">Note that, because the <xref:System.Enum.ToObject%2A> returns a value of type <xref:System.Object>, the use of a casting or conversion operator may still be necessary to cast the object to the enumeration type.</span></span>  
  
 [!code-csharp[System.Enum.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/class2.cs#6)]
 [!code-vb[System.Enum.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/class2.vb#6)]  
  
 <span data-ttu-id="47ec5-161">При преобразовании целого числа в значение перечисления, можно присвоить значение, которое не является фактически является членом перечисления.</span><span class="sxs-lookup"><span data-stu-id="47ec5-161">When converting an integer to an enumeration value, it is possible to assign a value that is not actually a member of the enumeration.</span></span> <span data-ttu-id="47ec5-162">Чтобы избежать этого, можно передать целое число, которое <xref:System.Enum.IsDefined%2A> метод до выполнения преобразования.</span><span class="sxs-lookup"><span data-stu-id="47ec5-162">To prevent this, you can pass the integer to the <xref:System.Enum.IsDefined%2A> method before performing the conversion.</span></span> <span data-ttu-id="47ec5-163">В следующем примере этот метод для определения, является ли элементы в массив целочисленных значений могут преобразовываться в `ArrivalStatus` значения.</span><span class="sxs-lookup"><span data-stu-id="47ec5-163">The following example uses this method to determine whether the elements in an array of integer values can be converted to `ArrivalStatus` values.</span></span>  
  
 [!code-csharp[System.Enum.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classconversion1.cs#7)]
 [!code-vb[System.Enum.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classconversion1.vb#7)]  
  
 <span data-ttu-id="47ec5-164">Несмотря на то что <xref:System.Enum> класс предоставляет явные реализации интерфейса из <xref:System.IConvertible> интерфейс для преобразования из значения перечисления в целочисленный тип, следует использовать методы <xref:System.Convert> класса, такие как <xref:System.Convert.ToInt32%2A>, Эти преобразования выполняются.</span><span class="sxs-lookup"><span data-stu-id="47ec5-164">Although the <xref:System.Enum> class provides explicit interface implementations of the <xref:System.IConvertible> interface for converting from an enumeration value to an integral type, you should use the methods of the <xref:System.Convert> class, such as <xref:System.Convert.ToInt32%2A>, to perform these conversions.</span></span> <span data-ttu-id="47ec5-165">В следующем примере показано, как использовать <xref:System.Enum.GetUnderlyingType%2A> метод вместе с <xref:System.Convert.ChangeType%2A?displayProperty=nameWithType> метод для преобразования значения перечисления в его базовый тип.</span><span class="sxs-lookup"><span data-stu-id="47ec5-165">The following example illustrates how you can use the <xref:System.Enum.GetUnderlyingType%2A> method along with the <xref:System.Convert.ChangeType%2A?displayProperty=nameWithType> method to convert an enumeration value to its underlying type.</span></span> <span data-ttu-id="47ec5-166">Обратите внимание, что в этом примере не требуется базовый тип перечисления, чтобы быть известно во время компиляции.</span><span class="sxs-lookup"><span data-stu-id="47ec5-166">Note that this example does not require the underlying type of the enumeration to be known at compile time.</span></span>  
  
 [!code-csharp[System.Enum.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classconversion2.cs#8)]
 [!code-vb[System.Enum.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classconversion2.vb#8)]  
  
<a name="parsing"></a>   
### <a name="parsing-enumeration-values"></a><span data-ttu-id="47ec5-167">Синтаксический анализ значения перечисления</span><span class="sxs-lookup"><span data-stu-id="47ec5-167">Parsing enumeration values</span></span>  
 <span data-ttu-id="47ec5-168"><xref:System.Enum.Parse%2A> И <xref:System.Enum.TryParse%2A> методы позволяют преобразовать строковое представление значения перечисления с этим значением.</span><span class="sxs-lookup"><span data-stu-id="47ec5-168">The <xref:System.Enum.Parse%2A> and <xref:System.Enum.TryParse%2A> methods allow you to convert the string representation of an enumeration value to that value.</span></span> <span data-ttu-id="47ec5-169">Строковое представление может быть имя или базовое значение константы перечисления.</span><span class="sxs-lookup"><span data-stu-id="47ec5-169">The string representation can be either the name or the underlying value of an enumeration constant.</span></span> <span data-ttu-id="47ec5-170">Обратите внимание, методах анализа выполнит успешное преобразование строковые представления чисел, которые не являются членами определенной перечисления, если строки может быть преобразовано в значение базового типа перечисления.</span><span class="sxs-lookup"><span data-stu-id="47ec5-170">Note that the parsing methods will successfully convert string representations of numbers that are not members of a particular enumeration if the strings can be converted to a value of the enumeration's underlying type.</span></span> <span data-ttu-id="47ec5-171">Чтобы избежать этого, <xref:System.Enum.IsDefined%2A> метод можно вызвать, чтобы убедитесь, что результат синтаксического анализа метода является допустимым значением перечисления.</span><span class="sxs-lookup"><span data-stu-id="47ec5-171">To prevent this, the <xref:System.Enum.IsDefined%2A> method can be called to ensure that the result of the parsing method is a valid enumeration value.</span></span> <span data-ttu-id="47ec5-172">Этот подход показан в примере и показано, как вызовы <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> и <xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29?displayProperty=nameWithType> методы.</span><span class="sxs-lookup"><span data-stu-id="47ec5-172">The example illustrates this approach and demonstrates calls to both the <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> and <xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29?displayProperty=nameWithType> methods.</span></span> <span data-ttu-id="47ec5-173">Обратите внимание, что метод анализа неуниверсальных возвращает объект, который может потребоваться приведите (в C#) или преобразуйте (в Visual Basic) в тип соответствующего перечисления.</span><span class="sxs-lookup"><span data-stu-id="47ec5-173">Note that the non-generic parsing method returns an object that you may have to cast (in C#) or convert (in Visual Basic) to the appropriate enumeration type.</span></span>  
  
 [!code-csharp[System.Enum.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classparse1.cs#9)]
 [!code-vb[System.Enum.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classparse1.vb#9)]  
  
<a name="formatting"></a>   
### <a name="formatting-enumeration-values"></a><span data-ttu-id="47ec5-174">Форматирование значения перечисления</span><span class="sxs-lookup"><span data-stu-id="47ec5-174">Formatting enumeration values</span></span>  
 <span data-ttu-id="47ec5-175">Можно преобразовать в их строковые представления значений перечисления путем вызова статического <xref:System.Enum.Format%2A> метода, а также перегрузки экземпляра <xref:System.Enum.ToString%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="47ec5-175">You can convert enumeration values to their string representations by calling the static <xref:System.Enum.Format%2A> method, as well as the overloads of the instance <xref:System.Enum.ToString%2A> method.</span></span> <span data-ttu-id="47ec5-176">Строка формата можно использовать для управления способом точное значение перечисления представлена как строка.</span><span class="sxs-lookup"><span data-stu-id="47ec5-176">You can use a format string to control the precise way in which an enumeration value is represented as a string.</span></span> <span data-ttu-id="47ec5-177">Дополнительные сведения см. в разделе [строки форматов перечисления](~/docs/standard/base-types/enumeration-format-strings.md).</span><span class="sxs-lookup"><span data-stu-id="47ec5-177">For more information, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).</span></span> <span data-ttu-id="47ec5-178">В следующем примере каждого из поддерживаемых форматов перечислений («G» или «g», «D» или «d», «X» или «x» и «F» или «f») используется для преобразования членом `ArrivalStatus` перечисления в строковое представление.</span><span class="sxs-lookup"><span data-stu-id="47ec5-178">The following example uses each of the supported enumeration format strings ("G" or "g", "D" or "d", "X" or "x", and "F" or "f" ) to convert a member of the `ArrivalStatus` enumeration to its string representations.</span></span>  
  
 [!code-csharp[System.Enum.Class#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classformat1.cs#10)]
 [!code-vb[System.Enum.Class#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classformat1.vb#10)]  
  
<a name="iterating"></a>   
### <a name="iterating-enumeration-members"></a><span data-ttu-id="47ec5-179">Перебор элементов перечисления</span><span class="sxs-lookup"><span data-stu-id="47ec5-179">Iterating enumeration members</span></span>  
 <span data-ttu-id="47ec5-180"><xref:System.Enum> Тип не реализует <xref:System.Collections.IEnumerable> или <xref:System.Collections.Generic.IEnumerable%601> интерфейс, который позволил бы итерацию элементов коллекции, воспользовавшись `foreach` (в C#) или `For Each` (в Visual Basic) конструкцию.</span><span class="sxs-lookup"><span data-stu-id="47ec5-180">The <xref:System.Enum> type does not implement the <xref:System.Collections.IEnumerable> or <xref:System.Collections.Generic.IEnumerable%601> interface, which would enable you to iterate members of a collection by using a `foreach` (in C#) or `For Each` (in Visual Basic) construct.</span></span> <span data-ttu-id="47ec5-181">Тем не менее можно перечислить в любом из двух способов.</span><span class="sxs-lookup"><span data-stu-id="47ec5-181">However, you can enumerate members in either of two ways.</span></span>  
  
-   <span data-ttu-id="47ec5-182">Можно вызвать <xref:System.Enum.GetNames%2A> метод для извлечения строковый массив, содержащий имена членов перечисления.</span><span class="sxs-lookup"><span data-stu-id="47ec5-182">You can call the <xref:System.Enum.GetNames%2A> method to retrieve a string array containing the names of the enumeration members.</span></span> <span data-ttu-id="47ec5-183">Затем для каждого элемента массива строк, можно вызвать <xref:System.Enum.Parse%2A> метод для преобразования строки в эквивалентный перечисления значение.</span><span class="sxs-lookup"><span data-stu-id="47ec5-183">Next, for each element of the string array, you can call the <xref:System.Enum.Parse%2A> method to convert the string to its equivalent enumeration value.</span></span> <span data-ttu-id="47ec5-184">Этот подход показан в приведенном ниже примере.</span><span class="sxs-lookup"><span data-stu-id="47ec5-184">The following example illustrates this approach.</span></span>  
  
     [!code-csharp[System.Enum.Class#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classiterate.cs#11)]
     [!code-vb[System.Enum.Class#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classiterate.vb#11)]  
  
-   <span data-ttu-id="47ec5-185">Можно вызвать <xref:System.Enum.GetValues%2A> метод, чтобы получить массив, содержащий базовый значений в перечислении.</span><span class="sxs-lookup"><span data-stu-id="47ec5-185">You can call the <xref:System.Enum.GetValues%2A> method to retrieve an array that contains the underlying values in the enumeration.</span></span> <span data-ttu-id="47ec5-186">Затем для каждого элемента массива, можно вызвать <xref:System.Enum.ToObject%2A> метод преобразования целочисленное значение в его эквивалент перечисления значение.</span><span class="sxs-lookup"><span data-stu-id="47ec5-186">Next, for each element of the array, you can call the <xref:System.Enum.ToObject%2A> method to convert the integer to its equivalent enumeration value.</span></span> <span data-ttu-id="47ec5-187">Этот подход показан в приведенном ниже примере.</span><span class="sxs-lookup"><span data-stu-id="47ec5-187">The following example illustrates this approach.</span></span>  
  
     [!code-csharp[System.Enum.Class#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classiterate.cs#12)]
     [!code-vb[System.Enum.Class#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classiterate.vb#12)]  
  
<a name="Flags"></a>   
## <a name="non-exclusive-members-and-the-flags-attribute"></a><span data-ttu-id="47ec5-188">Не только элементы и атрибут Flags</span><span class="sxs-lookup"><span data-stu-id="47ec5-188">Non-exclusive members and the Flags attribute</span></span>  
 <span data-ttu-id="47ec5-189">Один обычно перечисление используется для представления набора значений взаимно исключают друг друга.</span><span class="sxs-lookup"><span data-stu-id="47ec5-189">One common use of an enumeration is to represent a set of mutually exclusive values.</span></span> <span data-ttu-id="47ec5-190">Например `ArrivalStatus` экземпляр может иметь значение `Early`, `OnTime`, или `Late`.</span><span class="sxs-lookup"><span data-stu-id="47ec5-190">For example, an `ArrivalStatus` instance can have a value of `Early`, `OnTime`, or `Late`.</span></span> <span data-ttu-id="47ec5-191">Нет смысла для значения `ArrivalStatus` экземпляра, чтобы отразить более одной константы перечисления.</span><span class="sxs-lookup"><span data-stu-id="47ec5-191">It makes no sense for the value of an `ArrivalStatus` instance to reflect more than one enumeration constant.</span></span>  
  
 <span data-ttu-id="47ec5-192">Однако в других случаях значение объекта перечисления может содержать несколько членов перечисления, и каждый элемент представляет собой битовое поле, в значение перечисления.</span><span class="sxs-lookup"><span data-stu-id="47ec5-192">In other cases, however, the value of an enumeration object can include multiple enumeration members, and each member represents a bit field in the enumeration value.</span></span> <span data-ttu-id="47ec5-193"><xref:System.FlagsAttribute> Атрибут может использоваться для указания, что перечисление состоит из битовых полей.</span><span class="sxs-lookup"><span data-stu-id="47ec5-193">The <xref:System.FlagsAttribute> attribute can be used to indicate that the enumeration consists of bit fields.</span></span> <span data-ttu-id="47ec5-194">Например, с именем перечисления `Pets` может использоваться для указания вида животных в семейство.</span><span class="sxs-lookup"><span data-stu-id="47ec5-194">For example, an enumeration named `Pets` might be used to indicate the kinds of pets in a household.</span></span> <span data-ttu-id="47ec5-195">Его можно определить следующим образом.</span><span class="sxs-lookup"><span data-stu-id="47ec5-195">It can be defined as follows.</span></span>  
  
 [!code-csharp[System.Enum.Class#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classbitwise1.cs#13)]
 [!code-vb[System.Enum.Class#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classbitwise1.vb#13)]  
  
 <span data-ttu-id="47ec5-196">`Pets` Затем может использовать перечисление, как показано в следующем примере.</span><span class="sxs-lookup"><span data-stu-id="47ec5-196">The `Pets` enumeration can then be used as shown in the following example.</span></span>  
  
 [!code-csharp[System.Enum.Class#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classbitwise1.cs#14)]
 [!code-vb[System.Enum.Class#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classbitwise1.vb#14)]  
  
 <span data-ttu-id="47ec5-197">Следующие рекомендации можно использовать при определении побитовой операции перечисления и применение <xref:System.FlagsAttribute> атрибута.</span><span class="sxs-lookup"><span data-stu-id="47ec5-197">The following best practices should be used when defining a bitwise enumeration and applying the <xref:System.FlagsAttribute> attribute.</span></span>  
  
-   <span data-ttu-id="47ec5-198">Используйте <xref:System.FlagsAttribute> настраиваемый атрибут для перечисления только в том случае, если операцию побитового (AND, OR, ИСКЛЮЧАЮЩИЙ или) должно выполняться на основе числового значения.</span><span class="sxs-lookup"><span data-stu-id="47ec5-198">Use the <xref:System.FlagsAttribute> custom attribute for an enumeration only if a bitwise operation (AND, OR, EXCLUSIVE OR) is to be performed on a numeric value.</span></span>  
  
-   <span data-ttu-id="47ec5-199">Объявление констант перечисления в степени двойки, то есть, 1, 2, 4, 8 и т. д.</span><span class="sxs-lookup"><span data-stu-id="47ec5-199">Define enumeration constants in powers of two, that is, 1, 2, 4, 8, and so on.</span></span> <span data-ttu-id="47ec5-200">Это означает, что отдельные флаги в сочетании констант перечисления не будут перекрываться.</span><span class="sxs-lookup"><span data-stu-id="47ec5-200">This means the individual flags in combined enumeration constants do not overlap.</span></span>  
  
-   <span data-ttu-id="47ec5-201">Рассмотрите возможность создания Перечислимая константа для широко используемых сочетаний флагов.</span><span class="sxs-lookup"><span data-stu-id="47ec5-201">Consider creating an enumerated constant for commonly used flag combinations.</span></span> <span data-ttu-id="47ec5-202">Например, если у вас есть перечисление, используемое для операций файлового ввода-вывода, содержащий перечислимых констант `Read = 1` и `Write = 2`, рассмотрите возможность создания Перечислимая константа `ReadWrite = Read OR Write`, который объединяет `Read` и `Write` флаги.</span><span class="sxs-lookup"><span data-stu-id="47ec5-202">For example, if you have an enumeration used for file I/O operations that contains the enumerated constants `Read = 1` and `Write = 2`, consider creating the enumerated constant `ReadWrite = Read OR Write`, which combines the `Read` and `Write` flags.</span></span> <span data-ttu-id="47ec5-203">Кроме того используются для объединения флаги побитовой операции или может считаться расширенные концепции, в некоторых ситуациях, не должно быть обязательным для простых задач.</span><span class="sxs-lookup"><span data-stu-id="47ec5-203">In addition, the bitwise OR operation used to combine the flags might be considered an advanced concept in some circumstances that should not be required for simple tasks.</span></span>  
  
-   <span data-ttu-id="47ec5-204">Будьте осторожны при определении отрицательное число как константа перечисления флага, так как многие позиций флаг может быть установлен в 1, что может сделать код путаницу и стимулировать ошибки в коде.</span><span class="sxs-lookup"><span data-stu-id="47ec5-204">Use caution if you define a negative number as a flag enumerated constant because many flag positions might be set to 1, which might make your code confusing and encourage coding errors.</span></span>  
  
-   <span data-ttu-id="47ec5-205">Удобный способ проверить ли флаг в числовом значении является вызов экземпляра <xref:System.Enum.HasFlag%2A> метода, как показано в следующем примере.</span><span class="sxs-lookup"><span data-stu-id="47ec5-205">A convenient way to test whether a flag is set in a numeric value is to call the instance <xref:System.Enum.HasFlag%2A> method, as shown in the following example.</span></span>  
  
     [!code-csharp[System.Enum.Class#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classbitwise1.cs#15)]
     [!code-vb[System.Enum.Class#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classbitwise1.vb#15)]  
  
     <span data-ttu-id="47ec5-206">Это эквивалентно выполняет побитовую операцию и между числовым значением и флаг константа перечислимого типа, который устанавливает все биты в числовое значение к нулю, не соответствуют флаг, и тестирования в результате этой операции идентичен ли Перечислимая константа флаг.</span><span class="sxs-lookup"><span data-stu-id="47ec5-206">It is equivalent to performing a bitwise AND operation between the numeric value and the flag enumerated constant, which sets all bits in the numeric value to zero that do not correspond to the flag, and then testing whether the result of that operation is equal to the flag enumerated constant.</span></span> <span data-ttu-id="47ec5-207">Это показано в следующем примере:</span><span class="sxs-lookup"><span data-stu-id="47ec5-207">This is illustrated in the following example.</span></span>  
  
     [!code-csharp[System.Enum.Class#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classbitwise1.cs#16)]
     [!code-vb[System.Enum.Class#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classbitwise1.vb#16)]  
  
-   <span data-ttu-id="47ec5-208">Используйте `None` как имя флага перечисления константа, значение которого равно нулю.</span><span class="sxs-lookup"><span data-stu-id="47ec5-208">Use `None` as the name of the flag enumerated constant whose value is zero.</span></span> <span data-ttu-id="47ec5-209">Нельзя использовать `None` константы перечислимого типа в операцию побитового и для проверки наличия флага, поскольку результат всегда будет равно нулю.</span><span class="sxs-lookup"><span data-stu-id="47ec5-209">You cannot use the `None` enumerated constant in a bitwise AND operation to test for a flag because the result is always zero.</span></span> <span data-ttu-id="47ec5-210">Тем не менее, можно выполнять логические, не побитовых сравнение числовое значение и `None` Перечислимая константа, чтобы определить, установлены ли все биты в числовое значение.</span><span class="sxs-lookup"><span data-stu-id="47ec5-210">However, you can perform a logical, not a bitwise, comparison between the numeric value and the `None` enumerated constant to determine whether any bits in the numeric value are set.</span></span> <span data-ttu-id="47ec5-211">Это показано в следующем примере:</span><span class="sxs-lookup"><span data-stu-id="47ec5-211">This is illustrated in the following example.</span></span>  
  
     [!code-csharp[System.Enum.Class#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classbitwise1.cs#17)]
     [!code-vb[System.Enum.Class#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classbitwise1.vb#17)]  
  
-   <span data-ttu-id="47ec5-212">Не следует определять значение перечисления исключительно для отражения состояния самого перечисления.</span><span class="sxs-lookup"><span data-stu-id="47ec5-212">Do not define an enumeration value solely to mirror the state of the enumeration itself.</span></span> <span data-ttu-id="47ec5-213">Например не следует определять Перечислимая константа, которая лишь обозначает конец перечисления.</span><span class="sxs-lookup"><span data-stu-id="47ec5-213">For example, do not define an enumerated constant that merely marks the end of the enumeration.</span></span> <span data-ttu-id="47ec5-214">Если необходимо определить последнее значение перечисления, явным образом выполнять проверку для этого значения.</span><span class="sxs-lookup"><span data-stu-id="47ec5-214">If you need to determine the last value of the enumeration, check for that value explicitly.</span></span> <span data-ttu-id="47ec5-215">Кроме того можно выполнить проверку диапазона для первой и последней перечислимой константы, если допустимы все значения в диапазоне.</span><span class="sxs-lookup"><span data-stu-id="47ec5-215">In addition, you can perform a range check for the first and last enumerated constant if all values within the range are valid.</span></span>  
  
<a name="methods"></a>   
## <a name="adding-enumeration-methods"></a><span data-ttu-id="47ec5-216">Добавление методов перечисления</span><span class="sxs-lookup"><span data-stu-id="47ec5-216">Adding enumeration methods</span></span>  
 <span data-ttu-id="47ec5-217">Так как типы перечисления определены структурами языка, такие как `enum` (C#) и `Enum` (Visual Basic), не может определять настраиваемые методы для типа перечисления, отличное от этих методов, наследуемых из <xref:System.Enum> класса.</span><span class="sxs-lookup"><span data-stu-id="47ec5-217">Because enumeration types are defined by language structures, such as `enum` (C#) and `Enum` (Visual Basic), you cannot define custom methods for an enumeration type other than those methods inherited from the <xref:System.Enum> class.</span></span>  <span data-ttu-id="47ec5-218">Тем не менее можно использовать методы расширения для добавления функциональности в тип перечисления, определенного.</span><span class="sxs-lookup"><span data-stu-id="47ec5-218">However, you can use extension methods to add functionality to a particular enumeration type.</span></span>  
  
 <span data-ttu-id="47ec5-219">В следующем примере перечисление `Grades` содержит возможные буквенные оценки, которые учащийся может получить в классе.</span><span class="sxs-lookup"><span data-stu-id="47ec5-219">In the following example, the `Grades` enumeration represents the possible letter grades that a student may receive in a class.</span></span> <span data-ttu-id="47ec5-220">Метод расширения с именем `Passing` добавляется в тип `Grades`, чтобы каждый экземпляр этого типа "знал", проходной это балл или нет.</span><span class="sxs-lookup"><span data-stu-id="47ec5-220">An extension method named `Passing` is added to the `Grades` type so that each instance of that type now "knows" whether it represents a passing grade or not.</span></span>       <span data-ttu-id="47ec5-221">`Extensions` Класс также содержит статическую переменную чтения и записи, которая определяет минимальное проходную оценку.</span><span class="sxs-lookup"><span data-stu-id="47ec5-221">The `Extensions` class also contains a static read-write variable that defines the minimum passing grade.</span></span> <span data-ttu-id="47ec5-222">Возвращаемое значение `Passing` метода расширения отражает текущее значение этой переменной.</span><span class="sxs-lookup"><span data-stu-id="47ec5-222">The return value of the `Passing` extension method reflects the current value of that variable.</span></span>  
  
 [!code-csharp[System.Enum.Class#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/Extensions.cs#18)]
 [!code-vb[System.Enum.Class#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/Extensions.vb#18)]  
  
   
  
## Examples  
 <span data-ttu-id="47ec5-223">В следующем примере показано использование перечисления для представления именованных значений и другого перечисления для представления именованных битовых полей.</span><span class="sxs-lookup"><span data-stu-id="47ec5-223">The following example demonstrates using an enumeration to represent named values and another enumeration to represent named bit fields.</span></span>  
  
 [!code-cpp[enummain#1](~/samples/snippets/cpp/VS_Snippets_CLR/enummain/CPP/EnumMain.cpp#1)]
 [!code-csharp[enummain#1](~/samples/snippets/csharp/VS_Snippets_CLR/enummain/CS/EnumMain.cs#1)]
 [!code-vb[enummain#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enummain/VB/EnumMain.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="47ec5-224">Данный тип потокобезопасен.</span><span class="sxs-lookup"><span data-stu-id="47ec5-224">This type is thread safe.</span></span></threadsafe>
    <altmember cref="T:System.ValueType" />
    <altmember cref="T:System.FlagsAttribute" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Enum ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Enum();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="47ec5-225">Инициализирует новый экземпляр класса <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-225">Initializes a new instance of the <see cref="T:System.Enum" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (target As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Object ^ target);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="47ec5-226">Объект для сравнения или значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-226">An object to compare, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="47ec5-227">Сравнивает этот экземпляр с заданным объектом и возвращает значение, указывающее, как соотносятся значения этих объектов.</span><span class="sxs-lookup"><span data-stu-id="47ec5-227">Compares this instance to a specified object and returns an indication of their relative values.</span></span></summary>
        <returns><span data-ttu-id="47ec5-228">Знаковое число, представляющее относительные значения этого экземпляра и параметра <paramref name="target" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-228">A signed number that indicates the relative values of this instance and <paramref name="target" />.</span></span>  
  
 <span data-ttu-id="47ec5-229"><list type="table"><listheader><term> Значение</span><span class="sxs-lookup"><span data-stu-id="47ec5-229"><list type="table"><listheader><term> Value</span></span>  
  
 <span data-ttu-id="47ec5-230"></term><description> Описание</span><span class="sxs-lookup"><span data-stu-id="47ec5-230"></term><description> Meaning</span></span>  
  
 <span data-ttu-id="47ec5-231"></description></listheader><item><term> Меньше нуля</span><span class="sxs-lookup"><span data-stu-id="47ec5-231"></description></listheader><item><term> Less than zero</span></span>  
  
 <span data-ttu-id="47ec5-232"></term><description> Значение этого экземпляра меньше значения параметра <paramref name="target" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-232"></term><description> The value of this instance is less than the value of <paramref name="target" />.</span></span>  
  
 <span data-ttu-id="47ec5-233"></description></item><item><term> Нуль</span><span class="sxs-lookup"><span data-stu-id="47ec5-233"></description></item><item><term> Zero</span></span>  
  
 <span data-ttu-id="47ec5-234"></term><description> Значение этого экземпляра равно значению параметра <paramref name="target" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-234"></term><description> The value of this instance is equal to the value of <paramref name="target" />.</span></span>  
  
 <span data-ttu-id="47ec5-235"></description></item><item><term> Больше нуля</span><span class="sxs-lookup"><span data-stu-id="47ec5-235"></description></item><item><term> Greater than zero</span></span>  
  
 <span data-ttu-id="47ec5-236"></term><description> Значение этого экземпляра больше значения параметра <paramref name="target" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-236"></term><description> The value of this instance is greater than the value of <paramref name="target" />.</span></span>  
  
 <span data-ttu-id="47ec5-237">- или -</span><span class="sxs-lookup"><span data-stu-id="47ec5-237">-or-</span></span>  
  
 <span data-ttu-id="47ec5-238">Свойство <paramref name="target" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-238"><paramref name="target" /> is <see langword="null" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="47ec5-239">Следующий пример иллюстрирует использование `CompareTo` в контексте `Enum`.</span><span class="sxs-lookup"><span data-stu-id="47ec5-239">The following example illustrates the use of `CompareTo` in the context of `Enum`.</span></span>  
  
 [!code-cpp[enumcompareto#1](~/samples/snippets/cpp/VS_Snippets_CLR/enumcompareto/CPP/EnumCompareTo.cpp#1)]
 [!code-csharp[enumcompareto#1](~/samples/snippets/csharp/VS_Snippets_CLR/enumcompareto/CS/EnumCompareTo.cs#1)]
 [!code-vb[enumcompareto#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enumcompareto/VB/EnumCompareTo.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="47ec5-240">Параметр <paramref name="target" /> и этот экземпляр не принадлежат к одному типу.</span><span class="sxs-lookup"><span data-stu-id="47ec5-240"><paramref name="target" /> and this instance are not the same type.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="47ec5-241">Этот экземпляр не принадлежит к типу <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" /> или <see cref="T:System.UInt64" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-241">This instance is not type <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" />, or <see cref="T:System.UInt64" />.</span></span></exception>
        <altmember cref="M:System.Enum.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="47ec5-242">Объект, сравниваемый с этим экземпляром, или значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-242">An object to compare with this instance, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="47ec5-243">Возвращает значение, показывающее, равен ли данный экземпляр заданному объекту.</span><span class="sxs-lookup"><span data-stu-id="47ec5-243">Returns a value indicating whether this instance is equal to a specified object.</span></span></summary>
        <returns>
          <span data-ttu-id="47ec5-244"><see langword="true" />, если <paramref name="obj" /> является значением перечисления того же типа и с тем же базовым значением, что и у этого экземпляра; в противном случае — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-244"><see langword="true" /> if <paramref name="obj" /> is an enumeration value of the same type and with the same underlying value as this instance; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47ec5-245"><xref:System.Enum.Equals%28System.Object%29?displayProperty=nameWithType> Переопределения методов <xref:System.ValueType.Equals%28System.Object%29?displayProperty=nameWithType> для определения того, как члены перечисления оцениваются на равенство.</span><span class="sxs-lookup"><span data-stu-id="47ec5-245">The <xref:System.Enum.Equals%28System.Object%29?displayProperty=nameWithType> method overrides <xref:System.ValueType.Equals%28System.Object%29?displayProperty=nameWithType> to define how enumeration members are evaluated for equality.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="47ec5-246">В следующем примере показано использование метода <xref:System.Enum.Equals%2A>.</span><span class="sxs-lookup"><span data-stu-id="47ec5-246">The following example illustrates the use of the <xref:System.Enum.Equals%2A> method.</span></span>  
  
 [!code-cpp[enumequals#1](~/samples/snippets/cpp/VS_Snippets_CLR/enumequals/CPP/EnumEquals.cpp#1)]
 [!code-csharp[enumequals#1](~/samples/snippets/csharp/VS_Snippets_CLR/enumequals/CS/EnumEquals.cs#1)]
 [!code-vb[enumequals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enumequals/VB/EnumEquals.vb#1)]  
  
 <span data-ttu-id="47ec5-247">В следующем примере определяются два типа перечисления `SledDog` и `WorkDog`.</span><span class="sxs-lookup"><span data-stu-id="47ec5-247">The following example defines two enumeration types, `SledDog` and `WorkDog`.</span></span> <span data-ttu-id="47ec5-248">`SledDog` Перечисление имеет два члена `SledDog.AlaskanMalamute` и `SledDog.Malamute`, имеющие одинаковое базовое значение.</span><span class="sxs-lookup"><span data-stu-id="47ec5-248">The `SledDog` enumeration has two members, `SledDog.AlaskanMalamute` and `SledDog.Malamute`, that have the same underlying value.</span></span> <span data-ttu-id="47ec5-249">Вызов <xref:System.Enum.Equals%2A> метод указывает, что эти значения равны, так как их базовые значения совпадают.</span><span class="sxs-lookup"><span data-stu-id="47ec5-249">The call to the <xref:System.Enum.Equals%2A> method indicates that these values are equal because their underlying values are the same.</span></span> <span data-ttu-id="47ec5-250">`SledDog.Malamute` И `WorkDog.Newfoundland` члены имеют тем же базовым значением, несмотря на то, что они представляют типы перечисления.</span><span class="sxs-lookup"><span data-stu-id="47ec5-250">The `SledDog.Malamute` and `WorkDog.Newfoundland` members have the same underlying value, although they represent different enumeration types.</span></span> <span data-ttu-id="47ec5-251">Вызов <xref:System.Enum.Equals%2A> метод указывает, что эти значения не равны.</span><span class="sxs-lookup"><span data-stu-id="47ec5-251">A call to the <xref:System.Enum.Equals%2A> method indicates that these values are not equal.</span></span>  
  
 [!code-csharp[System.Enum.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.equals/cs/enumequals.cs#1)]
 [!code-vb[System.Enum.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.equals/vb/enumequals.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Enum.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (Type enumType, object value, string format);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Format(class System.Type enumType, object value, string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.Format(System.Type,System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Format (enumType As Type, value As Object, format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Format(Type ^ enumType, System::Object ^ value, System::String ^ format);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="47ec5-252">Тип перечисления преобразуемого значения.</span><span class="sxs-lookup"><span data-stu-id="47ec5-252">The enumeration type of the value to convert.</span></span></param>
        <param name="value"><span data-ttu-id="47ec5-253">Преобразуемое значение.</span><span class="sxs-lookup"><span data-stu-id="47ec5-253">The value to convert.</span></span></param>
        <param name="format"><span data-ttu-id="47ec5-254">Используемый формат вывода.</span><span class="sxs-lookup"><span data-stu-id="47ec5-254">The output format to use.</span></span></param>
        <summary><span data-ttu-id="47ec5-255">Преобразует указанное значение заданного перечислимого типа в эквивалентное строковое представление в соответствии с заданным форматом.</span><span class="sxs-lookup"><span data-stu-id="47ec5-255">Converts the specified value of a specified enumerated type to its equivalent string representation according to the specified format.</span></span></summary>
        <returns><span data-ttu-id="47ec5-256">Строковое представление параметра <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-256">A string representation of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47ec5-257">В следующей таблице показаны допустимые значения для `format` параметра.</span><span class="sxs-lookup"><span data-stu-id="47ec5-257">The following table shows the valid values for the `format` parameter.</span></span>  
  
|<span data-ttu-id="47ec5-258">Формат</span><span class="sxs-lookup"><span data-stu-id="47ec5-258">Format</span></span>|<span data-ttu-id="47ec5-259">Описание:</span><span class="sxs-lookup"><span data-stu-id="47ec5-259">Description</span></span>|  
|------------|-----------------|  
|<span data-ttu-id="47ec5-260">"G" или "g"</span><span class="sxs-lookup"><span data-stu-id="47ec5-260">"G" or "g"</span></span>|<span data-ttu-id="47ec5-261">Если `value` — именованная константа перечисления, имя этой константы равна возвращен; в противном случае — десятичное `value` возвращается.</span><span class="sxs-lookup"><span data-stu-id="47ec5-261">If `value` is equal to a named enumerated constant, the name of that constant is returned; otherwise, the decimal equivalent of `value` is returned.</span></span><br /><br /> <span data-ttu-id="47ec5-262">Предположим, например, только одна Перечислимая константа называется красный, и его значение равно 1.</span><span class="sxs-lookup"><span data-stu-id="47ec5-262">For example, suppose the only enumerated constant is named Red, and its value is 1.</span></span> <span data-ttu-id="47ec5-263">Если `value` указана как 1, этот формат возвращает «Red».</span><span class="sxs-lookup"><span data-stu-id="47ec5-263">If `value` is specified as 1, this format returns "Red".</span></span> <span data-ttu-id="47ec5-264">Однако если `value` равно 2, этот формат возвращает «2».</span><span class="sxs-lookup"><span data-stu-id="47ec5-264">However, if `value` is specified as 2, this format returns "2".</span></span><br /><br /> <span data-ttu-id="47ec5-265">- или -</span><span class="sxs-lookup"><span data-stu-id="47ec5-265">-or-</span></span><br /><br /> <span data-ttu-id="47ec5-266">Если <xref:System.FlagsAttribute> настраиваемый атрибут применяется к перечислению `value` рассматривается как битовое поле, которое содержит один или несколько флагов, которые состоят из одного или нескольких битов.</span><span class="sxs-lookup"><span data-stu-id="47ec5-266">If the <xref:System.FlagsAttribute> custom attribute is applied to the enumeration, `value` is treated as a bit field that contains one or more flags that consist of one or more bits.</span></span><br /><br /> <span data-ttu-id="47ec5-267">Если `value` равным сочетание называется перечислимые константы, возвращается список имен этих констант разделителями.</span><span class="sxs-lookup"><span data-stu-id="47ec5-267">If `value` is equal to a combination of named enumerated constants, a delimiter-separated list of the names of those constants is returned.</span></span> <span data-ttu-id="47ec5-268">`value` флаги, переходя от флага с наибольшим значением до наименьшего значения, выполняется поиск.</span><span class="sxs-lookup"><span data-stu-id="47ec5-268">`value` is searched for flags, going from the flag with the largest value to the smallest value.</span></span> <span data-ttu-id="47ec5-269">Для каждого флага, соответствующего битовому полю в `value`, имя константы связано со списком с разделителями.</span><span class="sxs-lookup"><span data-stu-id="47ec5-269">For each flag that corresponds to a bit field in `value`, the name of the constant is concatenated to the delimiter-separated list.</span></span> <span data-ttu-id="47ec5-270">Значение флага исключается из дальнейшего рассмотрения, и продолжается поиск следующего флага.</span><span class="sxs-lookup"><span data-stu-id="47ec5-270">The value of that flag is then excluded from further consideration, and the search continues for the next flag.</span></span><br /><br /> <span data-ttu-id="47ec5-271">Если `value` не равно сочетание именованных перечисленных констант, десятичный эквивалент `value` возвращается.</span><span class="sxs-lookup"><span data-stu-id="47ec5-271">If `value` is not equal to a combination of named enumerated constants, the decimal equivalent of `value` is returned.</span></span>|  
|<span data-ttu-id="47ec5-272">"X" или "x"</span><span class="sxs-lookup"><span data-stu-id="47ec5-272">"X" or "x"</span></span>|<span data-ttu-id="47ec5-273">Представляет `value` в шестнадцатеричном формате без начальных символов «0 x».</span><span class="sxs-lookup"><span data-stu-id="47ec5-273">Represents `value` in hexadecimal format without a leading "0x".</span></span>|  
|<span data-ttu-id="47ec5-274">"D" или "d"</span><span class="sxs-lookup"><span data-stu-id="47ec5-274">"D" or "d"</span></span>|<span data-ttu-id="47ec5-275">Представляет `value` в десятичном формате.</span><span class="sxs-lookup"><span data-stu-id="47ec5-275">Represents `value` in decimal form.</span></span>|  
|<span data-ttu-id="47ec5-276">"F" или "f"</span><span class="sxs-lookup"><span data-stu-id="47ec5-276">"F" or "f"</span></span>|<span data-ttu-id="47ec5-277">Работает аналогично «G» или «g», за исключением того, <xref:System.FlagsAttribute> необязательно должен присутствовать в <xref:System.Enum> объявления.</span><span class="sxs-lookup"><span data-stu-id="47ec5-277">Behaves identically to "G" or "g", except that the <xref:System.FlagsAttribute> is not required to be present on the <xref:System.Enum> declaration.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="47ec5-278">Следующий пример иллюстрирует использование `Format` в контексте `Enum`.</span><span class="sxs-lookup"><span data-stu-id="47ec5-278">The following example illustrates the use of `Format` in the context of `Enum`.</span></span>  
  
 [!code-cpp[enumformat#1](~/samples/snippets/cpp/VS_Snippets_CLR/enumformat/CPP/EnumFormat.cpp#1)]
 [!code-csharp[enumformat#1](~/samples/snippets/csharp/VS_Snippets_CLR/enumformat/CS/EnumFormat.cs#1)]
 [!code-vb[enumformat#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enumformat/VB/EnumFormat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="47ec5-279">Значение параметра <paramref name="enumType" />, <paramref name="value" /> или <paramref name="format" /> равно <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-279">The <paramref name="enumType" />, <paramref name="value" />, or <paramref name="format" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="47ec5-280">Параметр <paramref name="enumType" /> не принадлежит к типу <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-280">The <paramref name="enumType" /> parameter is not an <see cref="T:System.Enum" /> type.</span></span>  
  
 <span data-ttu-id="47ec5-281">- или -</span><span class="sxs-lookup"><span data-stu-id="47ec5-281">-or-</span></span>  
  
 <span data-ttu-id="47ec5-282">Параметр <paramref name="value" /> принадлежит к перечислению, тип которого отличается от типа <paramref name="enumType" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-282">The <paramref name="value" /> is from an enumeration that differs in type from <paramref name="enumType" />.</span></span>  
  
 <span data-ttu-id="47ec5-283">- или -</span><span class="sxs-lookup"><span data-stu-id="47ec5-283">-or-</span></span>  
  
 <span data-ttu-id="47ec5-284">Тип параметра <paramref name="value" /> не является базовым типом параметра <paramref name="enumType" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-284">The type of <paramref name="value" /> is not an underlying type of <paramref name="enumType" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="47ec5-285">Недопустимое значение параметра <paramref name="format" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-285">The <paramref name="format" /> parameter contains an invalid value.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="47ec5-286"><paramref name="format" /> равняется "X", но тип перечисления неизвестен.</span><span class="sxs-lookup"><span data-stu-id="47ec5-286"><paramref name="format" /> equals "X", but the enumeration type is unknown.</span></span></exception>
        <altmember cref="M:System.Enum.ToString(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="47ec5-287">Возвращает хэш-код для значения данного экземпляра.</span><span class="sxs-lookup"><span data-stu-id="47ec5-287">Returns the hash code for the value of this instance.</span></span></summary>
        <returns><span data-ttu-id="47ec5-288">Хэш-код в виде 32-разрядного целого числа со знаком.</span><span class="sxs-lookup"><span data-stu-id="47ec5-288">A 32-bit signed integer hash code.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetName">
      <MemberSignature Language="C#" Value="public static string GetName (Type enumType, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetName(class System.Type enumType, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.GetName(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetName (enumType As Type, value As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetName(Type ^ enumType, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="47ec5-289">Тип перечисления.</span><span class="sxs-lookup"><span data-stu-id="47ec5-289">An enumeration type.</span></span></param>
        <param name="value"><span data-ttu-id="47ec5-290">Значение определенной перечислимой константы с учетом ее базового типа.</span><span class="sxs-lookup"><span data-stu-id="47ec5-290">The value of a particular enumerated constant in terms of its underlying type.</span></span></param>
        <summary><span data-ttu-id="47ec5-291">Возвращает имя константы с заданным значением из указанного перечисления.</span><span class="sxs-lookup"><span data-stu-id="47ec5-291">Retrieves the name of the constant in the specified enumeration that has the specified value.</span></span></summary>
        <returns><span data-ttu-id="47ec5-292">Строка, содержащая имя константы перечислимого типа в <paramref name="enumType" />, значение которой равно <paramref name="value" />, или <see langword="null" />, если такая константа не найдена.</span><span class="sxs-lookup"><span data-stu-id="47ec5-292">A string containing the name of the enumerated constant in <paramref name="enumType" /> whose value is <paramref name="value" />; or <see langword="null" /> if no such constant is found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47ec5-293">Если несколько членов перечисления имеют одинаковое базовое значение <xref:System.Enum.GetName%2A> метод гарантирует, что он будет возвращать имя одного из этих членов перечисления.</span><span class="sxs-lookup"><span data-stu-id="47ec5-293">If multiple enumeration members have the same underlying value, the <xref:System.Enum.GetName%2A> method guarantees that it will return the name of one of those enumeration members.</span></span> <span data-ttu-id="47ec5-294">Однако он не гарантирует оно всегда будет возвращать имя того же члена перечисления.</span><span class="sxs-lookup"><span data-stu-id="47ec5-294">However, it does not guarantee that it will always return the name of the same enumeration member.</span></span> <span data-ttu-id="47ec5-295">В результате при несколько членов перечисления имеют то же значение, код приложения должен никогда не зависят от метода возвращения имени определенного элемента.</span><span class="sxs-lookup"><span data-stu-id="47ec5-295">As a result, when multiple enumeration members have the same value, your application code should never depend on the method returning a particular member's name.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="47ec5-296">Следующий пример иллюстрирует использование `GetName`.</span><span class="sxs-lookup"><span data-stu-id="47ec5-296">The following example illustrates the use of `GetName`.</span></span>  
  
 [!code-cpp[enumgetname#1](~/samples/snippets/cpp/VS_Snippets_CLR/enumgetname/CPP/EnumGetName.cpp#1)]
 [!code-csharp[enumgetname#1](~/samples/snippets/csharp/VS_Snippets_CLR/enumgetname/CS/EnumGetName.cs#1)]
 [!code-vb[enumgetname#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enumgetname/VB/EnumGetName.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="47ec5-297">Параметр <paramref name="enumType" /> или <paramref name="value" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-297"><paramref name="enumType" /> or <paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="47ec5-298">Параметр <paramref name="enumType" /> не является классом <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-298"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span>  
  
 <span data-ttu-id="47ec5-299">- или -</span><span class="sxs-lookup"><span data-stu-id="47ec5-299">-or-</span></span>  
  
 <span data-ttu-id="47ec5-300">Параметр <paramref name="value" /> не принадлежит к типу <paramref name="enumType" />, и его базовым типом также не является <paramref name="enumType" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-300"><paramref name="value" /> is neither of type <paramref name="enumType" /> nor does it have the same underlying type as <paramref name="enumType" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetNames">
      <MemberSignature Language="C#" Value="public static string[] GetNames (Type enumType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetNames(class System.Type enumType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.GetNames(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNames (enumType As Type) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetNames(Type ^ enumType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="47ec5-301">Тип перечисления.</span><span class="sxs-lookup"><span data-stu-id="47ec5-301">An enumeration type.</span></span></param>
        <summary><span data-ttu-id="47ec5-302">Возвращает массив имен констант в указанном перечислении.</span><span class="sxs-lookup"><span data-stu-id="47ec5-302">Retrieves an array of the names of the constants in a specified enumeration.</span></span></summary>
        <returns><span data-ttu-id="47ec5-303">Строковый массив имен констант в <paramref name="enumType" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-303">A string array of the names of the constants in <paramref name="enumType" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47ec5-304">Элементы массива, возвращаемого значения сортируются по двоичным значениям перечислимых констант (то есть их увеличивает число без знака).</span><span class="sxs-lookup"><span data-stu-id="47ec5-304">The elements of the return value array are sorted by the binary values of the enumerated constants (that is, by their unsigned magnitude).</span></span> <span data-ttu-id="47ec5-305">В следующем примере приводится отображает сведения о массиве, возвращенном <xref:System.Enum.GetNames%2A> метода для перечисления, включающий отрицательное, ноль и положительное значение.</span><span class="sxs-lookup"><span data-stu-id="47ec5-305">The following example provides displays information about the array returned by the <xref:System.Enum.GetNames%2A> method for an enumeration that includes a negative, zero, and a positive value.</span></span>  
  
 [!code-csharp[System.Enum.GetNames#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.getnames/cs/getnames1.cs#1)]
 [!code-vb[System.Enum.GetNames#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.getnames/vb/getnames1.vb#1)]  
  
 <span data-ttu-id="47ec5-306">При наличии перечислимых констант же значением, порядок соответствующих им имен не определен.</span><span class="sxs-lookup"><span data-stu-id="47ec5-306">If there are enumerated constants with same value, the order of their corresponding names is unspecified.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="47ec5-307">В следующем примере показано использование метода <xref:System.Enum.GetNames%2A>.</span><span class="sxs-lookup"><span data-stu-id="47ec5-307">The following example illustrates the use of the <xref:System.Enum.GetNames%2A> method.</span></span>  
  
 [!code-cpp[enumgetnames#1](~/samples/snippets/cpp/VS_Snippets_CLR/enumgetnames/CPP/EnumGetNames.cpp#1)]
 [!code-csharp[enumgetnames#1](~/samples/snippets/csharp/VS_Snippets_CLR/enumgetnames/CS/EnumGetNames.cs#1)]
 [!code-vb[enumgetnames#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enumgetnames/VB/EnumGetNames.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="47ec5-308">Свойство <paramref name="enumType" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-308"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="47ec5-309">Параметр <paramref name="enumType" /> — не <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-309"><paramref name="enumType" /> parameter is not an <see cref="T:System.Enum" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public TypeCode GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TypeCode GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTypeCode () As TypeCode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual TypeCode GetTypeCode();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="47ec5-310">Возвращает код типа базового типа члена этого перечисления.</span><span class="sxs-lookup"><span data-stu-id="47ec5-310">Returns the type code of the underlying type of this enumeration member.</span></span></summary>
        <returns><span data-ttu-id="47ec5-311">Код типа базового типа этого экземпляра.</span><span class="sxs-lookup"><span data-stu-id="47ec5-311">The type code of the underlying type of this instance.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="47ec5-312">Тип перечисления неизвестен.</span><span class="sxs-lookup"><span data-stu-id="47ec5-312">The enumeration type is unknown.</span></span></exception>
        <altmember cref="M:System.Enum.GetUnderlyingType(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetUnderlyingType">
      <MemberSignature Language="C#" Value="public static Type GetUnderlyingType (Type enumType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetUnderlyingType(class System.Type enumType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.GetUnderlyingType(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnderlyingType (enumType As Type) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetUnderlyingType(Type ^ enumType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="47ec5-313">Перечисление, базовый тип которого требуется получить.</span><span class="sxs-lookup"><span data-stu-id="47ec5-313">The enumeration whose underlying type will be retrieved.</span></span></param>
        <summary><span data-ttu-id="47ec5-314">Возвращает базовый тип заданного перечисления.</span><span class="sxs-lookup"><span data-stu-id="47ec5-314">Returns the underlying type of the specified enumeration.</span></span></summary>
        <returns><span data-ttu-id="47ec5-315">Базовый тип <paramref name="enumType" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-315">The underlying type of <paramref name="enumType" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47ec5-316"><xref:System.Enum> Структура позволяет значения в виде именованных констант.</span><span class="sxs-lookup"><span data-stu-id="47ec5-316">The <xref:System.Enum> structure enables values to be represented as named constants.</span></span> <span data-ttu-id="47ec5-317">Тип данных значения перечисления называется его базового типа.</span><span class="sxs-lookup"><span data-stu-id="47ec5-317">The data type of the enumeration's values is known as its underlying type.</span></span> <span data-ttu-id="47ec5-318">Например, базовый тип <xref:System.DayOfWeek> перечисления, который состоит из констант, которые представляют каждый день недели (<xref:System.DayOfWeek.Monday?displayProperty=nameWithType>, <xref:System.DayOfWeek.Tuesday?displayProperty=nameWithType>и так далее), является <xref:System.Int32>.</span><span class="sxs-lookup"><span data-stu-id="47ec5-318">For example, the underlying type of the <xref:System.DayOfWeek> enumeration, which consists of constants that represent each day of the week (<xref:System.DayOfWeek.Monday?displayProperty=nameWithType>, <xref:System.DayOfWeek.Tuesday?displayProperty=nameWithType>, and so on), is <xref:System.Int32>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="47ec5-319">В следующем примере вызывается <xref:System.Enum.GetUnderlyingType%2A> метод для отображения некоторых элементов перечисления с базовым типом.</span><span class="sxs-lookup"><span data-stu-id="47ec5-319">The following example calls the <xref:System.Enum.GetUnderlyingType%2A> method to display the underlying type of some enumeration members.</span></span>  
  
 [!code-csharp[System.Enum.GetUnderlyingType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.getunderlyingtype/cs/getunderlyingtype1.cs#1)]
 [!code-vb[System.Enum.GetUnderlyingType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.getunderlyingtype/vb/getunderlyingtype1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="47ec5-320">Свойство <paramref name="enumType" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-320"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="47ec5-321">Параметр <paramref name="enumType" /> не является классом <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-321"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.GetTypeCode" />
      </Docs>
    </Member>
    <Member MemberName="GetValues">
      <MemberSignature Language="C#" Value="public static Array GetValues (Type enumType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Array GetValues(class System.Type enumType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.GetValues(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetValues (enumType As Type) As Array" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Array ^ GetValues(Type ^ enumType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Array</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="47ec5-322">Тип перечисления.</span><span class="sxs-lookup"><span data-stu-id="47ec5-322">An enumeration type.</span></span></param>
        <summary><span data-ttu-id="47ec5-323">Возвращает массив значений констант в указанном перечислении.</span><span class="sxs-lookup"><span data-stu-id="47ec5-323">Retrieves an array of the values of the constants in a specified enumeration.</span></span></summary>
        <returns><span data-ttu-id="47ec5-324">Массив, который содержит значения констант в <paramref name="enumType" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-324">An array that contains the values of the constants in <paramref name="enumType" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47ec5-325">Элементы массива сортируются по двоичным значениям констант перечисления (то есть их увеличивает число без знака).</span><span class="sxs-lookup"><span data-stu-id="47ec5-325">The elements of the array are sorted by the binary values of the enumeration constants (that is, by their unsigned magnitude).</span></span> <span data-ttu-id="47ec5-326">В следующем примере отображаются сведения о массиве, возвращенном <xref:System.Enum.GetValues%2A> метода для перечисления, который содержит отрицательное значение, ноль и положительное значение.</span><span class="sxs-lookup"><span data-stu-id="47ec5-326">The following example displays information about the array returned by the <xref:System.Enum.GetValues%2A> method for an enumeration that includes a negative value, zero, and a positive value.</span></span>  
  
 [!code-csharp[System.Enum.GetValues#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.getvalues/cs/getvalues1.cs#1)]
 [!code-vb[System.Enum.GetValues#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.getvalues/vb/getvalues1.vb#1)]  
  
 <span data-ttu-id="47ec5-327"><xref:System.Enum.GetValues%2A> Метод возвращает массив, содержащий значение для каждого члена `enumType` перечисления.</span><span class="sxs-lookup"><span data-stu-id="47ec5-327">The <xref:System.Enum.GetValues%2A> method returns an array that contains a value for each member of the `enumType` enumeration.</span></span> <span data-ttu-id="47ec5-328">Если несколько элементов имеют то же значение, то возвращаемый массив включает повторяющиеся значения.</span><span class="sxs-lookup"><span data-stu-id="47ec5-328">If multiple members have the same value, the returned array includes duplicate values.</span></span> <span data-ttu-id="47ec5-329">В этом случае при вызове <xref:System.Enum.GetName%2A> метода с каждого значения в возвращенном массиве не восстанавливает уникальные имена, назначенных членам, которые имеют повторяющиеся значения.</span><span class="sxs-lookup"><span data-stu-id="47ec5-329">In this case, calling the <xref:System.Enum.GetName%2A> method with each value in the returned array does not restore the unique names assigned to members that have duplicate values.</span></span> <span data-ttu-id="47ec5-330">Чтобы получить все имена членов перечисления успешно, вызовите <xref:System.Enum.GetNames%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="47ec5-330">To retrieve all the names of enumeration members successfully, call the <xref:System.Enum.GetNames%2A> method.</span></span>  
  
 <span data-ttu-id="47ec5-331"><xref:System.Enum.GetValues%2A> Метод нельзя вызвать с помощью отражения в контексте только отражения.</span><span class="sxs-lookup"><span data-stu-id="47ec5-331">The <xref:System.Enum.GetValues%2A> method cannot be invoked by using reflection in a reflection-only context.</span></span> <span data-ttu-id="47ec5-332">Вместо этого значение всех членов перечисления можно получить с помощью <xref:System.Type.GetFields%2A?displayProperty=nameWithType> метод, чтобы получить массив <xref:System.Reflection.FieldInfo> объекты, представляющие члены перечисления и затем вызвать <xref:System.Reflection.FieldInfo.GetRawConstantValue%2A?displayProperty=nameWithType> метод для каждого элемента массива.</span><span class="sxs-lookup"><span data-stu-id="47ec5-332">Instead, you can retrieve the value of all enumeration members by using the <xref:System.Type.GetFields%2A?displayProperty=nameWithType> method to get an array of <xref:System.Reflection.FieldInfo> objects that represent enumeration members and then call the <xref:System.Reflection.FieldInfo.GetRawConstantValue%2A?displayProperty=nameWithType> method on each element of the array.</span></span> <span data-ttu-id="47ec5-333">В следующем примере демонстрируется этот способ.</span><span class="sxs-lookup"><span data-stu-id="47ec5-333">The following example illustrates this technique.</span></span> <span data-ttu-id="47ec5-334">Требуется определить следующее перечисление в сборке с именем Enumerations.dll:</span><span class="sxs-lookup"><span data-stu-id="47ec5-334">It requires that you define the following enumeration in an assembly named Enumerations.dll:</span></span>  
  
 [!code-csharp[System.Enum.GetValues#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.getvalues/cs/getvalues_reflectiononly.cs#2)]
 [!code-vb[System.Enum.GetValues#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.getvalues/vb/getvalues_reflectiononly.vb#2)]  
  
 <span data-ttu-id="47ec5-335">Сборка загружается в контекст только для отражения <xref:System.Type> , представляющий `Pets` перечисления создается, массив <xref:System.Reflection.FieldInfo> извлекаются объекты, а на консоль выводятся значения полей.</span><span class="sxs-lookup"><span data-stu-id="47ec5-335">The assembly is loaded in a reflection-only context, a <xref:System.Type> object that represents the `Pets` enumeration is instantiated, an array of <xref:System.Reflection.FieldInfo> objects is retrieved, and the field values are displayed to the console.</span></span>  
  
 [!code-csharp[System.Enum.GetValues#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.getvalues/cs/getvalues_reflectiononly.cs#3)]
 [!code-vb[System.Enum.GetValues#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.getvalues/vb/getvalues_reflectiononly.vb#3)]  
  
   
  
## Examples  
 <span data-ttu-id="47ec5-336">Следующий пример иллюстрирует использование <xref:System.Enum.GetValues%2A>.</span><span class="sxs-lookup"><span data-stu-id="47ec5-336">The following example illustrates the use of <xref:System.Enum.GetValues%2A>.</span></span>  
  
 [!code-cpp[enumgetvalues#1](~/samples/snippets/cpp/VS_Snippets_CLR/enumgetvalues/CPP/EnumGetValues.cpp#1)]
 [!code-csharp[enumgetvalues#1](~/samples/snippets/csharp/VS_Snippets_CLR/enumgetvalues/CS/EnumGetValues.cs#1)]
 [!code-vb[enumgetvalues#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enumgetvalues/VB/EnumGetValues.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="47ec5-337">Свойство <paramref name="enumType" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-337"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="47ec5-338">Параметр <paramref name="enumType" /> не является классом <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-338"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="47ec5-339">Метод вызывается с помощью отражения в контексте только для отражения.</span><span class="sxs-lookup"><span data-stu-id="47ec5-339">The method is invoked by reflection in a reflection-only context,</span></span>  
  
 <span data-ttu-id="47ec5-340">- или -</span><span class="sxs-lookup"><span data-stu-id="47ec5-340">-or-</span></span>  
  
 <span data-ttu-id="47ec5-341"><paramref name="enumType" /> — это тип из сборки, загруженной в контексте только для отражения.</span><span class="sxs-lookup"><span data-stu-id="47ec5-341"><paramref name="enumType" /> is a type from an assembly loaded in a reflection-only context.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="HasFlag">
      <MemberSignature Language="C#" Value="public bool HasFlag (Enum flag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasFlag(class System.Enum flag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.HasFlag(System.Enum)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasFlag (flag As Enum) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HasFlag(Enum ^ flag);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flag" Type="System.Enum" />
      </Parameters>
      <Docs>
        <param name="flag"><span data-ttu-id="47ec5-342">Значение перечисления.</span><span class="sxs-lookup"><span data-stu-id="47ec5-342">An enumeration value.</span></span></param>
        <summary><span data-ttu-id="47ec5-343">Определяет, установлены ли в текущем экземпляре одно или несколько битовых полей.</span><span class="sxs-lookup"><span data-stu-id="47ec5-343">Determines whether one or more bit fields are set in the current instance.</span></span></summary>
        <returns>
          <span data-ttu-id="47ec5-344">Значение <see langword="true" />, если одно или несколько битовых полей, установленных в параметре <paramref name="flag" />, также установлены в текущем экземпляре; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-344"><see langword="true" /> if the bit field or bit fields that are set in <paramref name="flag" /> are also set in the current instance; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47ec5-345"><xref:System.Enum.HasFlag%2A> Метод возвращает результат следующего логического выражения.</span><span class="sxs-lookup"><span data-stu-id="47ec5-345">The <xref:System.Enum.HasFlag%2A> method returns the result of the following Boolean expression.</span></span>  
  
```  
thisInstance And flag = flag   
```  
  
 <span data-ttu-id="47ec5-346">Если базовое значение `flag` равен нулю, метод возвращает `true`.</span><span class="sxs-lookup"><span data-stu-id="47ec5-346">If the underlying value of `flag` is zero, the method returns `true`.</span></span> <span data-ttu-id="47ec5-347">Если такое поведение нежелательно, можно использовать <xref:System.Enum.Equals%2A> метод для проверки на равенство с нуля и вызовите <xref:System.Enum.HasFlag%2A> только если базовое значение `flag` не равно нулю, как показано в следующем примере.</span><span class="sxs-lookup"><span data-stu-id="47ec5-347">If this behavior is not desirable, you can use the <xref:System.Enum.Equals%2A> method to test for equality with zero and call <xref:System.Enum.HasFlag%2A> only if the underlying value of `flag` is non-zero, as the following example illustrates.</span></span>  
  
 [!code-csharp[System.Enum.HasFlag#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.hasflag/cs/hasflag0.cs#1)]
 [!code-vb[System.Enum.HasFlag#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.hasflag/vb/hasflag0.vb#1)]  
  
 <span data-ttu-id="47ec5-348"><xref:System.Enum.HasFlag%2A> Метод предназначен для использования с типами перечисления, отмеченные <xref:System.FlagsAttribute> атрибутов и может использоваться, чтобы определить, заданы ли несколько битовых полей.</span><span class="sxs-lookup"><span data-stu-id="47ec5-348">The <xref:System.Enum.HasFlag%2A> method is designed to be used with enumeration types that are marked with the <xref:System.FlagsAttribute> attribute and can be used to determine whether multiple bit fields are set.</span></span> <span data-ttu-id="47ec5-349">Для типов перечисления, которые не отмечены <xref:System.FlagsAttribute> атрибут, либо вызвать <xref:System.Enum.Equals%2A> метода или <xref:System.Enum.CompareTo%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="47ec5-349">For enumeration types that are not marked with the <xref:System.FlagsAttribute> attribute, call either the <xref:System.Enum.Equals%2A> method or the <xref:System.Enum.CompareTo%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="47ec5-350">В следующем примере определяется `ItemsOrdered` перечисление, отражающее категории товаров, которые клиент заказать в ресторане.</span><span class="sxs-lookup"><span data-stu-id="47ec5-350">The following example defines an `ItemsOrdered` enumeration that reflects categories of items that a customer can order in a restaurant.</span></span> <span data-ttu-id="47ec5-351">В примере проверяется, является ли ранее клиент заказы закуску и напитков.</span><span class="sxs-lookup"><span data-stu-id="47ec5-351">The example tests whether the customer has ordered both an entrée and a beverage.</span></span>  
  
 [!code-csharp[System.Enum.HasFlag#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.hasflag/cs/hasflag1.cs#2)]
 [!code-vb[System.Enum.HasFlag#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.hasflag/vb/hasflag1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="47ec5-352"><paramref name="flag" /> является типом, отличным от текущего экземпляра.</span><span class="sxs-lookup"><span data-stu-id="47ec5-352"><paramref name="flag" /> is a different type than the current instance.</span></span></exception>
        <altmember cref="T:System.FlagsAttribute" />
        <altmember cref="M:System.Enum.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsDefined">
      <MemberSignature Language="C#" Value="public static bool IsDefined (Type enumType, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDefined(class System.Type enumType, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.IsDefined(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsDefined (enumType As Type, value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDefined(Type ^ enumType, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="47ec5-353">Тип перечисления.</span><span class="sxs-lookup"><span data-stu-id="47ec5-353">An enumeration type.</span></span></param>
        <param name="value"><span data-ttu-id="47ec5-354">Значение или имя константы в <c>enumType</c>.</span><span class="sxs-lookup"><span data-stu-id="47ec5-354">The value or name of a constant in <c>enumType</c>.</span></span></param>
        <summary><span data-ttu-id="47ec5-355">Возвращает логическое значение, указывающее, существует ли заданное целочисленное значение или его имя в виде строки в заданном перечислении.</span><span class="sxs-lookup"><span data-stu-id="47ec5-355">Returns a Boolean telling whether a given integral value, or its name as a string, exists in a specified enumeration.</span></span></summary>
        <returns>
          <span data-ttu-id="47ec5-356"><see langword="true" />, если константа в <paramref name="enumType" /> имеет значение <paramref name="value" />; в противном случае — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-356"><see langword="true" /> if a constant in <paramref name="enumType" /> has a value equal to <paramref name="value" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47ec5-357">`value` Параметр может быть любым из следующих действий:</span><span class="sxs-lookup"><span data-stu-id="47ec5-357">The `value` parameter can be any of the following:</span></span>  
  
-   <span data-ttu-id="47ec5-358">Любой член типа `enumType`.</span><span class="sxs-lookup"><span data-stu-id="47ec5-358">Any member of type `enumType`.</span></span>  
  
-   <span data-ttu-id="47ec5-359">Переменная, значение которого является элементом перечисления типа `enumType`.</span><span class="sxs-lookup"><span data-stu-id="47ec5-359">A variable whose value is an enumeration member of type `enumType`.</span></span>  
  
-   <span data-ttu-id="47ec5-360">Строковое представление имени члена перечисления.</span><span class="sxs-lookup"><span data-stu-id="47ec5-360">The string representation of the name of an enumeration member.</span></span> <span data-ttu-id="47ec5-361">Символы в строке должны иметь же регистре, что имя члена перечисления.</span><span class="sxs-lookup"><span data-stu-id="47ec5-361">The characters in the string must have the same case as the enumeration member name.</span></span>  
  
-   <span data-ttu-id="47ec5-362">Значение базового типа `enumType`.</span><span class="sxs-lookup"><span data-stu-id="47ec5-362">A value of the underlying type of `enumType`.</span></span>  
  
 <span data-ttu-id="47ec5-363">Если констант в `enumType` определяют набор битовых полей и `value` содержит значения, имена или базового значения несколько битовых полей <xref:System.Enum.IsDefined%2A> возвращает `false`.</span><span class="sxs-lookup"><span data-stu-id="47ec5-363">If the constants in `enumType` define a set of bit fields and `value` contains the values, names, or underlying values of multiple bit fields, the <xref:System.Enum.IsDefined%2A> method returns `false`.</span></span> <span data-ttu-id="47ec5-364">Другими словами, для перечислений, которые определяют набор битовых полей, этот метод определяет только принадлежность одного битового поля к перечислению.</span><span class="sxs-lookup"><span data-stu-id="47ec5-364">In other words, for enumerations that define a set of bit fields, the method determines only whether a single bit field belongs to the enumeration.</span></span> <span data-ttu-id="47ec5-365">Чтобы определить, установлены ли несколько битовых полей в тип перечисления, помеченного <xref:System.FlagsAttribute> атрибут, вы можете вызвать <xref:System.Enum.HasFlag%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="47ec5-365">To determine whether multiple bit fields are set in an enumeration type that is tagged with the <xref:System.FlagsAttribute> attribute, you can call the <xref:System.Enum.HasFlag%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="47ec5-366">В следующем примере определяется перечисление с именем `PetType` , состоящее из отдельных битовых полей.</span><span class="sxs-lookup"><span data-stu-id="47ec5-366">The following example defines an enumeration named `PetType` that consists of individual bit fields.</span></span> <span data-ttu-id="47ec5-367">Затем он вызывает <xref:System.Enum.IsDefined%2A> метод с возможную основную значений перечисления, строковых имен и значений составных, возникающие в результате установка нескольких битовых полей.</span><span class="sxs-lookup"><span data-stu-id="47ec5-367">It then calls the <xref:System.Enum.IsDefined%2A> method with possible underlying enumeration values, string names, and composite values that result from setting multiple bit fields.</span></span>  
  
 [!code-csharp[System.Enum.IsDefined#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Enum.IsDefined/cs/isdefined1.cs#1)]
 [!code-vb[System.Enum.IsDefined#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Enum.IsDefined/vb/IsDefined1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="47ec5-368">Параметр <paramref name="enumType" /> или <paramref name="value" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-368"><paramref name="enumType" /> or <paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="47ec5-369">Параметр <paramref name="enumType" /> не является классом <see langword="Enum" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-369"><paramref name="enumType" /> is not an <see langword="Enum" />.</span></span>  
  
 <span data-ttu-id="47ec5-370">- или -</span><span class="sxs-lookup"><span data-stu-id="47ec5-370">-or-</span></span>  
  
 <span data-ttu-id="47ec5-371">Тип <paramref name="value" /> является перечислением, однако не является перечислением типа <paramref name="enumType" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-371">The type of <paramref name="value" /> is an enumeration, but it is not an enumeration of type <paramref name="enumType" />.</span></span>  
  
 <span data-ttu-id="47ec5-372">- или -</span><span class="sxs-lookup"><span data-stu-id="47ec5-372">-or-</span></span>  
  
 <span data-ttu-id="47ec5-373">Тип параметра <paramref name="value" /> не является базовым типом параметра <paramref name="enumType" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-373">The type of <paramref name="value" /> is not an underlying type of <paramref name="enumType" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="47ec5-374"><paramref name="value" /> не является типом <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" />, <see cref="T:System.UInt64" /> или <see cref="T:System.String" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-374"><paramref name="value" /> is not type <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" />, or <see cref="T:System.UInt64" />, or <see cref="T:System.String" />.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="47ec5-375">Если <paramref name="enumType" /> представляет собой перечисление, определяется с помощью <see cref="T:System.FlagsAttribute" /> атрибута, метод возвращает <see langword="false" /> Если несколько битовые поля в <paramref name="value" /> заданы, но <paramref name="value" /> не соответствует значение составного перечисления или если <paramref name="value" /> представляет собой объединение строк имен несколько битовых флагов.</span><span class="sxs-lookup"><span data-stu-id="47ec5-375">If <paramref name="enumType" /> is an enumeration that is defined by using the <see cref="T:System.FlagsAttribute" /> attribute, the method returns <see langword="false" /> if multiple bit fields in <paramref name="value" /> are set but <paramref name="value" /> does not correspond to a composite enumeration value, or if <paramref name="value" /> is a string concatenation of the names of multiple bit flags.</span></span> <span data-ttu-id="47ec5-376">В следующем примере <c>животных</c> перечисления задан <see cref="T:System.FlagsAttribute" /> атрибута.</span><span class="sxs-lookup"><span data-stu-id="47ec5-376">In the following example, a <c>Pets</c> enumeration is defined with the <see cref="T:System.FlagsAttribute" /> attribute.</span></span> <span data-ttu-id="47ec5-377"><see cref="M:System.Enum.IsDefined(System.Type,System.Object)" /> Возвращает <see langword="false" /> при передаче его значение перечисления, которое имеет два битовых полей (<c>Pets.Dog</c> и <c>Pets.Cat</c>) установлен, и при передаче его строковое представление, значение перечисления («Dog, Cat»).</span><span class="sxs-lookup"><span data-stu-id="47ec5-377">The <see cref="M:System.Enum.IsDefined(System.Type,System.Object)" /> method returns <see langword="false" /> when you pass it an enumeration value that has two bit fields (<c>Pets.Dog</c> and <c>Pets.Cat</c>) set, and when you pass it the string representation of that enumeration value ("Dog, Cat").</span></span>  
  
 [!code-csharp[System.Enum.IsDefined#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Enum.IsDefined/cs/isdefined2.cs#2)]
 [!code-vb[System.Enum.IsDefined#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Enum.IsDefined/vb/isdefined2.vb#2)]  
  
 <span data-ttu-id="47ec5-378">Можно определить, заданы ли несколько битовых полей, вызвав <see cref="M:System.Enum.HasFlag(System.Enum)" /> метод.</span><span class="sxs-lookup"><span data-stu-id="47ec5-378">You can determine whether multiple bit fields are set by calling the <see cref="M:System.Enum.HasFlag(System.Enum)" /> method.</span></span></para>
        </block>
        <altmember cref="M:System.Enum.GetName(System.Type,System.Object)" />
        <altmember cref="M:System.Enum.GetNames(System.Type)" />
        <altmember cref="M:System.Enum.GetValues(System.Type)" />
        <altmember cref="M:System.Enum.HasFlag(System.Enum)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="47ec5-379">Преобразует строковое представление имени или числового значения одной или нескольких перечислимых констант в эквивалентный перечислимый объект.</span><span class="sxs-lookup"><span data-stu-id="47ec5-379">Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</span></span></summary>
        <altmember cref="M:System.Enum.TryParse``1(System.String,``0@)" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static object Parse (Type enumType, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Parse(class System.Type enumType, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.Parse(System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (enumType As Type, value As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Parse(Type ^ enumType, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="47ec5-380">Тип перечисления.</span><span class="sxs-lookup"><span data-stu-id="47ec5-380">An enumeration type.</span></span></param>
        <param name="value"><span data-ttu-id="47ec5-381">Строка, содержащая имя или значение для преобразования.</span><span class="sxs-lookup"><span data-stu-id="47ec5-381">A string containing the name or value to convert.</span></span></param>
        <summary><span data-ttu-id="47ec5-382">Преобразует строковое представление имени или числового значения одной или нескольких перечислимых констант в эквивалентный перечислимый объект.</span><span class="sxs-lookup"><span data-stu-id="47ec5-382">Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</span></span></summary>
        <returns><span data-ttu-id="47ec5-383">Объект типа <paramref name="enumType" />, значение которого представлено параметром <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-383">An object of type <paramref name="enumType" /> whose value is represented by <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47ec5-384">`value` Параметр содержит строковое представление базового значения члена перечисления или именованную константу или список именованных констант, разделенных запятыми (,).</span><span class="sxs-lookup"><span data-stu-id="47ec5-384">The `value` parameter contains the string representation of an enumeration member's underlying value or named constant, or a list of named constants delimited by commas (,).</span></span> <span data-ttu-id="47ec5-385">Один или несколько пробелов может указываться перед или после каждого значения, имя или запятая в `value`.</span><span class="sxs-lookup"><span data-stu-id="47ec5-385">One or more blank spaces can precede or follow each value, name, or comma in `value`.</span></span> <span data-ttu-id="47ec5-386">Если `value` — это список, возвращается значение указанных имен с помощью битового оператора `OR` операции.</span><span class="sxs-lookup"><span data-stu-id="47ec5-386">If `value` is a list, the return value is the value of the specified names combined with a bitwise `OR` operation.</span></span>  
  
 <span data-ttu-id="47ec5-387">Если `value` — имя, которое не соответствует именованной константе `enumType`, метод создает <xref:System.ArgumentException>.</span><span class="sxs-lookup"><span data-stu-id="47ec5-387">If `value` is a name that does not correspond to a named constant of `enumType`, the method throws an <xref:System.ArgumentException>.</span></span> <span data-ttu-id="47ec5-388">Если `value` строковое представление целого числа со знаком, которое не представляет базовое значение `enumType` перечисления, метод возвращает член перечисления, базовым значением является `value` преобразуется в целочисленный тип.</span><span class="sxs-lookup"><span data-stu-id="47ec5-388">If `value` is the string representation of an integer that does not represent an underlying value of the `enumType` enumeration, the method returns an enumeration member whose underlying value is `value` converted to an integral type.</span></span> <span data-ttu-id="47ec5-389">Если такое поведение нежелательно, вызовите <xref:System.Enum.IsDefined%2A> метод, чтобы удостовериться в наличии фактически является членом определенной строковое представление целого числа `enumType`.</span><span class="sxs-lookup"><span data-stu-id="47ec5-389">If this behavior is undesirable, call the <xref:System.Enum.IsDefined%2A> method to ensure that a particular string representation of an integer is actually a member of `enumType`.</span></span> <span data-ttu-id="47ec5-390">В следующем примере определяется `Colors` перечисления, вызывает <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> метод для преобразования строк в их соответствующие значения перечисления и вызовы <xref:System.Enum.IsDefined%2A> значения метод, чтобы гарантировать базовых конкретного целочисленного значения в `Colors` перечисления.</span><span class="sxs-lookup"><span data-stu-id="47ec5-390">The following example defines a `Colors` enumeration, calls the <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> method to convert strings to their corresponding enumeration values, and calls the <xref:System.Enum.IsDefined%2A> method to ensure that particular integral values are underlying values in the `Colors` enumeration.</span></span>  
  
 [!code-csharp[System.Enum.Parse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Enum.Parse/cs/ParseExample1.cs#1)]
 [!code-vb[System.Enum.Parse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Enum.Parse/vb/ParseExample1.vb#1)]  
  
 <span data-ttu-id="47ec5-391">Эта операция учитывает регистр.</span><span class="sxs-lookup"><span data-stu-id="47ec5-391">This operation is case-sensitive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="47ec5-392">В следующем примере используется <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> метода для синтаксического анализа массив строк, которые создаются путем вызова <xref:System.Enum.GetNames%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="47ec5-392">The following example uses the <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> method to parse an array of strings that are created by calling the <xref:System.Enum.GetNames%2A> method.</span></span> <span data-ttu-id="47ec5-393">Она также использует <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> метода для синтаксического анализа значение перечисления, которое состоит из битового поля.</span><span class="sxs-lookup"><span data-stu-id="47ec5-393">It also uses the <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> method to parse an enumeration value that consists of a bit field.</span></span>  
  
 [!code-cpp[enumparse#1](~/samples/snippets/cpp/VS_Snippets_CLR/enumparse/CPP/EnumParse.cpp#1)]
 [!code-csharp[enumparse#1](~/samples/snippets/csharp/VS_Snippets_CLR/enumparse/CS/EnumParse.cs#1)]
 [!code-vb[enumparse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enumparse/VB/EnumParse.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="47ec5-394">Параметр <paramref name="enumType" /> или <paramref name="value" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-394"><paramref name="enumType" /> or <paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="47ec5-395">Параметр <paramref name="enumType" /> не является классом <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-395"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span>  
  
 <span data-ttu-id="47ec5-396">- или -</span><span class="sxs-lookup"><span data-stu-id="47ec5-396">-or-</span></span>  
  
 <span data-ttu-id="47ec5-397"><paramref name="value" /> является пустой строкой или содержит только пробелы.</span><span class="sxs-lookup"><span data-stu-id="47ec5-397"><paramref name="value" /> is either an empty string or only contains white space.</span></span>  
  
 <span data-ttu-id="47ec5-398">- или -</span><span class="sxs-lookup"><span data-stu-id="47ec5-398">-or-</span></span>  
  
 <span data-ttu-id="47ec5-399">В параметре <paramref name="value" /> задано имя, не являющееся именем одной из именованных констант, определенных для данного перечисления.</span><span class="sxs-lookup"><span data-stu-id="47ec5-399"><paramref name="value" /> is a name, but not one of the named constants defined for the enumeration.</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="47ec5-400"><paramref name="value" /> находится вне диапазона базового типа <paramref name="enumType" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-400"><paramref name="value" /> is outside the range of the underlying type of <paramref name="enumType" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static object Parse (Type enumType, string value, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Parse(class System.Type enumType, string value, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.Parse(System.Type,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (enumType As Type, value As String, ignoreCase As Boolean) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Parse(Type ^ enumType, System::String ^ value, bool ignoreCase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="47ec5-401">Тип перечисления.</span><span class="sxs-lookup"><span data-stu-id="47ec5-401">An enumeration type.</span></span></param>
        <param name="value"><span data-ttu-id="47ec5-402">Строка, содержащая имя или значение для преобразования.</span><span class="sxs-lookup"><span data-stu-id="47ec5-402">A string containing the name or value to convert.</span></span></param>
        <param name="ignoreCase">
          <span data-ttu-id="47ec5-403">Значение <see langword="true" />, чтобы игнорировать регистр; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-403"><see langword="true" /> to ignore case; <see langword="false" /> to regard case.</span></span></param>
        <summary><span data-ttu-id="47ec5-404">Преобразует строковое представление имени или числового значения одной или нескольких перечислимых констант в эквивалентный перечислимый объект.</span><span class="sxs-lookup"><span data-stu-id="47ec5-404">Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</span></span> <span data-ttu-id="47ec5-405">Параметр указывает, учитывается ли в операции регистр.</span><span class="sxs-lookup"><span data-stu-id="47ec5-405">A parameter specifies whether the operation is case-insensitive.</span></span></summary>
        <returns><span data-ttu-id="47ec5-406">Объект типа <paramref name="enumType" />, значение которого представлено параметром <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-406">An object of type <paramref name="enumType" /> whose value is represented by <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47ec5-407">`value` Параметр содержит строковое представление базового значения члена перечисления или именованную константу или список именованных констант, разделенных запятыми (,).</span><span class="sxs-lookup"><span data-stu-id="47ec5-407">The `value` parameter contains the string representation of an enumeration member's underlying value or named constant, or a list of named constants delimited by commas (,).</span></span> <span data-ttu-id="47ec5-408">Один или несколько пробелов может указываться перед или после каждого значения, имя или запятая в `value`.</span><span class="sxs-lookup"><span data-stu-id="47ec5-408">One or more blank spaces can precede or follow each value, name, or comma in `value`.</span></span> <span data-ttu-id="47ec5-409">Если `value` — это список, возвращается значение указанных имен с помощью битового оператора `OR` операции.</span><span class="sxs-lookup"><span data-stu-id="47ec5-409">If `value` is a list, the return value is the value of the specified names combined with a bitwise `OR` operation.</span></span>  
  
 <span data-ttu-id="47ec5-410">Если `value` — имя, которое не соответствует именованной константе `enumType`, метод создает <xref:System.ArgumentException>.</span><span class="sxs-lookup"><span data-stu-id="47ec5-410">If `value` is a name that does not correspond to a named constant of `enumType`, the method throws an <xref:System.ArgumentException>.</span></span> <span data-ttu-id="47ec5-411">Если `value` строковое представление целого числа со знаком, которое не представляет базовое значение `enumType` перечисления, метод возвращает член перечисления, базовым значением является `value` преобразуется в целочисленный тип.</span><span class="sxs-lookup"><span data-stu-id="47ec5-411">If `value` is the string representation of an integer that does not represent an underlying value of the `enumType` enumeration, the method returns an enumeration member whose underlying value is `value` converted to an integral type.</span></span> <span data-ttu-id="47ec5-412">Если такое поведение нежелательно, вызовите <xref:System.Enum.IsDefined%2A> метод, чтобы удостовериться в наличии фактически является членом определенной строковое представление целого числа `enumType`.</span><span class="sxs-lookup"><span data-stu-id="47ec5-412">If this behavior is undesirable, call the <xref:System.Enum.IsDefined%2A> method to ensure that a particular string representation of an integer is actually a member of `enumType`.</span></span> <span data-ttu-id="47ec5-413">В следующем примере определяется `Colors` перечисления, вызывает <xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29> метод для преобразования строк в их соответствующие значения перечисления и вызовы <xref:System.Enum.IsDefined%2A> значения метод, чтобы гарантировать базовых конкретного целочисленного значения в `Colors` перечисления.</span><span class="sxs-lookup"><span data-stu-id="47ec5-413">The following example defines a `Colors` enumeration, calls the <xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29> method to convert strings to their corresponding enumeration values, and calls the <xref:System.Enum.IsDefined%2A> method to ensure that particular integral values are underlying values in the `Colors` enumeration.</span></span>  
  
 [!code-csharp[System.Enum.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Enum.Parse/cs/ParseExample2.cs#2)]
 [!code-vb[System.Enum.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Enum.Parse/vb/ParseExample2.vb#2)]  
  
 <span data-ttu-id="47ec5-414">`ignoreCase` Параметр указывает, учитывается ли регистр в этой операции.</span><span class="sxs-lookup"><span data-stu-id="47ec5-414">The `ignoreCase` parameter specifies whether this operation is case-sensitive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="47ec5-415">В следующем примере используется <xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29> метода для синтаксического анализа массив строк, которые создаются путем вызова <xref:System.Enum.GetNames%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="47ec5-415">The following example uses the <xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29> method to parse an array of strings that are created by calling the <xref:System.Enum.GetNames%2A> method.</span></span> <span data-ttu-id="47ec5-416">Она также использует <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> метода для синтаксического анализа значение перечисления, которое состоит из битового поля.</span><span class="sxs-lookup"><span data-stu-id="47ec5-416">It also uses the <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> method to parse an enumeration value that consists of a bit field.</span></span>  
  
 [!code-csharp[System.Enum.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Enum.Parse/cs/ParseExample2.cs#2)]
 [!code-vb[System.Enum.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Enum.Parse/vb/ParseExample2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="47ec5-417">Параметр <paramref name="enumType" /> или <paramref name="value" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-417"><paramref name="enumType" /> or <paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="47ec5-418">Параметр <paramref name="enumType" /> не является классом <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-418"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span>  
  
 <span data-ttu-id="47ec5-419">- или -</span><span class="sxs-lookup"><span data-stu-id="47ec5-419">-or-</span></span>  
  
 <span data-ttu-id="47ec5-420"><paramref name="value" /> является пустой строкой ("") или содержит только пробелы.</span><span class="sxs-lookup"><span data-stu-id="47ec5-420"><paramref name="value" /> is either an empty string ("") or only contains white space.</span></span>  
  
 <span data-ttu-id="47ec5-421">- или -</span><span class="sxs-lookup"><span data-stu-id="47ec5-421">-or-</span></span>  
  
 <span data-ttu-id="47ec5-422">В параметре <paramref name="value" /> задано имя, не являющееся именем одной из именованных констант, определенных для данного перечисления.</span><span class="sxs-lookup"><span data-stu-id="47ec5-422"><paramref name="value" /> is a name, but not one of the named constants defined for the enumeration.</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="47ec5-423"><paramref name="value" /> находится вне диапазона базового типа <paramref name="enumType" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-423"><paramref name="value" /> is outside the range of the underlying type of <paramref name="enumType" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Parse&lt;TEnum&gt;">
      <MemberSignature Language="C#" Value="public static TEnum Parse&lt;TEnum&gt; (string value) where TEnum : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TEnum Parse&lt;struct .ctor (class System.ValueType) TEnum&gt;(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.Parse``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse(Of TEnum As Structure) (value As String) As TEnum" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEnum&gt;&#xA; where TEnum : value class static TEnum Parse(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TEnum</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEnum">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="TEnum">To be added.</typeparam>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse&lt;TEnum&gt;">
      <MemberSignature Language="C#" Value="public static TEnum Parse&lt;TEnum&gt; (string value, bool ignoreCase) where TEnum : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TEnum Parse&lt;struct .ctor (class System.ValueType) TEnum&gt;(string value, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.Parse``1(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse(Of TEnum As Structure) (value As String, ignoreCase As Boolean) As TEnum" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEnum&gt;&#xA; where TEnum : value class static TEnum Parse(System::String ^ value, bool ignoreCase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TEnum</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEnum">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TEnum">To be added.</typeparam>
        <param name="value">To be added.</param>
        <param name="ignoreCase">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.GetTypeCode">
      <MemberSignature Language="C#" Value="TypeCode IConvertible.GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.TypeCode System.IConvertible.GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Function GetTypeCode () As TypeCode Implements IConvertible.GetTypeCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual TypeCode System.IConvertible.GetTypeCode() = IConvertible::GetTypeCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToBoolean">
      <MemberSignature Language="C#" Value="bool IConvertible.ToBoolean (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToBoolean(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToBoolean (provider As IFormatProvider) As Boolean Implements IConvertible.ToBoolean" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.IConvertible.ToBoolean(IFormatProvider ^ provider) = IConvertible::ToBoolean;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToBoolean(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="47ec5-424">Объект, предоставляющий сведения о форматировании для определенного языка и региональных параметров.</span><span class="sxs-lookup"><span data-stu-id="47ec5-424">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="47ec5-425">Преобразует текущее значение в логическое значение на основе его базового типа.</span><span class="sxs-lookup"><span data-stu-id="47ec5-425">Converts the current value to a Boolean value based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="47ec5-426">Этот член всегда выбрасывает исключение.</span><span class="sxs-lookup"><span data-stu-id="47ec5-426">This member always throws an exception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47ec5-427">В настоящий момент не реализовано.</span><span class="sxs-lookup"><span data-stu-id="47ec5-427">Currently not implemented.</span></span> <span data-ttu-id="47ec5-428">Всегда создает исключение.</span><span class="sxs-lookup"><span data-stu-id="47ec5-428">Always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="47ec5-429">Во всех случаях.</span><span class="sxs-lookup"><span data-stu-id="47ec5-429">In all cases.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToByte">
      <MemberSignature Language="C#" Value="byte IConvertible.ToByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int8 System.IConvertible.ToByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToByte (provider As IFormatProvider) As Byte Implements IConvertible.ToByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Byte System.IConvertible.ToByte(IFormatProvider ^ provider) = IConvertible::ToByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="47ec5-430">Объект, предоставляющий сведения о форматировании для определенного языка и региональных параметров.</span><span class="sxs-lookup"><span data-stu-id="47ec5-430">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="47ec5-431">Преобразует текущее значение в 8-битовое целое число без знака на основе базового типа.</span><span class="sxs-lookup"><span data-stu-id="47ec5-431">Converts the current value to an 8-bit unsigned integer based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="47ec5-432">Преобразованное значение.</span><span class="sxs-lookup"><span data-stu-id="47ec5-432">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47ec5-433">Использует <xref:System.Convert> для выполнения преобразования.</span><span class="sxs-lookup"><span data-stu-id="47ec5-433">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToChar">
      <MemberSignature Language="C#" Value="char IConvertible.ToChar (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance char System.IConvertible.ToChar(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToChar(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToChar (provider As IFormatProvider) As Char Implements IConvertible.ToChar" />
      <MemberSignature Language="C++ CLI" Value=" virtual char System.IConvertible.ToChar(IFormatProvider ^ provider) = IConvertible::ToChar;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToChar(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="47ec5-434">Объект, предоставляющий сведения о форматировании для определенного языка и региональных параметров.</span><span class="sxs-lookup"><span data-stu-id="47ec5-434">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="47ec5-435">Преобразует текущее значение в символ Юникода на основе его базового типа.</span><span class="sxs-lookup"><span data-stu-id="47ec5-435">Converts the current value to a Unicode character based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="47ec5-436">Этот член всегда выбрасывает исключение.</span><span class="sxs-lookup"><span data-stu-id="47ec5-436">This member always throws an exception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47ec5-437">В настоящий момент не реализовано.</span><span class="sxs-lookup"><span data-stu-id="47ec5-437">Currently not implemented.</span></span> <span data-ttu-id="47ec5-438">Всегда создает исключение.</span><span class="sxs-lookup"><span data-stu-id="47ec5-438">Always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="47ec5-439">Во всех случаях.</span><span class="sxs-lookup"><span data-stu-id="47ec5-439">In all cases.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDateTime">
      <MemberSignature Language="C#" Value="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToDateTime(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDateTime (provider As IFormatProvider) As DateTime Implements IConvertible.ToDateTime" />
      <MemberSignature Language="C++ CLI" Value=" virtual DateTime System.IConvertible.ToDateTime(IFormatProvider ^ provider) = IConvertible::ToDateTime;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDateTime(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="47ec5-440">Объект, предоставляющий сведения о форматировании для определенного языка и региональных параметров.</span><span class="sxs-lookup"><span data-stu-id="47ec5-440">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="47ec5-441">Преобразует текущее значение в значение типа <see cref="T:System.DateTime" /> на основе его базового типа.</span><span class="sxs-lookup"><span data-stu-id="47ec5-441">Converts the current value to a <see cref="T:System.DateTime" /> based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="47ec5-442">Этот член всегда выбрасывает исключение.</span><span class="sxs-lookup"><span data-stu-id="47ec5-442">This member always throws an exception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47ec5-443">В настоящий момент не реализовано.</span><span class="sxs-lookup"><span data-stu-id="47ec5-443">Currently not implemented.</span></span> <span data-ttu-id="47ec5-444">Всегда создает исключение.</span><span class="sxs-lookup"><span data-stu-id="47ec5-444">Always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="47ec5-445">Во всех случаях.</span><span class="sxs-lookup"><span data-stu-id="47ec5-445">In all cases.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDecimal">
      <MemberSignature Language="C#" Value="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToDecimal(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDecimal (provider As IFormatProvider) As Decimal Implements IConvertible.ToDecimal" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Decimal System.IConvertible.ToDecimal(IFormatProvider ^ provider) = IConvertible::ToDecimal;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDecimal(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="47ec5-446">Объект, предоставляющий сведения о форматировании для определенного языка и региональных параметров.</span><span class="sxs-lookup"><span data-stu-id="47ec5-446">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="47ec5-447">Преобразует текущее значение в значение типа <see cref="T:System.Decimal" /> на основе его базового типа.</span><span class="sxs-lookup"><span data-stu-id="47ec5-447">Converts the current value to a <see cref="T:System.Decimal" /> based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="47ec5-448">Этот член всегда выбрасывает исключение.</span><span class="sxs-lookup"><span data-stu-id="47ec5-448">This member always throws an exception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47ec5-449">В настоящий момент не реализовано.</span><span class="sxs-lookup"><span data-stu-id="47ec5-449">Currently not implemented.</span></span> <span data-ttu-id="47ec5-450">Всегда создает исключение.</span><span class="sxs-lookup"><span data-stu-id="47ec5-450">Always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="47ec5-451">Во всех случаях.</span><span class="sxs-lookup"><span data-stu-id="47ec5-451">In all cases.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDouble">
      <MemberSignature Language="C#" Value="double IConvertible.ToDouble (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToDouble(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDouble (provider As IFormatProvider) As Double Implements IConvertible.ToDouble" />
      <MemberSignature Language="C++ CLI" Value=" virtual double System.IConvertible.ToDouble(IFormatProvider ^ provider) = IConvertible::ToDouble;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDouble(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="47ec5-452">Объект, предоставляющий сведения о форматировании для определенного языка и региональных параметров.</span><span class="sxs-lookup"><span data-stu-id="47ec5-452">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="47ec5-453">Преобразует текущее значение объекта в число двойной точности с плавающей запятой на основе его базового типа.</span><span class="sxs-lookup"><span data-stu-id="47ec5-453">Converts the current value to a double-precision floating point number based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="47ec5-454">Этот член всегда выбрасывает исключение.</span><span class="sxs-lookup"><span data-stu-id="47ec5-454">This member always throws an exception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47ec5-455">В настоящий момент не реализовано.</span><span class="sxs-lookup"><span data-stu-id="47ec5-455">Currently not implemented.</span></span> <span data-ttu-id="47ec5-456">Всегда создает исключение.</span><span class="sxs-lookup"><span data-stu-id="47ec5-456">Always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="47ec5-457">Во всех случаях.</span><span class="sxs-lookup"><span data-stu-id="47ec5-457">In all cases.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt16">
      <MemberSignature Language="C#" Value="short IConvertible.ToInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt16 (provider As IFormatProvider) As Short Implements IConvertible.ToInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual short System.IConvertible.ToInt16(IFormatProvider ^ provider) = IConvertible::ToInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="47ec5-458">Объект, предоставляющий сведения о форматировании для определенного языка и региональных параметров.</span><span class="sxs-lookup"><span data-stu-id="47ec5-458">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="47ec5-459">Преобразует текущее значение в 16-битовое целое число со знаком на основе его базового типа.</span><span class="sxs-lookup"><span data-stu-id="47ec5-459">Converts the current value to a 16-bit signed integer based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="47ec5-460">Преобразованное значение.</span><span class="sxs-lookup"><span data-stu-id="47ec5-460">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47ec5-461">Использует <xref:System.Convert> для выполнения преобразования.</span><span class="sxs-lookup"><span data-stu-id="47ec5-461">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt32">
      <MemberSignature Language="C#" Value="int IConvertible.ToInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt32 (provider As IFormatProvider) As Integer Implements IConvertible.ToInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IConvertible.ToInt32(IFormatProvider ^ provider) = IConvertible::ToInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="47ec5-462">Объект, предоставляющий сведения о форматировании для определенного языка и региональных параметров.</span><span class="sxs-lookup"><span data-stu-id="47ec5-462">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="47ec5-463">Преобразует текущее значение в 32-битовое целое число со знаком на основе его базового типа.</span><span class="sxs-lookup"><span data-stu-id="47ec5-463">Converts the current value to a 32-bit signed integer based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="47ec5-464">Преобразованное значение.</span><span class="sxs-lookup"><span data-stu-id="47ec5-464">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47ec5-465">Использует <xref:System.Convert> для выполнения преобразования.</span><span class="sxs-lookup"><span data-stu-id="47ec5-465">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt64">
      <MemberSignature Language="C#" Value="long IConvertible.ToInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt64 (provider As IFormatProvider) As Long Implements IConvertible.ToInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual long System.IConvertible.ToInt64(IFormatProvider ^ provider) = IConvertible::ToInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="47ec5-466">Объект, предоставляющий сведения о форматировании для определенного языка и региональных параметров.</span><span class="sxs-lookup"><span data-stu-id="47ec5-466">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="47ec5-467">Преобразует текущее значение в 64-битовое целое число со знаком на основе его базового типа.</span><span class="sxs-lookup"><span data-stu-id="47ec5-467">Converts the current value to a 64-bit signed integer based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="47ec5-468">Преобразованное значение.</span><span class="sxs-lookup"><span data-stu-id="47ec5-468">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47ec5-469">Использует <xref:System.Convert> для выполнения преобразования.</span><span class="sxs-lookup"><span data-stu-id="47ec5-469">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSByte">
      <MemberSignature Language="C#" Value="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToSByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSByte (provider As IFormatProvider) As SByte Implements IConvertible.ToSByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::SByte System.IConvertible.ToSByte(IFormatProvider ^ provider) = IConvertible::ToSByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="47ec5-470">Объект, предоставляющий сведения о форматировании для определенного языка и региональных параметров.</span><span class="sxs-lookup"><span data-stu-id="47ec5-470">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="47ec5-471">Преобразует текущее значение в 8-битовое целое число со знаком на основе его базового типа.</span><span class="sxs-lookup"><span data-stu-id="47ec5-471">Converts the current value to an 8-bit signed integer based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="47ec5-472">Преобразованное значение.</span><span class="sxs-lookup"><span data-stu-id="47ec5-472">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47ec5-473">Использует <xref:System.Convert> для выполнения преобразования.</span><span class="sxs-lookup"><span data-stu-id="47ec5-473">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSingle">
      <MemberSignature Language="C#" Value="float IConvertible.ToSingle (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToSingle(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSingle (provider As IFormatProvider) As Single Implements IConvertible.ToSingle" />
      <MemberSignature Language="C++ CLI" Value=" virtual float System.IConvertible.ToSingle(IFormatProvider ^ provider) = IConvertible::ToSingle;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSingle(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="47ec5-474">Объект, предоставляющий сведения о форматировании для определенного языка и региональных параметров.</span><span class="sxs-lookup"><span data-stu-id="47ec5-474">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="47ec5-475">Преобразует текущее значение в число с плавающей запятой одиночной точности на основе его базового типа.</span><span class="sxs-lookup"><span data-stu-id="47ec5-475">Converts the current value to a single-precision floating-point number based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="47ec5-476">Этот член всегда выбрасывает исключение.</span><span class="sxs-lookup"><span data-stu-id="47ec5-476">This member always throws an exception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47ec5-477">В настоящий момент не реализовано.</span><span class="sxs-lookup"><span data-stu-id="47ec5-477">Currently not implemented.</span></span> <span data-ttu-id="47ec5-478">Всегда создает исключение.</span><span class="sxs-lookup"><span data-stu-id="47ec5-478">Always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="47ec5-479">Во всех случаях.</span><span class="sxs-lookup"><span data-stu-id="47ec5-479">In all cases.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToString">
      <MemberSignature Language="C#" Value="string IConvertible.ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.IConvertible.ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToString (provider As IFormatProvider) As String Implements IConvertible.ToString" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.IConvertible.ToString(IFormatProvider ^ provider) = IConvertible::ToString;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The provider argument is not used. Please use ToString().")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToType">
      <MemberSignature Language="C#" Value="object IConvertible.ToType (Type type, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.IConvertible.ToType(class System.Type type, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToType(System.Type,System.IFormatProvider)" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.IConvertible.ToType(Type ^ type, IFormatProvider ^ provider) = IConvertible::ToType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToType(System.Type,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="47ec5-480">Целевой тип преобразования.</span><span class="sxs-lookup"><span data-stu-id="47ec5-480">The type to convert to.</span></span></param>
        <param name="provider"><span data-ttu-id="47ec5-481">Объект, предоставляющий сведения о форматировании для определенного языка и региональных параметров.</span><span class="sxs-lookup"><span data-stu-id="47ec5-481">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="47ec5-482">Преобразует текущее значение к заданному типу на основе его базового типа.</span><span class="sxs-lookup"><span data-stu-id="47ec5-482">Converts the current value to a specified type based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="47ec5-483">Преобразованное значение.</span><span class="sxs-lookup"><span data-stu-id="47ec5-483">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47ec5-484">Использует <xref:System.Convert> для выполнения преобразования.</span><span class="sxs-lookup"><span data-stu-id="47ec5-484">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt16">
      <MemberSignature Language="C#" Value="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int16 System.IConvertible.ToUInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToUInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt16 (provider As IFormatProvider) As UShort Implements IConvertible.ToUInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt16 System.IConvertible.ToUInt16(IFormatProvider ^ provider) = IConvertible::ToUInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="47ec5-485">Объект, предоставляющий сведения о форматировании для определенного языка и региональных параметров.</span><span class="sxs-lookup"><span data-stu-id="47ec5-485">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="47ec5-486">Преобразует текущее значение в 16-битовое целое число без знака на основе его базового типа.</span><span class="sxs-lookup"><span data-stu-id="47ec5-486">Converts the current value to a 16-bit unsigned integer based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="47ec5-487">Преобразованное значение.</span><span class="sxs-lookup"><span data-stu-id="47ec5-487">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47ec5-488">Использует <xref:System.Convert> для выполнения преобразования.</span><span class="sxs-lookup"><span data-stu-id="47ec5-488">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt32">
      <MemberSignature Language="C#" Value="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int32 System.IConvertible.ToUInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToUInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt32 (provider As IFormatProvider) As UInteger Implements IConvertible.ToUInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt32 System.IConvertible.ToUInt32(IFormatProvider ^ provider) = IConvertible::ToUInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="47ec5-489">Объект, предоставляющий сведения о форматировании для определенного языка и региональных параметров.</span><span class="sxs-lookup"><span data-stu-id="47ec5-489">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="47ec5-490">Преобразует текущее значение в 32-битовое целое число без знака на основе его базового типа.</span><span class="sxs-lookup"><span data-stu-id="47ec5-490">Converts the current value to a 32-bit unsigned integer based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="47ec5-491">Преобразованное значение.</span><span class="sxs-lookup"><span data-stu-id="47ec5-491">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47ec5-492">Использует <xref:System.Convert> для выполнения преобразования.</span><span class="sxs-lookup"><span data-stu-id="47ec5-492">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt64">
      <MemberSignature Language="C#" Value="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int64 System.IConvertible.ToUInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToUInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt64 (provider As IFormatProvider) As ULong Implements IConvertible.ToUInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt64 System.IConvertible.ToUInt64(IFormatProvider ^ provider) = IConvertible::ToUInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="47ec5-493">Объект, предоставляющий сведения о форматировании для определенного языка и региональных параметров.</span><span class="sxs-lookup"><span data-stu-id="47ec5-493">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="47ec5-494">Преобразует текущее значение в 64-битовое целое число без знака на основе его базового типа.</span><span class="sxs-lookup"><span data-stu-id="47ec5-494">Converts the current value to a 64-bit unsigned integer based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="47ec5-495">Преобразованное значение.</span><span class="sxs-lookup"><span data-stu-id="47ec5-495">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47ec5-496">Использует <xref:System.Convert> для выполнения преобразования.</span><span class="sxs-lookup"><span data-stu-id="47ec5-496">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IFormattable.ToString">
      <MemberSignature Language="C#" Value="string IFormattable.ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.IFormattable.ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IFormattable#ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToString (format As String, provider As IFormatProvider) As String Implements IFormattable.ToString" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.IFormattable.ToString(System::String ^ format, IFormatProvider ^ provider) = IFormattable::ToString;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The provider argument is not used. Please use ToString(String).")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">To be added.</param>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToObject">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="47ec5-497">Преобразует значение заданного целого числа в член перечисления.</span><span class="sxs-lookup"><span data-stu-id="47ec5-497">Converts a specified integer value to an enumeration member.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As Byte) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, System::Byte value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="47ec5-498">Тип перечисления, который необходимо вернуть.</span><span class="sxs-lookup"><span data-stu-id="47ec5-498">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="47ec5-499">Значение, которое необходимо преобразовать в член перечисления.</span><span class="sxs-lookup"><span data-stu-id="47ec5-499">The value to convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="47ec5-500">Преобразует значение заданного 8-разрядного целого числа в член перечисления.</span><span class="sxs-lookup"><span data-stu-id="47ec5-500">Converts the specified 8-bit unsigned integer to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="47ec5-501">Экземпляр перечисления, которому присвоено значение <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-501">An instance of the enumeration set to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47ec5-502"><xref:System.Enum.ToObject%28System.Type%2CSystem.Byte%29> Метод преобразует `value` член перечисления, базовым значением является `value`.</span><span class="sxs-lookup"><span data-stu-id="47ec5-502">The <xref:System.Enum.ToObject%28System.Type%2CSystem.Byte%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="47ec5-503">Обратите внимание, что преобразование выполнится успешно, даже если значение выходит за границы `enumType` члены.</span><span class="sxs-lookup"><span data-stu-id="47ec5-503">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="47ec5-504">Чтобы убедиться, что `value` является допустимым базовое значение `enumType` перечисления, передать его в <xref:System.Enum.IsDefined%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="47ec5-504">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="47ec5-505">Этот метод преобразования возвращает значение типа <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="47ec5-505">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="47ec5-506">Затем можно привести или преобразовать его в объект типа `enumType`.</span><span class="sxs-lookup"><span data-stu-id="47ec5-506">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="47ec5-507">Свойство <paramref name="enumType" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-507"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="47ec5-508">Параметр <paramref name="enumType" /> не является классом <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-508"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As Short) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, short value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="47ec5-509">Тип перечисления, который необходимо вернуть.</span><span class="sxs-lookup"><span data-stu-id="47ec5-509">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="47ec5-510">Значение, которое необходимо преобразовать в член перечисления.</span><span class="sxs-lookup"><span data-stu-id="47ec5-510">The value to convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="47ec5-511">Преобразует значение заданного 16-разрядного знакового целого числа в член перечисления.</span><span class="sxs-lookup"><span data-stu-id="47ec5-511">Converts the specified 16-bit signed integer to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="47ec5-512">Экземпляр перечисления, которому присвоено значение <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-512">An instance of the enumeration set to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47ec5-513"><xref:System.Enum.ToObject%28System.Type%2CSystem.Int16%29> Метод преобразует `value` член перечисления, базовым значением является `value`.</span><span class="sxs-lookup"><span data-stu-id="47ec5-513">The <xref:System.Enum.ToObject%28System.Type%2CSystem.Int16%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="47ec5-514">Обратите внимание, что преобразование выполнится успешно, даже если значение выходит за границы `enumType` члены.</span><span class="sxs-lookup"><span data-stu-id="47ec5-514">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="47ec5-515">Чтобы убедиться, что `value` является допустимым базовое значение `enumType` перечисления, передать его в <xref:System.Enum.IsDefined%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="47ec5-515">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="47ec5-516">Этот метод преобразования возвращает значение типа <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="47ec5-516">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="47ec5-517">Затем можно привести или преобразовать его в объект типа `enumType`.</span><span class="sxs-lookup"><span data-stu-id="47ec5-517">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="47ec5-518">Свойство <paramref name="enumType" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-518"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="47ec5-519">Параметр <paramref name="enumType" /> не является классом <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-519"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As Integer) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, int value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="47ec5-520">Тип перечисления, который необходимо вернуть.</span><span class="sxs-lookup"><span data-stu-id="47ec5-520">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="47ec5-521">Значение, которое необходимо преобразовать в член перечисления.</span><span class="sxs-lookup"><span data-stu-id="47ec5-521">The value to convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="47ec5-522">Преобразует значение заданного 32-разрядного знакового целого числа в член перечисления.</span><span class="sxs-lookup"><span data-stu-id="47ec5-522">Converts the specified 32-bit signed integer to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="47ec5-523">Экземпляр перечисления, которому присвоено значение <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-523">An instance of the enumeration set to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47ec5-524"><xref:System.Enum.ToObject%28System.Type%2CSystem.Int32%29> Метод преобразует `value` член перечисления, базовым значением является `value`.</span><span class="sxs-lookup"><span data-stu-id="47ec5-524">The <xref:System.Enum.ToObject%28System.Type%2CSystem.Int32%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="47ec5-525">Обратите внимание, что преобразование выполнится успешно, даже если значение выходит за границы `enumType` члены.</span><span class="sxs-lookup"><span data-stu-id="47ec5-525">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="47ec5-526">Чтобы убедиться, что `value` является допустимым базовое значение `enumType` перечисления, передать его в <xref:System.Enum.IsDefined%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="47ec5-526">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="47ec5-527">Этот метод преобразования возвращает значение типа <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="47ec5-527">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="47ec5-528">Затем можно привести или преобразовать его в объект типа `enumType`.</span><span class="sxs-lookup"><span data-stu-id="47ec5-528">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="47ec5-529">Свойство <paramref name="enumType" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-529"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="47ec5-530">Параметр <paramref name="enumType" /> не является классом <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-530"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As Long) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="47ec5-531">Тип перечисления, который необходимо вернуть.</span><span class="sxs-lookup"><span data-stu-id="47ec5-531">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="47ec5-532">Значение, которое необходимо преобразовать в член перечисления.</span><span class="sxs-lookup"><span data-stu-id="47ec5-532">The value to convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="47ec5-533">Преобразует значение заданного 64-разрядного знакового целого числа в член перечисления.</span><span class="sxs-lookup"><span data-stu-id="47ec5-533">Converts the specified 64-bit signed integer to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="47ec5-534">Экземпляр перечисления, которому присвоено значение <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-534">An instance of the enumeration set to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47ec5-535"><xref:System.Enum.ToObject%28System.Type%2CSystem.Int64%29> Метод преобразует `value` член перечисления, базовым значением является `value`.</span><span class="sxs-lookup"><span data-stu-id="47ec5-535">The <xref:System.Enum.ToObject%28System.Type%2CSystem.Int64%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="47ec5-536">Обратите внимание, что преобразование выполнится успешно, даже если значение выходит за границы `enumType` члены.</span><span class="sxs-lookup"><span data-stu-id="47ec5-536">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="47ec5-537">Чтобы убедиться, что `value` является допустимым базовое значение `enumType` перечисления, передать его в <xref:System.Enum.IsDefined%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="47ec5-537">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="47ec5-538">Этот метод преобразования возвращает значение типа <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="47ec5-538">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="47ec5-539">Затем можно привести или преобразовать его в объект типа `enumType`.</span><span class="sxs-lookup"><span data-stu-id="47ec5-539">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="47ec5-540">Свойство <paramref name="enumType" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-540"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="47ec5-541">Параметр <paramref name="enumType" /> не является классом <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-541"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="47ec5-542">Тип перечисления, который необходимо вернуть.</span><span class="sxs-lookup"><span data-stu-id="47ec5-542">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="47ec5-543">Значение, которое необходимо преобразовать в член перечисления.</span><span class="sxs-lookup"><span data-stu-id="47ec5-543">The value convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="47ec5-544">Преобразует заданный объект с целочисленным значением в член перечисления.</span><span class="sxs-lookup"><span data-stu-id="47ec5-544">Converts the specified object with an integer value to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="47ec5-545">Объект перечисления, значение которого равно <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-545">An enumeration object whose value is <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47ec5-546"><xref:System.Enum.ToObject%28System.Type%2CSystem.Object%29> Метод преобразует целочисленное значение `value` член перечисления, базовым значением является `value`.</span><span class="sxs-lookup"><span data-stu-id="47ec5-546">The <xref:System.Enum.ToObject%28System.Type%2CSystem.Object%29> method converts the integral value `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="47ec5-547">Обратите внимание, что преобразование выполнится успешно, даже если значение выходит за границы `enumType` члены.</span><span class="sxs-lookup"><span data-stu-id="47ec5-547">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="47ec5-548">Чтобы убедиться, что `value` является допустимым базовое значение `enumType` перечисления, передать его в <xref:System.Enum.IsDefined%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="47ec5-548">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="47ec5-549">Этот метод преобразования возвращает значение типа <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="47ec5-549">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="47ec5-550">Затем можно привести или преобразовать его в объект типа `enumType`.</span><span class="sxs-lookup"><span data-stu-id="47ec5-550">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="47ec5-551">Параметр <paramref name="enumType" /> или <paramref name="value" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-551"><paramref name="enumType" /> or <paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="47ec5-552">Параметр <paramref name="enumType" /> не является классом <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-552"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span>  
  
 <span data-ttu-id="47ec5-553">- или -</span><span class="sxs-lookup"><span data-stu-id="47ec5-553">-or-</span></span>  
  
 <span data-ttu-id="47ec5-554">Типом <paramref name="value" /> не является <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" />, или <see cref="T:System.UInt64" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-554"><paramref name="value" /> is not type <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" />, or <see cref="T:System.UInt64" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As SByte) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, System::SByte value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="47ec5-555">Тип перечисления, который необходимо вернуть.</span><span class="sxs-lookup"><span data-stu-id="47ec5-555">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="47ec5-556">Значение, которое необходимо преобразовать в член перечисления.</span><span class="sxs-lookup"><span data-stu-id="47ec5-556">The value to convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="47ec5-557">Преобразует значение заданного 8-разрядного знакового целого числа в член перечисления.</span><span class="sxs-lookup"><span data-stu-id="47ec5-557">Converts the specified 8-bit signed integer value to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="47ec5-558">Экземпляр перечисления, которому присвоено значение <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-558">An instance of the enumeration set to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47ec5-559"><xref:System.Enum.ToObject%28System.Type%2CSystem.SByte%29> Метод преобразует `value` член перечисления, базовым значением является `value`.</span><span class="sxs-lookup"><span data-stu-id="47ec5-559">The <xref:System.Enum.ToObject%28System.Type%2CSystem.SByte%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="47ec5-560">Обратите внимание, что преобразование выполнится успешно, даже если значение выходит за границы `enumType` члены.</span><span class="sxs-lookup"><span data-stu-id="47ec5-560">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="47ec5-561">Чтобы убедиться, что `value` является допустимым базовое значение `enumType` перечисления, передать его в <xref:System.Enum.IsDefined%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="47ec5-561">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="47ec5-562">Этот метод преобразования возвращает значение типа <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="47ec5-562">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="47ec5-563">Затем можно привести или преобразовать его в объект типа `enumType`.</span><span class="sxs-lookup"><span data-stu-id="47ec5-563">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="47ec5-564">Свойство <paramref name="enumType" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-564"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="47ec5-565">Параметр <paramref name="enumType" /> не является классом <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-565"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As UShort) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, System::UInt16 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="47ec5-566">Тип перечисления, который необходимо вернуть.</span><span class="sxs-lookup"><span data-stu-id="47ec5-566">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="47ec5-567">Значение, которое необходимо преобразовать в член перечисления.</span><span class="sxs-lookup"><span data-stu-id="47ec5-567">The value to convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="47ec5-568">Преобразует значение заданного 16-разрядного целого числа без знака в член перечисления.</span><span class="sxs-lookup"><span data-stu-id="47ec5-568">Converts the specified 16-bit unsigned integer value to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="47ec5-569">Экземпляр перечисления, которому присвоено значение <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-569">An instance of the enumeration set to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47ec5-570"><xref:System.Enum.ToObject%28System.Type%2CSystem.UInt16%29> Метод преобразует `value` член перечисления, базовым значением является `value`.</span><span class="sxs-lookup"><span data-stu-id="47ec5-570">The <xref:System.Enum.ToObject%28System.Type%2CSystem.UInt16%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="47ec5-571">Обратите внимание, что преобразование выполнится успешно, даже если значение выходит за границы `enumType` члены.</span><span class="sxs-lookup"><span data-stu-id="47ec5-571">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="47ec5-572">Чтобы убедиться, что `value` является допустимым базовое значение `enumType` перечисления, передать его в <xref:System.Enum.IsDefined%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="47ec5-572">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="47ec5-573">Этот метод преобразования возвращает значение типа <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="47ec5-573">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="47ec5-574">Затем можно привести или преобразовать его в объект типа `enumType`.</span><span class="sxs-lookup"><span data-stu-id="47ec5-574">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="47ec5-575">Свойство <paramref name="enumType" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-575"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="47ec5-576">Параметр <paramref name="enumType" /> не является классом <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-576"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As UInteger) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, System::UInt32 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="47ec5-577">Тип перечисления, который необходимо вернуть.</span><span class="sxs-lookup"><span data-stu-id="47ec5-577">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="47ec5-578">Значение, которое необходимо преобразовать в член перечисления.</span><span class="sxs-lookup"><span data-stu-id="47ec5-578">The value to convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="47ec5-579">Преобразует значение заданного 32-разрядного целого числа без знака в член перечисления.</span><span class="sxs-lookup"><span data-stu-id="47ec5-579">Converts the specified 32-bit unsigned integer value to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="47ec5-580">Экземпляр перечисления, которому присвоено значение <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-580">An instance of the enumeration set to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47ec5-581"><xref:System.Enum.ToObject%28System.Type%2CSystem.UInt32%29> Метод преобразует `value` член перечисления, базовым значением является `value`.</span><span class="sxs-lookup"><span data-stu-id="47ec5-581">The <xref:System.Enum.ToObject%28System.Type%2CSystem.UInt32%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="47ec5-582">Обратите внимание, что преобразование выполнится успешно, даже если значение выходит за границы `enumType` члены.</span><span class="sxs-lookup"><span data-stu-id="47ec5-582">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="47ec5-583">Чтобы убедиться, что `value` является допустимым базовое значение `enumType` перечисления, передать его в <xref:System.Enum.IsDefined%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="47ec5-583">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="47ec5-584">Этот метод преобразования возвращает значение типа <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="47ec5-584">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="47ec5-585">Затем можно привести или преобразовать его в объект типа `enumType`.</span><span class="sxs-lookup"><span data-stu-id="47ec5-585">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="47ec5-586">Свойство <paramref name="enumType" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-586"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="47ec5-587">Параметр <paramref name="enumType" /> не является классом <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-587"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As ULong) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, System::UInt64 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="47ec5-588">Тип перечисления, который необходимо вернуть.</span><span class="sxs-lookup"><span data-stu-id="47ec5-588">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="47ec5-589">Значение, которое необходимо преобразовать в член перечисления.</span><span class="sxs-lookup"><span data-stu-id="47ec5-589">The value to convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="47ec5-590">Преобразует значение заданного 64-разрядного целого числа без знака в член перечисления.</span><span class="sxs-lookup"><span data-stu-id="47ec5-590">Converts the specified 64-bit unsigned integer value to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="47ec5-591">Экземпляр перечисления, которому присвоено значение <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-591">An instance of the enumeration set to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47ec5-592"><xref:System.Enum.ToObject%28System.Type%2CSystem.UInt64%29> Метод преобразует `value` член перечисления, базовым значением является `value`.</span><span class="sxs-lookup"><span data-stu-id="47ec5-592">The <xref:System.Enum.ToObject%28System.Type%2CSystem.UInt64%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="47ec5-593">Обратите внимание, что преобразование выполнится успешно, даже если значение выходит за границы `enumType` члены.</span><span class="sxs-lookup"><span data-stu-id="47ec5-593">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="47ec5-594">Чтобы убедиться, что `value` является допустимым базовое значение `enumType` перечисления, передать его в <xref:System.Enum.IsDefined%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="47ec5-594">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="47ec5-595">Этот метод преобразования возвращает значение типа <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="47ec5-595">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="47ec5-596">Затем можно привести или преобразовать его в объект типа `enumType`.</span><span class="sxs-lookup"><span data-stu-id="47ec5-596">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="47ec5-597">Свойство <paramref name="enumType" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-597"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="47ec5-598">Параметр <paramref name="enumType" /> не является классом <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-598"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="47ec5-599">Преобразует значение этого экземпляра в эквивалентное ему строковое представление.</span><span class="sxs-lookup"><span data-stu-id="47ec5-599">Converts the value of this instance to its equivalent string representation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="47ec5-600">Преобразует значение этого экземпляра в эквивалентное ему строковое представление.</span><span class="sxs-lookup"><span data-stu-id="47ec5-600">Converts the value of this instance to its equivalent string representation.</span></span></summary>
        <returns><span data-ttu-id="47ec5-601">Строковое представление значения этого экземпляра.</span><span class="sxs-lookup"><span data-stu-id="47ec5-601">The string representation of the value of this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47ec5-602">Возвращаемое значение форматируется с помощью спецификатора общего формата («G»).</span><span class="sxs-lookup"><span data-stu-id="47ec5-602">The return value is formatted with the general format specifier ("G").</span></span> <span data-ttu-id="47ec5-603">То есть если <xref:System.FlagsAttribute> не применяется к этому типу перечисления и имеется именованный константа, равная значению данного экземпляра, то возвращаемое значение является строкой, содержащей имя константы.</span><span class="sxs-lookup"><span data-stu-id="47ec5-603">That is, if the <xref:System.FlagsAttribute> is not applied to this enumerated type and there is a named constant equal to the value of this instance, then the return value is a string containing the name of the constant.</span></span> <span data-ttu-id="47ec5-604">Если <xref:System.FlagsAttribute> применяется и существует представляет собой сочетание одного или нескольких именованных констант равно значению этого экземпляра, то возвращаемое значение является строкой, содержащей список имен констант разделителями.</span><span class="sxs-lookup"><span data-stu-id="47ec5-604">If the <xref:System.FlagsAttribute> is applied and there is a combination of one or more named constants equal to the value of this instance, then the return value is a string containing a delimiter-separated list of the names of the constants.</span></span> <span data-ttu-id="47ec5-605">В противном случае возвращается строковое представление числового значения этого экземпляра.</span><span class="sxs-lookup"><span data-stu-id="47ec5-605">Otherwise, the return value is the string representation of the numeric value of this instance.</span></span> <span data-ttu-id="47ec5-606">Дополнительные сведения о форматировании значений перечисления см. в разделе [строки форматов перечисления](~/docs/standard/base-types/enumeration-format-strings.md).</span><span class="sxs-lookup"><span data-stu-id="47ec5-606">For more information about formatting enumeration values, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).</span></span> <span data-ttu-id="47ec5-607">Дополнительные сведения о форматировании в общем см. в разделе [типы форматирования](~/docs/standard/base-types/formatting-types.md).</span><span class="sxs-lookup"><span data-stu-id="47ec5-607">For more information about formatting in general, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="47ec5-608">В следующем примере показано преобразование перечисляемого значения в строку.</span><span class="sxs-lookup"><span data-stu-id="47ec5-608">The following example demonstrates converting an enumerated value to a string.</span></span>  
  
 [!code-cpp[Classic Enum.ToString2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Enum.ToString2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Enum.ToString2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Enum.ToString2 Example/CS/source.cs#1)]
 [!code-vb[Classic Enum.ToString2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Enum.ToString2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para><span data-ttu-id="47ec5-609">Если несколько членов перечисления имеют одинаковое базовое значение и не удается получить строковое представление имени члена перечисления на основе его базового значения, код не следует вносить какие-либо предположения о какое имя метода возвращается.</span><span class="sxs-lookup"><span data-stu-id="47ec5-609">If multiple enumeration members have the same underlying value and you attempt to retrieve the string representation of an enumeration member's name based on its underlying value, your code should not make any assumptions about which name the method will return.</span></span> <span data-ttu-id="47ec5-610">Например, следующее перечисление определяет два члена <c>Shade.Gray</c> и <c>Shade.Grey</c>, имеющие одинаковое базовое значение.</span><span class="sxs-lookup"><span data-stu-id="47ec5-610">For example, the following enumeration defines two members, <c>Shade.Gray</c> and <c>Shade.Grey</c>, that have the same underlying value.</span></span>  
  
 [!code-csharp[System.Enum.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tostring/cs/tostringbyvalue1.cs#1)]
 [!code-vb[System.Enum.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tostring/vb/tostringbyvalue1.vb#1)]  
  
 <span data-ttu-id="47ec5-611">Пытается извлечь имя элемента в следующий вызов метода <c>оттенок</c> перечисления, базовым значением является 1.</span><span class="sxs-lookup"><span data-stu-id="47ec5-611">The following method call attempts to retrieve the name of a member of the <c>Shade</c> enumeration whose underlying value is 1.</span></span> <span data-ttu-id="47ec5-612">Этот метод может возвращать «Gray» или «Серый», и ваш код не должен делать никаких предположений о том, какие строки будут возвращены.</span><span class="sxs-lookup"><span data-stu-id="47ec5-612">The method can return either "Gray" or "Grey", and your code should not make any assumptions about which string will be returned.</span></span>  
  
 [!code-csharp[System.Enum.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tostring/cs/tostringbyvalue1.cs#2)]
 [!code-vb[System.Enum.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tostring/vb/tostringbyvalue1.vb#2)]</para>
        </block>
        <altmember cref="M:System.Enum.Format(System.Type,System.Object,System.String)" />
        <altmember cref="M:System.Enum.Parse(System.Type,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The provider argument is not used. Please use ToString().")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="47ec5-613">(Является устаревшим.)</span><span class="sxs-lookup"><span data-stu-id="47ec5-613">(obsolete)</span></span></param>
        <summary><span data-ttu-id="47ec5-614">Перегруженная версия метода является устаревшей, вместо нее следует использовать метод <see cref="M:System.Enum.ToString" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-614">This method overload is obsolete; use <see cref="M:System.Enum.ToString" />.</span></span></summary>
        <returns><span data-ttu-id="47ec5-615">Строковое представление значения этого экземпляра.</span><span class="sxs-lookup"><span data-stu-id="47ec5-615">The string representation of the value of this instance.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="47ec5-616">Строка формата.</span><span class="sxs-lookup"><span data-stu-id="47ec5-616">A format string.</span></span></param>
        <summary><span data-ttu-id="47ec5-617">Преобразует числовое значение этого экземпляра в эквивалентное ему строковое представление с использованием указанного формата.</span><span class="sxs-lookup"><span data-stu-id="47ec5-617">Converts the value of this instance to its equivalent string representation using the specified format.</span></span></summary>
        <returns><span data-ttu-id="47ec5-618">Строковое представление значения данного экземпляра, определяемое параметром <paramref name="format" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-618">The string representation of the value of this instance as specified by <paramref name="format" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47ec5-619">`format` Параметр может содержать «G» или «g», «D» или «d», «X» или «x» и строки формата «F» или «f» (строка формата не учитывается).</span><span class="sxs-lookup"><span data-stu-id="47ec5-619">The `format` parameter can contain the "G" or "g", "D" or "d", "X" or "x", and "F" or "f" format strings (the format string is not case-sensitive).</span></span> <span data-ttu-id="47ec5-620">Если `format` — `null` или пустая строка ("»), используется Описатель общего формата («G»).</span><span class="sxs-lookup"><span data-stu-id="47ec5-620">If `format` is `null` or an empty string (""), the general format specifier ("G") is used.</span></span> <span data-ttu-id="47ec5-621">Дополнительные сведения о форматировании значений перечисления и строки форматов перечисления см. в разделе [строки форматов перечисления](~/docs/standard/base-types/enumeration-format-strings.md).</span><span class="sxs-lookup"><span data-stu-id="47ec5-621">For more information about the enumeration format strings and formatting enumeration values, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).</span></span> <span data-ttu-id="47ec5-622">Дополнительные сведения о форматировании в общем см. в разделе [типы форматирования](~/docs/standard/base-types/formatting-types.md).</span><span class="sxs-lookup"><span data-stu-id="47ec5-622">For more information about formatting in general, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="47ec5-623">Ниже приведен пример, как преобразовать перечислимое значение в строку.</span><span class="sxs-lookup"><span data-stu-id="47ec5-623">The following example demonstrates how to convert an enumerated value to a string.</span></span>  
  
 [!code-cpp[enum.tostring#1](~/samples/snippets/cpp/VS_Snippets_CLR/enum.tostring/CPP/tostr.cpp#1)]
 [!code-csharp[enum.tostring#1](~/samples/snippets/csharp/VS_Snippets_CLR/enum.tostring/CS/tostr.cs#1)]
 [!code-vb[enum.tostring#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enum.tostring/VB/tostr.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="47ec5-624"><paramref name="format" /> содержит недопустимую спецификацию.</span><span class="sxs-lookup"><span data-stu-id="47ec5-624"><paramref name="format" /> contains an invalid specification.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="47ec5-625"><paramref name="format" /> равняется "X", но тип перечисления неизвестен.</span><span class="sxs-lookup"><span data-stu-id="47ec5-625"><paramref name="format" /> equals "X", but the enumeration type is unknown.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="47ec5-626">Если несколько членов перечисления имеют одинаковое базовое значение и не удается получить строковое представление имени члена перечисления на основе его базового значения, код не следует вносить какие-либо предположения о какое имя метода возвращается.</span><span class="sxs-lookup"><span data-stu-id="47ec5-626">If multiple enumeration members have the same underlying value and you attempt to retrieve the string representation of an enumeration member's name based on its underlying value, your code should not make any assumptions about which name the method will return.</span></span> <span data-ttu-id="47ec5-627">Например, следующее перечисление определяет два члена <c>Shade.Gray</c> и <c>Shade.Grey</c>, имеющие одинаковое базовое значение.</span><span class="sxs-lookup"><span data-stu-id="47ec5-627">For example, the following enumeration defines two members, <c>Shade.Gray</c> and <c>Shade.Grey</c>, that have the same underlying value.</span></span>  
  
 [!code-csharp[System.Enum.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tostring/cs/tostringbyvalue1.cs#1)]
 [!code-vb[System.Enum.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tostring/vb/tostringbyvalue1.vb#1)]  
  
 <span data-ttu-id="47ec5-628">Пытается извлечь имя элемента в следующий вызов метода <c>оттенок</c> перечисления, базовым значением является 1.</span><span class="sxs-lookup"><span data-stu-id="47ec5-628">The following method call attempts to retrieve the name of a member of the <c>Shade</c> enumeration whose underlying value is 1.</span></span> <span data-ttu-id="47ec5-629">Этот метод может возвращать «Gray» или «Серый», и ваш код не должен делать никаких предположений о том, какие строки будут возвращены.</span><span class="sxs-lookup"><span data-stu-id="47ec5-629">The method can return either "Gray" or "Grey", and your code should not make any assumptions about which string will be returned.</span></span>  
  
 [!code-csharp[System.Enum.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tostring/cs/tostringbyvalue1.cs#3)]
 [!code-vb[System.Enum.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tostring/vb/tostringbyvalue1.vb#3)]</para>
        </block>
        <altmember cref="M:System.Enum.Format(System.Type,System.Object,System.String)" />
        <altmember cref="M:System.Enum.Parse(System.Type,System.String)" />
        <altmember cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(System::String ^ format, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The provider argument is not used. Please use ToString(String).")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="47ec5-630">Спецификация формата.</span><span class="sxs-lookup"><span data-stu-id="47ec5-630">A format specification.</span></span></param>
        <param name="provider"><span data-ttu-id="47ec5-631">(Является устаревшим.)</span><span class="sxs-lookup"><span data-stu-id="47ec5-631">(Obsolete.)</span></span></param>
        <summary><span data-ttu-id="47ec5-632">Перегруженная версия метода является устаревшей, вместо нее следует использовать метод <see cref="M:System.Enum.ToString(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-632">This method overload is obsolete; use <see cref="M:System.Enum.ToString(System.String)" />.</span></span></summary>
        <returns><span data-ttu-id="47ec5-633">Строковое представление значения данного экземпляра, определяемое параметром <paramref name="format" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-633">The string representation of the value of this instance as specified by <paramref name="format" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47ec5-634">`format` Параметр может содержать «G» или «g», «D» или «d», «X» или «x» и строки формата «F» или «f» (строка формата не учитывается).</span><span class="sxs-lookup"><span data-stu-id="47ec5-634">The `format` parameter can contain the "G" or "g", "D" or "d", "X" or "x", and "F" or "f" format strings (the format string is not case-sensitive).</span></span> <span data-ttu-id="47ec5-635">Если `format` — `null` или пустая строка ("»), используется Описатель общего формата («G»).</span><span class="sxs-lookup"><span data-stu-id="47ec5-635">If `format` is `null` or an empty string (""), the general format specifier ("G") is used.</span></span> <span data-ttu-id="47ec5-636">Дополнительные сведения о форматировании значений перечисления и строки форматов перечисления см. в разделе [строки форматов перечисления](~/docs/standard/base-types/enumeration-format-strings.md).</span><span class="sxs-lookup"><span data-stu-id="47ec5-636">For more information about the enumeration format strings and formatting enumeration values, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).</span></span> <span data-ttu-id="47ec5-637">Дополнительные сведения о форматировании в общем см. в разделе [типы форматирования](~/docs/standard/base-types/formatting-types.md).</span><span class="sxs-lookup"><span data-stu-id="47ec5-637">For more information about formatting in general, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
 <span data-ttu-id="47ec5-638">Укажите только `format`; `provider` параметр является устаревшим.</span><span class="sxs-lookup"><span data-stu-id="47ec5-638">Specify only `format`; the `provider` parameter is obsolete.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="47ec5-639"><paramref name="format" /> не содержит допустимую спецификацию формата.</span><span class="sxs-lookup"><span data-stu-id="47ec5-639"><paramref name="format" /> does not contain a valid format specification.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="47ec5-640"><paramref name="format" /> равняется "X", но тип перечисления неизвестен.</span><span class="sxs-lookup"><span data-stu-id="47ec5-640"><paramref name="format" /> equals "X", but the enumeration type is unknown.</span></span></exception>
        <altmember cref="M:System.Enum.Format(System.Type,System.Object,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="47ec5-641">Преобразует строковое представление имени или числового значения одной или нескольких перечислимых констант в эквивалентный перечислимый объект.</span><span class="sxs-lookup"><span data-stu-id="47ec5-641">Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</span></span> <span data-ttu-id="47ec5-642">Возвращаемое значение указывает, успешно ли выполнено преобразование.</span><span class="sxs-lookup"><span data-stu-id="47ec5-642">The return value indicates whether the conversion succeeded.</span></span></summary>
        <altmember cref="M:System.Enum.Parse(System.Type,System.String)" />
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (Type enumType, string value, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(class System.Type enumType, string value, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.TryParse(System.Type,System.String,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (enumType As Type, value As String, ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(Type ^ enumType, System::String ^ value, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="result" Type="System.Object&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="enumType">To be added.</param>
        <param name="value">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (Type enumType, string value, bool ignoreCase, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(class System.Type enumType, string value, bool ignoreCase, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.TryParse(System.Type,System.String,System.Boolean,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (enumType As Type, value As String, ignoreCase As Boolean, ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(Type ^ enumType, System::String ^ value, bool ignoreCase, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="result" Type="System.Object&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="enumType">To be added.</param>
        <param name="value">To be added.</param>
        <param name="ignoreCase">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse&lt;TEnum&gt;">
      <MemberSignature Language="C#" Value="public static bool TryParse&lt;TEnum&gt; (string value, out TEnum result) where TEnum : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse&lt;struct .ctor (class System.ValueType) TEnum&gt;(string value, [out] !!TEnum&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.TryParse``1(System.String,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse(Of TEnum As Structure) (value As String, ByRef result As TEnum) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEnum&gt;&#xA; where TEnum : value class static bool TryParse(System::String ^ value, [Runtime::InteropServices::Out] TEnum % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEnum">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="result" Type="TEnum&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="TEnum"><span data-ttu-id="47ec5-643">Тип перечисления, к которому необходимо привести <c>значение</c>.</span><span class="sxs-lookup"><span data-stu-id="47ec5-643">The enumeration type to which to convert <c>value</c>.</span></span></typeparam>
        <param name="value"><span data-ttu-id="47ec5-644">Строковое представление имени перечисления или базового значения для преобразования.</span><span class="sxs-lookup"><span data-stu-id="47ec5-644">The string representation of the enumeration name or underlying value to convert.</span></span></param>
        <param name="result"><span data-ttu-id="47ec5-645">При возврате этого метода <c>result</c> содержит объект типа <c>TEnum</c>, значение которого представлено параметром <c>value</c>, если операция анализа выполнена успешно.</span><span class="sxs-lookup"><span data-stu-id="47ec5-645">When this method returns, <c>result</c> contains an object of type <c>TEnum</c> whose value is represented by <c>value</c> if the parse operation succeeds.</span></span> <span data-ttu-id="47ec5-646">Если операция анализа завершается неудачно, то <c>result</c> содержит значение по умолчанию базового типа <c>TEnum</c>.</span><span class="sxs-lookup"><span data-stu-id="47ec5-646">If the parse operation fails, <c>result</c> contains the default value of the underlying type of <c>TEnum</c>.</span></span> <span data-ttu-id="47ec5-647">Обратите внимание, что это значение не обязательно должно быть членом перечисления <c>TEnum</c>.</span><span class="sxs-lookup"><span data-stu-id="47ec5-647">Note that this value need not be a member of the <c>TEnum</c> enumeration.</span></span> <span data-ttu-id="47ec5-648">Этот параметр передается неинициализированным.</span><span class="sxs-lookup"><span data-stu-id="47ec5-648">This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="47ec5-649">Преобразует строковое представление имени или числового значения одной или нескольких перечислимых констант в эквивалентный перечислимый объект.</span><span class="sxs-lookup"><span data-stu-id="47ec5-649">Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</span></span> <span data-ttu-id="47ec5-650">Возвращаемое значение указывает, успешно ли выполнено преобразование.</span><span class="sxs-lookup"><span data-stu-id="47ec5-650">The return value indicates whether the conversion succeeded.</span></span></summary>
        <returns>
          <span data-ttu-id="47ec5-651">Значение <see langword="true" />, если параметр <paramref name="value" /> успешно преобразован, в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-651"><see langword="true" /> if the <paramref name="value" /> parameter was converted successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47ec5-652"><xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29> идентичен <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> метода, но вместо создания исключения, он возвращает `false` при сбое преобразования.</span><span class="sxs-lookup"><span data-stu-id="47ec5-652"><xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29> is identical to the <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> method, except that instead of throwing an exception, it returns `false` if the conversion fails.</span></span> <span data-ttu-id="47ec5-653">Это устраняет необходимость обработки исключения при анализе строковое представление значения перечисления.</span><span class="sxs-lookup"><span data-stu-id="47ec5-653">It eliminates the need for exception handling when parsing the string representation of an enumeration value.</span></span>  
  
 <span data-ttu-id="47ec5-654">`value` Параметр содержит строковое представление базового значения члена перечисления или именованную константу или список именованных констант или базовых значений, разделенных запятыми (,).</span><span class="sxs-lookup"><span data-stu-id="47ec5-654">The `value` parameter contains the string representation of an enumeration member's underlying value or named constant, or a list of named constants or underlying values delimited by commas (,).</span></span> <span data-ttu-id="47ec5-655">Если `value` включает несколько именованных констант или значений, один или несколько пробелов может указываться перед или после каждого значения, имя или запятая в `value`.</span><span class="sxs-lookup"><span data-stu-id="47ec5-655">If `value` includes multiple named constants or values, one or more blank spaces can precede or follow each value, name, or comma in `value`.</span></span> <span data-ttu-id="47ec5-656">Если `value` — это список, `result` отражает значение указанными именами или базового значения в сочетании с битовой `OR` операции.</span><span class="sxs-lookup"><span data-stu-id="47ec5-656">If `value` is a list, `result` reflects the value of the specified names or underlying values combined with a bitwise `OR` operation.</span></span> <span data-ttu-id="47ec5-657">Если `value` строковое представление имени значения перечисления, сравнение `value` с перечислением имена с учетом регистра.</span><span class="sxs-lookup"><span data-stu-id="47ec5-657">If `value` is the string representation of the name of an enumeration value, the comparison of `value` with enumeration names is case-sensitive.</span></span>  
  
 <span data-ttu-id="47ec5-658">Если `value` — имя, которое не соответствует именованной константе `TEnum`, метод возвращает `false`.</span><span class="sxs-lookup"><span data-stu-id="47ec5-658">If `value` is a name that does not correspond to a named constant of `TEnum`, the method returns `false`.</span></span> <span data-ttu-id="47ec5-659">Если `value` строковое представление целого числа со знаком, которое не представляет базовое значение `TEnum` перечисления, метод возвращает член перечисления, базовым значением является `value` преобразуется в целочисленный тип.</span><span class="sxs-lookup"><span data-stu-id="47ec5-659">If `value` is the string representation of an integer that does not represent an underlying value of the `TEnum` enumeration, the method returns an enumeration member whose underlying value is `value` converted to an integral type.</span></span> <span data-ttu-id="47ec5-660">Если такое поведение нежелательно, вызовите <xref:System.Enum.IsDefined%2A> метод, чтобы удостовериться в наличии фактически является членом определенной строковое представление целого числа `TEnum`.</span><span class="sxs-lookup"><span data-stu-id="47ec5-660">If this behavior is undesirable, call the <xref:System.Enum.IsDefined%2A> method to ensure that a particular string representation of an integer is actually a member of `TEnum`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="47ec5-661">В следующем примере определяется `Colors` перечисления, вызывает <xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29> метод для преобразования строк в их соответствующие значения перечисления и вызовы <xref:System.Enum.IsDefined%2A> значения метод, чтобы гарантировать базовых конкретного целочисленного значения в `Colors` перечисления.</span><span class="sxs-lookup"><span data-stu-id="47ec5-661">The following example defines a `Colors` enumeration, calls the <xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29> method to convert strings to their corresponding enumeration values, and calls the <xref:System.Enum.IsDefined%2A> method to ensure that particular integral values are underlying values in the `Colors` enumeration.</span></span>  
  
 [!code-csharp[System.Enum.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tryparse/cs/tryparse1.cs#1)]
 [!code-vb[System.Enum.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tryparse/vb/tryparse1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="47ec5-662"><paramref name="TEnum" /> не является типом перечисления.</span><span class="sxs-lookup"><span data-stu-id="47ec5-662"><paramref name="TEnum" /> is not an enumeration type.</span></span></exception>
        <altmember cref="M:System.Enum.Parse(System.Type,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TryParse&lt;TEnum&gt;">
      <MemberSignature Language="C#" Value="public static bool TryParse&lt;TEnum&gt; (string value, bool ignoreCase, out TEnum result) where TEnum : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse&lt;struct .ctor (class System.ValueType) TEnum&gt;(string value, bool ignoreCase, [out] !!TEnum&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse(Of TEnum As Structure) (value As String, ignoreCase As Boolean, ByRef result As TEnum) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEnum&gt;&#xA; where TEnum : value class static bool TryParse(System::String ^ value, bool ignoreCase, [Runtime::InteropServices::Out] TEnum % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEnum">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="result" Type="TEnum&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="TEnum"><span data-ttu-id="47ec5-663">Тип перечисления, к которому необходимо привести <c>значение</c>.</span><span class="sxs-lookup"><span data-stu-id="47ec5-663">The enumeration type to which to convert <c>value</c>.</span></span></typeparam>
        <param name="value"><span data-ttu-id="47ec5-664">Строковое представление имени перечисления или базового значения для преобразования.</span><span class="sxs-lookup"><span data-stu-id="47ec5-664">The string representation of the enumeration name or underlying value to convert.</span></span></param>
        <param name="ignoreCase">
          <span data-ttu-id="47ec5-665">Значение <see langword="true" />, чтобы игнорировать регистр; значение <see langword="false" />, чтобы учитывать регистр.</span><span class="sxs-lookup"><span data-stu-id="47ec5-665"><see langword="true" /> to ignore case; <see langword="false" /> to consider case.</span></span></param>
        <param name="result"><span data-ttu-id="47ec5-666">При возврате этого метода <c>result</c> содержит объект типа <c>TEnum</c>, значение которого представлено параметром <c>value</c>, если операция анализа выполнена успешно.</span><span class="sxs-lookup"><span data-stu-id="47ec5-666">When this method returns, <c>result</c> contains an object of type <c>TEnum</c> whose value is represented by <c>value</c> if the parse operation succeeds.</span></span> <span data-ttu-id="47ec5-667">Если операция анализа завершается неудачно, то <c>result</c> содержит значение по умолчанию базового типа <c>TEnum</c>.</span><span class="sxs-lookup"><span data-stu-id="47ec5-667">If the parse operation fails, <c>result</c> contains the default value of the underlying type of <c>TEnum</c>.</span></span> <span data-ttu-id="47ec5-668">Обратите внимание, что это значение не обязательно должно быть членом перечисления <c>TEnum</c>.</span><span class="sxs-lookup"><span data-stu-id="47ec5-668">Note that this value need not be a member of the <c>TEnum</c> enumeration.</span></span> <span data-ttu-id="47ec5-669">Этот параметр передается неинициализированным.</span><span class="sxs-lookup"><span data-stu-id="47ec5-669">This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="47ec5-670">Преобразует строковое представление имени или числового значения одной или нескольких перечислимых констант в эквивалентный перечислимый объект.</span><span class="sxs-lookup"><span data-stu-id="47ec5-670">Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</span></span> <span data-ttu-id="47ec5-671">Параметр указывает, учитывается ли в операции регистр.</span><span class="sxs-lookup"><span data-stu-id="47ec5-671">A parameter specifies whether the operation is case-sensitive.</span></span> <span data-ttu-id="47ec5-672">Возвращаемое значение указывает, успешно ли выполнено преобразование.</span><span class="sxs-lookup"><span data-stu-id="47ec5-672">The return value indicates whether the conversion succeeded.</span></span></summary>
        <returns>
          <span data-ttu-id="47ec5-673">Значение <see langword="true" />, если параметр <paramref name="value" /> успешно преобразован, в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="47ec5-673"><see langword="true" /> if the <paramref name="value" /> parameter was converted successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47ec5-674"><xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29> идентичен <xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29> метода, но вместо создания исключения, он возвращает `false` при сбое преобразования.</span><span class="sxs-lookup"><span data-stu-id="47ec5-674"><xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29> is identical to the <xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29> method, except that instead of throwing an exception, it returns `false` if the conversion fails.</span></span> <span data-ttu-id="47ec5-675">Это устраняет необходимость обработки исключения при анализе строковое представление значения перечисления.</span><span class="sxs-lookup"><span data-stu-id="47ec5-675">It eliminates the need for exception handling when parsing the string representation of an enumeration value.</span></span>  
  
 <span data-ttu-id="47ec5-676">`value` Параметр содержит строковое представление базового значения члена перечисления или именованную константу или список именованных констант или базовых значений, разделенных запятыми (,).</span><span class="sxs-lookup"><span data-stu-id="47ec5-676">The `value` parameter contains the string representation of an enumeration member's underlying value or named constant, or a list of named constants or underlying values delimited by commas (,).</span></span> <span data-ttu-id="47ec5-677">Если `value` включает несколько именованных констант или значений, один или несколько пробелов может указываться перед или после каждого значения, имя или запятая в `value`.</span><span class="sxs-lookup"><span data-stu-id="47ec5-677">If `value` includes multiple named constants or values, one or more blank spaces can precede or follow each value, name, or comma in `value`.</span></span> <span data-ttu-id="47ec5-678">Если `value` — это список, `result` отражает значение указанными именами или базового значения в сочетании с битовой `OR` операции.</span><span class="sxs-lookup"><span data-stu-id="47ec5-678">If `value` is a list, `result` reflects the value of the specified names or underlying values combined with a bitwise `OR` operation.</span></span> <span data-ttu-id="47ec5-679">Если `value` строковое представление имени значения перечисления, сравнение `value` перечисления имен зависит от `ignoreCase` параметра.</span><span class="sxs-lookup"><span data-stu-id="47ec5-679">If `value` is the string representation of the name of an enumeration value, the comparison of `value` with enumeration names depends on the `ignoreCase` parameter.</span></span> <span data-ttu-id="47ec5-680">Если `true`, сравнение выполняется без учета регистра; Если `false`, регистр не учитывается.</span><span class="sxs-lookup"><span data-stu-id="47ec5-680">If `true`, the comparison is case-insensitive; if `false`, it is case-sensitive.</span></span>  
  
 <span data-ttu-id="47ec5-681">Если `value` — имя, которое не соответствует именованной константе `TEnum`, метод возвращает `false`.</span><span class="sxs-lookup"><span data-stu-id="47ec5-681">If `value` is a name that does not correspond to a named constant of `TEnum`, the method returns `false`.</span></span> <span data-ttu-id="47ec5-682">Если `value` строковое представление целого числа со знаком, которое не представляет базовое значение `TEnum` перечисления, метод возвращает член перечисления, базовым значением является `value` преобразуется в целочисленный тип.</span><span class="sxs-lookup"><span data-stu-id="47ec5-682">If `value` is the string representation of an integer that does not represent an underlying value of the `TEnum` enumeration, the method returns an enumeration member whose underlying value is `value` converted to an integral type.</span></span> <span data-ttu-id="47ec5-683">Если такое поведение нежелательно, вызовите <xref:System.Enum.IsDefined%2A> метод, чтобы удостовериться в наличии фактически является членом определенной строковое представление целого числа `TEnum`.</span><span class="sxs-lookup"><span data-stu-id="47ec5-683">If this behavior is undesirable, call the <xref:System.Enum.IsDefined%2A> method to ensure that a particular string representation of an integer is actually a member of `TEnum`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="47ec5-684">В следующем примере определяется `Colors` перечисления, вызывает <xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29> метод для преобразования строк в их соответствующие значения перечисления и вызовы <xref:System.Enum.IsDefined%2A> значения метод, чтобы гарантировать базовых конкретного целочисленного значения в `Colors` перечисления.</span><span class="sxs-lookup"><span data-stu-id="47ec5-684">The following example defines a `Colors` enumeration, calls the <xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29> method to convert strings to their corresponding enumeration values, and calls the <xref:System.Enum.IsDefined%2A> method to ensure that particular integral values are underlying values in the `Colors` enumeration.</span></span> <span data-ttu-id="47ec5-685"><xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29> Метод использует сравнение без учета регистра, при попытке преобразовать строковые представления с именем константы значениями эквивалент перечисления.</span><span class="sxs-lookup"><span data-stu-id="47ec5-685">The <xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29> method uses case-insensitive comparison when trying to convert the string representations of named constants to their equivalent enumeration values.</span></span>  
  
 [!code-csharp[System.Enum.TryParse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tryparse/cs/tryparse2.cs#2)]
 [!code-vb[System.Enum.TryParse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tryparse/vb/tryparse2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="47ec5-686"><paramref name="TEnum" /> не является типом перечисления.</span><span class="sxs-lookup"><span data-stu-id="47ec5-686"><paramref name="TEnum" /> is not an enumeration type.</span></span></exception>
        <altmember cref="M:System.Enum.Parse(System.Type,System.String,System.Boolean)" />
      </Docs>
    </Member>
  </Members>
</Type>
