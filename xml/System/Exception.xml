<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Exception.xml" source-language="en-US" target-language="ru-RU">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac52f4b69061befa3abe028db5ebd872b4e0edcdf12.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2f4b69061befa3abe028db5ebd872b4e0edcdf12</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Exception">
          <source>Represents errors that occur during application execution.</source>
          <target state="translated">Представляет ошибки, происходящие во время выполнения приложения.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>This class is the base class for all exceptions.</source>
          <target state="translated">Этот класс является базовым классом для всех исключений.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>When an error occurs, either the system or the currently executing application reports it by throwing an exception that contains information about the error.</source>
          <target state="translated">При возникновении ошибки, система или текущее исполняемое приложение сообщает путем создания исключения, который содержит сведения об ошибке.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>After an exception is thrown, it is handled by the application or by the default exception handler.</source>
          <target state="translated">После исключения, он обрабатывается приложением или обработчику исключений по умолчанию.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>In this section:</source>
          <target state="translated">Содержание</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source><bpt id="p1">[</bpt>Errors and exceptions<ept id="p1">](#Errors)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Ошибки и исключения<ept id="p1">](#Errors)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source><bpt id="p1">[</bpt>Try/catch blocks<ept id="p1">](#TryCatch)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Блоки try/catch<ept id="p1">](#TryCatch)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source><bpt id="p1">[</bpt>Exception type features<ept id="p1">](#Features)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Возможности типов исключений<ept id="p1">](#Features)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source><bpt id="p1">[</bpt>Exception class properties<ept id="p1">](#Properties)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Свойства класса исключений<ept id="p1">](#Properties)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source><bpt id="p1">[</bpt>Performance considerations<ept id="p1">](#Performance)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Вопросы производительности<ept id="p1">](#Performance)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source><bpt id="p1">[</bpt>Re-throwing an exception<ept id="p1">](#Rethrow)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Повторной генерации исключения<ept id="p1">](#Rethrow)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source><bpt id="p1">[</bpt>Choosing standard exceptions<ept id="p1">](#Standard)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Выбор стандартных исключений<ept id="p1">](#Standard)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source><bpt id="p1">[</bpt>Implementing custom exceptions<ept id="p1">](#Custom)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Реализация пользовательских исключений<ept id="p1">](#Custom)</ept></target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Errors and exceptions</source>
          <target state="translated">Ошибки и исключения</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Run-time errors can occur for a variety of reasons.</source>
          <target state="translated">Ошибки во время выполнения может возникнуть по ряду причин.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>However, not all errors should be handled as exceptions in your code.</source>
          <target state="translated">Однако не все ошибки должны обрабатываться как исключения в своем коде.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Here are some categories of errors that can occur at run time and the appropriate ways to respond to them.</source>
          <target state="translated">Ниже приведены некоторые категории ошибок, возникающих во время выполнения и соответствующие способов отреагировать на них.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source><bpt id="p1">**</bpt>Usage errors.<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>Ошибки использования.<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>A usage error represents an error in program logic that can result in an exception.</source>
          <target state="translated">Ошибка использования представляет ошибку в логике программы, которая может привести к возникновению исключения.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>However, the error should be addressed not through exception handling but by modifying the faulty code.</source>
          <target state="translated">Тем не менее должны быть устранены ошибки, не с помощью обработки исключений, но, изменив ошибочный код.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>For example, the override of the <ph id="ph1">&lt;xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph> method in the following example assumes that the <ph id="ph2">`obj`</ph> argument must always be non-null.</source>
          <target state="translated">Например, переопределение <ph id="ph1">&lt;xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph> метод в следующем примере предполагается, что <ph id="ph2">`obj`</ph> аргумент всегда должен иметь значение null.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>The <ph id="ph1">&lt;xref:System.NullReferenceException&gt;</ph> exception that results when <ph id="ph2">`obj`</ph> is <ph id="ph3">`null`</ph> can be eliminated by modifying the source code to explicitly test for null before calling the <ph id="ph4">&lt;xref:System.Object.Equals%2A?displayProperty=nameWithType&gt;</ph> override and then re-compiling.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.NullReferenceException&gt;</ph> Исключение, которое возникает при <ph id="ph2">`obj`</ph> — <ph id="ph3">`null`</ph> можно избежать путем изменения исходного кода для проверки null перед вызовом явно <ph id="ph4">&lt;xref:System.Object.Equals%2A?displayProperty=nameWithType&gt;</ph> override и повторной компиляции.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>The following example contains the corrected source code that handles a <ph id="ph1">`null`</ph> argument.</source>
          <target state="translated">В следующем примере содержится исправленный исходный код, который обрабатывает <ph id="ph1">`null`</ph> аргумент.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Instead of using exception handling for usage errors, you can use the <ph id="ph1">&lt;xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType&gt;</ph> method to identify usage errors in debug builds, and the <ph id="ph2">&lt;xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType&gt;</ph> method to identify usage errors in both debug and release builds.</source>
          <target state="translated">Вместо использования ошибок обработки исключений, можно использовать <ph id="ph1">&lt;xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType&gt;</ph> метод выявления ошибок использования в отладочных построениях и <ph id="ph2">&lt;xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType&gt;</ph> метод выявления ошибок использования в отладочной и окончательной сборки.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>For more information, see <bpt id="p1">[</bpt>Assertions in Managed Code<ept id="p1">](/visualstudio/debugger/assertions-in-managed-code)</ept>.</source>
          <target state="translated">Дополнительные сведения см. в разделе <bpt id="p1">[</bpt>утверждения в управляемом коде<ept id="p1">](/visualstudio/debugger/assertions-in-managed-code)</ept>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source><bpt id="p1">**</bpt>Program errors.<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>Ошибки программы.<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>A program error is a run-time error that cannot necessarily be avoided by writing bug-free code.</source>
          <target state="translated">Ошибки в программе, вызывает ошибку времени выполнения, не всегда удается избежать путем написания кода, без ошибок.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>In some cases, a program error may reflect an expected or routine error condition.</source>
          <target state="translated">В некоторых случаях ошибки в программе может отобразить ожидаемой или сопоставление ошибку.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>In this case, you may want to avoid using exception handling to deal with the program error and instead retry the operation.</source>
          <target state="translated">В этом случае можно избежать использования обработки исключений, чтобы обрабатывать ошибки в программе и вместо этого повторите операцию.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>For example, if the user is expected to input a date in a particular format, you can parse the date string by calling the <ph id="ph1">&lt;xref:System.DateTime.TryParseExact%2A?displayProperty=nameWithType&gt;</ph> method, which returns a <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the parse operation succeeded, instead of using the <ph id="ph3">&lt;xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType&gt;</ph> method, which throws a <ph id="ph4">&lt;xref:System.FormatException&gt;</ph> exception if the date string cannot be converted to a <ph id="ph5">&lt;xref:System.DateTime&gt;</ph> value.</source>
          <target state="translated">Например, если ожидается, что пользователь ввода даты в определенном формате, можно выполнить синтаксический анализ строки даты, вызвав <ph id="ph1">&lt;xref:System.DateTime.TryParseExact%2A?displayProperty=nameWithType&gt;</ph> метод, который возвращает <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> значение, указывающее ли операция анализа выполнена успешно, вместо использования <ph id="ph3">&lt;xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType&gt;</ph>метод, который вызывает <ph id="ph4">&lt;xref:System.FormatException&gt;</ph> исключение, если строка даты невозможно преобразовать в <ph id="ph5">&lt;xref:System.DateTime&gt;</ph> значение.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Similarly, if a user tries to open a file that does not exist, you can first call the <ph id="ph1">&lt;xref:System.IO.File.Exists%2A?displayProperty=nameWithType&gt;</ph> method to check whether the file exists and, if it does not, prompt the user whether he or she wants to create it.</source>
          <target state="translated">Аналогично, если пользователь пытается открыть файл, который не существует, сначала можно вызвать метод <ph id="ph1">&lt;xref:System.IO.File.Exists%2A?displayProperty=nameWithType&gt;</ph> метод для проверки, является ли файл существует и, если оно отсутствует, запрос пользователю хочет создать его.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>In other cases, a program error reflects an unexpected error condition that can be handled in your code.</source>
          <target state="translated">В других случаях ошибки в программе отражает непредвиденной ошибке могут обрабатываться в коде.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>For example, even if you've checked to ensure that a file exists, it may be deleted before you can open it, or it may be corrupted.</source>
          <target state="translated">Например даже если вы проверили, чтобы убедиться, что файл существует, его могут быть удалены перед его можно открыть, или он может быть поврежден.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>In that case, trying to open the file by instantiating a <ph id="ph1">&lt;xref:System.IO.StreamReader&gt;</ph> object or calling the <ph id="ph2">&lt;xref:System.IO.File.Open%2A&gt;</ph> method may throw a <ph id="ph3">&lt;xref:System.IO.FileNotFoundException&gt;</ph> exception.</source>
          <target state="translated">В этом случае при попытке открыть файл с помощью создания <ph id="ph1">&lt;xref:System.IO.StreamReader&gt;</ph> объектов или при вызове <ph id="ph2">&lt;xref:System.IO.File.Open%2A&gt;</ph> может вызвать метод <ph id="ph3">&lt;xref:System.IO.FileNotFoundException&gt;</ph> исключение.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>In these cases, you should use exception handling to recover from the error.</source>
          <target state="translated">В таких случаях следует использовать обработку исключений для восстановления из-за ошибки.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source><bpt id="p1">**</bpt>System failures.<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>Сбои системы.<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>A system failure is a run-time error that cannot be handled programmatically in a meaningful way.</source>
          <target state="translated">Сбой системы является ошибка времени выполнения, которая не может обрабатывать программно более удобным образом.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>For example, any method can throw an <ph id="ph1">&lt;xref:System.OutOfMemoryException&gt;</ph> exception if the common language runtime is unable to allocate additional memory.</source>
          <target state="translated">Например, может вызывать любой метод <ph id="ph1">&lt;xref:System.OutOfMemoryException&gt;</ph> исключение, если общеязыковая среда выполнения не удается выделить дополнительную память.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Ordinarily, system failures are not handled by using exception handling.</source>
          <target state="translated">Как правило системные сбои не обрабатываются с помощью обработки исключений.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Instead, you may be able to use an event such as <ph id="ph1">&lt;xref:System.AppDomain.UnhandledException?displayProperty=nameWithType&gt;</ph> and call the <ph id="ph2">&lt;xref:System.Environment.FailFast%2A?displayProperty=nameWithType&gt;</ph> method to log exception information and notify the user of the failure before the application terminates.</source>
          <target state="translated">Вместо этого можно использовать при возникновении события, такие как <ph id="ph1">&lt;xref:System.AppDomain.UnhandledException?displayProperty=nameWithType&gt;</ph> и вызвать <ph id="ph2">&lt;xref:System.Environment.FailFast%2A?displayProperty=nameWithType&gt;</ph> метод для входа сведения об исключении и уведомлять пользователя о сбое перед завершением работы приложения.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Try/catch blocks</source>
          <target state="translated">Блоки try/catch</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>The common language runtime provides an exception handling model that is based on the representation of exceptions as objects, and the separation of program code and exception handling code into <ph id="ph1">`try`</ph> blocks and <ph id="ph2">`catch`</ph> blocks.</source>
          <target state="translated">Общеязыковая среда выполнения предоставляет модель обработки исключений, который основан на представлении исключений как объектов и разделение программного кода и кода обработки исключения на <ph id="ph1">`try`</ph> блоки и <ph id="ph2">`catch`</ph> блоков.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>There can be one or more <ph id="ph1">`catch`</ph> blocks, each designed to handle a particular type of exception, or one block designed to catch a more specific exception than another block.</source>
          <target state="translated">Может быть один или несколько <ph id="ph1">`catch`</ph> блоков, каждый из которых создан для обработки конкретного типа исключения или один блок, позволяющий перехватить более конкретное исключение, чем другой.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>If an application handles exceptions that occur during the execution of a block of application code, the code must be placed within a <ph id="ph1">`try`</ph> statement and is called a <ph id="ph2">`try`</ph> block.</source>
          <target state="translated">Если приложение обрабатывает исключения, возникающие во время выполнения блока кода приложения, код должен быть помещен в <ph id="ph1">`try`</ph> инструкции и называется <ph id="ph2">`try`</ph> блока.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Application code that handles exceptions thrown by a <ph id="ph1">`try`</ph> block is placed within a <ph id="ph2">`catch`</ph> statement and is called a <ph id="ph3">`catch`</ph> block.</source>
          <target state="translated">Код приложения, который обрабатывает исключения, вызванные <ph id="ph1">`try`</ph> блок, помещенный в <ph id="ph2">`catch`</ph> инструкции и называется <ph id="ph3">`catch`</ph> блока.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Zero or more <ph id="ph1">`catch`</ph> blocks are associated with a <ph id="ph2">`try`</ph> block, and each <ph id="ph3">`catch`</ph> block includes a type filter that determines the types of exceptions it handles.</source>
          <target state="translated">Ноль или более <ph id="ph1">`catch`</ph> блоки связаны с <ph id="ph2">`try`</ph> блока, а каждый <ph id="ph3">`catch`</ph> блок содержит фильтр типа, который определяет типы обработки исключений.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>When an exception occurs in a <ph id="ph1">`try`</ph> block, the system searches the associated <ph id="ph2">`catch`</ph> blocks in the order they appear in application code, until it locates a <ph id="ph3">`catch`</ph> block that handles the exception.</source>
          <target state="translated">При возникновении исключения в <ph id="ph1">`try`</ph> блока, система осуществляет поиск связанных <ph id="ph2">`catch`</ph> блокирует в порядке появления в коде приложения, пока не найдет <ph id="ph3">`catch`</ph> блок, который обрабатывает исключение.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>A <ph id="ph1">`catch`</ph> block handles an exception of type <ph id="ph2">`T`</ph> if the type filter of the catch block specifies <ph id="ph3">`T`</ph> or any type that <ph id="ph4">`T`</ph> derives from.</source>
          <target state="translated">Объект <ph id="ph1">`catch`</ph> обрабатывает исключение типа <ph id="ph2">`T`</ph> Если тип фильтра блока catch указывает <ph id="ph3">`T`</ph> или любой тип, <ph id="ph4">`T`</ph> является производным от.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>The system stops searching after it finds the first <ph id="ph1">`catch`</ph> block that handles the exception.</source>
          <target state="translated">Система прекращает поиск после он находит первый <ph id="ph1">`catch`</ph> блок, который обрабатывает исключение.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>For this reason, in application code, a <ph id="ph1">`catch`</ph> block that handles a type must be specified before a <ph id="ph2">`catch`</ph> block that handles its base types, as demonstrated in the example that follows this section.</source>
          <target state="translated">По этой причине в коде приложения <ph id="ph1">`catch`</ph> блок обработки типа должны быть указаны до <ph id="ph2">`catch`</ph> блок, который обрабатывает его базовых типов, как показано в следующем примере в этом разделе.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>A catch block that handles <ph id="ph1">`System.Exception`</ph> is specified last.</source>
          <target state="translated">Блок catch, обрабатывающий <ph id="ph1">`System.Exception`</ph> указывается в последнюю очередь.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>If none of the <ph id="ph1">`catch`</ph> blocks associated with the current <ph id="ph2">`try`</ph> block handle the exception, and the current <ph id="ph3">`try`</ph> block is nested within other <ph id="ph4">`try`</ph> blocks in the current call, the <ph id="ph5">`catch`</ph> blocks associated with the next enclosing <ph id="ph6">`try`</ph> block are searched.</source>
          <target state="translated">Если ни одна из <ph id="ph1">`catch`</ph> блоки, связанную с текущим <ph id="ph2">`try`</ph> блок обработки исключения и текущий <ph id="ph3">`try`</ph> блока, вложены в другие <ph id="ph4">`try`</ph> блоков в текущем вызове <ph id="ph5">`catch`</ph> блокировок, сопоставленных со следующим заключив <ph id="ph6">`try`</ph> блок выполняется поиск.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>If no <ph id="ph1">`catch`</ph> block for the exception is found, the system searches previous nesting levels in the current call.</source>
          <target state="translated">Если не <ph id="ph1">`catch`</ph> блокировка для исключения найдена, система осуществляет поиск предыдущих уровней вложенности в текущем вызове.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>If no <ph id="ph1">`catch`</ph> block for the exception is found in the current call, the exception is passed up the call stack, and the previous stack frame is searched for a <ph id="ph2">`catch`</ph> block that handles the exception.</source>
          <target state="translated">Если не <ph id="ph1">`catch`</ph> блок найден в текущем вызове, исключение передается вверх по стеку вызовов, и поиск предыдущего кадра стека <ph id="ph2">`catch`</ph> блок, который обрабатывает исключение.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>The search of the call stack continues until the exception is handled or until no more frames exist on the call stack.</source>
          <target state="translated">Поиск стека вызовов продолжается, пока исключение не будет обработано, или пока не закончатся в стеке вызовов.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>If the top of the call stack is reached without finding a <ph id="ph1">`catch`</ph> block that handles the exception, the default exception handler handles it and the application terminates.</source>
          <target state="translated">Вверху стека вызовов при достижении без поиск <ph id="ph1">`catch`</ph> блок, который обрабатывает исключение, обработчику исключений по умолчанию обрабатывает его и приложение завершает работу.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Exception type features</source>
          <target state="translated">Возможности типов исключений</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Exception types support the following features:</source>
          <target state="translated">Типы исключений поддерживают следующие функции:</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Human-readable text that describes the error.</source>
          <target state="translated">Удобочитаемый текст с описанием ошибки.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>When an exception occurs, the runtime makes a text message available to inform the user of the nature of the error and to suggest action to resolve the problem.</source>
          <target state="translated">При возникновении исключения среда выполнения предоставляет текстовое сообщение для оповещения пользователя о природе ошибки и предлагает способы ее устранения.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>This text message is held in the <ph id="ph1">&lt;xref:System.Exception.Message%2A&gt;</ph> property of the exception object.</source>
          <target state="translated">Текстовое сообщение хранится в <ph id="ph1">&lt;xref:System.Exception.Message%2A&gt;</ph> свойства объекта исключения.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>During the creation of the exception object, you can pass a text string to the constructor to describe the details of that particular exception.</source>
          <target state="translated">Во время создания объекта исключения можно передать строку текста в конструктор для описания сведений данного исключения.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>If no error message argument is supplied to the constructor, the default error message is used.</source>
          <target state="translated">Если аргумент сообщения об, предоставляемых конструктору, используется сообщение по умолчанию.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Exception.Message%2A&gt;</ph> property.</source>
          <target state="translated">Дополнительные сведения см. в описании свойства <ph id="ph1">&lt;xref:System.Exception.Message%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>The state of the call stack when the exception was thrown.</source>
          <target state="translated">Состояние стека вызова при возникновении исключения.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>The <ph id="ph1">&lt;xref:System.Exception.StackTrace%2A&gt;</ph> property carries a stack trace that can be used to determine where the error occurs in the code.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Exception.StackTrace%2A&gt;</ph> Несет трассировку стека, который может использоваться, чтобы определить место возникновения ошибки в коде.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>The stack trace lists all the called methods and the line numbers in the source file where the calls are made.</source>
          <target state="translated">Трассировка стека перечисляет все вызываемые методы и номера строк в исходном файле, где вызываются.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Exception class properties</source>
          <target state="translated">Свойства класса исключений</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>The <ph id="ph1">&lt;xref:System.Exception&gt;</ph> class includes a number of properties that help identify the code location, the type, the help file, and the reason for the exception: <ph id="ph2">&lt;xref:System.Exception.StackTrace%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Exception.InnerException%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Exception.Message%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Exception.HelpLink%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Exception.HResult%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Exception.Source%2A&gt;</ph>, <ph id="ph8">&lt;xref:System.Exception.TargetSite%2A&gt;</ph>, and <ph id="ph9">&lt;xref:System.Exception.Data%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Exception&gt;</ph> Класс содержит несколько свойств, которые помогают определить расположение кода, тип, файл справки и причину возникновения исключения: <ph id="ph2">&lt;xref:System.Exception.StackTrace%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Exception.InnerException%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Exception.Message%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Exception.HelpLink%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Exception.HResult%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Exception.Source%2A&gt;</ph>, <ph id="ph8">&lt;xref:System.Exception.TargetSite%2A&gt;</ph>, и <ph id="ph9">&lt;xref:System.Exception.Data%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>When a causal relationship exists between two or more exceptions, the <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property maintains this information.</source>
          <target state="translated">Если существует причинно-следственную связь между два или несколько исключений, <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> свойство обслуживание этой информации.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>The outer exception is thrown in response to this inner exception.</source>
          <target state="translated">Внешнее исключение вызывается в ответ на это внутреннее исключение.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>The code that handles the outer exception can use the information from the earlier inner exception to handle the error more appropriately.</source>
          <target state="translated">Код, обрабатывающий внешнее исключение можно использовать сведения из более ранних версий внутреннего исключения для более качественной обработки ошибки.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Supplementary information about the exception can be stored as a collection of key/value pairs in the <ph id="ph1">&lt;xref:System.Exception.Data%2A&gt;</ph> property.</source>
          <target state="translated">Дополнительные сведения об исключении могут храниться в виде коллекции пар "ключ значение" в <ph id="ph1">&lt;xref:System.Exception.Data%2A&gt;</ph> свойство.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>The error message string that is passed to the constructor during the creation of the exception object should be localized and can be supplied from a resource file by using the <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> class.</source>
          <target state="translated">Строка сообщения об ошибке, передаваемый в конструктор при создании объекта исключения, должно быть локализовано и может быть передана из файла ресурсов с помощью <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> класса.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>For more information about localized resources, see the <bpt id="p1">[</bpt>Creating Satellite Assemblies<ept id="p1">](~/docs/framework/resources/creating-satellite-assemblies-for-desktop-apps.md)</ept> and <bpt id="p2">[</bpt>Packaging and Deploying Resources<ept id="p2">](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md)</ept> topics.</source>
          <target state="translated">Дополнительные сведения о локализованных ресурсов см. в разделе <bpt id="p1">[</bpt>Создание вспомогательных сборок<ept id="p1">](~/docs/framework/resources/creating-satellite-assemblies-for-desktop-apps.md)</ept> и <bpt id="p2">[</bpt>упаковка и развертывание ресурсов<ept id="p2">](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md)</ept> разделы.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>To provide the user with extensive information about why the exception occurred, the <ph id="ph1">&lt;xref:System.Exception.HelpLink%2A&gt;</ph> property can hold a URL (or URN) to a help file.</source>
          <target state="translated">Чтобы предоставить пользователю с подробные сведения о том, почему произошло исключение <ph id="ph1">&lt;xref:System.Exception.HelpLink%2A&gt;</ph> свойство может содержать URL-адрес (или URN) к файлу справки.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>The <ph id="ph1">&lt;xref:System.Exception&gt;</ph> class uses the HRESULT COR_E_EXCEPTION, which has the value 0x80131500.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Exception&gt;</ph> Класс использует COR_E_EXCEPTION HRESULT, который имеет значение 0x80131500.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>For a list of initial property values for an instance of the <ph id="ph1">&lt;xref:System.Exception&gt;</ph> class, see the <ph id="ph2">&lt;xref:System.Exception.%23ctor%2A&gt;</ph> constructors.</source>
          <target state="translated">Список начальных значений свойств для экземпляра <ph id="ph1">&lt;xref:System.Exception&gt;</ph> см. в описании <ph id="ph2">&lt;xref:System.Exception.%23ctor%2A&gt;</ph> конструкторы.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Performance considerations</source>
          <target state="translated">Особенности производительности</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Throwing or handling an exception consumes a significant amount of system resources and execution time.</source>
          <target state="translated">Создание или обработка исключений потребляет значительное количество системных ресурсов и времени выполнения.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Throw exceptions only to handle truly extraordinary conditions, not to handle predictable events or flow control.</source>
          <target state="translated">Создавать исключения только для обработки действительно чрезвычайных, не для обработки предсказуемых событий или управления потоком.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>For example, in some cases, such as when you're developing a class library, it's reasonable to throw an exception if a method argument is invalid, because you expect your method to be called with valid parameters.</source>
          <target state="translated">Например в некоторых случаях, например если вы разрабатываете библиотеку классов разумно создания исключения, если аргумент метода является недопустимым, так как предполагается, что метод может вызываться с допустимыми параметрами.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>An invalid method argument, if it is not the result of a usage error, means that something extraordinary has occurred.</source>
          <target state="translated">Аргумент недопустимый метод, если он не является результатом ошибки об использовании, означает, что произошло нечто непредвиденных.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Conversely, do not throw an exception if user input is invalid, because you can expect users to occasionally enter invalid data.</source>
          <target state="translated">И наоборот не создания исключения, если входные данные пользователя недопустимо, так как можно ожидать пользователь случайно введет недопустимые данные.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Instead, provide a retry mechanism so users can enter valid input.</source>
          <target state="translated">Вместо этого предоставляют механизм повторной попытки, поэтому пользователи могут вводить допустимые входные данные.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Nor should you use exceptions to handle usage errors.</source>
          <target state="translated">И не следует использовать исключения для обработки ошибок использования.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Instead, use <bpt id="p1">[</bpt>assertions<ept id="p1">](/visualstudio/debugger/assertions-in-managed-code)</ept> to identify and correct usage errors.</source>
          <target state="translated">Вместо этого используйте <bpt id="p1">[</bpt>утверждения<ept id="p1">](/visualstudio/debugger/assertions-in-managed-code)</ept> для выявления и исправления ошибок для использования.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>In addition, do not throw an exception when a return code is sufficient; do not convert a return code to an exception; and do not routinely catch an exception, ignore it, and then continue processing.</source>
          <target state="translated">Кроме того создает исключение, если достаточно кода возврата; код возврата не преобразуются в исключение; следует регулярно не catch исключения, игнорируйте его и затем продолжить обработку.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Re-throwing an exception</source>
          <target state="translated">Повторное создание исключения</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>In many cases, an exception handler simply wants to pass the exception on to the caller.</source>
          <target state="translated">Во многих случаях обработчик исключений просто хочет передать исключение в вызывающий объект.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>This most often occurs in:</source>
          <target state="translated">Это часто происходит в:</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>A class library that in turn wraps calls to methods in the .NET Framework class library or other class libraries.</source>
          <target state="translated">Библиотека классов, который в свою очередь включает вызовы методов в библиотеке классов .NET Framework или других библиотеках классов.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>An application or library that encounters a fatal exception.</source>
          <target state="translated">Приложение или библиотека, которая обнаруживает неустранимое исключение.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>The exception handler can log the exception and then re-throw the exception.</source>
          <target state="translated">Обработчик исключений может исключений в журнале и заново создать исключение.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>The recommended way to re-throw an exception is to simply use the <bpt id="p1">[</bpt>throw<ept id="p1">](~/docs/csharp/language-reference/keywords/throw.md)</ept> statement in C# and the <bpt id="p2">[</bpt>Throw<ept id="p2">](~/docs/visual-basic/language-reference/statements/throw-statement.md)</ept> statement in Visual Basic without including an expression.</source>
          <target state="translated">Рекомендуется повторно вызывать исключение является простое использование <bpt id="p1">[</bpt>throw<ept id="p1">](~/docs/csharp/language-reference/keywords/throw.md)</ept> инструкции на языке C# и <bpt id="p2">[</bpt>Throw<ept id="p2">](~/docs/visual-basic/language-reference/statements/throw-statement.md)</ept> инструкции в Visual Basic, не включая выражения.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>This ensures that all call stack information is preserved when the exception is propagated to the caller.</source>
          <target state="translated">Это гарантирует, что все данные о стеке вызовов сохраняется, когда исключение передается в вызывающий объект.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>The following example illustrates this.</source>
          <target state="translated">Это показано в следующем примере.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>A string extension method, <ph id="ph1">`FindOccurrences`</ph>, wraps one or more calls to <ph id="ph2">&lt;xref:System.String.IndexOf%28System.String%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> without validating its arguments beforehand.</source>
          <target state="translated">Расширения в строковый метод <ph id="ph1">`FindOccurrences`</ph>, включает один или несколько вызовов <ph id="ph2">&lt;xref:System.String.IndexOf%28System.String%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> без проверки аргументов заранее.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>A caller then calls <ph id="ph1">`FindOccurrences`</ph> twice.</source>
          <target state="translated">Вызывающий объект вызывает <ph id="ph1">`FindOccurrences`</ph> дважды.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>In the second call to <ph id="ph1">`FindOccurrences`</ph>, the caller passes a <ph id="ph2">`null`</ph> as the search string, which cases the <ph id="ph3">&lt;xref:System.String.IndexOf%28System.String%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> method to throw an <ph id="ph4">&lt;xref:System.ArgumentNullException&gt;</ph> exception.</source>
          <target state="translated">Во втором вызове к <ph id="ph1">`FindOccurrences`</ph>, вызывающий объект передает <ph id="ph2">`null`</ph> как строка поиска, какие варианты <ph id="ph3">&lt;xref:System.String.IndexOf%28System.String%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> метод выдает исключение <ph id="ph4">&lt;xref:System.ArgumentNullException&gt;</ph> исключение.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>This exception is handled by the <ph id="ph1">`FindOccurrences`</ph> method and passed back to the caller.</source>
          <target state="translated">Это исключение обрабатывается <ph id="ph1">`FindOccurrences`</ph> метод и передан обратно в вызывающий объект.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Because the throw statement is used with no expression, the output from the example shows that the call stack is preserved.</source>
          <target state="translated">Поскольку оператор throw без выражения, выходные данные примера показано сохранение стека вызовов.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>In contrast, if the exception is re-thrown by using the</source>
          <target state="translated">Напротив, если исключение вызывается повторно с помощью</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>statement, the full call stack is not preserved, and the example would generate the following output:</source>
          <target state="translated">инструкции, полный стек вызова, не сохраняется и пример бы создать следующие выходные данные:</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>A slightly more cumbersome alternative is to throw a new exception, and to preserve the original exception's call stack information in an inner exception.</source>
          <target state="translated">Немного более сложно альтернативой является для генерации нового исключения, а также сохранить исходное исключение сведений стека вызовов в внутреннее исключение.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>The caller can then use the new exception's <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property to retrieve stack frame and other information about the original exception.</source>
          <target state="translated">Вызывающий объект можно затем использовать новое исключение <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> свойства, чтобы получить кадр стека и другие сведения об исходном исключении.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>In this case, the throw statement is:</source>
          <target state="translated">В этом случае является оператор throw:</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>The user code that handles the exception has to know that the <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property contains information about the original exception, as the following exception handler illustrates.</source>
          <target state="translated">Пользовательский код, который обрабатывает исключение, должен знать, <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> свойство содержит сведения об исходном исключении, как показано на следующем обработчика исключений.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Choosing standard exceptions</source>
          <target state="translated">Выбор стандартных исключений</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>When you have to throw an exception, you can often use an existing exception type in the .NET Framework instead of implementing a custom exception.</source>
          <target state="translated">После создания исключения, часто можно использовать существующий тип исключения в .NET Framework вместо реализации пользовательского исключения.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>You should use a standard exception type under these two conditions:</source>
          <target state="translated">Следует использовать тип стандартное исключение в этих двух условий:</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>You are throwing an exception that is caused by a usage error (that is, by an error in program logic made by the developer who is calling your method).</source>
          <target state="translated">Создает исключение, вызвавшее ошибку использования (то есть, из-за ошибки в логике программы, принятых разработчиком, который вызывает метод).</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Typically, you would throw an exception such as <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>, <ph id="ph2">&lt;xref:System.ArgumentNullException&gt;</ph>, <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>, or <ph id="ph4">&lt;xref:System.NotSupportedException&gt;</ph>.</source>
          <target state="translated">Как правило, такие как может генерировать исключение <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>, <ph id="ph2">&lt;xref:System.ArgumentNullException&gt;</ph>, <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>, или <ph id="ph4">&lt;xref:System.NotSupportedException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>The string you supply to the exception object's constructor when instantiating the exception object should describe the error so that the developer can fix it.</source>
          <target state="translated">Строка, передаваемые конструктору объекта исключения, при создании экземпляра объекта исключения следует описания ошибки, чтобы разработчик может устранить проблему.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Exception.Message%2A&gt;</ph> property.</source>
          <target state="translated">Дополнительные сведения см. в описании свойства <ph id="ph1">&lt;xref:System.Exception.Message%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>You are handling an error that can be communicated to the caller with an existing .NET Framework exception.</source>
          <target state="translated">Обработке ошибок, который можно передать в вызывающем объекте с существующие исключения .NET Framework.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>You should throw the most derived exception possible.</source>
          <target state="translated">Необходимо вызвать исключение наиболее производного возможные исключения.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>For example, if a method requires an argument to be a valid member of an enumeration type, you should throw an <ph id="ph1">&lt;xref:System.ComponentModel.InvalidEnumArgumentException&gt;</ph> (the most derived class) rather than an <ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph>.</source>
          <target state="translated">Например, если метод требует аргумент, чтобы быть допустимыми членами типа перечисления, то следует вызвать <ph id="ph1">&lt;xref:System.ComponentModel.InvalidEnumArgumentException&gt;</ph> (наиболее производного класса), а не <ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>The following table lists common exception types and the conditions under which you would throw them.</source>
          <target state="translated">В следующей таблице перечислены общие типы исключений и условия, при которых будет порождать их.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Exception</source>
          <target state="translated">Исключение</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Condition</source>
          <target state="translated">Условие</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>A non-null argument that is passed to a method is invalid.</source>
          <target state="translated">Недопустимый аргумент отличное от null, который передается в метод.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>An argument that is passed to a method is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Аргумент, передаваемый в метод <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>An argument is outside the range of valid values.</source>
          <target state="translated">Аргумент находится вне диапазона допустимых значений.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Part of a directory path is not valid.</source>
          <target state="translated">Часть пути к каталогу не является допустимым.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>The denominator in an integer or <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> division operation is zero.</source>
          <target state="translated">Знаменатель в целое число или <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> операции деления равен нулю.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>A drive is unavailable or does not exist.</source>
          <target state="translated">Диск недоступен или не существует.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>A file does not exist.</source>
          <target state="translated">Файл не существует.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>A value is not in an appropriate format to be converted from a string by a conversion method such as <ph id="ph1">`Parse`</ph>.</source>
          <target state="translated">Значение не в соответствующем формате, для преобразования из строки с помощью метода преобразования например <ph id="ph1">`Parse`</ph>.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>An index is outside the bounds of an array or collection.</source>
          <target state="translated">Индекс находится вне границ массива или коллекции.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>A method call is invalid in an object's current state.</source>
          <target state="translated">Вызов метода является недопустимым в текущем состоянии объекта.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>The specified key for accessing a member in a collection cannot be found.</source>
          <target state="translated">Доступ к члену коллекции с заданным ключом не найден.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>A method or operation is not implemented.</source>
          <target state="translated">Метод или операция не реализованы.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>A method or operation is not supported.</source>
          <target state="translated">Метод или операция не поддерживается.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>An operation is performed on an object that has been disposed.</source>
          <target state="translated">Операции для объекта, который был удален.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>An arithmetic, casting, or conversion operation results in an overflow.</source>
          <target state="translated">Операция арифметического приведения или преобразования приводит к переполнению.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>A path or file name exceeds the maximum system-defined length.</source>
          <target state="translated">Путь или имя превышена максимальная длина, определенная системой.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>The operation is not supported on the current platform.</source>
          <target state="translated">Операция не поддерживается на текущей платформе.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>An array with the wrong number of dimensions is passed to a method.</source>
          <target state="translated">Массив с неверным числом размерностей передается в метод.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>The time interval allotted to an operation has expired.</source>
          <target state="translated">Истек интервал времени, назначенное для выполнения операции.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>An invalid Uniform Resource Identifier (URI) is used.</source>
          <target state="translated">Недопустимый универсальный код ресурса (URI) используется.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Implementing custom exceptions</source>
          <target state="translated">Реализация пользовательских исключений</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>In the following cases, using an existing .NET Framework exception to handle an error condition is not adequate:</source>
          <target state="translated">В следующих случаях использование существующих исключение .NET Framework для обработки ошибки не хватает:</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>When the exception reflects a unique program error that cannot be mapped to an existing .NET Framework exception.</source>
          <target state="translated">Если исключение отражает уникальный программной ошибки, который нельзя сопоставить с существующие исключения .NET Framework.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>When the exception requires handling that is different from the handling that is appropriate for an existing .NET Framework exception, or the exception must be disambiguated from a similar exception.</source>
          <target state="translated">Когда исключение требует обработки, который отличается от обработку, которая подходит для существующих исключение .NET Framework или исключение должно однозначно из аналогичное исключение.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>For example, if you throw an <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> exception when parsing the numeric representation of a string that is out of range of the target integral type, you would not want to use the same exception for an error that results from the caller not supplying the appropriate constrained values when calling the method.</source>
          <target state="translated">Например, если вы вызываете <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> исключение при синтаксическом анализе числовое представление строки, который выходит за пределы диапазона целевого типа, целочисленные, нет смысла использовать то же исключение для ошибки, полученной в результате код, вызывающий не указываются соответствующие значения ограниченного при вызове метода.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>The <ph id="ph1">&lt;xref:System.Exception&gt;</ph> class is the base class of all exceptions in the .NET Framework.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Exception&gt;</ph> Класс является базовым классом для всех исключений в .NET Framework.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Many derived classes rely on the inherited behavior of the members of the <ph id="ph1">&lt;xref:System.Exception&gt;</ph> class; they do not override the members of <ph id="ph2">&lt;xref:System.Exception&gt;</ph>, nor do they define any unique members.</source>
          <target state="translated">Многие производные классы полагаться на поведение наследуемых членов <ph id="ph1">&lt;xref:System.Exception&gt;</ph> класса; они не следует переопределять члены <ph id="ph2">&lt;xref:System.Exception&gt;</ph>, ни они определяют любой уникальных элементов.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>To define your own exception class:</source>
          <target state="translated">Чтобы определить собственный класс исключения:</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Define a class that inherits from <ph id="ph1">&lt;xref:System.Exception&gt;</ph>.</source>
          <target state="translated">Определите класс, который наследует от <ph id="ph1">&lt;xref:System.Exception&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>If necessary, define any unique members needed by your class to provide additional information about the exception.</source>
          <target state="translated">При необходимости определите все уникальные члены, требует класс для предоставления дополнительных сведений об исключении.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>For example, the <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph> class includes a <ph id="ph2">&lt;xref:System.ArgumentException.ParamName%2A&gt;</ph> property that specifies the name of the parameter whose argument caused the exception, and the <ph id="ph3">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph> property includes a <ph id="ph4">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException.MatchTimeout%2A&gt;</ph> property that indicates the time-out interval.</source>
          <target state="translated">Например <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph> класс включает <ph id="ph2">&lt;xref:System.ArgumentException.ParamName%2A&gt;</ph> свойство, которое указывает имя параметра, чей аргумент вызвала исключение, и <ph id="ph3">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph> включает свойство <ph id="ph4">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException.MatchTimeout%2A&gt;</ph> свойство, которое указывает интервал времени ожидания.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>If necessary, override any inherited members whose functionality you want to change or modify.</source>
          <target state="translated">При необходимости Переопределите любые наследуемые члены, функциональные возможности которых вы хотите изменить или изменить.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Note that most existing derived classes of <ph id="ph1">&lt;xref:System.Exception&gt;</ph> do not override the behavior of inherited members.</source>
          <target state="translated">Обратите внимание, что большинство существующих классов, производных от <ph id="ph1">&lt;xref:System.Exception&gt;</ph> не переопределить поведение унаследованных членов.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Determine whether your custom exception object is serializable.</source>
          <target state="translated">Определите, является ли сериализуемый объект пользовательское исключение.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Serialization enables you to save information about the exception and permits exception information to be shared by a server and a client proxy in a remoting context.</source>
          <target state="translated">Сериализация позволяет сохранить сведения об исключении и позволяет использовать сведения об исключении для совместного использования сервера и прокси-клиента в контексте удаленного взаимодействия.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>To make the exception object serializable, mark it with the <ph id="ph1">&lt;xref:System.SerializableAttribute&gt;</ph> attribute.</source>
          <target state="translated">Чтобы сделать сериализуемым объекта исключения, его необходимо пометить <ph id="ph1">&lt;xref:System.SerializableAttribute&gt;</ph> атрибута.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Define the constructors of your exception class.</source>
          <target state="translated">Определите конструкторы класса исключения.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Typically, exception classes have one or more of the following constructors:</source>
          <target state="translated">Как правило классы исключений имеют один или несколько из следующих конструкторов:</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source><ph id="ph1">&lt;xref:System.Exception.%23ctor&gt;</ph>, which uses default values to initialize the properties of a new exception object.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Exception.%23ctor&gt;</ph>, которая использует значения по умолчанию для инициализации свойства объекта исключения.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source><ph id="ph1">&lt;xref:System.Exception.%23ctor%28System.String%29&gt;</ph>, which initializes a new exception object with a specified error message.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Exception.%23ctor%28System.String%29&gt;</ph>, который инициализирует новый объект исключения с указанным сообщением об ошибке.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source><ph id="ph1">&lt;xref:System.Exception.%23ctor%28System.String%2CSystem.Exception%29&gt;</ph>, which initializes a new exception object with a specified error message and inner exception.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Exception.%23ctor%28System.String%2CSystem.Exception%29&gt;</ph>, который инициализирует новый объект исключения с сообщением и внутренним исключением указанной ошибки.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source><ph id="ph1">&lt;xref:System.Exception.%23ctor%28System.Runtime.Serialization.SerializationInfo%2CSystem.Runtime.Serialization.StreamingContext%29&gt;</ph>, which is a <ph id="ph2">`protected`</ph> constructor that initializes a new exception object from serialized data.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Exception.%23ctor%28System.Runtime.Serialization.SerializationInfo%2CSystem.Runtime.Serialization.StreamingContext%29&gt;</ph>, который является <ph id="ph2">`protected`</ph> конструктор, который инициализирует объект исключения из сериализованных данных.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>You should implement this constructor if you've chosen to make your exception object serializable.</source>
          <target state="translated">Необходимо реализовать этот конструктор, если вы выбрали сделать сериализуемым объекта исключения.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>The following example illustrates the use of a custom exception class.</source>
          <target state="translated">Следующий пример иллюстрирует использование класса пользовательского исключения.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>It defines a <ph id="ph1">`NotPrimeException`</ph> exception that is thrown when a client tries to retrieve a sequence of prime numbers by specifying a starting number that is not prime.</source>
          <target state="translated">Он определяет <ph id="ph1">`NotPrimeException`</ph> исключение, возникающее, когда клиент пытается получить последовательность простых чисел, указав начальный номер, который не является простым.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>The exception defines a new property, <ph id="ph1">`NonPrime`</ph>, that returns the non-prime number that caused the exception.</source>
          <target state="translated">Исключение определяет новое свойство <ph id="ph1">`NonPrime`</ph>, которая возвращает не простого числа, которое стало причиной текущего исключения.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Besides implementing a protected parameterless constructor and a constructor with <ph id="ph1">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph> and <ph id="ph2">&lt;xref:System.Runtime.Serialization.StreamingContext&gt;</ph> parameters for serialization, the <ph id="ph3">`NotPrimeException`</ph> class defines three additional constructors to support the <ph id="ph4">`NonPrime`</ph> property.</source>
          <target state="translated">Помимо реализации защищенный конструктор и конструктор с <ph id="ph1">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph> и <ph id="ph2">&lt;xref:System.Runtime.Serialization.StreamingContext&gt;</ph> параметры для сериализации, <ph id="ph3">`NotPrimeException`</ph> класс определяет три дополнительные конструкторы для поддержки <ph id="ph4">`NonPrime`</ph> свойство.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Each constructor calls a base class constructor in addition to preserving the value of the non-prime number.</source>
          <target state="translated">Каждый конструктор вызывает конструктор базового класса, помимо сохранения из простых нечисловое значение.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>The <ph id="ph1">`NotPrimeException`</ph> class is also marked with the <ph id="ph2">&lt;xref:System.SerializableAttribute&gt;</ph> attribute.</source>
          <target state="translated"><ph id="ph1">`NotPrimeException`</ph> Класса также помечается <ph id="ph2">&lt;xref:System.SerializableAttribute&gt;</ph> атрибута.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>The <ph id="ph1">`PrimeNumberGenerator`</ph> class shown in the following example uses the Sieve of Eratosthenes to calculate the sequence of prime numbers from 2 to a limit specified by the client in the call to its class constructor.</source>
          <target state="translated"><ph id="ph1">`PrimeNumberGenerator`</ph> Класс, показанный в следующем примере используется решета Эратосфена для вычисления последовательность простых чисел от 2 до предела, указанных клиентом в вызове конструктора класса.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>The <ph id="ph1">`GetPrimesFrom`</ph> method returns all prime numbers that are greater than or equal to a specified lower limit, but throws a <ph id="ph2">`NotPrimeException`</ph> if that lower limit is not a prime number.</source>
          <target state="translated"><ph id="ph1">`GetPrimesFrom`</ph> Метод возвращает все простые числа не меньше указанного нижнего предела, но создает исключение <ph id="ph2">`NotPrimeException`</ph> Если, нижний предел не простых чисел.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>The following example makes two calls to the <ph id="ph1">`GetPrimesFrom`</ph> method with non-prime numbers, one of which crosses application domain boundaries.</source>
          <target state="translated">В следующем примере создается два вызова <ph id="ph1">`GetPrimesFrom`</ph> метод с непростых чисел, один из которых пересекает границы домена приложения.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>In both cases, the exception is thrown and successfully handled in client code.</source>
          <target state="translated">В обоих случаях возникает исключение, которое успешно обработано в коде клиента.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Windows Runtime and <ph id="ph1">[!INCLUDE[net_v451](~/includes/net-v451-md.md)]</ph></source>
          <target state="translated">Среда выполнения Windows и <ph id="ph1">[!INCLUDE[net_v451](~/includes/net-v451-md.md)]</ph></target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>In <ph id="ph1">[!INCLUDE[net_win8_profile](~/includes/net-win8-profile-md.md)]</ph> for <ph id="ph2">[!INCLUDE[win8](~/includes/win8-md.md)]</ph>, some exception information is typically lost when an exception is propagated through non-.NET Framework stack frames.</source>
          <target state="translated">В <ph id="ph1">[!INCLUDE[net_win8_profile](~/includes/net-win8-profile-md.md)]</ph> для <ph id="ph2">[!INCLUDE[win8](~/includes/win8-md.md)]</ph>, некоторые сведения об исключении обычно теряется, когда исключение распространяется через кадры стека в .NET Framework.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v451](~/includes/net-v451-md.md)]</ph> and <ph id="ph2">[!INCLUDE[win81](~/includes/win81-md.md)]</ph>, the common language runtime continues to use the original <ph id="ph3">&lt;xref:System.Exception&gt;</ph> object that was thrown unless that exception was modified in a non-.NET Framework stack frame.</source>
          <target state="translated">Начиная с <ph id="ph1">[!INCLUDE[net_v451](~/includes/net-v451-md.md)]</ph> и <ph id="ph2">[!INCLUDE[win81](~/includes/win81-md.md)]</ph>, общеязыковая среда выполнения будет продолжать использовать исходные <ph id="ph3">&lt;xref:System.Exception&gt;</ph> объекта, вызванное исключение, если это исключение в кадре стека .NET Framework была изменена.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>The following example demonstrates a <ph id="ph1">`catch`</ph> block that is defined to handle <ph id="ph2">&lt;xref:System.ArithmeticException&gt;</ph> errors.</source>
          <target state="translated">В следующем примере демонстрируется <ph id="ph1">`catch`</ph> блок, который определен для обработки <ph id="ph2">&lt;xref:System.ArithmeticException&gt;</ph> ошибок.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Exception">
          <source>This <ph id="ph1">`catch`</ph> block also catches <ph id="ph2">&lt;xref:System.DivideByZeroException&gt;</ph> errors, because <ph id="ph3">&lt;xref:System.DivideByZeroException&gt;</ph> derives from <ph id="ph4">&lt;xref:System.ArithmeticException&gt;</ph> and there is no <ph id="ph5">`catch`</ph> block explicitly defined for <ph id="ph6">&lt;xref:System.DivideByZeroException&gt;</ph> errors.</source>
          <target state="translated">Это <ph id="ph1">`catch`</ph> также блокировать перехватываются <ph id="ph2">&lt;xref:System.DivideByZeroException&gt;</ph> ошибки, так как <ph id="ph3">&lt;xref:System.DivideByZeroException&gt;</ph> является производным от <ph id="ph4">&lt;xref:System.ArithmeticException&gt;</ph> и не <ph id="ph5">`catch`</ph> явно определены для блока <ph id="ph6">&lt;xref:System.DivideByZeroException&gt;</ph> ошибок.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="T:System.Exception">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> class.</source>
          <target state="translated">Инициализирует новый экземпляр класса <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Exception.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> class.</source>
          <target state="translated">Инициализирует новый экземпляр класса <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.#ctor">
          <source>This constructor initializes the <ph id="ph1">&lt;xref:System.Exception.Message%2A&gt;</ph> property of the new instance to a system-supplied message that describes the error and takes into account the current system culture.</source>
          <target state="translated">Этот конструктор инициализирует свойство <ph id="ph1">&lt;xref:System.Exception.Message%2A&gt;</ph> нового экземпляра, используя системное сообщение, которое описывает ошибку и учитывает текущий язык и региональные параметры системы.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.#ctor">
          <source>All the derived classes should provide this default constructor.</source>
          <target state="translated">Все производные классы должны предоставлять конструктор по умолчанию.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.#ctor">
          <source>The following table shows the initial property values for an instance of <ph id="ph1">&lt;xref:System.Exception&gt;</ph>.</source>
          <target state="translated">В следующей таблице представлены исходные значения свойств экземпляра класса <ph id="ph1">&lt;xref:System.Exception&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.#ctor">
          <source>Property</source>
          <target state="translated">Свойство.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.#ctor">
          <source>Value</source>
          <target state="translated">Значение</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.#ctor">
          <source>A null reference (<ph id="ph1">`Nothing`</ph> in Visual Basic).</source>
          <target state="translated">Пустая ссылка (<ph id="ph1">`Nothing`</ph> в Visual Basic).</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.#ctor">
          <source>A system-supplied localized description.</source>
          <target state="translated">Локализованное описание, предоставляемое системой.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.#ctor">
          <source>The following code example derives an <ph id="ph1">`Exception`</ph> that uses a predefined message.</source>
          <target state="translated">В следующем примере является производным <ph id="ph1">`Exception`</ph> , использующий стандартные сообщения.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.#ctor">
          <source>The code demonstrates the use of the parameterless constructor for the derived class and the base <ph id="ph1">`Exception`</ph> class.</source>
          <target state="translated">В коде показано использование конструктора без параметров для производного класса, а базовый <ph id="ph1">`Exception`</ph> класса.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.Exception.#ctor(System.String)">
          <source>The message that describes the error.</source>
          <target state="translated">Сообщение, описывающее ошибку.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Exception.#ctor(System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> class with a specified error message.</source>
          <target state="translated">Инициализирует новый экземпляр класса <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> с указанным сообщением об ошибке.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.#ctor(System.String)">
          <source>This constructor initializes the <ph id="ph1">&lt;xref:System.Exception.Message%2A&gt;</ph> property of the new instance by using the <ph id="ph2">`message`</ph> parameter.</source>
          <target state="translated">Этот конструктор инициализирует <ph id="ph1">&lt;xref:System.Exception.Message%2A&gt;</ph> свойств нового экземпляра с помощью <ph id="ph2">`message`</ph> параметра.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.#ctor(System.String)">
          <source>If the <ph id="ph1">`message`</ph> parameter is <ph id="ph2">`null`</ph>, this is the same as calling the <ph id="ph3">&lt;xref:System.Exception.%23ctor%2A&gt;</ph> constructor.</source>
          <target state="translated">Если <ph id="ph1">`message`</ph> параметр <ph id="ph2">`null`</ph>, это то же самое, что и вызов метода <ph id="ph3">&lt;xref:System.Exception.%23ctor%2A&gt;</ph> конструктор.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.#ctor(System.String)">
          <source>The following table shows the initial property values for an instance of <ph id="ph1">&lt;xref:System.Exception&gt;</ph>.</source>
          <target state="translated">В следующей таблице представлены исходные значения свойств экземпляра класса <ph id="ph1">&lt;xref:System.Exception&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.#ctor(System.String)">
          <source>Property</source>
          <target state="translated">Свойство.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.#ctor(System.String)">
          <source>Value</source>
          <target state="translated">Значение</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.#ctor(System.String)">
          <source>A null reference (<ph id="ph1">`Nothing`</ph> in Visual Basic).</source>
          <target state="translated">Пустая ссылка (<ph id="ph1">`Nothing`</ph> в Visual Basic).</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.#ctor(System.String)">
          <source>The error message string.</source>
          <target state="translated">Строка сообщения об ошибке.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.#ctor(System.String)">
          <source>The following code example derives an <ph id="ph1">`Exception`</ph> for a specific condition.</source>
          <target state="translated">В следующем примере является производным <ph id="ph1">`Exception`</ph> для определенного условия.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.#ctor(System.String)">
          <source>The code demonstrates the use of the constructor that takes a caller-specified message as a parameter, for both the derived class and the base <ph id="ph1">`Exception`</ph> class.</source>
          <target state="translated">В коде показано использование конструктора, который принимает в качестве параметра, базовый и производный класс сообщения, определяемый вызывающим объектом <ph id="ph1">`Exception`</ph> класса.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> that holds the serialized object data about the exception being thrown.</source>
          <target state="translated">Объект <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph>, хранящий сериализованные данные объекта, относящиеся к выдаваемому исключению.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.StreamingContext" /&gt;</ph> that contains contextual information about the source or destination.</source>
          <target state="translated">Объект <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.StreamingContext" /&gt;</ph>, содержащий контекстные сведения об источнике или назначении.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> class with serialized data.</source>
          <target state="translated">Инициализирует новый экземпляр класса <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> с сериализованными данными.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>This constructor is called during deserialization to reconstitute the exception object transmitted over a stream.</source>
          <target state="translated">Данный конструктор вызывается в процессе десериализации для воссоздания объекта исключения, переданного в потоке.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>For more information, see <bpt id="p1">[</bpt>XML and SOAP Serialization<ept id="p1">](~/docs/standard/serialization/xml-and-soap-serialization.md)</ept>.</source>
          <target state="translated">Дополнительные сведения см. в разделе <bpt id="p1">[</bpt>сериализации XML и SOAP<ept id="p1">](~/docs/standard/serialization/xml-and-soap-serialization.md)</ept>.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The following code example defines a derived serializable <ph id="ph1">`Exception`</ph> class.</source>
          <target state="translated">В следующем примере кода определяется производный сериализуемый <ph id="ph1">`Exception`</ph> класса.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The code forces a divide-by-0 error and then creates an instance of the derived exception using the (<ph id="ph1">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph>, <ph id="ph2">&lt;xref:System.Runtime.Serialization.StreamingContext&gt;</ph>) constructor.</source>
          <target state="translated">Код вызывает ошибку деления ноль и затем создается экземпляр производного исключения, используя (<ph id="ph1">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph>, <ph id="ph2">&lt;xref:System.Runtime.Serialization.StreamingContext&gt;</ph>) конструктора.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The code serializes the instance to a file, deserializes the file into a new exception, which it throws, and then catches and displays the exception's data.</source>
          <target state="translated">Код выполняет сериализацию экземпляра в файл, десериализацию файла в новое исключение, которое вызывает исключение, а затем перехватывает и отображает данные исключения.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="M:System.Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The <ph id="ph1">&lt;paramref name="info" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Параметр <ph id="ph1">&lt;paramref name="info" /&gt;</ph> имеет значение <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The class name is <ph id="ph1">&lt;see langword="null" /&gt;</ph> or <ph id="ph2">&lt;see cref="P:System.Exception.HResult" /&gt;</ph> is zero (0).</source>
          <target state="translated">Имя класса — <ph id="ph1">&lt;see langword="null" /&gt;</ph>, или значение свойства <ph id="ph2">&lt;see cref="P:System.Exception.HResult" /&gt;</ph> равно нулю (0).</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:System.Exception.#ctor(System.String,System.Exception)">
          <source>The error message that explains the reason for the exception.</source>
          <target state="translated">Сообщение об ошибке, указывающее причину создания исключения.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="M:System.Exception.#ctor(System.String,System.Exception)">
          <source>The exception that is the cause of the current exception, or a null reference (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic) if no inner exception is specified.</source>
          <target state="translated">Исключение, вызвавшее текущее исключение, или пустая ссылка (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> в Visual Basic), если внутреннее исключение не задано.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.Exception.#ctor(System.String,System.Exception)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> class with a specified error message and a reference to the inner exception that is the cause of this exception.</source>
          <target state="translated">Инициализирует новый экземпляр класса <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> указанным сообщением об ошибке и ссылкой на внутреннее исключение, вызвавшее данное исключение.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.#ctor(System.String,System.Exception)">
          <source>An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property.</source>
          <target state="translated">Исключение, созданное как прямой результат предыдущего исключения, должно содержать в свойстве <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> ссылку на предыдущее исключение.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.#ctor(System.String,System.Exception)">
          <source>The <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property returns the same value that is passed into the constructor, or a null reference (<ph id="ph2">`Nothing`</ph> in Visual Basic) if the <ph id="ph3">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property does not supply the inner exception value to the constructor.</source>
          <target state="translated">Свойство <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> возвращает то же значение, которое передается конструктору, или пустую ссылку (<ph id="ph2">`Nothing`</ph> в Visual Basic), если свойство <ph id="ph3">&lt;xref:System.Exception.InnerException%2A&gt;</ph> не предоставляет конструктору значение внутреннего исключения.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.#ctor(System.String,System.Exception)">
          <source>The following table shows the initial property values for an instance of <ph id="ph1">&lt;xref:System.Exception&gt;</ph>.</source>
          <target state="translated">В следующей таблице представлены исходные значения свойств экземпляра класса <ph id="ph1">&lt;xref:System.Exception&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.#ctor(System.String,System.Exception)">
          <source>Property</source>
          <target state="translated">Свойство.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.#ctor(System.String,System.Exception)">
          <source>Value</source>
          <target state="translated">Значение</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.#ctor(System.String,System.Exception)">
          <source>The inner exception reference.</source>
          <target state="translated">Ссылка на внутреннее исключение.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.#ctor(System.String,System.Exception)">
          <source>The error message string.</source>
          <target state="translated">Строка сообщения об ошибке.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.#ctor(System.String,System.Exception)">
          <source>The following code example derives an <ph id="ph1">`Exception`</ph> for a specific condition.</source>
          <target state="translated">В следующем примере является производным <ph id="ph1">`Exception`</ph> для определенного условия.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.#ctor(System.String,System.Exception)">
          <source>The code demonstrates the use of the constructor that takes a message and an inner exception as parameters, for both the derived class and the base <ph id="ph1">`Exception`</ph> class.</source>
          <target state="translated">В коде показано использование конструктора, который принимает сообщение и внутреннее исключение, как параметры для базового и производного класса <ph id="ph1">`Exception`</ph> класса.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="P:System.Exception.Data">
          <source>Gets a collection of key/value pairs that provide additional user-defined information about the exception.</source>
          <target state="translated">Возвращает коллекцию пар ключ/значение, предоставляющие дополнительные сведения об исключении, определяемые пользователем.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Data">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> interface and contains a collection of user-defined key/value pairs.</source>
          <target state="translated">Объект, который реализует интерфейс <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> и содержит коллекцию заданных пользователем пар «ключ — значение».</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Data">
          <source>The default is an empty collection.</source>
          <target state="translated">По умолчанию является пустой коллекцией.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Data">
          <source>Use the <ph id="ph1">&lt;xref:System.Collections.IDictionary?displayProperty=nameWithType&gt;</ph> object returned by the <ph id="ph2">&lt;xref:System.Exception.Data%2A&gt;</ph> property to store and retrieve supplementary information relevant to the exception.</source>
          <target state="translated">Используйте <ph id="ph1">&lt;xref:System.Collections.IDictionary?displayProperty=nameWithType&gt;</ph> объект, возвращаемый <ph id="ph2">&lt;xref:System.Exception.Data%2A&gt;</ph> свойство для сохранения и получения дополнительных сведений, относящихся к исключение.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Data">
          <source>The information is in the form of an arbitrary number of user-defined key/value pairs.</source>
          <target state="translated">Эта информация содержится в виде произвольное число пар ключей и значений, определяемых пользователем.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Data">
          <source>The key component of each key/value pair is typically an identifying string, whereas the value component of the pair can be any type of object.</source>
          <target state="translated">Ключевым компонентом каждая пара ключ значение обычно является идентифицирующая строка, в то время как компонент значение пары может быть любой тип объекта.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Data">
          <source>Key/Value Pair Security</source>
          <target state="translated">Безопасность пар ключ значение</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Data">
          <source>The key/value pairs stored in the collection returned by the <ph id="ph1">&lt;xref:System.Exception.Data%2A&gt;</ph> property are not secure.</source>
          <target state="translated">Пар ключей и значений, хранящихся в коллекции, возвращенной <ph id="ph1">&lt;xref:System.Exception.Data%2A&gt;</ph> свойства не являются безопасными.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Data">
          <source>If your application calls a nested series of routines, and each routine contains exception handlers, the resulting call stack contains a hierarchy of those exception handlers.</source>
          <target state="translated">Если приложение вызывает вложенную последовательность подпрограмм, а каждая процедура содержит обработчики исключений, стек вызовов содержит иерархию этих обработчиков исключений.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Data">
          <source>If a lower-level routine throws an exception, any upper-level exception handler in the call stack hierarchy can read and/or modify the key/value pairs stored in the collection by any other exception handler.</source>
          <target state="translated">Если подпрограмма нижнего уровня вызывает исключение, все обработчики исключений верхнего уровня в иерархии стека вызова чтения и не может изменить пар ключей и значений, хранящихся в коллекции с любым другим обработчиком исключений.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Data">
          <source>This means you must guarantee that the information in the key/value pairs is not confidential and that your application will operate correctly if the information in the key/value pairs is corrupted.</source>
          <target state="translated">Это означает, что необходимо обеспечить сведения в пары «ключ значение» не является конфиденциальной и что работают приложения, если повреждены сведения в пары «ключ значение».</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Data">
          <source>Key Conflicts</source>
          <target state="translated">Конфликты ключей</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Data">
          <source>A key conflict occurs when different exception handlers specify the same key to access a key/value pair.</source>
          <target state="translated">Ключа конфликт возникает, когда разных обработчиках исключений задан один и тот же ключ доступа к пару ключ значение.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Data">
          <source>Use caution when developing your application because the consequence of a key conflict is that lower-level exception handlers can inadvertently communicate with higher-level exception handlers, and this communication might cause subtle program errors.</source>
          <target state="translated">Соблюдайте осторожность при разработке приложения, так как вследствие конфликта ключей обработчики исключений нижнего уровня могут случайно взаимодействовать с обработчиками исключений верхнего уровня, что это взаимодействие может привести к ошибкам небольшие программы.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Data">
          <source>However, if you are cautious you can use key conflicts to enhance your application.</source>
          <target state="translated">Однако при наличии осторожность конфликтов ключей можно использовать для расширения возможностей приложения.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Data">
          <source>Avoiding Key Conflicts</source>
          <target state="translated">Предотвращение конфликтов ключей</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Data">
          <source>Avoid key conflicts by adopting a naming convention to generate unique keys for key/value pairs.</source>
          <target state="translated">Предупреждения конфликтов можно принять контекст именования, чтобы создавать уникальные ключи для пар "ключ значение".</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Data">
          <source>For example, a naming convention might yield a key that consists of the period-delimited name of your application, the method that provides supplementary information for the pair, and a unique identifier.</source>
          <target state="translated">Например соглашение об именовании могут быть получены ключ, который состоит из имени разделенного точками приложения, метод, предоставляющий дополнительные сведения для пары и уникальный идентификатор.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Data">
          <source>Suppose two applications, named Products and Suppliers, each has a method named Sales.</source>
          <target state="translated">Предположим, что два приложения с именем товары и поставщики, каждый имеет метод с именем Sales.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Data">
          <source>The Sales method in the Products application provides the identification number (the stock keeping unit or SKU) of a product.</source>
          <target state="translated">Метод Sales в приложении Products предоставляет идентификационный номер (складского хранения подразделение или номера SKU) продукта.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Data">
          <source>The Sales method in the Suppliers application provides the identification number, or SID, of a supplier.</source>
          <target state="translated">Метод Sales в приложении Suppliers предоставляет идентификационный номер или идентификатор безопасности, поставщика.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Data">
          <source>Consequently, the naming convention for this example yields the keys, "Products.Sales.SKU" and "Suppliers.Sales.SID".</source>
          <target state="translated">Следовательно соглашение об именовании для этого примера дает ключей, «Products.Sales.SKU» и «Suppliers.Sales.SID».</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Data">
          <source>Exploiting Key Conflicts</source>
          <target state="translated">Использования конфликтов ключей</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Data">
          <source>Exploit key conflicts by using the presence of one or more special, prearranged keys to control processing.</source>
          <target state="translated">Конфликтом ключей можно воспользоваться с помощью наличие одного или нескольких специальных, применив ключей для управления обработкой.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Data">
          <source>Suppose, in one scenario, the highest level exception handler in the call stack hierarchy catches all exceptions thrown by lower-level exception handlers.</source>
          <target state="translated">Предположим, что в одном сценарии обработчик исключений высокого уровня в иерархии стека вызова перехватывает все исключения, обработчиками исключений нижнего уровня.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Data">
          <source>If a key/value pair with a special key exists, the high-level exception handler formats the remaining key/value pairs in the <ph id="ph1">&lt;xref:System.Collections.IDictionary&gt;</ph> object in some nonstandard way; otherwise, the remaining key/value pairs are formatted in some normal manner.</source>
          <target state="translated">Если пара "ключ значение" с особым ключом существует, обработчик исключений высшего уровня форматирует остальные пары ключ значение в <ph id="ph1">&lt;xref:System.Collections.IDictionary&gt;</ph> объекта либо нестандартным образом; в противном случае оставшиеся пары ключ значение форматируются неким обычным способом.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Data">
          <source>Now suppose, in another scenario, the exception handler at each level of the call stack hierarchy catches the exception thrown by the next lower-level exception handler.</source>
          <target state="translated">Теперь предположим, что в другом сценарии обработчик исключений на каждом уровне иерархии стека вызова перехватывает исключение, вызванное следующий обработчик исключений нижнего уровня.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Data">
          <source>In addition, each exception handler knows the collection returned by the <ph id="ph1">&lt;xref:System.Exception.Data%2A&gt;</ph> property contains a set of key/value pairs that can be accessed with a prearranged set of keys.</source>
          <target state="translated">Кроме того, каждому обработчику исключений известно в коллекцию, возвращаемую <ph id="ph1">&lt;xref:System.Exception.Data%2A&gt;</ph> свойство содержит набор пар "ключ значение", доступных с помощью заданного набора ключей.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Data">
          <source>Each exception handler uses the prearranged set of keys to update the value component of the corresponding key/value pair with information unique to that exception handler.</source>
          <target state="translated">Каждый обработчик исключений использует заданный набор ключей, чтобы обновить значение компонента для соответствующей пары ключ значение сведениями, уникальными для этого обработчика исключений.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Data">
          <source>After the update process is complete, the exception handler throws the exception to the next higher-level exception handler.</source>
          <target state="translated">После завершения процесса обновления, обработчик исключений создается исключение в обработчик исключений следующего более высокого уровня.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Data">
          <source>Finally, the highest level exception handler accesses the key/value pairs and displays the consolidated update information from all the lower-level exception handlers.</source>
          <target state="translated">Наконец обработчик исключений высокого уровня обращается к пары «ключ значение» и отображает обновления объединенные данные из всех обработчиков исключений более низкого уровня.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Data">
          <source>The following example demonstrates how to add and retrieve information using the <ph id="ph1">&lt;xref:System.Exception.Data%2A&gt;</ph> property.</source>
          <target state="translated">В следующем примере показано, как добавлять и извлекать информацию с помощью <ph id="ph1">&lt;xref:System.Exception.Data%2A&gt;</ph> свойство.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" uid="M:System.Exception.GetBaseException">
          <source>When overridden in a derived class, returns the <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> that is the root cause of one or more subsequent exceptions.</source>
          <target state="translated">При переопределении в производном классе возвращает исключение <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph>, которое является корневой причиной одного или нескольких последующих исключений.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" uid="M:System.Exception.GetBaseException">
          <source>The first exception thrown in a chain of exceptions.</source>
          <target state="translated">В цепочке исключений создается первое исключение.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" uid="M:System.Exception.GetBaseException">
          <source>If the <ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> property of the current exception is a null reference (<ph id="ph2">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic), this property returns the current exception.</source>
          <target state="translated">Если значением свойства <ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> текущего исключения является пустая ссылка (<ph id="ph2">&lt;see langword="Nothing" /&gt;</ph> в Visual Basic), это свойство возвращает текущее исключение.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.GetBaseException">
          <source>A chain of exceptions consists of a set of exceptions such that each exception in the chain was thrown as a direct result of the exception referenced in its <ph id="ph1">`InnerException`</ph> property.</source>
          <target state="translated">Цепь исключений состоит из набора исключений, таким образом, что каждый в цепочке возникло исключение в результате исключения, на которые ссылается его <ph id="ph1">`InnerException`</ph> свойство.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.GetBaseException">
          <source>For a given chain, there can be exactly one exception that is the root cause of all other exceptions in the chain.</source>
          <target state="translated">Для данной цепи может существовать только одно исключение, вызвавшее все исключения в цепочке.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.GetBaseException">
          <source>This exception is called the base exception and its <ph id="ph1">`InnerException`</ph> property always contains a null reference.</source>
          <target state="translated">Это исключение вызывается базовое исключение и его <ph id="ph1">`InnerException`</ph> свойства всегда содержит пустую ссылку.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.GetBaseException">
          <source>For all exceptions in a chain of exceptions, the <ph id="ph1">`GetBaseException`</ph> method must return the same object (the base exception).</source>
          <target state="translated">Для всех исключений в цепочке исключений <ph id="ph1">`GetBaseException`</ph> метод должен возвращать один и тот же объект (базовое исключение).</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.GetBaseException">
          <source>Use the <ph id="ph1">`GetBaseException`</ph> method when you want to find the root cause of an exception but do not need information about exceptions that may have occurred between the current exception and the first exception.</source>
          <target state="translated">Используйте <ph id="ph1">`GetBaseException`</ph> метод, если требуется найти причину исключения, но не обязательно сведения об исключениях, которые могли возникнуть между текущего исключения и первое исключение.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.GetBaseException">
          <source>The following code example defines two derived <ph id="ph1">`Exception`</ph> classes.</source>
          <target state="translated">В следующем примере кода определяется два производных <ph id="ph1">`Exception`</ph> классы.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.GetBaseException">
          <source>It forces an exception and then throws it again with each of the derived classes.</source>
          <target state="translated">Он вызывает исключение и затем вызывает его с каждым из производных классов.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.GetBaseException">
          <source>The code shows the use of the <ph id="ph1">`GetBaseException`</ph> method to retrieve the original exception.</source>
          <target state="translated">В коде показано использование объекта <ph id="ph1">`GetBaseException`</ph> метод для извлечения исходное исключение.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.GetBaseException">
          <source>The <ph id="ph1">&lt;see langword="GetBaseException" /&gt;</ph> method is overridden in classes that require control over the exception content or format.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="GetBaseException" /&gt;</ph> Метод переопределяется в классах, которые требуют управления содержанием исключения или форматом.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" uid="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> that holds the serialized object data about the exception being thrown.</source>
          <target state="translated">Объект <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph>, хранящий сериализованные данные объекта, относящиеся к выдаваемому исключению.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" uid="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.StreamingContext" /&gt;</ph> that contains contextual information about the source or destination.</source>
          <target state="translated">Объект <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.StreamingContext" /&gt;</ph>, содержащий контекстные сведения об источнике или назначении.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" uid="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>When overridden in a derived class, sets the <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> with information about the exception.</source>
          <target state="translated">При переопределении в производном классе задает объект <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> со сведениями об исключении.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source><ph id="ph1">`GetObjectData`</ph> sets a <ph id="ph2">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph> with all the exception object data targeted for serialization.</source>
          <target state="translated">Метод <ph id="ph1">`GetObjectData`</ph> загружает в объект <ph id="ph2">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph> все данные объекта исключения, предназначенные для сериализации.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>During deserialization, the exception is reconstituted from the <ph id="ph1">`SerializationInfo`</ph> transmitted over the stream.</source>
          <target state="translated">В процессе десериализации исключение воссоздается из объекта <ph id="ph1">`SerializationInfo`</ph>, переданного в потоке.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The following code example defines a derived serializable <ph id="ph1">`Exception`</ph> class that implements <ph id="ph2">`GetObjectData`</ph>, which makes minor changes to two properties and then calls the base class to perform the serialization.</source>
          <target state="translated">В следующем примере кода определяется производный сериализуемый <ph id="ph1">`Exception`</ph> класс, реализующий <ph id="ph2">`GetObjectData`</ph>, который вносит незначительные изменения в два свойства, и затем вызывает базовый класс для выполнения сериализации.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The example forces a divide-by-0 error and then creates an instance of the derived exception.</source>
          <target state="translated">В примере принудительно ошибку деления ноль и затем создается экземпляр производного исключения.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The code serializes the instance to a file, deserializes the file into a new exception, which it throws, and then catches and displays the exception's data.</source>
          <target state="translated">Код выполняет сериализацию экземпляра в файл, десериализацию файла в новое исключение, которое вызывает исключение, а затем перехватывает и отображает данные исключения.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" uid="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The <ph id="ph1">&lt;paramref name="info" /&gt;</ph> parameter is a null reference (<ph id="ph2">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic).</source>
          <target state="translated">Значением параметра <ph id="ph1">&lt;paramref name="info" /&gt;</ph> является пустая ссылка (<ph id="ph2">&lt;see langword="Nothing" /&gt;</ph> в Visual Basic).</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">требуется полное доверие для непосредственно вызывающего метода.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Этот член не может использоваться частично доверенным или прозрачным кодом.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" uid="M:System.Exception.GetType">
          <source>Gets the runtime type of the current instance.</source>
          <target state="translated">Возвращает тип среды выполнения текущего экземпляра.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="M:System.Exception.GetType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object that represents the exact runtime type of the current instance.</source>
          <target state="translated">Объект <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>, представляющий точный тип среды выполнения текущего экземпляра.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.GetType">
          <source>The <ph id="ph1">&lt;xref:System.Exception.GetType%2A&gt;</ph> method exists to support the .NET Framework infrastructure, and internally invokes the fundamental method, <ph id="ph2">&lt;xref:System.Object.GetType%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Exception.GetType%2A&gt;</ph> Метод служит для поддержки инфраструктуры .NET Framework и внутренним образом вызывает метод фундаментальные <ph id="ph2">&lt;xref:System.Object.GetType%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" uid="P:System.Exception.HelpLink">
          <source>Gets or sets a link to the help file associated with this exception.</source>
          <target state="translated">Получает или задает ссылку на файл справки, связанный с этим исключением.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.HelpLink">
          <source>The Uniform Resource Name (URN) or Uniform Resource Locator (URL).</source>
          <target state="translated">URN или URL-адрес.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.HelpLink">
          <source>The return value, which represents a help file, is a URN or URL.</source>
          <target state="translated">Возвращаемым значением, представляющим файл справки, является URN или URL-адрес.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.HelpLink">
          <source>For example, the <ph id="ph1">`HelpLink`</ph> value could be:</source>
          <target state="translated">Например <ph id="ph1">`HelpLink`</ph> значение может быть:</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.HelpLink">
          <source>"file:///C:/Applications/Bazzal/help.html#ErrorNum42"</source>
          <target state="translated">"file:///C:/Applications/Bazzal/help.html#ErrorNum42"</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.HelpLink">
          <source>The following code example throws an <ph id="ph1">`Exception`</ph> that sets the <ph id="ph2">`HelpLink`</ph> property in its constructor and then catches the exception and displays <ph id="ph3">`HelpLink`</ph>.</source>
          <target state="translated">В следующем коде возникает исключение пример <ph id="ph1">`Exception`</ph> , которая устанавливает <ph id="ph2">`HelpLink`</ph> свойства в его конструктор и перехватываются исключения и отображает <ph id="ph3">`HelpLink`</ph>.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" uid="P:System.Exception.HResult">
          <source>Gets or sets HRESULT, a coded numerical value that is assigned to a specific exception.</source>
          <target state="translated">Возвращает или задает HRESULT — кодированное числовое значение, присвоенное определенному исключению.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.HResult">
          <source>The HRESULT value.</source>
          <target state="translated">Значение HRESULT.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.HResult">
          <source>HRESULT is a 32-bit value, divided into three different fields: a severity code, a facility code, and an error code.</source>
          <target state="translated">HRESULT является 32-разрядное значение, разделенное на три различных поля: код серьезности ошибки, код устройства и код ошибки.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.HResult">
          <source>The severity code indicates whether the return value represents information, warning, or error.</source>
          <target state="translated">Код серьезности указывает тип возвращаемого значения: сведения, предупреждение или ошибка.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.HResult">
          <source>The facility code identifies the area of the system responsible for the error.</source>
          <target state="translated">Код устройства определяет область системы, ответственную за ошибку.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.HResult">
          <source>The error code is a unique number that is assigned to represent the exception.</source>
          <target state="translated">Код ошибки — уникальный номер, представляющий исключение.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.HResult">
          <source>Each exception is mapped to a distinct HRESULT.</source>
          <target state="translated">Каждое исключение сопоставляется с различными значениями HRESULT.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.HResult">
          <source>When managed code throws an exception, the runtime passes the HRESULT to the COM client.</source>
          <target state="translated">При создании исключения в управляемом коде, среда выполнения передает значение HRESULT в COM-клиенту.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.HResult">
          <source>When unmanaged code returns an error, the HRESULT is converted to an exception, which is then thrown by the runtime.</source>
          <target state="translated">Когда неуправляемый код возвращает ошибку, HRESULT преобразуется в исключение, которое затем создается средой выполнения.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.HResult">
          <source>For information about HRESULT values and their corresponding .NET Framework exceptions, see <bpt id="p1">[</bpt>How to: Map HRESULTs and Exceptions<ept id="p1">](~/docs/framework/interop/how-to-map-hresults-and-exceptions.md)</ept>.</source>
          <target state="translated">Сведения о значениях HRESULT и их соответствующие исключения .NET Framework см. в разделе <bpt id="p1">[</bpt>как: сопоставление значений HRESULT и исключений<ept id="p1">](~/docs/framework/interop/how-to-map-hresults-and-exceptions.md)</ept>.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.HResult">
          <source>See <bpt id="p1">[</bpt>Common HRESULT Values<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa378137.aspx)</ept> in the Windows documentation for a list of the values you are most likely to encounter.</source>
          <target state="translated">В разделе <bpt id="p1">[</bpt>часто встречающихся значений HRESULT<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa378137.aspx)</ept> в документации по Windows список значений, то, скорее всего, будут обнаруживаться.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.HResult">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, the <ph id="ph2">&lt;xref:System.Exception.HResult%2A&gt;</ph> property's setter is protected, whereas its getter is public.</source>
          <target state="translated">Начиная с <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, <ph id="ph2">&lt;xref:System.Exception.HResult%2A&gt;</ph> установщики свойств защищен, в то время как его метода считывания является открытым.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.HResult">
          <source>In previous versions of the .NET Framework, both getter and setter are protected.</source>
          <target state="translated">В предыдущих версиях платформы .NET Framework защищены Get и set.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.HResult">
          <source>The following code example defines a derived <ph id="ph1">`Exception`</ph> class that sets the <ph id="ph2">`HResult`</ph> property to a custom value in its constructor.</source>
          <target state="translated">В следующем примере кода определяется производный <ph id="ph1">`Exception`</ph> класс, который задает <ph id="ph2">`HResult`</ph> свойство пользовательское значение в конструкторе.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" uid="P:System.Exception.InnerException">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> instance that caused the current exception.</source>
          <target state="translated">Возвращает экземпляр класса <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph>, который вызвал текущее исключение.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.InnerException">
          <source>An object that describes the error that caused the current exception.</source>
          <target state="translated">Объект, описывающий ошибку, которая вызвала текущее исключение.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.InnerException">
          <source>The <ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> property returns the same value as was passed into the <ph id="ph2">&lt;see cref="M:System.Exception.#ctor(System.String,System.Exception)" /&gt;</ph> constructor, or <ph id="ph3">&lt;see langword="null" /&gt;</ph> if the inner exception value was not supplied to the constructor.</source>
          <target state="translated">Свойство <ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> возвращает то же значение, что было передано в конструктор <ph id="ph2">&lt;see cref="M:System.Exception.#ctor(System.String,System.Exception)" /&gt;</ph>, или значение <ph id="ph3">&lt;see langword="null" /&gt;</ph>, если конструктору не было передано значение внутреннего исключения.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.InnerException">
          <source>This property is read-only.</source>
          <target state="translated">Это свойство доступно только для чтения.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.InnerException">
          <source>When an exception <ph id="ph1">`X`</ph> is thrown as a direct result of a previous exception <ph id="ph2">`Y`</ph>, the <ph id="ph3">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property of <ph id="ph4">`X`</ph> should contain a reference to <ph id="ph5">`Y`</ph>.</source>
          <target state="translated">Если исключение <ph id="ph1">`X`</ph> вызывается как прямой результат предыдущего исключения <ph id="ph2">`Y`</ph>, <ph id="ph3">&lt;xref:System.Exception.InnerException%2A&gt;</ph> свойство <ph id="ph4">`X`</ph> должен содержать ссылку на <ph id="ph5">`Y`</ph>.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.InnerException">
          <source>Use the <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property to obtain the set of exceptions that led to the current exception.</source>
          <target state="translated">Свойство <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> используется, чтобы получить набор исключений, ставших причиной текущего исключения.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.InnerException">
          <source>You can create a new exception that catches an earlier exception.</source>
          <target state="translated">Можно создать новое исключение, которое перехватывает это исключение.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.InnerException">
          <source>The code that handles the second exception can make use of the additional information from the earlier exception to handle the error more appropriately.</source>
          <target state="translated">Код, обрабатывающий второе исключение позволяют использовать дополнительные сведения из предыдущего исключения для более качественной обработки ошибки.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.InnerException">
          <source>Suppose that there is a function that reads a file and formats the data from that file.</source>
          <target state="translated">Предположим, что имеется функция, которая считывает файл и форматирует данные из этого файла.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.InnerException">
          <source>In this example, as the code tries to read the file, an <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph> is thrown.</source>
          <target state="translated">В этом примере, как код пытается прочитать файл <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph> возникает исключение.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.InnerException">
          <source>The function catches the <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph> and throws a <ph id="ph2">&lt;xref:System.IO.FileNotFoundException&gt;</ph>.</source>
          <target state="translated">Функция перехватывает <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph> и вызывает <ph id="ph2">&lt;xref:System.IO.FileNotFoundException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.InnerException">
          <source>The <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph> could be saved in the <ph id="ph2">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property of the <ph id="ph3">&lt;xref:System.IO.FileNotFoundException&gt;</ph>, enabling the code that catches the <ph id="ph4">&lt;xref:System.IO.FileNotFoundException&gt;</ph> to examine the cause of the initial error.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph> Может быть сохранен в <ph id="ph2">&lt;xref:System.Exception.InnerException%2A&gt;</ph> свойство <ph id="ph3">&lt;xref:System.IO.FileNotFoundException&gt;</ph>, коду, который перехватывает <ph id="ph4">&lt;xref:System.IO.FileNotFoundException&gt;</ph> чтобы определить причину исходной ошибки.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.InnerException">
          <source>The <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property, which holds a reference to the inner exception, is set upon initialization of the exception object.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> Свойство, которое содержит ссылку на внутреннее исключение, устанавливается при инициализации объекта исключения.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.InnerException">
          <source>The following example demonstrates throwing and catching an exception that references an inner exception.</source>
          <target state="translated">В следующем примере показано создание и перехват исключения, ссылку на внутреннее исключение.</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" uid="P:System.Exception.Message">
          <source>Gets a message that describes the current exception.</source>
          <target state="translated">Получает сообщение, описывающее текущее исключение.</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Message">
          <source>The error message that explains the reason for the exception, or an empty string ("").</source>
          <target state="translated">Сообщение об ошибке с объяснением причин исключения или пустая строка ("").</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Message">
          <source>Error messages target the developer who is handling the exception.</source>
          <target state="translated">Сообщения об ошибках для целевых платформ разработчика, который обрабатывает исключение.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Message">
          <source>The text of the <ph id="ph1">&lt;xref:System.Exception.Message%2A&gt;</ph> property should completely describe the error and, when possible, should also explain how to correct the error.</source>
          <target state="translated">Текст <ph id="ph1">&lt;xref:System.Exception.Message%2A&gt;</ph> свойство должно содержать полное описание ошибки и, когда это возможно, следует также объясняется, как исправить ошибку.</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Message">
          <source>Top-level exception handlers may display the message to end-users, so you should ensure that it is grammatically correct and that each sentence of the message ends with a period.</source>
          <target state="translated">Обработчики исключений верхнего уровня может отобразить сообщение для конечных пользователей, поэтому следует проверить правильность грамматически и каждое предложение сообщения заканчивается точкой.</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Message">
          <source>Do not use question marks or exclamation points.</source>
          <target state="translated">Не используйте вопросительные знаки или восклицательные знаки.</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Message">
          <source>If your application uses localized exception messages, you should ensure that they are accurately translated.</source>
          <target state="translated">Если приложение использует исключение локализованные сообщения, следует убедиться, что они преобразуются точно.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Message">
          <source>Do not disclose sensitive information in exception messages without checking for the appropriate permissions.</source>
          <target state="translated">Не раскрывает конфиденциальные сведения в сообщениях об исключениях без проверки на наличие соответствующих разрешений.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Message">
          <source>The value of the <ph id="ph1">&lt;xref:System.Exception.Message%2A&gt;</ph> property is included in the information returned by <ph id="ph2">&lt;xref:System.Exception.ToString%2A&gt;</ph>.The <ph id="ph3">&lt;xref:System.Exception.Message%2A&gt;</ph> property is set only when creating an <ph id="ph4">&lt;xref:System.Exception&gt;</ph>.</source>
          <target state="translated">Значение <ph id="ph1">&lt;xref:System.Exception.Message%2A&gt;</ph> свойство включено в сведения, возвращаемые функцией <ph id="ph2">&lt;xref:System.Exception.ToString%2A&gt;</ph>. <ph id="ph3">&lt;xref:System.Exception.Message%2A&gt;</ph> Свойство имеет значение только при создании <ph id="ph4">&lt;xref:System.Exception&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Message">
          <source>If no message was supplied to the constructor for the current instance, the system supplies a default message that is formatted using the current system culture.</source>
          <target state="translated">Если сообщение не было передано конструктору для текущего экземпляра, система предоставляет сообщение по умолчанию, которое форматируется с использованием текущего языка и региональных параметров системы.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Message">
          <source>Windows Runtime and <ph id="ph1">[!INCLUDE[net_v451](~/includes/net-v451-md.md)]</ph></source>
          <target state="translated">Среда выполнения Windows и <ph id="ph1">[!INCLUDE[net_v451](~/includes/net-v451-md.md)]</ph></target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Message">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v451](~/includes/net-v451-md.md)]</ph> and <ph id="ph2">[!INCLUDE[win81](~/includes/win81-md.md)]</ph>, the fidelity of error messages from exceptions that are propagated from Windows Runtime types and members that are not part of the .NET Framework is improved.</source>
          <target state="translated">Начиная с <ph id="ph1">[!INCLUDE[net_v451](~/includes/net-v451-md.md)]</ph> и <ph id="ph2">[!INCLUDE[win81](~/includes/win81-md.md)]</ph>, повысить точность сообщения об ошибках из исключений, которые распространяются из среды выполнения Windows типы и члены, которые не являются частью .NET Framework.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Message">
          <source>In particular, exception messages from Visual C++ component extensions (C++/CX) are now propagated back into .NET Framework <ph id="ph1">&lt;xref:System.Exception&gt;</ph> objects.</source>
          <target state="translated">В частности, исключение сообщений из расширения компонентов Visual C++ (C + +/ CX) теперь распространяются обратно в .NET Framework <ph id="ph1">&lt;xref:System.Exception&gt;</ph> объектов.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Message">
          <source>The following code example throws and then catches an <ph id="ph1">&lt;xref:System.Exception&gt;</ph> Exception and displays the exception's text message using the <ph id="ph2">&lt;xref:System.Exception.Message%2A&gt;</ph> property.</source>
          <target state="translated">В следующем примере кода создает исключение и затем перехватывает <ph id="ph1">&lt;xref:System.Exception&gt;</ph> исключение и отображает текст исключения сообщение с помощью <ph id="ph2">&lt;xref:System.Exception.Message%2A&gt;</ph> свойство.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Message">
          <source>If you throw an exception from a property, and you need to refer in the text of <ph id="ph1">&lt;see cref="P:System.Exception.Message" /&gt;</ph> to the property argument that you set or get, use "value" as the name of the property argument.</source>
          <target state="translated">При создании исключения из свойства, и вам потребуется обратиться в тексте <ph id="ph1">&lt;see cref="P:System.Exception.Message" /&gt;</ph> свойство аргументу, задать или получить, используйте «value» как имя свойства аргумента.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Message">
          <source>The <ph id="ph1">&lt;see cref="P:System.Exception.Message" /&gt;</ph> property is overridden in classes that require control over message content or format.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Exception.Message" /&gt;</ph> Переопределяется в классах, которые требуют контроля над содержанием сообщений или форматом.</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Message">
          <source>Application code typically accesses this property when it needs to display information about an exception that has been caught.</source>
          <target state="translated">Код приложения обычно обращается к этому свойству, когда необходимо вывести сведения об исключении, которое было выявлено.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Message">
          <source>The error message should be localized.</source>
          <target state="translated">Сообщение об ошибке должно быть локализовано.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" uid="E:System.Exception.SerializeObjectState">
          <source>Occurs when an exception is serialized to create an exception state object that contains serialized data about the exception.</source>
          <target state="translated">Возникает, когда исключение сериализовано для создания объекта состояния исключения, содержащего сериализованные данные об исключении.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Exception.SerializeObjectState">
          <source>The exception state object implements the <ph id="ph1">&lt;xref:System.Runtime.Serialization.ISafeSerializationData&gt;</ph> interface.</source>
          <target state="translated">Реализует объект состояния исключения <ph id="ph1">&lt;xref:System.Runtime.Serialization.ISafeSerializationData&gt;</ph> интерфейса.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Exception.SerializeObjectState">
          <source>When the <ph id="ph1">&lt;xref:System.Exception.SerializeObjectState&gt;</ph> event is subscribed to, the exception is deserialized and created as an empty exception.</source>
          <target state="translated">Когда <ph id="ph1">&lt;xref:System.Exception.SerializeObjectState&gt;</ph> событиях подписаться, исключение десериализации, а создано исключение пустой.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Exception.SerializeObjectState">
          <source>The exception's constructor is not run, and the exception state is also deserialized.</source>
          <target state="translated">Конструктор исключения не запускается, и также десериализуется состояние исключения.</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Exception.SerializeObjectState">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Serialization.ISafeSerializationData.CompleteDeserialization%2A&gt;</ph> callback method of the exception state object is then notified so that it can push deserialized data into the empty exception.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.Serialization.ISafeSerializationData.CompleteDeserialization%2A&gt;</ph> , Чтобы его можно передать десериализованные данные в пустой исключение будет вызываться метод обратного вызова объекта состояния исключения.</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Exception.SerializeObjectState">
          <source>The <ph id="ph1">&lt;xref:System.Exception.SerializeObjectState&gt;</ph> event enables transparent exception types to serialize and deserialize exception data.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Exception.SerializeObjectState&gt;</ph> Событий включает типы исключений прозрачным для сериализации и десериализации данных исключения.</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Exception.SerializeObjectState">
          <source>Transparent code can execute commands within the bounds of the permission set it is operating within, but cannot execute, call, derive from, or contain critical code.</source>
          <target state="translated">Прозрачный код может выполнять команды в пределах набора разрешений, который работает в пределах, оно, но нельзя выполнения, вызовите, являются производными от или содержать критический код.</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Exception.SerializeObjectState">
          <source>If the <ph id="ph1">&lt;xref:System.Exception.SerializeObjectState&gt;</ph> event is not subscribed to, deserialization occurs as usual using the <ph id="ph2">&lt;xref:System.Exception.%23ctor%2A&gt;</ph> constructor.</source>
          <target state="translated">Если <ph id="ph1">&lt;xref:System.Exception.SerializeObjectState&gt;</ph> событий не подписана, как обычно с помощью десериализации <ph id="ph2">&lt;xref:System.Exception.%23ctor%2A&gt;</ph> конструктор.</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Exception.SerializeObjectState">
          <source>Typically, a handler for the <ph id="ph1">&lt;xref:System.Exception.SerializeObjectState&gt;</ph> event is added in the exception's constructor to provide for its serialization.</source>
          <target state="translated">Как правило, обработчик <ph id="ph1">&lt;xref:System.Exception.SerializeObjectState&gt;</ph> событий добавляется в конструктор исключения для обеспечения его сериализации.</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Exception.SerializeObjectState">
          <source>But because the constructor is not executed when the <ph id="ph1">&lt;xref:System.Exception.SerializeObjectState&gt;</ph> event handler executes, serializing a deserialized exception can throw a <ph id="ph2">&lt;xref:System.Runtime.Serialization.SerializationException&gt;</ph> exception when you try to deserialize the exception.</source>
          <target state="translated">Но так как конструктор не выполняется при <ph id="ph1">&lt;xref:System.Exception.SerializeObjectState&gt;</ph> выполняется обработчик событий, сериализация десериализованный исключение может вызывать <ph id="ph2">&lt;xref:System.Runtime.Serialization.SerializationException&gt;</ph> исключение при попытке десериализации исключения.</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Exception.SerializeObjectState">
          <source>To avoid this, you should also add the handler for the <ph id="ph1">&lt;xref:System.Exception.SerializeObjectState&gt;</ph> event in the <ph id="ph2">&lt;xref:System.Runtime.Serialization.ISafeSerializationData.CompleteDeserialization%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Чтобы избежать этого, также следует добавить обработчик <ph id="ph1">&lt;xref:System.Exception.SerializeObjectState&gt;</ph> события в <ph id="ph2">&lt;xref:System.Runtime.Serialization.ISafeSerializationData.CompleteDeserialization%2A?displayProperty=nameWithType&gt;</ph> метод.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Exception.SerializeObjectState">
          <source>See the Examples section for an illustration.</source>
          <target state="translated">В разделе примеры для иллюстрации.</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Exception.SerializeObjectState">
          <source>The following example defines a <ph id="ph1">`BadDivisionException`</ph> that handles the <ph id="ph2">&lt;xref:System.Exception.SerializeObjectState&gt;</ph> event.</source>
          <target state="translated">В следующем примере определяется <ph id="ph1">`BadDivisionException`</ph> , обрабатывающий <ph id="ph2">&lt;xref:System.Exception.SerializeObjectState&gt;</ph> событий.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Exception.SerializeObjectState">
          <source>It also contains a state object, which is a nested structure named <ph id="ph1">`BadDivisionExceptionState`</ph> that implements the <ph id="ph2">&lt;xref:System.Runtime.Serialization.ISafeSerializationData&gt;</ph> interface.</source>
          <target state="translated">Он также содержит объект состояния, который является вложенным структура с именем <ph id="ph1">`BadDivisionExceptionState`</ph> , реализующий <ph id="ph2">&lt;xref:System.Runtime.Serialization.ISafeSerializationData&gt;</ph> интерфейса.</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Exception.SerializeObjectState">
          <source>The <ph id="ph1">`BadDivisionException`</ph> exception is thrown when a floating-point division by zero occurs.</source>
          <target state="translated"><ph id="ph1">`BadDivisionException`</ph> Исключение создается в случае с плавающей запятой с деление на ноль.</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Exception.SerializeObjectState">
          <source>During the first division by zero, the example instantiates a <ph id="ph1">`BadDivisionException`</ph> object, serializes it, and throws the exception.</source>
          <target state="translated">Во время первого деления на ноль, в примере создается экземпляр <ph id="ph1">`BadDivisionException`</ph> объект, сериализует его и создается исключение.</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Exception.SerializeObjectState">
          <source>When subsequent divisions by zero occur, the example deserializes the  previously serialized object, reserializes it, and throws the exception.</source>
          <target state="translated">При возникновении последующих делений на ноль, в примере выполняет десериализацию ранее сериализованного объекта, сериализацию и создается исключение.</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Exception.SerializeObjectState">
          <source>To provide for object serialization, deserialization, reserialization, and deserialization, the example adds the <ph id="ph1">&lt;xref:System.Exception.SerializeObjectState&gt;</ph> event handler both in the <ph id="ph2">`BadDivisionException`</ph> class constructor and in the <ph id="ph3">&lt;xref:System.Runtime.Serialization.ISafeSerializationData.CompleteDeserialization%2A?displayProperty=nameWithType&gt;</ph> implementation.</source>
          <target state="translated">Чтобы обеспечить для сериализации, десериализации, reserialization и десериализации объектов, в этом примере добавляется <ph id="ph1">&lt;xref:System.Exception.SerializeObjectState&gt;</ph> обработчик событий как в <ph id="ph2">`BadDivisionException`</ph> конструктора класса и в <ph id="ph3">&lt;xref:System.Runtime.Serialization.ISafeSerializationData.CompleteDeserialization%2A?displayProperty=nameWithType&gt;</ph> реализации.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Exception.SerializeObjectState">
          <source>If this event is subscribed to and used, all derived types that follow in the inheritance hierarchy must implement the same serialization mechanism.</source>
          <target state="translated">Если это событие подписаться и используется, все производные типы, следующие за ним в иерархии наследования необходимо реализовать один и тот же механизм сериализации.</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" uid="P:System.Exception.Source">
          <source>Gets or sets the name of the application or the object that causes the error.</source>
          <target state="translated">Возвращает или задает имя приложения или объекта, вызывавшего ошибку.</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Source">
          <source>The name of the application or the object that causes the error.</source>
          <target state="translated">Имя приложения или объекта, вызвавшего ошибку.</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Source">
          <source>If the <ph id="ph1">&lt;xref:System.Exception.Source%2A&gt;</ph> property is not set explicitly, the runtime automatically sets it to the name of the assembly in which the exception originated.</source>
          <target state="translated">Если <ph id="ph1">&lt;xref:System.Exception.Source%2A&gt;</ph> свойство не задано явно, среда выполнения автоматически устанавливает его на имя сборки, в которой возникло исключение.</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.Source">
          <source>The following example throws an <ph id="ph1">`Exception`</ph> that sets the <ph id="ph2">`Source`</ph> property in its constructor and then catches the exception and displays <ph id="ph3">`Source`</ph>.</source>
          <target state="translated">В следующем примере показано возникновение <ph id="ph1">`Exception`</ph> , которая устанавливает <ph id="ph2">`Source`</ph> свойства в его конструктор и перехватываются исключения и отображает <ph id="ph3">`Source`</ph>.</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" uid="P:System.Exception.Source">
          <source>The object must be a runtime <ph id="ph1">&lt;see cref="N:System.Reflection" /&gt;</ph> object</source>
          <target state="translated">Объект должен быть объектом среды выполнения <ph id="ph1">&lt;see cref="N:System.Reflection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" uid="P:System.Exception.StackTrace">
          <source>Gets a string representation of the immediate frames on the call stack.</source>
          <target state="translated">Получает строковое представление непосредственных кадров в стеке вызова.</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.StackTrace">
          <source>A string that describes the immediate frames of the call stack.</source>
          <target state="translated">Строка, описывающая непосредственные фреймы стека вызова.</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.StackTrace">
          <source>The execution stack keeps track of all the methods that are in execution at a given instant.</source>
          <target state="translated">В стеке выполнения отслеживаются все методы, выполняемые в данный момент времени.</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.StackTrace">
          <source>A trace of the method calls is called a stack trace.</source>
          <target state="translated">Трассировка вызовов метода называется трассировкой стека.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.StackTrace">
          <source>The stack trace listing provides a way to follow the call stack to the line number in the method where the exception occurs.</source>
          <target state="translated">Список трассировок стека позволяет проследить стек вызовов номер строки в метод, где возникло исключение.</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.StackTrace">
          <source>The <ph id="ph1">&lt;xref:System.Exception.StackTrace%2A&gt;</ph> property returns the frames of the call stack that originate at the location where the exception was thrown.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Exception.StackTrace%2A&gt;</ph> Свойство возвращает кадры стека вызовов, которые создаются в расположении, где возникло исключение.</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.StackTrace">
          <source>You can obtain information about additional frames in the call stack by creating a new instance of the <ph id="ph1">&lt;xref:System.Diagnostics.StackTrace?displayProperty=nameWithType&gt;</ph> class and using its <ph id="ph2">&lt;xref:System.Diagnostics.StackTrace.ToString%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Сведения о дополнительных кадров в стеке вызовов можно получить, создав новый экземпляр <ph id="ph1">&lt;xref:System.Diagnostics.StackTrace?displayProperty=nameWithType&gt;</ph> класса и использование его <ph id="ph2">&lt;xref:System.Diagnostics.StackTrace.ToString%2A?displayProperty=nameWithType&gt;</ph> метод.</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.StackTrace">
          <source>The common language runtime (CLR) updates the stack trace whenever an exception is thrown in application code (by using the <ph id="ph1">`throw`</ph> keyword).</source>
          <target state="translated">Общеязыковая среда выполнения (CLR) обновляет трассировки стека, каждый раз, когда создается исключение в коде приложения (с помощью <ph id="ph1">`throw`</ph> ключевое слово).</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.StackTrace">
          <source>If the exception was rethrown in a method that is different than the method where it was originally thrown, the stack trace contains both the location in the method where the exception was originally thrown, and the location in the method where the exception was rethrown.</source>
          <target state="translated">Если исключение в методе, который отличается от метода, где первоначально было передано, трассировка стека содержит расположение в методе, где первоначально было выдано исключение и расположение в методе, где возникло исключение создано повторно.</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.StackTrace">
          <source>If the exception is thrown, and later rethrown, in the same method, the stack trace only contains the location where the exception was rethrown and does not include the location where the exception was originally thrown.</source>
          <target state="translated">Если возникает исключение и позднее снова в один и тот же метод, трассировка стека содержит только область, где было повторно вызвано исключение и не включает место, где первоначально было выдано исключение.</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.StackTrace">
          <source>The <ph id="ph1">&lt;xref:System.Exception.StackTrace%2A&gt;</ph> property may not report as many method calls as expected because of code transformations, such as inlining, that occur during optimization.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Exception.StackTrace%2A&gt;</ph> Свойство может сообщать не обо столько предполагаемых вызовах методов из-за преобразований кода, таких как встраивание, происходящих во время оптимизации.</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.StackTrace">
          <source>The following code example throws an <ph id="ph1">`Exception`</ph> and then catches it and displays a stack trace using the <ph id="ph2">`StackTrace`</ph> property.</source>
          <target state="translated">В следующем коде возникает исключение пример <ph id="ph1">`Exception`</ph> перехватывает его и отображает трассировку стека с помощью <ph id="ph2">`StackTrace`</ph> свойство.</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.StackTrace">
          <source>The <ph id="ph1">&lt;see langword="StackTrace" /&gt;</ph> property is overridden in classes that require control over the stack trace content or format.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="StackTrace" /&gt;</ph> Переопределяется в классах, которые требуют управления содержимым трассировки стека или форматом.</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.StackTrace">
          <source>By default, the stack trace is captured immediately before an exception object is thrown.</source>
          <target state="translated">По умолчанию трассировка стека фиксируется немедленно до создания объекта исключения.</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.StackTrace">
          <source>Use <ph id="ph1">&lt;see cref="P:System.Environment.StackTrace" /&gt;</ph> to get stack trace information when no exception is being thrown.</source>
          <target state="translated">Используйте <ph id="ph1">&lt;see cref="P:System.Environment.StackTrace" /&gt;</ph> для получения сведения о трассировке стека, если исключение не возникает.</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" uid="P:System.Exception.TargetSite">
          <source>Gets the method that throws the current exception.</source>
          <target state="translated">Возвращает метод, создавший текущее исключение.</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.TargetSite">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.MethodBase" /&gt;</ph> that threw the current exception.</source>
          <target state="translated">Метод <ph id="ph1">&lt;see cref="T:System.Reflection.MethodBase" /&gt;</ph>, вызвавший текущее исключение.</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.TargetSite">
          <source>If the method that throws this exception is not available and the stack trace is not a null reference (<ph id="ph1">`Nothing`</ph> in Visual Basic), <ph id="ph2">&lt;xref:System.Exception.TargetSite%2A&gt;</ph> obtains the method from the stack trace.</source>
          <target state="translated">Если метод, который создает это исключение, недоступен и трассировка стека не является пустой ссылкой (<ph id="ph1">`Nothing`</ph> в Visual Basic), <ph id="ph2">&lt;xref:System.Exception.TargetSite%2A&gt;</ph> получает метод из трассировки стека.</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.TargetSite">
          <source>If the stack trace is a null reference, <ph id="ph1">&lt;xref:System.Exception.TargetSite%2A&gt;</ph> also returns a null reference.</source>
          <target state="translated">Если трассировка стека является нулевой ссылкой, то <ph id="ph1">&lt;xref:System.Exception.TargetSite%2A&gt;</ph> также возвращает нулевую ссылку.</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.TargetSite">
          <source>The <ph id="ph1">&lt;xref:System.Exception.TargetSite%2A&gt;</ph> property may not accurately report the name of the method in which an exception was thrown if the exception handler handles an exception across application domain boundaries.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Exception.TargetSite%2A&gt;</ph> Свойство может неточно сообщать имя метода, в котором возникло исключение, если обработчик исключений обрабатывает исключение через границы домена приложения.</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Exception.TargetSite">
          <source>The following code example throws an <ph id="ph1">`Exception`</ph> and then catches it and displays the originating method using the <ph id="ph2">`TargetSite`</ph> property.</source>
          <target state="translated">В следующем коде возникает исключение пример <ph id="ph1">`Exception`</ph> перехватывает его и отображает исходный метод с помощью <ph id="ph2">`TargetSite`</ph> свойство.</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" uid="M:System.Exception.ToString">
          <source>Creates and returns a string representation of the current exception.</source>
          <target state="translated">Создает и возвращает строковое представление текущего исключения.</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" uid="M:System.Exception.ToString">
          <source>A string representation of the current exception.</source>
          <target state="translated">Строковое представление текущего исключения.</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.ToString">
          <source><ph id="ph1">&lt;xref:System.Exception.ToString%2A&gt;</ph> returns a representation of the current exception that is intended to be understood by humans.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Exception.ToString%2A&gt;</ph> Возвращает представление текущего исключения, которое должно быть понятно пользователю.</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.ToString">
          <source>Where the exception contains culture-sensitive data, the string representation returned by <ph id="ph1">`ToString`</ph> is required to take into account the current system culture.</source>
          <target state="translated">Если исключение содержит данные, зависящие от языка и региональных параметров, возвращаемых строковое представление <ph id="ph1">`ToString`</ph> требуется учитывает текущую культуру системы.</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.ToString">
          <source>Although there are no exact requirements for the format of the returned string, it should attempt to reflect the value of the object as perceived by the user.</source>
          <target state="translated">Несмотря на то, что не существует точных требований к формат возвращаемой строки, следует попытаться отражает значение объекта, воспринимаемое пользователем.</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.ToString">
          <source>The default implementation of <ph id="ph1">&lt;xref:System.Exception.ToString%2A&gt;</ph> obtains the name of the class that threw the current exception, the message, the result of calling <ph id="ph2">&lt;xref:System.Exception.ToString%2A&gt;</ph> on the inner exception, and the result of calling <ph id="ph3">&lt;xref:System.Environment.StackTrace%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Реализация по умолчанию <ph id="ph1">&lt;xref:System.Exception.ToString%2A&gt;</ph> получает имя класса, который вызвал текущее исключение, сообщение, результат вызова <ph id="ph2">&lt;xref:System.Exception.ToString%2A&gt;</ph> на внутреннее исключение и результатом вызова метода <ph id="ph3">&lt;xref:System.Environment.StackTrace%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.ToString">
          <source>If any of these members is <ph id="ph1">`null`</ph>, its value is not included in the returned string.</source>
          <target state="translated">Если какие-либо из этих членов <ph id="ph1">`null`</ph>, его значение не включается в возвращаемую строку.</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.ToString">
          <source>If there is no error message or if it is an empty string (""), then no error message is returned.</source>
          <target state="translated">Если сообщение об ошибке или если это пустая строка ("»), то возвращается сообщение об ошибке.</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.ToString">
          <source>The name of the inner exception and the stack trace are returned only if they are not <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Имя внутреннего исключения и трассировку стека, возвращаются только в том случае, если они не являются <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.ToString">
          <source>This method overrides <ph id="ph1">&lt;xref:System.Object.ToString%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Этот метод переопределяет метод <ph id="ph1">&lt;xref:System.Object.ToString%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.ToString">
          <source>The following example causes an exception and displays the result of calling <ph id="ph1">&lt;xref:System.Exception.ToString%2A&gt;</ph> on that exception.</source>
          <target state="translated">Следующий пример приводит к возникновению исключения и отображает результат вызова <ph id="ph1">&lt;xref:System.Exception.ToString%2A&gt;</ph> на это исключение.</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Exception.ToString">
          <source>Note that the <ph id="ph1">&lt;xref:System.Exception.ToString%2A?displayProperty=nameWithType&gt;</ph> method is called implicitly when the Exception class instance appears in the argument list of the <ph id="ph2">&lt;xref:System.Console.WriteLine%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Обратите внимание, что <ph id="ph1">&lt;xref:System.Exception.ToString%2A?displayProperty=nameWithType&gt;</ph> метод вызывается неявно, когда экземпляр класса Exception появится в списке аргументов <ph id="ph2">&lt;xref:System.Console.WriteLine%2A?displayProperty=nameWithType&gt;</ph> метод.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>