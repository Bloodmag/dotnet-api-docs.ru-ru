<Type Name="FlagsAttribute" FullName="System.FlagsAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4b2417901d3ec970c72a2c6cc0524b2108855ce0" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36431668" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class FlagsAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit FlagsAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.FlagsAttribute" />
  <TypeSignature Language="VB.NET" Value="Public Class FlagsAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class FlagsAttribute : Attribute" />
  <TypeSignature Language="F#" Value="type FlagsAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Enum, Inherited=false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="dc881-101">Указывает, что перечисление может обрабатываться как битовое поле (т. е. набор флагов).</span>
      <span class="sxs-lookup">
        <span data-stu-id="dc881-101">Indicates that an enumeration can be treated as a bit field; that is, a set of flags.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc881-102">Битовые поля обычно используются для списков элементов, которые могут возникнуть в сочетании, тогда как константы перечисления обычно используются для списков элементов взаимно исключают друг друга.</span><span class="sxs-lookup"><span data-stu-id="dc881-102">Bit fields are generally used for lists of elements that might occur in combination, whereas enumeration constants are generally used for lists of mutually exclusive elements.</span></span> <span data-ttu-id="dc881-103">Таким образом битовые поля предназначены для объединения с помощью побитовой операции или для создания неименованных значений, а констант перечисления.</span><span class="sxs-lookup"><span data-stu-id="dc881-103">Therefore, bit fields are designed to be combined with a bitwise OR operation to generate unnamed values, whereas enumerated constants are not.</span></span> <span data-ttu-id="dc881-104">Их использование битовых полей, по сравнению с константами перечисления в разных языках.</span><span class="sxs-lookup"><span data-stu-id="dc881-104">Languages vary in their use of bit fields compared to enumeration constants.</span></span>  
  
## <a name="attributes-of-the-flagsattribute"></a><span data-ttu-id="dc881-105">Атрибуты FlagsAttribute</span><span class="sxs-lookup"><span data-stu-id="dc881-105">Attributes of the FlagsAttribute</span></span>  
 <span data-ttu-id="dc881-106"><xref:System.AttributeUsageAttribute> применяется к этому классу и его <xref:System.AttributeUsageAttribute.Inherited%2A> указывает свойство `false`.</span><span class="sxs-lookup"><span data-stu-id="dc881-106"><xref:System.AttributeUsageAttribute> is applied to this class, and its <xref:System.AttributeUsageAttribute.Inherited%2A> property specifies `false`.</span></span> <span data-ttu-id="dc881-107">Этот атрибут может применяться только к перечислениям.</span><span class="sxs-lookup"><span data-stu-id="dc881-107">This attribute can only be applied to enumerations.</span></span>  
  
## <a name="guidelines-for-flagsattribute-and-enum"></a><span data-ttu-id="dc881-108">Рекомендации по FlagsAttribute и перечисления</span><span class="sxs-lookup"><span data-stu-id="dc881-108">Guidelines for FlagsAttribute and Enum</span></span>  
  
-   <span data-ttu-id="dc881-109">Используйте <xref:System.FlagsAttribute> настраиваемый атрибут для перечисления только в том случае, если операцию побитового (AND, OR, ИСКЛЮЧАЮЩИЙ или) должно выполняться на основе числового значения.</span><span class="sxs-lookup"><span data-stu-id="dc881-109">Use the <xref:System.FlagsAttribute> custom attribute for an enumeration only if a bitwise operation (AND, OR, EXCLUSIVE OR) is to be performed on a numeric value.</span></span>  
  
-   <span data-ttu-id="dc881-110">Объявление констант перечисления в степени двойки, то есть, 1, 2, 4, 8 и т. д.</span><span class="sxs-lookup"><span data-stu-id="dc881-110">Define enumeration constants in powers of two, that is, 1, 2, 4, 8, and so on.</span></span> <span data-ttu-id="dc881-111">Это означает, что отдельные флаги в сочетании констант перечисления не будут перекрываться.</span><span class="sxs-lookup"><span data-stu-id="dc881-111">This means the individual flags in combined enumeration constants do not overlap.</span></span>  
  
-   <span data-ttu-id="dc881-112">Рассмотрите возможность создания Перечислимая константа для широко используемых сочетаний флагов.</span><span class="sxs-lookup"><span data-stu-id="dc881-112">Consider creating an enumerated constant for commonly used flag combinations.</span></span> <span data-ttu-id="dc881-113">Например, если у вас есть перечисление, используемое для операций файлового ввода-вывода, содержащий перечислимых констант `Read = 1` и `Write = 2`, рассмотрите возможность создания Перечислимая константа `ReadWrite = Read OR Write`, который объединяет `Read` и `Write` флаги.</span><span class="sxs-lookup"><span data-stu-id="dc881-113">For example, if you have an enumeration used for file I/O operations that contains the enumerated constants `Read = 1` and `Write = 2`, consider creating the enumerated constant `ReadWrite = Read OR Write`, which combines the `Read` and `Write` flags.</span></span> <span data-ttu-id="dc881-114">Кроме того используются для объединения флаги побитовой операции или может считаться расширенные концепции, в некоторых ситуациях, не должно быть обязательным для простых задач.</span><span class="sxs-lookup"><span data-stu-id="dc881-114">In addition, the bitwise OR operation used to combine the flags might be considered an advanced concept in some circumstances that should not be required for simple tasks.</span></span>  
  
-   <span data-ttu-id="dc881-115">Будьте осторожны при определении отрицательное число как константа перечисления флага, так как многие позиций флаг может быть установлен в 1, что может сделать код путаницу и стимулировать ошибки в коде.</span><span class="sxs-lookup"><span data-stu-id="dc881-115">Use caution if you define a negative number as a flag enumerated constant because many flag positions might be set to 1, which might make your code confusing and encourage coding errors.</span></span>  
  
-   <span data-ttu-id="dc881-116">Удобный способ проверить ли флаг в числовом значении, — для выполнения побитовую операцию и между числовым значением и флаг константа перечислимого типа, который устанавливает все биты в числовое значение к нулю, не соответствуют флаг , затем проверьте, является ли результат этой операции равно константа перечислимого типа флаг.</span><span class="sxs-lookup"><span data-stu-id="dc881-116">A convenient way to test whether a flag is set in a numeric value is to perform a bitwise AND operation between the numeric value and the flag enumerated constant, which sets all bits in the numeric value to zero that do not correspond to the flag, then test whether the result of that operation is equal to the flag enumerated constant.</span></span>  
  
-   <span data-ttu-id="dc881-117">Используйте `None` как имя флага перечисления константа, значение которого равно нулю.</span><span class="sxs-lookup"><span data-stu-id="dc881-117">Use `None` as the name of the flag enumerated constant whose value is zero.</span></span> <span data-ttu-id="dc881-118">Нельзя использовать `None` константы перечислимого типа в операцию побитового и для проверки наличия флага, поскольку результат всегда будет равно нулю.</span><span class="sxs-lookup"><span data-stu-id="dc881-118">You cannot use the `None` enumerated constant in a bitwise AND operation to test for a flag because the result is always zero.</span></span> <span data-ttu-id="dc881-119">Тем не менее, можно выполнять логические, не побитовых сравнение числовое значение и `None` Перечислимая константа, чтобы определить, установлены ли все биты в числовое значение.</span><span class="sxs-lookup"><span data-stu-id="dc881-119">However, you can perform a logical, not a bitwise, comparison between the numeric value and the `None` enumerated constant to determine whether any bits in the numeric value are set.</span></span>  
  
     <span data-ttu-id="dc881-120">При создании перечисление значений вместо перечисления flags, он по-прежнему имеет смысл создать `None` константы перечисления.</span><span class="sxs-lookup"><span data-stu-id="dc881-120">If you create a value enumeration instead of a flags enumeration, it is still worthwhile to create a `None` enumerated constant.</span></span> <span data-ttu-id="dc881-121">Причина заключается в том, что по умолчанию объем памяти, используемый для перечисления инициализируется нулевым значением средой CLR.</span><span class="sxs-lookup"><span data-stu-id="dc881-121">The reason is that by default the memory used for the enumeration is initialized to zero by the common language runtime.</span></span> <span data-ttu-id="dc881-122">Следовательно Если не определена константа, значение которого равно нулю, перечисление будет содержать недопустимое значение при его создании.</span><span class="sxs-lookup"><span data-stu-id="dc881-122">Consequently, if you do not define a constant whose value is zero, the enumeration will contain an illegal value when it is created.</span></span>  
  
     <span data-ttu-id="dc881-123">При наличии очевидного случая по умолчанию, необходимые для представления приложения рассмотрите возможность использования Перечислимая константа, значение которого равно нулю, для представления по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="dc881-123">If there is an obvious default case your application needs to represent, consider using an enumerated constant whose value is zero to represent the default.</span></span> <span data-ttu-id="dc881-124">При отсутствии случая по умолчанию, рассмотрите использование Перечислимая константа, значение которого является ноль, означает обращение, не представленного ни перечислимых констант.</span><span class="sxs-lookup"><span data-stu-id="dc881-124">If there is no default case, consider using an enumerated constant whose value is zero that means the case that is not represented by any of the other enumerated constants.</span></span>  
  
-   <span data-ttu-id="dc881-125">Не следует определять значение перечисления исключительно для отражения состояния самого перечисления.</span><span class="sxs-lookup"><span data-stu-id="dc881-125">Do not define an enumeration value solely to mirror the state of the enumeration itself.</span></span> <span data-ttu-id="dc881-126">Например не следует определять Перечислимая константа, которая лишь обозначает конец перечисления.</span><span class="sxs-lookup"><span data-stu-id="dc881-126">For example, do not define an enumerated constant that merely marks the end of the enumeration.</span></span> <span data-ttu-id="dc881-127">Если необходимо определить последнее значение перечисления, явным образом выполнять проверку для этого значения.</span><span class="sxs-lookup"><span data-stu-id="dc881-127">If you need to determine the last value of the enumeration, check for that value explicitly.</span></span> <span data-ttu-id="dc881-128">Кроме того можно выполнить проверку диапазона для первой и последней перечислимой константы, если допустимы все значения в диапазоне.</span><span class="sxs-lookup"><span data-stu-id="dc881-128">In addition, you can perform a range check for the first and last enumerated constant if all values within the range are valid.</span></span>  
  
-   <span data-ttu-id="dc881-129">Указывает перечислимые константы, которые зарезервированы для будущего использования.</span><span class="sxs-lookup"><span data-stu-id="dc881-129">Do not specify enumerated constants that are reserved for future use.</span></span>  
  
-   <span data-ttu-id="dc881-130">При определении метода или свойства, которое принимает как значение константы перечисления, рекомендуется выполнить проверку значения.</span><span class="sxs-lookup"><span data-stu-id="dc881-130">When you define a method or property that takes an enumerated constant as a value, consider validating the value.</span></span> <span data-ttu-id="dc881-131">Причина в том, можно привести числовое значение в тип перечисления, даже если это числовое значение не определены в перечислении.</span><span class="sxs-lookup"><span data-stu-id="dc881-131">The reason is that you can cast a numeric value to the enumeration type even if that numeric value is not defined in the enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc881-132">Следующий пример иллюстрирует использование `FlagsAttribute` атрибута и показано, как влияет на <xref:System.Enum.ToString%2A> метод использования `FlagsAttribute` на <xref:System.Enum> объявления.</span><span class="sxs-lookup"><span data-stu-id="dc881-132">The following example illustrates the use of the `FlagsAttribute` attribute and shows the effect on the <xref:System.Enum.ToString%2A> method of using `FlagsAttribute` on an <xref:System.Enum> declaration.</span></span>  
  
 [!code-cpp[System.FlagsAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags.cpp#1)]
 [!code-csharp[System.FlagsAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags.cs#1)]
 [!code-vb[System.FlagsAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags.vb#1)]  
  
 <span data-ttu-id="dc881-133">В следующем примере определяются два перечисления цветовые `SingleHue` и `MultiHue`.</span><span class="sxs-lookup"><span data-stu-id="dc881-133">The following example defines two color-related enumerations, `SingleHue` and `MultiHue`.</span></span> <span data-ttu-id="dc881-134">Последний имеет `FlagsAttribute` атрибут; первый интерфейс не поддерживает.</span><span class="sxs-lookup"><span data-stu-id="dc881-134">The latter has the `FlagsAttribute` attribute; the former does not.</span></span> <span data-ttu-id="dc881-135">В примере показано различие в поведении при диапазон целых чисел, включая целые числа, которые представляют базовых значений типа перечисления, приводятся в тип перечисления и их строковые представления отображается.</span><span class="sxs-lookup"><span data-stu-id="dc881-135">The example shows the difference in behavior when a range of integers, including integers that do not represent underlying values of the enumeration type, are cast to the enumeration type and their string representations displayed.</span></span>   <span data-ttu-id="dc881-136">Например, обратите внимание, что 3 не может быть представлено как `SingleHue` значение, так как 3 не базовое значение любого `SingleHue` член, тогда как `FlagsAttribute` атрибут делает возможным представляют 3 как `MultiHue` значение `Black, Red`.</span><span class="sxs-lookup"><span data-stu-id="dc881-136">For example, note that 3 cannot be represented as a `SingleHue` value because 3 is not the underlying value of any `SingleHue` member, whereas the `FlagsAttribute` attribute makes it possible to represent 3 as a `MultiHue` value of `Black, Red`.</span></span>  
  
 [!code-cpp[System.FlagsAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags1.cpp#2)]
 [!code-csharp[System.FlagsAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags1.cs#2)]
 [!code-vb[System.FlagsAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags1.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FlagsAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.FlagsAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FlagsAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="dc881-137">Инициализирует новый экземпляр класса <see cref="T:System.FlagsAttribute" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dc881-137">Initializes a new instance of the <see cref="T:System.FlagsAttribute" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="dc881-138">В следующем примере определяется `PhoneService` перечисление, представляющее форм, предоставленный компанией телефонной связи.</span><span class="sxs-lookup"><span data-stu-id="dc881-138">The following example defines a `PhoneService` enumeration that represents forms of communication provided by a telephone company.</span></span> <span data-ttu-id="dc881-139">Инициализирует три переменные, представляющие службы, предоставленной для трех различных домов и затем указывает, какие семей служба не какие семей имеют только сотовой связи, а какие семей сотовых телефонов и Земли строку службы.</span><span class="sxs-lookup"><span data-stu-id="dc881-139">It initializes three variables representing the service provided to three different households, and then indicates which households have no service, which households have only cell phone service, and which households have both cell phone and land line service.</span></span> <span data-ttu-id="dc881-140">Наконец, неявно вызывает <xref:System.Enum.ToString%28System.String%29?displayProperty=nameWithType> метод для отображения типов службы, предоставленной для любой владелец.</span><span class="sxs-lookup"><span data-stu-id="dc881-140">Finally, it implicitly calls the <xref:System.Enum.ToString%28System.String%29?displayProperty=nameWithType> method to display the types of service provided to each household.</span></span>  
  
 [!code-cpp[System.FlagsAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags1.cpp#2)]
 [!code-csharp[System.FlagsAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags1.cs#2)]
 [!code-vb[System.FlagsAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags1.vb#2)]  
  
 <span data-ttu-id="dc881-141">Следующий пример иллюстрирует использование `FlagsAttribute` атрибута и показано, как влияет на <xref:System.Enum.ToString%2A> метод использования `FlagsAttribute` на <xref:System.Enum> объявления.</span><span class="sxs-lookup"><span data-stu-id="dc881-141">The following example illustrates the use of the `FlagsAttribute` attribute and shows the effect on the <xref:System.Enum.ToString%2A> method of using `FlagsAttribute` on an <xref:System.Enum> declaration.</span></span>  
  
 [!code-cpp[System.FlagsAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags.cpp#1)]
 [!code-csharp[System.FlagsAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags.cs#1)]
 [!code-vb[System.FlagsAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>