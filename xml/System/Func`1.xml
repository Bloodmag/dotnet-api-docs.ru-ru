<Type Name="Func&lt;TResult&gt;" FullName="System.Func&lt;TResult&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="32bfd87c717460eeca143861ae42f3f64042f133" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30729728" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate TResult Func&lt;out TResult&gt;();" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`1&lt;+ TResult&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Func`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Func(Of Out TResult)() As TResult " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TResult&gt;&#xA;public delegate TResult Func();" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TResult">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters />
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="TResult">Тип возвращаемого значения метода, инкапсулируемого данным делегатом.</typeparam>
    <summary>Инкапсулирует метод без параметров и возвращает значение типа, указанного в параметре <typeparamref name="TResult" />.</summary>
    <returns>Возвращаемое значение метода, инкапсулируемого данным делегатом.</returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот делегат можно использовать для представления метода, который может быть передан в качестве параметра без явного объявления пользовательского делегата. Инкапсулированный метод должен соответствовать сигнатуре метода, определенные этим делегатом. Это означает, что инкапсулированный метод не принимает параметров и должен возвращать значение.  
  
> [!NOTE]
>  Для ссылки на метод, который не имеет параметров и возвращает `void` (или в Visual Basic, объявленный как `Sub` , а не как `Function`), используйте <xref:System.Action> вместо этого делегата.  
  
 При использовании <xref:System.Func%601> делегата, не нужно явным образом определять делегат, инкапсулирующий метод без параметров. Например, в следующем коде явно объявляется делегат с именем `WriteMethod` и ссылка на `OutputTarget.SendToFile` метод экземпляру его делегата экземпляра.  
  
 [!code-csharp[System.Func~1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Delegate.cs#1)]
 [!code-vb[System.Func~1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Delegate.vb#1)]  
  
 В следующем примере этот код упрощается путем создания экземпляра <xref:System.Func%601> делегат вместо явного объявления нового делегата и присвоения именованного метода.  
  
 [!code-csharp[System.Func~1#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Func1.cs#2)]
 [!code-vb[System.Func~1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Func1.vb#2)]  
  
 Можно использовать <xref:System.Func%601> делегировать с анонимных методов в C#, как показано в следующем примере. (Введение анонимных методов см. в разделе [анонимные методы](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)  
  
 [!code-csharp[System.Func~1#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Anon.cs#3)]  
  
 Можно также назначить лямбда-выражение, <xref:System.Func%602> делегат, как показано в следующем примере. (Введение лямбда-выражений см. в разделе [лямбда-выражения](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) и [лямбда-выражения](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)  
  
 [!code-csharp[System.Func~1#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Lambda.cs#4)]
 [!code-vb[System.Func~1#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Lambda.vb#4)]  
  
 Базовый тип лямбда-выражения является одним из универсальных `Func` делегатов. Это дает возможность передать лямбда-выражение в качестве параметра без явного присвоения его делегату. В частности так как многие методы типов в <xref:System.Linq> пространство имен имеет `Func` параметры, можно передать эти методы лямбда-выражение без явного создания `Func` делегата.  
  
 При наличии ресурсоемких вычислений, который должен выполняться только в том случае, если действительно требуется результат, можно назначить дорогих функция <xref:System.Func%601> делегата. Выполнение этой функции можно отложить до свойство, которое обращается к значению используется в выражении. В примере в следующем разделе показано, как это сделать.  
  
   
  
## Examples  
 В следующем примере демонстрируется использование делегата, который не принимает никаких параметров. Этот код создает универсальный класс с именем `LazyValue` , имеет поле типа <xref:System.Func%601>. Это поле делегата может содержать ссылку на любую функцию, возвращающую значение типа, соответствующий параметру типа `LazyValue` объекта. `LazyValue` Тип также имеет `Value` свойство, которое выполняет функцию (если она уже не была выполнена) и возвращает результирующее значение.  
  
 В примере создается два метода и создает два `LazyValue` объекты с лямбда-выражения, которые вызывают эти методы. Лямбда-выражения не имеют параметров, так как они нужно просто вызвать метод. Как показывают выходные данные, эти два метода выполняются только если значение каждого `LazyValue` извлечь объект.  
  
 [!code-csharp[System.Func~1#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Example.cs#5)]
 [!code-vb[System.Func~1#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Example.vb#5)]  
  
 ]]></format>
    </remarks>
  </Docs>
</Type>