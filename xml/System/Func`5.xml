<Type Name="Func&lt;T1,T2,T3,T4,TResult&gt;" FullName="System.Func&lt;T1,T2,T3,T4,TResult&gt;">
  <TypeSignature Language="C#" Value="public delegate TResult Func&lt;in T1,in T2,in T3,in T4,out TResult&gt;(T1 arg1, T2 arg2, T3 arg3, T4 arg4);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`5&lt;- T1, - T2, - T3, - T4, + TResult&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Func`5" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Func(Of In T1, In T2, In T3, In T4, Out TResult)(arg1 As T1, arg2 As T2, arg3 As T3, arg4 As T4) As TResult " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T1, typename T2, typename T3, typename T4, typename TResult&gt;&#xA;public delegate TResult Func(T1 arg1, T2 arg2, T3 arg3, T4 arg4);" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T1">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T2">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T3">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T4">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TResult">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="arg1" Type="T1" />
    <Parameter Name="arg2" Type="T2" />
    <Parameter Name="arg3" Type="T3" />
    <Parameter Name="arg4" Type="T4" />
  </Parameters>
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T1"><span data-ttu-id="87c7c-101">Тип первого параметра метода, инкапсулируемого этим делегатом.</span><span class="sxs-lookup"><span data-stu-id="87c7c-101">The type of the first parameter of the method that this delegate encapsulates.</span></span></typeparam>
    <typeparam name="T2"><span data-ttu-id="87c7c-102">Тип второго параметра метода, инкапсулируемого этим делегатом.</span><span class="sxs-lookup"><span data-stu-id="87c7c-102">The type of the second parameter of the method that this delegate encapsulates.</span></span></typeparam>
    <typeparam name="T3"><span data-ttu-id="87c7c-103">Тип третьего параметра метода, инкапсулируемого этим делегатом.</span><span class="sxs-lookup"><span data-stu-id="87c7c-103">The type of the third parameter of the method that this delegate encapsulates.</span></span></typeparam>
    <typeparam name="T4"><span data-ttu-id="87c7c-104">Тип четвертого параметра метода, инкапсулируемого этим делегатом.</span><span class="sxs-lookup"><span data-stu-id="87c7c-104">The type of the fourth parameter of the method that this delegate encapsulates.</span></span></typeparam>
    <typeparam name="TResult"><span data-ttu-id="87c7c-105">Тип возвращаемого значения метода, инкапсулируемого данным делегатом.</span><span class="sxs-lookup"><span data-stu-id="87c7c-105">The type of the return value of the method that this delegate encapsulates.</span></span></typeparam>
    <param name="arg1"><span data-ttu-id="87c7c-106">Первый параметр метода, инкапсулируемого этим делегатом.</span><span class="sxs-lookup"><span data-stu-id="87c7c-106">The first parameter of the method that this delegate encapsulates.</span></span></param>
    <param name="arg2"><span data-ttu-id="87c7c-107">Второй параметр метода, инкапсулируемого этим делегатом.</span><span class="sxs-lookup"><span data-stu-id="87c7c-107">The second parameter of the method that this delegate encapsulates.</span></span></param>
    <param name="arg3"><span data-ttu-id="87c7c-108">Третий параметр метода, инкапсулируемого этим делегатом.</span><span class="sxs-lookup"><span data-stu-id="87c7c-108">The third parameter of the method that this delegate encapsulates.</span></span></param>
    <param name="arg4"><span data-ttu-id="87c7c-109">Четвертый параметр метода, инкапсулируемого этим делегатом.</span><span class="sxs-lookup"><span data-stu-id="87c7c-109">The fourth parameter of the method that this delegate encapsulates.</span></span></param>
    <summary><span data-ttu-id="87c7c-110">Инкапсулирует метод с четырьмя параметрами и возвращает значение типа, указанного в параметре <typeparamref name="TResult" />.</span><span class="sxs-lookup"><span data-stu-id="87c7c-110">Encapsulates a method that has four parameters and returns a value of the type specified by the <typeparamref name="TResult" /> parameter.</span></span></summary>
    <returns><span data-ttu-id="87c7c-111">Возвращаемое значение метода, инкапсулируемого данным делегатом.</span><span class="sxs-lookup"><span data-stu-id="87c7c-111">The return value of the method that this delegate encapsulates.</span></span></returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87c7c-112">Этот делегат можно использовать для представления метода, который может быть передан в качестве параметра без явного объявления пользовательского делегата.</span><span class="sxs-lookup"><span data-stu-id="87c7c-112">You can use this delegate to represent a method that can be passed as a parameter without explicitly declaring a custom delegate.</span></span> <span data-ttu-id="87c7c-113">Инкапсулированный метод должен соответствовать сигнатуре метода, определенные этим делегатом.</span><span class="sxs-lookup"><span data-stu-id="87c7c-113">The encapsulated method must correspond to the method signature that is defined by this delegate.</span></span> <span data-ttu-id="87c7c-114">Это означает, что инкапсулированный метод должен иметь четыре параметра, каждый из которых передается по значению, и что он должен возвращать значение.</span><span class="sxs-lookup"><span data-stu-id="87c7c-114">This means that the encapsulated method must have four parameters, each of which is passed to it by value, and that it must return a value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87c7c-115">Для ссылки на метод, который имеет четыре параметра и возвращает `void` (или в Visual Basic, объявленный как `Sub` , а не как `Function`), использовать универсальный <xref:System.Action%604> вместо этого делегата.</span><span class="sxs-lookup"><span data-stu-id="87c7c-115">To reference a method that has four parameters and returns `void` (or in Visual Basic, that is declared as a `Sub` rather than as a `Function`), use the generic <xref:System.Action%604> delegate instead.</span></span>  
  
 <span data-ttu-id="87c7c-116">При использовании <xref:System.Func%605> делегата, не нужно явным образом определять делегат, инкапсулирующий метод с четырьмя параметрами.</span><span class="sxs-lookup"><span data-stu-id="87c7c-116">When you use the <xref:System.Func%605> delegate, you do not have to explicitly define a delegate that encapsulates a method with four parameters.</span></span> <span data-ttu-id="87c7c-117">Например, в следующем коде явно объявляется универсальный делегат с именем `Searcher` и ссылка на <xref:System.String.IndexOf%2A> способ его экземпляр делегата.</span><span class="sxs-lookup"><span data-stu-id="87c7c-117">For example, the following code explicitly declares a generic delegate named `Searcher` and assigns a reference to the <xref:System.String.IndexOf%2A> method to its delegate instance.</span></span>  
  
 [!code-csharp[System.Func~5#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~5/cs/Delegate.cs#1)]
 [!code-vb[System.Func~5#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~5/vb/Delegate.vb#1)]  
  
 <span data-ttu-id="87c7c-118">В следующем примере этот код упрощается путем создания экземпляра <xref:System.Func%605> делегат вместо явного объявления нового делегата и присвоения именованного метода.</span><span class="sxs-lookup"><span data-stu-id="87c7c-118">The following example simplifies this code by instantiating the <xref:System.Func%605> delegate instead of explicitly defining a new delegate and assigning a named method to it.</span></span>  
  
 [!code-csharp[System.Func~5#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~5/cs/Func5.cs#2)]
 [!code-vb[System.Func~5#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~5/vb/Func5.vb#2)]  
  
 <span data-ttu-id="87c7c-119">Можно использовать <xref:System.Func%605> делегировать с анонимных методов в C#, как показано в следующем примере.</span><span class="sxs-lookup"><span data-stu-id="87c7c-119">You can use the <xref:System.Func%605> delegate with anonymous methods in C#, as the following example illustrates.</span></span> <span data-ttu-id="87c7c-120">(Введение анонимных методов см. в разделе [анонимные методы](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)</span><span class="sxs-lookup"><span data-stu-id="87c7c-120">(For an introduction to anonymous methods, see [Anonymous Methods](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)</span></span>  
  
 [!code-csharp[System.Func~5#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~5/cs/Anon.cs#3)]  
  
 <span data-ttu-id="87c7c-121">Можно также назначить лямбда-выражение, <xref:System.Func%605> делегат, как показано в следующем примере.</span><span class="sxs-lookup"><span data-stu-id="87c7c-121">You can also assign a lambda expression to a <xref:System.Func%605> delegate, as the following example illustrates.</span></span> <span data-ttu-id="87c7c-122">(Введение лямбда-выражений см. в разделе [лямбда-выражения](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) и [лямбда-выражения](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)</span><span class="sxs-lookup"><span data-stu-id="87c7c-122">(For an introduction to lambda expressions, see [Lambda Expressions](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) and [Lambda Expressions](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)</span></span>  
  
 [!code-csharp[System.Func~5#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~5/cs/Lambda.cs#4)]
 [!code-vb[System.Func~5#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~5/vb/Lambda.vb#4)]  
  
 <span data-ttu-id="87c7c-123">Базовый тип лямбда-выражения является одним из универсальных `Func` делегатов.</span><span class="sxs-lookup"><span data-stu-id="87c7c-123">The underlying type of a lambda expression is one of the generic `Func` delegates.</span></span> <span data-ttu-id="87c7c-124">Это дает возможность передать лямбда-выражение в качестве параметра без явного присвоения его делегату.</span><span class="sxs-lookup"><span data-stu-id="87c7c-124">This makes it possible to pass a lambda expression as a parameter without explicitly assigning it to a delegate.</span></span> <span data-ttu-id="87c7c-125">В частности так как многие методы типов в <xref:System.Linq> пространство имен имеет `Func` параметры, можно передать эти методы лямбда-выражение без явного создания `Func` делегата.</span><span class="sxs-lookup"><span data-stu-id="87c7c-125">In particular, because many methods of types in the <xref:System.Linq> namespace have `Func` parameters, you can pass these methods a lambda expression without explicitly instantiating a `Func` delegate.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87c7c-126">Следующий пример демонстрирует объявление и использование <xref:System.Func%603> делегата.</span><span class="sxs-lookup"><span data-stu-id="87c7c-126">The following example demonstrates how to declare and use a <xref:System.Func%603> delegate.</span></span> <span data-ttu-id="87c7c-127">В этом примере объявляется <xref:System.Func%603> переменной и присваивает его лямбда-выражения, принимающего <xref:System.String> значение и <xref:System.Int32> значение в качестве параметров.</span><span class="sxs-lookup"><span data-stu-id="87c7c-127">This example declares a <xref:System.Func%603> variable and assigns it a lambda expression that takes a <xref:System.String> value and an <xref:System.Int32> value as parameters.</span></span> <span data-ttu-id="87c7c-128">Лямбда-выражение возвращает `true` Если длина <xref:System.String> равен значению <xref:System.Int32> параметра.</span><span class="sxs-lookup"><span data-stu-id="87c7c-128">The lambda expression returns `true` if the length of the <xref:System.String> parameter is equal to the value of the <xref:System.Int32> parameter.</span></span> <span data-ttu-id="87c7c-129">Делегат, инкапсулирующий этот метод впоследствии используется в запросе для фильтрации строк в массиве строк.</span><span class="sxs-lookup"><span data-stu-id="87c7c-129">The delegate that encapsulates this method is subsequently used in a query to filter strings in an array of strings.</span></span>  
  
 [!code-csharp[System.Func~3#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~3/cs/Example.cs#5)]
 [!code-vb[System.Func~3#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~3/vb/Example.vb#5)]  
  
 ]]></format>
    </remarks>
  </Docs>
</Type>