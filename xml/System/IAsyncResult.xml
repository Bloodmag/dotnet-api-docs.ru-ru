<Type Name="IAsyncResult" FullName="System.IAsyncResult">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6d58c5d7d0755ba744adb0fc63e586f88a9bd828" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36430918" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IAsyncResult" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IAsyncResult" />
  <TypeSignature Language="DocId" Value="T:System.IAsyncResult" />
  <TypeSignature Language="VB.NET" Value="Public Interface IAsyncResult" />
  <TypeSignature Language="C++ CLI" Value="public interface class IAsyncResult" />
  <TypeSignature Language="F#" Value="type IAsyncResult = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Представляет состояние асинхронной операции.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IAsyncResult> Интерфейс реализуется классами, содержащий методы, которые могут выполняться асинхронно. Это тип возвращаемого значения методов, которые запускают асинхронной операции, такие как <xref:System.IO.FileStream.BeginRead%2A?displayProperty=nameWithType>, и оно передается в методы, которые завершения асинхронной операции, такие как <xref:System.IO.FileStream.EndRead%2A?displayProperty=nameWithType>. <xref:System.IAsyncResult> объекты также передаются в методы, вызываемые <xref:System.AsyncCallback> делегируют при завершении асинхронной операции.  
  
 Объект, который поддерживает <xref:System.IAsyncResult> интерфейс хранятся сведения о состоянии для асинхронной операции и предоставляет объект синхронизации, чтобы разрешить сигнализирующий после завершения операции.  
  
> [!NOTE]
>  <xref:System.Runtime.Remoting.Messaging.AsyncResult> Класс — это реализация <xref:System.IAsyncResult> , возвращаемый `BeginInvoke` метод при использовании делегата для асинхронного вызова метода.  
  
 Подробное описание того, как <xref:System.IAsyncResult> используется интерфейс см. в разделе [асинхронный вызов синхронных методов](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md) раздела.  
  
   
  
## Examples  
 В следующем примере демонстрируется использование <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A> свойства <xref:System.Threading.WaitHandle>и Ожидание асинхронного вызова для делегата. Объект <xref:System.Threading.WaitHandle> получает сигнал после завершения асинхронного вызова; его можно дождаться путем вызова метода <xref:System.Threading.WaitHandle.WaitOne%2A> .  
  
 Пример состоит из двух классов: класса, содержащего метод, который вызывается асинхронно и класса, содержащего `Main` метод, который выполняет вызов.  
  
 Дополнительные сведения и примеры асинхронного вызова методов с помощью делегатов см. в разделе [асинхронный вызов синхронных методов](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#3](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/waithandle.cpp#3)]
[!code-csharp[AsyncDelegateExamples#3](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/waithandle.cs#3)]
[!code-vb[AsyncDelegateExamples#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/WaitHandle.vb#3)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AsyncState">
      <MemberSignature Language="C#" Value="public object AsyncState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object AsyncState" />
      <MemberSignature Language="DocId" Value="P:System.IAsyncResult.AsyncState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AsyncState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ AsyncState { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AsyncState : obj" Usage="System.IAsyncResult.AsyncState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает определенный пользователем объект, который определяет или содержит сведения об асинхронной операции.</summary>
        <value>Определенный пользователем объект, который определяет или содержит сведения об асинхронной операции.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это свойство возвращает объект, который является последним параметром метода, который инициирует асинхронную операцию.  
  
   
  
## Examples  
 В следующем примере кода показано, как <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState%2A> свойство используется для передачи сведений в метод обратного вызова. Последний параметр `BeginInvoke` вызов метода — это строка форматирования, используемую методом обратного вызова для форматирования выходного сообщения.  
  
 Пример состоит из двух классов: класса, содержащего метод, который вызывается асинхронно и класса, содержащего `Main` метод, который выполняет вызов.  
  
 Дополнительные сведения о работе в этом примере обратного вызова и Дополнительные примеры асинхронного вызова методов с помощью делегатов см. в разделе [асинхронный вызов синхронных методов](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#5](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/callback.cpp#5)]
[!code-csharp[AsyncDelegateExamples#5](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/callback.cs#5)]
[!code-vb[AsyncDelegateExamples#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/callback.vb#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Реализуйте это свойство позволяет вызывающему оператору асинхронной операции получить определенный приложением объект, указанный в начале операции.</para>
        </block>
        <block subset="none" type="usage">
          <para>Этот объект используется для передачи сведений о состоянии для асинхронной операции <see cref="T:System.AsyncCallback" /> указываемое.</para>
        </block>
        <altmember cref="T:System.AsyncCallback" />
      </Docs>
    </Member>
    <Member MemberName="AsyncWaitHandle">
      <MemberSignature Language="C#" Value="public System.Threading.WaitHandle AsyncWaitHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.WaitHandle AsyncWaitHandle" />
      <MemberSignature Language="DocId" Value="P:System.IAsyncResult.AsyncWaitHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AsyncWaitHandle As WaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::WaitHandle ^ AsyncWaitHandle { System::Threading::WaitHandle ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AsyncWaitHandle : System.Threading.WaitHandle" Usage="System.IAsyncResult.AsyncWaitHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.WaitHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает дескриптор <see cref="T:System.Threading.WaitHandle" />, используемый для ожидания завершения асинхронной операции.</summary>
        <value>Дескриптор <see cref="T:System.Threading.WaitHandle" />, используемый для ожидания завершения асинхронной операции.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Возвращаемое значение позволяет клиенту ожидать завершения вместо опроса асинхронной операции <xref:System.IAsyncResult.IsCompleted%2A> до завершает операцию. Возвращаемое значение может использоваться для выполнения <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>, или <xref:System.Threading.WaitHandle.WaitAll%2A> операции.  
  
 Общеязыковая среда выполнения предоставляет несколько объектов ожидания, таких как <xref:System.Threading.ManualResetEvent>, <xref:System.Threading.AutoResetEvent>, и <xref:System.Threading.Mutex>, которые отображают примитивы синхронизации Win32.  
  
   
  
## Examples  
 В следующем примере демонстрируется использование <xref:System.IAsyncResult.AsyncWaitHandle%2A> свойства <xref:System.Threading.WaitHandle>и Ожидание асинхронного вызова для делегата. Объект <xref:System.Threading.WaitHandle> получает сигнал после завершения асинхронного вызова; его можно дождаться путем вызова метода <xref:System.Threading.WaitHandle.WaitOne%2A> .  
  
 Пример состоит из двух классов: класса, содержащего метод, который вызывается асинхронно и класса, содержащего `Main` метод, который выполняет вызов.  
  
 Дополнительные сведения и примеры асинхронного вызова методов с помощью делегатов см. в разделе [асинхронный вызов синхронных методов](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#3](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/waithandle.cpp#3)]
[!code-csharp[AsyncDelegateExamples#3](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/waithandle.cs#3)]
[!code-vb[AsyncDelegateExamples#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/WaitHandle.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Объект, реализующий <see cref="T:System.IAsyncResult" /> не нужно создавать <see cref="T:System.Threading.WaitHandle" /> до <see cref="P:System.IAsyncResult.AsyncWaitHandle" /> свойство доступно для чтения. Он зависит от выбора <see cref="T:System.IAsyncResult" /> исполнитель. Тем не менее если разработчик создает <see cref="P:System.IAsyncResult.AsyncWaitHandle" />, возлагается на разработчика указывают <see cref="T:System.Threading.WaitHandle" /> , завершит режим ожидания в нужное время. Например <see cref="T:System.Runtime.Remoting.Messaging.AsyncResult" /> прекращает Ожидание от имени вызывающего объекта, при возвращении асинхронно вызванный метод. После создания <see cref="P:System.IAsyncResult.AsyncWaitHandle" /> должен поддерживаться пока пользователь не вызовет метод, завершающий асинхронную операцию. В это время объект позади <see cref="P:System.IAsyncResult.AsyncWaitHandle" /> может быть удален.</para>
        </block>
        <block subset="none" type="usage">
          <para>Это свойство используется клиентами, которые ожидать завершения (в отличие от опроса) операции для получения ожидаемого объекта синхронизации.  <block subset="none" type="note"><para> При использовании <see langword="BeginInvoke" /> метод делегата для асинхронного вызова метода и получения дескриптора ожидания из полученных <see cref="T:System.IAsyncResult" />, рекомендуется закрывать дескриптор ожидания, сразу после завершения работы, путем вызова <see cref="M:System.Threading.WaitHandle.Close" /> метод. Если вы просто удалить все ссылки на дескриптор ожидания, системные ресурсы будут освобождены при удалении дескриптора ожидания сборщиком мусора, но сборка мусора работает более эффективно высвобождаемые объекты явно закрыт или удален. Дополнительные сведения см. в разделе <see cref="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle" /> свойство.  </para></block></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="CompletedSynchronously">
      <MemberSignature Language="C#" Value="public bool CompletedSynchronously { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CompletedSynchronously" />
      <MemberSignature Language="DocId" Value="P:System.IAsyncResult.CompletedSynchronously" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CompletedSynchronously As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CompletedSynchronously { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CompletedSynchronously : bool" Usage="System.IAsyncResult.CompletedSynchronously" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, указывающее, выполнялась ли асинхронная операция синхронно.</summary>
        <value>Значение <see langword="true" />, если асинхронная операция выполнена синхронно, в противном случае — значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если обнаружено синхронное завершение вызова в <xref:System.AsyncCallback> делегата, вполне вероятно, что поток, который запустил асинхронную операцию является текущим потоком.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Большинство разработчиков <see cref="T:System.IAsyncResult" /> интерфейса, это свойство не используется и должен возвращать <see langword="false" />. Начиная с [! INCLUDE[net_v45](~/includes/NET-v45-MD.MD)] задачу, которая создается с <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)" /> метод не завершается, если это свойство не будет правильно реализован. В разделе [совместимость приложений в 4.5](~/docs/framework/migration-guide/application-compatibility-in-the-net-framework-4-5.md).</para>
        </block>
        <block subset="none" type="usage">
          <para>Это свойство позволяет определить, если асинхронная операция синхронно. Например, это свойство может вернуть <see langword="true" /> для асинхронной операции ввода-вывода, если запрос ввода-вывода был небольшим.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="IsCompleted">
      <MemberSignature Language="C#" Value="public bool IsCompleted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCompleted" />
      <MemberSignature Language="DocId" Value="P:System.IAsyncResult.IsCompleted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCompleted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCompleted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCompleted : bool" Usage="System.IAsyncResult.IsCompleted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, указывающее, выполнена ли асинхронная операция.</summary>
        <value>Значение <see langword="true" />, если операция завершена; в противном случае — значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если этому свойству присвоено `true`, можно предположить, безопасно удаление ресурсов, выделенных для асинхронной операции.  
  
   
  
## Examples  
 В следующем примере показано, как использовать <xref:System.IAsyncResult.IsCompleted%2A> свойство <xref:System.IAsyncResult> для обнаружения после завершения асинхронного вызова. В этом случае асинхронный вызов выполняется с помощью `BeginInvoke` метод делегата. Можно использовать <xref:System.IAsyncResult.IsCompleted%2A> свойство опроса для выполнения при выполнении асинхронного вызова из потока, обслуживающего пользовательский интерфейс. Опрос завершения позволяет вызывающему потоку продолжить выполнение при асинхронном вызове для потока <xref:System.Threading.ThreadPool> .  
  
 Пример состоит из двух классов: класса, содержащего метод, который вызывается асинхронно и класса, содержащего `Main` метод, который выполняет вызов.  
  
 Дополнительные сведения и примеры асинхронного вызова методов с помощью делегатов см. в разделе [асинхронный вызов синхронных методов](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#4](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/polling.cpp#4)]
[!code-csharp[AsyncDelegateExamples#4](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/polling.cs#4)]
[!code-vb[AsyncDelegateExamples#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/polling.vb#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Разработчики обычно возвращают значение закрытого поля или внутренней проверки в качестве значения этого свойства.</para>
        </block>
        <block subset="none" type="usage">
          <para>Клиенты, использующие опрос по состоянию (вместо ожидания объекта синхронизации) это свойство позволяет определить состояние операции.</para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>