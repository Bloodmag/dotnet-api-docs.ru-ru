<Type Name="IComparable" FullName="System.IComparable">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="070339ff2c2f571a4d73591a9f8016dea438436b" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30729698" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IComparable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IComparable" />
  <TypeSignature Language="DocId" Value="T:System.IComparable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IComparable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IComparable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Определяет обобщенный метод сравнения, который реализуется типом значения или классом для упорядочения или сортировки экземпляров.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот интерфейс реализуется типами, значения которых можно упорядочить или сортировать. Требуется, реализующие типы определяет единственный метод <xref:System.IComparable.CompareTo%28System.Object%29>, которое указывает, является ли позиция текущего экземпляра в порядке сортировки перед, после или таким же, как второй объект того же типа. Экземпляр <xref:System.IComparable> реализация вызывается автоматически методами, такими как <xref:System.Array.Sort%2A?displayProperty=nameWithType> и <xref:System.Collections.ArrayList.Sort%2A?displayProperty=nameWithType>.  
  
 Реализация <xref:System.IComparable.CompareTo%28System.Object%29> метод должен возвращать <xref:System.Int32> , может иметь одно из трех значений, как показано в следующей таблице.  
  
|Значение|Значение|  
|-----------|-------------|  
|Меньше нуля|Текущий экземпляр перед объекта, заданного параметром <xref:System.IComparable.CompareTo%2A> метод в порядке сортировки.|  
|Нуль|Происходит этого текущего экземпляра одной позиции в порядке сортировки, как объекта, заданного параметром <xref:System.IComparable.CompareTo%2A> метод.|  
|Больше нуля|Это текущий экземпляр стоит после объекта, заданного параметром <xref:System.IComparable.CompareTo%2A> метод в порядке сортировки.|  
  
 Все числовые типы (такие как <xref:System.Int32> и <xref:System.Double>) реализовать <xref:System.IComparable>, как и <xref:System.String>, <xref:System.Char>, и <xref:System.DateTime>. Пользовательские типы также должен предоставить свою собственную реализацию <xref:System.IComparable> экземпляры объекта упорядочивание или сортировку.  
  
   
  
## Examples  
 В следующем примере демонстрируется реализация <xref:System.IComparable> и необходимый <xref:System.IComparable.CompareTo%2A> метод.  
  
 [!code-cpp[IComparable Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/IComparable Example/CPP/source.cpp#1)]
 [!code-csharp[IComparable Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/IComparable Example/CS/source.cs#1)]
 [!code-vb[IComparable Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IComparable Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IComparable.CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (obj As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int CompareTo(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Объект для сравнения с данным экземпляром.</param>
        <summary>Сравнивает текущий экземпляр с другим объектом того же типа и возвращает целое число, которое показывает, расположен ли текущий экземпляр перед, после или на той же позиции в порядке сортировки, что и другой объект.</summary>
        <returns>Значение, указывающее, каков относительный порядок сравниваемых объектов. Возвращаемые значения представляют следующие результаты сравнения.  
  
 <list type="table"><listheader><term> Значение  
  
 </term><description> Описание  
  
 </description></listheader><item><term> Меньше нуля  
  
 </term><description> Данный экземпляр предшествует параметру <paramref name="obj" /> в порядке сортировки.  
  
 </description></item><item><term> Нуль  
  
 </term><description> Данный экземпляр занимает ту же позицию в порядке сортировки, что и объект <paramref name="obj" />.  
  
 </description></item><item><term> Больше нуля  
  
 </term><description> Данный экземпляр следует за параметром <paramref name="obj" /> в порядке сортировки.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IComparable.CompareTo%2A> Метод реализуется типами, значения которых можно упорядочить или сортировать. Он вызывается автоматически методами неуниверсальную коллекцию объектов, таких как <xref:System.Array.Sort%2A?displayProperty=nameWithType>, чтобы упорядочить каждый элемент массива. Если пользовательский класс или структура не реализует <xref:System.IComparable>, его члены не может быть упорядочен и может вызывать операции сортировки <xref:System.InvalidOperationException>.  
  
 Этот метод является только определением и должен быть реализован для определенного класса или типа значения происходит. Значение сравнения, указанный в возвращаемых значений, раздел («предшествует», «в той же позиции, что происходит» и «соответствует»), зависит от конкретной реализации.  
  
 По определению, любой объект сравнения больше, чем (или ниже) `null`, и две пустые ссылки считаются равными друг с другом.  
  
 Параметр `obj`, должен быть того же типа, что класс или тип, реализующий этот интерфейс; значения в противном случае <xref:System.ArgumentException> возникает исключение.  
  
   
  
## Examples  
 Следующий пример иллюстрирует использование <xref:System.IComparable.CompareTo%2A> для сравнения `Temperature` объект, реализующий <xref:System.IComparable> с другим объектом. `Temperature` Реализует объект <xref:System.IComparable.CompareTo%2A> просто обернуть вызов <xref:System.Int32.CompareTo%2A?displayProperty=nameWithType> метод.  
  
 [!code-cpp[IComparable Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/IComparable Example/CPP/source.cpp#1)]
 [!code-csharp[IComparable Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/IComparable Example/CS/source.cs#1)]
 [!code-vb[IComparable Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IComparable Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          Тип значения параметра <paramref name="obj" /> отличается от типа данного экземпляра.</exception>
        <block subset="none" type="overrides">
          <para>Для объектов, A, B и C должны выполняться следующие условия:  
  
 <c>A.CompareTo(A)</c> должно возвращать ноль.  
  
 Если <c>A.CompareTo(B)</c> возвращает нуль, затем <c>B.CompareTo(A)</c> должно возвращать ноль.  
  
 Если <c>A.CompareTo(B)</c> возвращает ноль и <c>B.CompareTo(C)</c> возвращает нуль, затем <c>A.CompareTo(C)</c> должно возвращать ноль.  
  
 Если <c>A.CompareTo(B)</c> возвращает значение, отличное от нуля, затем <c>B.CompareTo(A)</c> должен возвращать значение с противоположным знаком.  
  
 Если <c>A.CompareTo(B)</c> возвращает значение <paramref name="x" /> не равно нулю, и <c>B.CompareTo(C)</c> возвращает значение <paramref name="y" /> из того же процесса входа как <paramref name="x" />, затем <c>A. CompareTo(C)</c> должен возвращать значение того же процесса входа как <paramref name="x" /> и <paramref name="y" />.</para>
        </block>
        <block subset="none" type="usage">
          <para>Используйте <see cref="M:System.IComparable.CompareTo(System.Object)" /> метод для определения порядка экземпляров класса.</para>
        </block>
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
  </Members>
</Type>