<Type Name="IComparable&lt;T&gt;" FullName="System.IComparable&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3331f1bbc5cf363b6ed960262fcd90e74a236a00" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="06/14/2018" />
    <Meta Name="ms.locfileid" Value="34241379" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IComparable&lt;in T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IComparable`1&lt;- T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.IComparable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IComparable(Of In T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IComparable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T">Тип объекта для сравнения.</typeparam>
    <summary>Определяет обобщенный метод сравнения, тип значения или класс, который используется для создания метода сравнения с целью упорядочения или сортировки экземпляров.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот интерфейс реализуется типами, значения которых можно упорядочить или сортировать и предоставляет строго типизированный метод сравнения для упорядочивания элементов объекта универсальной коллекции. Например одно число может быть больше, чем второе число, а одна строка может отображаются в алфавитном порядке перед другим. Требуется, реализующие типы определяет единственный метод <xref:System.IComparable%601.CompareTo%28%600%29>, которое указывает, является ли позиция текущего экземпляра в порядке сортировки перед, после или таким же, как второй объект того же типа. Как правило метод не вызывается напрямую из кода разработчика. Вместо этого он вызывается автоматически методами, такими как <xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType> и <xref:System.Collections.Generic.SortedList%602.Add%2A>.  
  
 Как правило, типы, обеспечивающие <xref:System.IComparable%601> реализовать реализацию <xref:System.IEquatable%601> интерфейса. <xref:System.IEquatable%601> Интерфейс определяет <xref:System.IEquatable%601.Equals%2A> метод, который определяет равенство экземплярами реализующего типа.  
  
 Реализация <xref:System.IComparable%601.CompareTo%28%600%29> метод должен возвращать <xref:System.Int32> , может иметь одно из трех значений, как показано в следующей таблице.  
  
|Значение|Значение|  
|-----------|-------------|  
|Меньше нуля|Этот объект предшествует объекта, заданного параметром <xref:System.IComparable%601.CompareTo%2A> метод в порядке сортировки.|  
|Нуль|Происходит этого текущего экземпляра одной позиции в порядке сортировки, как объекта, заданного параметром <xref:System.IComparable%601.CompareTo%2A> аргумента метода.|  
|Больше нуля|Это текущий экземпляр стоит после объекта, заданного параметром <xref:System.IComparable%601.CompareTo%2A> аргумента метода в порядке сортировки.|  
  
 Все числовые типы (такие как <xref:System.Int32> и <xref:System.Double>) реализовать <xref:System.IComparable%601>, как и <xref:System.String>, <xref:System.Char>, и <xref:System.DateTime>. Пользовательские типы также должен предоставить свою собственную реализацию <xref:System.IComparable%601> экземпляры объекта упорядочивание или сортировку.  
  
   
  
## Examples  
 В следующем примере кода показана реализация <xref:System.IComparable%601> для простого `Temperature` объекта. В примере создается <xref:System.Collections.Generic.SortedList%602> набор строк с `Temperature` ключей и добавляет несколько пар типа строки и температуры за пределами последовательности в список. В вызове <xref:System.Collections.Generic.SortedList%602.Add%2A> метода <xref:System.Collections.Generic.SortedList%602> коллекции использует <xref:System.IComparable%601> реализацию для сортировки элементов списка, которые затем отображаются в порядке возрастания температуры.  
  
 [!code-cpp[IComparable\`1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/IComparable`1 Example/CPP/source.cpp#1)]
 [!code-csharp[IComparable\`1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/IComparable`1 Example/CS/source.cs#1)]
 [!code-vb[IComparable\`1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IComparable`1 Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Замените параметр типа <see cref="T:System.IComparable`1" /> интерфейс с типом, реализующим этот интерфейс.  Если вы реализуете <see cref="T:System.IComparable`1" />, необходимо перегрузить <see langword="op_GreaterThan" />, <see langword="op_GreaterThanOrEqual" />, <see langword="op_LessThan" />, и <see langword="op_LessThanOrEqual" /> операторов для возврата значений, которые согласованы с <see cref="M:System.IComparable`1.CompareTo(`0)" />. Кроме того, вы должны также реализовать <see cref="T:System.IEquatable`1" />. В разделе <see cref="T:System.IEquatable`1" /> статьи для получения полной информации.</para>
    </block>
    <altmember cref="T:System.IComparable" />
    <altmember cref="T:System.IEquatable`1" />
  </Docs>
  <Members>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (T other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(!T other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IComparable`1.CompareTo(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (other As T) As Integer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="T" />
      </Parameters>
      <Docs>
        <param name="other">Объект для сравнения с данным экземпляром.</param>
        <summary>Сравнивает текущий экземпляр с другим объектом того же типа и возвращает целое число, которое показывает, расположен ли текущий экземпляр перед, после или на той же позиции в порядке сортировки, что и другой объект.</summary>
        <returns>Значение, указывающее, каков относительный порядок сравниваемых объектов. Описание возвращаемых значений:  <list type="table"><listheader><term> Значение  </term><description> Описание  </description></listheader><item><term> Меньше нуля  </term><description> Этот экземпляр стоит перед <paramref name="other" /> в порядке сортировки.  </description></item><item><term> Ноль  </term><description> Данный экземпляр занимает ту же позицию в порядке сортировки, что и объект <paramref name="other" />.  </description></item><item><term> Больше нуля  </term><description> Данный экземпляр следует за <paramref name="other" /> в порядке сортировки.  </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IComparable%601.CompareTo%2A> предоставляет строго типизированный метод сравнения для упорядочивания элементов объекта универсальной коллекции. По этой причине обычно не вызывается напрямую из кода разработчика. Вместо этого он вызывается автоматически методами, такими как <xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType> и <xref:System.Collections.Generic.SortedList%602.Add%2A>.  
  
 Этот метод является только определением и должен быть реализован для определенного класса или типа значения происходит. Значение сравнения, указанный в возвращаемые значения, раздел («предшествует», «в той же позиции, что происходит» и «ниже), зависит от конкретной реализации.  
  
 По определению, любой объект сравнения больше, чем `null`, и две пустые ссылки считаются равными друг с другом.  
  
   
  
## Examples  
 В следующем примере кода показана реализация <xref:System.IComparable%601> для простого `Temperature` объекта. В примере создается <xref:System.Collections.Generic.SortedList%602> набор строк с `Temperature` ключей и добавляет несколько пар типа строки и температуры за пределами последовательности в список. В вызове <xref:System.Collections.Generic.SortedList%602.Add%2A> метода <xref:System.Collections.Generic.SortedList%602> коллекции использует <xref:System.IComparable%601> реализацию для сортировки элементов списка, которые затем отображаются в порядке возрастания температуры.  
  
 [!code-cpp[IComparable\`1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/IComparable`1 Example/CPP/source.cpp#1)]
 [!code-csharp[IComparable\`1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/IComparable`1 Example/CS/source.cs#1)]
 [!code-vb[IComparable\`1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IComparable`1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Для объектов, A, B и C, должны выполняться следующие условия: <c>A.CompareTo(A)</c> должен возвращать нуль.  Если <c>A.CompareTo(B)</c> возвращает нуль, затем <c>B.CompareTo(A)</c> должен возвращать нуль.  Если <c>A.CompareTo(B)</c> возвращает ноль и <c>B.CompareTo(C)</c> возвращает нуль, затем <c>A.CompareTo(C)</c> должен возвращать нуль.  Если <c>A.CompareTo(B)</c> возвращает значение, отличное от нуля, затем <c>B.CompareTo(A)</c> должен возвращать значение с противоположным знаком.  Если <c>A.CompareTo(B)</c> возвращает значение <paramref name="x" /> , не равно нулю, и <c>B.CompareTo(C)</c> возвращает значение <paramref name="y" /> из того же процесса входа как <paramref name="x" />, затем <c>A. CompareTo(C)</c> должен возвращать значение того же процесса входа как <paramref name="x" /> и <paramref name="y" />.</para>
        </block>
        <block subset="none" type="usage">
          <para>Используйте <see cref="M:System.IComparable`1.CompareTo(`0)" /> метод для определения порядка экземпляров класса.</para>
        </block>
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.IComparable" />
      </Docs>
    </Member>
  </Members>
</Type>