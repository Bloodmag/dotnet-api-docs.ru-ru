<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IComparable`1.xml" source-language="en-US" target-language="ru-RU">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac53159905d25c272600edb9c3592155b00f62607be.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3159905d25c272600edb9c3592155b00f62607be</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IComparable`1">
          <source>The type of object to compare.</source>
          <target state="translated">Тип объекта для сравнения.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.IComparable`1">
          <source>Defines a generalized comparison method that a value type or class implements to create a type-specific comparison method for ordering or sorting its instances.</source>
          <target state="translated">Определяет обобщенный метод сравнения, тип значения или класс, который используется для создания метода сравнения с целью упорядочения или сортировки экземпляров.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IComparable`1">
          <source>This interface is implemented by types whose values can be ordered or sorted and provides a strongly typed comparison method for ordering members of a generic collection object.</source>
          <target state="translated">Этот интерфейс реализуется типами, значения которых можно упорядочить или сортировать и предоставляет строго типизированный метод сравнения для упорядочивания элементов объекта универсальной коллекции.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IComparable`1">
          <source>For example, one number can be larger than a second number, and one string can appear in alphabetical order before another.</source>
          <target state="translated">Например одно число может быть больше, чем второе число, а одна строка может отображаются в алфавитном порядке перед другим.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IComparable`1">
          <source>It requires that implementing types define a single method, <ph id="ph1">&lt;xref:System.IComparable%601.CompareTo%28%600%29&gt;</ph>, that indicates whether the position of the current instance in the sort order is before, after, or the same as a second object of the same type.</source>
          <target state="translated">Требуется, реализующие типы определяет единственный метод <ph id="ph1">&lt;xref:System.IComparable%601.CompareTo%28%600%29&gt;</ph>, которое указывает, является ли позиция текущего экземпляра в порядке сортировки перед, после или таким же, как второй объект того же типа.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IComparable`1">
          <source>Typically, the method is not called directly from developer code.</source>
          <target state="translated">Как правило метод не вызывается напрямую из кода разработчика.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IComparable`1">
          <source>Instead, it is called automatically by methods such as <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Add%2A&gt;</ph>.</source>
          <target state="translated">Вместо этого он вызывается автоматически методами, такими как <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType&gt;</ph> и <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Add%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IComparable`1">
          <source>Typically, types that provide an <ph id="ph1">&lt;xref:System.IComparable%601&gt;</ph> implementation also implement the <ph id="ph2">&lt;xref:System.IEquatable%601&gt;</ph> interface.</source>
          <target state="translated">Как правило, типы, обеспечивающие <ph id="ph1">&lt;xref:System.IComparable%601&gt;</ph> реализовать реализацию <ph id="ph2">&lt;xref:System.IEquatable%601&gt;</ph> интерфейса.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IComparable`1">
          <source>The <ph id="ph1">&lt;xref:System.IEquatable%601&gt;</ph> interface defines the <ph id="ph2">&lt;xref:System.IEquatable%601.Equals%2A&gt;</ph> method, which determines the equality of instances of the implementing type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IEquatable%601&gt;</ph> Интерфейс определяет <ph id="ph2">&lt;xref:System.IEquatable%601.Equals%2A&gt;</ph> метод, который определяет равенство экземплярами реализующего типа.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IComparable`1">
          <source>The implementation of the <ph id="ph1">&lt;xref:System.IComparable%601.CompareTo%28%600%29&gt;</ph> method must return an <ph id="ph2">&lt;xref:System.Int32&gt;</ph> that has one of three values, as shown in the following table.</source>
          <target state="translated">Реализация <ph id="ph1">&lt;xref:System.IComparable%601.CompareTo%28%600%29&gt;</ph> метод должен возвращать <ph id="ph2">&lt;xref:System.Int32&gt;</ph> , может иметь одно из трех значений, как показано в следующей таблице.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IComparable`1">
          <source>Value</source>
          <target state="translated">Значение</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IComparable`1">
          <source>Meaning</source>
          <target state="translated">Значение</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IComparable`1">
          <source>Less than zero</source>
          <target state="translated">Меньше нуля</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IComparable`1">
          <source>This object precedes the object specified by the <ph id="ph1">&lt;xref:System.IComparable%601.CompareTo%2A&gt;</ph> method in the sort order.</source>
          <target state="translated">Этот объект предшествует объекта, заданного параметром <ph id="ph1">&lt;xref:System.IComparable%601.CompareTo%2A&gt;</ph> метод в порядке сортировки.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IComparable`1">
          <source>Zero</source>
          <target state="translated">Нуль</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IComparable`1">
          <source>This current instance occurs in the same position in the sort order as the object specified by the <ph id="ph1">&lt;xref:System.IComparable%601.CompareTo%2A&gt;</ph> method argument.</source>
          <target state="translated">Происходит этого текущего экземпляра одной позиции в порядке сортировки, как объекта, заданного параметром <ph id="ph1">&lt;xref:System.IComparable%601.CompareTo%2A&gt;</ph> аргумента метода.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IComparable`1">
          <source>Greater than zero</source>
          <target state="translated">Больше нуля</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IComparable`1">
          <source>This current instance follows the object specified by the <ph id="ph1">&lt;xref:System.IComparable%601.CompareTo%2A&gt;</ph> method argument in the sort order.</source>
          <target state="translated">Это текущий экземпляр стоит после объекта, заданного параметром <ph id="ph1">&lt;xref:System.IComparable%601.CompareTo%2A&gt;</ph> аргумента метода в порядке сортировки.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IComparable`1">
          <source>All numeric types (such as <ph id="ph1">&lt;xref:System.Int32&gt;</ph> and <ph id="ph2">&lt;xref:System.Double&gt;</ph>) implement <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph>, as do <ph id="ph4">&lt;xref:System.String&gt;</ph>, <ph id="ph5">&lt;xref:System.Char&gt;</ph>, and <ph id="ph6">&lt;xref:System.DateTime&gt;</ph>.</source>
          <target state="translated">Все числовые типы (такие как <ph id="ph1">&lt;xref:System.Int32&gt;</ph> и <ph id="ph2">&lt;xref:System.Double&gt;</ph>) реализовать <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph>, как и <ph id="ph4">&lt;xref:System.String&gt;</ph>, <ph id="ph5">&lt;xref:System.Char&gt;</ph>, и <ph id="ph6">&lt;xref:System.DateTime&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IComparable`1">
          <source>Custom types should also provide their own implementation of <ph id="ph1">&lt;xref:System.IComparable%601&gt;</ph> to enable object instances to be ordered or sorted.</source>
          <target state="translated">Пользовательские типы также должен предоставить свою собственную реализацию <ph id="ph1">&lt;xref:System.IComparable%601&gt;</ph> экземпляры объекта упорядочивание или сортировку.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IComparable`1">
          <source>The following code example illustrates the implementation of  <ph id="ph1">&lt;xref:System.IComparable%601&gt;</ph> for a simple <ph id="ph2">`Temperature`</ph> object.</source>
          <target state="translated">В следующем примере кода показана реализация <ph id="ph1">&lt;xref:System.IComparable%601&gt;</ph> для простого <ph id="ph2">`Temperature`</ph> объекта.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IComparable`1">
          <source>The example creates a <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> collection of strings with <ph id="ph2">`Temperature`</ph> object keys, and adds several pairs of temperatures and strings to the list out of sequence.</source>
          <target state="translated">В примере создается <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> набор строк с <ph id="ph2">`Temperature`</ph> ключей и добавляет несколько пар типа строки и температуры за пределами последовательности в список.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IComparable`1">
          <source>In the call to the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Add%2A&gt;</ph> method, the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> collection uses the <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> implementation to sort the list entries, which are then displayed in order of increasing temperature.</source>
          <target state="translated">В вызове <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Add%2A&gt;</ph> метода <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> коллекции использует <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> реализацию для сортировки элементов списка, которые затем отображаются в порядке возрастания температуры.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IComparable`1">
          <source>Replace the type parameter of the <ph id="ph1">&lt;see cref="T:System.IComparable`1" /&gt;</ph> interface with the type that is implementing this interface.</source>
          <target state="translated">Замените параметр типа <ph id="ph1">&lt;see cref="T:System.IComparable`1" /&gt;</ph> интерфейс с типом, реализующим этот интерфейс.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IComparable`1">
          <source>If you implement <ph id="ph1">&lt;see cref="T:System.IComparable`1" /&gt;</ph>, you should overload the <ph id="ph2">&lt;see langword="op_GreaterThan" /&gt;</ph>, <ph id="ph3">&lt;see langword="op_GreaterThanOrEqual" /&gt;</ph>, <ph id="ph4">&lt;see langword="op_LessThan" /&gt;</ph>, and <ph id="ph5">&lt;see langword="op_LessThanOrEqual" /&gt;</ph> operators to return values that are consistent with <ph id="ph6">&lt;see cref="M:System.IComparable`1.CompareTo(`0)" /&gt;</ph>.</source>
          <target state="translated">Если вы реализуете <ph id="ph1">&lt;see cref="T:System.IComparable`1" /&gt;</ph>, необходимо перегрузить <ph id="ph2">&lt;see langword="op_GreaterThan" /&gt;</ph>, <ph id="ph3">&lt;see langword="op_GreaterThanOrEqual" /&gt;</ph>, <ph id="ph4">&lt;see langword="op_LessThan" /&gt;</ph>, и <ph id="ph5">&lt;see langword="op_LessThanOrEqual" /&gt;</ph> операторов для возврата значений, которые согласованы с <ph id="ph6">&lt;see cref="M:System.IComparable`1.CompareTo(`0)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IComparable`1">
          <source>In addition, you should also implement <ph id="ph1">&lt;see cref="T:System.IEquatable`1" /&gt;</ph>.</source>
          <target state="translated">Кроме того, вы должны также реализовать <ph id="ph1">&lt;see cref="T:System.IEquatable`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IComparable`1">
          <source>See the <ph id="ph1">&lt;see cref="T:System.IEquatable`1" /&gt;</ph> article for complete information.</source>
          <target state="translated">В разделе <ph id="ph1">&lt;see cref="T:System.IEquatable`1" /&gt;</ph> статьи для получения полной информации.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.IComparable`1.CompareTo(`0)">
          <source>An object to compare with this instance.</source>
          <target state="translated">Объект для сравнения с данным экземпляром.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.IComparable`1.CompareTo(`0)">
          <source>Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.</source>
          <target state="translated">Сравнивает текущий экземпляр с другим объектом того же типа и возвращает целое число, которое показывает, расположен ли текущий экземпляр перед, после или на той же позиции в порядке сортировки, что и другой объект.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.IComparable`1.CompareTo(`0)">
          <source>A value that indicates the relative order of the objects being compared.</source>
          <target state="translated">Значение, указывающее, каков относительный порядок сравниваемых объектов.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.IComparable`1.CompareTo(`0)">
          <source>The return value has these meanings:</source>
          <target state="translated">Возвращаемые значения представляют следующие результаты сравнения.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.IComparable`1.CompareTo(`0)">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Value</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Значение</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.IComparable`1.CompareTo(`0)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Meaning</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Описание</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.IComparable`1.CompareTo(`0)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Less than zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Меньше нуля</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.IComparable`1.CompareTo(`0)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance precedes <ph id="ph3">&lt;paramref name="other" /&gt;</ph> in the sort order.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Данный экземпляр предшествует параметру <ph id="ph3">&lt;paramref name="other" /&gt;</ph> в порядке сортировки.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.IComparable`1.CompareTo(`0)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Нуль</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.IComparable`1.CompareTo(`0)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance occurs in the same position in the sort order as <ph id="ph3">&lt;paramref name="other" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Данный экземпляр занимает ту же позицию в порядке сортировки, что и объект <ph id="ph3">&lt;paramref name="other" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.IComparable`1.CompareTo(`0)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Greater than zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Больше нуля</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.IComparable`1.CompareTo(`0)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance follows <ph id="ph3">&lt;paramref name="other" /&gt;</ph> in the sort order.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Данный экземпляр следует за параметром <ph id="ph3">&lt;paramref name="other" /&gt;</ph> в порядке сортировки.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IComparable`1.CompareTo(`0)">
          <source><ph id="ph1">&lt;xref:System.IComparable%601.CompareTo%2A&gt;</ph> provides a strongly typed comparison method for ordering members of a generic collection object.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IComparable%601.CompareTo%2A&gt;</ph> предоставляет строго типизированный метод сравнения для упорядочивания элементов объекта универсальной коллекции.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IComparable`1.CompareTo(`0)">
          <source>Because of this, it is usually not called directly from developer code.</source>
          <target state="translated">По этой причине обычно не вызывается напрямую из кода разработчика.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IComparable`1.CompareTo(`0)">
          <source>Instead, it is called automatically by methods such as <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Add%2A&gt;</ph>.</source>
          <target state="translated">Вместо этого он вызывается автоматически методами, такими как <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType&gt;</ph> и <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Add%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IComparable`1.CompareTo(`0)">
          <source>This method is only a definition and must be implemented by a specific class or value type to have effect.</source>
          <target state="translated">Этот метод является только определением и должен быть реализован для определенного класса или типа значения происходит.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IComparable`1.CompareTo(`0)">
          <source>The meaning of the comparisons specified in the Return Values section ("precedes", "occurs in the same position as", and "follows) depends on the particular implementation.</source>
          <target state="translated">Значение сравнения, указанный в возвращаемые значения, раздел («предшествует», «в той же позиции, что происходит» и «ниже), зависит от конкретной реализации.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IComparable`1.CompareTo(`0)">
          <source>By definition, any object compares greater than <ph id="ph1">`null`</ph>, and two null references compare equal to each other.</source>
          <target state="translated">По определению, любой объект сравнения больше, чем <ph id="ph1">`null`</ph>, и две пустые ссылки считаются равными друг с другом.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IComparable`1.CompareTo(`0)">
          <source>The following code example illustrates the implementation of <ph id="ph1">&lt;xref:System.IComparable&gt;</ph> for a simple <ph id="ph2">`Temperature`</ph> object.</source>
          <target state="translated">В следующем примере кода показана реализация <ph id="ph1">&lt;xref:System.IComparable&gt;</ph> для простого <ph id="ph2">`Temperature`</ph> объекта.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IComparable`1.CompareTo(`0)">
          <source>The example creates a <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> collection of strings with <ph id="ph2">`Temperature`</ph> object keys, and adds several pairs of temperatures and strings to the list out of sequence.</source>
          <target state="translated">В примере создается <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> набор строк с <ph id="ph2">`Temperature`</ph> ключей и добавляет несколько пар типа строки и температуры за пределами последовательности в список.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IComparable`1.CompareTo(`0)">
          <source>In the call to the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Add%2A&gt;</ph> method, the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> collection uses the <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> implementation to sort the list entries, which are then displayed in order of increasing temperature.</source>
          <target state="translated">В вызове <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Add%2A&gt;</ph> метода <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> коллекции использует <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> реализацию для сортировки элементов списка, которые затем отображаются в порядке возрастания температуры.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IComparable`1.CompareTo(`0)">
          <source>For objects A, B, and C, the following must be true:</source>
          <target state="translated">Для объектов, A, B и C должны выполняться следующие условия:</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IComparable`1.CompareTo(`0)">
          <source><bpt id="p1">&lt;c&gt;</bpt>A.CompareTo(A)<ept id="p1">&lt;/c&gt;</ept> is required to return zero.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>A.CompareTo(A)<ept id="p1">&lt;/c&gt;</ept> должен возвращать нуль.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IComparable`1.CompareTo(`0)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>A.CompareTo(B)<ept id="p1">&lt;/c&gt;</ept> returns zero, then <bpt id="p2">&lt;c&gt;</bpt>B.CompareTo(A)<ept id="p2">&lt;/c&gt;</ept> is required to return zero.</source>
          <target state="translated">Если <bpt id="p1">&lt;c&gt;</bpt>A.CompareTo(B)<ept id="p1">&lt;/c&gt;</ept> возвращает нуль, затем <bpt id="p2">&lt;c&gt;</bpt>B.CompareTo(A)<ept id="p2">&lt;/c&gt;</ept> должен возвращать нуль.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IComparable`1.CompareTo(`0)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>A.CompareTo(B)<ept id="p1">&lt;/c&gt;</ept> returns zero and <bpt id="p2">&lt;c&gt;</bpt>B.CompareTo(C)<ept id="p2">&lt;/c&gt;</ept> returns zero, then <bpt id="p3">&lt;c&gt;</bpt>A.CompareTo(C)<ept id="p3">&lt;/c&gt;</ept> is required to return zero.</source>
          <target state="translated">Если <bpt id="p1">&lt;c&gt;</bpt>A.CompareTo(B)<ept id="p1">&lt;/c&gt;</ept> возвращает ноль и <bpt id="p2">&lt;c&gt;</bpt>B.CompareTo(C)<ept id="p2">&lt;/c&gt;</ept> возвращает нуль, затем <bpt id="p3">&lt;c&gt;</bpt>A.CompareTo(C)<ept id="p3">&lt;/c&gt;</ept> должен возвращать нуль.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IComparable`1.CompareTo(`0)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>A.CompareTo(B)<ept id="p1">&lt;/c&gt;</ept> returns a value other than zero, then <bpt id="p2">&lt;c&gt;</bpt>B.CompareTo(A)<ept id="p2">&lt;/c&gt;</ept> is required to return a value of the opposite sign.</source>
          <target state="translated">Если <bpt id="p1">&lt;c&gt;</bpt>A.CompareTo(B)<ept id="p1">&lt;/c&gt;</ept> возвращает значение, отличное от нуля, затем <bpt id="p2">&lt;c&gt;</bpt>B.CompareTo(A)<ept id="p2">&lt;/c&gt;</ept> должен возвращать значение с противоположным знаком.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IComparable`1.CompareTo(`0)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>A.CompareTo(B)<ept id="p1">&lt;/c&gt;</ept> returns a value <ph id="ph1">&lt;paramref name="x" /&gt;</ph> that is not equal to zero, and <bpt id="p2">&lt;c&gt;</bpt>B.CompareTo(C)<ept id="p2">&lt;/c&gt;</ept> returns a value <ph id="ph2">&lt;paramref name="y" /&gt;</ph> of the same sign as <ph id="ph3">&lt;paramref name="x" /&gt;</ph>, then <bpt id="p3">&lt;c&gt;</bpt>A.CompareTo(C)<ept id="p3">&lt;/c&gt;</ept> is required to return a value of the same sign as <ph id="ph4">&lt;paramref name="x" /&gt;</ph> and <ph id="ph5">&lt;paramref name="y" /&gt;</ph>.</source>
          <target state="translated">Если <bpt id="p1">&lt;c&gt;</bpt>A.CompareTo(B)<ept id="p1">&lt;/c&gt;</ept> возвращает значение <ph id="ph1">&lt;paramref name="x" /&gt;</ph> , не равно нулю, и <bpt id="p2">&lt;c&gt;</bpt>B.CompareTo(C)<ept id="p2">&lt;/c&gt;</ept> возвращает значение <ph id="ph2">&lt;paramref name="y" /&gt;</ph> из того же процесса входа как <ph id="ph3">&lt;paramref name="x" /&gt;</ph>, затем <bpt id="p3">&lt;c&gt;</bpt>A. CompareTo(C)<ept id="p3">&lt;/c&gt;</ept> должен возвращать значение того же процесса входа как <ph id="ph4">&lt;paramref name="x" /&gt;</ph> и <ph id="ph5">&lt;paramref name="y" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IComparable`1.CompareTo(`0)">
          <source>Use the <ph id="ph1">&lt;see cref="M:System.IComparable`1.CompareTo(`0)" /&gt;</ph> method to determine the ordering of instances of a class.</source>
          <target state="translated">Используйте <ph id="ph1">&lt;see cref="M:System.IComparable`1.CompareTo(`0)" /&gt;</ph> метод для определения порядка экземпляров класса.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>