<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ICustomFormatter.xml" source-language="en-US" target-language="ru-RU">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac56002c7bffa27e626bfd04916c139d411974b86fc.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6002c7bffa27e626bfd04916c139d411974b86fc</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ICustomFormatter">
          <source>Defines a method that supports custom formatting of the value of an object.</source>
          <target state="translated">Определяет метод, поддерживающий пользовательское форматирование значения объекта.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>The <ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> interface includes a single method, <ph id="ph2">&lt;xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> Интерфейс включает один метод <ph id="ph2">&lt;xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>When this interface is implemented by a reference or value type, the <ph id="ph1">&lt;xref:System.ICustomFormatter.Format%2A&gt;</ph> method returns a custom-formatted string representation of an object's value.</source>
          <target state="translated">Этот интерфейс реализован по типу ссылки или значений <ph id="ph1">&lt;xref:System.ICustomFormatter.Format%2A&gt;</ph> метод возвращает форматированное строковое представление значения объекта.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Typically, the <ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> interface is implemented with the <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> interface to customize the behavior of two .NET Framework composite string formatting methods that include an <ph id="ph3">&lt;xref:System.IFormatProvider&gt;</ph> parameter.</source>
          <target state="translated">Как правило <ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> интерфейс реализуется с помощью <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> интерфейс для настройки поведения двух методов .NET Framework составную строку форматирования, включающие <ph id="ph3">&lt;xref:System.IFormatProvider&gt;</ph> параметра.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Specifically, the <ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> interface can provide custom formatting of the value of an object passed to the <ph id="ph2">&lt;xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph> and <ph id="ph3">&lt;xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph> methods.</source>
          <target state="translated">В частности <ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> интерфейса может предоставить пользовательское форматирование значения объекта, передаваемого <ph id="ph2">&lt;xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph> и <ph id="ph3">&lt;xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph> методы.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Providing a custom representation of an object's value requires that you do the following:</source>
          <target state="translated">Предоставляя пользовательское представление значения объекта требуется сделать следующее:</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Define a class that implements the <ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> interface and its single member, the <ph id="ph2">&lt;xref:System.ICustomFormatter.Format%2A&gt;</ph> method.</source>
          <target state="translated">Определите класс, который реализует <ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> интерфейса и его один член <ph id="ph2">&lt;xref:System.ICustomFormatter.Format%2A&gt;</ph> метод.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Define a class that implements the <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> interface and its single member, the <ph id="ph2">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph> method.</source>
          <target state="translated">Определите класс, который реализует <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> интерфейса и его один член <ph id="ph2">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph> метод.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>The <ph id="ph1">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph> method returns an instance of your <ph id="ph2">&lt;xref:System.ICustomFormatter&gt;</ph> implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph> Метод возвращает экземпляр вашего <ph id="ph2">&lt;xref:System.ICustomFormatter&gt;</ph> реализации.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Often, a single class implements both <ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> and <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph>.</source>
          <target state="translated">Часто один класс реализует интерфейс <ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> и <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>In that case, the class's <ph id="ph1">`GetFormat`</ph> implementation just returns an instance of itself.</source>
          <target state="translated">В этом случае класс элемента <ph id="ph1">`GetFormat`</ph> реализация возвращает экземпляр самого себя.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Pass the <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> implementation as the <ph id="ph2">`provider`</ph> argument of the <ph id="ph3">&lt;xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph> method or a comparable method.</source>
          <target state="translated">Передайте <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> реализации как <ph id="ph2">`provider`</ph> аргумент <ph id="ph3">&lt;xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph> метод или метод сравнимыми.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>The .NET Framework method will then use your custom formatting instead of its own.</source>
          <target state="translated">Метод .NET Framework будет использовать пользовательский формат вместо свой собственный.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>The following example implements <ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> to allow binary, octal, and hexadecimal formatting of integral values.</source>
          <target state="translated">В следующем примере реализуется <ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> разрешающее двоичных, восьмеричных и шестнадцатеричных форматирование целых значений.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>In this example, a single class, <ph id="ph1">`IBinaryFormatter`</ph>, implements both <ph id="ph2">&lt;xref:System.ICustomFormatter&gt;</ph> and <ph id="ph3">&lt;xref:System.IFormatProvider&gt;</ph>.</source>
          <target state="translated">В этом примере один класс <ph id="ph1">`IBinaryFormatter`</ph>, реализует интерфейс <ph id="ph2">&lt;xref:System.ICustomFormatter&gt;</ph> и <ph id="ph3">&lt;xref:System.IFormatProvider&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Its <ph id="ph1">&lt;xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType&gt;</ph> method determines whether the <ph id="ph2">`formatType`</ph> parameter represents an <ph id="ph3">&lt;xref:System.ICustomFormatter&gt;</ph> type.</source>
          <target state="translated">Его <ph id="ph1">&lt;xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType&gt;</ph> метод определяет, является ли <ph id="ph2">`formatType`</ph> представляет параметр <ph id="ph3">&lt;xref:System.ICustomFormatter&gt;</ph> типа.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>If it does, <ph id="ph1">`BinaryFormatter`</ph> returns an instance of itself; otherwise, it returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">В этом случае <ph id="ph1">`BinaryFormatter`</ph> экземпляра; в противном случае он возвращает <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Its <ph id="ph1">&lt;xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType&gt;</ph> implementation determines whether the format parameter is one of the three supported format strings ("B" for binary, "O" for octal, and "H" for hexadecimal) and formats the <ph id="ph2">`arg`</ph> parameter appropriately.</source>
          <target state="translated">Его <ph id="ph1">&lt;xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType&gt;</ph> реализация определяет, является ли параметр формата одной из трех строк, поддерживаемый формат («B» для двоичного файла, «O» для восьмеричной и «H» для шестнадцатеричной) и форматирует <ph id="ph2">`arg`</ph> параметр соответствующим образом.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Otherwise, if <ph id="ph1">`arg`</ph> is not <ph id="ph2">`null`</ph>, it calls the <ph id="ph3">`arg`</ph> parameter's <ph id="ph4">&lt;xref:System.IFormattable.ToString%2A?displayProperty=nameWithType&gt;</ph> implementation, if one exists, or its parameterless <ph id="ph5">`ToString`</ph> method, if one does not.</source>
          <target state="translated">В противном случае, если <ph id="ph1">`arg`</ph> не <ph id="ph2">`null`</ph>, он вызывает <ph id="ph3">`arg`</ph> параметра <ph id="ph4">&lt;xref:System.IFormattable.ToString%2A?displayProperty=nameWithType&gt;</ph> реализацию, если он существует, или его без параметров <ph id="ph5">`ToString`</ph> метод, если нет.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>If <ph id="ph1">`arg`</ph> is <ph id="ph2">`null`</ph>, the method returns <ph id="ph3">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Если значением параметра <ph id="ph1">`arg`</ph> является <ph id="ph2">`null`</ph>, метод возвращает <ph id="ph3">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source><ph id="ph1">`BinaryFormatter`</ph> can then be used to provide custom formatting by passing a <ph id="ph2">`BinaryFormatter`</ph> object as the <ph id="ph3">`provider`</ph> parameter of the <ph id="ph4">&lt;xref:System.String.Format%2A&gt;</ph> method, as the following example shows.</source>
          <target state="translated"><ph id="ph1">`BinaryFormatter`</ph> можно использовать для пользовательского форматирования, передав <ph id="ph2">`BinaryFormatter`</ph> объекта в виде <ph id="ph3">`provider`</ph> параметр <ph id="ph4">&lt;xref:System.String.Format%2A&gt;</ph> метода, как показано в следующем примере.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>The common language runtime attempts to use your <ph id="ph1">&lt;see cref="T:System.ICustomFormatter" /&gt;</ph> implementation for every format item in a composite format string.</source>
          <target state="translated">Общеязыковая среда выполнения пытается использовать ваш <ph id="ph1">&lt;see cref="T:System.ICustomFormatter" /&gt;</ph> реализацию для каждого элемента форматирования в строке составного формата.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>As a result, you should expect that your <ph id="ph1">&lt;see cref="T:System.ICustomFormatter" /&gt;</ph> implementation will be called to provide formatting services to objects or values that it is not designed to handle.</source>
          <target state="translated">Поэтому следует ожидать, что ваш <ph id="ph1">&lt;see cref="T:System.ICustomFormatter" /&gt;</ph> реализации будет вызываться для предоставления служб форматирования для объектов или значения, которые он не предназначен для обработки.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>In these cases, your <ph id="ph1">&lt;see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /&gt;</ph> method must call the appropriate formatting method for that object or value.</source>
          <target state="translated">В этих случаях вашей <ph id="ph1">&lt;see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /&gt;</ph> метода необходимо вызвать соответствующий метод форматирования для этого объекта или значение.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>There are two kinds of <ph id="ph1">&lt;see cref="T:System.ICustomFormatter" /&gt;</ph> implementations: intrinsic and extension.</source>
          <target state="translated">Существует два типа из <ph id="ph1">&lt;see cref="T:System.ICustomFormatter" /&gt;</ph> реализации: встроенная функция и расширение.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Intrinsic implementations are implementations that provide custom formatting for an application-defined object.</source>
          <target state="translated">Встроенные реализации являются реализациями, которые предоставляют пользовательский формат для объекта определяется приложением.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>In this case, your implementation should include the following:</source>
          <target state="translated">В этом случае реализация должна содержать следующее:</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>A definition of format strings that define the formatting of the object.</source>
          <target state="translated">Определение строк формата, которые определяют форматирование объекта.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Format strings are optional.</source>
          <target state="translated">Строки формата являются необязательными.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Typically, a "G" or "g" format string defines the general (or most commonly used) format.</source>
          <target state="translated">Как правило строка формата «G» или «g» определяет формат Общие (или наиболее часто используемые).</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>However, you are free to define any format strings that you choose.</source>
          <target state="translated">Тем не менее можно определять всех выбранных строк формата.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>You are also free to decide whether they are case-sensitive or case-insensitive.</source>
          <target state="translated">Вы можете решить, будет ли они зависеть от регистра символов.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>A test to ensure that the type of the object passed to your <ph id="ph1">&lt;see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /&gt;</ph> method is your application-defined type.</source>
          <target state="translated">Тест, чтобы убедиться, что тип объекта, переданного в <ph id="ph1">&lt;see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /&gt;</ph> метод является определяемых приложением.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>If it is not, you should call the object's <ph id="ph1">&lt;see cref="T:System.IFormattable" /&gt;</ph> implementation, if one exists, or its <ph id="ph2">&lt;see cref="M:System.Object.ToString" /&gt;</ph> method, if it does not.</source>
          <target state="translated">Если это не так, необходимо вызвать объекта <ph id="ph1">&lt;see cref="T:System.IFormattable" /&gt;</ph> реализации, если она существует, или его <ph id="ph2">&lt;see cref="M:System.Object.ToString" /&gt;</ph> метод, если это не так.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>You should be prepared to handle any exceptions these method calls might throw.</source>
          <target state="translated">Следует быть готовым для обработки исключений, может вызывать эти вызовы методов.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Code to handle a null format string, if your implementation supports format strings.</source>
          <target state="translated">Код для обработки строки формата null, если ваша реализация поддерживает строки формата.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>The most common approach is to replace a null format string with the general format specifier.</source>
          <target state="translated">Наиболее распространенным подходом является замена строки формата null с помощью спецификатора общего формата.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Code to handle any format strings that your implementation supports.</source>
          <target state="translated">Код для обработки всех строк формата, которые поддерживает реализация.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Code to handle format strings that you do not support.</source>
          <target state="translated">Код для обработки строк формата, которые не поддерживают.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>The most common approach is to throw a <ph id="ph1">&lt;see cref="T:System.FormatException" /&gt;</ph>, although you can provide default formatting.</source>
          <target state="translated">Наиболее распространенный подход — создать <ph id="ph1">&lt;see cref="T:System.FormatException" /&gt;</ph>, несмотря на то, что можно указать форматирование по умолчанию.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Extension implementations are implementations that provide custom formatting for a type that already has formatting support.</source>
          <target state="translated">Реализации расширения являются реализациями, которые предоставляют пользовательский формат для типа, который уже имеет поддержку форматирования.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>For example, you could define a <bpt id="p1">&lt;c&gt;</bpt>CustomerNumberFormatter<ept id="p1">&lt;/c&gt;</ept> that formats an integral type with hyphens between specific digits.</source>
          <target state="translated">Например, можно определить <bpt id="p1">&lt;c&gt;</bpt>CustomerNumberFormatter<ept id="p1">&lt;/c&gt;</ept> , форматирует целочисленный тип с дефисами между определенными цифрами.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>In this case, your implementation should include the following:</source>
          <target state="translated">В этом случае реализация должна содержать следующее:</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>A definition of format strings that extend the formatting of the object.</source>
          <target state="translated">Определение строк формата, которые расширяют форматирование объекта.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>These format strings are required, but they must not conflict with the type's existing format strings.</source>
          <target state="translated">Эти строки формата являются обязательными, но они не должно конфликтовать с существующими строками формата этого типа.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>For example, if you are extending formatting for the <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> type, you should not implement the "C", "D", "E", "F", and "G" format specifiers, among others.</source>
          <target state="translated">Например, при расширении форматирования для <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> типа, не следует реализовывать описателей «C», «D», «E», «F» и «G» среди других.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>A test that the type of the object passed to your <ph id="ph1">&lt;see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /&gt;</ph> method is a type whose formatting your extension supports.</source>
          <target state="translated">Тест, тип объекта, переданного в <ph id="ph1">&lt;see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /&gt;</ph> метод — это тип, форматирование которого расширение поддерживает.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>If it is not, call the object's <ph id="ph1">&lt;see cref="T:System.IFormattable" /&gt;</ph> implementation, if one exists, or the object's parameterless <ph id="ph2">&lt;see cref="M:System.Object.ToString" /&gt;</ph> method, if it does not.</source>
          <target state="translated">Если это не так, вызывающие этот объект <ph id="ph1">&lt;see cref="T:System.IFormattable" /&gt;</ph> реализацию, если он существует, или объект без параметров <ph id="ph2">&lt;see cref="M:System.Object.ToString" /&gt;</ph> метод, если это не так.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>You should be prepared to handle any exceptions these method calls might throw.</source>
          <target state="translated">Следует быть готовым для обработки исключений, может вызывать эти вызовы методов.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Code to handle any format strings that your extension supports.</source>
          <target state="translated">Код для обработки всех строк формата, которые поддерживает расширение.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Code to handle any format strings that your extension does not support.</source>
          <target state="translated">Код для обработки всех строк формата, которые не поддерживаются расширения.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>These should be passed on to the type's <ph id="ph1">&lt;see cref="T:System.IFormattable" /&gt;</ph> implementation.</source>
          <target state="translated">Они должны быть переданы тип <ph id="ph1">&lt;see cref="T:System.IFormattable" /&gt;</ph> реализации.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>You should be prepared to handle any exceptions these method calls might throw.</source>
          <target state="translated">Следует быть готовым для обработки исключений, может вызывать эти вызовы методов.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>A format string containing formatting specifications.</source>
          <target state="translated">Строка формата, содержащая спецификации форматирования.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>An object to format.</source>
          <target state="translated">Объект для форматирования.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>An object that supplies format information about the current instance.</source>
          <target state="translated">Объект, предоставляющий сведения о формате для текущего экземпляра.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>Converts the value of a specified object to an equivalent string representation using specified format and culture-specific formatting information.</source>
          <target state="translated">Преобразует значение указанного объекта в эквивалентное ему строковое представление с использованием указанного формата и сведений об особенностях форматирования для данного языка и региональных параметров.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>The string representation of the value of <ph id="ph1">&lt;paramref name="arg" /&gt;</ph>, formatted as specified by <ph id="ph2">&lt;paramref name="format" /&gt;</ph> and <ph id="ph3">&lt;paramref name="formatProvider" /&gt;</ph>.</source>
          <target state="translated">Строковое представление значения <ph id="ph1">&lt;paramref name="arg" /&gt;</ph>, отформатированное с использованием параметров <ph id="ph2">&lt;paramref name="format" /&gt;</ph> и <ph id="ph3">&lt;paramref name="formatProvider" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType&gt;</ph> is a callback method.</source>
          <target state="translated">Метод <ph id="ph1">&lt;xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType&gt;</ph> является методом обратного вызова.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>It is called by a method that supports custom formatting, such as <ph id="ph1">&lt;xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Вызывается метод, поддерживающий настраиваемое форматирование, таких как <ph id="ph1">&lt;xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph> или <ph id="ph2">&lt;xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>The implementation is called once for each format item in a <bpt id="p1">[</bpt>composite format string<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>.</source>
          <target state="translated">Реализация вызывается один раз для каждого элемента форматирования в <bpt id="p1">[</bpt>Строка составного формата<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>For example, in the following statement, the <ph id="ph1">&lt;xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType&gt;</ph> method is called three times.</source>
          <target state="translated">Например, в следующей инструкции <ph id="ph1">&lt;xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType&gt;</ph> метод вызывается трижды.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>The <ph id="ph1">`arg`</ph> parameter is the object in the object list whose zero-based position corresponds to the index of a particular format item.</source>
          <target state="translated"><ph id="ph1">`arg`</ph> Объект в списке объектов, отсчитываемый от нуля позиция которого соответствует индексу элемента определенного формата.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>The <ph id="ph1">`format`</ph> parameter contains a format string, which is the <ph id="ph2">`formatString`</ph> component of a format item.</source>
          <target state="translated"><ph id="ph1">`format`</ph> Параметр содержит строки формата, который является <ph id="ph2">`formatString`</ph> компонент элемента формата.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>If the format item has no <ph id="ph1">`formatString`</ph> component, the value of <ph id="ph2">`format`</ph> is <ph id="ph3">`null`</ph>.</source>
          <target state="translated">Если нет элемента форматирования <ph id="ph1">`formatString`</ph> компонента, значение <ph id="ph2">`format`</ph> — <ph id="ph3">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>If <ph id="ph1">`format`</ph> is <ph id="ph2">`null`</ph>, depending on the type of <ph id="ph3">`arg`</ph>, you may be able to use the default format specification of your choice.</source>
          <target state="translated">Если <ph id="ph1">`format`</ph> — <ph id="ph2">`null`</ph>, в зависимости от типа <ph id="ph3">`arg`</ph>, вы сможете использовать спецификации формата по умолчанию по своему усмотрению.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>The <ph id="ph1">`formatProvider`</ph> parameter is the <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> implementation that provides formatting for <ph id="ph3">`arg`</ph>.</source>
          <target state="translated"><ph id="ph1">`formatProvider`</ph> Параметр <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> реализацию, которая предоставляет формат для <ph id="ph3">`arg`</ph>.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>Typically, it is an instance of your <ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> implementation.</source>
          <target state="translated">Обычно это экземпляр вашего <ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> реализации.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>If <ph id="ph1">`formatProvider`</ph> is <ph id="ph2">`null`</ph>, ignore that parameter.</source>
          <target state="translated">Если <ph id="ph1">`formatProvider`</ph> — <ph id="ph2">`null`</ph>, игнорируйте этот параметр.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>Your implementation of the <ph id="ph1">&lt;xref:System.ICustomFormatter.Format%2A&gt;</ph> method must include the following functionality so the .NET Framework can provide formatting you do not support.</source>
          <target state="translated">Реализация <ph id="ph1">&lt;xref:System.ICustomFormatter.Format%2A&gt;</ph> метод должен включать следующие функциональные возможности, поэтому .NET Framework можно указать форматирование не поддерживают.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>If your format method does not support a format, determine whether the object being formatted implements the <ph id="ph1">&lt;xref:System.IFormattable&gt;</ph> interface.</source>
          <target state="translated">Если метод форматирования не поддерживает формат, определите, является ли объект форматирован <ph id="ph1">&lt;xref:System.IFormattable&gt;</ph> интерфейса.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>If it does, invoke the <ph id="ph1">&lt;xref:System.IFormattable.ToString%2A?displayProperty=nameWithType&gt;</ph> method of that interface.</source>
          <target state="translated">Если он вызывать <ph id="ph1">&lt;xref:System.IFormattable.ToString%2A?displayProperty=nameWithType&gt;</ph> метода этого интерфейса.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>Otherwise, invoke the default <ph id="ph1">&lt;xref:System.Object.ToString%2A?displayProperty=nameWithType&gt;</ph> method of the underlying object.</source>
          <target state="translated">В противном случае вызов по умолчанию <ph id="ph1">&lt;xref:System.Object.ToString%2A?displayProperty=nameWithType&gt;</ph> метод базового объекта.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>The following code illustrates this pattern.</source>
          <target state="translated">Следующий код иллюстрирует этот шаблон.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>The following example implements <ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> to allow binary, octal, and hexadecimal formatting of integral values.</source>
          <target state="translated">В следующем примере реализуется <ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> разрешающее двоичных, восьмеричных и шестнадцатеричных форматирование целых значений.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>Its <ph id="ph1">&lt;xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType&gt;</ph> implementation determines whether the format parameter is one of the three supported format strings ("B" for binary, "O" for octal, and "H" for hexadecimal) and formats the <ph id="ph2">`arg`</ph> parameter appropriately.</source>
          <target state="translated">Его <ph id="ph1">&lt;xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType&gt;</ph> реализация определяет, является ли параметр формата одной из трех строк, поддерживаемый формат («B» для двоичного файла, «O» для восьмеричной и «H» для шестнадцатеричной) и форматирует <ph id="ph2">`arg`</ph> параметр соответствующим образом.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>Otherwise, if <ph id="ph1">`arg`</ph> is not <ph id="ph2">`null`</ph>, it calls the <ph id="ph3">`arg`</ph> parameter's <ph id="ph4">&lt;xref:System.IFormattable.ToString%2A?displayProperty=nameWithType&gt;</ph> implementation, if one exists, or its parameterless <ph id="ph5">`ToString`</ph> method, if one does not.</source>
          <target state="translated">В противном случае, если <ph id="ph1">`arg`</ph> не <ph id="ph2">`null`</ph>, он вызывает <ph id="ph3">`arg`</ph> параметра <ph id="ph4">&lt;xref:System.IFormattable.ToString%2A?displayProperty=nameWithType&gt;</ph> реализацию, если он существует, или его без параметров <ph id="ph5">`ToString`</ph> метод, если нет.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>If <ph id="ph1">`arg`</ph> is <ph id="ph2">`null`</ph>, the method returns <ph id="ph3">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Если значением параметра <ph id="ph1">`arg`</ph> является <ph id="ph2">`null`</ph>, метод возвращает <ph id="ph3">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source><ph id="ph1">`BinaryFormatter`</ph> can then be used to provide custom formatting by passing a <ph id="ph2">`BinaryFormatter`</ph> object as the <ph id="ph3">`provider`</ph> parameter of the <ph id="ph4">&lt;xref:System.String.Format%2A&gt;</ph> method, as the following example shows.</source>
          <target state="translated"><ph id="ph1">`BinaryFormatter`</ph> можно использовать для пользовательского форматирования, передав <ph id="ph2">`BinaryFormatter`</ph> объекта в виде <ph id="ph3">`provider`</ph> параметр <ph id="ph4">&lt;xref:System.String.Format%2A&gt;</ph> метода, как показано в следующем примере.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>