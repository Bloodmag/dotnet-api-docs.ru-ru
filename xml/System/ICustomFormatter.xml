<Type Name="ICustomFormatter" FullName="System.ICustomFormatter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6002c7bffa27e626bfd04916c139d411974b86fc" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30728678" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface ICustomFormatter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICustomFormatter" />
  <TypeSignature Language="DocId" Value="T:System.ICustomFormatter" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICustomFormatter" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICustomFormatter" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Определяет метод, поддерживающий пользовательское форматирование значения объекта.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ICustomFormatter> Интерфейс включает один метод <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>. Этот интерфейс реализован по типу ссылки или значений <xref:System.ICustomFormatter.Format%2A> метод возвращает форматированное строковое представление значения объекта.  
  
 Как правило <xref:System.ICustomFormatter> интерфейс реализуется с помощью <xref:System.IFormatProvider> интерфейс для настройки поведения двух методов .NET Framework составную строку форматирования, включающие <xref:System.IFormatProvider> параметра. В частности <xref:System.ICustomFormatter> интерфейса может предоставить пользовательское форматирование значения объекта, передаваемого <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> и <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> методы.  
  
 Предоставляя пользовательское представление значения объекта требуется сделать следующее:  
  
1.  Определите класс, который реализует <xref:System.ICustomFormatter> интерфейса и его один член <xref:System.ICustomFormatter.Format%2A> метод.  
  
2.  Определите класс, который реализует <xref:System.IFormatProvider> интерфейса и его один член <xref:System.IFormatProvider.GetFormat%2A> метод. <xref:System.IFormatProvider.GetFormat%2A> Метод возвращает экземпляр вашего <xref:System.ICustomFormatter> реализации. Часто один класс реализует интерфейс <xref:System.ICustomFormatter> и <xref:System.IFormatProvider>. В этом случае класс элемента `GetFormat` реализация возвращает экземпляр самого себя.  
  
3.  Передайте <xref:System.IFormatProvider> реализации как `provider` аргумент <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> метод или метод сравнимыми.  
  
 Метод .NET Framework будет использовать пользовательский формат вместо свой собственный.  
  
   
  
## Examples  
 В следующем примере реализуется <xref:System.ICustomFormatter> разрешающее двоичных, восьмеричных и шестнадцатеричных форматирование целых значений. В этом примере один класс `IBinaryFormatter`, реализует интерфейс <xref:System.ICustomFormatter> и <xref:System.IFormatProvider>. Его <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> метод определяет, является ли `formatType` представляет параметр <xref:System.ICustomFormatter> типа. В этом случае `BinaryFormatter` экземпляра; в противном случае он возвращает `null`. Его <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> реализация определяет, является ли параметр формата одной из трех строк, поддерживаемый формат («B» для двоичного файла, «O» для восьмеричной и «H» для шестнадцатеричной) и форматирует `arg` параметр соответствующим образом. В противном случае, если `arg` не `null`, он вызывает `arg` параметра <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> реализацию, если он существует, или его без параметров `ToString` метод, если нет. Если значением параметра `arg` является `null`, метод возвращает <xref:System.String.Empty?displayProperty=nameWithType>.  
  
 [!code-csharp[System.ICustomFormatter.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#1)]
 [!code-vb[System.ICustomFormatter.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#1)]  
  
 `BinaryFormatter` можно использовать для пользовательского форматирования, передав `BinaryFormatter` объекта в виде `provider` параметр <xref:System.String.Format%2A> метода, как показано в следующем примере.  
  
 [!code-csharp[System.ICustomFormatter.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#2)]
 [!code-vb[System.ICustomFormatter.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#2)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Общеязыковая среда выполнения пытается использовать ваш <see cref="T:System.ICustomFormatter" /> реализацию для каждого элемента форматирования в строке составного формата. Поэтому следует ожидать, что ваш <see cref="T:System.ICustomFormatter" /> реализации будет вызываться для предоставления служб форматирования для объектов или значения, которые он не предназначен для обработки. В этих случаях вашей <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> метода необходимо вызвать соответствующий метод форматирования для этого объекта или значение.  
  
 Существует два типа из <see cref="T:System.ICustomFormatter" /> реализации: встроенная функция и расширение.  
  
 Встроенные реализации являются реализациями, которые предоставляют пользовательский формат для объекта определяется приложением. В этом случае реализация должна содержать следующее:  
  
-   Определение строк формата, которые определяют форматирование объекта. Строки формата являются необязательными. Как правило строка формата «G» или «g» определяет формат Общие (или наиболее часто используемые). Тем не менее можно определять всех выбранных строк формата. Вы можете решить, будет ли они зависеть от регистра символов.  
  
-   Тест, чтобы убедиться, что тип объекта, переданного в <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> метод является определяемых приложением. Если это не так, необходимо вызвать объекта <see cref="T:System.IFormattable" /> реализации, если она существует, или его <see cref="M:System.Object.ToString" /> метод, если это не так. Следует быть готовым для обработки исключений, может вызывать эти вызовы методов.  
  
-   Код для обработки строки формата null, если ваша реализация поддерживает строки формата. Наиболее распространенным подходом является замена строки формата null с помощью спецификатора общего формата.  
  
-   Код для обработки всех строк формата, которые поддерживает реализация.  
  
-   Код для обработки строк формата, которые не поддерживают. Наиболее распространенный подход — создать <see cref="T:System.FormatException" />, несмотря на то, что можно указать форматирование по умолчанию.  
  
 Реализации расширения являются реализациями, которые предоставляют пользовательский формат для типа, который уже имеет поддержку форматирования. Например, можно определить <c>CustomerNumberFormatter</c> , форматирует целочисленный тип с дефисами между определенными цифрами. В этом случае реализация должна содержать следующее:  
  
-   Определение строк формата, которые расширяют форматирование объекта. Эти строки формата являются обязательными, но они не должно конфликтовать с существующими строками формата этого типа. Например, при расширении форматирования для <see cref="T:System.Int32" /> типа, не следует реализовывать описателей «C», «D», «E», «F» и «G» среди других.  
  
-   Тест, тип объекта, переданного в <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> метод — это тип, форматирование которого расширение поддерживает. Если это не так, вызывающие этот объект <see cref="T:System.IFormattable" /> реализацию, если он существует, или объект без параметров <see cref="M:System.Object.ToString" /> метод, если это не так. Следует быть готовым для обработки исключений, может вызывать эти вызовы методов.  
  
-   Код для обработки всех строк формата, которые поддерживает расширение.  
  
-   Код для обработки всех строк формата, которые не поддерживаются расширения. Они должны быть переданы тип <see cref="T:System.IFormattable" /> реализации. Следует быть готовым для обработки исключений, может вызывать эти вызовы методов.</para>
    </block>
    <altmember cref="T:System.IFormatProvider" />
  </Docs>
  <Members>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public string Format (string format, object arg, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Format(string format, object arg, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function Format (format As String, arg As Object, formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Format(System::String ^ format, System::Object ^ arg, IFormatProvider ^ formatProvider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">Строка формата, содержащая спецификации форматирования.</param>
        <param name="arg">Объект для форматирования.</param>
        <param name="formatProvider">Объект, предоставляющий сведения о формате для текущего экземпляра.</param>
        <summary>Преобразует значение указанного объекта в эквивалентное ему строковое представление с использованием указанного формата и сведений об особенностях форматирования для данного языка и региональных параметров.</summary>
        <returns>Строковое представление значения <paramref name="arg" />, отформатированное с использованием параметров <paramref name="format" /> и <paramref name="formatProvider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> является методом обратного вызова. Вызывается метод, поддерживающий настраиваемое форматирование, таких как <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> или <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>. Реализация вызывается один раз для каждого элемента форматирования в [Строка составного формата](~/docs/standard/base-types/composite-formatting.md). Например, в следующей инструкции <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> метод вызывается трижды.  
  
 [!code-csharp[System.ICustomFormatter.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#4)]
 [!code-vb[System.ICustomFormatter.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#4)]  
  
 `arg` Объект в списке объектов, отсчитываемый от нуля позиция которого соответствует индексу элемента определенного формата.  
  
 `format` Параметр содержит строки формата, который является `formatString` компонент элемента формата. Если нет элемента форматирования `formatString` компонента, значение `format` — `null`. Если `format` — `null`, в зависимости от типа `arg`, вы сможете использовать спецификации формата по умолчанию по своему усмотрению.  
  
 `formatProvider` Параметр <xref:System.IFormatProvider> реализацию, которая предоставляет формат для `arg`. Обычно это экземпляр вашего <xref:System.ICustomFormatter> реализации. Если `formatProvider` — `null`, игнорируйте этот параметр.  
  
 Реализация <xref:System.ICustomFormatter.Format%2A> метод должен включать следующие функциональные возможности, поэтому .NET Framework можно указать форматирование не поддерживают. Если метод форматирования не поддерживает формат, определите, является ли объект форматирован <xref:System.IFormattable> интерфейса. Если он вызывать <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> метода этого интерфейса. В противном случае вызов по умолчанию <xref:System.Object.ToString%2A?displayProperty=nameWithType> метод базового объекта. Следующий код иллюстрирует этот шаблон.  
  
 [!code-csharp[System.ICustomFormatter.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#3)]
 [!code-vb[System.ICustomFormatter.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#3)]  
  
   
  
## Examples  
 В следующем примере реализуется <xref:System.ICustomFormatter> разрешающее двоичных, восьмеричных и шестнадцатеричных форматирование целых значений. Его <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> реализация определяет, является ли параметр формата одной из трех строк, поддерживаемый формат («B» для двоичного файла, «O» для восьмеричной и «H» для шестнадцатеричной) и форматирует `arg` параметр соответствующим образом. В противном случае, если `arg` не `null`, он вызывает `arg` параметра <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> реализацию, если он существует, или его без параметров `ToString` метод, если нет. Если значением параметра `arg` является `null`, метод возвращает <xref:System.String.Empty?displayProperty=nameWithType>.  
  
 [!code-csharp[System.ICustomFormatter.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#1)]
 [!code-vb[System.ICustomFormatter.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#1)]  
  
 `BinaryFormatter` можно использовать для пользовательского форматирования, передав `BinaryFormatter` объекта в виде `provider` параметр <xref:System.String.Format%2A> метода, как показано в следующем примере.  
  
 [!code-csharp[System.ICustomFormatter.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#2)]
 [!code-vb[System.ICustomFormatter.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormattable" />
      </Docs>
    </Member>
  </Members>
</Type>