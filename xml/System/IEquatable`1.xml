<Type Name="IEquatable&lt;T&gt;" FullName="System.IEquatable&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="19bc49f94beee1a3c075a5ffa5eaa52f9c90027f" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30728058" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IEquatable&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEquatable`1&lt;T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.IEquatable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEquatable(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IEquatable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T">Тип объектов для сравнения.</typeparam>
    <summary>Определяет обобщенный метод, который реализуется типом значения или классом для создания метода с целью определения экземпляров.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот интерфейс реализуется типами, значения которых могут быть сравнение (пример, числовых и строковых классов). Тип значения или класс реализует <xref:System.IEquatable%601.Equals%2A> метод для создания определенного типа метода, пригодного для определения равенства экземпляров.  
  
> [!NOTE]
>  <xref:System.IComparable%601> Интерфейс определяет <xref:System.IComparable%601.CompareTo%2A> метод, который определяет порядок сортировки экземплярами реализующего типа. <xref:System.IEquatable%601> Интерфейс определяет <xref:System.IEquatable%601.Equals%2A> метод, который определяет равенство экземплярами реализующего типа.  
  
 <xref:System.IEquatable%601> Интерфейс используется универсальная коллекция объектов, таких как <xref:System.Collections.Generic.Dictionary%602>, <xref:System.Collections.Generic.List%601>, и <xref:System.Collections.Generic.LinkedList%601> при проверке на равенство в таких методов, как `Contains`, `IndexOf`, `LastIndexOf`, и `Remove`. Он должен быть реализован для любого объекта, который может храниться в универсальной коллекции.  
  
   
  
## Examples  
 Далее приведен пример <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> метод.  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Замените параметр типа <see cref="T:System.IEquatable`1" /> интерфейс с типом, реализующим этот интерфейс.  
  
 Если вы реализуете <see cref="T:System.IEquatable`1" />, также должны переопределять реализацию базового класса <see cref="M:System.Object.Equals(System.Object)" /> и <see cref="M:System.Object.GetHashCode" /> , чтобы их поведение согласуется со спецификацией <see cref="M:System.IEquatable`1.Equals(`0)" /> метод. При переопределении <see cref="M:System.Object.Equals(System.Object)" />, переопределенная реализация называется также вызовы статического <see langword="Equals(System.Object, System.Object)" /> метод в классе. Кроме того, необходимо перегрузить <see langword="op_Equality" /> и <see langword="op_Inequality" /> операторы. Это гарантирует, что все тесты на равенство получения согласованных результатов.  
  
 <block subset="none" type="note"><para>  
 Сведения о переопределении <see cref="M:System.Object.Equals(System.Object)" />, в разделе <see cref="M:System.Object.Equals(System.Object)" /> статьи.  
  
</para></block>  
  
 Для типа значения всегда должны реализовывать <see cref="T:System.IEquatable`1" /> и Переопределите <see cref="M:System.Object.Equals(System.Object)" /> для повышения производительности. <see cref="M:System.Object.Equals(System.Object)" /> поля типов значений и использует отражение для сравнения двух значений на равенство. Обе реализации <see cref="M:System.IEquatable`1.Equals(`0)" /> и переопределенный <see cref="M:System.Object.Equals(System.Object)" /> должен возвращать согласованные результаты.  
  
 Если вы реализуете <see cref="T:System.IEquatable`1" />, также требуется реализовать <see cref="T:System.IComparable`1" /> Если можно упорядочить или сортировки экземпляров типа. Если тип реализует <see cref="T:System.IComparable`1" />, почти всегда также реализовать <see cref="T:System.IEquatable`1" />.</para>
      <para>Обратите внимание, что некоторые макеты тип поддерживает отношение заказа, когда равенство может отличаться от порядка сортировки отношение. Рассмотрим `Person` класса, где можно отсортировать в алфавитном порядке. Два человека, с тем же именем сортировки одинаковыми, но не тот же пользователь.</para>
    </block>
    <altmember cref="T:System.IComparable`1" />
    <altmember cref="T:System.IComparable" />
  </Docs>
  <Members>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (T other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(!T other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IEquatable`1.Equals(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(T other);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="T" />
      </Parameters>
      <Docs>
        <param name="other">Объект, который требуется сравнить с данным объектом.</param>
        <summary>Указывает, эквивалентен ли текущий объект другому объекту того же типа.</summary>
        <returns>
          <see langword="true" />, если текущий объект эквивалентен параметру <paramref name="other" />, в противном случае — <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Реализация <xref:System.IEquatable%601.Equals%2A> метод предназначен для проверки на равенство с другим объектом типа `T`, совпадает с типом текущего объекта. <xref:System.IEquatable%601.Equals(%600)> Метод вызывается в следующих случаях:  
  
-   Когда `Equals` вызывается метод и `other` аргумент является строго типизированный объект типа `T`. (Если `other` не относится к типу `T`, базовый <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> вызывается метод. Из двух методов <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> предлагает немного более высокую производительность.)  
  
-   При вызове методов поиска числа объектов универсальной коллекции. Ниже приведены некоторые из этих типов и их методов:  
  
    -   Некоторые перегрузки универсального <xref:System.Array.BinarySearch%2A> метод.  
  
    -   Методы поиска <xref:System.Collections.Generic.List%601> класса, включая <xref:System.Collections.Generic.List%601.Contains%28%600%29?displayProperty=nameWithType>, <xref:System.Collections.Generic.List%601.IndexOf%2A?displayProperty=nameWithType>, <xref:System.Collections.Generic.List%601.LastIndexOf%2A?displayProperty=nameWithType>, и <xref:System.Collections.Generic.List%601.Remove%2A?displayProperty=nameWithType>.  
  
    -   Методы поиска <xref:System.Collections.Generic.Dictionary%602> класса, включая <xref:System.Collections.Generic.Dictionary%602.ContainsKey%2A> и <xref:System.Collections.Generic.IDictionary%602.Remove%2A>.  
  
    -   Методы поиска универсального <xref:System.Collections.Generic.LinkedList%601> класса, включая <xref:System.Collections.Generic.LinkedList%601.Contains%2A?displayProperty=nameWithType> и <xref:System.Collections.Generic.LinkedList%601.Remove%2A>.  
  
 Другими словами, чтобы обработать возможность сохранения объектов класса в массиве или универсальной коллекции объектов, рекомендуется реализовать <xref:System.IEquatable%601> , чтобы легко идентифицировать и управления этим состоянием объекта.  
  
 При реализации <xref:System.IEquatable%601.Equals%2A> метод, определяйте равенство типа, указанного аргументом универсального типа. Например, если используется аргумент типа <xref:System.Int32>, определяйте равенство сравнения двух 32-разрядных целых чисел со знаком.  
  
   
  
## Examples  
 Следующий пример показывает, частичная реализация `Person` класс, реализующий <xref:System.IEquatable%601> и имеет два свойства `LastName` и `SSN`. <xref:System.IEquatable%601.Equals%2A> Возвращает `True` Если `SSN` свойства двух `Person` объектов является одинаковым; в противном случае он возвращает `False`.  
  
 [!code-csharp[System.GenericIEquatable.Equals#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/cs/EqualsEx2.cs#3)]
 [!code-vb[System.GenericIEquatable.Equals#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/vb/EqualsEx2.vb#3)]  
  
 `Person` объекты можно хранить в <xref:System.Collections.Generic.List%601> объекта и можно определить по `Contains` метода, как показано в следующем примере.  
  
 [!code-csharp[System.GenericIEquatable.Equals#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/cs/Snippet12.cs#12)]
 [!code-vb[System.GenericIEquatable.Equals#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/vb/Snippet12.vb#12)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Если вы реализуете <see cref="M:System.IEquatable`1.Equals(`0)" />, также должны переопределять реализацию базового класса <see cref="M:System.Object.Equals(System.Object)" /> и <see cref="M:System.Object.GetHashCode" /> , чтобы их поведение согласуется со спецификацией <see cref="M:System.IEquatable`1.Equals(`0)" /> метод. При переопределении <see cref="M:System.Object.Equals(System.Object)" />, переопределенная реализация называется также вызовы статического <see langword="Equals(System.Object, System.Object)" /> метод в классе. Кроме того, необходимо перегрузить <see langword="op_Equality" /> и <see langword="op_Inequality" /> операторы. Это гарантирует, что все тесты на равенство возвращать согласованные результаты, что показано в примере.</para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>