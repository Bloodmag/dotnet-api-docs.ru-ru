<Type Name="IObserver&lt;T&gt;" FullName="System.IObserver&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="037ec43b158ed4f376dcec66500c3afe0577823e" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36430992" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IObserver&lt;in T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IObserver`1&lt;- T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.IObserver`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IObserver(Of In T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IObserver" />
  <TypeSignature Language="F#" Value="type IObserver&lt;'T&gt; = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T">Объект, предоставляющий сведения об уведомлениях.</typeparam>
    <summary>Предоставляет механизм для получения push-уведомлений.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IObserver%601> И <xref:System.IObservable%601> интерфейсы предоставляют универсальный механизм для Push-уведомлений, также известные как шаблон разработки наблюдателя. <xref:System.IObservable%601> Интерфейс представляет класс, который отправляет уведомления (поставщик); <xref:System.IObserver%601> интерфейс представляет класс, который получит их (наблюдатель). `T` Представляет класс, предоставляющий сведения об уведомлениях.  
  
 <xref:System.IObserver%601> Упорядочивает реализацию для получения уведомлений от поставщика ( <xref:System.IObservable%601> реализация), передав экземпляр самого себя для поставщика <xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType> метод. Этот метод возвращает <xref:System.IDisposable> объект, который может использоваться для отмены подписки на наблюдатель, прежде чем поставщик завершения отправки уведомлений.  
  
 <xref:System.IObserver%601> Определяет следующие три метода, которые Наблюдатель должен реализовывать интерфейс:  
  
-   <xref:System.IObserver%601.OnNext%2A> Метод, который обычно вызывается поставщиком для предоставления наблюдателю новые данные или сведениями о состоянии.  
  
-   <xref:System.IObserver%601.OnError%2A> Метод, который обычно вызывается поставщиком для указания, что данные являются недоступными, недоступен или поврежден, или что у поставщика возникли другие ошибки.  
  
-   <xref:System.IObserver%601.OnCompleted%2A> Метод, который обычно вызывается поставщиком для указания, что завершена отправка уведомления наблюдателям.  
  
   
  
## Examples  
 В следующем примере шаблон разработки наблюдателя. Он определяет `Location` класс, который содержит сведения о широте и долготе.  
  
 [!code-csharp[System.IObserver.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/provider.cs#5)]
 [!code-vb[System.IObserver.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/provider.vb#5)]  
  
 `LocationReporter` Класс предоставляет <xref:System.IObserver%601> реализации. В нем отображаются данные о текущем расположении на консоль. Включает его конструктор `name` параметра, который позволяет `LocationReporter` экземпляра для самоидентификации выходные строки. Он также включает `Subscribe` метод, который инкапсулирует вызов поставщика <xref:System.IObservable%601.Subscribe%2A> метод. Это позволяет назначить возвращаемый метод <xref:System.IDisposable> ссылку в закрытой переменной. `LocationReporter` Класс также содержит `Unsubscribe` метод, который вызывает <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> объект, возвращенный методом <xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType> метод. В следующем коде определяется `LocationReporter` класса.  
  
 [!code-csharp[System.IObserver.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/observer.cs#8)]
 [!code-vb[System.IObserver.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/observer.vb#8)]  
  
 `LocationTracker` Класс предоставляет <xref:System.IObservable%601> реализации. Его `TrackLocation` методу передается значение NULL `Location` объект, содержащий данные широты и долготы. Если `Location` значение не `null`, `TrackLocation` вызовы метода <xref:System.IObserver%601.OnNext%2A> метод каждого наблюдателя.  
  
 [!code-csharp[System.IObserver.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/provider.cs#6)]
 [!code-vb[System.IObserver.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/provider.vb#6)]  
  
 Если `Location` значение `null`, `TrackLocation` метод создает `LocationNotFoundException` объекта, как показано в следующем примере. Затем он вызывает каждого наблюдателя <xref:System.IObserver%601.OnError%2A> метод и передает его `LocationNotFoundException` объекта. Обратите внимание, что `LocationNotFoundException` является производным от <xref:System.Exception> , но не добавляет новые члены.  
  
 [!code-csharp[System.IObserver.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/provider.cs#7)]
 [!code-vb[System.IObserver.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/provider.vb#7)]  
  
 Наблюдатели регистрируются для получения уведомлений от `TrackLocation` , вызывая его <xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType> метод, который назначает ссылку на объект наблюдателя закрытый универсальный <xref:System.Collections.Generic.List%601> объекта. Метод возвращает `Unsubscriber` объекта, имеющего <xref:System.IDisposable> реализацию, позволяющую наблюдателям прекратить получение уведомлений. `LocationTracker` Класс также содержит `EndTransmission` метод. При дальнейших расположение данные недоступны, этот метод вызывает каждого наблюдателя <xref:System.IObserver%601.OnCompleted%2A> метода и затем очищает внутренний список наблюдателей.  
  
 Следующий код создает экземпляр поставщика и наблюдателя.  
  
 [!code-csharp[System.IObserver.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/program.cs#9)]
 [!code-vb[System.IObserver.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/module1.vb#9)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IObservable`1" />
  </Docs>
  <Members>
    <Member MemberName="OnCompleted">
      <MemberSignature Language="C#" Value="public void OnCompleted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnCompleted() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IObserver`1.OnCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnCompleted ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OnCompleted();" />
      <MemberSignature Language="F#" Value="abstract member OnCompleted : unit -&gt; unit" Usage="iObserver.OnCompleted " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Уведомляет наблюдателя о том, что поставщик завершил отправку push-уведомлений.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При наблюдателя <xref:System.IObserver%601.OnCompleted%2A> реализация вызывается <xref:System.IObserver%601.OnCompleted%2A> можно при необходимости вызовите метод <xref:System.IDisposable.Dispose%2A> метод <xref:System.IDisposable> объект, который был возвращен наблюдателю при его вызове <xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType> метода.  
  
   
  
## Examples  
 Следующий пример предоставляет реализацию <xref:System.IObserver%601.OnCompleted%2A> метод в широты и долготы, отслеживание приложений. Метод просто сообщает, что доступны дополнительные данные и вызывает поставщика <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> реализации. В разделе Пример <xref:System.IObserver%601> разделе полный пример.  
  
 [!code-csharp[System.IObserver.Class#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/observer.cs#11)]
 [!code-vb[System.IObserver.Class#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/observer.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnError">
      <MemberSignature Language="C#" Value="public void OnError (Exception error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnError(class System.Exception error) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IObserver`1.OnError(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnError (error As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OnError(Exception ^ error);" />
      <MemberSignature Language="F#" Value="abstract member OnError : Exception -&gt; unit" Usage="iObserver.OnError error" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="error" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="error">Объект, который предоставляет дополнительную информацию об ошибке.</param>
        <summary>Уведомляет наблюдателя о том, что у поставщика возникла ошибка.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Несмотря на то что `error` — это объект, который является производным от <xref:System.Exception?displayProperty=nameWithType>, он не обязательно представляет исключение, создаваемое поставщиком. Он также может представлять условие обычной или ожидаемой ошибки, например, данные, отсутствует или недоступен. <xref:System.IObserver%601.OnError%2A> Метод следует рассматривать как информационное и поставщик не должен ожидать наблюдателя, чтобы обеспечить обработку ошибок.  
  
   
  
## Examples  
 Следующий пример предоставляет реализацию <xref:System.IObserver%601.OnError%2A> метод в широты и долготы, отслеживание приложений. Метод просто сообщает, что данных сейчас недоступна; не делает использование <xref:System.Exception> объекта, переданного в качестве параметра. В разделе Пример <xref:System.IObserver%601> разделе полный пример.  
  
 [!code-csharp[System.IObserver.Class#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/observer.cs#10)]
 [!code-vb[System.IObserver.Class#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/observer.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnNext">
      <MemberSignature Language="C#" Value="public void OnNext (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnNext(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IObserver`1.OnNext(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnNext (value As T)" />
      <MemberSignature Language="F#" Value="abstract member OnNext : 'T -&gt; unit" Usage="iObserver.OnNext value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value">Текущие сведения об уведомлениях.</param>
        <summary>Предоставляет наблюдателю новые данные.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 После наблюдателя запросил поставщика <xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType> метод, поставщик вызывает наблюдателя <xref:System.IObserver%601.OnNext%2A> метод предоставлять уведомления.  
  
   
  
## Examples  
 Следующий пример предоставляет реализацию <xref:System.IObserver%601.OnNext%2A> метод в широты и долготы, отслеживание приложений. В разделе Пример <xref:System.IObserver%601> разделе полный пример.  
  
 [!code-csharp[System.IObserver.Class#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/observer.cs#12)]
 [!code-vb[System.IObserver.Class#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/observer.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>