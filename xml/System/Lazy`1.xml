<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Lazy`1.xml" source-language="en-US" target-language="ru-RU">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5ad53c03faf661b5a698d5ef0c4fcd9d0451bbc14.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ad53c03faf661b5a698d5ef0c4fcd9d0451bbc14</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>The type of object that is being lazily initialized.</source>
          <target state="translated">Тип объекта с отложенной инициализацией.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Lazy`1">
          <source>Provides support for lazy initialization.</source>
          <target state="translated">Обеспечивает поддержку отложенной инициализации.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>Use lazy initialization to defer the creation of a large or resource-intensive object, or the execution of a resource-intensive task, particularly when such creation or execution might not occur during the lifetime of the program.</source>
          <target state="translated">Использование отложенной инициализации, чтобы отложить создание большого или ресурсоемкого объекта или выполнения задачи много ресурсов, особенно в том случае, если такие создания или выполнения могут не выполняться в течение срока жизни программы.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>To prepare for lazy initialization, you create an instance of <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>.</source>
          <target state="translated">Чтобы подготовить отложенной инициализации, создать экземпляр <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>The type argument of the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> object that you create specifies the type of the object that you want to initialize lazily.</source>
          <target state="translated">Аргумент типа <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> , созданный тип объекта, который требуется инициализировать неактивно.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>The constructor that you use to create the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> object determines the characteristics of the initialization.</source>
          <target state="translated">Конструктор, который используется для создания <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> объекта определяет характеристики инициализации.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>Lazy initialization occurs the first time the <ph id="ph1">&lt;xref:System.Lazy%601.Value%2A?displayProperty=nameWithType&gt;</ph> property is accessed.</source>
          <target state="translated">Отложенная инициализация производится при первом обращении к свойству <ph id="ph1">&lt;xref:System.Lazy%601.Value%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>In most cases, choosing a constructor depends on your answers to two questions:</source>
          <target state="translated">В большинстве случаев выбор конструктор зависит ответы на два вопроса:</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>Will the lazily initialized object be accessed from more than one thread?</source>
          <target state="translated">Объект с отложенной инициализацией будут доступны из нескольких потоков?</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>If so, the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> object might create it on any thread.</source>
          <target state="translated">В этом случае <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> объект может создать в любом потоке.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>You can use one of the simple constructors whose default behavior is to create a thread-safe <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> object, so that only one instance of the lazily instantiated object is created no matter how many threads try to access it.</source>
          <target state="translated">Можно использовать один из конструкторов простых, поведение по умолчанию является создание поточно ориентированного <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> объекта, так что только один экземпляр неактивно экземпляр объекта создается независимо от того, сколько потоков пытаются получить доступ к его.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>To create a <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> object that is not thread safe, you must use a constructor that enables you to specify no thread safety.</source>
          <target state="translated">Для создания <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> объекта, который не является потокобезопасным, необходимо использовать конструктор, который позволяет указать без потокобезопасности.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>Making the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> object thread safe does not protect the lazily initialized object.</source>
          <target state="translated">Делая <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> объекта потокобезопасным не защищает неактивно инициализированный объект.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>If multiple threads can access the lazily initialized object, you must make its properties and methods safe for multithreaded access.</source>
          <target state="translated">Если несколько потоков могут получить доступ к объект с отложенной инициализацией, необходимо его свойства и методы безопасными для многопоточного доступа.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>Does lazy initialization require a lot of code, or does the lazily initialized object have a default constructor that does everything you need and doesn't throw exceptions?</source>
          <target state="translated">Отложенная инициализация требует большого объема кода или отложенной инициализацией объект имеет конструктор по умолчанию, который выполняет все, что требуется и не создают исключения?</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>If you need to write initialization code or if exceptions need to be handled, use one of the constructors that takes a factory method.</source>
          <target state="translated">Если необходимо написать код инициализации или если необходимо обрабатывать исключения, используйте один из конструкторов, принимающих фабричный метод.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>Write your initialization code in the factory method.</source>
          <target state="translated">Напишите код инициализации в метод фабрики.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>The following table shows which constructor to choose, based on these two factors:</source>
          <target state="translated">В следующей таблице приведены, чтобы выбрать, какой конструктор на основе этих двух факторов:</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>Object will be accessed by</source>
          <target state="translated">Объект, которые будут доступны для</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>If no initialization code is required (default constructor), use</source>
          <target state="translated">Если не требуется никакого кода инициализации (конструктор по умолчанию), используйте</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>If initialization code is required, use</source>
          <target state="translated">Если код инициализации не требуется, используйте</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>Multiple threads</source>
          <target state="translated">Несколько потоков</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>One thread</source>
          <target state="translated">Один поток</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source><ph id="ph1">&lt;xref:System.Lazy%601.%23ctor%28System.Boolean%29&gt;</ph> with <ph id="ph2">`isThreadSafe`</ph> set to <ph id="ph3">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Lazy%601.%23ctor%28System.Boolean%29&gt;</ph> с <ph id="ph2">`isThreadSafe`</ph> значение <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source><ph id="ph1">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29&gt;</ph> with <ph id="ph2">`isThreadSafe`</ph> set to <ph id="ph3">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29&gt;</ph> с <ph id="ph2">`isThreadSafe`</ph> значение <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>You can use a lambda expression to specify the factory method.</source>
          <target state="translated">Лямбда-выражения можно использовать для указания метода фабрики.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>This keeps all the initialization code in one place.</source>
          <target state="translated">В этом случае всех кодов инициализации в одном месте.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>The lambda expression captures the context, including any arguments you pass to the lazily initialized object's constructor.</source>
          <target state="translated">Лямбда-выражение перехватывает контекст, включая все аргументы, передаваемые конструктору неактивно инициализированный объект.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source><bpt id="p1">**</bpt>Exception caching<ept id="p1">**</ept> When you use factory methods, exceptions are cached.</source>
          <target state="translated"><bpt id="p1">**</bpt>Кэширование исключений<ept id="p1">**</ept> кэшируются при использовании фабричные методы исключения.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>That is, if the factory method throws an exception the first time a thread tries to access the <ph id="ph1">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph> object, the same exception is thrown on every subsequent attempt.</source>
          <target state="translated">То есть если фабричный метод создает исключение времени исключения первый поток пытается получить доступ к <ph id="ph1">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> свойство <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph> объекта же исключение создается для каждой последующей попытки.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>This ensures that every call to the <ph id="ph1">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> property produces the same result and avoids subtle errors that might arise if different threads get different results.</source>
          <target state="translated">Это гарантирует, что каждый вызов <ph id="ph1">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> свойство дает тот же результат и позволяет избежать незначительные ошибки, которые могут возникнуть при различных потоках получить разные результаты.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>The <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> stands in for an actual <ph id="ph2">`T`</ph> that otherwise would have been initialized at some earlier point, usually during startup.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> Заменяет фактический <ph id="ph2">`T`</ph> , в противном случае будут инициализированы на более раннем этапе, обычно во время запуска.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>A failure at that earlier point is usually fatal.</source>
          <target state="translated">Сбой на этом раннем этапе обычно неустранимой.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>If there is a potential for a recoverable failure, we recommend that you build the retry logic into the initialization routine (in this case, the factory method), just as you would if you weren’t using lazy initialization.</source>
          <target state="translated">Если существует вероятность возникновения сбоя невозможным, рекомендуется построить логику повторных попыток в программу инициализации (в данном случае фабричный метод), так же, как если не использовали отложенной инициализации.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source><bpt id="p1">**</bpt>Alternative to locking<ept id="p1">**</ept> In certain situations, you might want to avoid the overhead of the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> object's default locking behavior.</source>
          <target state="translated"><bpt id="p1">**</bpt>Вместо блокировки<ept id="p1">**</ept> в некоторых случаях может потребоваться избежать дополнительной нагрузки <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> объекта по умолчанию режим блокировки.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>In rare situations, there might be a potential for deadlocks.</source>
          <target state="translated">В редких случаях может быть потенциальный риск взаимоблокировки.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>In such cases, you can use the <ph id="ph1">&lt;xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29&gt;</ph> or <ph id="ph2">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29&gt;</ph> constructor, and specify <ph id="ph3">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">В таких случаях можно использовать <ph id="ph1">&lt;xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29&gt;</ph> или <ph id="ph2">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29&gt;</ph> конструктор и укажите <ph id="ph3">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>This enables the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> object to create a copy of the lazily initialized object on each of several threads if the threads call the <ph id="ph2">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> property simultaneously.</source>
          <target state="translated">Это позволяет <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> объект для создания копии объекта отложенной инициализацией на каждом из нескольких потоков, если потоки вызова <ph id="ph2">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> свойство одновременно.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>The <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> object ensures that all threads use the same instance of the lazily initialized object and discards the instances that are not used.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> Объект гарантирует, что все потоки использовать тот же экземпляр объекта с отложенной инициализацией и удаляет экземпляры, которые не используются.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>Thus, the cost of reducing the locking overhead is that your program might sometimes create and discard extra copies of an expensive object.</source>
          <target state="translated">Таким образом сокращение расходов на блокировку обходится программа может иногда создать и удалить лишние копии ресурсоемкий объект.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>In most cases, this is unlikely.</source>
          <target state="translated">В большинстве случаев это маловероятно.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>The examples for the <ph id="ph1">&lt;xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29&gt;</ph> and <ph id="ph2">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29&gt;</ph> constructors demonstrate this behavior.</source>
          <target state="translated">В примерах для <ph id="ph1">&lt;xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29&gt;</ph> и <ph id="ph2">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29&gt;</ph> конструкторы демонстрируют это поведение.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>When you specify <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType&gt;</ph>, exceptions are never cached, even if you specify a factory method.</source>
          <target state="translated">При указании <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType&gt;</ph>, исключения не кэшируются, даже если указан метод фабрики.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source><bpt id="p1">**</bpt>Equivalent constructors<ept id="p1">**</ept> In addition to enabling the use of <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType&gt;</ph>, the <ph id="ph2">&lt;xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29&gt;</ph> and <ph id="ph3">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29&gt;</ph> constructors can duplicate the functionality of the other constructors.</source>
          <target state="translated"><bpt id="p1">**</bpt>Эквивалент конструкторы<ept id="p1">**</ept> помимо включения использование <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29&gt;</ph> и <ph id="ph3">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29&gt;</ph> конструкторы могут дублировать функции других конструкторов.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>The following table shows the parameter values that produce equivalent behavior.</source>
          <target state="translated">В следующей таблице показаны значения параметров, возвращающих эквивалентное поведение.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>To create a <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> object that is</source>
          <target state="translated">Для создания <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> объект, который отсутствует</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>For constructors that have a <ph id="ph1">`LazyThreadSafetyMode`</ph> <ph id="ph2">`mode`</ph> parameter, set <ph id="ph3">`mode`</ph> to</source>
          <target state="translated">Для конструкторов, которые имеют <ph id="ph1">`LazyThreadSafetyMode`</ph> <ph id="ph2">`mode`</ph> задайте <ph id="ph3">`mode`</ph> для</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>For constructors that have a Boolean <ph id="ph1">`isThreadSafe`</ph> parameter, set <ph id="ph2">`isThreadSafe`</ph> to</source>
          <target state="translated">Для конструкторов, имеющих значение типа Boolean <ph id="ph1">`isThreadSafe`</ph> задайте <ph id="ph2">`isThreadSafe`</ph> для</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>For constructors with no thread safety parameters</source>
          <target state="translated">Для конструкторов без параметров безопасности потока</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>Fully thread safe; uses locking to ensure that only one thread initializes the value.</source>
          <target state="translated">Полностью потокобезопасным; использует блокировку, чтобы убедиться, что только один поток инициализирует значение.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>All such constructors are fully thread safe.</source>
          <target state="translated">Все конструкторы полностью являются потокобезопасными.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>Not thread safe.</source>
          <target state="translated">Не потокобезопасным.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>Not applicable.</source>
          <target state="translated">Неприменимо.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>Fully thread safe; threads race to initialize the value.</source>
          <target state="translated">Полностью потокобезопасным; состояние гонки потоков для инициализации значения.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>Not applicable.</source>
          <target state="translated">Неприменимо.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>Not applicable.</source>
          <target state="translated">Неприменимо.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source><bpt id="p1">**</bpt>Other capabilities<ept id="p1">**</ept> For information about the use of <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> with thread-static fields, or as the backing store for properties, see <bpt id="p2">[</bpt>Lazy Initialization<ept id="p2">](~/docs/framework/performance/lazy-initialization.md)</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>Другие возможности<ept id="p1">**</ept> сведения об использовании <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> с поля статического потока, а также резервным хранилищем для свойства, в разделе <bpt id="p2">[</bpt>отложенной инициализации<ept id="p2">](~/docs/framework/performance/lazy-initialization.md)</ept>.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>The following example demonstrates the use of the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> class to provide lazy initialization with access from multiple threads.</source>
          <target state="translated">В следующем примере показано использование <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> класса для выполнения отложенной инициализации доступ из нескольких потоков.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29&gt;</ph> constructor.</source>
          <target state="translated">В этом примере <ph id="ph1">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29&gt;</ph> конструктор.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>It also demonstrates the use of the <ph id="ph1">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29&gt;</ph> constructor (specifying <ph id="ph2">`true`</ph> for <ph id="ph3">`isThreadSafe`</ph>) and the <ph id="ph4">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29&gt;</ph> constructor (specifying <ph id="ph5">&lt;xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType&gt;</ph> for <ph id="ph6">`mode`</ph>).</source>
          <target state="translated">Он также демонстрирует использование <ph id="ph1">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29&gt;</ph> конструктор (указание <ph id="ph2">`true`</ph> для <ph id="ph3">`isThreadSafe`</ph>) и <ph id="ph4">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29&gt;</ph> конструктор (указание <ph id="ph5">&lt;xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType&gt;</ph> для <ph id="ph6">`mode`</ph>).</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>To switch to a different constructor, just change which constructors are commented out.</source>
          <target state="translated">Чтобы переключиться в другой конструктор, замените закомментированы конструкторов.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>For an example that demonstrates exception caching using the same constructors, see the <ph id="ph1">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29&gt;</ph> constructor.</source>
          <target state="translated">Пример, демонстрирующий исключение кэширования с помощью того же конструкторов. в разделе <ph id="ph1">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29&gt;</ph> конструктор.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>The example defines a <ph id="ph1">`LargeObject`</ph> class that will be initialized lazily by one of several threads.</source>
          <target state="translated">В этом примере определяется класс <ph id="ph1">`LargeObject`</ph>, для которого будет выполняться отложенная инициализация одним из нескольких потоков.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>The four key sections of code illustrate the creation of the initializer, the factory method, the actual initialization, and the constructor of the <ph id="ph1">`LargeObject`</ph> class, which displays a message when the object is created.</source>
          <target state="translated">Четыре ключевых раздела кода показано создание инициализатор, метод фабрики, фактическую инициализацию и конструктор <ph id="ph1">`LargeObject`</ph> класс, который выводит сообщение при создании объекта.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>At the beginning of the <ph id="ph1">`Main`</ph> method, the example creates the thread-safe lazy initializer for <ph id="ph2">`LargeObject`</ph>:</source>
          <target state="translated">В начале метода <ph id="ph1">`Main`</ph> в этом примере создается потокобезопасный отложенный инициализатор для класса <ph id="ph2">`LargeObject`</ph>:</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>The factory method shows the creation of the object, with a placeholder for further initialization:</source>
          <target state="translated">Фабричный метод показано создание объекта, с заполнителем для дальнейшей инициализации:</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>Note that the first two code sections could be combined by using a lambda function, as shown here:</source>
          <target state="translated">Обратите внимание, что разделов первые два кода может комбинироваться с помощью лямбда-функции, как показано ниже:</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>The example pauses, to indicate that an indeterminate period may elapse before lazy initialization occurs.</source>
          <target state="translated">В примере приостанавливается, чтобы указать, что неопределенное может пройти, прежде чем отложенной инициализации.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>When you press the <bpt id="p1">**</bpt>Enter<ept id="p1">**</ept> key, the example creates and starts three threads.</source>
          <target state="translated">При нажатии клавиши <bpt id="p1">**</bpt>ввод<ept id="p1">**</ept> ключа, в примере создается и запускается три потока.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>The <ph id="ph1">`ThreadProc`</ph> method that's used by all three threads calls the <ph id="ph2">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> property.</source>
          <target state="translated"><ph id="ph1">`ThreadProc`</ph> Метод, используемый на всех трех потоков вызовы <ph id="ph2">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> свойство.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>The first time this happens, the <ph id="ph1">`LargeObject`</ph> instance is created:</source>
          <target state="translated">Это происходит при первом <ph id="ph1">`LargeObject`</ph> создается экземпляр:</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>The constructor of the <ph id="ph1">`LargeObject`</ph> class, which includes the last key section of code, displays a message and records the identity of the initializing thread.</source>
          <target state="translated">Конструктор <ph id="ph1">`LargeObject`</ph> класса, содержащего последний ключа раздела кода, отображается сообщение, а также записывает идентификации инициализации потока.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>The output from the program appears at the end of the full code listing.</source>
          <target state="translated">Выходные данные программы отображается в конце полный листинг кода.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>For simplicity, this example uses a global instance of <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>, and all the methods are <ph id="ph2">`static`</ph> (<ph id="ph3">`Shared`</ph> in Visual Basic).</source>
          <target state="translated">Для простоты в этом примере используется глобальный экземпляр класса <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>, а все методы объявлены как <ph id="ph2">`static`</ph> (<ph id="ph3">`Shared`</ph> в Visual Basic).</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>These are not requirements for the use of lazy initialization.</source>
          <target state="translated">Это не является обязательными требованиями для использования отложенной инициализации.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>By default, all public and protected members of the <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> class are thread safe and may be used concurrently from multiple threads.</source>
          <target state="translated">По умолчанию все открытые и защищенные члены <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> класса являются потокобезопасными и могут быть использованы одновременно из нескольких потоков.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>These thread-safety guarantees may be removed optionally and per instance, using parameters to the type's constructors.</source>
          <target state="translated">Эти потокобезопасности могут быть удалены, при необходимости и экземпляра, используя параметры для конструкторов типа.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="T:System.Lazy`1">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> class.</source>
          <target state="translated">Инициализирует новый экземпляр класса <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> class.</source>
          <target state="translated">Инициализирует новый экземпляр класса <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.#ctor">
          <source>When lazy initialization occurs, the default constructor of the target type is used.</source>
          <target state="translated">При отложенной инициализации используется конструктор по умолчанию для целевого типа.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor">
          <source>An instance that is created with this constructor may be used concurrently from multiple threads.</source>
          <target state="translated">Экземпляр, который создается с помощью этого конструктора может использоваться одновременно несколькими потоками.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor">
          <source>The thread safety mode of a <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance that is initialized with this constructor is <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Потокобезопасный режим из <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> экземпляр, который инициализируется этим конструктором <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor">
          <source>The thread safety mode describes the behavior when multiple threads try to initialize the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance.</source>
          <target state="translated">Режим потокобезопасности описывает поведение, когда несколько потоков пытаются инициализировать <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> экземпляра.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor">
          <source>A <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance that is created with this constructor does not cache exceptions.</source>
          <target state="translated">Объект <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> , созданного с помощью этого конструктора не кэширует исключения.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> class or the <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType&gt;</ph> enumeration.</source>
          <target state="translated">Дополнительные сведения см. в описании класса <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> или перечисления <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor">
          <source>The following example demonstrates the use of this constructor.</source>
          <target state="translated">В следующем примере показано использование этого конструктора.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor">
          <source>It also illustrates the use of the <ph id="ph1">&lt;xref:System.Lazy%601.%23ctor%28System.Boolean%29&gt;</ph> constructor (specifying <ph id="ph2">`true`</ph> for <ph id="ph3">`isThreadSafe`</ph>) and the <ph id="ph4">&lt;xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29&gt;</ph> constructor (specifying <ph id="ph5">&lt;xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType&gt;</ph> for <ph id="ph6">`mode`</ph>).</source>
          <target state="translated">Он также демонстрирует использование <ph id="ph1">&lt;xref:System.Lazy%601.%23ctor%28System.Boolean%29&gt;</ph> конструктор (указание <ph id="ph2">`true`</ph> для <ph id="ph3">`isThreadSafe`</ph>) и <ph id="ph4">&lt;xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29&gt;</ph> конструктор (указание <ph id="ph5">&lt;xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType&gt;</ph> для <ph id="ph6">`mode`</ph>).</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor">
          <source>To switch to a different constructor, just change which constructors are commented out.</source>
          <target state="translated">Чтобы переключиться в другой конструктор, замените закомментированы конструкторов.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor">
          <source>The example defines a <ph id="ph1">`LargeObject`</ph> class that will be initialized lazily by one of several threads.</source>
          <target state="translated">В этом примере определяется класс <ph id="ph1">`LargeObject`</ph>, для которого будет выполняться отложенная инициализация одним из нескольких потоков.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor">
          <source>The two key lines of code in this example are the creation of the initializer and the actual initialization.</source>
          <target state="translated">Два ключа строки кода в этом примере — это создание инициализатор и фактическую инициализацию.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor">
          <source>At the beginning of the <ph id="ph1">`Main`</ph> method, the example creates the thread-safe lazy initializer for <ph id="ph2">`LargeObject`</ph>:</source>
          <target state="translated">В начале метода <ph id="ph1">`Main`</ph> в этом примере создается потокобезопасный отложенный инициализатор для класса <ph id="ph2">`LargeObject`</ph>:</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor">
          <source>The example creates and starts three threads that block on a <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> object, so that the example can release the threads all at once.</source>
          <target state="translated">В примере создается и запускается три потока, блокирующие на <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> объекта, чтобы пример можно освободить потоков за один раз.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor">
          <source>The <ph id="ph1">`ThreadProc`</ph> method that's used by all three threads calls the <ph id="ph2">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> property to get the <ph id="ph3">`LargeObject`</ph> instance:</source>
          <target state="translated"><ph id="ph1">`ThreadProc`</ph> Метод, используемый на всех трех потоков вызовы <ph id="ph2">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> свойства <ph id="ph3">`LargeObject`</ph> экземпляр:</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor">
          <source>The <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> class provides locking, so that only one thread is allowed to create the <ph id="ph2">`LargeObject`</ph> instance.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> Класс предоставляет блокировку, так что только один поток может создать <ph id="ph2">`LargeObject`</ph> экземпляра.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor">
          <source>The example demonstrates that the other threads all get the same instance.</source>
          <target state="translated">В примере показано, что все другие потоки получить тот же экземпляр.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor">
          <source>For simplicity, this example uses a global instance of <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>, and all the methods are <ph id="ph2">`static`</ph> (<ph id="ph3">`Shared`</ph> in Visual Basic).</source>
          <target state="translated">Для простоты в этом примере используется глобальный экземпляр класса <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>, а все методы объявлены как <ph id="ph2">`static`</ph> (<ph id="ph3">`Shared`</ph> в Visual Basic).</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor">
          <source>These are not requirements for the use of lazy initialization.</source>
          <target state="translated">Это не является обязательными требованиями для использования отложенной инициализации.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.#ctor(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to make this instance usable concurrently by multiple threads; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to make the instance usable by only one thread at a time.</source>
          <target state="translated">Значение <ph id="ph1">&lt;see langword="true" /&gt;</ph>, если необходимо разрешить параллельное использование этого экземпляра несколькими потоками; значение <ph id="ph2">&lt;see langword="false" /&gt;</ph>, если необходимо разрешить одновременное использование этого экземпляра только одним потоком.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.#ctor(System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> class.</source>
          <target state="translated">Инициализирует новый экземпляр класса <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.#ctor(System.Boolean)">
          <source>When lazy initialization occurs, the default constructor of the target type and the specified initialization mode are used.</source>
          <target state="translated">При отложенной инициализации используется конструктор по умолчанию целевого типа и указанный режим инициализации.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Boolean)">
          <source>The thread safety mode of a <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance that is initialized with this constructor is <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType&gt;</ph> if <ph id="ph3">`isThreadSafe`</ph> is <ph id="ph4">`true`</ph>; otherwise, the mode is <ph id="ph5">&lt;xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Потокобезопасный режим из <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> экземпляр, который инициализируется этим конструктором <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType&gt;</ph> Если <ph id="ph3">`isThreadSafe`</ph> — <ph id="ph4">`true`</ph>; в противном случае используется режим <ph id="ph5">&lt;xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Boolean)">
          <source>The thread safety mode describes the behavior when multiple threads try to initialize the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance.</source>
          <target state="translated">Режим потокобезопасности описывает поведение, когда несколько потоков пытаются инициализировать <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> экземпляра.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Boolean)">
          <source>To specify the <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType&gt;</ph> mode, use the <ph id="ph2">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29&gt;</ph> or <ph id="ph3">&lt;xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29&gt;</ph> constructor.</source>
          <target state="translated">Чтобы указать <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType&gt;</ph> режиме, используйте <ph id="ph2">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29&gt;</ph> или <ph id="ph3">&lt;xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29&gt;</ph> конструктор.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Boolean)">
          <source>A <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance that is created with this constructor does not cache exceptions.</source>
          <target state="translated">Объект <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> , созданного с помощью этого конструктора не кэширует исключения.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Boolean)">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> class or the <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType&gt;</ph> enumeration.</source>
          <target state="translated">Дополнительные сведения см. в описании класса <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> или перечисления <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Boolean)">
          <source>The following example demonstrates the use of this constructor to create a lazy initializer that is not thread safe, for scenarios where all access to the lazily initialized object occurs on the same thread.</source>
          <target state="translated">В следующем примере показано использование этого конструктора для создания отложенный инициализатор, который не является потокобезопасным, для сценариев, где весь доступ к объекту с отложенной инициализацией происходит в том же потоке.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Boolean)">
          <source>It also demonstrates the use of the <ph id="ph1">&lt;xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29&gt;</ph> constructor (specifying <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType&gt;</ph> for <ph id="ph3">`mode`</ph>.</source>
          <target state="translated">Он также демонстрирует использование <ph id="ph1">&lt;xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29&gt;</ph> конструктор (указание <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType&gt;</ph> для <ph id="ph3">`mode`</ph>.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Boolean)">
          <source>To switch to a different constructor, just change which constructor is commented out.</source>
          <target state="translated">Чтобы переключиться в другой конструктор, замените закомментирован какой конструктор.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Boolean)">
          <source>For code that demonstrates how to use this constructor in multithreaded scenarios (specifying <ph id="ph1">`true`</ph> for <ph id="ph2">`isThreadSafe`</ph>), see the example for the <ph id="ph3">&lt;xref:System.Lazy%601.%23ctor&gt;</ph> constructor.</source>
          <target state="translated">Для кода, в котором показано, как использовать этот конструктор в сценариях с несколькими потоками (указание <ph id="ph1">`true`</ph> для <ph id="ph2">`isThreadSafe`</ph>), см. пример для <ph id="ph3">&lt;xref:System.Lazy%601.%23ctor&gt;</ph> конструктор.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Boolean)">
          <source>The example defines a <ph id="ph1">`LargeObject`</ph> class that will be initialized lazily.</source>
          <target state="translated">В примере определяется <ph id="ph1">`LargeObject`</ph> класс, который будет выполняться отложенная инициализация.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Boolean)">
          <source>In the <ph id="ph1">`Main`</ph> method, the example creates a <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph> instance and then pauses.</source>
          <target state="translated">В <ph id="ph1">`Main`</ph> метода, в примере создается <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph> экземпляра, а затем приостанавливает свою работу.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Boolean)">
          <source>When you press the <bpt id="p1">**</bpt>Enter<ept id="p1">**</ept> key, the example accesses the <ph id="ph1">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph> instance, which causes initialization to occur.</source>
          <target state="translated">При нажатии клавиши <bpt id="p1">**</bpt>ввод<ept id="p1">**</ept> ключа, пример обращается к <ph id="ph1">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> свойство <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph> экземпляра, который приводит к инициализации возникновения.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Boolean)">
          <source>The constructor of the <ph id="ph1">`LargeObject`</ph> class displays a console message.</source>
          <target state="translated">Конструктор <ph id="ph1">`LargeObject`</ph> класс отображает сообщения консоли.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Boolean)">
          <source>For simplicity, this example uses a global instance of <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>, and all the methods are <ph id="ph2">`static`</ph> (<ph id="ph3">`Shared`</ph> in Visual Basic).</source>
          <target state="translated">Для простоты в этом примере используется глобальный экземпляр класса <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>, а все методы объявлены как <ph id="ph2">`static`</ph> (<ph id="ph3">`Shared`</ph> в Visual Basic).</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Boolean)">
          <source>These are not requirements for the use of lazy initialization.</source>
          <target state="translated">Это не является обязательными требованиями для использования отложенной инициализации.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.#ctor(System.Func{`0})">
          <source>The delegate that is invoked to produce the lazily initialized value when it is needed.</source>
          <target state="translated">Делегат, вызываемый для создания значения с отложенной инициализацией при необходимости.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.#ctor(System.Func{`0})">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> class.</source>
          <target state="translated">Инициализирует новый экземпляр класса <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.#ctor(System.Func{`0})">
          <source>When lazy initialization occurs, the specified initialization function is used.</source>
          <target state="translated">Когда происходит отложенная инициализация, используется заданная функция инициализации.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0})">
          <source>An instance that is created with this constructor may be used concurrently from multiple threads.</source>
          <target state="translated">Экземпляр, который создается с помощью этого конструктора может использоваться одновременно несколькими потоками.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0})">
          <source>The thread safety mode of a <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance that is initialized with this constructor is <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Потокобезопасный режим из <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> экземпляр, который инициализируется этим конструктором <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0})">
          <source>The thread safety mode describes the behavior when multiple threads try to initialize the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance.</source>
          <target state="translated">Режим потокобезопасности описывает поведение, когда несколько потоков пытаются инициализировать <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> экземпляра.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0})">
          <source>Exceptions that are thrown by <ph id="ph1">`valueFactory`</ph> are cached.</source>
          <target state="translated">Исключения, вызываемые <ph id="ph1">`valueFactory`</ph> кэшируются.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0})">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> class or the <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType&gt;</ph> enumeration.</source>
          <target state="translated">Дополнительные сведения см. в описании класса <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> или перечисления <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0})">
          <source>The following example demonstrates the use of this constructor to provide lazy initialization with exception caching.</source>
          <target state="translated">В следующем примере показано использование этого конструктора для предоставления отложенной инициализации с кэшированием исключений.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0})">
          <source>It also demonstrates the use of the <ph id="ph1">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29&gt;</ph> constructor (specifying <ph id="ph2">`true`</ph> for <ph id="ph3">`isThreadSafe`</ph>) and the <ph id="ph4">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29&gt;</ph> constructor (specifying <ph id="ph5">&lt;xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType&gt;</ph> for <ph id="ph6">`mode`</ph>).</source>
          <target state="translated">Он также демонстрирует использование <ph id="ph1">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29&gt;</ph> конструктор (указание <ph id="ph2">`true`</ph> для <ph id="ph3">`isThreadSafe`</ph>) и <ph id="ph4">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29&gt;</ph> конструктор (указание <ph id="ph5">&lt;xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType&gt;</ph> для <ph id="ph6">`mode`</ph>).</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0})">
          <source>To switch to a different constructor, just change which constructors are commented out.</source>
          <target state="translated">Чтобы переключиться в другой конструктор, замените закомментированы конструкторов.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0})">
          <source>The example defines a <ph id="ph1">`LargeObject`</ph> class that will be initialized lazily by one of several threads.</source>
          <target state="translated">В этом примере определяется класс <ph id="ph1">`LargeObject`</ph>, для которого будет выполняться отложенная инициализация одним из нескольких потоков.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0})">
          <source>The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor of the <ph id="ph1">`LargeObject`</ph> class, which demonstrates exception caching.</source>
          <target state="translated">Три ключевых фрагменты кода показывают Создание инициализатор, фактическую инициализацию и конструктор <ph id="ph1">`LargeObject`</ph> класса, в котором показано кэширование исключений.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0})">
          <source>At the beginning of the <ph id="ph1">`Main`</ph> method, the example creates the thread-safe lazy initializer for <ph id="ph2">`LargeObject`</ph>:</source>
          <target state="translated">В начале метода <ph id="ph1">`Main`</ph> в этом примере создается потокобезопасный отложенный инициализатор для класса <ph id="ph2">`LargeObject`</ph>:</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0})">
          <source>The example creates and starts three threads.</source>
          <target state="translated">В примере создает и запускает три потока.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0})">
          <source>The <ph id="ph1">`ThreadProc`</ph> method that's used by all three threads calls the <ph id="ph2">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> property to get the <ph id="ph3">`LargeObject`</ph> instance:</source>
          <target state="translated"><ph id="ph1">`ThreadProc`</ph> Метод, используемый на всех трех потоков вызовы <ph id="ph2">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> свойства <ph id="ph3">`LargeObject`</ph> экземпляр:</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0})">
          <source>In the constructor of the <ph id="ph1">`LargeObject`</ph> class, the third key section of code throws an exception the first time a <ph id="ph2">`LargeObject`</ph> instance is created, but thereafter allows instance creation to occur:</source>
          <target state="translated">В конструкторе <ph id="ph1">`LargeObject`</ph> класса, третий ключевой части кода приводит к возникновению исключения первый раз <ph id="ph2">`LargeObject`</ph> экземпляр создается, но впоследствии разрешает создание экземпляра возникает:</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0})">
          <source>When the example is run, the first thread that tries to create an instance of <ph id="ph1">`LargeObject`</ph> fails, and the exception is caught.</source>
          <target state="translated">При запуске данного примера первый поток, который пытается создать экземпляр <ph id="ph1">`LargeObject`</ph> завершается с ошибкой и исключение перехватывается.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0})">
          <source>You might expect that the next thread would successfully create an instance, but the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> object has cached the exception.</source>
          <target state="translated">Можно предположить, что следующий поток успешно создать экземпляр, но <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> объекта кэшировал исключение.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0})">
          <source>Because of this, all three threads throw the exception.</source>
          <target state="translated">По этой причине все три потока исключение.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0})">
          <source>For simplicity, this example uses a global instance of <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>, and all the methods are <ph id="ph2">`static`</ph> (<ph id="ph3">`Shared`</ph> in Visual Basic).</source>
          <target state="translated">Для простоты в этом примере используется глобальный экземпляр класса <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>, а все методы объявлены как <ph id="ph2">`static`</ph> (<ph id="ph3">`Shared`</ph> в Visual Basic).</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0})">
          <source>These are not requirements for the use of lazy initialization.</source>
          <target state="translated">Это не является обязательными требованиями для использования отложенной инициализации.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.#ctor(System.Func{`0})">
          <source><ph id="ph1">&lt;paramref name="valueFactory" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Свойство <ph id="ph1">&lt;paramref name="valueFactory" /&gt;</ph> имеет значение <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
          <source>One of the enumeration values that specifies the thread safety mode.</source>
          <target state="translated">Одно из значений перечисления, задающее потокобезопасный режим.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> class that uses the default constructor of <ph id="ph2">&lt;paramref name="T" /&gt;</ph> and the specified thread-safety mode.</source>
          <target state="translated">Инициализирует новый экземпляр класса <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph>, который использует конструктор <ph id="ph2">&lt;paramref name="T" /&gt;</ph> по умолчанию и заданный потокобезопасный режим.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
          <source>The thread safety mode of a <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance describes the behavior when multiple threads try to initialize the <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph> instance.</source>
          <target state="translated">Потокобезопасный режим из <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> экземпляр описывает поведение, когда несколько потоков пытаются инициализировать <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph> экземпляра.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
          <source>A <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance that is created with this constructor does not cache exceptions.</source>
          <target state="translated">Объект <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> , созданного с помощью этого конструктора не кэширует исключения.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> class or the <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType&gt;</ph> enumeration.</source>
          <target state="translated">Дополнительные сведения см. в описании класса <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> или перечисления <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
          <source>The following example demonstrates the use of this constructor to create a lazy initializer that enables multiple threads to race to create an object lazily.</source>
          <target state="translated">В следующем примере показано использование этого конструктора для создания отложенный инициализатор, который позволяет нескольким потокам симуляторы для создания объекта неактивно.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
          <source>Multiple threads might succeed in creating instances, but all threads use the instance that was created first.</source>
          <target state="translated">Несколько потоков могут в успешном создании экземпляров, но все потоки использовать экземпляр, который сначала был создан.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
          <source>For an example that demonstrates how to use this constructor in single-threaded scenarios (specifying <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType&gt;</ph> for <ph id="ph2">`mode`</ph>), see the <ph id="ph3">&lt;xref:System.Lazy%601.%23ctor%28System.Boolean%29&gt;</ph> constructor.</source>
          <target state="translated">Пример, демонстрирующий, как использовать этот конструктор в однопоточных сценариях (указание <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType&gt;</ph> для <ph id="ph2">`mode`</ph>), в разделе <ph id="ph3">&lt;xref:System.Lazy%601.%23ctor%28System.Boolean%29&gt;</ph> конструктор.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
          <source>For an example that demonstrates how to use this constructor to provide locking instead of race conditions in multithreaded scenarios (specifying <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType&gt;</ph> for <ph id="ph2">`mode`</ph>), see the <ph id="ph3">&lt;xref:System.Lazy%601.%23ctor&gt;</ph> constructor.</source>
          <target state="translated">Пример, демонстрирующий, как использовать этот конструктор, чтобы обеспечить блокировку вместо состояния гонки в сценариях с несколькими потоками (указание <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType&gt;</ph> для <ph id="ph2">`mode`</ph>), в разделе <ph id="ph3">&lt;xref:System.Lazy%601.%23ctor&gt;</ph> конструктор.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
          <source>The example defines a <ph id="ph1">`LargeObject`</ph> class that will be initialized lazily by any of several threads.</source>
          <target state="translated">В примере определяется <ph id="ph1">`LargeObject`</ph> класс, который будет выполняться отложенная инициализация с помощью любого из нескольких потоков.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
          <source>The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor and finalizer of the <ph id="ph1">`LargeObject`</ph> class.</source>
          <target state="translated">Три ключевых части кода, иллюстрируют Создание инициализатор, фактическую инициализацию и конструктор и метод завершения из <ph id="ph1">`LargeObject`</ph> класса.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
          <source>At the beginning of the <ph id="ph1">`Main`</ph> method, the example creates the <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph> object that performs lazy initialization of the <ph id="ph3">`LargeObject`</ph>:</source>
          <target state="translated">В начале <ph id="ph1">`Main`</ph> метода, в примере создается <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph> объект, который выполняет отложенную инициализацию <ph id="ph3">`LargeObject`</ph>:</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
          <source>The example creates and starts three threads that block on a <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> object, so that the example can release the threads all at once.</source>
          <target state="translated">В примере создается и запускается три потока, блокирующие на <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> объекта, чтобы пример можно освободить потоков за один раз.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
          <source>In the <ph id="ph1">`ThreadProc`</ph> method that's used by all three threads, calling the <ph id="ph2">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> property creates the <ph id="ph3">`LargeObject`</ph> instance:</source>
          <target state="translated">В <ph id="ph1">`ThreadProc`</ph> , используемый для всех трех потоков, вызвав метод <ph id="ph2">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> свойство создает <ph id="ph3">`LargeObject`</ph> экземпляр:</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
          <source>Because the constructor for the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance specified <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType&gt;</ph>, all three threads are allowed to create <ph id="ph3">`LargeObject`</ph> instances.</source>
          <target state="translated">Так как конструктор для <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> указанный экземпляр <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType&gt;</ph>, все три потока разрешено создавать <ph id="ph3">`LargeObject`</ph> экземпляров.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
          <source>The example demonstrates this by displaying console messages in the constructor and in the finalizer of the <ph id="ph1">`LargeObject`</ph> class:</source>
          <target state="translated">Это демонстрируется в примере путем отображения сообщения консоли в конструкторе и в методе завершения <ph id="ph1">`LargeObject`</ph> класса:</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
          <source>However, the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> object ensures that only one instance is used by all threads.</source>
          <target state="translated">Тем не менее <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> объект гарантирует, что только один экземпляр, использованное всеми потоками.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
          <source>The output from the example shows that all three threads use the same instance, and also shows that the other two instances can be reclaimed by garbage collection.</source>
          <target state="translated">Выходные данные примера показано, что все три потока использовать того же экземпляра, а также показано, что два экземпляра можно сборщиком мусора.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
          <source>For simplicity, this example uses a global instance of <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>, and all the methods are <ph id="ph2">`static`</ph> (<ph id="ph3">`Shared`</ph> in Visual Basic).</source>
          <target state="translated">Для простоты в этом примере используется глобальный экземпляр класса <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>, а все методы объявлены как <ph id="ph2">`static`</ph> (<ph id="ph3">`Shared`</ph> в Visual Basic).</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
          <source>These are not requirements for the use of lazy initialization.</source>
          <target state="translated">Это не является обязательными требованиями для использования отложенной инициализации.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
          <source><ph id="ph1">&lt;paramref name="mode" /&gt;</ph> contains an invalid value.</source>
          <target state="translated">Параметр <ph id="ph1">&lt;paramref name="mode" /&gt;</ph> содержит недопустимое значение.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source>The delegate that is invoked to produce the lazily initialized value when it is needed.</source>
          <target state="translated">Делегат, вызываемый для создания значения с отложенной инициализацией при необходимости.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to make this instance usable concurrently by multiple threads; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to make this instance usable by only one thread at a time.</source>
          <target state="translated">Значение <ph id="ph1">&lt;see langword="true" /&gt;</ph>, если необходимо разрешить параллельное использование этого экземпляра несколькими потоками; значение <ph id="ph2">&lt;see langword="false" /&gt;</ph>, если необходимо разрешить одновременное использование этого экземпляра только одним потоком.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> class.</source>
          <target state="translated">Инициализирует новый экземпляр класса <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source>When lazy initialization occurs, the specified initialization function and initialization mode are used.</source>
          <target state="translated">Когда происходит отложенная инициализация, используются заданные функция инициализации и режим инициализации.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source>The thread safety mode of a <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance that is initialized with this constructor is <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType&gt;</ph> if <ph id="ph3">`isThreadSafe`</ph> is <ph id="ph4">`true`</ph>; otherwise, the mode is <ph id="ph5">&lt;xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Потокобезопасный режим из <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> экземпляр, который инициализируется этим конструктором <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType&gt;</ph> Если <ph id="ph3">`isThreadSafe`</ph> — <ph id="ph4">`true`</ph>; в противном случае используется режим <ph id="ph5">&lt;xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source>The thread safety mode describes the behavior when multiple threads try to initialize the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance.</source>
          <target state="translated">Режим потокобезопасности описывает поведение, когда несколько потоков пытаются инициализировать <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> экземпляра.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source>To specify the <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType&gt;</ph> mode, use the <ph id="ph2">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29&gt;</ph> or <ph id="ph3">&lt;xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29&gt;</ph> constructor.</source>
          <target state="translated">Чтобы указать <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType&gt;</ph> режиме, используйте <ph id="ph2">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29&gt;</ph> или <ph id="ph3">&lt;xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29&gt;</ph> конструктор.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source>Exceptions that are thrown by <ph id="ph1">`valueFactory`</ph> are cached.</source>
          <target state="translated">Исключения, вызываемые <ph id="ph1">`valueFactory`</ph> кэшируются.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> class or the <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType&gt;</ph> enumeration.</source>
          <target state="translated">Дополнительные сведения см. в описании класса <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> или перечисления <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source>The following example demonstrates the use of this constructor to provide lazy initialization with exception caching, in a scenario with a single thread.</source>
          <target state="translated">В следующем примере показано использование этого конструктора для предоставления отложенной инициализации с исключением, кэширование, в сценарии с одним потоком.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source>It also demonstrates the use of the  <ph id="ph1">&lt;xref:System.Lazy%601.%23ctor%2A&gt;</ph> constructor (specifying <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType&gt;</ph> for <ph id="ph3">`mode`</ph>).</source>
          <target state="translated">Он также демонстрирует использование <ph id="ph1">&lt;xref:System.Lazy%601.%23ctor%2A&gt;</ph> конструктор (указание <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType&gt;</ph> для <ph id="ph3">`mode`</ph>).</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source>To switch to that constructor, just change which constructor is commented out.</source>
          <target state="translated">Чтобы переключиться в конструктор, замените закомментирован какой конструктор.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source>For code that demonstrates how to use this constructor in multithreaded scenarios (specifying <ph id="ph1">`true`</ph> for <ph id="ph2">`isThreadSafe`</ph>), see the example for the <ph id="ph3">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29&gt;</ph> constructor.</source>
          <target state="translated">Для кода, в котором показано, как использовать этот конструктор в сценариях с несколькими потоками (указание <ph id="ph1">`true`</ph> для <ph id="ph2">`isThreadSafe`</ph>), см. пример для <ph id="ph3">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29&gt;</ph> конструктор.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source>The example defines a <ph id="ph1">`LargeObject`</ph> class that will be initialized lazily by one of several threads.</source>
          <target state="translated">В этом примере определяется класс <ph id="ph1">`LargeObject`</ph>, для которого будет выполняться отложенная инициализация одним из нескольких потоков.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source>The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor of the <ph id="ph1">`LargeObject`</ph> class, which demonstrates exception caching.</source>
          <target state="translated">Три ключевых фрагменты кода показывают Создание инициализатор, фактическую инициализацию и конструктор <ph id="ph1">`LargeObject`</ph> класса, в котором показано кэширование исключений.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source>At the beginning of the <ph id="ph1">`Main`</ph> method, the example creates the thread-safe lazy initializer for <ph id="ph2">`LargeObject`</ph>:</source>
          <target state="translated">В начале метода <ph id="ph1">`Main`</ph> в этом примере создается потокобезопасный отложенный инициализатор для класса <ph id="ph2">`LargeObject`</ph>:</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source>In the call to the constructor, the <ph id="ph1">`isThreadSafe`</ph> parameter is <ph id="ph2">`false`</ph>, so the <ph id="ph3">&lt;xref:System.Lazy%601&gt;</ph> is not thread safe.</source>
          <target state="translated">В вызове в конструктор <ph id="ph1">`isThreadSafe`</ph> параметр <ph id="ph2">`false`</ph>, поэтому <ph id="ph3">&lt;xref:System.Lazy%601&gt;</ph> не является потокобезопасным.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source>Because it's not thread safe, the example calls the <ph id="ph1">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> property three times on the same thread:</source>
          <target state="translated">Так как он не является потокобезопасным, в примере вызывается <ph id="ph1">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> свойство три раза в одном потоке:</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source>In the constructor of the <ph id="ph1">`LargeObject`</ph> class, the third key section of code throws an exception the first time a <ph id="ph2">`LargeObject`</ph> instance is created, but thereafter allows instance creation to occur:</source>
          <target state="translated">В конструкторе <ph id="ph1">`LargeObject`</ph> класса, третий ключевой части кода приводит к возникновению исключения первый раз <ph id="ph2">`LargeObject`</ph> экземпляр создается, но впоследствии разрешает создание экземпляра возникает:</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source>When the example is run, the first attempt to create an instance of <ph id="ph1">`LargeObject`</ph> fails, and the exception is caught.</source>
          <target state="translated">При запуске данного примера первая попытка создать экземпляр <ph id="ph1">`LargeObject`</ph> завершается с ошибкой и исключение перехватывается.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source>You might expect that the next attempt would succeed, but the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> object has cached the exception.</source>
          <target state="translated">Можно предположить, что попытка Далее будет выполнено успешно, но <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> объекта кэшировал исключение.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source>Because of this, all three attempts throw the exception.</source>
          <target state="translated">По этой причине все три попытки исключение.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source>For simplicity, this example uses a global instance of <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>, and all the methods are <ph id="ph2">`static`</ph> (<ph id="ph3">`Shared`</ph> in Visual Basic).</source>
          <target state="translated">Для простоты в этом примере используется глобальный экземпляр класса <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>, а все методы объявлены как <ph id="ph2">`static`</ph> (<ph id="ph3">`Shared`</ph> в Visual Basic).</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source>These are not requirements for the use of lazy initialization.</source>
          <target state="translated">Это не является обязательными требованиями для использования отложенной инициализации.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="valueFactory" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Свойство <ph id="ph1">&lt;paramref name="valueFactory" /&gt;</ph> имеет значение <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>The delegate that is invoked to produce the lazily initialized value when it is needed.</source>
          <target state="translated">Делегат, вызываемый для создания значения с отложенной инициализацией при необходимости.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>One of the enumeration values that specifies the thread safety mode.</source>
          <target state="translated">Одно из значений перечисления, задающее потокобезопасный режим.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> class that uses the specified initialization function and thread-safety mode.</source>
          <target state="translated">Инициализирует новый экземпляр класса <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph>, который использует заданную функцию инициализации и потокобезопасный режим.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>The thread safety mode of a <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance describes the behavior when multiple threads try to initialize the <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph> instance.</source>
          <target state="translated">Потокобезопасный режим из <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> экземпляр описывает поведение, когда несколько потоков пытаются инициализировать <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph> экземпляра.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>Exceptions that are thrown by <ph id="ph1">`valueFactory`</ph> are cached, unless <ph id="ph2">`mode`</ph> is <ph id="ph3">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Исключения, вызываемые <ph id="ph1">`valueFactory`</ph> кэшируются, если не <ph id="ph2">`mode`</ph> — <ph id="ph3">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> class or the <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType&gt;</ph> enumeration.</source>
          <target state="translated">Дополнительные сведения см. в описании класса <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> или перечисления <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>The following example demonstrates the use of this constructor to create a lazy initializer that enables multiple threads to race to create an object lazily.</source>
          <target state="translated">В следующем примере показано использование этого конструктора для создания отложенный инициализатор, который позволяет нескольким потокам симуляторы для создания объекта неактивно.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>Multiple threads might succeed in creating instances, but all threads use the instance that was created first.</source>
          <target state="translated">Несколько потоков могут в успешном создании экземпляров, но все потоки использовать экземпляр, который сначала был создан.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>In addition, the example demonstrates that exceptions are never cached when you specify <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType&gt;</ph>, even if initialization is performed by a function instead of by the default constructor of the lazily created type.</source>
          <target state="translated">Кроме того, в примере показано, что исключения не кэшируются при указании <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType&gt;</ph>, даже если инициализация выполняется функцией, а не конструктором по умолчанию неактивно созданного типа.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>For an example that demonstrates how to use this constructor in single-threaded scenarios (specifying <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType&gt;</ph> for <ph id="ph2">`mode`</ph>), see the <ph id="ph3">&lt;xref:System.Lazy%601.%23ctor%28System.Boolean%29&gt;</ph> constructor.</source>
          <target state="translated">Пример, демонстрирующий, как использовать этот конструктор в однопоточных сценариях (указание <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType&gt;</ph> для <ph id="ph2">`mode`</ph>), в разделе <ph id="ph3">&lt;xref:System.Lazy%601.%23ctor%28System.Boolean%29&gt;</ph> конструктор.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>For an example that demonstrates how to use this constructor to provide locking instead of race conditions in multithreaded scenarios (specifying <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType&gt;</ph> for <ph id="ph2">`mode`</ph>), see the <ph id="ph3">&lt;xref:System.Lazy%601.%23ctor&gt;</ph> constructor.</source>
          <target state="translated">Пример, демонстрирующий, как использовать этот конструктор, чтобы обеспечить блокировку вместо состояния гонки в сценариях с несколькими потоками (указание <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType&gt;</ph> для <ph id="ph2">`mode`</ph>), в разделе <ph id="ph3">&lt;xref:System.Lazy%601.%23ctor&gt;</ph> конструктор.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>The example defines a <ph id="ph1">`LargeObject`</ph> class that will be initialized lazily by any of several threads.</source>
          <target state="translated">В примере определяется <ph id="ph1">`LargeObject`</ph> класс, который будет выполняться отложенная инициализация с помощью любого из нескольких потоков.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>The four key sections of code illustrate the creation of the initializer, the actual initialization, the initialization function, and the constructor and finalizer of the <ph id="ph1">`LargeObject`</ph> class.</source>
          <target state="translated">Четыре ключевых раздела кода иллюстрируют Создание инициализатор, фактическую инициализацию, функцию инициализации и конструктор и метод завершения из <ph id="ph1">`LargeObject`</ph> класса.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>At the beginning of the <ph id="ph1">`Main`</ph> method, the example creates the <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph> object that performs lazy initialization of the <ph id="ph3">`LargeObject`</ph>:</source>
          <target state="translated">В начале <ph id="ph1">`Main`</ph> метода, в примере создается <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph> объект, который выполняет отложенную инициализацию <ph id="ph3">`LargeObject`</ph>:</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>The lazy initializer uses a function to perform the initialization.</source>
          <target state="translated">Функция отложенный инициализатор для выполнения инициализации.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>In this case, a function is required because there is no default constructor for the <ph id="ph1">`LargeObject`</ph> class.</source>
          <target state="translated">В этом случае функция является обязательным, поскольку нет конструктора по умолчанию для <ph id="ph1">`LargeObject`</ph> класса.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>The example creates and starts three threads that block on a <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> object, so that the example can release the threads all at once.</source>
          <target state="translated">В примере создается и запускается три потока, блокирующие на <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> объекта, чтобы пример можно освободить потоков за один раз.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>In the <ph id="ph1">`ThreadProc`</ph> method that's used by all three threads, calling the <ph id="ph2">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> property creates the <ph id="ph3">`LargeObject`</ph> instance:</source>
          <target state="translated">В <ph id="ph1">`ThreadProc`</ph> , используемый для всех трех потоков, вызвав метод <ph id="ph2">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> свойство создает <ph id="ph3">`LargeObject`</ph> экземпляр:</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>In the third key section of code, the lazy initialization function is called to create the <ph id="ph1">`LargeObject`</ph> instance.</source>
          <target state="translated">В третьем ключа раздела кода, вызывается функция отложенной инициализации для создания <ph id="ph1">`LargeObject`</ph> экземпляра.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>The function throws an exception the first time it's called:</source>
          <target state="translated">Эта функция создает исключение первого времени при вызове:</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>With any other <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode&gt;</ph> setting, an unhandled exception in the initialization function would be cached.</source>
          <target state="translated">Для любого другого <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode&gt;</ph> параметр необработанного исключения в функции инициализации будут кэшироваться.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>However, <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType&gt;</ph> suppresses exception caching.</source>
          <target state="translated">Однако <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType&gt;</ph> отключает кэширование исключений.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>The output from the example demonstrates that a subsequent attempt to initialize the object succeeds.</source>
          <target state="translated">Выходные данные примера показано повторная попытка инициализации объекта выполняется успешно.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>The exception message usually appears after messages indicating that other threads have successfully initialized the object.</source>
          <target state="translated">После сообщения о том, другие потоки успешно инициализированы объект обычно отображается сообщение об исключении.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>This is because of the delay introduced by throwing and catching the exception.</source>
          <target state="translated">Причина-задержка, вызванная путем создания и перехвата исключения.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>Because the constructor for the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance specified <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType&gt;</ph>, all three threads are allowed to create <ph id="ph3">`LargeObject`</ph> instances.</source>
          <target state="translated">Так как конструктор для <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> указанный экземпляр <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType&gt;</ph>, все три потока разрешено создавать <ph id="ph3">`LargeObject`</ph> экземпляров.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>The example demonstrates this by displaying console messages in the constructor and in the finalizer of the <ph id="ph1">`LargeObject`</ph> class:</source>
          <target state="translated">Это демонстрируется в примере путем отображения сообщения консоли в конструкторе и в методе завершения <ph id="ph1">`LargeObject`</ph> класса:</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>The <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> object ensures that only one instance is used by all threads (except the thread where the initialization function throws an exception).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> Объект гарантирует, что только один экземпляр используется всеми потоками (за исключением потока, где функция инициализации вызывает исключение).</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>The output from the example shows this.</source>
          <target state="translated">Это показано в выходные данные примера.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>For simplicity, this example uses a global instance of <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>, and all the methods are <ph id="ph2">`static`</ph> (<ph id="ph3">`Shared`</ph> in Visual Basic).</source>
          <target state="translated">Для простоты в этом примере используется глобальный экземпляр класса <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>, а все методы объявлены как <ph id="ph2">`static`</ph> (<ph id="ph3">`Shared`</ph> в Visual Basic).</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>These are not requirements for the use of lazy initialization.</source>
          <target state="translated">Это не является обязательными требованиями для использования отложенной инициализации.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source><ph id="ph1">&lt;paramref name="mode" /&gt;</ph> contains an invalid value.</source>
          <target state="translated">Параметр <ph id="ph1">&lt;paramref name="mode" /&gt;</ph> содержит недопустимое значение.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source><ph id="ph1">&lt;paramref name="valueFactory" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Свойство <ph id="ph1">&lt;paramref name="valueFactory" /&gt;</ph> имеет значение <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="P:System.Lazy`1.IsValueCreated">
          <source>Gets a value that indicates whether a value has been created for this <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance.</source>
          <target state="translated">Получает значение, указывающее, было ли создано значение для данного экземпляра <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Lazy`1.IsValueCreated">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if a value has been created for this <ph id="ph2">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Значение <ph id="ph1">&lt;see langword="true" /&gt;</ph>, если для данного экземпляра <ph id="ph2">&lt;see cref="T:System.Lazy`1" /&gt;</ph> было создано значение; в противном случае — значение <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Lazy`1.IsValueCreated">
          <source>When lazy initialization occurs for a <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance, it may result in either a value being created or an exception being thrown.</source>
          <target state="translated">Когда происходит отложенная инициализация для <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> экземпляр, он может повлечь создается значение или исключение.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Lazy`1.IsValueCreated">
          <source>If an exception is thrown, subsequent behavior of the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance depends on whether exception caching is in effect.</source>
          <target state="translated">Если исключение создается, последующего поведение <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> экземпляр, зависит ли кэширование исключений действует.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Lazy`1.IsValueCreated">
          <source>If the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance was created by using a constructor that does not specify an initialization function, then exception caching is not in effect.</source>
          <target state="translated">Если <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> был создан экземпляр, используя конструктор, который не соответствует функции инициализации, то кэширование исключений не действует.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Lazy`1.IsValueCreated">
          <source>A subsequent attempt to initialize the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> might succeed, and after successful initialization the <ph id="ph2">&lt;xref:System.Lazy%601.IsValueCreated%2A&gt;</ph> property returns <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Повторная попытка инициализировать <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> может завершиться успешно и после успешной инициализации <ph id="ph2">&lt;xref:System.Lazy%601.IsValueCreated%2A&gt;</ph> возвращает <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Lazy`1.IsValueCreated">
          <source>If the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance was created with an initialization function (specified by the <ph id="ph2">`valueFactory`</ph> parameter of the <ph id="ph3">&lt;xref:System.Lazy%601&gt;</ph> constructor), then exception caching is controlled by the thread safety mode.</source>
          <target state="translated">Если <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> экземпляр был создан с помощью функции инициализации (заданные <ph id="ph2">`valueFactory`</ph> параметр <ph id="ph3">&lt;xref:System.Lazy%601&gt;</ph> конструктора), а затем кэширование исключений управляется потокобезопасный режим.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Lazy`1.IsValueCreated">
          <source>If the mode is <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType&gt;</ph>, there is no second chance to initialize the <ph id="ph3">&lt;xref:System.Lazy%601&gt;</ph> instance.</source>
          <target state="translated">Если используется режим <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType&gt;</ph> или <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType&gt;</ph>, нет возможности для инициализации второго <ph id="ph3">&lt;xref:System.Lazy%601&gt;</ph> экземпляра.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Lazy`1.IsValueCreated">
          <source>If an exception occurs and is unhandled in the initialization function, that exception is cached and rethrown on subsequent accesses of the <ph id="ph1">&lt;xref:System.Lazy%601.Value%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">Если исключение возникает и не было обработано в функции инициализации, исключение кэшируется и повторно вызывается на последующие обращения к <ph id="ph1">&lt;xref:System.Lazy%601.Value%2A?displayProperty=nameWithType&gt;</ph> свойство.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Lazy`1.IsValueCreated">
          <source>No value is created if an exception is thrown, so in such cases <ph id="ph1">&lt;xref:System.Lazy%601.IsValueCreated%2A&gt;</ph> returns <ph id="ph2">`false`</ph>.</source>
          <target state="translated">Значение не создается, если создается исключение, поэтому в таких случаях <ph id="ph1">&lt;xref:System.Lazy%601.IsValueCreated%2A&gt;</ph> возвращает <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Lazy`1.IsValueCreated">
          <source>If the mode is <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType&gt;</ph>, the first thread that succeeds in running the initialization function (or the default constructor) creates the value for the <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph> instance.</source>
          <target state="translated">Если используется режим <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType&gt;</ph>, первый поток, успешно запущена функция инициализации (или конструктор по умолчанию) создает значение для <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph> экземпляра.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Lazy`1.IsValueCreated">
          <source>If the initialization function throws an exception on one thread, other threads can still try to initialize the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance.</source>
          <target state="translated">Если функция инициализации вызывает исключение в одном потоке, другие потоки все еще могут попытаться инициализировать <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> экземпляра.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Lazy`1.IsValueCreated">
          <source>Until the value is created, the <ph id="ph1">&lt;xref:System.Lazy%601.IsValueCreated%2A&gt;</ph> property returns <ph id="ph2">`false`</ph>.</source>
          <target state="translated">До создания значение <ph id="ph1">&lt;xref:System.Lazy%601.IsValueCreated%2A&gt;</ph> возвращает <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.ToString">
          <source>Creates and returns a string representation of the <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> property for this instance.</source>
          <target state="translated">Создает и возвращает строковое представление свойства <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> данного экземпляра.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.ToString">
          <source>The result of calling the <ph id="ph1">&lt;see cref="M:System.Object.ToString" /&gt;</ph> method on the <ph id="ph2">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> property for this instance, if the value has been created (that is, if the <ph id="ph3">&lt;see cref="P:System.Lazy`1.IsValueCreated" /&gt;</ph> property returns <ph id="ph4">&lt;see langword="true" /&gt;</ph>).</source>
          <target state="translated">Результат вызова метода <ph id="ph1">&lt;see cref="M:System.Object.ToString" /&gt;</ph> для свойства <ph id="ph2">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> данного экземпляра, если это значение было создано (то есть если свойство <ph id="ph3">&lt;see cref="P:System.Lazy`1.IsValueCreated" /&gt;</ph> возвращает значение <ph id="ph4">&lt;see langword="true" /&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.ToString">
          <source>Otherwise, a string indicating that the value has not been created.</source>
          <target state="translated">В противном случае строка, указывающая, что значение не создано.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.ToString">
          <source>Calling this method does not cause initialization.</source>
          <target state="translated">Вызов этого метода не вызывает инициализацию.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.ToString">
          <source>The <ph id="ph1">&lt;xref:System.Lazy%601.Value%2A?displayProperty=nameWithType&gt;</ph> property can be <ph id="ph2">`null`</ph> after lazy initialization if the factory method that was specified for the <ph id="ph3">`valueFactory`</ph> parameter of the <ph id="ph4">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29&gt;</ph>, <ph id="ph5">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29&gt;</ph>, or <ph id="ph6">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29&gt;</ph> constructor returns <ph id="ph7">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Lazy%601.Value%2A?displayProperty=nameWithType&gt;</ph> Свойство может быть <ph id="ph2">`null`</ph> после отложенной инициализации, если метод фабрики, который был указан для <ph id="ph3">`valueFactory`</ph> параметр <ph id="ph4">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29&gt;</ph>, <ph id="ph5">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29&gt;</ph>, или <ph id="ph6">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29&gt;</ph> конструктор возвращает <ph id="ph7">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.ToString">
          <source>The <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> property is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Значение свойства <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> — <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="P:System.Lazy`1.Value">
          <source>Gets the lazily initialized value of the current <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance.</source>
          <target state="translated">Получает неактивно инициализированное значение текущего экземпляра <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Lazy`1.Value">
          <source>The lazily initialized value of the current <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance.</source>
          <target state="translated">Неактивно инициализированное значение текущего экземпляра <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Lazy`1.Value">
          <source>If the <ph id="ph1">&lt;xref:System.Lazy%601.IsValueCreated%2A?displayProperty=nameWithType&gt;</ph> property is <ph id="ph2">`false`</ph>, accessing the <ph id="ph3">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> property forces initialization.</source>
          <target state="translated">Если <ph id="ph1">&lt;xref:System.Lazy%601.IsValueCreated%2A?displayProperty=nameWithType&gt;</ph> свойство <ph id="ph2">`false`</ph>, доступ к свойству <ph id="ph3">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> свойство вызывает инициализацию.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Lazy`1.Value">
          <source>In addition to the exceptions that are listed, the <ph id="ph1">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> property can throw any unhandled exception that is thrown by the factory method that was passed to the <ph id="ph2">`valueFactory`</ph> parameter of the <ph id="ph3">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29&gt;</ph>, <ph id="ph4">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29&gt;</ph>, or <ph id="ph5">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29&gt;</ph> constructor.</source>
          <target state="translated">Кроме исключений, которые перечислены <ph id="ph1">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> свойства можно вызывать любые необработанное исключение, вызванное фабричный метод, который был передан в <ph id="ph2">`valueFactory`</ph> параметр <ph id="ph3">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29&gt;</ph>, <ph id="ph4">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29&gt;</ph>, или <ph id="ph5">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29&gt;</ph> конструктор.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="P:System.Lazy`1.Value">
          <source>The <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance is initialized to use the default constructor of the type that is being lazily initialized, and permissions to access the constructor are missing.</source>
          <target state="translated">Экземпляр <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> инициализируется для использования конструктора по умолчанию, имеющего тип с отложенной инициализацией, а разрешения для доступа к конструктору отсутствуют.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="P:System.Lazy`1.Value">
          <source>The <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance is initialized to use the default constructor of the type that is being lazily initialized, and that type does not have a public, parameterless constructor.</source>
          <target state="translated">Экземпляр <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> инициализируется для использования конструктора по умолчанию, имеющего тип с отложенной инициализацией, и данный тип не имеет открытого конструктора, не принимающего параметров.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="P:System.Lazy`1.Value">
          <source>The initialization function tries to access <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> on this instance.</source>
          <target state="translated">Функция инициализации в данном экземпляре пытается получить доступ к <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>