<Type Name="Lazy&lt;T&gt;" FullName="System.Lazy&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8a08e490433f3e23816cdfd6030b67d5925db996" />
    <Meta Name="ms.sourcegitcommit" Value="0e1f030650a307c745ee84ed547ef858acaea587" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="11/29/2018" />
    <Meta Name="ms.locfileid" Value="52590404" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Lazy&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Lazy`1&lt;T&gt; extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Lazy`1" />
  <TypeSignature Language="VB.NET" Value="Public Class Lazy(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class Lazy" />
  <TypeSignature Language="F#" Value="type Lazy&lt;'T&gt; = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("ThreadSafetyMode={Mode}, IsValueCreated={IsValueCreated}, IsValueFaulted={IsValueFaulted}, Value={ValueForDebugDisplay}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.System_LazyDebugView`1))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T">
      <span data-ttu-id="0c1ca-101">Тип объекта с отложенной инициализацией.</span>
      <span class="sxs-lookup">
        <span data-stu-id="0c1ca-101">The type of object that is being lazily initialized.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="0c1ca-102">Обеспечивает поддержку отложенной инициализации.</span>
      <span class="sxs-lookup">
        <span data-stu-id="0c1ca-102">Provides support for lazy initialization.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c1ca-103">Используйте отложенную инициализацию отложить создание больших или ресурсоемких объекта или выполнения ресурсоемких задач, особенно в том случае, если такие создания или выполнения могут не выполняться в течение времени существования программы.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-103">Use lazy initialization to defer the creation of a large or resource-intensive object, or the execution of a resource-intensive task, particularly when such creation or execution might not occur during the lifetime of the program.</span></span>  
  
 <span data-ttu-id="0c1ca-104">Чтобы подготовить для отложенной инициализации, создания экземпляра <xref:System.Lazy%601>.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-104">To prepare for lazy initialization, you create an instance of <xref:System.Lazy%601>.</span></span> <span data-ttu-id="0c1ca-105">Аргумент типа <xref:System.Lazy%601> , созданный тип объекта, который вы хотите инициализировать неактивно.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-105">The type argument of the <xref:System.Lazy%601> object that you create specifies the type of the object that you want to initialize lazily.</span></span> <span data-ttu-id="0c1ca-106">Конструктор, который используется для создания <xref:System.Lazy%601> объекта определяет характеристики инициализации.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-106">The constructor that you use to create the <xref:System.Lazy%601> object determines the characteristics of the initialization.</span></span> <span data-ttu-id="0c1ca-107">Отложенная инициализация производится при первом обращении к свойству <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-107">Lazy initialization occurs the first time the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property is accessed.</span></span>  
  
 <span data-ttu-id="0c1ca-108">В большинстве случаев выбор конструктор зависит ответы на два вопроса:</span><span class="sxs-lookup"><span data-stu-id="0c1ca-108">In most cases, choosing a constructor depends on your answers to two questions:</span></span>  
  
-   <span data-ttu-id="0c1ca-109">Неактивно инициализированного объекта будут доступны из более чем одного потока?</span><span class="sxs-lookup"><span data-stu-id="0c1ca-109">Will the lazily initialized object be accessed from more than one thread?</span></span> <span data-ttu-id="0c1ca-110">Если Да, <xref:System.Lazy%601> объект может создать в любом потоке.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-110">If so, the <xref:System.Lazy%601> object might create it on any thread.</span></span> <span data-ttu-id="0c1ca-111">Можно использовать один из простых конструкторов, поведение которого по умолчанию является создание поточно ориентированной <xref:System.Lazy%601> объекта, так что только один экземпляр неактивно обрабатываемого объекта создается независимо от того, сколько потока пытаются получить доступ к нему.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-111">You can use one of the simple constructors whose default behavior is to create a thread-safe <xref:System.Lazy%601> object, so that only one instance of the lazily instantiated object is created no matter how many threads try to access it.</span></span> <span data-ttu-id="0c1ca-112">Для создания <xref:System.Lazy%601> объекта, который не является потокобезопасным, необходимо использовать конструктор, который позволяет указать без потокобезопасности.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-112">To create a <xref:System.Lazy%601> object that is not thread safe, you must use a constructor that enables you to specify no thread safety.</span></span>  
  
    > [!CAUTION]
    >  <span data-ttu-id="0c1ca-113">Что делает <xref:System.Lazy%601> объект поточно-ориентированным не защищает неактивно инициализированного объекта.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-113">Making the <xref:System.Lazy%601> object thread safe does not protect the lazily initialized object.</span></span> <span data-ttu-id="0c1ca-114">Если несколько потоков могут получить доступ к неактивно инициализированного объекта, необходимо убедиться в его свойства и методы безопасными для многопоточного доступа.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-114">If multiple threads can access the lazily initialized object, you must make its properties and methods safe for multithreaded access.</span></span>  
  
-   <span data-ttu-id="0c1ca-115">Отложенная инициализация требует большого объема кода, или неактивно инициализированного объекта имеет конструктор по умолчанию, который выполняет все, что нужно и не вызывать исключения?</span><span class="sxs-lookup"><span data-stu-id="0c1ca-115">Does lazy initialization require a lot of code, or does the lazily initialized object have a default constructor that does everything you need and doesn't throw exceptions?</span></span> <span data-ttu-id="0c1ca-116">Если вам нужно написать код инициализации, или если необходимо обрабатывать исключения, используйте один из конструкторов, принимающих метод фабрики.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-116">If you need to write initialization code or if exceptions need to be handled, use one of the constructors that takes a factory method.</span></span> <span data-ttu-id="0c1ca-117">Запишите свой код инициализации в методе фабрики.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-117">Write your initialization code in the factory method.</span></span>  
  
 <span data-ttu-id="0c1ca-118">В следующей таблице показаны, чтобы выбрать, какой конструктор на основе этих двух факторов:</span><span class="sxs-lookup"><span data-stu-id="0c1ca-118">The following table shows which constructor to choose, based on these two factors:</span></span>  
  
|<span data-ttu-id="0c1ca-119">Объект, которые будут доступны для</span><span class="sxs-lookup"><span data-stu-id="0c1ca-119">Object will be accessed by</span></span>|<span data-ttu-id="0c1ca-120">Если требуется никакого кода инициализации (конструктор по умолчанию), используйте</span><span class="sxs-lookup"><span data-stu-id="0c1ca-120">If no initialization code is required (default constructor), use</span></span>|<span data-ttu-id="0c1ca-121">Если код инициализации, используйте</span><span class="sxs-lookup"><span data-stu-id="0c1ca-121">If initialization code is required, use</span></span>|  
|--------------------------------|------------------------------------------------------------------------|---------------------------------------------|  
|<span data-ttu-id="0c1ca-122">Несколько потоков</span><span class="sxs-lookup"><span data-stu-id="0c1ca-122">Multiple threads</span></span>|<xref:System.Lazy%601.%23ctor>|<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>|  
|<span data-ttu-id="0c1ca-123">Один поток</span><span class="sxs-lookup"><span data-stu-id="0c1ca-123">One thread</span></span>|<span data-ttu-id="0c1ca-124"><xref:System.Lazy%601.%23ctor%28System.Boolean%29> с помощью `isThreadSafe` присвоено `false`.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-124"><xref:System.Lazy%601.%23ctor%28System.Boolean%29> with `isThreadSafe` set to `false`.</span></span>|<span data-ttu-id="0c1ca-125"><xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> с помощью `isThreadSafe` присвоено `false`.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-125"><xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> with `isThreadSafe` set to `false`.</span></span>|  
  
 <span data-ttu-id="0c1ca-126">Лямбда-выражения можно использовать для указания метода фабрики.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-126">You can use a lambda expression to specify the factory method.</span></span> <span data-ttu-id="0c1ca-127">В этом случае всех кодов инициализации в одном месте.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-127">This keeps all the initialization code in one place.</span></span> <span data-ttu-id="0c1ca-128">Лямбда-выражение захватывает контекст, включая все аргументы, передаваемые конструктору объекта отложенной инициализацией.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-128">The lambda expression captures the context, including any arguments you pass to the lazily initialized object's constructor.</span></span>  
  
 <span data-ttu-id="0c1ca-129">**Кэширование исключений** при использовании фабричные методы исключения кэшируются.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-129">**Exception caching** When you use factory methods, exceptions are cached.</span></span> <span data-ttu-id="0c1ca-130">То есть если фабричный метод создает исключение времени исключение первый поток пытается получить доступ к <xref:System.Lazy%601.Value%2A> свойство <xref:System.Lazy%601> объекта, то же исключение возникает при всех последующих попытках.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-130">That is, if the factory method throws an exception the first time a thread tries to access the <xref:System.Lazy%601.Value%2A> property of the <xref:System.Lazy%601> object, the same exception is thrown on every subsequent attempt.</span></span> <span data-ttu-id="0c1ca-131">Это гарантирует, что при каждом вызове <xref:System.Lazy%601.Value%2A> свойство дает тот же результат и позволяет избежать ошибкам, которые могут возникнуть при разных потоков получить разные результаты.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-131">This ensures that every call to the <xref:System.Lazy%601.Value%2A> property produces the same result and avoids subtle errors that might arise if different threads get different results.</span></span> <span data-ttu-id="0c1ca-132"><xref:System.Lazy%601> Заменяет реальный `T` , в противном случае будет инициализировано на более раннем этапе, обычно во время запуска.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-132">The <xref:System.Lazy%601> stands in for an actual `T` that otherwise would have been initialized at some earlier point, usually during startup.</span></span> <span data-ttu-id="0c1ca-133">Сбой на этой более ранней точки является обычно неустранимой.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-133">A failure at that earlier point is usually fatal.</span></span> <span data-ttu-id="0c1ca-134">Если существует вероятность возникновения сбоя восстанавливаемые, мы рекомендуем встраивание логики повторения в процедуре инициализации (в данном случае метод фабрики), так же, как если бы использовали отложенной инициализации.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-134">If there is a potential for a recoverable failure, we recommend that you build the retry logic into the initialization routine (in this case, the factory method), just as you would if you weren't using lazy initialization.</span></span>  
  
 <span data-ttu-id="0c1ca-135">**Альтернативой блокировки** в определенных ситуациях может потребоваться избежать <xref:System.Lazy%601> объекта по умолчанию работа блокировки.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-135">**Alternative to locking** In certain situations, you might want to avoid the overhead of the <xref:System.Lazy%601> object's default locking behavior.</span></span> <span data-ttu-id="0c1ca-136">В редких случаях могут быть вероятность возникновения взаимоблокировок.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-136">In rare situations, there might be a potential for deadlocks.</span></span> <span data-ttu-id="0c1ca-137">В таких случаях можно использовать <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> или <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> конструктор и укажите <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-137">In such cases, you can use the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> or <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructor, and specify <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>.</span></span> <span data-ttu-id="0c1ca-138">Это позволяет <xref:System.Lazy%601> для создания копии неактивно инициализированного объекта на каждом из нескольких потоков, если потоки обращаются к <xref:System.Lazy%601.Value%2A> свойства одновременно.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-138">This enables the <xref:System.Lazy%601> object to create a copy of the lazily initialized object on each of several threads if the threads call the <xref:System.Lazy%601.Value%2A> property simultaneously.</span></span> <span data-ttu-id="0c1ca-139"><xref:System.Lazy%601> Объект гарантирует, что все потоки, использовать один и тот же экземпляр объекта с отложенной инициализацией и удаляет экземпляры, которые не используются.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-139">The <xref:System.Lazy%601> object ensures that all threads use the same instance of the lazily initialized object and discards the instances that are not used.</span></span> <span data-ttu-id="0c1ca-140">Таким образом сокращение расходов на блокировку обходится, программа может иногда Создание и удаление дополнительных копий ресурсоемкий объект.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-140">Thus, the cost of reducing the locking overhead is that your program might sometimes create and discard extra copies of an expensive object.</span></span> <span data-ttu-id="0c1ca-141">В большинстве случаев это маловероятно.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-141">In most cases, this is unlikely.</span></span> <span data-ttu-id="0c1ca-142">В примерах для <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> и <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> конструкторы демонстрируют это поведение.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-142">The examples for the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> and <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructors demonstrate this behavior.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="0c1ca-143">При указании <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, исключения не кэшируются, даже если указать метод фабрики.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-143">When you specify <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, exceptions are never cached, even if you specify a factory method.</span></span>  
  
 <span data-ttu-id="0c1ca-144">**Эквивалентное конструкторы** Помимо возможности использования <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> и <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> конструкторы можно дублировать функции других конструкторов.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-144">**Equivalent constructors** In addition to enabling the use of <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> and <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructors can duplicate the functionality of the other constructors.</span></span> <span data-ttu-id="0c1ca-145">В следующей таблице показаны значения параметров, которые создают эквивалентное поведение.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-145">The following table shows the parameter values that produce equivalent behavior.</span></span>  
  
|<span data-ttu-id="0c1ca-146">Чтобы создать <xref:System.Lazy%601> объект, который отсутствует</span><span class="sxs-lookup"><span data-stu-id="0c1ca-146">To create a <xref:System.Lazy%601> object that is</span></span>|<span data-ttu-id="0c1ca-147">Для конструкторов, которые имеют `LazyThreadSafetyMode` `mode` набор параметров, `mode` для</span><span class="sxs-lookup"><span data-stu-id="0c1ca-147">For constructors that have a `LazyThreadSafetyMode` `mode` parameter, set `mode` to</span></span>|<span data-ttu-id="0c1ca-148">Для конструкторов, которые имеют значение типа Boolean `isThreadSafe` набор параметров, `isThreadSafe` для</span><span class="sxs-lookup"><span data-stu-id="0c1ca-148">For constructors that have a Boolean `isThreadSafe` parameter, set `isThreadSafe` to</span></span>|<span data-ttu-id="0c1ca-149">Для конструкторов без параметров безопасности потока</span><span class="sxs-lookup"><span data-stu-id="0c1ca-149">For constructors with no thread safety parameters</span></span>|  
|-------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------|-------------------------------------------------------|  
|<span data-ttu-id="0c1ca-150">Полностью потокобезопасным; использует блокировку для убедитесь, что только один поток инициализирует значение.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-150">Fully thread safe; uses locking to ensure that only one thread initializes the value.</span></span>|<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication>|`true`|<span data-ttu-id="0c1ca-151">Все конструкторы являются полностью потокобезопасными.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-151">All such constructors are fully thread safe.</span></span>|  
|<span data-ttu-id="0c1ca-152">Не является потокобезопасным.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-152">Not thread safe.</span></span>|<xref:System.Threading.LazyThreadSafetyMode.None>|`false`|<span data-ttu-id="0c1ca-153">Неприменимо.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-153">Not applicable.</span></span>|  
|<span data-ttu-id="0c1ca-154">Полностью потокобезопасным; потоки состязаются за право инициализации значения.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-154">Fully thread safe; threads race to initialize the value.</span></span>|<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly>|<span data-ttu-id="0c1ca-155">Неприменимо.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-155">Not applicable.</span></span>|<span data-ttu-id="0c1ca-156">Неприменимо.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-156">Not applicable.</span></span>|  
  
 <span data-ttu-id="0c1ca-157">**Другие возможности** сведения об использовании <xref:System.Lazy%601> с статических полей потока, или в качестве резервного хранилища для свойств, см. в разделе [отложенной инициализации](~/docs/framework/performance/lazy-initialization.md).</span><span class="sxs-lookup"><span data-stu-id="0c1ca-157">**Other capabilities** For information about the use of <xref:System.Lazy%601> with thread-static fields, or as the backing store for properties, see [Lazy Initialization](~/docs/framework/performance/lazy-initialization.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c1ca-158">В следующем примере показано использование <xref:System.Lazy%601> класса для выполнения отложенной инициализации с доступом из нескольких потоков.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-158">The following example demonstrates the use of the <xref:System.Lazy%601> class to provide lazy initialization with access from multiple threads.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c1ca-159">В примере используется <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> конструктор.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-159">The example uses the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> constructor.</span></span> <span data-ttu-id="0c1ca-160">Он также демонстрирует использование <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> конструктор (указание `true` для `isThreadSafe`) и <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> конструктор (указание <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> для `mode`).</span><span class="sxs-lookup"><span data-stu-id="0c1ca-160">It also demonstrates the use of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor (specifying `true` for `isThreadSafe`) and the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="0c1ca-161">Чтобы переключиться в другой конструктор, просто измените конструкторов, закомментированы.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-161">To switch to a different constructor, just change which constructors are commented out.</span></span>  
>   
>  <span data-ttu-id="0c1ca-162">Пример, демонстрирующий исключение кэширования с помощью же конструкторы, см. в разделе <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> конструктор.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-162">For an example that demonstrates exception caching using the same constructors, see the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> constructor.</span></span>  
  
 <span data-ttu-id="0c1ca-163">В этом примере определяется класс `LargeObject`, для которого будет выполняться отложенная инициализация одним из нескольких потоков.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-163">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="0c1ca-164">Четыре основные разделы кода иллюстрируют Создание инициализатор, метод фабрики, фактическую инициализацию и конструктор `LargeObject` класс, который выводит сообщение при создании объекта.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-164">The four key sections of code illustrate the creation of the initializer, the factory method, the actual initialization, and the constructor of the `LargeObject` class, which displays a message when the object is created.</span></span> <span data-ttu-id="0c1ca-165">В начале метода `Main` в этом примере создается потокобезопасный отложенный инициализатор для класса `LargeObject`:</span><span class="sxs-lookup"><span data-stu-id="0c1ca-165">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="0c1ca-166">Фабричный метод показано создание объекта, с заполнителем для дальнейшей инициализации:</span><span class="sxs-lookup"><span data-stu-id="0c1ca-166">The factory method shows the creation of the object, with a placeholder for further initialization:</span></span>  
  
 [!code-csharp[System.Lazy\`1#FactoryFunc](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#factoryfunc)]
 [!code-vb[System.Lazy\`1#FactoryFunc](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#factoryfunc)]  
  
 <span data-ttu-id="0c1ca-167">Обратите внимание на то, код первых двух разделов, которые можно использовать с помощью лямбда-функцию, как показано ниже:</span><span class="sxs-lookup"><span data-stu-id="0c1ca-167">Note that the first two code sections could be combined by using a lambda function, as shown here:</span></span>  
  
 [!code-csharp[System.Lazy\`1#InitWithLambda](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/lambda.cs#initwithlambda)]
 [!code-vb[System.Lazy\`1#InitWithLambda](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/lambda.vb#initwithlambda)]  
  
 <span data-ttu-id="0c1ca-168">В примере приостанавливается, чтобы указать, что неопределенное может пройти, прежде чем отложенной инициализации.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-168">The example pauses, to indicate that an indeterminate period may elapse before lazy initialization occurs.</span></span> <span data-ttu-id="0c1ca-169">При нажатии клавиши **ввод** ключей, в примере создает и запускает три потока.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-169">When you press the **Enter** key, the example creates and starts three threads.</span></span> <span data-ttu-id="0c1ca-170">`ThreadProc` Метод, используемый вызовами все три потока <xref:System.Lazy%601.Value%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-170">The `ThreadProc` method that's used by all three threads calls the <xref:System.Lazy%601.Value%2A> property.</span></span> <span data-ttu-id="0c1ca-171">В первый раз, в этом случае `LargeObject` создается экземпляр:</span><span class="sxs-lookup"><span data-stu-id="0c1ca-171">The first time this happens, the `LargeObject` instance is created:</span></span>  
  
 [!code-csharp[System.Lazy\`1#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="0c1ca-172">Конструктор `LargeObject` класса, содержащего последнего ключа раздела кода, отображает сообщение и регистрирует удостоверение поток.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-172">The constructor of the `LargeObject` class, which includes the last key section of code, displays a message and records the identity of the initializing thread.</span></span> <span data-ttu-id="0c1ca-173">Выходные данные программы отображаются в конце полный отрывок кода.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-173">The output from the program appears at the end of the full code listing.</span></span>  
  
 [!code-csharp[System.Lazy\`1#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#largector)]
 [!code-vb[System.Lazy\`1#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#largector)]  
  
> [!NOTE]
>  <span data-ttu-id="0c1ca-174">Для простоты в этом примере используется глобальный экземпляр класса <xref:System.Lazy%601>, а все методы объявлены как `static` (`Shared` в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="0c1ca-174">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="0c1ca-175">Это не является обязательными требованиями для использования отложенной инициализации.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-175">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#all)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="0c1ca-176">По умолчанию, все открытые и защищенные члены <see cref="T:System.Lazy`1" /> класса являются потокобезопасными и могут быть использованы одновременно из нескольких потоков.</span>
      <span class="sxs-lookup">
        <span data-stu-id="0c1ca-176">By default, all public and protected members of the <see cref="T:System.Lazy`1" /> class are thread safe and may be used concurrently from multiple threads.</span>
      </span>
      <span data-ttu-id="0c1ca-177">Эти потокобезопасности могут быть удалены, при необходимости и экземпляра, используя параметры типа.</span>
      <span class="sxs-lookup">
        <span data-stu-id="0c1ca-177">These thread-safety guarantees may be removed optionally and per instance, using parameters to the type's constructors.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.Threading.LazyThreadSafetyMode" />
    <related type="Article" href="~/docs/framework/performance/lazy-initialization.md">
      <span data-ttu-id="0c1ca-178">Отложенная инициализация</span>
      <span class="sxs-lookup">
        <span data-stu-id="0c1ca-178">Lazy Initialization</span>
      </span>
    </related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="0c1ca-179">Инициализирует новый экземпляр класса <see cref="T:System.Lazy`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c1ca-179">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="0c1ca-180">Инициализирует новый экземпляр класса <see cref="T:System.Lazy`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c1ca-180">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span>
          </span>
          <span data-ttu-id="0c1ca-181">При отложенной инициализации используется конструктор по умолчанию для целевого типа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c1ca-181">When lazy initialization occurs, the default constructor of the target type is used.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c1ca-182">Экземпляр, который создается с помощью этого конструктора могут использоваться одновременно из нескольких потоков.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-182">An instance that is created with this constructor may be used concurrently from multiple threads.</span></span>  
  
 <span data-ttu-id="0c1ca-183">Потокобезопасный режим из <xref:System.Lazy%601> экземпляр, который инициализируется этим конструктором <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-183">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>.</span></span> <span data-ttu-id="0c1ca-184">Режим потокобезопасности описывает поведение, когда несколько потоков пытаются инициализировать <xref:System.Lazy%601> экземпляра.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-184">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="0c1ca-185">Объект <xref:System.Lazy%601> , созданного с помощью этого конструктора не кэширует исключения.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-185">A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions.</span></span> <span data-ttu-id="0c1ca-186">Дополнительные сведения см. в описании класса <xref:System.Lazy%601> или перечисления <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-186">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c1ca-187">Ниже приведен пример использования этого конструктора.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-187">The following example demonstrates the use of this constructor.</span></span> <span data-ttu-id="0c1ca-188">Он также демонстрирует использование <xref:System.Lazy%601.%23ctor%28System.Boolean%29> конструктор (указание `true` для `isThreadSafe`) и <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> конструктор (указание <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> для `mode`).</span><span class="sxs-lookup"><span data-stu-id="0c1ca-188">It also illustrates the use of the <xref:System.Lazy%601.%23ctor%28System.Boolean%29> constructor (specifying `true` for `isThreadSafe`) and the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="0c1ca-189">Чтобы переключиться в другой конструктор, просто измените конструкторов, закомментированы.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-189">To switch to a different constructor, just change which constructors are commented out.</span></span>  
  
 <span data-ttu-id="0c1ca-190">В этом примере определяется класс `LargeObject`, для которого будет выполняться отложенная инициализация одним из нескольких потоков.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-190">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="0c1ca-191">Два основных строк кода в этом примере входит создание инициализатор и фактическую инициализацию.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-191">The two key lines of code in this example are the creation of the initializer and the actual initialization.</span></span> <span data-ttu-id="0c1ca-192">В начале метода `Main` в этом примере создается потокобезопасный отложенный инициализатор для класса `LargeObject`:</span><span class="sxs-lookup"><span data-stu-id="0c1ca-192">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctor#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctor#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="0c1ca-193">В примере создает и запускает три потока, которые блокируют на <xref:System.Threading.ManualResetEvent> объекта, так что пример может освободить потоков за один раз.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-193">The example creates and starts three threads that block on a <xref:System.Threading.ManualResetEvent> object, so that the example can release the threads all at once.</span></span> <span data-ttu-id="0c1ca-194">`ThreadProc` Метод, используемый вызовами все три потока <xref:System.Lazy%601.Value%2A> свойство для получения `LargeObject` экземпляр:</span><span class="sxs-lookup"><span data-stu-id="0c1ca-194">The `ThreadProc` method that's used by all three threads calls the <xref:System.Lazy%601.Value%2A> property to get the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctor#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctor#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="0c1ca-195"><xref:System.Lazy%601> Класс предоставляет блокировку, чтобы только один поток может создавать `LargeObject` экземпляра.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-195">The <xref:System.Lazy%601> class provides locking, so that only one thread is allowed to create the `LargeObject` instance.</span></span> <span data-ttu-id="0c1ca-196">В примере показано, что другие потоки все получить тот же экземпляр.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-196">The example demonstrates that the other threads all get the same instance.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c1ca-197">Для простоты в этом примере используется глобальный экземпляр класса <xref:System.Lazy%601>, а все методы объявлены как `static` (`Shared` в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="0c1ca-197">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="0c1ca-198">Это не является обязательными требованиями для использования отложенной инициализации.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-198">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctor#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctor#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md">
          <span data-ttu-id="0c1ca-199">Отложенная инициализация</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c1ca-199">Lazy Initialization</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (bool isThreadSafe);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool isThreadSafe) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (isThreadSafe As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(bool isThreadSafe);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : bool -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; isThreadSafe" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="isThreadSafe" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="isThreadSafe">
          <span data-ttu-id="0c1ca-200">Значение <see langword="true" />, чтобы сделать этот экземпляр доступным для одновременного использования несколькими потоками; значение <see langword="false" />, чтобы экземпляр мог использоваться только одним потоком.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c1ca-200">
              <see langword="true" /> to make this instance usable concurrently by multiple threads; <see langword="false" /> to make the instance usable by only one thread at a time.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c1ca-201">Инициализирует новый экземпляр класса <see cref="T:System.Lazy`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c1ca-201">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span>
          </span>
          <span data-ttu-id="0c1ca-202">При отложенной инициализации используется конструктор по умолчанию целевого типа и указанный режим инициализации.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c1ca-202">When lazy initialization occurs, the default constructor of the target type and the specified initialization mode are used.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c1ca-203">Потокобезопасный режим из <xref:System.Lazy%601> экземпляр, который инициализируется этим конструктором <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> Если `isThreadSafe` — `true`; в противном случае используется режим <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-203">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> if `isThreadSafe` is `true`; otherwise, the mode is <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>.</span></span> <span data-ttu-id="0c1ca-204">Режим потокобезопасности описывает поведение, когда несколько потоков пытаются инициализировать <xref:System.Lazy%601> экземпляра.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-204">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="0c1ca-205">Чтобы указать <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> режиме <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> или <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> конструктор.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-205">To specify the <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> mode, use the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> or <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor.</span></span>  
  
 <span data-ttu-id="0c1ca-206">Объект <xref:System.Lazy%601> , созданного с помощью этого конструктора не кэширует исключения.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-206">A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions.</span></span> <span data-ttu-id="0c1ca-207">Дополнительные сведения см. в описании класса <xref:System.Lazy%601> или перечисления <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-207">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c1ca-208">Ниже приведен пример использования этого конструктора для создания отложенный инициализатор, который не является потокобезопасным, для сценариев, где весь доступ к неактивно инициализированного объекта происходит в том же потоке.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-208">The following example demonstrates the use of this constructor to create a lazy initializer that is not thread safe, for scenarios where all access to the lazily initialized object occurs on the same thread.</span></span> <span data-ttu-id="0c1ca-209">Он также демонстрирует использование <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> конструктор (указание <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> для `mode`.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-209">It also demonstrates the use of the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`.</span></span> <span data-ttu-id="0c1ca-210">Чтобы переключиться в другой конструктор, просто измените, какой конструктор закомментирован.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-210">To switch to a different constructor, just change which constructor is commented out.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c1ca-211">Для кода, который демонстрирует, как использовать этот конструктор в сценариях с несколькими потоками (указание `true` для `isThreadSafe`), см. в примере <xref:System.Lazy%601.%23ctor> конструктор.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-211">For code that demonstrates how to use this constructor in multithreaded scenarios (specifying `true` for `isThreadSafe`), see the example for the <xref:System.Lazy%601.%23ctor> constructor.</span></span>  
  
 <span data-ttu-id="0c1ca-212">В примере определяется `LargeObject` класс, который будет выполняться отложенная инициализация.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-212">The example defines a `LargeObject` class that will be initialized lazily.</span></span> <span data-ttu-id="0c1ca-213">В `Main` метод, в примере создается <xref:System.Lazy%601> экземпляр и затем паузы.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-213">In the `Main` method, the example creates a <xref:System.Lazy%601> instance and then pauses.</span></span> <span data-ttu-id="0c1ca-214">При нажатии клавиши **ввод** ключа, пример обращается к <xref:System.Lazy%601.Value%2A> свойство <xref:System.Lazy%601> экземпляр, который приводит к инициализации возникает.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-214">When you press the **Enter** key, the example accesses the <xref:System.Lazy%601.Value%2A> property of the <xref:System.Lazy%601> instance, which causes initialization to occur.</span></span> <span data-ttu-id="0c1ca-215">Конструктор `LargeObject` класс отображает сообщение в консоли.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-215">The constructor of the `LargeObject` class displays a console message.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c1ca-216">Для простоты в этом примере используется глобальный экземпляр класса <xref:System.Lazy%601>, а все методы объявлены как `static` (`Shared` в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="0c1ca-216">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="0c1ca-217">Это не является обязательными требованиями для использования отложенной инициализации.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-217">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorBool#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorbool/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorBool#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorbool/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md">
          <span data-ttu-id="0c1ca-218">Отложенная инициализация</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c1ca-218">Lazy Initialization</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (Func&lt;T&gt; valueFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Func{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(Func&lt;T&gt; ^ valueFactory);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : Func&lt;'T&gt; -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; valueFactory" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="valueFactory">
          <span data-ttu-id="0c1ca-219">Делегат, вызываемый для создания значения с отложенной инициализацией при необходимости.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c1ca-219">The delegate that is invoked to produce the lazily initialized value when it is needed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c1ca-220">Инициализирует новый экземпляр класса <see cref="T:System.Lazy`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c1ca-220">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span>
          </span>
          <span data-ttu-id="0c1ca-221">Когда происходит отложенная инициализация, используется заданная функция инициализации.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c1ca-221">When lazy initialization occurs, the specified initialization function is used.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c1ca-222">Экземпляр, который создается с помощью этого конструктора могут использоваться одновременно из нескольких потоков.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-222">An instance that is created with this constructor may be used concurrently from multiple threads.</span></span>  
  
 <span data-ttu-id="0c1ca-223">Потокобезопасный режим из <xref:System.Lazy%601> экземпляр, который инициализируется этим конструктором <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-223">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>.</span></span> <span data-ttu-id="0c1ca-224">Режим потокобезопасности описывает поведение, когда несколько потоков пытаются инициализировать <xref:System.Lazy%601> экземпляра.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-224">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="0c1ca-225">Исключения, вызываемые по `valueFactory` кэшируются.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-225">Exceptions that are thrown by `valueFactory` are cached.</span></span> <span data-ttu-id="0c1ca-226">Дополнительные сведения см. в описании класса <xref:System.Lazy%601> или перечисления <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-226">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c1ca-227">Ниже приведен пример использования этого конструктора для предоставления отложенной инициализации с кэширование исключений.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-227">The following example demonstrates the use of this constructor to provide lazy initialization with exception caching.</span></span> <span data-ttu-id="0c1ca-228">Он также демонстрирует использование <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> конструктор (указание `true` для `isThreadSafe`) и <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> конструктор (указание <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> для `mode`).</span><span class="sxs-lookup"><span data-stu-id="0c1ca-228">It also demonstrates the use of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor (specifying `true` for `isThreadSafe`) and the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="0c1ca-229">Чтобы переключиться в другой конструктор, просто измените конструкторов, закомментированы.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-229">To switch to a different constructor, just change which constructors are commented out.</span></span>  
  
 <span data-ttu-id="0c1ca-230">В этом примере определяется класс `LargeObject`, для которого будет выполняться отложенная инициализация одним из нескольких потоков.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-230">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="0c1ca-231">Три основные части кода, иллюстрируют Создание инициализатор, фактическую инициализацию и конструктор `LargeObject` класс, который демонстрирует кэширование исключений.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-231">The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor of the `LargeObject` class, which demonstrates exception caching.</span></span> <span data-ttu-id="0c1ca-232">В начале метода `Main` в этом примере создается потокобезопасный отложенный инициализатор для класса `LargeObject`:</span><span class="sxs-lookup"><span data-stu-id="0c1ca-232">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorFunc#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="0c1ca-233">В примере создает и запускает три потока.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-233">The example creates and starts three threads.</span></span> <span data-ttu-id="0c1ca-234">`ThreadProc` Метод, используемый вызовами все три потока <xref:System.Lazy%601.Value%2A> свойство для получения `LargeObject` экземпляр:</span><span class="sxs-lookup"><span data-stu-id="0c1ca-234">The `ThreadProc` method that's used by all three threads calls the <xref:System.Lazy%601.Value%2A> property to get the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorFunc#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="0c1ca-235">В конструкторе класса `LargeObject` , третий ключа раздела кода создает исключение первом `LargeObject` экземпляр создается, но после этого позволяет создавать экземпляр возникает:</span><span class="sxs-lookup"><span data-stu-id="0c1ca-235">In the constructor of the `LargeObject` class, the third key section of code throws an exception the first time a `LargeObject` instance is created, but thereafter allows instance creation to occur:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#largector)]
 [!code-vb[System.Lazy\`1.ctorFunc#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#largector)]  
  
 <span data-ttu-id="0c1ca-236">При запуске примере первый поток, который пытается создать экземпляр `LargeObject` завершается ошибкой и исключение перехватывается.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-236">When the example is run, the first thread that tries to create an instance of `LargeObject` fails, and the exception is caught.</span></span> <span data-ttu-id="0c1ca-237">Можно предположить, что следующий поток успешно создать экземпляр, но <xref:System.Lazy%601> объект в кэш исключение.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-237">You might expect that the next thread would successfully create an instance, but the <xref:System.Lazy%601> object has cached the exception.</span></span> <span data-ttu-id="0c1ca-238">По этой причине все три потока исключение.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-238">Because of this, all three threads throw the exception.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c1ca-239">Для простоты в этом примере используется глобальный экземпляр класса <xref:System.Lazy%601>, а все методы объявлены как `static` (`Shared` в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="0c1ca-239">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="0c1ca-240">Это не является обязательными требованиями для использования отложенной инициализации.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-240">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorFunc#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0c1ca-241">Свойство <paramref name="valueFactory" /> имеет значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c1ca-241">
              <paramref name="valueFactory" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md">
          <span data-ttu-id="0c1ca-242">Отложенная инициализация</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c1ca-242">Lazy Initialization</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (System.Threading.LazyThreadSafetyMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Threading.LazyThreadSafetyMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (mode As LazyThreadSafetyMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(System::Threading::LazyThreadSafetyMode mode);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : System.Threading.LazyThreadSafetyMode -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; mode" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="mode" Type="System.Threading.LazyThreadSafetyMode" />
      </Parameters>
      <Docs>
        <param name="mode">
          <span data-ttu-id="0c1ca-243">Одно из значений перечисления, задающее потокобезопасный режим.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c1ca-243">One of the enumeration values that specifies the thread safety mode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c1ca-244">Инициализирует новый экземпляр класса <see cref="T:System.Lazy`1" />, использующий конструктор по умолчанию <paramref name="T" /> и заданный потокобезопасный режим.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c1ca-244">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class that uses the default constructor of <paramref name="T" /> and the specified thread-safety mode.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c1ca-245">Потокобезопасный режим из <xref:System.Lazy%601> экземпляр описывает поведение, когда несколько потоков пытаются инициализировать <xref:System.Lazy%601> экземпляра.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-245">The thread safety mode of a <xref:System.Lazy%601> instance describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="0c1ca-246">Объект <xref:System.Lazy%601> , созданного с помощью этого конструктора не кэширует исключения.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-246">A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions.</span></span> <span data-ttu-id="0c1ca-247">Дополнительные сведения см. в описании класса <xref:System.Lazy%601> или перечисления <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-247">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c1ca-248">Ниже приведен пример использования этого конструктора для создания отложенный инициализатор, который позволяет нескольким потокам состязаются за право отложенного создания объекта.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-248">The following example demonstrates the use of this constructor to create a lazy initializer that enables multiple threads to race to create an object lazily.</span></span> <span data-ttu-id="0c1ca-249">Несколько потоков может быть выполнена успешно при создании экземпляров, но все потоки использовать экземпляр, который сначала был создан.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-249">Multiple threads might succeed in creating instances, but all threads use the instance that was created first.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c1ca-250">Пример, в котором показано, как использовать этот конструктор в однопоточных сценариях (указание <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> для `mode`), см. в разделе <xref:System.Lazy%601.%23ctor%28System.Boolean%29> конструктор.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-250">For an example that demonstrates how to use this constructor in single-threaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor%28System.Boolean%29> constructor.</span></span> <span data-ttu-id="0c1ca-251">Пример, демонстрирующий этот конструктор используется для предоставления блокировки вместо состояния гонки в сценариях с несколькими потоками (указание <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> для `mode`), см. в разделе <xref:System.Lazy%601.%23ctor> конструктор.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-251">For an example that demonstrates how to use this constructor to provide locking instead of race conditions in multithreaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor> constructor.</span></span>  
  
 <span data-ttu-id="0c1ca-252">В примере определяется `LargeObject` класс, который будет выполняться отложенная инициализация одним из нескольких потоков.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-252">The example defines a `LargeObject` class that will be initialized lazily by any of several threads.</span></span> <span data-ttu-id="0c1ca-253">Три основные части кода, иллюстрируют Создание инициализатор, фактическую инициализацию и конструктор и метод завершения из `LargeObject` класса.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-253">The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor and finalizer of the `LargeObject` class.</span></span> <span data-ttu-id="0c1ca-254">В начале `Main` метод, в примере создается <xref:System.Lazy%601> объект, который выполняет отложенной инициализации `LargeObject`:</span><span class="sxs-lookup"><span data-stu-id="0c1ca-254">At the beginning of the `Main` method, the example creates the <xref:System.Lazy%601> object that performs lazy initialization of the `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorLTSM#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="0c1ca-255">В примере создает и запускает три потока, которые блокируют на <xref:System.Threading.ManualResetEvent> объекта, так что пример может освободить потоков за один раз.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-255">The example creates and starts three threads that block on a <xref:System.Threading.ManualResetEvent> object, so that the example can release the threads all at once.</span></span> <span data-ttu-id="0c1ca-256">В `ThreadProc` метод, который используется для всех трех потоков, вызвав <xref:System.Lazy%601.Value%2A> создает свойство `LargeObject` экземпляр:</span><span class="sxs-lookup"><span data-stu-id="0c1ca-256">In the `ThreadProc` method that's used by all three threads, calling the <xref:System.Lazy%601.Value%2A> property creates the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorLTSM#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="0c1ca-257">Так как конструктор для <xref:System.Lazy%601> указанный экземпляр <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, все три потока разрешено создавать `LargeObject` экземпляров.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-257">Because the constructor for the <xref:System.Lazy%601> instance specified <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, all three threads are allowed to create `LargeObject` instances.</span></span> <span data-ttu-id="0c1ca-258">Это продемонстрировано в примере путем отображения сообщения консоли, в конструкторе и в методе завершения `LargeObject` класса:</span><span class="sxs-lookup"><span data-stu-id="0c1ca-258">The example demonstrates this by displaying console messages in the constructor and in the finalizer of the `LargeObject` class:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#CtorFinalizer](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#ctorfinalizer)]
 [!code-vb[System.Lazy\`1.ctorLTSM#CtorFinalizer](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#ctorfinalizer)]  
  
 <span data-ttu-id="0c1ca-259">Тем не менее <xref:System.Lazy%601> объект гарантирует, что только один экземпляр используется всеми потоками.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-259">However, the <xref:System.Lazy%601> object ensures that only one instance is used by all threads.</span></span> <span data-ttu-id="0c1ca-260">Из примера видно, что все три потока использовать в том же экземпляре, а также показано, что двух других экземпляров может быть удален сборщиком мусора.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-260">The output from the example shows that all three threads use the same instance, and also shows that the other two instances can be reclaimed by garbage collection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c1ca-261">Для простоты в этом примере используется глобальный экземпляр класса <xref:System.Lazy%601>, а все методы объявлены как `static` (`Shared` в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="0c1ca-261">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="0c1ca-262">Это не является обязательными требованиями для использования отложенной инициализации.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-262">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorLTSM#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="0c1ca-263">Параметр <paramref name="mode" /> содержит недопустимое значение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c1ca-263">
              <paramref name="mode" /> contains an invalid value.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.LazyThreadSafetyMode" />
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md">
          <span data-ttu-id="0c1ca-264">Отложенная инициализация</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c1ca-264">Lazy Initialization</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(T value);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : 'T -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (Func&lt;T&gt; valueFactory, bool isThreadSafe);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory, bool isThreadSafe) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T), isThreadSafe As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(Func&lt;T&gt; ^ valueFactory, bool isThreadSafe);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : Func&lt;'T&gt; * bool -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; (valueFactory, isThreadSafe)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
        <Parameter Name="isThreadSafe" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="valueFactory">
          <span data-ttu-id="0c1ca-265">Делегат, вызываемый для создания значения с отложенной инициализацией при необходимости.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c1ca-265">The delegate that is invoked to produce the lazily initialized value when it is needed.</span>
          </span>
        </param>
        <param name="isThreadSafe">
          <span data-ttu-id="0c1ca-266">Значение <see langword="true" />, чтобы сделать этот экземпляр доступным для одновременного использования несколькими потоками; значение <see langword="false" />, чтобы этот экземпляр мог использоваться только одним потоком в каждый момент времени.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c1ca-266">
              <see langword="true" /> to make this instance usable concurrently by multiple threads; <see langword="false" /> to make this instance usable by only one thread at a time.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c1ca-267">Инициализирует новый экземпляр класса <see cref="T:System.Lazy`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c1ca-267">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span>
          </span>
          <span data-ttu-id="0c1ca-268">Когда происходит отложенная инициализация, используются заданные функция инициализации и режим инициализации.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c1ca-268">When lazy initialization occurs, the specified initialization function and initialization mode are used.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c1ca-269">Потокобезопасный режим из <xref:System.Lazy%601> экземпляр, который инициализируется этим конструктором <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> Если `isThreadSafe` — `true`; в противном случае используется режим <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-269">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> if `isThreadSafe` is `true`; otherwise, the mode is <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>.</span></span> <span data-ttu-id="0c1ca-270">Режим потокобезопасности описывает поведение, когда несколько потоков пытаются инициализировать <xref:System.Lazy%601> экземпляра.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-270">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="0c1ca-271">Чтобы указать <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> режиме <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> или <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> конструктор.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-271">To specify the <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> mode, use the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> or <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor.</span></span>  
  
 <span data-ttu-id="0c1ca-272">Исключения, вызываемые по `valueFactory` кэшируются.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-272">Exceptions that are thrown by `valueFactory` are cached.</span></span> <span data-ttu-id="0c1ca-273">Дополнительные сведения см. в описании класса <xref:System.Lazy%601> или перечисления <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-273">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c1ca-274">Ниже приведен пример использования этого конструктора для предоставления отложенной инициализации с исключением, кэширование, в сценарии с одним потоком.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-274">The following example demonstrates the use of this constructor to provide lazy initialization with exception caching, in a scenario with a single thread.</span></span> <span data-ttu-id="0c1ca-275">Он также демонстрирует использование <xref:System.Lazy%601.%23ctor%2A> конструктор (указание <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> для `mode`).</span><span class="sxs-lookup"><span data-stu-id="0c1ca-275">It also demonstrates the use of the  <xref:System.Lazy%601.%23ctor%2A> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="0c1ca-276">Чтобы переключиться в конструктор, просто измените, какой конструктор закомментирован.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-276">To switch to that constructor, just change which constructor is commented out.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c1ca-277">Для кода, который демонстрирует, как использовать этот конструктор в сценариях с несколькими потоками (указание `true` для `isThreadSafe`), см. в примере <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> конструктор.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-277">For code that demonstrates how to use this constructor in multithreaded scenarios (specifying `true` for `isThreadSafe`), see the example for the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> constructor.</span></span>  
  
 <span data-ttu-id="0c1ca-278">В этом примере определяется класс `LargeObject`, для которого будет выполняться отложенная инициализация одним из нескольких потоков.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-278">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="0c1ca-279">Три основные части кода, иллюстрируют Создание инициализатор, фактическую инициализацию и конструктор `LargeObject` класс, который демонстрирует кэширование исключений.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-279">The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor of the `LargeObject` class, which demonstrates exception caching.</span></span> <span data-ttu-id="0c1ca-280">В начале метода `Main` в этом примере создается потокобезопасный отложенный инициализатор для класса `LargeObject`:</span><span class="sxs-lookup"><span data-stu-id="0c1ca-280">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="0c1ca-281">В вызове конструктора `isThreadSafe` параметр `false`, поэтому <xref:System.Lazy%601> не является потокобезопасным.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-281">In the call to the constructor, the `isThreadSafe` parameter is `false`, so the <xref:System.Lazy%601> is not thread safe.</span></span> <span data-ttu-id="0c1ca-282">Так как он не является потокобезопасным, в примере вызывается <xref:System.Lazy%601.Value%2A> свойство три раза в одном потоке:</span><span class="sxs-lookup"><span data-stu-id="0c1ca-282">Because it's not thread safe, the example calls the <xref:System.Lazy%601.Value%2A> property three times on the same thread:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="0c1ca-283">В конструкторе класса `LargeObject` , третий ключа раздела кода создает исключение первом `LargeObject` экземпляр создается, но после этого позволяет создавать экземпляр возникает:</span><span class="sxs-lookup"><span data-stu-id="0c1ca-283">In the constructor of the `LargeObject` class, the third key section of code throws an exception the first time a `LargeObject` instance is created, but thereafter allows instance creation to occur:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#largector)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#largector)]  
  
 <span data-ttu-id="0c1ca-284">Если пример выполняется, первая попытка создать экземпляр `LargeObject` завершается ошибкой и исключение перехватывается.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-284">When the example is run, the first attempt to create an instance of `LargeObject` fails, and the exception is caught.</span></span> <span data-ttu-id="0c1ca-285">Можно предположить, что следующая попытка будет выполнено успешно, но <xref:System.Lazy%601> объект в кэш исключение.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-285">You might expect that the next attempt would succeed, but the <xref:System.Lazy%601> object has cached the exception.</span></span> <span data-ttu-id="0c1ca-286">По этой причине все три попытки исключение.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-286">Because of this, all three attempts throw the exception.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c1ca-287">Для простоты в этом примере используется глобальный экземпляр класса <xref:System.Lazy%601>, а все методы объявлены как `static` (`Shared` в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="0c1ca-287">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="0c1ca-288">Это не является обязательными требованиями для использования отложенной инициализации.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-288">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0c1ca-289">Свойство <paramref name="valueFactory" /> имеет значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c1ca-289">
              <paramref name="valueFactory" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md">
          <span data-ttu-id="0c1ca-290">Отложенная инициализация</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c1ca-290">Lazy Initialization</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (Func&lt;T&gt; valueFactory, System.Threading.LazyThreadSafetyMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory, valuetype System.Threading.LazyThreadSafetyMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T), mode As LazyThreadSafetyMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(Func&lt;T&gt; ^ valueFactory, System::Threading::LazyThreadSafetyMode mode);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : Func&lt;'T&gt; * System.Threading.LazyThreadSafetyMode -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; (valueFactory, mode)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
        <Parameter Name="mode" Type="System.Threading.LazyThreadSafetyMode" />
      </Parameters>
      <Docs>
        <param name="valueFactory">
          <span data-ttu-id="0c1ca-291">Делегат, вызываемый для создания значения с отложенной инициализацией при необходимости.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c1ca-291">The delegate that is invoked to produce the lazily initialized value when it is needed.</span>
          </span>
        </param>
        <param name="mode">
          <span data-ttu-id="0c1ca-292">Одно из значений перечисления, задающее потокобезопасный режим.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c1ca-292">One of the enumeration values that specifies the thread safety mode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0c1ca-293">Инициализирует новый экземпляр класса <see cref="T:System.Lazy`1" />, который использует заданную функцию инициализации и потокобезопасный режим.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c1ca-293">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class that uses the specified initialization function and thread-safety mode.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c1ca-294">Потокобезопасный режим из <xref:System.Lazy%601> экземпляр описывает поведение, когда несколько потоков пытаются инициализировать <xref:System.Lazy%601> экземпляра.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-294">The thread safety mode of a <xref:System.Lazy%601> instance describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="0c1ca-295">Исключения, вызываемые по `valueFactory` кэшируются, если не `mode` является <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-295">Exceptions that are thrown by `valueFactory` are cached, unless `mode` is <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>.</span></span> <span data-ttu-id="0c1ca-296">Дополнительные сведения см. в описании класса <xref:System.Lazy%601> или перечисления <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-296">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c1ca-297">Ниже приведен пример использования этого конструктора для создания отложенный инициализатор, который позволяет нескольким потокам состязаются за право отложенного создания объекта.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-297">The following example demonstrates the use of this constructor to create a lazy initializer that enables multiple threads to race to create an object lazily.</span></span> <span data-ttu-id="0c1ca-298">Несколько потоков может быть выполнена успешно при создании экземпляров, но все потоки использовать экземпляр, который сначала был создан.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-298">Multiple threads might succeed in creating instances, but all threads use the instance that was created first.</span></span> <span data-ttu-id="0c1ca-299">Кроме того, в примере показано, что исключения не кэшируются при указании <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, даже если инициализация выполняется с помощью функции, а не конструктором по умолчанию неактивно созданного типа.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-299">In addition, the example demonstrates that exceptions are never cached when you specify <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, even if initialization is performed by a function instead of by the default constructor of the lazily created type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c1ca-300">Пример, в котором показано, как использовать этот конструктор в однопоточных сценариях (указание <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> для `mode`), см. в разделе <xref:System.Lazy%601.%23ctor%28System.Boolean%29> конструктор.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-300">For an example that demonstrates how to use this constructor in single-threaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor%28System.Boolean%29> constructor.</span></span> <span data-ttu-id="0c1ca-301">Пример, демонстрирующий этот конструктор используется для предоставления блокировки вместо состояния гонки в сценариях с несколькими потоками (указание <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> для `mode`), см. в разделе <xref:System.Lazy%601.%23ctor> конструктор.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-301">For an example that demonstrates how to use this constructor to provide locking instead of race conditions in multithreaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor> constructor.</span></span>  
  
 <span data-ttu-id="0c1ca-302">В примере определяется `LargeObject` класс, который будет выполняться отложенная инициализация одним из нескольких потоков.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-302">The example defines a `LargeObject` class that will be initialized lazily by any of several threads.</span></span> <span data-ttu-id="0c1ca-303">Четыре основные разделы кода иллюстрируют Создание инициализатор, фактическую инициализацию, функцию инициализации и конструктора и метода завершения `LargeObject` класса.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-303">The four key sections of code illustrate the creation of the initializer, the actual initialization, the initialization function, and the constructor and finalizer of the `LargeObject` class.</span></span> <span data-ttu-id="0c1ca-304">В начале `Main` метод, в примере создается <xref:System.Lazy%601> объект, который выполняет отложенной инициализации `LargeObject`:</span><span class="sxs-lookup"><span data-stu-id="0c1ca-304">At the beginning of the `Main` method, the example creates the <xref:System.Lazy%601> object that performs lazy initialization of the `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="0c1ca-305">Функция отложенный инициализатор для выполнения инициализации.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-305">The lazy initializer uses a function to perform the initialization.</span></span> <span data-ttu-id="0c1ca-306">В этом случае функция необходима, поскольку нет конструктора по умолчанию для `LargeObject` класса.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-306">In this case, a function is required because there is no default constructor for the `LargeObject` class.</span></span>  
  
 <span data-ttu-id="0c1ca-307">В примере создает и запускает три потока, которые блокируют на <xref:System.Threading.ManualResetEvent> объекта, так что пример может освободить потоков за один раз.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-307">The example creates and starts three threads that block on a <xref:System.Threading.ManualResetEvent> object, so that the example can release the threads all at once.</span></span> <span data-ttu-id="0c1ca-308">В `ThreadProc` метод, который используется для всех трех потоков, вызвав <xref:System.Lazy%601.Value%2A> создает свойство `LargeObject` экземпляр:</span><span class="sxs-lookup"><span data-stu-id="0c1ca-308">In the `ThreadProc` method that's used by all three threads, calling the <xref:System.Lazy%601.Value%2A> property creates the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="0c1ca-309">В третьем ключа раздела кода, функция отложенной инициализации вызывается для создания `LargeObject` экземпляра.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-309">In the third key section of code, the lazy initialization function is called to create the `LargeObject` instance.</span></span> <span data-ttu-id="0c1ca-310">Функция создает исключение первый времени при вызове:</span><span class="sxs-lookup"><span data-stu-id="0c1ca-310">The function throws an exception the first time it's called:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#FactoryFunc](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#factoryfunc)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#FactoryFunc](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#factoryfunc)]  
  
 <span data-ttu-id="0c1ca-311">Для любого другого <xref:System.Threading.LazyThreadSafetyMode> параметр необработанного исключения в функции инициализации будет кэшироваться.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-311">With any other <xref:System.Threading.LazyThreadSafetyMode> setting, an unhandled exception in the initialization function would be cached.</span></span> <span data-ttu-id="0c1ca-312">Тем не менее <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> отключает кэширование исключений.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-312">However, <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> suppresses exception caching.</span></span> <span data-ttu-id="0c1ca-313">Выходные данные примера показано, что повторная попытка инициализировать объект завершается успешно.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-313">The output from the example demonstrates that a subsequent attempt to initialize the object succeeds.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c1ca-314">После сообщения о том, что другие потоки успешно инициализирован объект обычно отображается сообщение об исключении.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-314">The exception message usually appears after messages indicating that other threads have successfully initialized the object.</span></span> <span data-ttu-id="0c1ca-315">Это из-за задержки, связанные с Создание и перехват исключения.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-315">This is because of the delay introduced by throwing and catching the exception.</span></span>  
  
 <span data-ttu-id="0c1ca-316">Так как конструктор для <xref:System.Lazy%601> указанный экземпляр <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, все три потока разрешено создавать `LargeObject` экземпляров.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-316">Because the constructor for the <xref:System.Lazy%601> instance specified <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, all three threads are allowed to create `LargeObject` instances.</span></span> <span data-ttu-id="0c1ca-317">Это продемонстрировано в примере путем отображения сообщения консоли, в конструкторе и в методе завершения `LargeObject` класса:</span><span class="sxs-lookup"><span data-stu-id="0c1ca-317">The example demonstrates this by displaying console messages in the constructor and in the finalizer of the `LargeObject` class:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#CtorFinalizer](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#ctorfinalizer)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#CtorFinalizer](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#ctorfinalizer)]  
  
 <span data-ttu-id="0c1ca-318"><xref:System.Lazy%601> Объект гарантирует, что только один экземпляр используется всеми потоками (за исключением самого потока, где функция инициализации вызывает исключение).</span><span class="sxs-lookup"><span data-stu-id="0c1ca-318">The <xref:System.Lazy%601> object ensures that only one instance is used by all threads (except the thread where the initialization function throws an exception).</span></span> <span data-ttu-id="0c1ca-319">Это показано в выходных данных из примера.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-319">The output from the example shows this.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c1ca-320">Для простоты в этом примере используется глобальный экземпляр класса <xref:System.Lazy%601>, а все методы объявлены как `static` (`Shared` в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="0c1ca-320">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="0c1ca-321">Это не является обязательными требованиями для использования отложенной инициализации.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-321">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="0c1ca-322">Параметр <paramref name="mode" /> содержит недопустимое значение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c1ca-322">
              <paramref name="mode" /> contains an invalid value.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0c1ca-323">Свойство <paramref name="valueFactory" /> имеет значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c1ca-323">
              <paramref name="valueFactory" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md">
          <span data-ttu-id="0c1ca-324">Отложенная инициализация</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c1ca-324">Lazy Initialization</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="IsValueCreated">
      <MemberSignature Language="C#" Value="public bool IsValueCreated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValueCreated" />
      <MemberSignature Language="DocId" Value="P:System.Lazy`1.IsValueCreated" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsValueCreated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsValueCreated { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsValueCreated : bool" Usage="System.Lazy&lt;'T&gt;.IsValueCreated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0c1ca-325">Получает значение, которое показывает, создано ли значение для этого экземпляра <see cref="T:System.Lazy`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c1ca-325">Gets a value that indicates whether a value has been created for this <see cref="T:System.Lazy`1" /> instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0c1ca-326">Значение <see langword="true" />, если значение создано для этого экземпляра <see cref="T:System.Lazy`1" />; в противном случае — значение <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c1ca-326">
              <see langword="true" /> if a value has been created for this <see cref="T:System.Lazy`1" /> instance; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c1ca-327">Когда происходит отложенная инициализация для <xref:System.Lazy%601> экземпляр, это может привести значение создаваемого или возникает исключение.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-327">When lazy initialization occurs for a <xref:System.Lazy%601> instance, it may result in either a value being created or an exception being thrown.</span></span> <span data-ttu-id="0c1ca-328">Если исключение создается, последующее поведение <xref:System.Lazy%601> экземпляр зависит от того, кэширование исключений, является ли в силе.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-328">If an exception is thrown, subsequent behavior of the <xref:System.Lazy%601> instance depends on whether exception caching is in effect.</span></span> <span data-ttu-id="0c1ca-329">Если <xref:System.Lazy%601> экземпляр был создан с помощью конструктора, который не содержит функцию, то кэширование исключений не действует.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-329">If the <xref:System.Lazy%601> instance was created by using a constructor that does not specify an initialization function, then exception caching is not in effect.</span></span> <span data-ttu-id="0c1ca-330">Повторная попытка инициализировать <xref:System.Lazy%601> может быть выполнена успешно и после успешной инициализации <xref:System.Lazy%601.IsValueCreated%2A> возвращает `true`.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-330">A subsequent attempt to initialize the <xref:System.Lazy%601> might succeed, and after successful initialization the <xref:System.Lazy%601.IsValueCreated%2A> property returns `true`.</span></span> <span data-ttu-id="0c1ca-331">Если <xref:System.Lazy%601> экземпляр был создан с помощью функции инициализации (определяется `valueFactory` параметр <xref:System.Lazy%601> конструктора), а затем кэширование исключений управляется потокобезопасный режим.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-331">If the <xref:System.Lazy%601> instance was created with an initialization function (specified by the `valueFactory` parameter of the <xref:System.Lazy%601> constructor), then exception caching is controlled by the thread safety mode.</span></span>  
  
-   <span data-ttu-id="0c1ca-332">Если используется режим <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> или <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>, имеется второй шанс инициализации <xref:System.Lazy%601> экземпляра.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-332">If the mode is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> or <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>, there is no second chance to initialize the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="0c1ca-333">Если исключение возникает и обрабатывается в функции инициализации, исключение кэшируется и снова на последующие обращения к <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> свойство.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-333">If an exception occurs and is unhandled in the initialization function, that exception is cached and rethrown on subsequent accesses of the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="0c1ca-334">Значение не создается в том случае, если создается исключение, поэтому в таких случаях <xref:System.Lazy%601.IsValueCreated%2A> возвращает `false`.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-334">No value is created if an exception is thrown, so in such cases <xref:System.Lazy%601.IsValueCreated%2A> returns `false`.</span></span>  
  
-   <span data-ttu-id="0c1ca-335">Если используется режим <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, первый поток, который успешно работает функция инициализации (или конструктор по умолчанию) создает значение <xref:System.Lazy%601> экземпляра.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-335">If the mode is <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, the first thread that succeeds in running the initialization function (or the default constructor) creates the value for the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="0c1ca-336">Если функция инициализации вызывает исключение в одном потоке, другие потоки могут по-прежнему пытаться инициализировать <xref:System.Lazy%601> экземпляра.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-336">If the initialization function throws an exception on one thread, other threads can still try to initialize the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="0c1ca-337">Пока это значение создается, <xref:System.Lazy%601.IsValueCreated%2A> возвращает `false`.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-337">Until the value is created, the <xref:System.Lazy%601.IsValueCreated%2A> property returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.LazyThreadSafetyMode" />
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md">
          <span data-ttu-id="0c1ca-338">Отложенная инициализация</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c1ca-338">Lazy Initialization</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="lazy.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="0c1ca-339">Создает и возвращает строковое представление свойства <see cref="P:System.Lazy`1.Value" /> для данного экземпляра.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c1ca-339">Creates and returns a string representation of the <see cref="P:System.Lazy`1.Value" /> property for this instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0c1ca-340">Результат вызова метода <see cref="M:System.Object.ToString" /> для свойства <see cref="P:System.Lazy`1.Value" /> данного экземпляра, если значение создано (то есть если свойство <see cref="P:System.Lazy`1.IsValueCreated" /> возвращает <see langword="true" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c1ca-340">The result of calling the <see cref="M:System.Object.ToString" /> method on the <see cref="P:System.Lazy`1.Value" /> property for this instance, if the value has been created (that is, if the <see cref="P:System.Lazy`1.IsValueCreated" /> property returns <see langword="true" />).</span>
          </span>
          <span data-ttu-id="0c1ca-341">В противном случае строка, указывающая, что значение не создано.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c1ca-341">Otherwise, a string indicating that the value has not been created.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c1ca-342">Вызов этого метода не приводит к инициализации.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-342">Calling this method does not cause initialization.</span></span>  
  
 <span data-ttu-id="0c1ca-343"><xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> Свойство может быть `null` после отложенной инициализации, если метод фабрики, был указан для `valueFactory` параметр <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>, или <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> конструктор возвращает `null`.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-343">The <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property can be `null` after lazy initialization if the factory method that was specified for the `valueFactory` parameter of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>, or <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="0c1ca-344">Значение свойства <see cref="P:System.Lazy`1.Value" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c1ca-344">The <see cref="P:System.Lazy`1.Value" /> property is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public T Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Value" />
      <MemberSignature Language="DocId" Value="P:System.Lazy`1.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T Value { T get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : 'T" Usage="System.Lazy&lt;'T&gt;.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0c1ca-345">Получает значение с отложенной инициализацией текущего экземпляра <see cref="T:System.Lazy`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c1ca-345">Gets the lazily initialized value of the current <see cref="T:System.Lazy`1" /> instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0c1ca-346">Значение с отложенной инициализацией текущего экземпляра <see cref="T:System.Lazy`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c1ca-346">The lazily initialized value of the current <see cref="T:System.Lazy`1" /> instance.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c1ca-347">Если <xref:System.Lazy%601.IsValueCreated%2A?displayProperty=nameWithType> свойство `false`, доступ к свойству <xref:System.Lazy%601.Value%2A> свойство вызывает инициализацию.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-347">If the <xref:System.Lazy%601.IsValueCreated%2A?displayProperty=nameWithType> property is `false`, accessing the <xref:System.Lazy%601.Value%2A> property forces initialization.</span></span>  
  
 <span data-ttu-id="0c1ca-348">Помимо исключений, которые находятся в списке <xref:System.Lazy%601.Value%2A> свойство можно вызывать любое необработанное исключение, вызванное фабричный метод, который был передан `valueFactory` параметр <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>, или <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> конструктор.</span><span class="sxs-lookup"><span data-stu-id="0c1ca-348">In addition to the exceptions that are listed, the <xref:System.Lazy%601.Value%2A> property can throw any unhandled exception that is thrown by the factory method that was passed to the `valueFactory` parameter of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>, or <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="0c1ca-349">Экземпляр <see cref="T:System.Lazy`1" /> инициализируется для использования конструктора по умолчанию, имеющего тип с отложенной инициализацией, а разрешения для доступа к этому конструктору отсутствуют.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c1ca-349">The <see cref="T:System.Lazy`1" /> instance is initialized to use the default constructor of the type that is being lazily initialized, and permissions to access the constructor are missing.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMemberException">
          <span data-ttu-id="0c1ca-350">Экземпляр <see cref="T:System.Lazy`1" /> инициализируется для использования конструктора по умолчанию, имеющего тип с отложенной инициализацией, а этот тип не имеет общего конструктора без параметров.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c1ca-350">The <see cref="T:System.Lazy`1" /> instance is initialized to use the default constructor of the type that is being lazily initialized, and that type does not have a public, parameterless constructor.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="0c1ca-351">Функция инициализации пытается получить доступ к <see cref="P:System.Lazy`1.Value" /> в данном экземпляре.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c1ca-351">The initialization function tries to access <see cref="P:System.Lazy`1.Value" /> on this instance.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md">
          <span data-ttu-id="0c1ca-352">Отложенная инициализация</span>
          <span class="sxs-lookup">
            <span data-stu-id="0c1ca-352">Lazy Initialization</span>
          </span>
        </related>
      </Docs>
    </Member>
  </Members>
</Type>