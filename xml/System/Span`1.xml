<Type Name="Span&lt;T&gt;" FullName="System.Span&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6348ca48e2f74be9e672b6f8b005472eeb3f48ce" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52213395" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct Span&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit Span`1&lt;T&gt; extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Span`1" />
  <TypeSignature Language="VB.NET" Value="Public Structure Span(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public value class Span" />
  <TypeSignature Language="F#" Value="type Span&lt;'T&gt; = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Memory</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.1;netcore-2.2">
      <AttributeName>System.Runtime.CompilerServices.IsByRefLike</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-2.1;netcore-2.2">
      <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T">
      <span data-ttu-id="5ce1e-101">Тип элементов в <see cref="System.Span`1" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="5ce1e-101">The type of items in the <see cref="System.Span`1" />.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="5ce1e-102">Предоставляет типобезопасную и безопасную для памяти реализацию непрерывной области произвольной памяти.</span>
      <span class="sxs-lookup">
        <span data-stu-id="5ce1e-102">Provides a type- and memory-safe representation of a contiguous region of arbitrary memory.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

<span data-ttu-id="5ce1e-103">`Span<T>` — [структура ссылки](~/docs/csharp/reference-semantics-with-value-types.md#ref-struct-type) , расположенной в стеке, а не в управляемой куче.</span><span class="sxs-lookup"><span data-stu-id="5ce1e-103">`Span<T>` is a [ref struct](~/docs/csharp/reference-semantics-with-value-types.md#ref-struct-type) that is allocated on the stack rather than on the managed heap.</span></span> <span data-ttu-id="5ce1e-104">Ref struct типы имеют ряд ограничений, чтобы убедиться, что они не преобразуется управляемой куче, включая, что они не могут быть упакованы, они не могут быть назначены переменным типа <xref:System.Object>, `dynamic` или любой другой тип интерфейса, они не могут быть поля в ссылочный тип и их нельзя сравнивать `await` и `yield` границы.</span><span class="sxs-lookup"><span data-stu-id="5ce1e-104">Ref struct types have a number of restrictions to ensure that they cannot be promoted to the managed heap, including that they can't be boxed, they can't be assigned to variables of type <xref:System.Object>, `dynamic` or to any interface type, they can't be fields in a reference type, and they can't be used across `await` and `yield` boundaries.</span></span> <span data-ttu-id="5ce1e-105">Кроме того, вызовы два метода <xref:System.Span%601.Equals(System.Object)> и <xref:System.Span%601.GetHashCode%2A>, исключение <xref:System.NotSupportedException>.</span><span class="sxs-lookup"><span data-stu-id="5ce1e-105">In addition, calls to two methods, <xref:System.Span%601.Equals(System.Object)> and <xref:System.Span%601.GetHashCode%2A>, throw a <xref:System.NotSupportedException>.</span></span> 

> [!IMPORTANT]
> <span data-ttu-id="5ce1e-106">Так как он является типом только для стека `Span<T>` не подходит для многих сценариев, требующих хранения ссылки на буферы в куче.</span><span class="sxs-lookup"><span data-stu-id="5ce1e-106">Because it is a stack-only type, `Span<T>` is unsuitable for many scenarios that require storing references to buffers on the heap.</span></span> <span data-ttu-id="5ce1e-107">Это верно, к примеру, подпрограмм, которые выполняют вызовы метода asynchrous.</span><span class="sxs-lookup"><span data-stu-id="5ce1e-107">This is true, for example, of routines that make asynchrous method calls.</span></span> <span data-ttu-id="5ce1e-108">Для таких scenarious можно использовать бесплатно <xref:System.Memory%601?displayProperty=nameWithType> и <xref:System.ReadOnlyMemory%601?displayProperty=nameWithType> типов.</span><span class="sxs-lookup"><span data-stu-id="5ce1e-108">For such scenarious, you can use the complimentary <xref:System.Memory%601?displayProperty=nameWithType> and <xref:System.ReadOnlyMemory%601?displayProperty=nameWithType> types.</span></span>

<span data-ttu-id="5ce1e-109">Для диапазонов, которые представляют структуры неизменное или только для чтения, используйте <xref:System.ReadOnlySpan%601?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="5ce1e-109">For spans that represent immutable or read-only structures, use <xref:System.ReadOnlySpan%601?displayProperty=nameWithType>.</span></span>

## <a name="spant-and-memory"></a><span data-ttu-id="5ce1e-110">Диапазон\<T > и памяти</span><span class="sxs-lookup"><span data-stu-id="5ce1e-110">Span\<T> and memory</span></span>

<span data-ttu-id="5ce1e-111">Объект `Span<T>` представляет непрерывную область произвольной памяти.</span><span class="sxs-lookup"><span data-stu-id="5ce1e-111">A `Span<T>` represents a contiguous region of arbitrary memory.</span></span> <span data-ttu-id="5ce1e-112">Объект `Span<T>` экземпляр часто используется для хранения элементов в массиве или в части массива.</span><span class="sxs-lookup"><span data-stu-id="5ce1e-112">A `Span<T>` instance is often used to hold the elements of an array or a portion of an array.</span></span> <span data-ttu-id="5ce1e-113">В отличие от массива, однако `Span<T>` экземпляр может указывать на управляемую память, внутренней памяти или управляемых памяти в стеке.</span><span class="sxs-lookup"><span data-stu-id="5ce1e-113">Unlike an array, however, a `Span<T>` instance can point to managed memory, native memory, or memory managed on the stack.</span></span> <span data-ttu-id="5ce1e-114">В следующем примере создается `Span<Byte>` из массива:</span><span class="sxs-lookup"><span data-stu-id="5ce1e-114">The following example creates a `Span<Byte>` from an array:</span></span>

[!code-csharp[Creating a Span\<Byte> from an array](~/samples/snippets/csharp/api/system/span/program.cs#1)]
     
<span data-ttu-id="5ce1e-115">В следующем примере создается `Span<Byte>` из 100 байт внутренней памяти:</span><span class="sxs-lookup"><span data-stu-id="5ce1e-115">The following example creates a `Span<Byte>` from 100 bytes of native memory:</span></span>

[!code-csharp[Creating a Span\<Byte> from native memory](~/samples/snippets/csharp/api/system/span/program.cs#2)]

<span data-ttu-id="5ce1e-116">В следующем примере используется C# [stackalloc](~/docs/csharp/language-reference/keywords/stackalloc.md) ключевых слов для выделения 100 байт памяти в стеке:</span><span class="sxs-lookup"><span data-stu-id="5ce1e-116">The following example uses the C# [stackalloc](~/docs/csharp/language-reference/keywords/stackalloc.md) keyword to allocate 100 bytes of memory on the stack:</span></span>

[!code-csharp[Creating a Span\<Byte> from stack-allocated memory](~/samples/snippets/csharp/api/system/span/program.cs#3)]

<span data-ttu-id="5ce1e-117">Так как `Span<T>` — это абстракция над произвольный блок памяти, методы `Span<T>` классов и методов с `Span<T>` параметры работают с любой `Span<T>` объекта независимо от типа памяти, содержащейся в нем.</span><span class="sxs-lookup"><span data-stu-id="5ce1e-117">Because `Span<T>` is an abstraction over an arbitrary block of memory, methods of the `Span<T>` class and methods with `Span<T>` parameters operate on any `Span<T>` object regardless of the kind of memory it encapsulates.</span></span> <span data-ttu-id="5ce1e-118">Например каждый из отдельных разделов кода, инициализирующие диапазон и вычислять сумму его элементов можно изменить в одиночной инициализации и методы расчетов, как в примере ниже показаны:</span><span class="sxs-lookup"><span data-stu-id="5ce1e-118">For example, each of the separate sections of code that initialize the span and calculate the sum of its elements can be changed into single initialization and calculation methods, as the following example illustrates:</span></span>

[!code-csharp[Creating a Span\<Byte> from stack-allocated memory](~/samples/snippets/csharp/api/system/span/program.cs#4)]

## <a name="spant-and-arrays"></a><span data-ttu-id="5ce1e-119">Диапазон\<T > и массивы</span><span class="sxs-lookup"><span data-stu-id="5ce1e-119">Span\<T> and arrays</span></span>

<span data-ttu-id="5ce1e-120">При его переносе в массиве, `Span<T>` можно заключить весь массив, как и в примерах в [диапазон\<T > и памяти](#spant-and-memory) раздел.</span><span class="sxs-lookup"><span data-stu-id="5ce1e-120">When it wraps an array, `Span<T>` can wrap an entire array, as it did in the examples in the [Span\<T> and memory](#spant-and-memory) section.</span></span> <span data-ttu-id="5ce1e-121">Так как он поддерживает Создание срезов, `Span<T>` также может указывать любой непрерывный диапазон в массиве.</span><span class="sxs-lookup"><span data-stu-id="5ce1e-121">Because it supports slicing, `Span<T>` can also point to any contiguous range within the array.</span></span>  

<span data-ttu-id="5ce1e-122">В следующем примере создается срез средних пять элементов целое число 10 элементов массива.</span><span class="sxs-lookup"><span data-stu-id="5ce1e-122">The following example creates a slice of the middle five elements of a 10-element integer array.</span></span> <span data-ttu-id="5ce1e-123">Обратите внимание на то, что код удваивает значения каждого целого числа в срез.</span><span class="sxs-lookup"><span data-stu-id="5ce1e-123">Note that the code doubles the values of each integer in the slice.</span></span> <span data-ttu-id="5ce1e-124">Как показывает вывод, изменения, внесенные в диапазоне, отражаются в значения массива.</span><span class="sxs-lookup"><span data-stu-id="5ce1e-124">As the output shows, the changes made by the span are reflected in the values of the array.</span></span>

[!code-csharp[Creating a slice from a portion of a span](~/samples/snippets/csharp/api/system/span/slice/program.cs)]

## <a name="spant-and-slices"></a><span data-ttu-id="5ce1e-125">Диапазон\<T > и срезы</span><span class="sxs-lookup"><span data-stu-id="5ce1e-125">Span\<T> and slices</span></span>

<span data-ttu-id="5ce1e-126">`Span\<T>` включает в себя две перегрузки <xref:System.Span%601.Slice%2A> метод этой формы среза вне текущей области, который начинается с указанного индекса.</span><span class="sxs-lookup"><span data-stu-id="5ce1e-126">`Span\<T>` includes two overloads of the <xref:System.Span%601.Slice%2A> method that form a slice out of the current span that starts at a specified index.</span></span> <span data-ttu-id="5ce1e-127">Это позволяет обрабатывать данные в `Span\<T>` как набор логические фрагменты, которые могут обрабатываться при необходимости частями конвейер обработки данных без ущерба для производительности.</span><span class="sxs-lookup"><span data-stu-id="5ce1e-127">This makes it possible to treat the data in a `Span\<T>` as a set of logical chunks that can be processed as needed by portions of a data processing pipeline with minimal performance impact.</span></span> <span data-ttu-id="5ce1e-128">Например так как современные серверные протоколы часто являются текстовыми, работы со строками и подстроки особенно важна.</span><span class="sxs-lookup"><span data-stu-id="5ce1e-128">For example, since modern server protocols are often text-based, manipulation of strings and substrings is particularly important.</span></span> <span data-ttu-id="5ce1e-129">В <xref:System.String> класса, основной метод для извлечения подстроки является <xref:System.String.Substring%2A>.</span><span class="sxs-lookup"><span data-stu-id="5ce1e-129">In the <xref:System.String> class, the major method for extracting substrings is <xref:System.String.Substring%2A>.</span></span> <span data-ttu-id="5ce1e-130">Для конвейеры данных, которые используют обширные строками его использование предлагает некоторые снижения производительности, так как оно:</span><span class="sxs-lookup"><span data-stu-id="5ce1e-130">For data pipelines that rely on extensive string manipulation, its use offers some performance penalties, since it:</span></span>

1. <span data-ttu-id="5ce1e-131">Создает новую строку для хранения подстроки.</span><span class="sxs-lookup"><span data-stu-id="5ce1e-131">Creates a new string to hold the substring.</span></span>

2. <span data-ttu-id="5ce1e-132">Копирует определенное подмножество символов из исходной строки в новой строке.</span><span class="sxs-lookup"><span data-stu-id="5ce1e-132">Copies a subset of the characters from the original string to the new string.</span></span>

<span data-ttu-id="5ce1e-133">Эта операция выделения и копирования, можно устранить с помощью `Span\<T>` или <xref:System.ReadOnlySpan%601>, как показано в следующем примере:</span><span class="sxs-lookup"><span data-stu-id="5ce1e-133">This allocation and copy operation can be eliminated by using either `Span\<T>` or <xref:System.ReadOnlySpan%601>, as the following example shows:</span></span>

[!code-csharp[Creating a slice from a substring](~/samples/snippets/csharp/api/system/span/slice2/program.cs)]


      ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Span (T[] array);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T[] array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Span`1.#ctor(`0[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (array As T())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Span(cli::array &lt;T&gt; ^ array);" />
      <MemberSignature Language="F#" Value="new Span&lt;'T&gt; : 'T[] -&gt; Span&lt;'T&gt;" Usage="new System.Span&lt;'T&gt; array" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="5ce1e-134">Массив, из которого создается объект <see cref="T:System.Span`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-134">The array from which to create the <see cref="T:System.Span`1" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5ce1e-135">Создает новый объект <see cref="T:System.Span`1" /> по всему указанному массиву.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-135">Creates a new <see cref="T:System.Span`1" /> object over the entirety of a specified array.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="5ce1e-136">Если `array` — `null`, возвращает этот конструктор `null` `Span<T>`.</span><span class="sxs-lookup"><span data-stu-id="5ce1e-136">If `array` is `null`, this constructor returns a `null` `Span<T>`.</span></span>

      ]]></format>
        </remarks>
        <exception cref="T:System.TypeMismatchException">
          <span data-ttu-id="5ce1e-137">
            <paramref name="T" /> является ссылочным типом, а <paramref name="array" /> не является массивом типа <paramref name="T" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-137">
              <paramref name="T" /> is a reference type, and <paramref name="array" /> is not an array of type <paramref name="T" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Span (void* pointer, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(void* pointer, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Span`1.#ctor(System.Void*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Span(void* pointer, int length);" />
      <MemberSignature Language="F#" Value="new Span&lt;'T&gt; : nativeptr&lt;unit&gt; * int -&gt; Span&lt;'T&gt;" Usage="new System.Span&lt;'T&gt; (pointer, length)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.1;netcore-2.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="pointer" Type="System.Void*" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pointer">
          <span data-ttu-id="5ce1e-138">Указатель на начальный адрес указанного числа байтов в памяти.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-138">A pointer to the starting address of a specified number of bytes in memory.</span>
          </span>
        </param>
        <param name="length">
          <span data-ttu-id="5ce1e-139">Число байтов, которые будут включены в <see cref="T:System.Span`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-139">The number of bytes to be included in the <see cref="T:System.Span`1" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5ce1e-140">Создает новый объект <see cref="T:System.Span`1" /> из указанного числа байтов, начиная с указанного адреса памяти.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-140">Creates a new <see cref="T:System.Span`1" /> object  from a specified number of bytes starting at a specified memory address.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

        This constructor should be used with care, since it creates arbitrarily typed `T`s from a `void*`-typed block of memory, and `length` is not checked. However, if the constructor succeeds in creating a new <xref:System.Span%601> object, all subsequent uses are correct.        

      ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="5ce1e-141">
            <paramref name="T" /> является ссылочным типом или содержит указатели и поэтому не может храниться в неуправляемой памяти.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-141">
              <paramref name="T" /> is a reference type or contains pointers and therefore cannot be stored in unmanaged memory.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="5ce1e-142">
            <paramref name="length" /> является отрицательным значением.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-142">
              <paramref name="length" /> is negative.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Span (T[] array, int start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T[] array, int32 start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Span`1.#ctor(`0[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (array As T(), start As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Span(cli::array &lt;T&gt; ^ array, int start);" />
      <MemberSignature Language="F#" Value="new Span&lt;'T&gt; : 'T[] * int -&gt; Span&lt;'T&gt;" Usage="new System.Span&lt;'T&gt; (array, start)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="start" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="5ce1e-143">Исходный массив.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-143">The source array.</span>
          </span>
        </param>
        <param name="start">
          <span data-ttu-id="5ce1e-144">Индекс первого элемента в массиве, который необходимо включить в объект <see cref="T:System.Span`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-144">The index of the first element in the array to include in the <see cref="T:System.Span`1" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5ce1e-145">Создает новый объект <see cref="T:System.Span`1" /> из указанного массива, начиная с указанной позиции индекса и до конца массива.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-145">Creates a new <see cref="T:System.Span`1" /> object from a specified array starting at a specifed index position and continuing to the end of the array.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Span (T[] array, int start, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T[] array, int32 start, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Span`1.#ctor(`0[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (array As T(), start As Integer, length As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Span(cli::array &lt;T&gt; ^ array, int start, int length);" />
      <MemberSignature Language="F#" Value="new Span&lt;'T&gt; : 'T[] * int * int -&gt; Span&lt;'T&gt;" Usage="new System.Span&lt;'T&gt; (array, start, length)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="5ce1e-146">Исходный массив.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-146">The source array.</span>
          </span>
        </param>
        <param name="start">
          <span data-ttu-id="5ce1e-147">Индекс первого элемента, который будет включен в новый объект <see cref="T:System.Span`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-147">The index of the first element to include in the new <see cref="T:System.Span`1" />.</span>
          </span>
        </param>
        <param name="length">
          <span data-ttu-id="5ce1e-148">Количество элементов, которые будут включены в новый объект <see cref="T:System.Span`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-148">The number of elements to include in the new <see cref="T:System.Span`1" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5ce1e-149">Создает новый объект <see cref="T:System.Span`1" />, который включает указанное число элементов массива, начиная с указанного индекса.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-149">Creates a new <see cref="T:System.Span`1" /> object that includes a specified number of elements of an array starting at a specified index.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="5ce1e-150">
            <paramref name="array" /> имеет значение <see langword="null" />, но <paramref name="start" /> или <paramref name="length" /> не равно нулю.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-150">
              <paramref name="array" /> is <see langword="null" />, but <paramref name="start" /> or <paramref name="length" /> is non-zero.</span>
          </span>
          <p />
          <span data-ttu-id="5ce1e-151">— или —</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-151">--or--</span>
          </span>
          <p />
          <span data-ttu-id="5ce1e-152">
            <paramref name="start" /> выходит за пределы растрового массива.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-152">
              <paramref name="start" /> is outside the bounds of the array.</span>
          </span>
          <p />
          <span data-ttu-id="5ce1e-153">— или —</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-153">--or--</span>
          </span>
          <p />
          <span data-ttu-id="5ce1e-154">
            <paramref name="start" /> и <paramref name="length" /> превышает количество элементов в массиве.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-154">
              <paramref name="start" /> and <paramref name="length" /> exceeds the number of elements in the array.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeMismatchException">
          <span data-ttu-id="5ce1e-155">
            <paramref name="T" /> является ссылочным типом, а <paramref name="array" /> не является массивом типа <paramref name="T" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-155">
              <paramref name="T" /> is a reference type, and <paramref name="array" /> is not an array of type <paramref name="T" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Span`1.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="span.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="5ce1e-156">Удаляет содержимое этого объекта <see cref="T:System.Span`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-156">Clears the contents of this <see cref="T:System.Span`1" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="5ce1e-157">`Clear` Метода задает элементы <xref:System.Span%601> объекта к значениям по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="5ce1e-157">The `Clear` method sets the items in the <xref:System.Span%601> object to their default values.</span></span> <span data-ttu-id="5ce1e-158">Оно не удаляет элементы из <xref:System.Span%601>.</span><span class="sxs-lookup"><span data-stu-id="5ce1e-158">It does not remove items from the <xref:System.Span%601>.</span></span>  

         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (Span&lt;T&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(valuetype System.Span`1&lt;!T&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Span`1.CopyTo(System.Span{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (destination As Span(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(Span&lt;T&gt; destination);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : Span&lt;'T&gt; -&gt; unit" Usage="span.CopyTo destination" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <summary>
          <span data-ttu-id="5ce1e-159">Копирует содержимое этого объекта <see cref="System.Span`1" /> в назначение <see cref="System.Span`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-159">Copies the contents of this <see cref="System.Span`1" /> into a destination <see cref="System.Span`1" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="5ce1e-160">Этот метод копирует все `source` для `destination` даже в том случае, если `source` и `destination` перекрываются.</span><span class="sxs-lookup"><span data-stu-id="5ce1e-160">This method copies all of `source` to `destination` even if `source` and `destination` overlap.</span></span>

         ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="5ce1e-161">
            <paramref name="destination" /> короче, чем исходный <see cref="System.Span`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-161">
              <paramref name="destination" /> is shorter than the source <see cref="System.Span`1" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DangerousCreate">
      <MemberSignature Language="C#" Value="public static Span&lt;T&gt; DangerousCreate (object obj, ref T objectData, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;!T&gt; DangerousCreate(object obj, !T&amp; objectData, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Span`1.DangerousCreate(System.Object,`0@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DangerousCreate (obj As Object, ByRef objectData As T, length As Integer) As Span(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Span&lt;T&gt; DangerousCreate(System::Object ^ obj, T % objectData, int length);" />
      <MemberSignature Language="F#" Value="static member DangerousCreate : obj *  * int -&gt; Span&lt;'T&gt;" Usage="System.Span&lt;'T&gt;.DangerousCreate (obj, objectData, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="objectData" Type="T" RefType="ref" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="obj">To be added.</param>
        <param name="objectData">To be added.</param>
        <param name="length">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DangerousGetPinnableReference">
      <MemberSignature Language="C#" Value="public T DangerousGetPinnableReference ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T DangerousGetPinnableReference() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Span`1.DangerousGetPinnableReference" />
      <MemberSignature Language="VB.NET" Value="Public Function DangerousGetPinnableReference () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T % DangerousGetPinnableReference();" />
      <MemberSignature Language="F#" Value="member this.DangerousGetPinnableReference : unit -&gt; " Usage="span.DangerousGetPinnableReference " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <ReturnValue RefType="Ref">
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static Span&lt;T&gt; Empty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Span`1&lt;!T&gt; Empty" />
      <MemberSignature Language="DocId" Value="P:System.Span`1.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Empty As Span(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Span&lt;T&gt; Empty { Span&lt;T&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.Empty : Span&lt;'T&gt;" Usage="System.Span&lt;'T&gt;.Empty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5ce1e-162">Возвращает пустой объект <see cref="T:System.Span`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-162">Returns an empty <see cref="T:System.Span`1" /> object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5ce1e-163">Пустой объект <see cref="T:System.Span`1" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-163">An empty <see cref="T:System.Span`1" /> object.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Span`1.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="span.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2">
          <AttributeName>System.Obsolete("Equals() on Span will always throw an exception. Use == instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="5ce1e-164">Не поддерживается.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-164">Not supported.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5ce1e-165">Вызов этого метода не поддерживается.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-165">Calls to this method are not supported.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5ce1e-166">Вызов этого метода не поддерживается.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-166">Calls to this method are not supported.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
<span data-ttu-id="5ce1e-167">Вызовы <xref:System.Span%601.Equals%2A> метод не поддерживаются.</span><span class="sxs-lookup"><span data-stu-id="5ce1e-167">Calls to the <xref:System.Span%601.Equals%2A> method are not supported.</span></span> <span data-ttu-id="5ce1e-168">Вызовы < xref:System.Span%601.Equals%2A методы производят одного из двух результатов:</span><span class="sxs-lookup"><span data-stu-id="5ce1e-168">Calls to the <xref:System.Span%601.Equals%2A methods produce either of two results:</span></span>

- <span data-ttu-id="5ce1e-169">Если `obj` является <xref:System.Span%601>, вызов метода возникает ошибка компилятора CS1503: «невозможно преобразовать из «System.Span» в «object».» Это обусловлено <xref:System.Span%601> — [структура ссылки](~/docs/csharp/reference-semantics-with-value-types.md#ref-struct-type) , не могут быть упакованы и поэтому не может быть преобразован <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="5ce1e-169">If `obj` is a <xref:System.Span%601>, the method call generates compiler error CS1503: "cannot convert from 'System.Span' to 'object'." This is because <xref:System.Span%601> is a [ref struct](~/docs/csharp/reference-semantics-with-value-types.md#ref-struct-type) that cannot be boxed and therefore cannot be converted to an <xref:System.Object>.</span></span>

- <span data-ttu-id="5ce1e-170">Если тип `obj` не <xref:System.Span%601>, вызов метода создает <xref:System.NotSupportedException>.</span><span class="sxs-lookup"><span data-stu-id="5ce1e-170">If the type of `obj` is not a <xref:System.Span%601>, the method call throws a <xref:System.NotSupportedException>.</span></span> 

<span data-ttu-id="5ce1e-171">Для сравнения двух <xref:System.Span%601> объекты на равенство, используют <xref:System.Span%601.op_Equality%2A> оператор сравнения.</span><span class="sxs-lookup"><span data-stu-id="5ce1e-171">To compare two <xref:System.Span%601> objects for equality, use the <xref:System.Span%601.op_Equality%2A> comparison operator.</span></span>

        ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="5ce1e-172">Вызов этого метода не поддерживается.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-172">Calls to this method are not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public void Fill (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Fill(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Span`1.Fill(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Fill (value As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Fill(T value);" />
      <MemberSignature Language="F#" Value="member this.Fill : 'T -&gt; unit" Usage="span.Fill value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="5ce1e-173">Значение, присваиваемое каждому элементу в диапазоне.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-173">The value to assign to each element of the span.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5ce1e-174">Заполняет элементы диапазона заданным значением.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-174">Fills the elements of this span with a specified value.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public Span&lt;T&gt;.Enumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Span`1/Enumerator&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Span`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As Span(Of T).Enumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Span&lt;T&gt;::Enumerator GetEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; Span&lt;'T&gt;.Enumerator" Usage="span.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;+Enumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="5ce1e-175">Возвращает перечислитель для коллекции <see cref="T:System.Span`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-175">Returns an enumerator for this <see cref="T:System.Span`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5ce1e-176">Возвращает перечислитель для этого диапазона.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-176">An enumerator for this span.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
<span data-ttu-id="5ce1e-177">Вместо вызова метода <xref:System.Span%601.GetEnumerator%2A> метод напрямую, можно использовать C# `foreach` и оператор Visual Basic `For Each`... `Next` конструкции для перечисления <xref:System.Span%601>.</span><span class="sxs-lookup"><span data-stu-id="5ce1e-177">Instead of calling the <xref:System.Span%601.GetEnumerator%2A> method directly, you can use the C# `foreach` statement and the Visual Basic `For Each`...`Next` construct to enumerate a <xref:System.Span%601>.</span></span>

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Span`1.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="span.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2">
          <AttributeName>System.Obsolete("GetHashCode() on Span will always throw an exception.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="5ce1e-178">Создает исключение <see cref="T:System.NotSupportedException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-178">Throws a <see cref="T:System.NotSupportedException" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5ce1e-179">При вызове этого метода всегда возникает исключение <see cref="T:System.NotSupportedException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-179">Calls to this method always throw a <see cref="T:System.NotSupportedException" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="5ce1e-180">Вызов этого метода не поддерживается.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-180">Calls to this method are not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetPinnableReference">
      <MemberSignature Language="C#" Value="public T GetPinnableReference ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T GetPinnableReference() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Span`1.GetPinnableReference" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPinnableReference () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T % GetPinnableReference();" />
      <MemberSignature Language="F#" Value="member this.GetPinnableReference : unit -&gt; " Usage="span.GetPinnableReference " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T@</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="5ce1e-181">Возвращает ссылку на элемент <see cref="T:System.Span`1" /> при нулевом индексе.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-181">Returns a reference to the element of the <see cref="T:System.Span`1" /> at index zero.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5ce1e-182">Ссылка на элемент <see cref="T:System.Span`1" /> при нулевом индексе или <see langword="null" />, если <see cref="M:System.Span`1.IsEmpty" /> имеет значение <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-182">A reference to the element of the <see cref="T:System.Span`1" /> at index zero, or <see langword="null" /> if <see cref="M:System.Span`1.IsEmpty" /> is  <see langword="true" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="5ce1e-183">`GetPinnableReference` Возвращает [структура ссылки](~/docs/csharp/reference-semantics-with-value-types.md#ref-struct-type).</span><span class="sxs-lookup"><span data-stu-id="5ce1e-183">The `GetPinnableReference` method returns a [ref struct](~/docs/csharp/reference-semantics-with-value-types.md#ref-struct-type).</span></span> <span data-ttu-id="5ce1e-184">Он может использоваться для закрепления <xref:System.Span%601> в памяти.</span><span class="sxs-lookup"><span data-stu-id="5ce1e-184">It can be used for pinning a <xref:System.Span%601> in memory.</span></span> <span data-ttu-id="5ce1e-185">Она необходима для поддержки работы <xref:System.Span%601> в [фиксированной](~/docs/csharp/language-reference/keywords/fixed-statement.md) инструкции.</span><span class="sxs-lookup"><span data-stu-id="5ce1e-185">It is required to support the use of a <xref:System.Span%601> within a [fixed](~/docs/csharp/language-reference/keywords/fixed-statement.md) statement.</span></span>

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Span`1.IsEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEmpty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEmpty : bool" Usage="System.Span&lt;'T&gt;.IsEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5ce1e-186">Возвращает значение, указывающее, пуст ли текущий объект <see cref="T:System.Span`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-186">Returns a value that indicates whether the current <see cref="T:System.Span`1" /> is empty.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5ce1e-187">
            <see langword="true" /> Если текущий диапазон пуст; в противном случае <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-187">
              <see langword="true" /> if the current span is empty; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public T this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Span`1.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(index As Integer) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T % default[int] { T % get(int index); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : " Usage="System.Span&lt;'T&gt;.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue RefType="Ref">
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>
          <span data-ttu-id="5ce1e-188">Возвращает или задает элемент по указанному индексу, начинающемуся с нуля.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-188">Gets or sets the element at the specified zero-based index.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5ce1e-189">Элемент, расположенный по указанному индексу.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-189">The element at the specified index.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IndexOutOfRangeException">
          <span data-ttu-id="5ce1e-190">
            <paramref name="index" /> меньше нуля либо больше или равен <see cref="P:System.Span`1.Length" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-190">
              <paramref name="index" /> is less then zero or greater than or equal to <see cref="P:System.Span`1.Length" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public int Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Length" />
      <MemberSignature Language="DocId" Value="P:System.Span`1.Length" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Length As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Length { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int" Usage="System.Span&lt;'T&gt;.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5ce1e-191">Возвращает длину текущего диапазона.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-191">Returns the length of the current span.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5ce1e-192">Длина текущей области.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-192">The length of the current span.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (Span&lt;T&gt; left, Span&lt;T&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Span`1&lt;!T&gt; left, valuetype System.Span`1&lt;!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Span`1.op_Equality(System.Span{`0},System.Span{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As Span(Of T), right As Span(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(Span&lt;T&gt; left, Span&lt;T&gt; right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : Span&lt;'T&gt; * Span&lt;'T&gt; -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Span&lt;T&gt;" />
        <Parameter Name="right" Type="System.Span&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="5ce1e-193">Первый диапазон для сравнения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-193">The first span to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="5ce1e-194">Второй диапазон для сравнения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-194">The second span to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5ce1e-195">Возвращает значение, указывающее, равны ли два объекта <see cref="T:System.Span`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-195">Returns a value that indicates whether two <see cref="T:System.Span`1" /> objects are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5ce1e-196">Значение <see langword="true" />, если два объекта <see cref="T:System.Span`1" /> равны; в противном случае — значение <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-196">
              <see langword="true" /> if the two <see cref="T:System.Span`1" /> objects are equal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="5ce1e-197">Два <xref:System.Span%601> объекты равны, если они имеют одинаковую длину и соответствующие элементы `left` и `right` пункты той же памяти.</span><span class="sxs-lookup"><span data-stu-id="5ce1e-197">Two <xref:System.Span%601> objects are equal if they have the same length and the corresponding elements of `left` and `right` point to the same memory.</span></span> <span data-ttu-id="5ce1e-198">Обратите внимание, что проверка на равенство *не* попытаться определить, равны ли содержимое.</span><span class="sxs-lookup"><span data-stu-id="5ce1e-198">Note that the test for equality does *not* attempt to determine whether the contents are equal.</span></span>

         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator ReadOnlySpan&lt;T&gt; (Span&lt;T&gt; span);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.ReadOnlySpan`1&lt;!T&gt; op_Implicit(valuetype System.Span`1&lt;!T&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Span`1.op_Implicit(System.Span{`0})~System.ReadOnlySpan{`0}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (span As Span(Of T)) As ReadOnlySpan(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator ReadOnlySpan&lt;T&gt;(Span&lt;T&gt; span);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : Span&lt;'T&gt; -&gt; ReadOnlySpan&lt;'T&gt;" Usage="System.Span&lt;'T&gt;.op_Implicit span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="span">
          <span data-ttu-id="5ce1e-199">Объект, преобразуемый в <see cref="T:System.ReadOnlySpan`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-199">The object to convert to a <see cref="T:System.ReadOnlySpan`1" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5ce1e-200">Определяет неявное преобразование <see cref="T:System.Span`1" /> в <see cref="T:System.ReadOnlySpan`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-200">Defines an implicit conversion of a <see cref="T:System.Span`1" /> to a <see cref="T:System.ReadOnlySpan`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5ce1e-201">Диапазон только для чтения, соответствующий текущему экземпляру.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-201">A read-only span that corresponds to the current instance.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator Span&lt;T&gt; (T[] array);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Span`1&lt;!T&gt; op_Implicit(!T[] array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Span`1.op_Implicit(`0[])~System.Span{`0}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (array As T()) As Span(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator Span&lt;T&gt;(cli::array &lt;T&gt; ^ array);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : 'T[] -&gt; Span&lt;'T&gt;" Usage="System.Span&lt;'T&gt;.op_Implicit array" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="5ce1e-202">Массив, который будет преобразован в <see cref="T:System.Span`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-202">The array to convert to a <see cref="T:System.Span`1" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5ce1e-203">Определяет неявное преобразование массива в <see cref="T:System.Span`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-203">Defines an implicit conversion of an array to a <see cref="T:System.Span`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5ce1e-204">Диапазон, соответствующий <paramref name="array" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-204">The span that corresponds to <paramref name="array" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator Span&lt;T&gt; (ArraySegment&lt;T&gt; arraySegment);" FrameworkAlternate="netcore-2.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Span`1&lt;!T&gt; op_Implicit(valuetype System.ArraySegment`1&lt;!T&gt; arraySegment) cil managed" FrameworkAlternate="netcore-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (arraySegment As ArraySegment(Of T)) As Span(Of T)" FrameworkAlternate="netcore-2.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator Span&lt;T&gt;(ArraySegment&lt;T&gt; arraySegment);" FrameworkAlternate="netcore-2.0" />
      <MemberSignature Language="C#" Value="public static implicit operator Span&lt;T&gt; (ArraySegment&lt;T&gt; segment);" FrameworkAlternate="netcore-2.1;netcore-2.2" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Span`1&lt;!T&gt; op_Implicit(valuetype System.ArraySegment`1&lt;!T&gt; segment) cil managed" FrameworkAlternate="netcore-2.1;netcore-2.2" />
      <MemberSignature Language="DocId" Value="M:System.Span`1.op_Implicit(System.ArraySegment{`0})~System.Span{`0}" FrameworkAlternate="netcore-2.1;netcore-2.0;netcore-2.2" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (segment As ArraySegment(Of T)) As Span(Of T)" FrameworkAlternate="netcore-2.1;netcore-2.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator Span&lt;T&gt;(ArraySegment&lt;T&gt; segment);" FrameworkAlternate="netcore-2.1;netcore-2.2" />
      <MemberSignature Language="F#" Value="static member op_Implicit : ArraySegment&lt;'T&gt; -&gt; Span&lt;'T&gt;" Usage="System.Span&lt;'T&gt;.op_Implicit segment" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arraySegment" Type="System.ArraySegment&lt;T&gt;" Index="0" FrameworkAlternate="netcore-2.0" />
        <Parameter Name="segment" Type="System.ArraySegment&lt;T&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2" />
      </Parameters>
      <Docs>
        <param name="arraySegment">
          <span data-ttu-id="5ce1e-205">Сегмент массива, который будет преобразован в <see cref="T:System.Span`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-205">The array segment to be converted to a <see cref="T:System.Span`1" />.</span>
          </span>
        </param>
        <param name="segment">
          <span data-ttu-id="5ce1e-206">Сегмент массива, который будет преобразован в <see cref="T:System.Span`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-206">The array segment to be converted to a <see cref="T:System.Span`1" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5ce1e-207">Определяет неявное преобразование <see cref="T:System.ArraySegment`1" /> в <see cref="T:System.Span`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-207">Defines an implicit conversion of an <see cref="T:System.ArraySegment`1" /> to a <see cref="T:System.Span`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5ce1e-208">Диапазон, соответствующий сегменту массива.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-208">A span that corresponds to the array segment.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (Span&lt;T&gt; left, Span&lt;T&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Span`1&lt;!T&gt; left, valuetype System.Span`1&lt;!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Span`1.op_Inequality(System.Span{`0},System.Span{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As Span(Of T), right As Span(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(Span&lt;T&gt; left, Span&lt;T&gt; right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : Span&lt;'T&gt; * Span&lt;'T&gt; -&gt; bool" Usage="System.Span&lt;'T&gt;.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Span&lt;T&gt;" />
        <Parameter Name="right" Type="System.Span&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="5ce1e-209">Первый диапазон для сравнения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-209">The first span to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="5ce1e-210">Второй диапазон для сравнения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-210">The second span to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5ce1e-211">Возвращает значение, указывающее, являются ли два объекта <see cref="T:System.Span`1" /> неравными.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-211">Returns a value that indicates whether two <see cref="T:System.Span`1" /> objects are not equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5ce1e-212">Если два объекта <see cref="T:System.Span`1" /> не равны, значение <see langword="true" />, в противном случае — значение <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-212">
              <see langword="true" /> if the two <see cref="T:System.Span`1" /> objects are not equal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="5ce1e-213">Два <xref:System.Span%601> объекты равны, если они имеют разные длины, или если соответствующие элементы `left` и `right` не указывают на той же памяти.</span><span class="sxs-lookup"><span data-stu-id="5ce1e-213">Two <xref:System.Span%601> objects are equal if they have different lengths or if the corresponding elements of `left` and `right` do not point to the same memory.</span></span> 

         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Slice">
      <MemberSignature Language="C#" Value="public Span&lt;T&gt; Slice (int start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Span`1&lt;!T&gt; Slice(int32 start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Span`1.Slice(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Slice (start As Integer) As Span(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Span&lt;T&gt; Slice(int start);" />
      <MemberSignature Language="F#" Value="member this.Slice : int -&gt; Span&lt;'T&gt;" Usage="span.Slice start" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start">
          <span data-ttu-id="5ce1e-214">Индекс, с которого нужно начать срез.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-214">The index at which to begin the slice.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5ce1e-215">Формирует срез вне текущего диапазона, который начинается с указанного индекса.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-215">Forms a slice out of the current span that begins at a specified index.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5ce1e-216">Интервал, который состоит из всех элементов текущего диапазона от <paramref name="index" /> до конца диапазона.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-216">A span that consists of all elements of the current span from <paramref name="index" /> to the end of the span.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="5ce1e-217">
            <paramref name="index" /> меньше нуля либо больше или равен <see cref="T:System.Span`1.Length" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-217">
              <paramref name="index" /> is less than zero or greater than or equal to <see cref="T:System.Span`1.Length" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Slice">
      <MemberSignature Language="C#" Value="public Span&lt;T&gt; Slice (int start, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Span`1&lt;!T&gt; Slice(int32 start, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Span`1.Slice(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Slice (start As Integer, length As Integer) As Span(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Span&lt;T&gt; Slice(int start, int length);" />
      <MemberSignature Language="F#" Value="member this.Slice : int * int -&gt; Span&lt;'T&gt;" Usage="span.Slice (start, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start">
          <span data-ttu-id="5ce1e-218">Индекс, с которого нужно начать срез.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-218">The index at which to begin this slice.</span>
          </span>
        </param>
        <param name="length">
          <span data-ttu-id="5ce1e-219">Требуемая длина для среза.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-219">The desired length for the slice.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5ce1e-220">Формирует срез вне текущей области, начиная с указанного индекса до указанной длины.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-220">Forms a slice out of the current span starting at a specified index for a specified length.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5ce1e-221">&gt;Диапазон, состоящий из <paramref name="index" /> элементов из текущего диапазона, начиная с <paramref name="length" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-221">&gt;A span that consists of <paramref name="length" /> elements from the current span starting at <paramref name="index" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="5ce1e-222">
            <paramref name="start" /> или <paramref name="start" /> + <paramref name="index" /> меньше нуля или больше <see cref="T:System.Span`1.Length" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-222">
              <paramref name="start" /> or <paramref name="start" /> + <paramref name="index" /> is less than zero or greater than <see cref="T:System.Span`1.Length" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToArray">
      <MemberSignature Language="C#" Value="public T[] ToArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T[] ToArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Span`1.ToArray" />
      <MemberSignature Language="VB.NET" Value="Public Function ToArray () As T()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;T&gt; ^ ToArray();" />
      <MemberSignature Language="F#" Value="member this.ToArray : unit -&gt; 'T[]" Usage="span.ToArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="5ce1e-223">Копирует содержимое этого диапазона в новый массив.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-223">Copies the contents of this span into a new array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5ce1e-224">Массив, содержащий данные в текущем диапазоне.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-224">An array containing the data in the current span.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="5ce1e-225">Этот метод выполняет выделение кучи и поэтому следует избегать, если это возможно.</span><span class="sxs-lookup"><span data-stu-id="5ce1e-225">This method performs a heap allocation and therefore should be avoided if possible.</span></span> <span data-ttu-id="5ce1e-226">Его он иногда необходимыми, когда API-интерфейсы, поддерживающие <xref:System.Span%601> объекты недоступны, но являются интерфейсы API, которые работают с массивами.</span><span class="sxs-lookup"><span data-stu-id="5ce1e-226">It it sometimes necessary when APIs that support <xref:System.Span%601> objects are not available but APIs that work with arrays are.</span></span>

         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Span`1.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="span.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="5ce1e-227">Возвращает строковое представление конкретного объекта <see cref="T:System.Span`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-227">Returns the string representation of this <see cref="T:System.Span`1" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5ce1e-228">Строковое представление конкретного объекта <see cref="T:System.Span`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-228">The string representation of this <see cref="T:System.Span`1" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
<span data-ttu-id="5ce1e-229">Для `Span<Char>`, `ToString` возвращает <xref:System.String> , содержащий символы, на которые указывают <xref:System.Span%601>.</span><span class="sxs-lookup"><span data-stu-id="5ce1e-229">For a `Span<Char>`, the `ToString` method returns a <xref:System.String> that contains the characters pointed to by the <xref:System.Span%601>.</span></span> <span data-ttu-id="5ce1e-230">В противном случае возвращается <xref:System.String> с именем типа и количество элементов, <xref:System.Span%601> содержит.</span><span class="sxs-lookup"><span data-stu-id="5ce1e-230">Otherwise, it returns a <xref:System.String> with the name of the type and the number of elements that the <xref:System.Span%601> contains.</span></span>

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCopyTo">
      <MemberSignature Language="C#" Value="public bool TryCopyTo (Span&lt;T&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryCopyTo(valuetype System.Span`1&lt;!T&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Span`1.TryCopyTo(System.Span{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function TryCopyTo (destination As Span(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryCopyTo(Span&lt;T&gt; destination);" />
      <MemberSignature Language="F#" Value="member this.TryCopyTo : Span&lt;'T&gt; -&gt; bool" Usage="span.TryCopyTo destination" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="destination">
          <span data-ttu-id="5ce1e-231">Целевой объект операции копирования.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-231">The target of the copy operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5ce1e-232">Пытается скопировать текущий <see cref="T:System.Span`1" /> в назначение <see cref="T:System.Span`1" /> и возвращает значение, указывающее, успешно ли выполнена операция копирования.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-232">Attempts to copy the current <see cref="T:System.Span`1" /> to a destination <see cref="T:System.Span`1" /> and returns a value that indicates whether the copy operation succeeded.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5ce1e-233">Значение <see langword="true" />, если операция копирования выполнена успешно, в противном случае — значение <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ce1e-233">
              <see langword="true" /> if the copy operation succeeded; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="5ce1e-234">Этот метод копирует все `source` для `destination` даже в том случае, если `source` и `destination` перекрываются.</span><span class="sxs-lookup"><span data-stu-id="5ce1e-234">This method copies all of `source` to `destination` even if `source` and `destination` overlap.</span></span>

<span data-ttu-id="5ce1e-235">Если `destination` короче, чем исходный <xref:System.Span%601>, этот метод возвращает `false`, и данные не записываются для `destination`.</span><span class="sxs-lookup"><span data-stu-id="5ce1e-235">If `destination` is shorter than the source <xref:System.Span%601>, this method returns `false`, and no data is written to `destination`.</span></span>

         ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>