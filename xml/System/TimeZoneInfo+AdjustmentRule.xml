<Type Name="TimeZoneInfo+AdjustmentRule" FullName="System.TimeZoneInfo+AdjustmentRule">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5798da4527033c1c50c91971ade4a4177c5c15ce" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30729208" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class TimeZoneInfo.AdjustmentRule : IEquatable&lt;TimeZoneInfo.AdjustmentRule&gt;, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi serializable sealed beforefieldinit TimeZoneInfo/AdjustmentRule extends System.Object implements class System.IEquatable`1&lt;class System.TimeZoneInfo/AdjustmentRule&gt;, class System.Runtime.Serialization.IDeserializationCallback, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.TimeZoneInfo.AdjustmentRule" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TimeZoneInfo.AdjustmentRule&#xA;Implements IDeserializationCallback, IEquatable(Of TimeZoneInfo.AdjustmentRule), ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public: ref class TimeZoneInfo::AdjustmentRule sealed : IEquatable&lt;TimeZoneInfo::AdjustmentRule ^&gt;, System::Runtime::Serialization::IDeserializationCallback, System::Runtime::Serialization::ISerializable" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.TimeZoneInfo+AdjustmentRule&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Предоставляет сведения о корректировке часового пояса, например о переходе на летнее время и обратно.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZoneInfo.AdjustmentRule> Класс определяет действующие начальную и конечную дату изменения определенный момент времени на и с летнего времени, соответственно, а также его дельту (точное значение, по которому стандартное время часового пояса для изменения в результате коррекции). Кроме того, два свойства возвращают <xref:System.TimeZoneInfo.TransitionTime> объектами, которые определяют, когда происходит каждый переход к стандартному времени и с.  
  
> [!NOTE]
>  Экземпляр <xref:System.TimeZoneInfo.AdjustmentRule> класса является неизменяемым. После создания объекта его значение нельзя изменить.  
  
 Для создания <xref:System.TimeZoneInfo.AdjustmentRule> , вызовите `static` (`Shared` в Visual Basic) <xref:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule%2A?displayProperty=nameWithType> метод. Затем можно передать массив <xref:System.TimeZoneInfo.AdjustmentRule> объектов на две перегруженные версии <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> метод. Чтобы получить правил коррекции для определенного часового пояса, вызовите его <xref:System.TimeZoneInfo.GetAdjustmentRules%2A?displayProperty=nameWithType> метод, возвращающий массив <xref:System.TimeZoneInfo.AdjustmentRule> объектов.  
  
   
  
## Examples  
 Следующий пример извлекает все часовые пояса, определенные на локальном компьютере и отображает полные сведения об их правила коррекции.  
  
 [!code-csharp[System.TimeZone2.AdjustmentRule.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/cs/System.TimeZone2.AdjustmentRule.Class.cs#3)]
 [!code-vb[System.TimeZone2.AdjustmentRule.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/vb/System.TimeZone2.AdjustmentRule.Class.vb#3)]  
  
 Ниже приведен небольшая часть выходных данных, созданный в примере. Точный результат будет зависеть от операционной системы и Дата выполнения примера.  
  
```  
Morocco Standard Time Adjustment rules  
   Adjustment rule #1  
      Start Date: Tuesday, January 01, 2008  
      End Date: Wednesday, December 31, 2008  
      Time Change: 1:00 hours  
      Annual Start: The Last Saturday of May at 11:59 PM  
      Annual End: The Last Sunday of August at 11:59 PM  
   Adjustment rule #2  
      Start Date: Thursday, January 01, 2009  
      End Date: Thursday, December 31, 2009  
      Time Change: 1:00 hours  
      Annual Start: The Last Sunday of May at 11:59 PM  
      Annual End: The Third Thursday of August at 11:59 PM  
  
Coordinated Universal Time has no adjustment rules  
  
GMT Standard Time Adjustment rules  
   Start Date: Monday, January 01, 0001  
   End Date: Friday, December 31, 9999  
   Time Change: 1:00 hours  
   Annual Start: The Last Sunday of March at 1:00 AM  
   Annual End: The Last Sunday of October at 2:00 AM  
  
Greenwich Standard Time has no adjustment rules  
  
W. Europe Standard Time Adjustment rules  
   Start Date: Monday, January 01, 0001  
   End Date: Friday, December 31, 9999  
   Time Change: 1:00 hours  
   Annual Start: The Last Sunday of March at 2:00 AM  
   Annual End: The Last Sunday of October at 3:00 AM  
  
Central Europe Standard Time Adjustment rules  
   Start Date: Monday, January 01, 0001  
   End Date: Friday, December 31, 9999  
   Time Change: 1:00 hours  
   Annual Start: The Last Sunday of March at 2:00 AM  
   Annual End: The Last Sunday of October at 3:00 AM  
  
Romance Standard Time Adjustment rules  
   Start Date: Monday, January 01, 0001  
   End Date: Friday, December 31, 9999  
   Time Change: 1:00 hours  
   Annual Start: The Last Sunday of March at 2:00 AM  
   Annual End: The Last Sunday of October at 3:00 AM  
  
Central European Standard Time Adjustment rules  
   Start Date: Monday, January 01, 0001  
   End Date: Friday, December 31, 9999  
   Time Change: 1:00 hours  
   Annual Start: The Last Sunday of March at 2:00 AM  
   Annual End: The Last Sunday of October at 3:00 AM  
  
W. Central Africa Standard Time has no adjustment rules  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.TimeZoneInfo" />
  </Docs>
  <Members>
    <Member MemberName="CreateAdjustmentRule">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo.AdjustmentRule CreateAdjustmentRule (DateTime dateStart, DateTime dateEnd, TimeSpan daylightDelta, TimeZoneInfo.TransitionTime daylightTransitionStart, TimeZoneInfo.TransitionTime daylightTransitionEnd);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo/AdjustmentRule CreateAdjustmentRule(valuetype System.DateTime dateStart, valuetype System.DateTime dateEnd, valuetype System.TimeSpan daylightDelta, valuetype System.TimeZoneInfo/TransitionTime daylightTransitionStart, valuetype System.TimeZoneInfo/TransitionTime daylightTransitionEnd) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule(System.DateTime,System.DateTime,System.TimeSpan,System.TimeZoneInfo.TransitionTime,System.TimeZoneInfo.TransitionTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateAdjustmentRule (dateStart As DateTime, dateEnd As DateTime, daylightDelta As TimeSpan, daylightTransitionStart As TimeZoneInfo.TransitionTime, daylightTransitionEnd As TimeZoneInfo.TransitionTime) As TimeZoneInfo.AdjustmentRule" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo::AdjustmentRule ^ CreateAdjustmentRule(DateTime dateStart, DateTime dateEnd, TimeSpan daylightDelta, TimeZoneInfo::TransitionTime daylightTransitionStart, TimeZoneInfo::TransitionTime daylightTransitionEnd);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo+AdjustmentRule</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateStart" Type="System.DateTime" />
        <Parameter Name="dateEnd" Type="System.DateTime" />
        <Parameter Name="daylightDelta" Type="System.TimeSpan" />
        <Parameter Name="daylightTransitionStart" Type="System.TimeZoneInfo+TransitionTime" />
        <Parameter Name="daylightTransitionEnd" Type="System.TimeZoneInfo+TransitionTime" />
      </Parameters>
      <Docs>
        <param name="dateStart">Дата начала действия правила коррекции. Если параметр <c>dateStart</c> имеет значение <see langword="DateTime.MinValue.Date" />, то это первое правило коррекции, действующее для часового пояса.</param>
        <param name="dateEnd">Последняя дата действия правила коррекции. Если параметр <c>dateEnd</c> имеет значение <see langword="DateTime.MaxValue.Date" />, то данное правило коррекции не имеет даты окончания.</param>
        <param name="daylightDelta">Изменение времени в результате коррекции. Это значение добавляется к свойству <see cref="P:System.TimeZoneInfo.BaseUtcOffset" /> часового пояса для получения правильного смещения летнего времени от времени в формате UTC (UTC). Это значение может быть в диапазоне от -14 до 14.</param>
        <param name="daylightTransitionStart">Объект, определяющий начало летнего времени.</param>
        <param name="daylightTransitionEnd">Объект, определяющий окончание летнего времени.</param>
        <summary>Создает новое правило коррекции для определенного часового пояса.</summary>
        <returns>Объект, представляющий новое правило коррекции.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод можно использовать для создания одного или нескольких правил коррекции для пользовательского часового пояса. Массив <xref:System.TimeZoneInfo.AdjustmentRule> объектов, возвращенных вызовом этого метода затем могут быть переданы как `adjustmentRules` параметра двух перегрузок <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> метод. Пример иллюстрирует эту процедуру.  
  
> [!NOTE]
>  <xref:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule%2A> Метод может использоваться только для определения правил коррекции для нового часового пояса; он не может использоваться для изменения правила корректировки в существующий часовой пояс.  
  
 `dateStart` И `dateEnd` параметры должны быть значения дат без компонента времени или <xref:System.ArgumentException> возникает исключение. Можно удалить компонент времени, получая <xref:System.DateTime> значение даты и времени <xref:System.DateTime.Date%2A> свойства, как показано в следующих инструкциях:  
  
```  
DateTime.MinValue.Date  
DateTime.MaxValue.Date  
DateTime.Now.Date   
dateVariable.Date  
```  
  
 <xref:System.DateTime.Kind%2A> Свойство `dateStart` и `dateEnd` параметры также должны быть <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>.  
  
 Значение `daylightDelta` параметра может находиться в диапазоне от -14 до 14. Сумма `daylightDelta` параметр и `baseUtcOffset` параметр, используемый в вызове <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> метод должен также находиться в диапазоне от -14 до 14 или <xref:System.InvalidTimeZoneException> возникает исключение.  
  
> [!NOTE]
>  `daylightDelta` Параметр определяет разницу между зимним временем часовой пояс и летнее время. Он не предназначен для определения смещение зимнего времени часового пояса в формате UTC. <xref:System.TimeZoneInfo> Класс предполагает, что это смещение от времени UTC является постоянным в течение всего жизненного цикла часовой пояс. Для отражения изменений в смещении часового пояса от времени UTC, который не является причиной путем применения правил коррекции, необходимо использовать <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> метод для создания нового пользовательского часового пояса.  
  
   
  
## Examples  
 Следующий пример создает альтернативный стандартного центрального часового пояса и определяет три правила коррекции для периодов 1976 1986, 1987-2006 и 2007 и более поздних. Эти правила добавляются в универсальный тип <xref:System.Collections.Generic.List%601> , элементы которой копируются в объект <xref:System.TimeZoneInfo.AdjustmentRule> массива. Затем этот массив используется в вызове <xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%2CSystem.String%2CSystem.TimeZoneInfo.AdjustmentRule%5B%5D%29?displayProperty=nameWithType> метода.  
  
 [!code-csharp[System.TimeZone2.AdjustmentRule.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/cs/System.TimeZone2.AdjustmentRule.Class.cs#1)]
 [!code-vb[System.TimeZone2.AdjustmentRule.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/vb/System.TimeZone2.AdjustmentRule.Class.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Свойство <see cref="P:System.DateTime.Kind" /> параметра <paramref name="dateStart" /> или <paramref name="dateEnd" /> не равно <see cref="F:System.DateTimeKind.Unspecified" />.  
  
 - или -  
  
 Параметр <paramref name="daylightTransitionStart" /> равен параметру <paramref name="daylightTransitionEnd" />.  
  
 - или -  
  
 Параметр <paramref name="dateStart" /> или <paramref name="dateEnd" /> включает значение времени суток.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          Момент, указанный в параметре <paramref name="dateEnd" />, наступает раньше, чем момент, указанный в параметре <paramref name="dateStart" />.  
  
 - или -  
  
 Параметр <paramref name="daylightDelta" /> меньше –14 или больше 14.  
  
 - или -  
  
 Свойство <see cref="P:System.TimeSpan.Milliseconds" /> параметра <paramref name="daylightDelta" /> не равно 0.  
  
 - или -  
  
 Свойство <see cref="P:System.TimeSpan.Ticks" /> параметра <paramref name="daylightDelta" /> не равно целому числу секунд.</exception>
      </Docs>
    </Member>
    <Member MemberName="DateEnd">
      <MemberSignature Language="C#" Value="public DateTime DateEnd { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime DateEnd" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.AdjustmentRule.DateEnd" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DateEnd As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime DateEnd { DateTime get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает дату, когда правило коррекции перестает быть действительным.</summary>
        <value>Значение <see cref="T:System.DateTime" />, указывающее конечную дату правила коррекции.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Значение <xref:System.TimeZoneInfo.AdjustmentRule.DateEnd%2A> задано значение даты без компонента времени.  
  
 Поскольку конечная дата действия правила коррекции текущего обычно известен, можно назначить `DateTime.MaxValue.Date` для <xref:System.TimeZoneInfo.AdjustmentRule.DateEnd%2A> свойства при создании пользовательского правила коррекции.  
  
> [!IMPORTANT]
>  Если нет особой причины делать по-другому, следует определить срок действия правила коррекции через интервал времени, во время которого стандартное время текущем часовом поясе. Если нет особой причины этого, не следует определять срок действия правила коррекции через интервал времени, во время которого текущем часовом поясе летнее время. Например если происходит переход часового пояса с летнего времени на третье воскресенье марта и переход на летнее время — в первое воскресенье октября, конечная дата действия правила коррекции не следует 31 декабря определенного год, так как эта дата входит в период летнего времени.  
  
 По умолчанию в Windows XP определяет единственное правило коррекции, Дата окончания — пятница, 31 декабря 9999 года (значение `DateTime.MaxValue.Date`), для каждого часового пояса. Для часовых поясов в Соединенных Штатах реестра в Windows Vista определяет два правила коррекции.  
  
-   Понедельник, 1 января 0001 в воскресенье 31 декабря 2006 г.  
  
-   Понедельник, 1 января 2007, пятница, 31 декабря 9999 года.  
  
 Это означает, что, несмотря на то, что правил коррекции часового пояса, хранящиеся в реестре можно использовать для выполнения текущей операции, связанные с часового пояса, они не может использоваться надежно для извлечения сведений о исторических часовых поясов. Сведения об определении пользовательского часового пояса с несколькими правилами коррекции, которые могут использоваться в приложении исторических часовому поясу см. в разделе [как: создание часовых поясов с правилами коррекции](~/docs/standard/datetime/create-time-zones-with-adjustment-rules.md).  
  
   
  
## Examples  
 Следующий пример отображает сведения обо всех часовые пояса, определенные в системный реестр локального компьютера, включая начальную и конечную даты их правила коррекции.  
  
 [!code-csharp[System.TimeZoneInfo.AdjustmentRule.DateStart#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TimeZoneInfo.AdjustmentRule.DateStart/cs/DateStart1.cs#1)]
 [!code-vb[System.TimeZoneInfo.AdjustmentRule.DateStart#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TimeZoneInfo.AdjustmentRule.DateStart/vb/DateStart1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DateStart">
      <MemberSignature Language="C#" Value="public DateTime DateStart { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime DateStart" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.AdjustmentRule.DateStart" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DateStart As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime DateStart { DateTime get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает дату вступления в силу правила коррекции.</summary>
        <value>Значение <see cref="T:System.DateTime" />, указывающее время вступления в силу правила коррекции.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Значение <xref:System.TimeZoneInfo.AdjustmentRule.DateStart%2A> задано значение даты без компонента времени. Он определяет дату, на котором правило коррекции для определенного вступает в силу.  Это дата, в котором набор переходы (которые обычно определяются один переход на летнее время и один переход обратно на стандартное время), вступают в силу. Например правило коррекции может вступить в силу 1 января 2017 г, предоставляющий для перехода на летнее время на второе воскресенье марта и для перехода в первое воскресенье ноября обратно на стандартное время. Обратите внимание, что дату начала действия правила коррекции не привязан к дату первого перехода.  
  
 Можно назначить `DateTime.MinValue.Date` для <xref:System.TimeZoneInfo.AdjustmentRule.DateEnd%2A> свойства при создании пользовательского правила коррекции для использования в приложении часовому поясу, не придется работать с предысторией часовом поясе.  
  
> [!IMPORTANT]
>  Если нет особой причины делать по-другому, следует определить дату начала правило коррекции через интервал времени, во время которого стандартное время текущем часовом поясе. Если нет особой причины этого, не следует определять правила коррекции Дата начала через интервал времени, во время которого текущем часовом поясе летнее время. Например если происходит переход часового пояса с летнего времени на третье воскресенье марта и переход на летнее время — в первое воскресенье октября, Начальная дата действия правила коррекции необходимо 1 января конкретной год, так как эта дата входит в период летнего времени.  
  
 По умолчанию в Windows XP определяет единственное правило коррекции, Дата начала которых — понедельника 1 января 0001 года (значение `DateTime.MinValue.Date`), для каждого часового пояса. Для часовых поясов в Соединенных Штатах реестра в Windows Vista определяет два правила коррекции.  
  
-   Понедельник, 1 января 0001 в воскресенье 31 декабря 2006 г.  
  
-   Понедельник, 1 января 2007, пятница, 31 декабря 9999 года.  
  
 Это означает, что, несмотря на то, что правил коррекции часового пояса, хранящиеся в реестре можно использовать для выполнения текущей операции, связанные с часового пояса, они не может использоваться надежно для извлечения сведений о исторических часовых поясов. Сведения об определении пользовательского часового пояса с несколькими правилами коррекции, которые могут использоваться в приложении исторических часовому поясу см. в разделе [как: создание часовых поясов с правилами коррекции](~/docs/standard/datetime/create-time-zones-with-adjustment-rules.md).  
  
   
  
## Examples  
 Следующий пример отображает сведения обо всех часовые пояса, определенные в системный реестр локального компьютера, включая начальную и конечную даты их правила коррекции.  
  
 [!code-csharp[System.TimeZoneInfo.AdjustmentRule.DateStart#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TimeZoneInfo.AdjustmentRule.DateStart/cs/DateStart1.cs#1)]
 [!code-vb[System.TimeZoneInfo.AdjustmentRule.DateStart#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TimeZoneInfo.AdjustmentRule.DateStart/vb/DateStart1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DaylightDelta">
      <MemberSignature Language="C#" Value="public TimeSpan DaylightDelta { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan DaylightDelta" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DaylightDelta As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan DaylightDelta { TimeSpan get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает время, необходимое для формирования летнего времени часового пояса. Это количество времени добавляется к смещению часового пояса от времени в формате UTC.</summary>
        <value>Объект <see cref="T:System.TimeSpan" />, показывающий количество времени, добавляемого к стандартному изменению времени в результате правила коррекции.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Летнего времени часового пояса определяется по следующей формуле:  
  
```  
TimeZoneTime = BaseUtcOffset + DaylightDelta + UtcTime  
```  
  
 Значение <xref:System.TimeZoneInfo.AdjustmentRule.DaylightDelta%2A> свойство может принимать от 14 часов до-14 часов.  
  
> [!NOTE]
>  <xref:System.TimeZoneInfo.AdjustmentRule.DaylightDelta%2A> Свойство измеряет разницу между зимним временем часовой пояс и летнее время. Он не применяется к изменениям в стандартных смещение часового пояса в формате UTC. Для представления часового пояса, измененного его смещение стандартное время от времени UTC, необходимо вызвать метод <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> метод для создания нового часового пояса.  
  
 Наиболее распространенные значение <xref:System.TimeZoneInfo.AdjustmentRule.DaylightDelta%2A> свойства — 1.0 часов. Применение правила коррекции для летнего времени увеличивает смещение часового пояса от времени в формате UTC на один час.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DaylightTransitionEnd">
      <MemberSignature Language="C#" Value="public TimeZoneInfo.TransitionTime DaylightTransitionEnd { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeZoneInfo/TransitionTime DaylightTransitionEnd" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DaylightTransitionEnd As TimeZoneInfo.TransitionTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeZoneInfo::TransitionTime DaylightTransitionEnd { TimeZoneInfo::TransitionTime get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo+TransitionTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает сведения о ежегодном переходе с летнего времени обратно на стандартное время.</summary>
        <value>Объект <see cref="T:System.TimeZoneInfo.TransitionTime" />, определяющий ежегодный переход с летнего времени обратно на стандартное время часового пояса.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZoneInfo.TransitionTime> Объект, возвращаемый <xref:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd%2A> свойство определяет правило фиксированной даты или правило с плавающей датой для возврата на стандартное время. Правило фиксированной даты предоставляет месяц, день и время суток, на котором происходит переход. Правило с плавающей датой предоставляет месяц, неделя, день недели и время суток, на котором происходит переход.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DaylightTransitionStart">
      <MemberSignature Language="C#" Value="public TimeZoneInfo.TransitionTime DaylightTransitionStart { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeZoneInfo/TransitionTime DaylightTransitionStart" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionStart" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DaylightTransitionStart As TimeZoneInfo.TransitionTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeZoneInfo::TransitionTime DaylightTransitionStart { TimeZoneInfo::TransitionTime get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo+TransitionTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает сведения о ежегодном переходе со стандартного времени на летнее время.</summary>
        <value>Объект <see cref="T:System.TimeZoneInfo.TransitionTime" />, определяющий ежегодный переход со стандартного времени часового пояса на летнее время.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZoneInfo.TransitionTime> Объект, возвращаемый <xref:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionStart%2A> свойство определяет правило фиксированной даты или правило с плавающей датой для перехода на летнее время. Правило фиксированной даты предоставляет месяц, день и время суток, на котором происходит переход. Правило с плавающей датой предоставляет месяц, неделя, день недели и время суток, на котором происходит переход.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (TimeZoneInfo.AdjustmentRule other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.TimeZoneInfo/AdjustmentRule other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.AdjustmentRule.Equals(System.TimeZoneInfo.AdjustmentRule)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As TimeZoneInfo.AdjustmentRule) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(TimeZoneInfo::AdjustmentRule ^ other);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.TimeZoneInfo+AdjustmentRule" />
      </Parameters>
      <Docs>
        <param name="other">Объект, который требуется сравнить с текущим объектом.</param>
        <summary>Определяет, равен ли текущий объект <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> второму объекту <see cref="T:System.TimeZoneInfo.AdjustmentRule" />.</summary>
        <returns>
          Значение <see langword="true" />, если оба объекта <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> имеют одинаковые значения; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Чтобы определить, является ли два <xref:System.TimeZoneInfo.AdjustmentRule> объекты равны, <xref:System.TimeZoneInfo.AdjustmentRule.Equals%28System.TimeZoneInfo.AdjustmentRule%29> метод сравнивает значения членов каждого объекта. Два правила коррекции равны, если они имеют одинаковые даты вступления в силу, же разностных и одинаковые значения для <xref:System.TimeZoneInfo.TransitionTime> объектов, возвращенных их <xref:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionStart%2A> и <xref:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd%2A> свойства.  
  
   
  
## Examples  
 В следующем примере вызывается <xref:System.TimeZoneInfo.AdjustmentRule.Equals%28System.TimeZoneInfo.AdjustmentRule%29?displayProperty=nameWithType> метод для сравнения правил коррекции соответствующими Центральная Канада (зима) и мексиканское время центральное стандартное время.  
  
 [!code-csharp[System.TimeZone2.AdjustmentRule.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/cs/System.TimeZone2.AdjustmentRule.Class.cs#2)]
 [!code-vb[System.TimeZone2.AdjustmentRule.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/vb/System.TimeZone2.AdjustmentRule.Class.vb#2)]  
  
 Этот код отображает следующие выходные данные на консоль:  
  
```  
Comparing Central Standard Time rule for 1/1/0001 to 12/31/9999 with:  
   Canada Central Standard Time has no adjustment rules.  
   Mexican CST for 1/1/0001 to 12/31/9999: Equal  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.AdjustmentRule.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Служит хэш-функцией для алгоритмов хэширования и таких структур данных, как хэш-таблицы.</summary>
        <returns>32-битовое целое число со знаком, выступающее в роли хэш-кода для текущего объекта <see cref="T:System.TimeZoneInfo.AdjustmentRule" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.AdjustmentRule.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDeserialization (sender As Object) Implements IDeserializationCallback.OnDeserialization" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System::Object ^ sender) = System::Runtime::Serialization::IDeserializationCallback::OnDeserialization;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="sender">Объект, который инициализирует обратный вызов. Данная функциональная возможность для этого параметра в настоящее время не реализуется.</param>
        <summary>Выполняется после завершения десериализации объекта <see cref="T:System.TimeZoneInfo.AdjustmentRule" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.AdjustmentRule.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">Объект, который требуется заполнить данными.</param>
        <param name="context">Конечный объект для этой сериализации (см. раздел, посвященный <see cref="T:System.Runtime.Serialization.StreamingContext" />).</param>
        <summary>Заполняет объект <see cref="T:System.Runtime.Serialization.SerializationInfo" /> данными, необходимыми для сериализации этого объекта.</summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">требуется полное доверие для непосредственно вызывающего метода. Этот член не может использоваться частично доверенным или прозрачным кодом.</permission>
      </Docs>
    </Member>
  </Members>
</Type>