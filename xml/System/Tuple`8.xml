<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Tuple`8.xml" source-language="en-US" target-language="ru-RU">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5748dd4b2ec95cbd704aabcd790b51dc2d7fe169a.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">748dd4b2ec95cbd704aabcd790b51dc2d7fe169a</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The type of the tuple's first component.</source>
          <target state="translated">Тип первого компонента кортежа.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The type of the tuple's second component.</source>
          <target state="translated">Тип второго компонента кортежа.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The type of the tuple's third component.</source>
          <target state="translated">Тип третьего компонента кортежа.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The type of the tuple's fourth component.</source>
          <target state="translated">Тип четвертого компонента кортежа.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The type of the tuple's fifth component.</source>
          <target state="translated">Тип пятого компонента кортежа.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The type of the tuple's sixth component.</source>
          <target state="translated">Тип шестого компонента кортежа.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The type of the tuple's seventh component.</source>
          <target state="translated">Тип седьмого компонента кортежа.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>Any generic <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> object that defines the types of the tuple's remaining components.</source>
          <target state="translated">Любой универсальный объект <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph>, который определяет типы остальных компонентов кортежа.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="T:System.Tuple`8">
          <source>Represents an <bpt id="p1">*</bpt>n<ept id="p1">*</ept>-tuple, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is 8 or greater.</source>
          <target state="translated">Представляет кортеж из <bpt id="p1">*</bpt>n<ept id="p1">*</ept> компонентов, где <bpt id="p2">*</bpt>n<ept id="p2">*</ept> равно 8 или больше.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>A tuple is a data structure that has a specific number and sequence of values.</source>
          <target state="translated">Кортеж — это структура данных, с определенным номером и последовательность значений.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> class represents an <bpt id="p1">*</bpt>n<ept id="p1">*</ept>-tuple that has eight or more components.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> Класса представляет <bpt id="p1">*</bpt>n<ept id="p1">*</ept>-, который имеет восемь или более компонентов.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>You can instantiate a <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> object with exactly eight components by calling the static <ph id="ph2">&lt;xref:System.Tuple.Create%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Можно создать экземпляр <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> объект с точно восьми компонентов путем вызова статического <ph id="ph2">&lt;xref:System.Tuple.Create%2A?displayProperty=nameWithType&gt;</ph> метод.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The following example creates an 8-tuple (octuple) that contains prime numbers that are less than 20.</source>
          <target state="translated">В следующем примере создается 8-кортеж (octuple), содержащего простые числа меньше 20.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>Note that it uses type inference to determine the type of each component.</source>
          <target state="translated">Обратите внимание, что используется определение типа для определения типа для каждого компонента.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>You can also instantiate an n-tuple object with eight or more components by calling the <ph id="ph1">&lt;xref:System.Tuple%608.%23ctor%2A&gt;</ph> constructor.</source>
          <target state="translated">Можно также создать экземпляр объекта n кортежей с восемь или более компонентов, вызвав <ph id="ph1">&lt;xref:System.Tuple%608.%23ctor%2A&gt;</ph> конструктор.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Tuple%608.%23ctor%2A&gt;</ph> constructor to create an 8-tuple that is equivalent to the tuple created in the previous example.</source>
          <target state="translated">В следующем примере используется <ph id="ph1">&lt;xref:System.Tuple%608.%23ctor%2A&gt;</ph> конструктор для создания 8-кортежа, которое эквивалентно значению кортежу, созданному в предыдущем примере.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>To create an n-tuple with nine or more components, you must call the  <ph id="ph1">&lt;xref:System.Tuple%608.%23ctor%2A&gt;</ph> constructor.</source>
          <target state="translated">Чтобы создать кортеж из n с 9 или более компонентов, необходимо вызвать метод <ph id="ph1">&lt;xref:System.Tuple%608.%23ctor%2A&gt;</ph> конструктор.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The static factory methods of the <ph id="ph1">&lt;xref:System.Tuple&gt;</ph> class do not support the creation of <ph id="ph2">`Tuple`</ph> objects with more than eight components.</source>
          <target state="translated">Статические методы фабрики для <ph id="ph1">&lt;xref:System.Tuple&gt;</ph> класса не поддерживают создание <ph id="ph2">`Tuple`</ph> объекты с более чем восьми компонентов.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>To instantiate an n-tuple that has eight or more components with the <ph id="ph1">&lt;xref:System.Tuple%608.%23ctor%2A&gt;</ph> constructor, you supply a generic <ph id="ph2">`Tuple`</ph> object as the <ph id="ph3">`rest`</ph> parameter to define the eighth through <bpt id="p1">*</bpt>n<ept id="p1">*</ept>th components of the tuple.</source>
          <target state="translated">Для создания экземпляра n кортеж, который имеет восемь или более компонентов с <ph id="ph1">&lt;xref:System.Tuple%608.%23ctor%2A&gt;</ph> конструктор, предоставить универсальный <ph id="ph2">`Tuple`</ph> объекта в виде <ph id="ph3">`rest`</ph> параметра для определения восьмого по <bpt id="p1">*</bpt>n<ept id="p1">*</ept>th компонента кортежа.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>By nesting generic <ph id="ph1">`Tuple`</ph> objects in this way, you can create a tuple that has no practical limitation on the number of its components.</source>
          <target state="translated">Путем вложения универсального <ph id="ph1">`Tuple`</ph> объектов таким образом, можно создать кортеж с практической ограничений на число ее компонентов.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The following example creates a 17-tuple that contains population data for the city of Detroit, Michigan, for each national census from 1860 to 2000.</source>
          <target state="translated">В следующем примере создается 17-кортеж, содержащий данные для города из Детройт, Michigan, национальной переписи из 1860 до 2000.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The first component of the tuple is the city name.</source>
          <target state="translated">Первого компонента кортежа является именем города.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The second component is the start date of the data series, and the third component is the population at the start date.</source>
          <target state="translated">Второй компонент — это начальная дата ряда данных, а третий компонент является заполнение на дату начала.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>Each subsequent component provides the population at decade intervals.</source>
          <target state="translated">Каждый последующий компонент Указывает заполнение каждые десять лет.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The 17-tuple is created by nesting a <ph id="ph1">&lt;xref:System.Tuple%603&gt;</ph> object inside a <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> object.</source>
          <target state="translated">17 кортежа создается путем вложения <ph id="ph1">&lt;xref:System.Tuple%603&gt;</ph> объекта внутри <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> объекта.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>(That is, the <ph id="ph1">&lt;xref:System.Tuple%603&gt;</ph> object is supplied as the value of the <ph id="ph2">`rest`</ph> parameter in the <ph id="ph3">&lt;xref:System.Tuple%608&gt;</ph> class constructor.) This <ph id="ph4">&lt;xref:System.Tuple%608&gt;</ph> object is, in turn, nested in an outer <ph id="ph5">&lt;xref:System.Tuple%608&gt;</ph> object.</source>
          <target state="translated">(Это, <ph id="ph1">&lt;xref:System.Tuple%603&gt;</ph> объект передается в качестве значения параметра <ph id="ph2">`rest`</ph> параметр в <ph id="ph3">&lt;xref:System.Tuple%608&gt;</ph> конструктора класса.) Это <ph id="ph4">&lt;xref:System.Tuple%608&gt;</ph> объект в свою очередь, вложен во внешнем <ph id="ph5">&lt;xref:System.Tuple%608&gt;</ph> объекта.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>(That is, the <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> object is supplied as the value of the <ph id="ph2">`rest`</ph> parameter in the outer <ph id="ph3">&lt;xref:System.Tuple%608&gt;</ph> object's class constructor.)</source>
          <target state="translated">(Это, <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> объект передается в качестве значения параметра <ph id="ph2">`rest`</ph> параметра во внешнем <ph id="ph3">&lt;xref:System.Tuple%608&gt;</ph> конструктора класса объекта.)</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>You can retrieve the value of the tuple's first seven components by using the read-only <ph id="ph1">&lt;xref:System.Tuple%607.Item1%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Tuple%607.Item2%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Tuple%607.Item3%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Tuple%607.Item4%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Tuple%607.Item5%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Tuple%607.Item6%2A&gt;</ph>, and <ph id="ph7">&lt;xref:System.Tuple%607.Item7%2A&gt;</ph> instance properties.</source>
          <target state="translated">Значение кортежа первых семи компонентов можно получить с помощью доступной только для чтения <ph id="ph1">&lt;xref:System.Tuple%607.Item1%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Tuple%607.Item2%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Tuple%607.Item3%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Tuple%607.Item4%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Tuple%607.Item5%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Tuple%607.Item6%2A&gt;</ph>, и <ph id="ph7">&lt;xref:System.Tuple%607.Item7%2A&gt;</ph> свойства экземпляра.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>Any additional components are nested and can be retrieved from the <ph id="ph1">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> property.</source>
          <target state="translated">Дополнительные компоненты являются вложенными и могут быть получены из <ph id="ph1">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> свойство.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>In the previous example, the <ph id="ph1">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph> through <ph id="ph2">&lt;xref:System.Tuple%608.Item7%2A&gt;</ph> properties retrieve the first through seventh components of the tuple.</source>
          <target state="translated">В предыдущем примере <ph id="ph1">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph> через <ph id="ph2">&lt;xref:System.Tuple%608.Item7%2A&gt;</ph> свойства получения первого через седьмого компонента кортежа.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The eighth through fourteenth components are contained in the tuple that is nested at the second level, and are represented by the <ph id="ph1">`Rest.Item1`</ph> through <ph id="ph2">`Rest.Item7`</ph> properties.</source>
          <target state="translated">Восьмого из четырнадцати компонентов содержатся в кортеже, находящегося на втором уровне, а также представлены <ph id="ph1">`Rest.Item1`</ph> через <ph id="ph2">`Rest.Item7`</ph> свойства.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The fifteenth through seventeenth components are contained in the tuple that is nested at the third level, and are represented by the <ph id="ph1">`Rest.Rest.Item1`</ph> though <ph id="ph2">`Rest.Rest.Item3`</ph> properties.</source>
          <target state="translated">Пятнадцатого по Семнадцатый компонентов содержатся в кортеже, находящегося на третьем уровне, а также представлены <ph id="ph1">`Rest.Rest.Item1`</ph> на то, что <ph id="ph2">`Rest.Rest.Item3`</ph> свойства.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>Tuples are commonly used in four different ways:</source>
          <target state="translated">Кортежи обычно используются четырьмя способами:</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>To represent a single set of data.</source>
          <target state="translated">Для представления одного набора данных.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>For example, a tuple can represent a database record, and its components can represent individual fields of the record.</source>
          <target state="translated">Например кортеж может представлять запись в базе данных, и его компоненты могут представлять отдельные поля записи.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>To provide easy access to, and manipulation of, a data set.</source>
          <target state="translated">Чтобы предоставить доступ к функциям и его обработки набора данных.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>To return multiple values from a method without the use of <ph id="ph1">`out`</ph> parameters (in C#) or <ph id="ph2">`ByRef`</ph> parameters (in Visual Basic).</source>
          <target state="translated">Для возврата нескольких значений из метода без использования <ph id="ph1">`out`</ph> параметры (в C#) или <ph id="ph2">`ByRef`</ph> (в Visual Basic).</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>For example, the previous example returns its computed statistics, along with the city name, in a <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> object.</source>
          <target state="translated">Например, предыдущий пример возвращает вычисленная Статистика и название города, в <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> объекта.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>To pass multiple values to a method through a single parameter.</source>
          <target state="translated">Для передачи нескольких значений методу в составе одного параметра.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>For example, the <ph id="ph1">&lt;xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType&gt;</ph> method has a single parameter that lets you supply one value to the method that the thread executes at startup.</source>
          <target state="translated">Например <ph id="ph1">&lt;xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType&gt;</ph> метод принимает один параметр, позволяющий предоставлять одно значение метода, который выполняется потоком во время запуска.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>If you supply a <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> object as the method argument, you can supply the thread’s startup routine with seven items of data.</source>
          <target state="translated">При указании <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> объект как аргумент метода, можно просто указать процедуру запуска потока с семью элементами данных.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The value of the tuple's first component.</source>
          <target state="translated">Значение первого компонента кортежа.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The value of the tuple's second component.</source>
          <target state="translated">Значение второго компонента кортежа.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The value of the tuple's third component.</source>
          <target state="translated">Значение третьего компонента кортежа.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The value of the tuple's fourth component</source>
          <target state="translated">Значение четвертого компонента кортежа.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The value of the tuple's fifth component.</source>
          <target state="translated">Значение пятого компонента кортежа.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The value of the tuple's sixth component.</source>
          <target state="translated">Значение шестого компонента кортежа.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The value of the tuple's seventh component.</source>
          <target state="translated">Значение седьмого компонента кортежа.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>Any generic <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> object that contains the values of the tuple's remaining components.</source>
          <target state="translated">Любой универсальный объект <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph>, который содержит значения остальных компонентов кортежа.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> class.</source>
          <target state="translated">Инициализирует новый экземпляр класса <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>You can also use the static <ph id="ph1">&lt;xref:System.Tuple.Create%2A?displayProperty=nameWithType&gt;</ph> method to instantiate an 8-tuple (octuple) object without having to explicitly specify the types of its components.</source>
          <target state="translated">Можно также использовать статический <ph id="ph1">&lt;xref:System.Tuple.Create%2A?displayProperty=nameWithType&gt;</ph> метод для создания экземпляра объекта 8 кортеж (octuple) без явного указания типов его компонентов.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Tuple.Create%2A?displayProperty=nameWithType&gt;</ph> method to instantiate an 8-tuple object that contains prime numbers that are less than 20.</source>
          <target state="translated">В следующем примере используется <ph id="ph1">&lt;xref:System.Tuple.Create%2A?displayProperty=nameWithType&gt;</ph> метод для создания экземпляра объекта 8 кортеж, содержащий простые числа меньше 20.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>This is equivalent to the following call to the <ph id="ph1">&lt;xref:System.Tuple%607.%23ctor%2A&gt;</ph> class constructor.</source>
          <target state="translated">Это эквивалентно следующий вызов <ph id="ph1">&lt;xref:System.Tuple%607.%23ctor%2A&gt;</ph> конструктора класса.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>However, the static <ph id="ph1">&lt;xref:System.Tuple.Create%2A?displayProperty=nameWithType&gt;</ph> method cannot be used to create a tuple object with more than eight components.</source>
          <target state="translated">Тем не менее статический <ph id="ph1">&lt;xref:System.Tuple.Create%2A?displayProperty=nameWithType&gt;</ph> метод не может использоваться для создания объекта кортежей с более чем восьми компонентов.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>When using the <ph id="ph1">&lt;xref:System.Tuple%608.%23ctor%2A&gt;</ph> constructor to create an n-tuple with eight or more components, you use the <ph id="ph2">`rest`</ph> parameter to create a nested n-tuple that has from one to seven components.</source>
          <target state="translated">При использовании <ph id="ph1">&lt;xref:System.Tuple%608.%23ctor%2A&gt;</ph> конструктор, чтобы создать кортеж из n восемь или более компонентов, можно использовать <ph id="ph2">`rest`</ph> для создания вложенного n кортеж, который содержит от одной до семи компонентов.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>By using successive levels of nesting, you can create an n-tuple that has a virtually unlimited number of components.</source>
          <target state="translated">Используя последовательные уровни вложения, можно создать n кортеж с практически неограниченное число компонентов.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>For example, to create a 25-tuple, you instantiate a <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> object with three levels of nesting, as follows:</source>
          <target state="translated">Например, чтобы создать кортеж 25, можно создать <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> объекта с тремя уровнями вложенности, как показано ниже:</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The outermost <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> object contains the first through seventh components.</source>
          <target state="translated">Внешний объект <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> содержит объект с первого по седьмой компонентов.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>Its <ph id="ph1">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> property provides access to an <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> object at the first level of nesting.</source>
          <target state="translated">Его <ph id="ph1">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> свойство предоставляет доступ к <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> объекта на первом уровне вложенности.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The outermost nested <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> object contains the eighth through fourteenth components, and its <ph id="ph2">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> property provides access to an <ph id="ph3">&lt;xref:System.Tuple%608&gt;</ph> object at the second level of nesting.</source>
          <target state="translated">Самых внешних вложенных <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> объект содержит восьмого из четырнадцати компонентов и его <ph id="ph2">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> свойство предоставляет доступ к <ph id="ph3">&lt;xref:System.Tuple%608&gt;</ph> объекта на втором уровне вложенности.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> object at the second level of nesting contains the fifteenth through twenty-first  components, and its <ph id="ph2">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> property provides access to an <ph id="ph3">&lt;xref:System.Tuple%604&gt;</ph> object at the third level of nesting.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> Объект на втором уровне вложенности содержит пятнадцатого по двадцать первый компоненты и его <ph id="ph2">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> свойство предоставляет доступ к <ph id="ph3">&lt;xref:System.Tuple%604&gt;</ph> объекта на третьем уровне вложенности.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The innermost tuple is a <ph id="ph1">&lt;xref:System.Tuple%604&gt;</ph> object that contains the twenty-second through twenty-fifth components.</source>
          <target state="translated">Является внутренней кортеж <ph id="ph1">&lt;xref:System.Tuple%604&gt;</ph> , содержащий компоненты двадцать вторым до 25.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The following example creates a 17-tuple that contains population data for the city of Detroit, Michigan, for each census from 1860 to 2000.</source>
          <target state="translated">В следующем примере создается 17-кортеж, содержащий данные для города из Детройт, Michigan, переписи из 1860 до 2000.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The first component of the tuple is the city name.</source>
          <target state="translated">Первого компонента кортежа является именем города.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The second component is the start date of the series of data, and the third component is the population at the start date.</source>
          <target state="translated">Второй компонент — это начальная дата ряда данных, а третьим компонентом является заполнение на дату начала.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>Each subsequent component provides the population at decade intervals.</source>
          <target state="translated">Каждый последующий компонент Указывает заполнение каждые десять лет.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The example uses two layers of nesting to create the 17-tuple: It defines a 7-tuple whose third through seventh components contain population data for 1860 through 1900, a nested 7-tuple that contains population data for 1910 through 1970, and an inner nested 3-tuple that contains population data for 1980 through 2000.</source>
          <target state="translated">В примере используется два уровня вложения для создания кортежа 17: он определяет 7 кортежа которого с третьего по седьмой содержат данные о населении 1860 по 1900 год, вложенный 7-кортеж, содержащий данные для 1910 по 1970 года, и также вложенный 3-элементного кортежа содержащий данные о населении 1980 до 2000.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source><ph id="ph1">&lt;paramref name="rest" /&gt;</ph> is not a generic <ph id="ph2">&lt;see langword="Tuple" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="rest" /&gt;</ph> не является универсальным объектом <ph id="ph2">&lt;see langword="Tuple" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.Equals(System.Object)">
          <source>The object to compare with this instance.</source>
          <target state="translated">Объект, сравниваемый с данным экземпляром.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.Equals(System.Object)">
          <source>Returns a value that indicates whether the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object is equal to a specified object.</source>
          <target state="translated">Возвращает значение, показывающее, равен ли текущий объект <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> указанному объекту.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current instance is equal to the specified object; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Значение <ph id="ph1">&lt;see langword="true" /&gt;</ph>, если текущий экземпляр равен указанному объекту; в противном случае — <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.Equals(System.Object)">
          <source>The <ph id="ph1">`obj`</ph> parameter is considered to be equal to the current instance if it meets all the following conditions:</source>
          <target state="translated"><ph id="ph1">`obj`</ph> Параметр считается должно совпадать с текущим экземпляром, если он соответствует всем перечисленным ниже условиям:</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.Equals(System.Object)">
          <source>It is a <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> object.</source>
          <target state="translated">Это <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> объекта.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.Equals(System.Object)">
          <source>It has the same total number of components that are of the same types as the current instance.</source>
          <target state="translated">Он имеет же общее число компонентов, имеющих те же типы, что и текущий экземпляр.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.Equals(System.Object)">
          <source>Its components (including its nested components) are equal to those of the current instance.</source>
          <target state="translated">Его компоненты (включая вложенные) равны текущего экземпляра.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.Equals(System.Object)">
          <source>Equality is determined by the default equality comparer for each component.</source>
          <target state="translated">Равенство определяется путем сравнения по умолчанию для каждого компонента.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.Equals(System.Object)">
          <source>The following example defines five <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> objects that contain prime numbers.</source>
          <target state="translated">В следующем примере определяется пять <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> объектов, содержащих простые числа.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.Equals(System.Object)">
          <source>It then compares the first object with each of the remaining objects.</source>
          <target state="translated">Затем он сравнивает первый объект с каждой из оставшихся объектов.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.Equals(System.Object)">
          <source>As the output shows, only the first and the last <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> objects are equal, because they have an identical number of components with identical values.</source>
          <target state="translated">Как видно, только первый и последний <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> объекты равны, поскольку они имеют одинаковое число компонентов с одинаковыми значениями.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.GetHashCode">
          <source>Calculates the hash code for the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object.</source>
          <target state="translated">Вычисляет хэш-код для текущего объекта <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.GetHashCode">
          <source>A 32-bit signed integer hash code.</source>
          <target state="translated">Хэш-код в виде 32-разрядного целого числа со знаком.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.Item1">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's first component.</source>
          <target state="translated">Получает значение первого компонента текущего объекта <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item1">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's first component.</source>
          <target state="translated">Значение первого компонента текущего объекта <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item1">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">Можно динамически определить тип <ph id="ph1">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph> компонент одним из двух способов:</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item1">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph> property.</source>
          <target state="translated">Путем вызова <ph id="ph1">`GetType`</ph> метода со значением, возвращается <ph id="ph2">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph> свойство.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item1">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> object, and retrieving the first element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Путем получения <ph id="ph1">&lt;xref:System.Type&gt;</ph> , представляющий <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> объекта и извлечении первый элемент из массива, который возвращается его <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> метод.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item1">
          <source>The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000.</source>
          <target state="translated">В следующем примере создается объект 17 кортеж, содержащий данные для города из Детройт, Michigan, с 1860 по 2000.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item1">
          <source>The first component of the 17-tuple is the city name.</source>
          <target state="translated">Первый компонент 17 кортежа является именем города.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item1">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph> property to display the city name in the table header before displaying the population data.</source>
          <target state="translated">В этом примере <ph id="ph1">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph> свойство для отображения названия города в заголовке таблицы перед отображением данных о населении.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.Item2">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's second component.</source>
          <target state="translated">Получает значение второго компонента текущего объекта <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item2">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's second component.</source>
          <target state="translated">Значение второго компонента текущего объекта <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item2">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%608.Item2%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">Можно динамически определить тип <ph id="ph1">&lt;xref:System.Tuple%608.Item2%2A&gt;</ph> компонент одним из двух способов:</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item2">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%608.Item2%2A&gt;</ph> property.</source>
          <target state="translated">Путем вызова <ph id="ph1">`GetType`</ph> метода со значением, возвращается <ph id="ph2">&lt;xref:System.Tuple%608.Item2%2A&gt;</ph> свойство.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item2">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> object, and retrieving the second element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Путем получения <ph id="ph1">&lt;xref:System.Type&gt;</ph> , представляющий <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> объекта и извлечении второй элемент из массива, который возвращается его <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> метод.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item2">
          <source>The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000.</source>
          <target state="translated">В следующем примере создается объект 17 кортеж, содержащий данные для города из Детройт, Michigan, с 1860 по 2000.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item2">
          <source>The second component of the 17-tuple is the first year of the data series.</source>
          <target state="translated">Второй компонент кортежа 17 — на первый год ряда данных.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item2">
          <source>The example assigns the value of the <ph id="ph1">&lt;xref:System.Tuple%608.Item2%2A&gt;</ph> property to a variable, and then uses that variable to represent the year whose data is displayed.</source>
          <target state="translated">В примере присваивается значение <ph id="ph1">&lt;xref:System.Tuple%608.Item2%2A&gt;</ph> свойство переменной, а затем использует для представления года, данные которого отображается.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.Item3">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's third component.</source>
          <target state="translated">Получает значение третьего компонента текущего объекта <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item3">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's third component.</source>
          <target state="translated">Значение третьего компонента текущего объекта <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item3">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%608.Item3%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">Можно динамически определить тип <ph id="ph1">&lt;xref:System.Tuple%608.Item3%2A&gt;</ph> компонент одним из двух способов:</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item3">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%608.Item3%2A&gt;</ph> property.</source>
          <target state="translated">Путем вызова <ph id="ph1">`GetType`</ph> метода со значением, возвращается <ph id="ph2">&lt;xref:System.Tuple%608.Item3%2A&gt;</ph> свойство.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item3">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> object, and retrieving the third element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Путем получения <ph id="ph1">&lt;xref:System.Type&gt;</ph> , представляющий <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> объекта и извлечении третий элемент из массива, который возвращается его <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> метод.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item3">
          <source>The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000.</source>
          <target state="translated">В следующем примере создается объект 17 кортеж, содержащий данные для города из Детройт, Michigan, с 1860 по 2000.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item3">
          <source>The third component of the 17-tuple is the population in 1860.</source>
          <target state="translated">Третьего компонента кортежа 17 является население в 1860.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item3">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Tuple%608.Item3%2A&gt;</ph> property to display the population value and to calculate the annual rate of population change between 1860 and 1870.</source>
          <target state="translated">В этом примере <ph id="ph1">&lt;xref:System.Tuple%608.Item3%2A&gt;</ph> свойство для отображения численностью населения и для расчета годовой ставки изменение населения между 1860 и 1870.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.Item4">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's fourth component.</source>
          <target state="translated">Получает значение четвертого компонента текущего объекта <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item4">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's fourth component.</source>
          <target state="translated">Значение четвертого компонента текущего объекта <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item4">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%608.Item4%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">Можно динамически определить тип <ph id="ph1">&lt;xref:System.Tuple%608.Item4%2A&gt;</ph> компонент одним из двух способов:</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item4">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%608.Item4%2A&gt;</ph> property.</source>
          <target state="translated">Путем вызова <ph id="ph1">`GetType`</ph> метода со значением, возвращается <ph id="ph2">&lt;xref:System.Tuple%608.Item4%2A&gt;</ph> свойство.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item4">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> object, and retrieving the fourth element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Путем получения <ph id="ph1">&lt;xref:System.Type&gt;</ph> , представляющий <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> объекта и извлечении четвертый элемент из массива, который возвращается его <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> метод.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item4">
          <source>The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000.</source>
          <target state="translated">В следующем примере создается объект 17 кортеж, содержащий данные для города из Детройт, Michigan, с 1860 по 2000.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item4">
          <source>The fourth component of the 17-tuple is the population in 1870.</source>
          <target state="translated">Четвертого компонента кортежа 17 является население в 1870.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item4">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Tuple%608.Item4%2A&gt;</ph> property to display the population value and to calculate the annual rate of population change between 1870 and 1880.</source>
          <target state="translated">В этом примере <ph id="ph1">&lt;xref:System.Tuple%608.Item4%2A&gt;</ph> свойство для отображения численностью населения и для расчета годовой ставки изменение населения между 1870 и 1880.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.Item5">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's fifth component.</source>
          <target state="translated">Получает значение пятого компонента текущего объекта <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item5">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's fifth component.</source>
          <target state="translated">Значение пятого компонента текущего объекта <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item5">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%608.Item5%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">Можно динамически определить тип <ph id="ph1">&lt;xref:System.Tuple%608.Item5%2A&gt;</ph> компонент одним из двух способов:</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item5">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%608.Item5%2A&gt;</ph> property.</source>
          <target state="translated">Путем вызова <ph id="ph1">`GetType`</ph> метода со значением, возвращается <ph id="ph2">&lt;xref:System.Tuple%608.Item5%2A&gt;</ph> свойство.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item5">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> object, and retrieving the fifth element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Путем получения <ph id="ph1">&lt;xref:System.Type&gt;</ph> , представляющий <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> объекта и извлечении пятый элемент из массива, возвращаемого его <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> метод.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item5">
          <source>The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000.</source>
          <target state="translated">В следующем примере создается объект 17 кортеж, содержащий данные для города из Детройт, Michigan, с 1860 по 2000.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item5">
          <source>The fifth component of the 17-tuple is the population in 1880.</source>
          <target state="translated">Пятого компонента кортежа 17 является население в 1880.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item5">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Tuple%608.Item5%2A&gt;</ph> property to display the population value and to calculate the annual rate of population change between 1880 and 1890.</source>
          <target state="translated">В этом примере <ph id="ph1">&lt;xref:System.Tuple%608.Item5%2A&gt;</ph> свойство для отображения численностью населения и для расчета годовой ставки изменение населения между 1880 и 1890 г.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.Item6">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's sixth component.</source>
          <target state="translated">Получает значение шестого компонента текущего объекта <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item6">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's sixth component.</source>
          <target state="translated">Значение шестого компонента текущего объекта <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item6">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%608.Item6%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">Можно динамически определить тип <ph id="ph1">&lt;xref:System.Tuple%608.Item6%2A&gt;</ph> компонент одним из двух способов:</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item6">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%608.Item6%2A&gt;</ph> property.</source>
          <target state="translated">Путем вызова <ph id="ph1">`GetType`</ph> метода со значением, возвращается <ph id="ph2">&lt;xref:System.Tuple%608.Item6%2A&gt;</ph> свойство.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item6">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> object, and retrieving the sixth element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Путем получения <ph id="ph1">&lt;xref:System.Type&gt;</ph> , представляющий <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> объекта и извлечении шестой элемент из массива, который возвращается его <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> метод.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item6">
          <source>The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000.</source>
          <target state="translated">В следующем примере создается объект 17 кортеж, содержащий данные для города из Детройт, Michigan, с 1860 по 2000.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item6">
          <source>The sixth component of the 17-tuple is the population in 1890.</source>
          <target state="translated">Шестого компонента кортежа 17 является население в 1890 г.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item6">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Tuple%608.Item6%2A&gt;</ph> property to display the population value and to calculate the annual rate of population change between 1890 and 1900.</source>
          <target state="translated">В этом примере <ph id="ph1">&lt;xref:System.Tuple%608.Item6%2A&gt;</ph> свойство для отображения численностью населения и для расчета годовой ставки изменение населения между 1890 г и 1900.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.Item7">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's seventh component.</source>
          <target state="translated">Получает значение седьмого компонента текущего объекта <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item7">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's seventh component.</source>
          <target state="translated">Значение седьмого компонента текущего объекта <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item7">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%608.Item7%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">Можно динамически определить тип <ph id="ph1">&lt;xref:System.Tuple%608.Item7%2A&gt;</ph> компонент одним из двух способов:</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item7">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%608.Item7%2A&gt;</ph> property.</source>
          <target state="translated">Путем вызова <ph id="ph1">`GetType`</ph> метода со значением, возвращается <ph id="ph2">&lt;xref:System.Tuple%608.Item7%2A&gt;</ph> свойство.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item7">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> object, and retrieving the seventh element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Путем получения <ph id="ph1">&lt;xref:System.Type&gt;</ph> , представляющий <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> объекта и извлечении седьмой элемент из массива, который возвращается его <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> метод.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item7">
          <source>The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000.</source>
          <target state="translated">В следующем примере создается объект 17 кортеж, содержащий данные для города из Детройт, Michigan, с 1860 по 2000.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item7">
          <source>The seventh component of the 17-tuple is the population in 1900.</source>
          <target state="translated">Седьмого компонента кортежа 17 является население в 1900 г.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item7">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Tuple%608.Item7%2A&gt;</ph> property to display the population value and to calculate the annual rate of population change between 1900 and 1910.</source>
          <target state="translated">В этом примере <ph id="ph1">&lt;xref:System.Tuple%608.Item7%2A&gt;</ph> свойство для отображения значения заполнения и вычисления годовой скорость заполнения изменений от 1900 до 1910.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.Rest">
          <source>Gets the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's remaining components.</source>
          <target state="translated">Получает остальные компоненты текущего объекта <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Rest">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's remaining components.</source>
          <target state="translated">Значение остальных компонентов текущего объекта <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Rest">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> property returns a nested <ph id="ph2">`Tuple`</ph> object that allows access to the eighth though <bpt id="p1">*</bpt>n<ept id="p1">*</ept>th components of the tuple.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> Свойство возвращает вложенную <ph id="ph2">`Tuple`</ph> объект, обеспечивающий доступ к восьмой хотя <bpt id="p1">*</bpt>n<ept id="p1">*</ept>th компонента кортежа.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Rest">
          <source>Depending on the total number of components in the tuple, the values of the eighth through fourteenth components can be retrieved from the nested <ph id="ph1">`Tuple`</ph> object's <ph id="ph2">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph> through <ph id="ph3">&lt;xref:System.Tuple%608.Item7%2A&gt;</ph> properties.</source>
          <target state="translated">В зависимости от того, общее число компонентов в кортеже, значения восьмого из четырнадцати компонентов можно извлечь из вложенного <ph id="ph1">`Tuple`</ph> объекта <ph id="ph2">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph> через <ph id="ph3">&lt;xref:System.Tuple%608.Item7%2A&gt;</ph> свойства.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Rest">
          <source>You can then use the <ph id="ph1">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> property of a nested <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> object to retrieve the <ph id="ph3">`Tuple`</ph> object at the next level of nesting.</source>
          <target state="translated">Затем можно использовать <ph id="ph1">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> вложенное свойство <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> извлекаемого объекта <ph id="ph3">`Tuple`</ph> объекта на следующем уровне вложенности.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Rest">
          <source>You can dynamically determine the number of components in a nested <ph id="ph1">`Tuple`</ph> object that is returned by the <ph id="ph2">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> property by extracting the digit from its type name.</source>
          <target state="translated">Можно динамически определить количество компонентов во вложенном <ph id="ph1">`Tuple`</ph> объект, возвращаемый <ph id="ph2">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> свойство путем извлечения числа из имени его типа.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Rest">
          <source>The following example provides an illustration.</source>
          <target state="translated">Ниже приведен пример.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Rest">
          <source>The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000.</source>
          <target state="translated">В следующем примере создается объект 17 кортеж, содержащий данные для города из Детройт, Michigan, с 1860 по 2000.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Rest">
          <source>The seventh component of the 17-tuple is the population in 1900.</source>
          <target state="translated">Седьмого компонента кортежа 17 является население в 1900 г.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Rest">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> property to retrieve the values of the eighth through fourteenth components, and it uses the <ph id="ph2">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> property of the nested <ph id="ph3">&lt;xref:System.Tuple%608&gt;</ph> object to retrieve the values of the remaining components.</source>
          <target state="translated">В этом примере <ph id="ph1">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> свойство для извлечения значений восьмого из четырнадцати компонентов, который использует <ph id="ph2">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> свойство вложенного <ph id="ph3">&lt;xref:System.Tuple%608&gt;</ph> объекта для извлечения значений остальных компонентов.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>An object to compare with the current instance.</source>
          <target state="translated">Объект для сравнения с текущим экземпляром.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>An object that provides custom rules for comparison.</source>
          <target state="translated">Объект, предоставляющий настраиваемые правила для сравнения.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>Compares the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object to a specified object by using a specified comparer and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</source>
          <target state="translated">Сравнивает текущий объект <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> с указанным объектом, используя заданный компаратор, и возвращает целое число, которое показывает положение текущего объекта относительно указанного объекта в порядке сортировки: перед объектом, после него или в той же позиции.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>A signed integer that indicates the relative position of this instance and <ph id="ph1">&lt;paramref name="other" /&gt;</ph> in the sort order, as shown in the following table.</source>
          <target state="translated">Целое число со знаком, определяющее относительное положение экземпляра и параметра <ph id="ph1">&lt;paramref name="other" /&gt;</ph> в порядке сортировки, как показано в следующей таблице.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Value</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Значение</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Description</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Описание</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> A negative integer</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Отрицательное целое число</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance precedes <ph id="ph3">&lt;paramref name="other" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Данный экземпляр предшествует параметру <ph id="ph3">&lt;paramref name="other" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Нуль</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance and <ph id="ph3">&lt;paramref name="other" /&gt;</ph> have the same position in the sort order.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Данный экземпляр имеет ту же позицию в порядке сортировки, что и <ph id="ph3">&lt;paramref name="other" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> A positive integer</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Положительное целое число</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance follows <ph id="ph3">&lt;paramref name="other" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Данный экземпляр следует за параметром <ph id="ph3">&lt;paramref name="other" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>This member is an explicit interface implementation.</source>
          <target state="translated">Данный член является явной реализацией интерфейса.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Collections.IStructuralComparable&gt;</ph> interface.</source>
          <target state="translated">Он может использоваться, только если экземпляр <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> приведен к типу интерфейса <ph id="ph2">&lt;xref:System.Collections.IStructuralComparable&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>This method lets you define customized comparisons of <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> objects.</source>
          <target state="translated">Этот метод позволяет определять пользовательские процедуры сравнения для <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> объектов.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>For example, you can use this method to order <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> objects based on the value of a specific component.</source>
          <target state="translated">Например, можно использовать этот метод, чтобы порядок <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> объекты на основе значения отдельного компонента.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>Although this method can be called directly, it is most commonly called by collection-sorting methods that include <ph id="ph1">&lt;xref:System.Collections.IComparer&gt;</ph> parameters to order the members of a collection.</source>
          <target state="translated">Хотя этот метод можно вызывать непосредственно, чаще всего он вызывается элементом сортировка коллекции методы, которые включают <ph id="ph1">&lt;xref:System.Collections.IComparer&gt;</ph> параметры для сортировки элементов в коллекции.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>For example, it is called by the <ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph2">&lt;xref:System.Collections.SortedList.Add%2A&gt;</ph> method of a <ph id="ph3">&lt;xref:System.Collections.SortedList&gt;</ph> object that is instantiated by using the <ph id="ph4">&lt;xref:System.Collections.SortedList.%23ctor%28System.Collections.IComparer%29?displayProperty=nameWithType&gt;</ph> constructor.</source>
          <target state="translated">Например, она вызвана <ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29?displayProperty=nameWithType&gt;</ph> метод и <ph id="ph2">&lt;xref:System.Collections.SortedList.Add%2A&gt;</ph> метод <ph id="ph3">&lt;xref:System.Collections.SortedList&gt;</ph> объекта, экземпляр которого создается с помощью <ph id="ph4">&lt;xref:System.Collections.SortedList.%23ctor%28System.Collections.IComparer%29?displayProperty=nameWithType&gt;</ph> конструктор.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%608.System%23Collections%23IStructuralComparable%23CompareTo%2A&gt;</ph> method is intended for use in sorting operations.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple%608.System%23Collections%23IStructuralComparable%23CompareTo%2A&gt;</ph> Метод предназначен для использования в операции сортировки.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>It should not be used when the primary purpose of a comparison is to determine whether two objects are equal.</source>
          <target state="translated">Он не должен использоваться, при основной целью сравнения для определения равенства двух объектов.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>To determine whether two objects are equal, call the <ph id="ph1">&lt;xref:System.Tuple%608.System%23Collections%23IStructuralEquatable%23Equals%2A&gt;</ph> method.</source>
          <target state="translated">Чтобы определить, равны ли два объекта, вызовите <ph id="ph1">&lt;xref:System.Tuple%608.System%23Collections%23IStructuralEquatable%23Equals%2A&gt;</ph> метод.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>The following example creates an array of <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> objects that contains population data for four U.S. cities from 1940 to 2000.</source>
          <target state="translated">В следующем примере создается массив <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> объектов, содержащий данные четыре города США из 1940 до 2000.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>The octuple's first component is the city name.</source>
          <target state="translated">Первый компонент octuple — название города.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>The remaining six components represent the population at 10-year intervals from 1940 to 2000.</source>
          <target state="translated">Оставшиеся шесть компонентов представляют заполнение интервалом 10 лет с 1940 по 2000.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>The <ph id="ph1">`PopulationComparer`</ph> class provides an <ph id="ph2">&lt;xref:System.Collections.IComparer&gt;</ph> implementation that allows the array of octuples to be sorted by any one of its components.</source>
          <target state="translated"><ph id="ph1">`PopulationComparer`</ph> Класс предоставляет <ph id="ph2">&lt;xref:System.Collections.IComparer&gt;</ph> реализацию, которая позволяет массив кортежей следует отсортировать с любого из его компонентов.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>Two values are provided to the <ph id="ph1">`PopulationComparer`</ph> class in its constructor: The position of the component that defines the sort order, and a <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the tuple objects should be sorted in ascending or descending order.</source>
          <target state="translated">Предоставляет два значения для <ph id="ph1">`PopulationComparer`</ph> конструктору класса: позиция компонента, определяющего порядок сортировки и <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> значение, которое указывает, сортируются ли объектов кортежей в возрастающем или убывающем порядке.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>The example then displays the elements in the array in unsorted order, sorts them by the third component (the population in 1950) and displays them, and then sorts them by the eighth component (the population in 2000) and displays them.</source>
          <target state="translated">Затем элементы отображаются в массиве без сортировки, сортирует их по третьего компонента (заполнение 1950) и отображает их и затем они сортируются по восьмого компонента (заполнение 2000) и отображает их.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;paramref name="other" /&gt;</ph> is not a <ph id="ph2">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="other" /&gt;</ph> не является объектом <ph id="ph2">&lt;see cref="T:System.Tuple`8" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>The object to compare with this instance.</source>
          <target state="translated">Объект, сравниваемый с данным экземпляром.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>An object that defines the method to use to evaluate whether the two objects are equal.</source>
          <target state="translated">Объект, который определяет метод, используемый для вычисления равенства двух объектов.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>Returns a value that indicates whether the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object is equal to a specified object based on a specified comparison method.</source>
          <target state="translated">Возвращает значение, показывающее, равен ли текущий атрибут <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> указанному объекту при использовании заданного метода сравнения.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current instance is equal to the specified object; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Значение <ph id="ph1">&lt;see langword="true" /&gt;</ph>, если текущий экземпляр равен указанному объекту; в противном случае — <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">Этот член представляет собой явную реализацию члена интерфейса.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Collections.IStructuralEquatable&gt;</ph> interface.</source>
          <target state="translated">Он может использоваться, только если экземпляр <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> приведен к типу интерфейса <ph id="ph2">&lt;xref:System.Collections.IStructuralEquatable&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType&gt;</ph> implementation is called only if <ph id="ph2">`other`</ph> is not <ph id="ph3">`null`</ph>, and if it can be successfully cast (in C#) or converted (in Visual Basic) to a <ph id="ph4">&lt;xref:System.Tuple%608&gt;</ph> object that has the same total number of components (including those in nested <ph id="ph5">`Tuple`</ph> objects) of the same types as the current instance.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType&gt;</ph> Реализация вызывается только в том случае, если <ph id="ph2">`other`</ph> не <ph id="ph3">`null`</ph>, и если его можно успешно приведите (в C#) или преобразован (в Visual Basic) <ph id="ph4">&lt;xref:System.Tuple%608&gt;</ph> объект, который имеет то же общее число компонентов (включая вложенные <ph id="ph5">`Tuple`</ph> объекты) совпадает с типом текущего экземпляра.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%608.System%23Collections%23IStructuralEquatable%23Equals%28System.Object%2CSystem.Collections.IEqualityComparer%29&gt;</ph> method first passes the <ph id="ph2">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph> values of the <ph id="ph3">&lt;xref:System.Tuple%608&gt;</ph> objects to be compared to the <ph id="ph4">&lt;xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType&gt;</ph> implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple%608.System%23Collections%23IStructuralEquatable%23Equals%28System.Object%2CSystem.Collections.IEqualityComparer%29&gt;</ph> Передает первый метод <ph id="ph2">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph> значения <ph id="ph3">&lt;xref:System.Tuple%608&gt;</ph> объектов для сравнения с <ph id="ph4">&lt;xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType&gt;</ph> реализации.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>If this method call returns <ph id="ph1">`true`</ph>, the method is called again and passed the <ph id="ph2">&lt;xref:System.Tuple%608.Item2%2A&gt;</ph> values of the two <ph id="ph3">&lt;xref:System.Tuple%608&gt;</ph> objects.</source>
          <target state="translated">Если вызов этого метода возвращает <ph id="ph1">`true`</ph>, повторный вызов метода и передается <ph id="ph2">&lt;xref:System.Tuple%608.Item2%2A&gt;</ph> значения двух <ph id="ph3">&lt;xref:System.Tuple%608&gt;</ph> объектов.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>This continues until the method call returns <ph id="ph1">`false`</ph> when it compares a specific pair of values, or the two <ph id="ph2">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> values are passed to the method.</source>
          <target state="translated">Это продолжается до вызова метода <ph id="ph1">`false`</ph> при сравнении определенной пары значений или два <ph id="ph2">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> значения передаются в метод.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>An object whose <ph id="ph1">&lt;see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /&gt;</ph> method calculates the hash code of the current <ph id="ph2">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object.</source>
          <target state="translated">Объект, метод <ph id="ph1">&lt;see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /&gt;</ph> которого вычисляет хэш-код текущего объекта <ph id="ph2">&lt;see cref="T:System.Tuple`8" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>Calculates the hash code for the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object by using a specified computation method.</source>
          <target state="translated">Вычисляет хэш-код для текущего объекта <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph>, используя заданный метод вычисления.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>A 32-bit signed integer hash code.</source>
          <target state="translated">Хэш-код в виде 32-разрядного целого числа со знаком.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">Этот член представляет собой явную реализацию члена интерфейса.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Collections.IStructuralEquatable&gt;</ph> interface.</source>
          <target state="translated">Он может использоваться, только если экземпляр <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> приведен к типу интерфейса <ph id="ph2">&lt;xref:System.Collections.IStructuralEquatable&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>The method simply wraps a call to the <ph id="ph1">`comparer`</ph> object's <ph id="ph2">&lt;xref:System.Collections.IEqualityComparer.GetHashCode%2A?displayProperty=nameWithType&gt;</ph> implementation.</source>
          <target state="translated">Этот метод просто создает оболочку вызова <ph id="ph1">`comparer`</ph> объекта <ph id="ph2">&lt;xref:System.Collections.IEqualityComparer.GetHashCode%2A?displayProperty=nameWithType&gt;</ph> реализации.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>The algorithm used to compute the hash code should return the same hash code for two <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> objects that are considered to be equal.</source>
          <target state="translated">Алгоритм, используемый для вычисления хэш-код должен возвращать тот же хэш-код для двух <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> объекты, которые считаются равными.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>An object to compare with the current instance.</source>
          <target state="translated">Объект для сравнения с текущим экземпляром.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>Compares the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object to a specified object and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</source>
          <target state="translated">Сравнивает текущий объект <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> с заданным объектом и возвращает целое число, указывающее, находится ли текущий объект в той же позиции, что и указанный объект, после него или перед ним в порядке сортировки.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>A signed integer that indicates the relative position of this instance and <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> in the sort order, as shown in the following table.</source>
          <target state="translated">Целое число со знаком, определяющее относительное положение экземпляра и параметра <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> в порядке сортировки, как показано в следующей таблице.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Value</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Значение</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Description</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Описание</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> A negative integer</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Отрицательное целое число</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance precedes <ph id="ph3">&lt;paramref name="obj" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Данный экземпляр предшествует параметру <ph id="ph3">&lt;paramref name="obj" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Нуль</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance and <ph id="ph3">&lt;paramref name="obj" /&gt;</ph> have the same position in the sort order.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Данный экземпляр имеет ту же позицию в порядке сортировки, что и <ph id="ph3">&lt;paramref name="obj" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> A positive integer</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Положительное целое число</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance follows <ph id="ph3">&lt;paramref name="obj" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Данный экземпляр следует за параметром <ph id="ph3">&lt;paramref name="obj" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">Этот член представляет собой явную реализацию члена интерфейса.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.IComparable&gt;</ph> interface.</source>
          <target state="translated">Он может использоваться, только если экземпляр <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> приведен к типу интерфейса <ph id="ph2">&lt;xref:System.IComparable&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>This method provides the <ph id="ph1">&lt;xref:System.IComparable.CompareTo%2A?displayProperty=nameWithType&gt;</ph> implementation for the <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> class.</source>
          <target state="translated">Этот метод обеспечивает <ph id="ph1">&lt;xref:System.IComparable.CompareTo%2A?displayProperty=nameWithType&gt;</ph> реализацию <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> класса.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>Although the method can be called directly, it is most commonly called by the default overloads of collection-sorting methods, such as <ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.SortedList.Add%2A?displayProperty=nameWithType&gt;</ph>, to order the members of a collection.</source>
          <target state="translated">Несмотря на то, что метод может вызываться напрямую, он наиболее часто вызывается перегрузок по умолчанию для сортировки коллекции методов, таких как <ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType&gt;</ph> и <ph id="ph2">&lt;xref:System.Collections.SortedList.Add%2A?displayProperty=nameWithType&gt;</ph>, для сортировки элементов в коллекции.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%608.System%23IComparable%23CompareTo%2A&gt;</ph> method is intended for use in sorting operations.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple%608.System%23IComparable%23CompareTo%2A&gt;</ph> Метод предназначен для использования в операции сортировки.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>It should not be used when the primary purpose of a comparison is to determine whether two objects are equal.</source>
          <target state="translated">Он не должен использоваться, при основной целью сравнения для определения равенства двух объектов.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>To determine whether two objects are equal, call the <ph id="ph1">&lt;xref:System.Tuple%608.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Чтобы определить, равны ли два объекта, вызовите <ph id="ph1">&lt;xref:System.Tuple%608.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph> метод.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>This method uses the default object comparer to compare each component.</source>
          <target state="translated">Этот метод использует функцию сравнения по умолчанию объект для сравнения каждого компонента.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>The following example creates an array of octuples whose components are integers that contain a range of prime numbers.</source>
          <target state="translated">В следующем примере создается массив кортежей, компоненты которого являются целыми числами, которые содержат ряд простых чисел.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>The example displays the elements of the array in unsorted order, sorts the array, and then displays the array in sorted order.</source>
          <target state="translated">Пример отображает элементы массива без сортировки, массив сортируется и затем отображает массива в порядке сортировки.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>The output shows that the array has been sorted by <ph id="ph1">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph>, or the tuple's first component.</source>
          <target state="translated">Выходные данные показывают, что массив был отсортирован по <ph id="ph1">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph>, или первого компонента кортежа.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>Note that the example does not directly call the <ph id="ph1">&lt;xref:System.Tuple%608.System%23IComparable%23CompareTo%28System.Object%29&gt;</ph> method.</source>
          <target state="translated">Обратите внимание, что пример не вызывает непосредственно <ph id="ph1">&lt;xref:System.Tuple%608.System%23IComparable%23CompareTo%28System.Object%29&gt;</ph> метод.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>This method is called implicitly by the <ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%29&gt;</ph> method for each element in the array.</source>
          <target state="translated">Этот метод неявно вызывается <ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%29&gt;</ph> метод для каждого элемента в массиве.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;paramref name="obj" /&gt;</ph> is not a <ph id="ph2">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="obj" /&gt;</ph> не является объектом <ph id="ph2">&lt;see cref="T:System.Tuple`8" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source>The index of the specified <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> element.</source>
          <target state="translated">Индекс указанного элемента <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source><bpt id="p1">&lt;c&gt;</bpt>index<ept id="p1">&lt;/c&gt;</ept> can range from 0 for <ph id="ph1">&lt;see langword="Item1" /&gt;</ph> to one less than the number of elements in the <ph id="ph2">&lt;see langword="Tuple" /&gt;</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>index<ept id="p1">&lt;/c&gt;</ept> может иметь значения в диапазоне от 0 для <ph id="ph1">&lt;see langword="Item1" /&gt;</ph> до значения на единицу меньше, чем число элементов в <ph id="ph2">&lt;see langword="Tuple" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source>Gets the value of the specified <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> element.</source>
          <target state="translated">Получает значение указанного элемента <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source>The value of the <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> element at the specified position.</source>
          <target state="translated">Значение элемента <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> в заданной позиции.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%608.System%23Runtime%23CompilerServices%23ITuple%23Item%2A?displayProperty=nameWithType&gt;</ph> property is an explicit interface implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple%608.System%23Runtime%23CompilerServices%23ITuple%23Item%2A?displayProperty=nameWithType&gt;</ph> Свойство является явной реализацией интерфейса.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source>To call it, you must cast or convert the <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> object to an <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.ITuple&gt;</ph> interface object.</source>
          <target state="translated">Будет вызывать его, необходимо привести или преобразовать <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> объект <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.ITuple&gt;</ph> объект интерфейса.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than 0.</source>
          <target state="translated">Значение параметра <ph id="ph1">&lt;paramref name="index" /&gt;</ph> меньше 0.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source>-or-</source>
          <target state="translated">- или -</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is greater than or equal to <ph id="ph2">&lt;see cref="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Length" /&gt;</ph>.</source>
          <target state="translated">Значение <ph id="ph1">&lt;paramref name="index" /&gt;</ph> больше или равно <ph id="ph2">&lt;see cref="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Length" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Length">
          <source>Gets the number of elements in the <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph>.</source>
          <target state="translated">Возвращает количество элементов в <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Length">
          <source>The number of elements in the <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph>.</source>
          <target state="translated">Число элементов в массиве <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Length">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%608.System%23Runtime%23CompilerServices%23ITuple%23Length%2A&gt;</ph> property is an explicit interface implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple%608.System%23Runtime%23CompilerServices%23ITuple%23Length%2A&gt;</ph> Свойство является явной реализацией интерфейса.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Length">
          <source>To call it, you must cast or convert the <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> type to an <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.ITuple&gt;</ph> interface object.</source>
          <target state="translated">Будет вызывать его, необходимо привести или преобразовать <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> тип <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.ITuple&gt;</ph> объект интерфейса.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.ToString">
          <source>Returns a string that represents the value of this <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> instance.</source>
          <target state="translated">Возвращает строковое представление значения этого экземпляра <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.ToString">
          <source>The string representation of this <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object.</source>
          <target state="translated">Строковое представление конкретного объекта <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.ToString">
          <source>The string returned by this method takes the form (<bpt id="p1">*</bpt>Item1<ept id="p1">*</ept>, <bpt id="p2">*</bpt>Item2<ept id="p2">*</ept>, <bpt id="p3">*</bpt>Item3<ept id="p3">*</ept>, <bpt id="p4">*</bpt>Item4<ept id="p4">*</ept>, <ph id="ph1">`Item5, Item6, Item7`</ph>, <bpt id="p5">*</bpt>Item8<ept id="p5">*</ept>…), where <bpt id="p6">*</bpt>Item1<ept id="p6">*</ept>, <bpt id="p7">*</bpt>Item2<ept id="p7">*</ept>, <bpt id="p8">*</bpt>Item3<ept id="p8">*</ept>, <bpt id="p9">*</bpt>Item4<ept id="p9">*</ept>, <bpt id="p10">*</bpt>Item5<ept id="p10">*</ept>, <bpt id="p11">*</bpt>Item6<ept id="p11">*</ept>, and <bpt id="p12">*</bpt>Item7<ept id="p12">*</ept> represent the values of the <ph id="ph2">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Tuple%608.Item2%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Tuple%608.Item3%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Tuple%608.Item4%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Tuple%608.Item5%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Tuple%608.Item6%2A&gt;</ph>, and <ph id="ph8">&lt;xref:System.Tuple%608.Item7%2A&gt;</ph> properties.</source>
          <target state="translated">Строка, возвращаемый этим методом принимает форму (<bpt id="p1">*</bpt>Item1<ept id="p1">*</ept>, <bpt id="p2">*</bpt>Item2<ept id="p2">*</ept>, <bpt id="p3">*</bpt>Item3<ept id="p3">*</ept>, <bpt id="p4">*</bpt>Item4<ept id="p4">*</ept>, <ph id="ph1">`Item5, Item6, Item7`</ph>, <bpt id="p5">*</bpt> Item8<ept id="p5">*</ept>...), где <bpt id="p6">*</bpt>Item1<ept id="p6">*</ept>, <bpt id="p7">*</bpt>Item2<ept id="p7">*</ept>, <bpt id="p8">*</bpt>Item3<ept id="p8">*</ept>, <bpt id="p9">*</bpt>Item4<ept id="p9">*</ept>, <bpt id="p10">*</bpt>Item5<ept id="p10">*</ept>, <bpt id="p11">*</bpt>Item6<ept id="p11">*</ept>, и <bpt id="p12">*</bpt>Item7<ept id="p12">*</ept> представляют значения <ph id="ph2">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Tuple%608.Item2%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Tuple%608.Item3%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Tuple%608.Item4%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Tuple%608.Item5%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Tuple%608.Item6%2A&gt;</ph>, и <ph id="ph8">&lt;xref:System.Tuple%608.Item7%2A&gt;</ph> свойства.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.ToString">
          <source><bpt id="p1">*</bpt>Item8<ept id="p1">*</ept> represents the value of the <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> object's <ph id="ph2">`Next.Item1`</ph> property.</source>
          <target state="translated"><bpt id="p1">*</bpt>Item8<ept id="p1">*</ept> представляет значение <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> объекта <ph id="ph2">`Next.Item1`</ph> свойство.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.ToString">
          <source>The value of any additional nested components follow <bpt id="p1">*</bpt>Item8<ept id="p1">*</ept>.</source>
          <target state="translated">Значения всех дополнительных вложенных компонентов выполните <bpt id="p1">*</bpt>Item8<ept id="p1">*</ept>.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.ToString">
          <source>If any of the property values is <ph id="ph1">`null`</ph>, it is represented as <ph id="ph2">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Если какие-либо значения свойств <ph id="ph1">`null`</ph>, оно представляется как <ph id="ph2">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.ToString">
          <source>The following example creates a 17-tuple that contains population data for the city of Detroit, Michigan, from 1860 to 1900.</source>
          <target state="translated">В следующем примере создается 17-кортеж, содержащий данные для города из Детройт, Michigan, с 1860 по 1900.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.ToString">
          <source>It then uses the <ph id="ph1">&lt;xref:System.Tuple%608.ToString%2A&gt;</ph> method to display the tuple's data.</source>
          <target state="translated">Затем он использует <ph id="ph1">&lt;xref:System.Tuple%608.ToString%2A&gt;</ph> для отображения данных кортежа.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>