<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="UnhandledExceptionEventArgs.xml" source-language="en-US" target-language="ru-RU">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac52bc5b27ab8c70f87bc485bcd049f405e98420956.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2bc5b27ab8c70f87bc485bcd049f405e98420956</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.UnhandledExceptionEventArgs">
          <source>Provides data for the event that is raised when there is an exception that is not handled in any application domain.</source>
          <target state="translated">Предоставляет данные для события, которое генерируется при возникновении исключения, не обработанного ни одним доменом приложения.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.UnhandledExceptionEventArgs">
          <source><ph id="ph1">&lt;xref:System.UnhandledExceptionEventArgs&gt;</ph> provides access to the exception object and a flag indicating whether the common language runtime is terminating.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.UnhandledExceptionEventArgs&gt;</ph> предоставляет доступ к объекту исключения и флаг, указывающий, завершает ли работу среда.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.UnhandledExceptionEventArgs">
          <source>The <ph id="ph1">&lt;xref:System.UnhandledExceptionEventArgs&gt;</ph> is one of the parameters passed into <ph id="ph2">&lt;xref:System.UnhandledExceptionEventHandler&gt;</ph> for the <ph id="ph3">&lt;xref:System.AppDomain.UnhandledException?displayProperty=nameWithType&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.UnhandledExceptionEventArgs&gt;</ph> Является одним из параметров, передаваемых в <ph id="ph2">&lt;xref:System.UnhandledExceptionEventHandler&gt;</ph> для <ph id="ph3">&lt;xref:System.AppDomain.UnhandledException?displayProperty=nameWithType&gt;</ph> события.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.UnhandledExceptionEventArgs">
          <source>For more information about event handler delegates, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">Дополнительные сведения о делегатах обработчиков событий см. в разделе <bpt id="p1">[</bpt>обработка и вызов событий<ept id="p1">](~/docs/standard/events/index.md)</ept>.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="M:System.UnhandledExceptionEventArgs.#ctor(System.Object,System.Boolean)">
          <source>The exception that is not handled.</source>
          <target state="translated">Необработанное исключение.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.UnhandledExceptionEventArgs.#ctor(System.Object,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the runtime is terminating; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, если среда CLR завершает работу; в противном случае — <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.UnhandledExceptionEventArgs.#ctor(System.Object,System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.UnhandledExceptionEventArgs" /&gt;</ph> class with the exception object and a common language runtime termination flag.</source>
          <target state="translated">Инициализирует новый экземпляр класса <ph id="ph1">&lt;see cref="T:System.UnhandledExceptionEventArgs" /&gt;</ph> объектом исключения и флагом, указывающим на завершение работы среды CLR.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="P:System.UnhandledExceptionEventArgs.ExceptionObject">
          <source>Gets the unhandled exception object.</source>
          <target state="translated">Возвращает необработанный объект исключения.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.ExceptionObject">
          <source>The unhandled exception object.</source>
          <target state="translated">Необработанный объект исключения.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.ExceptionObject">
          <source>This property returns an object of type <ph id="ph1">&lt;xref:System.Object&gt;</ph> rather than one derived from <ph id="ph2">&lt;xref:System.Exception&gt;</ph>.</source>
          <target state="translated">Это свойство возвращает объект типа <ph id="ph1">&lt;xref:System.Object&gt;</ph> вместо один производный от <ph id="ph2">&lt;xref:System.Exception&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.ExceptionObject">
          <source>Although the Common Language Specification requires that all exception types derive from <ph id="ph1">&lt;xref:System.Exception&gt;</ph>, it is possible for methods to throw exceptions with objects not derived from <ph id="ph2">&lt;xref:System.Exception&gt;</ph>.</source>
          <target state="translated">Несмотря на то, что в спецификации CLS требует, что все типы исключений производными <ph id="ph1">&lt;xref:System.Exception&gt;</ph>, возможно, для методов, которые могут вызывать исключения с объектами, не является производным от <ph id="ph2">&lt;xref:System.Exception&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.ExceptionObject">
          <source>You can do the following to work with this exception:</source>
          <target state="translated">Можно выполнять следующие для работы с одним исключением:</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.ExceptionObject">
          <source>Apply the  <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute&gt;</ph> attribute with a <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.WrapNonExceptionThrows%2A?displayProperty=nameWithType&gt;</ph> value of <ph id="ph3">`true`</ph> to the assembly that contains the event handler.</source>
          <target state="translated">Применить <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute&gt;</ph> атрибутом <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.WrapNonExceptionThrows%2A?displayProperty=nameWithType&gt;</ph> значение <ph id="ph3">`true`</ph> на сборку, содержащую обработчик событий.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.ExceptionObject">
          <source>This wraps all exceptions not derived from the <ph id="ph1">&lt;xref:System.Exception&gt;</ph> class in a <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.RuntimeWrappedException&gt;</ph> object.</source>
          <target state="translated">Это перенесет все исключения, не является производным от <ph id="ph1">&lt;xref:System.Exception&gt;</ph> в класс <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.RuntimeWrappedException&gt;</ph> объекта.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.ExceptionObject">
          <source>You can then safely cast (in C#) or convert (in Visual Basic) the object returned by this property to an <ph id="ph1">&lt;xref:System.Exception&gt;</ph> object, and retrieve the original exception object from the <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">Можно безопасно привести (в C#) или преобразуйте (в Visual Basic) объект, возвращаемый этим свойством для <ph id="ph1">&lt;xref:System.Exception&gt;</ph> объекта, а также получить исходный объект исключения из <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException%2A?displayProperty=nameWithType&gt;</ph> свойство.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.ExceptionObject">
          <source>Note that some compilers, such as the C# and Visual Basic compilers, automatically apply this attribute.</source>
          <target state="translated">Обратите внимание, что некоторые компиляторы, таких как компиляторы C# и Visual Basic автоматически применять этот атрибут.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.ExceptionObject">
          <source>Cast the object returned by this property to an <ph id="ph1">&lt;xref:System.Exception&gt;</ph> object.</source>
          <target state="translated">Объект, возвращаемый этим свойством, для приведения <ph id="ph1">&lt;xref:System.Exception&gt;</ph> объекта.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.ExceptionObject">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.AppDomain.UnhandledException&gt;</ph> event.</source>
          <target state="translated">В следующем примере демонстрируется <ph id="ph1">&lt;xref:System.AppDomain.UnhandledException&gt;</ph> событий.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.ExceptionObject">
          <source>It defines an event handler, <ph id="ph1">`MyHandler`</ph>, that is invoked whenever an unhandled exception is thrown in the default application domain.</source>
          <target state="translated">Он определяет обработчик событий <ph id="ph1">`MyHandler`</ph>, который вызывается, когда необработанное исключение в домене приложения по умолчанию.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.ExceptionObject">
          <source>It then throws two exceptions.</source>
          <target state="translated">Затем он создает два исключения.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.ExceptionObject">
          <source>The first is handled by a <bpt id="p1">**</bpt>try/catch<ept id="p1">**</ept> block.</source>
          <target state="translated">Первым обрабатывается <bpt id="p1">**</bpt>try/catch<ept id="p1">**</ept> блока.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.ExceptionObject">
          <source>The second is unhandled and invokes the <ph id="ph1">`MyHandle`</ph> routine before the application terminates.</source>
          <target state="translated">Второй не обрабатывается и вызывает <ph id="ph1">`MyHandle`</ph> подпрограммы перед завершением работы приложения.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="P:System.UnhandledExceptionEventArgs.IsTerminating">
          <source>Indicates whether the common language runtime is terminating.</source>
          <target state="translated">Указывает, завершает ли работу среда CLR.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.IsTerminating">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the runtime is terminating; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, если среда CLR завершает работу; в противном случае — <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.IsTerminating">
          <source>Beginning with the .NET Framework version 2.0, this property returns <ph id="ph1">`true`</ph> for most unhandled exceptions, unless an application compatibility flag is used to revert to the behavior of versions 1.0 and 1.1.</source>
          <target state="translated">Начиная с .NET Framework версии 2.0, это свойство возвращает <ph id="ph1">`true`</ph> для большинства необработанных исключений, в том случае, если не используется флаг совместимости приложения, чтобы вернуться к поведению версий 1.0 и 1.1.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.IsTerminating">
          <source>The reason is that most unhandled exceptions in threads, including thread pool threads, are allowed to proceed naturally, which normally results in termination of the application.</source>
          <target state="translated">Причина заключается в том, что наиболее необработанные исключения в потоках, включая потоки из пула потоков, могут продолжать естественным образом, что обычно приводит к завершению работы приложения.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.IsTerminating">
          <source>For more information, including a list of cases in which the runtime does not terminate, see <bpt id="p1">[</bpt>Exceptions in Managed Threads<ept id="p1">](~/docs/standard/threading/exceptions-in-managed-threads.md)</ept>.</source>
          <target state="translated">Дополнительные сведения, включая список случаев, в которых среда выполнения не будет завершен, в разделе <bpt id="p1">[</bpt>исключения в управляемых потоках<ept id="p1">](~/docs/standard/threading/exceptions-in-managed-threads.md)</ept>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.IsTerminating">
          <source>Version Information</source>
          <target state="translated">Сведения о версии</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.IsTerminating">
          <source>The following applies to the .NET Framework versions 1.0 and 1.1: This property returns <ph id="ph1">`true`</ph> when an exception is received in, but not handled by, an application's main thread.</source>
          <target state="translated">Приведенные ниже сведения относятся к версиям .NET Framework 1.0 и 1.1: это свойство возвращает <ph id="ph1">`true`</ph> при получении исключения, но не обрабатываются, основного потока приложения.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.IsTerminating">
          <source>This property also returns <ph id="ph1">`true`</ph> if an unmanaged thread is executing managed code and receives an unhandled exception.</source>
          <target state="translated">Это свойство также возвращает <ph id="ph1">`true`</ph> , если неуправляемый поток, выполняющий управляемый код и получает необработанное исключение.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.IsTerminating">
          <source>Finally, this property returns <ph id="ph1">`false`</ph> for thread pool threads and managed threads created by an application, because versions 1.0 and 1.1 catch unhandled exceptions in such threads and ignore them.</source>
          <target state="translated">Наконец, это свойство возвращает <ph id="ph1">`false`</ph> для пула потоков и управляемых потоков, созданных приложением, поскольку версии 1.0 и 1.1 перехватывают необработанные исключения в таких потоков и их игнорировать.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>