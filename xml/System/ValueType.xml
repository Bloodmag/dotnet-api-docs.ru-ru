<Type Name="ValueType" FullName="System.ValueType">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="33378379d2e91ec17aa2980f5a53aa8e59d1b2bd" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36427339" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ValueType" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit ValueType extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ValueType" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ValueType" />
  <TypeSignature Language="C++ CLI" Value="public ref class ValueType abstract" />
  <TypeSignature Language="F#" Value="type ValueType = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Предоставляет базовый класс для типов значений.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ValueType> переопределяет виртуальный метод класса <xref:System.Object> с более удобной реализацией для типов значений. См. также <xref:System.Enum>, который наследует от <xref:System.ValueType>.  
  
 Типы данных делятся на типы значений и ссылочные типы. Типы значений являются либо выделенному стеком либо встроены в структуре. Ссылочные типы размещаются в куче. Типы значений и ссылок являются производными от исходным базовым классом <xref:System.Object>. В случаях, где это необходимо для типа значения вел себя как объект упаковщик, преобразующий тип значения, которые выглядят объект ссылки, размещенных в куче, и в него копируется значение типа. Оболочки помечается, чтобы система знала, что он содержит тип значения. Этот процесс называется упаковкой-преобразованием, а обратный процесс называется распаковки-преобразования. Упаковка-преобразование и распаковка-преобразование позволяют любой тип обрабатывается как объект.  
  
 Несмотря на то что <xref:System.ValueType> является неявным базовым классом для типов значений, не удается создать класс, наследующий от <xref:System.ValueType> напрямую. Вместо этого отдельные компиляторы предоставляют ключевое слово языка или создании (например, `struct` в C# и `Structure`...`End Structure` в Visual Basic) для поддержки создания типов значений.  
  
 Помимо выступает в роли базового класса для типов значений в платформе .NET Framework <xref:System.ValueType> структура обычно не используется непосредственно в коде. Тем не менее он может использоваться как параметр в вызовы метода ограничить возможные аргументы для типов значений, а не все объекты, или разрешить метод для обработки нескольких типов другое значение. В следующем примере показан способ <xref:System.ValueType> предотвращает ссылочные типы, передаваемые в методы. Он определяет класс с именем `Utility` , содержащий четыре метода: `IsNumeric`, который указывает, является ли его аргумент число; `IsInteger`, который указывает, является ли его аргумент является целым числом. `IsFloat`, который указывает, является ли его аргумент число с плавающей запятой; и `Compare`, показывающее связь между двух числовых значений. В каждом случае параметры метода имеют тип <xref:System.ValueType>, и предотвращается ссылочные типы, передаваемые в методы.  
  
 [!code-csharp[System.ValueType.Structure#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.valuetype.structure/cs/example1.cs#1)]
 [!code-vb[System.ValueType.Structure#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.valuetype.structure/vb/example1.vb#1)]  
  
 В следующем примере демонстрируется вызовы методов `Utility` класса.  
  
 [!code-csharp[System.ValueType.Structure#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.valuetype.structure/cs/example1.cs#2)]
 [!code-vb[System.ValueType.Structure#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.valuetype.structure/vb/example1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Object" />
    <altmember cref="T:System.Enum" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ValueType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ValueType();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.ValueType" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="valueType.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Объект для сравнения с текущим экземпляром.</param>
        <summary>Указывает, равен ли этот экземпляр заданному объекту.</summary>
        <returns>Значение <see langword="true" />, если <paramref name="obj" /> и данный экземпляр относятся к одному типу и представляют одинаковые значения; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ValueType.Equals%28System.Object%29?displayProperty=nameWithType> Переопределения методов <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> и предоставляет реализацию по умолчанию равенства значений для всех типов значений в .NET Framework.  
  
 Если ни одно из полей текущего экземпляра и `obj` являются ссылочными типами, <xref:System.ValueType.Equals%2A> метод выполняет байт за байтом сравнение двух объектов в памяти. В противном случае он использует отражение для сравнения в соответствующих полях `obj` и данным экземпляром.  
  
> [!TIP]
>  Особенно в том случае, если тип значения содержит поля, которые являются ссылочными типами, должны переопределять <xref:System.ValueType.Equals%28System.Object%29> метод. Это может повысить производительность и более точно представить значение равенства для типа.  
  
## <a name="notes-for-the-includewrtincludeswrt-mdmd"></a>Заметки о [!INCLUDE[wrt](~/includes/wrt-md.md)]  
 При вызове <xref:System.ValueType.Equals%2A> метод [!INCLUDE[wrt](~/includes/wrt-md.md)] структуры, он предоставляет поведение по умолчанию для типов значений, которые не переопределяют <xref:System.ValueType.Equals%2A>. Это является частью возможностей .NET Framework для [!INCLUDE[wrt](~/includes/wrt-md.md)] (см. [.NET Framework поддерживает для приложений магазина Windows и среды выполнения Windows](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)). [!INCLUDE[wrt](~/includes/wrt-md.md)] структуры не может переопределить <xref:System.ValueType.Equals%2A>, даже если они выполняется написаны на C# или Visual Basic, так как они не могут иметь методы. (Кроме того, структуры в [!INCLUDE[wrt](~/includes/wrt-md.md)] сам не наследуют <xref:System.ValueType>.) При этом они будут иметь <xref:System.ValueType.ToString%2A>, <xref:System.ValueType.Equals%2A>, и <xref:System.ValueType.GetHashCode%2A> методов при их использовании в коде C# или Visual Basic и .NET Framework предоставляет поведение по умолчанию для этих методов.  
  
   
  
## Examples  
 В следующем примере показано, как <xref:System.ValueType.Equals%2A> метод может быть переопределен типом производное значение.  
  
 [!code-cpp[ValueType.Equals Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/ValueType.Equals Example/CPP/source.cpp#1)]
 [!code-csharp[ValueType.Equals Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/ValueType.Equals Example/CS/source.cs#1)]
 [!code-vb[ValueType.Equals Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ValueType.Equals Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="valueType.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает хэш-код данного экземпляра.</summary>
        <returns>32-разрядное целое число со знаком, являющееся хэш-кодом для данного экземпляра.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ValueType.GetHashCode%2A> Метод применяется к типам, производным от <xref:System.ValueType>. Одно или несколько полей производного типа используется для вычисления возвращаемого значения. При вызове метода производного типа `GetHashCode` метод, возвращаемое значение не подходит для использования в качестве ключа в хэш-таблице. Кроме того при изменении значения одного или нескольких из этих полей, возвращаемое значение может оказаться непригодным для использования в качестве ключа в хэш-таблице. В любом случае рекомендуется написать собственную реализацию <xref:System.ValueType.GetHashCode%2A> метода, более точно представляет концепцию хэш-код для типа.  
  
 Дополнительные сведения см. в разделах <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> и <xref:System.Collections.Hashtable?displayProperty=nameWithType>.  
  
## <a name="notes-for-the-includewrtincludeswrt-mdmd"></a>Заметки о [!INCLUDE[wrt](~/includes/wrt-md.md)]  
 При вызове <xref:System.ValueType.GetHashCode%2A> метод [!INCLUDE[wrt](~/includes/wrt-md.md)] структуры, он предоставляет поведение по умолчанию для типов значений, которые не переопределяют <xref:System.ValueType.GetHashCode%2A>. Это является частью возможностей .NET Framework для [!INCLUDE[wrt](~/includes/wrt-md.md)] (см. [.NET Framework поддерживает для приложений магазина Windows и среды выполнения Windows](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)). [!INCLUDE[wrt](~/includes/wrt-md.md)] структуры не может переопределить <xref:System.ValueType.GetHashCode%2A>, даже если они выполняется написаны на C# или Visual Basic, так как они не могут иметь методы. (Кроме того, структуры в [!INCLUDE[wrt](~/includes/wrt-md.md)] сам не наследуют <xref:System.ValueType>.) При этом они будут иметь <xref:System.ValueType.ToString%2A>, <xref:System.ValueType.Equals%2A>, и <xref:System.ValueType.GetHashCode%2A> методов при их использовании в коде C# или Visual Basic и .NET Framework предоставляет поведение по умолчанию для этих методов.  
  
   
  
## Examples  
 В следующем примере показано, как <xref:System.ValueType.GetHashCode%2A> метод может быть переопределен типом производное значение.  
  
 [!code-cpp[ValueType.Equals Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/ValueType.Equals Example/CPP/source.cpp#1)]
 [!code-csharp[ValueType.Equals Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/ValueType.Equals Example/CS/source.cs#1)]
 [!code-vb[ValueType.Equals Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ValueType.Equals Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="valueType.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает полное имя типа этого экземпляра.</summary>
        <returns>Полное имя типа.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> Переопределения методов <xref:System.Object.ToString%2A?displayProperty=nameWithType> метода и обеспечивает реализацию по умолчанию `ToString` метод для типов значений. (Типы значений являются типы, определенные `struct` ключевого слова в C#, а также по `Structure`... `End Structure` построения в Visual Basic.) Функционально, однако реализация является то же самое, что и <xref:System.Object.ToString%2A?displayProperty=nameWithType>: метод возвращает полное имя типа.  
  
 Значения типов, определенных `struct` ключевого слова C# и `Structure`... `End Structure` конструкции в Visual Basic обычно переопределяется <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> метод, чтобы обеспечить более понятное строковое представление типа значения. В следующем примере демонстрируется это различие. Он определяет два типа значений `EmployeeA` и `EmployeeB`, создается экземпляр каждого и вызывает его `ToString` метод. Поскольку `EmployeeA` структуры не переопределяет <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> метод, он отображает только полное имя типа. `EmployeeB.ToString` Метод, с другой стороны, предоставляет значимую информацию об объекте.  
  
 [!code-csharp[System.ValueType.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ValueType.ToString/cs/ToString2.cs#1)]
 [!code-vb[System.ValueType.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ValueType.ToString/vb/ToString2.vb#1)]  
  
 Обратите внимание, что, несмотря на то, что типы перечисления также являются типами значений, они являются производными от <xref:System.Enum> класс, переопределяющий <xref:System.ValueType.ToString%2A?displayProperty=nameWithType>.  
  
## <a name="notes-for-the-windows-runtime"></a>Примечания для среды выполнения Windows  
 При вызове <xref:System.ValueType.ToString%2A> метод [!INCLUDE[wrt](~/includes/wrt-md.md)] структуры, он предоставляет поведение по умолчанию для типов значений, которые не переопределяют <xref:System.ValueType.ToString%2A>. Это является частью возможностей .NET Framework для [!INCLUDE[wrt](~/includes/wrt-md.md)] (см. [.NET Framework поддерживает для приложений магазина Windows и среды выполнения Windows](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)). [!INCLUDE[wrt](~/includes/wrt-md.md)] структуры не может переопределить <xref:System.ValueType.ToString%2A>, даже если они выполняется написаны на C# или Visual Basic, так как они не могут иметь методы. (Кроме того, структуры в [!INCLUDE[wrt](~/includes/wrt-md.md)] сам не наследуют <xref:System.ValueType>.) При этом они будут иметь <xref:System.ValueType.ToString%2A>, <xref:System.ValueType.Equals%2A>, и <xref:System.ValueType.GetHashCode%2A> методов при их использовании в коде C# или Visual Basic и .NET Framework предоставляет поведение по умолчанию для этих методов.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>