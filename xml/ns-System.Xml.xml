<Namespace Name="System.Xml">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b9d93fd68b550f524fd02f3cb0af6df61ab8e864" />
    <Meta Name="ms.sourcegitcommit" Value="81d387351cc43c342755705908f4a5eb8af153d3" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="06/05/2018" />
    <Meta Name="ms.locfileid" Value="34758854" />
  </Metadata>
  <Docs>
    <summary>Пространство имен <see cref="N:System.Xml" /> предоставляет основанную на стандартах поддержку обработки XML.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="std"></a>   
## <a name="supported-standards"></a>Поддерживаемые стандарты  
 <xref:System.Xml> Пространство имен поддерживает эти стандарты:  
  
-   XML 1.0, включая поддержку DTD: [http://www.w3.org/TR/2006/REC-xml-20060816/](http://www.w3.org/TR/2006/REC-xml-20060816/)  
  
-   Пространства имен XML, как поток уровне и DOM: [http://www.w3.org/TR/REC-xml-names/](http://www.w3.org/TR/REC-xml-names/)  
  
-   XML-схемы: [http://www.w3.org/2001/XMLSchema](http://www.w3.org/2001/XMLSchema)  
  
-   Выражения XPath. [http://www.w3.org/TR/xpath](http://www.w3.org/TR/xpath)  
  
-   XSLT-преобразования: [http://www.w3.org/TR/xslt](http://www.w3.org/TR/xslt)  
  
-   Ядром DOM уровня 1. [http://www.w3.org/TR/REC-DOM-Level-1/](http://www.w3.org/TR/REC-DOM-Level-1/)  
  
-   DOM Level 2 Core: [http://www.w3.org/TR/DOM-Level-2/](http://www.w3.org/TR/DOM-Level-2/)  
  
 См. в разделе [отличия от спецификации W3C](#diff) в двух случаях, в которых классы XML отличаются от рекомендаций W3C.  
  
<a name="related"></a>   
## <a name="related-namespaces"></a>Связанных пространств имен  
 .NET Framework также предоставляет другие пространства имен для операций, связанных с XML. Список, описаний и ссылки см. в разделе [пространства имен System.Xml](http://msdn.microsoft.com/library/gg145036.aspx) веб-страницы.  
  
<a name="async"></a>   
## <a name="processing-xml-asynchronously"></a>Асинхронную обработку XML  
 <xref:System.Xml.XmlReader?displayProperty=nameWithType> И <xref:System.Xml.XmlWriter?displayProperty=nameWithType> классы содержат несколько асинхронных методов, которые основаны на. Эти методы можно определить по строке «Async» в конце их имена. С помощью этих методов можно написать асинхронный код, которая похожа на синхронный код и существующего кода синхронного легко можно перенести в асинхронный код.  
  
-   Используйте асинхронные методы в приложениях которого поток задержек в сети. Не используйте асинхронные API для потока памяти или операций чтения и записи потока локального файла. Входной поток <xref:System.Xml.XmlTextReader>, и <xref:System.Xml.XmlTextWriter> должны поддерживать также асинхронные операции. В противном случае потоки будут блокироваться операциями ввода-вывода.  
  
-   Мы не рекомендуем смешивание синхронные и асинхронные вызовы, так как возможно, следует использовать `await` ключевое слово или используйте синхронные API, где необходима асинхронной.  
  
-   Не устанавливайте <xref:System.Xml.XmlReaderSettings.Async%2A?displayProperty=nameWithType> или <xref:System.Xml.XmlWriterSettings.Async%2A?displayProperty=nameWithType> флаг `true` , если вы не собираетесь использовать асинхронный метод.  
  
-   Если вы забыли указать `await` ключевое слово, при вызове асинхронного метода, результаты являются недетерминированными: можно получить нужный результат или исключение.  
  
-   Когда <xref:System.Xml.XmlReader> объекта считывает большой текстовый узел, он может кэшировать только частичные текстовое значение и вернуть текстового узла, поэтому получение <xref:System.Xml.XmlReader.Value%2A?displayProperty=nameWithType> свойство может быть заблокирован с помощью операции ввода-вывода. Используйте <xref:System.Xml.XmlReader.GetValueAsync%2A?displayProperty=nameWithType> метод возвращается текстовое значение в асинхронном режиме, или используйте <xref:System.Xml.XmlReader.ReadValueChunkAsync%2A?displayProperty=nameWithType> метод для чтения больших текстовых блокировать фрагментами.  
  
-   При использовании <xref:System.Xml.XmlWriter> , вызовите <xref:System.Xml.XmlWriter.FlushAsync%2A?displayProperty=nameWithType> метод перед вызовом метода <xref:System.Xml.XmlWriter.Close%2A?displayProperty=nameWithType> для предотвращения блокировки операцию ввода-вывода.  
  
<a name="diff"></a>   
## <a name="differences-from-the-w3c-specs"></a>Отличия от спецификации W3C  
 В двух случаях, включающих ограничения компонентов схемы группы моделей <xref:System.Xml> пространство имен отличается от рекомендаций W3C.  
  
 **Согласованность объявления элементов:**  
  
 В некоторых случаях, когда используются группы подстановки <xref:System.Xml> реализации не удовлетворяет ограничению «Схемы компонент ограничение: элемент объявления согласованное, «описанный в [ограничения компонентов схемы группы моделей ](http://go.microsoft.com/fwlink/?LinkId=137029) раздел спецификации консорциума W3C.  
  
 Например следующая схема включает элементы, которые имеют одинаковое имя, но используются различные типы в той же модели содержимого и группы подстановки. Это может вызвать ошибку, но <xref:System.Xml> компилирует и проверяет схему без ошибок.  
  
```xml  
<?xml version="1.0" encoding="utf-8" ?>   
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">  
  
   <xs:element name="e1" type="t1"/>  
   <xs:complexType name="t1"/>  
  
   <xs:element name="e2" type="t2" substitutionGroup="e1"/>  
      <xs:complexType name="t2">  
         <xs:complexContent>  
            <xs:extension base="t1">  
         </xs:extension>  
      </xs:complexContent>  
   </xs:complexType>  
  
   <xs:complexType name="t3">  
      <xs:sequence>  
         <xs:element ref="e1"/>  
         <xs:element name="e2" type="xs:int"/>  
      </xs:sequence>  
   </xs:complexType>  
</xs:schema>  
```  
  
 В этой схеме тип `t3` содержит последовательность элементов. По причине подстановки ссылка из последовательности на элемент `e1` может привести к образованию либо элемента `e1` типа `t1`, либо элемента `e2` типа `t2`. В последнем случае приведет к появлению двух последовательных `e2` элементов, где он типа `t2` , а другой — типа `xs:int`.  
  
 **Однозначное соответствие примитивов:**  
  
 При следующих условиях <xref:System.Xml> реализации не удовлетворяет ограничению «схем компонентов ограничение: уникальный примитивов, «описанный в [ограничения компонентов схемы группы моделей для](http://go.microsoft.com/fwlink/?LinkId=137029) раздела спецификации W3C.  
  
-   Один из элементов в группе ссылается на другой элемент.  
  
-   Элемент, на который указывает ссылка, является головным элементом группы подстановки.  
  
-   Группа подстановки содержит элемент, который имеет то же имя, как один из элементов в группе.  
  
-   Количество элементов элемента, который ссылается на элемент заголовка группы подстановки и элемент с тем же именем, как элемент группы подстановки не является фиксированным (minOccurs < maxOccurs).  
  
-   Определение элемента, который ссылается на группы подстановки предшествует определение элемента с тем же именем, как элемент группы подстановки.  
  
 Например, в нижеприведенной схеме модель содержимого неоднозначна и может привести к возникновению ошибки компиляции, но <xref:System.Xml> компилирует схему без ошибок.  
  
```xml  
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">  
  
  <xs:element name="e1" type="xs:int"/>  
  <xs:element name="e2" type="xs:int" substitutionGroup="e1"/>  
  
  <xs:complexType name="t3">  
    <xs:sequence>  
      <xs:element ref="e1" minOccurs="0" maxOccurs="1"/>  
      <xs:element name="e2" type="xs:int" minOccurs="0" maxOccurs="1"/>  
    </xs:sequence>  
  </xs:complexType>  
  
  <xs:element name="e3" type="t3"/>  
</xs:schema>  
```  
  
 При попытке проверить следующий XML-код по схеме выше, возникнет ошибка проверки со следующим сообщением: «элемент «e3» имеет недопустимый дочерний элемент «e2».» и <xref:System.Xml.Schema.XmlSchemaValidationException> будет создано исключение.  
  
```xml  
<e3>  
  <e2>1</e2>  
  <e2>2</e2>  
</e3>  
```  
  
 Чтобы обойти эту проблему, можно переключить объявлениям элементов в документ XSD. Пример:  
  
```xml  
<xs:sequence>  
  <xs:element ref="e1" minOccurs="0" maxOccurs="1"/>  
  <xs:element name="e2" type="xs:int" minOccurs="0" maxOccurs="1"/>  
</xs:sequence>  
```  
  
 становится  
  
```xml  
<xs:sequence>  
  <xs:element name="e2" type="xs:int" minOccurs="0" maxOccurs="1"/>  
  <xs:element ref="e1" minOccurs="0" maxOccurs="1"/>  
</xs:sequence>  
```  
  
 Вот другой пример той же проблемы:  
  
```xml  
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">  
   <xs:element name="e1" type="xs:string"/>  
   <xs:element name="e2" type="xs:string" substitutionGroup="e1"/>  
  
   <xs:complexType name="t3">  
      <xs:sequence>  
         <xs:element ref="e1" minOccurs="0" maxOccurs="1"/>  
         <xs:element name="e2" type="xs:int" minOccurs="0" maxOccurs="1"/>  
      </xs:sequence>  
   </xs:complexType>  
   <xs:element name="e3" type="t3"/>  
</xs:schema>  
```  
  
 При попытке проверить следующий XML-код по схеме выше, проверка завершается неудачей со следующим исключением: «необработанное исключение: System.Xml.Schema.XmlSchemaValidationException: недопустимый элемент el «e2» - недопустимое значение «abc» в соответствии с его типа данных "http://www.w3.org/2001/XMLSchema:int"-строка «abc» не является допустимым значением Int32.»
  
```xml  
<e3><e2>abc</e2></e3>  
```  
  
<a name="security"></a>   
## <a name="security-considerations"></a>Замечания по безопасности  
 Типы и члены в <xref:System.Xml> используют пространство имен [систему безопасности .NET](~/docs/standard/security/index.md). В следующих разделах рассматриваются вопросы безопасности, относящиеся к XML-технологии.
  
 Также Обратите внимание, что при использовании <xref:System.Xml> типов и членов, если XML содержит данные, имеющие потенциальных аспекты обеспечения конфиденциальности, вам необходимо реализовать приложение в результате которого соблюдает конфиденциальность пользователей.
  
 **Внешний доступ**  
  
 Несколько XML-технологий позволяют получать в ходе обработки другие документы. Например, определение типа документа (DTD) может находиться в документе, для которого выполняется синтаксический анализ. DTD может также находиться во внешнем документе, на который ссылается анализируемый документ. Язык XSD и технологии XSLT также позволяют включать сведения из других файлов. Эти внешние ресурсы может вызвать некоторые проблемы безопасности. Например будет необходимо, чтобы приложение извлекает файлы только из надежных сайтов, и что файл извлекается не содержит вредоносные данные.  
  
 <xref:System.Xml.XmlUrlResolver> Класс используется для загрузки XML-документов, а также для разрешения внешних ресурсов, таких как сущности, DTD или схемы и импортировать или директивы #include.  
  
 Можно переопределить этот класс и укажите <xref:System.Xml.XmlResolver> объект для использования. Использовать класс <xref:System.Xml.XmlSecureResolver> рекомендуется, если вам необходимо открыть ресурс, которым вы не управляете или к которому нет доверия. Класс <xref:System.Xml.XmlSecureResolver> упаковывает объект <xref:System.Xml.XmlResolver> и позволяет ограничить ресурсы, доступные для базового объекта <xref:System.Xml.XmlResolver>.  
  
 **Отказ в обслуживании**  
  
 Следующие сценарии считаются менее уязвимыми для атак типа «отказ в обслуживании», так как классы <xref:System.Xml> обеспечивают средства защиты от таких атак.  
  
-   Синтаксический анализ текстовых XML-данных.  
  
-   Синтаксический анализ двоичных данных XML, если двоичных XML-данных был создан в Microsoft SQL Server.  
  
-   Запись XML-документов и фрагментов из источников данных в файловую систему, потоки, <xref:System.IO.TextWriter> или <xref:System.Text.StringBuilder>.  
  
-   Загрузка документов в объект DOM, если используется объект <xref:System.Xml.XmlReader>, а свойство <xref:System.Xml.XmlReaderSettings.DtdProcessing%2A?displayProperty=nameWithType> имеет значение <xref:System.Xml.DtdProcessing.Prohibit?displayProperty=nameWithType>.  
  
-   Навигация по объекту DOM.  
  
 Приведенные ниже сценарии использовать не рекомендуются, если есть угроза атак типа «отказ в обслуживании» или при работе в ненадежной среде.  
  
-   Обработка DTD.  
  
-   Обработка схем. Сюда относится добавление в коллекцию схем схемы без доверия, компиляция схемы без доверия и проверка с использованием схемы без доверия.  
  
-   Обработка XSLT.  
  
-   Синтаксический анализ произвольного потока предоставленных пользователем двоичных XML-данных.  
  
-   DOM-операции, например запросы, изменение, перемещение поддеревьев между документами и сохранение объектов DOM.  
  
 Если вас интересуют отказ в обслуживании, или если вы имеете дело с ненадежными источниками, не включайте обработку DTD. Эта возможность отключена по умолчанию на <xref:System.Xml.XmlReader> объектов, которые <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> методом.  
  
> [!NOTE]
>  Класс <xref:System.Xml.XmlTextReader> по умолчанию разрешает обработку DTD. Чтобы отключить эту функцию, воспользуйтесь свойством <xref:System.Xml.XmlTextReader.DtdProcessing%2A?displayProperty=nameWithType>.  
  
 Если обработка DTD включена, можно использовать <xref:System.Xml.XmlSecureResolver> класс для ограничения ресурсов, <xref:System.Xml.XmlReader> доступен. Можно также создать приложение, чтобы обработка XML памяти и ограниченное время. Например можно настроить ограничения времени ожидания в приложении ASP.NET.  
  
 **Рекомендации по обработке**  
  
 XML-документы могут содержать ссылки на другие файлы, поэтому трудно определить, сколько вычислительных ресурсов потребуется для синтаксического анализа XML-документа. Например, XML-документы могут содержать DTD. Если DTD содержит сущности или сложные модели содержимого, то для синтаксического анализа документа может потребоваться слишком много времени.  
  
 При использовании <xref:System.Xml.XmlReader> можно ограничить размер документа, который может быть подвергнут синтаксическому анализу, задав свойство <xref:System.Xml.XmlReaderSettings.MaxCharactersInDocument%2A?displayProperty=nameWithType>. Можно ограничить число символов, появляющихся в результате раскрытия сущностей, задав свойство <xref:System.Xml.XmlReaderSettings.MaxCharactersFromEntities%2A?displayProperty=nameWithType>. Примеры настройки этих свойств см. в соответствующих разделах справки.  
  
 Технологии XSD и XSLT имеют дополнительные возможности, которые могут влиять на производительность при обработке. Например, можно построить схему XML, для обработки которой даже при сравнительно небольшом размере документа потребуется значительное время. Кроме того, можно внедрять блоки скриптов в таблицу стилей XSLT. Обоих случаях представляют потенциальную угрозу безопасности вашему приложению.  
  
 При создании приложения, использующего <xref:System.Xml.Xsl.XslCompiledTransform> класса, необходимо помнить о следующих особенностях и их последствиях:  
  
-   Скрипты XSLT отключены по умолчанию. Скрипты XSLT следует включать только при необходимости в поддержке скриптов и при работе в полностью доверенной среде.  
  
-   Функция XSLT `document()` отключена по умолчанию. Если функция `document()` включена, ограничьте ресурсы, к которым можно получить доступ путем передачи объекта <xref:System.Xml.XmlSecureResolver> методу <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A?displayProperty=nameWithType>.  
  
-   Объекты расширения по умолчанию включены. Если методу <xref:System.Xml.Xsl.XsltArgumentList> передается объект <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A?displayProperty=nameWithType>, содержащий объекты расширения, то используются объекты расширения.  
  
-   Таблицы стилей XSLT могут содержать ссылки на другие файлы и внедренные блоки скриптов. Этим может воспользоваться злонамеренный пользователь: он может передать такие данные или таблицы стилей, которые при выполнении будут задействовать все доступные ресурсы компьютера.  
  
-   Приложения XSLT, работающие в смешанной доверенной среде может привести к подделке таблицы стилей. Например, злонамеренный пользователь может загрузить объект с вредоносной таблицей стилей и передать ее другому пользователю, который впоследствии вызовет метод <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A?displayProperty=nameWithType> и выполнит преобразование.  
  
 Чтобы избежать этих проблем безопасности, не следует включатьскрипты или функцию `document()`, если таблица стилей поступает не из надежного источника, а также не следует принимать объекты <xref:System.Xml.Xsl.XslCompiledTransform>, таблицы стилей XSLT или исходные XML-данные из ненадежных источников.  
  
 **Обработка исключений**  
  
 Исключения, вызванные низкоуровневые компоненты могут содержать сведения о пути, не требуется доступ к приложению. Приложения должны перехватывать исключения и обрабатывать их соответствующим образом.  
  
 ]]></format>
    </remarks>
    <altmember cref="N:System.Xml.Xsl" />
    <altmember cref="N:System.Xml.Schema" />
    <altmember cref="N:System.Xml.Linq" />
  </Docs>
</Namespace>